// /// Generated by gen_maters.dart, please don't edit!

final noteInfo = (
  cells: [
    /// ()
    (
      cellType: 'header',
      offset: 0,
      end: 330,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ()
    (
      cellType: 'body',
      offset: 330,
      end: 333,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' # 异步  ## F)
    (
      cellType: 'body',
      offset: 411,
      end: 461,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ({Future<String> bomb() async {)
    (
      cellType: 'body',
      offset: 539,
      end: 1398,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'Pen.runInCurrentCell',
          offset: 906,
          end: 1390,
        )
      ],
    ),

    /// (print.markdown(r''' ## Isalted)
    (
      cellType: 'body',
      offset: 1476,
      end: 1633,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ({send123(sendPort) async {for )
    (
      cellType: 'body',
      offset: 1711,
      end: 2410,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'Pen.runInCurrentCell',
          offset: 1914,
          end: 2405,
        )
      ],
    ),

    /// ()
    (
      cellType: 'tail',
      offset: 2410,
      end: 2412,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    )
  ],
  encodedCode:
      "aW1wb3J0ICdkYXJ0Omlzb2xhdGUnOwoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpub3RlL3BhZ2VfY29yZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm5vdGVfYXBwL25vdGVfYXBwLmRhcnQnOwoKTm90ZUNvbmZQYXJ0IHBhZ2UgPSBOb3RlQ29uZlBhcnQoCiAgc2hvcnRUaXRsZTogIuW8guatpWFzeW5jIiwKICBsYXlvdXQ6IExheW91dHMuZGVmYXVsdExheW91dChkZWZhdWx0Q29kZUV4cGFuZDogZmFsc2UpLAogIGJ1aWxkZXI6IGJ1aWxkLAopOwoKYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQsIFBlbiBwcmludCkgYXN5bmMgewogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyDlvILmraUKCiMjIEZ1dHVyZQogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHsKICAgIEZ1dHVyZTxTdHJpbmc+IGJvbWIoKSBhc3luYyB7CiAgICAgIHByaW50KCJzIik7CiAgICAgIHJldHVybiBGdXR1cmUuZGVsYXllZChEdXJhdGlvbihzZWNvbmRzOiAzKSwgKCkgPT4gImJvbmchISEiKTsKICAgIH0KCiAgICAvLyBwcmludC5ydW5JbkN1cnJlbnRDZWxsKChwcmludCkgewogICAgLy8gICBkZWJ1Z1ByaW50KCJwcHAgJHtwcmludH0iKTsKICAgIC8vICAgZGVidWdQcmludCgicHBwLS0tICR7cHJpbnQucGVuLmNlbGxzfSIpOwogICAgLy8KICAgIC8vICAgcHJpbnQoRmlsbGVkQnV0dG9uKG9uUHJlc3NlZDogKCkge30sIGNoaWxkOiBjb25zdCBUZXh0KCLmjInlkI4z56eS5ZCO54iG54K4IikpKTsKICAgIC8vIH0pOwoKICAgIC8vCiAgICBwcmludC5ydW5JbkN1cnJlbnRDZWxsKChwcmludCkgewogICAgICBkZWJ1Z1ByaW50KCJwcHAgJHtwcmludH0iKTsKICAgICAgZGVidWdQcmludCgicHBwLS0tICR7cHJpbnQucGVuLmNlbGxzfSIpOwoKICAgICAgb25QcmVzc2VkKCkgYXN5bmMgewogICAgICAgIHZhciBtc2cgPSBhd2FpdCBib21iKCk7CiAgICAgICAgLy8gdG9kbyDov5nkuKpwcmludOWcqCBhc3luY+aXtu+8jOS8muaJk+WIsOacgOWQjuS4gOS4qmNlbGwKICAgICAgICBwcmludChtc2cpOwogICAgICAgIC8vIGRlYnVnUHJpbnQoInBwcDIgJHtwcmludC5oYXNoQ29kZX0iKTsKICAgICAgICAvLyBkZWJ1Z1ByaW50KCJwcHAyLS0tICR7cHJpbnQucGVuLmNlbGxzfSIpOwogICAgICB9CgogICAgICBwcmludChGaWxsZWRCdXR0b24oCiAgICAgICAgICBvblByZXNzZWQ6IG9uUHJlc3NlZC4uc2FtcGxlQ29kZVN0ciA9ICJvblByZXNzZWQiLAogICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoIuaMieWQjjPnp5LlkI7niIbngrgiKSkpOwogICAgfSk7CiAgfQoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIElzYWx0ZWQKCndlYiDmqKHlvI/kuI3mlK/mjIEgSXNvbGF0ZWTvvIzlpoLmnpzov5DooYzlnKh3ZWLmqKHlvI/kuIvvvIzmraTojIPkvovlsIbmiqXplJkKCkVycm9yOiBVbnN1cHBvcnRlZCBvcGVyYXRpb246IGRhcnQ6aXNvbGF0ZSBpcyBub3Qgc3VwcG9ydGVkIG9uIGRhcnQ0d2ViCiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgewogICAgc2VuZDEyMyhzZW5kUG9ydCkgYXN5bmMgewogICAgICBmb3IgKHZhciBtZXNzYWdlIGluIFsiMSIsICIyIiwgIjMiXSkgewogICAgICAgIChzZW5kUG9ydCBhcyBTZW5kUG9ydCkuc2VuZChtZXNzYWdlKTsKICAgICAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChjb25zdCBEdXJhdGlvbihzZWNvbmRzOiAxKSk7CiAgICAgIH0KICAgIH0KCiAgICBwcmludC5ydW5JbkN1cnJlbnRDZWxsKChwcmludCkgewogICAgICBvblByZXNzZWQoKSBhc3luYyB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIFJlY2VpdmVQb3J0IHJlY2VpdmVQb3J0ID0gUmVjZWl2ZVBvcnQoKTsKICAgICAgICAgIElzb2xhdGUuc3Bhd24oc2VuZDEyMywgcmVjZWl2ZVBvcnQuc2VuZFBvcnQpOwoKICAgICAgICAgIHJlY2VpdmVQb3J0Lmxpc3RlbigobWVzc2FnZSkgewogICAgICAgICAgICBwcmludCgicmVjZWl2ZSA6ICRtZXNzYWdlIik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBwcmludCgiZXJyb3I6ICRlIik7CiAgICAgICAgfQogICAgICB9CgogICAgICBwcmludChGaWxsZWRCdXR0b24oCiAgICAgICAgICBvblByZXNzZWQ6IG9uUHJlc3NlZC4uc2FtcGxlQ29kZVN0ciA9ICJvblByZXNzZWQiLAogICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoIuW8gOWni++8jOavj+malOS4gOenkuWPkemAgTHvvIwy77yMMyIpKSk7CiAgICB9KTsKICB9Cn0K"
);
