// /// Generated by gen_maters.dart, please don't edit!

import 'package:note/page_core.dart';
// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = NoteInfo(
  meta: page,
  source: NoteSource(
      header: CodeBlock(offset: 0, end: 312, statementCount: 0),
      body: [
        /// ()
        CodeBlock(offset: 350, end: 353, statementCount: 0),

        /// (pen.markdown(r''' ## AppBar  一)
        CodeBlock(offset: 353, end: 479, statementCount: 1),

        /// ()
        CodeBlock(offset: 479, end: 483, statementCount: 0),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 483, end: 1142, statementCount: 1),

        /// ()
        CodeBlock(offset: 1142, end: 1146, statementCount: 0),

        /// (pen.markdown(r''' ## BottomApp)
        CodeBlock(offset: 1146, end: 1297, statementCount: 1),

        /// ()
        CodeBlock(offset: 1297, end: 1305, statementCount: 0),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 1305, end: 2007, statementCount: 1),

        /// ()
        CodeBlock(offset: 2007, end: 2011, statementCount: 0),

        /// (pen.markdown(r'''    ## ~~Bott)
        CodeBlock(offset: 2011, end: 2367, statementCount: 1),

        /// ()
        CodeBlock(offset: 2367, end: 2371, statementCount: 0),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 2371, end: 2980, statementCount: 1),

        /// ()
        CodeBlock(offset: 2980, end: 2983, statementCount: 0),

        /// (pen.markdown(r''' NavigationBa)
        CodeBlock(offset: 2983, end: 3091, statementCount: 1),

        /// ()
        CodeBlock(offset: 3091, end: 3095, statementCount: 0),

        /// (pen.cell((context, print) {var)
        CodeBlock(offset: 3095, end: 4208, statementCount: 1),

        /// ()
        CodeBlock(offset: 4208, end: 4212, statementCount: 0),

        /// (pen.markdown(r''' ## Navigatio)
        CodeBlock(offset: 4212, end: 4547, statementCount: 1),

        /// (var navigationRail$Mate = Navi)
        CodeBlock(offset: 4547, end: 5422, statementCount: 1),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 5422, end: 5807, statementCount: 1),

        /// ()
        CodeBlock(offset: 5807, end: 5811, statementCount: 0),

        /// (pen.markdown(r''' ## TabBar  >)
        CodeBlock(offset: 5811, end: 6300, statementCount: 1),

        /// ()
        CodeBlock(offset: 6300, end: 6304, statementCount: 0),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 6304, end: 6947, statementCount: 1),

        /// ()
        CodeBlock(offset: 6947, end: 6951, statementCount: 0),

        /// (pen.markdown(r'''  再来看看加了TabVi)
        CodeBlock(offset: 6951, end: 7009, statementCount: 1),

        /// ()
        CodeBlock(offset: 7009, end: 7013, statementCount: 0),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 7013, end: 8174, statementCount: 1),

        /// ()
        CodeBlock(offset: 8174, end: 8178, statementCount: 0),

        /// (pen.markdown(""" 上面用法和[Navigat)
        CodeBlock(offset: 8178, end: 8432, statementCount: 1),

        /// ()
        CodeBlock(offset: 8432, end: 8436, statementCount: 0),

        /// (pen.markdown("""   ## SnackBar)
        CodeBlock(offset: 8436, end: 8485, statementCount: 1),

        /// ()
        CodeBlock(offset: 8485, end: 8489, statementCount: 0),

        /// (pen.cell((context, print) {onP)
        CodeBlock(offset: 8489, end: 9451, statementCount: 1),

        /// ()
        CodeBlock(offset: 9451, end: 9454, statementCount: 0),

        /// (pen.markdown(r''' ## ButtonBar)
        CodeBlock(offset: 9454, end: 9777, statementCount: 1),

        /// ()
        CodeBlock(offset: 9777, end: 9781, statementCount: 0),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 9781, end: 10160, statementCount: 1),

        /// ()
        CodeBlock(offset: 10160, end: 10164, statementCount: 0),

        /// (pen.markdown(r''' ## OverflowB)
        CodeBlock(offset: 10164, end: 10363, statementCount: 1),

        /// ()
        CodeBlock(offset: 10363, end: 10367, statementCount: 0),

        /// (pen.cell((context, print) {pri)
        CodeBlock(offset: 10367, end: 11439, statementCount: 1),

        /// ()
        CodeBlock(offset: 11439, end: 11443, statementCount: 0),

        /// (pen.markdown(r''' ## PlatformM)
        CodeBlock(offset: 11443, end: 11604, statementCount: 1),

        /// ()
        CodeBlock(offset: 11604, end: 11608, statementCount: 0),

        /// (pen.markdown(r''' ## MenuBar  )
        CodeBlock(offset: 11608, end: 11999, statementCount: 1),

        /// ()
        CodeBlock(offset: 11999, end: 12003, statementCount: 0),

        /// (pen.cell((context, print) {var)
        CodeBlock(offset: 12003, end: 12930, statementCount: 1),

        /// ()
        CodeBlock(offset: 12930, end: 12931, statementCount: 0)
      ],
      tail: CodeBlock(offset: 12932, end: 12933, statementCount: 0),
      code:
          """"""),
);
