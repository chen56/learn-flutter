// /// Generated by gen_maters.dart, please don't edit!

import 'package:note/page_core.dart';
// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = NoteInfo(
  meta: page,
  source: NoteSource(
      header: CodeBlock(offset: 0, end: 366, statementCount: 0),
      body: [
        /// (pen.markdown(r''' ## AppBar  ä¸€, pen.cell((context, print) {pri, pen.markdown(r''' ## BottomApp, ..., pen.markdown(r''' ## MenuBar  , pen.cell((context, print) {var)
        CodeBlock(offset: 366, end: 12947, statementCount: 25)
      ],
      tail: CodeBlock(offset: 12947, end: 12949, statementCount: 0),
      code:
          """"""),
);
