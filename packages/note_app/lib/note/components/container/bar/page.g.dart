// /// Generated by gen_maters.dart, please don't edit!

import 'package:note/page_core.dart';
// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = NoteInfo(
  meta: page,
  source: NoteSource(
      header: CodeBlock(offset: 0, end: 352, statementCount: 0),
      body: [
        /// (print.markdown(r''' ## AppBar )
        CodeBlock(offset: 352, end: 487, statementCount: 1),

        /// (print(SampleContent(AppBar$Mat)
        CodeBlock(offset: 531, end: 1134, statementCount: 1),

        /// (print.markdown(r''' ## BottomA)
        CodeBlock(offset: 1178, end: 1343, statementCount: 1),

        /// (print(SampleContent(BottomAppB)
        CodeBlock(offset: 1387, end: 2017, statementCount: 1),

        /// (print.markdown(r'''    ## ~~Bo)
        CodeBlock(offset: 2061, end: 2426, statementCount: 1),

        /// (print(SampleContent(Column$Mat)
        CodeBlock(offset: 2470, end: 3019, statementCount: 1),

        /// (print.markdown(r''' Navigation)
        CodeBlock(offset: 3063, end: 3180, statementCount: 1),

        /// (var currentPageIndex = 0;, flutter.Widget buildNavigation, print(SampleContent(StatefulBu)
        CodeBlock(offset: 3224, end: 4253, statementCount: 3),

        /// (print.markdown(r''' ## Navigat)
        CodeBlock(offset: 4297, end: 4644, statementCount: 1),

        /// (var navigationRail$Mate = Navi, print(SampleContent(Row$Mate(c)
        CodeBlock(offset: 4688, end: 5890, statementCount: 2),

        /// (print.markdown(r''' ## TabBar )
        CodeBlock(offset: 5934, end: 6432, statementCount: 1),

        /// (print(SampleContent(DefaultTab)
        CodeBlock(offset: 6476, end: 7055, statementCount: 1),

        /// (print.markdown(r''' 再来看看加了TabV)
        CodeBlock(offset: 7099, end: 7164, statementCount: 1),

        /// (print(SampleContent(DefaultTab)
        CodeBlock(offset: 7208, end: 8275, statementCount: 1),

        /// (print.markdown(""" 上面用法和[Navig)
        CodeBlock(offset: 8319, end: 8590, statementCount: 1),

        /// (onPressed() {flutter.ScaffoldM, print(SampleContent(SizedBox$M)
        CodeBlock(offset: 8634, end: 9516, statementCount: 2),

        /// (print.markdown(r''' ## ButtonB)
        CodeBlock(offset: 9560, end: 9891, statementCount: 1),

        /// (print(SampleContent(Container$)
        CodeBlock(offset: 9935, end: 10268, statementCount: 1),

        /// (print.markdown(r''' ## Overflo)
        CodeBlock(offset: 10312, end: 10519, statementCount: 1),

        /// (print(SampleContent(Container$)
        CodeBlock(offset: 10563, end: 11551, statementCount: 1),

        /// (print.markdown(r''' ## Platfor)
        CodeBlock(offset: 11595, end: 12130, statementCount: 1),

        /// (var click = () {flutter.showAb, print(SampleContent(MenuBar$Ma)
        CodeBlock(offset: 12174, end: 13014, statementCount: 2)
      ],
      tail: CodeBlock(offset: 13014, end: 13016, statementCount: 0),
      code:
          """"""),
);
