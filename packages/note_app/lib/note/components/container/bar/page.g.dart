// /// Generated by gen_maters.dart, please don't edit!

import 'package:note/page_core.dart';
// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = NoteInfo(
  meta: page,
  source: NoteSource(
      header: CodeBlock(offset: 0, end: 312, statementCount: 0),
      body: [
        /// ()
        CodeBlock(offset: 350, end: 353, statementCount: 0),

        /// (pen.markdown(r''' ## AppBar  一)
        CodeBlock(offset: 353, end: 479, statementCount: 1),

        /// (pen.printSample(AppBar$Mate(ti)
        CodeBlock(offset: 479, end: 1089, statementCount: 1),

        /// (pen.markdown(r''' ## BottomApp)
        CodeBlock(offset: 1089, end: 1240, statementCount: 1),

        /// (pen.printSample(BottomAppBar$M)
        CodeBlock(offset: 1240, end: 1870, statementCount: 1),

        /// (pen.markdown(r'''    ## ~~Bott)
        CodeBlock(offset: 1870, end: 2226, statementCount: 1),

        /// (pen.printSample(Column$Mate(ch)
        CodeBlock(offset: 2226, end: 2800, statementCount: 1),

        /// (pen.markdown(r''' NavigationBa)
        CodeBlock(offset: 2800, end: 2908, statementCount: 1),

        /// ({var currentPageIndex = 0; flu)
        CodeBlock(offset: 2908, end: 4049, statementCount: 1),

        /// (pen.markdown(r''' ## Navigatio)
        CodeBlock(offset: 4049, end: 4384, statementCount: 1),

        /// (var navigationRail$Mate = Navi, pen.printSample(Row$Mate(child)
        CodeBlock(offset: 4384, end: 5627, statementCount: 2),

        /// (pen.markdown(r''' ## TabBar  >)
        CodeBlock(offset: 5627, end: 6116, statementCount: 1),

        /// (pen.printSample(DefaultTabCont)
        CodeBlock(offset: 6116, end: 6691, statementCount: 1),

        /// (pen.markdown(r'''  再来看看加了TabVi)
        CodeBlock(offset: 6691, end: 6749, statementCount: 1),

        /// (pen.printSample(DefaultTabCont)
        CodeBlock(offset: 6749, end: 7812, statementCount: 1),

        /// (pen.markdown(""" 上面用法和[Navigat)
        CodeBlock(offset: 7812, end: 8066, statementCount: 1),

        /// ()
        CodeBlock(offset: 8066, end: 8070, statementCount: 0),

        /// (pen.markdown("""   ## SnackBar)
        CodeBlock(offset: 8070, end: 8119, statementCount: 1),

        /// ({onPressed() {flutter.Scaffold)
        CodeBlock(offset: 8119, end: 9114, statementCount: 1),

        /// (pen.markdown(r''' ## ButtonBar)
        CodeBlock(offset: 9114, end: 9437, statementCount: 1),

        /// (pen.printSample(Container$Mate)
        CodeBlock(offset: 9437, end: 9823, statementCount: 1),

        /// (pen.markdown(r''' ## OverflowB)
        CodeBlock(offset: 9823, end: 10022, statementCount: 1),

        /// (pen.printSample(Container$Mate)
        CodeBlock(offset: 10022, end: 11124, statementCount: 1),

        /// (pen.markdown(r''' ## PlatformM)
        CodeBlock(offset: 11124, end: 11285, statementCount: 1),

        /// ()
        CodeBlock(offset: 11285, end: 11289, statementCount: 0),

        /// (pen.markdown(r''' ## MenuBar  )
        CodeBlock(offset: 11289, end: 11680, statementCount: 1),

        /// ({var click = () {flutter.showA)
        CodeBlock(offset: 11680, end: 12583, statementCount: 1)
      ],
      tail: CodeBlock(offset: 12584, end: 12585, statementCount: 0),
      code:
          """"""),
);
