// /// Generated by gen_maters.dart, please don't edit!

import 'package:note/page_core.dart';
// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = NoteInfo(
  meta: page,
  source: NoteSource(
      header: CodeBlock(offset: 0, end: 352, statementCount: 0),
      body: [
        /// (print.markdown(r''' ## AppBar )
        CodeBlock(offset: 352, end: 487, statementCount: 1),

        /// (print(SampleContent(AppBar$Mat)
        CodeBlock(offset: 565, end: 1179, statementCount: 1),

        /// (print.markdown(r''' ## BottomA)
        CodeBlock(offset: 1257, end: 1422, statementCount: 1),

        /// (print(SampleContent(BottomAppB)
        CodeBlock(offset: 1500, end: 2130, statementCount: 1),

        /// (print.markdown(r'''    ## ~~Bo)
        CodeBlock(offset: 2208, end: 2573, statementCount: 1),

        /// (print(SampleContent(Column$Mat)
        CodeBlock(offset: 2651, end: 3230, statementCount: 1),

        /// (print.markdown(r''' Navigation)
        CodeBlock(offset: 3308, end: 3425, statementCount: 1),

        /// (var currentPageIndex = 0;, flutter.Widget buildNavigation, print(SampleContent(StatefulBu)
        CodeBlock(offset: 3503, end: 4572, statementCount: 3),

        /// (print.markdown(r''' ## Navigat)
        CodeBlock(offset: 4650, end: 4997, statementCount: 1),

        /// (var navigationRail$Mate = Navi, print(SampleContent(Row$Mate(c)
        CodeBlock(offset: 5075, end: 6287, statementCount: 2),

        /// (print.markdown(r''' ## TabBar )
        CodeBlock(offset: 6365, end: 6863, statementCount: 1),

        /// (print(SampleContent(DefaultTab)
        CodeBlock(offset: 6941, end: 7520, statementCount: 1),

        /// (print.markdown(r''' 再来看看加了TabV)
        CodeBlock(offset: 7598, end: 7663, statementCount: 1),

        /// (print(SampleContent(DefaultTab)
        CodeBlock(offset: 7741, end: 8808, statementCount: 1),

        /// (print.markdown(""" 上面用法和[Navig)
        CodeBlock(offset: 8886, end: 9157, statementCount: 1),

        /// (onPressed() {flutter.ScaffoldM, print(SampleContent(SizedBox$M)
        CodeBlock(offset: 9235, end: 10150, statementCount: 2),

        /// (print.markdown(r''' ## ButtonB)
        CodeBlock(offset: 10228, end: 10559, statementCount: 1),

        /// (print(SampleContent(Container$)
        CodeBlock(offset: 10637, end: 10996, statementCount: 1),

        /// (print.markdown(r''' ## Overflo)
        CodeBlock(offset: 11074, end: 11281, statementCount: 1),

        /// (print(SampleContent(Container$)
        CodeBlock(offset: 11359, end: 12381, statementCount: 1),

        /// (print.markdown(r''' ## Platfor)
        CodeBlock(offset: 12459, end: 12994, statementCount: 1),

        /// (var click = () {flutter.showAb, print(SampleContent(MenuBar$Ma)
        CodeBlock(offset: 13072, end: 13912, statementCount: 2)
      ],
      tail: CodeBlock(offset: 13912, end: 13914, statementCount: 0),
      code:
          """"""),
);
