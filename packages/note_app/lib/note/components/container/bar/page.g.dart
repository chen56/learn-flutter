// /// Generated by gen_maters.dart, please don't edit!

import 'package:note/page_core.dart';
// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = NoteInfo(
  meta: page,
  source: NoteSource(
      header: CodeBlock(offset: 0, end: 352, statementCount: 0),
      body: [
        /// (print.markdown(r''' ## AppBar )
        CodeBlock(offset: 352, end: 487, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 487, end: 1179, statementCount: 1),

        /// (print.markdown(r''' ## BottomA)
        CodeBlock(offset: 1179, end: 1344, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 1344, end: 2079, statementCount: 1),

        /// (print.markdown(r'''    ## ~~Bo)
        CodeBlock(offset: 2079, end: 2445, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 2445, end: 3087, statementCount: 1),

        /// (print.markdown(r''' Navigation)
        CodeBlock(offset: 3087, end: 3204, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 3204, end: 4350, statementCount: 1),

        /// (print.markdown(r''' ## Navigat, var navigationRail$Mate = Navi)
        CodeBlock(offset: 4350, end: 5566, statementCount: 2),

        /// (print.nextCell________________)
        CodeBlock(offset: 5566, end: 5984, statementCount: 1),

        /// (print.markdown(r''' ## TabBar )
        CodeBlock(offset: 5984, end: 6483, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 6483, end: 7159, statementCount: 1),

        /// (print.markdown(r'''  再来看看加了Tab)
        CodeBlock(offset: 7159, end: 7227, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 7227, end: 8421, statementCount: 1),

        /// (print.markdown(""" 上面用法和[Navig, print.markdown("""   ## SnackB)
        CodeBlock(offset: 8421, end: 8740, statementCount: 2),

        /// (print.nextCell________________)
        CodeBlock(offset: 8740, end: 9735, statementCount: 1),

        /// (print.markdown(r''' ## ButtonB)
        CodeBlock(offset: 9735, end: 10067, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 10067, end: 10479, statementCount: 1),

        /// (print.markdown(r''' ## Overflo)
        CodeBlock(offset: 10479, end: 10688, statementCount: 1),

        /// (print.nextCell________________)
        CodeBlock(offset: 10688, end: 11793, statementCount: 1),

        /// (print.markdown(r''' ## Platfor, print.markdown(r''' ## MenuBar)
        CodeBlock(offset: 11793, end: 12361, statementCount: 2),

        /// (print.nextCell________________)
        CodeBlock(offset: 12361, end: 13321, statementCount: 1),

        /// ()
        CodeBlock(offset: 13321, end: 13322, statementCount: 0)
      ],
      tail: CodeBlock(offset: 13322, end: 13324, statementCount: 0),
      code:
          """"""),
);
