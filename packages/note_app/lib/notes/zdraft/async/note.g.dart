// /// Generated by gen_maters.dart, please don't edit!

final noteInfo = (
  cells: [
    /// ()
    (
      cellType: 'header',
      offset: 0,
      end: 330,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ()
    (
      cellType: 'body',
      offset: 330,
      end: 333,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' # 异步  ## F)
    (
      cellType: 'body',
      offset: 411,
      end: 461,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ({Future<String> bomb() async {)
    (
      cellType: 'body',
      offset: 539,
      end: 1316,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'Pen.runInCurrentCell',
          offset: 906,
          end: 1308,
        )
      ],
    ),

    /// (print.markdown(r''' ## Isalted)
    (
      cellType: 'body',
      offset: 1394,
      end: 1551,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ({send123(sendPort) async {for )
    (
      cellType: 'body',
      offset: 1629,
      end: 2328,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'Pen.runInCurrentCell',
          offset: 1832,
          end: 2323,
        )
      ],
    ),

    /// ()
    (
      cellType: 'tail',
      offset: 2328,
      end: 2330,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    )
  ],
  encodedCode:
      "aW1wb3J0ICdkYXJ0Omlzb2xhdGUnOwoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpub3RlL25vdGVfY29yZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm5vdGVfYXBwL25vdGVfYXBwLmRhcnQnOwoKTm90ZUNvbmZQYXJ0IHBhZ2UgPSBOb3RlQ29uZlBhcnQoCiAgc2hvcnRUaXRsZTogIuW8guatpWFzeW5jIiwKICBsYXlvdXQ6IExheW91dHMuZGVmYXVsdExheW91dChkZWZhdWx0Q29kZUV4cGFuZDogZmFsc2UpLAogIGJ1aWxkZXI6IGJ1aWxkLAopOwoKYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQsIFBlbiBwcmludCkgYXN5bmMgewogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyDlvILmraUKCiMjIEZ1dHVyZQogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHsKICAgIEZ1dHVyZTxTdHJpbmc+IGJvbWIoKSBhc3luYyB7CiAgICAgIHByaW50KCJzIik7CiAgICAgIHJldHVybiBGdXR1cmUuZGVsYXllZChEdXJhdGlvbihzZWNvbmRzOiAzKSwgKCkgPT4gImJvbmchISEiKTsKICAgIH0KCiAgICAvLyBwcmludC5ydW5JbkN1cnJlbnRDZWxsKChwcmludCkgewogICAgLy8gICBkZWJ1Z1ByaW50KCJwcHAgJHtwcmludH0iKTsKICAgIC8vICAgZGVidWdQcmludCgicHBwLS0tICR7cHJpbnQucGVuLmNlbGxzfSIpOwogICAgLy8KICAgIC8vICAgcHJpbnQoRmlsbGVkQnV0dG9uKG9uUHJlc3NlZDogKCkge30sIGNoaWxkOiBjb25zdCBUZXh0KCLmjInlkI4z56eS5ZCO54iG54K4IikpKTsKICAgIC8vIH0pOwoKICAgIC8vCiAgICBwcmludC5ydW5JbkN1cnJlbnRDZWxsKChwcmludCkgewogICAgICBvblByZXNzZWQoKSBhc3luYyB7CiAgICAgICAgdmFyIG1zZyA9IGF3YWl0IGJvbWIoKTsKICAgICAgICAvLyB0b2RvIOi/meS4qnByaW505ZyoIGFzeW5j5pe277yM5Lya5omT5Yiw5pyA5ZCO5LiA5LiqY2VsbAogICAgICAgIHByaW50KG1zZyk7CiAgICAgICAgLy8gZGVidWdQcmludCgicHBwMiAke3ByaW50Lmhhc2hDb2RlfSIpOwogICAgICAgIC8vIGRlYnVnUHJpbnQoInBwcDItLS0gJHtwcmludC5wZW4uY2VsbHN9Iik7CiAgICAgIH0KCiAgICAgIHByaW50KEZpbGxlZEJ1dHRvbigKICAgICAgICAgIG9uUHJlc3NlZDogb25QcmVzc2VkLi5zYW1wbGVDb2RlU3RyID0gIm9uUHJlc3NlZCIsCiAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgi5oyJ5ZCOM+enkuWQjueIhueCuCIpKSk7CiAgICB9KTsKICB9CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMgSXNhbHRlZAoKd2ViIOaooeW8j+S4jeaUr+aMgSBJc29sYXRlZO+8jOWmguaenOi/kOihjOWcqHdlYuaooeW8j+S4i++8jOatpOiMg+S+i+WwhuaKpemUmQoKRXJyb3I6IFVuc3VwcG9ydGVkIG9wZXJhdGlvbjogZGFydDppc29sYXRlIGlzIG5vdCBzdXBwb3J0ZWQgb24gZGFydDR3ZWIKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICB7CiAgICBzZW5kMTIzKHNlbmRQb3J0KSBhc3luYyB7CiAgICAgIGZvciAodmFyIG1lc3NhZ2UgaW4gWyIxIiwgIjIiLCAiMyJdKSB7CiAgICAgICAgKHNlbmRQb3J0IGFzIFNlbmRQb3J0KS5zZW5kKG1lc3NhZ2UpOwogICAgICAgIGF3YWl0IEZ1dHVyZS5kZWxheWVkKGNvbnN0IER1cmF0aW9uKHNlY29uZHM6IDEpKTsKICAgICAgfQogICAgfQoKICAgIHByaW50LnJ1bkluQ3VycmVudENlbGwoKHByaW50KSB7CiAgICAgIG9uUHJlc3NlZCgpIGFzeW5jIHsKICAgICAgICB0cnkgewogICAgICAgICAgUmVjZWl2ZVBvcnQgcmVjZWl2ZVBvcnQgPSBSZWNlaXZlUG9ydCgpOwogICAgICAgICAgSXNvbGF0ZS5zcGF3bihzZW5kMTIzLCByZWNlaXZlUG9ydC5zZW5kUG9ydCk7CgogICAgICAgICAgcmVjZWl2ZVBvcnQubGlzdGVuKChtZXNzYWdlKSB7CiAgICAgICAgICAgIHByaW50KCJyZWNlaXZlIDogJG1lc3NhZ2UiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHByaW50KCJlcnJvcjogJGUiKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHByaW50KEZpbGxlZEJ1dHRvbigKICAgICAgICAgIG9uUHJlc3NlZDogb25QcmVzc2VkLi5zYW1wbGVDb2RlU3RyID0gIm9uUHJlc3NlZCIsCiAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgi5byA5aeL77yM5q+P6ZqU5LiA56eS5Y+R6YCBMe+8jDLvvIwzIikpKTsKICAgIH0pOwogIH0KfQo="
);
