// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 386,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## AppBar )
        (
          cellType: 'body',
          offset: 386,
          end: 513,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(AppBar$Mate(t)
        (
          cellType: 'body',
          offset: 591,
          end: 1441,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## BottomA)
        (
          cellType: 'body',
          offset: 1519,
          end: 1676,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(BottomAppBar$)
        (
          cellType: 'body',
          offset: 1754,
          end: 2421,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''    ## ~~Bo)
        (
          cellType: 'body',
          offset: 2499,
          end: 2856,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Column$Mate(c)
        (
          cellType: 'body',
          offset: 2934,
          end: 3503,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' Navigation)
        (
          cellType: 'body',
          offset: 3581,
          end: 3698,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (var currentPageIndex = 0;, Widget buildNavigationBar(cont, print(MateSample(StatefulBuild)
        (
          cellType: 'body',
          offset: 3776,
          end: 4715,
          statementCount: 3,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Navigat)
        (
          cellType: 'body',
          offset: 4793,
          end: 5132,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 5210,
          end: 6513,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## TabBar )
        (
          cellType: 'body',
          offset: 6591,
          end: 7089,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(DefaultTabCon)
        (
          cellType: 'body',
          offset: 7167,
          end: 7711,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 再来看看加了TabV)
        (
          cellType: 'body',
          offset: 7789,
          end: 7854,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(DefaultTabCon)
        (
          cellType: 'body',
          offset: 7932,
          end: 8956,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 上面用法和[Navig)
        (
          cellType: 'body',
          offset: 9034,
          end: 9305,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (onPressed() {ScaffoldMessenger, print(MateSample(SizedBox$Mate)
        (
          cellType: 'body',
          offset: 9383,
          end: 10163,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## ButtonB)
        (
          cellType: 'body',
          offset: 10241,
          end: 10572,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Container$Mat)
        (
          cellType: 'body',
          offset: 10650,
          end: 11082,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Overflo)
        (
          cellType: 'body',
          offset: 11160,
          end: 11367,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Container$Mat)
        (
          cellType: 'body',
          offset: 11445,
          end: 12248,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Platfor)
        (
          cellType: 'body',
          offset: 12326,
          end: 12861,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (click() {showAboutDialog(conte, print(MateSample(MenuBar$Mate()
        (
          cellType: 'body',
          offset: 12939,
          end: 14055,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 14055,
          end: 14057,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          "aW1wb3J0ICdwYWNrYWdlOmNvZGVfYnVpbGRlci9jb2RlX2J1aWxkZXIuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6bWF0ZS9tYXRlX25vdGUuZGFydCc7CmltcG9ydCAncGFja2FnZTptYXRlX2ZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTptYXRlX2ZsdXR0ZXIvcGFpbnRpbmcuZGFydCcgYXMgcGFpbnRpbmc7CmltcG9ydCAncGFja2FnZTpub3RlL25vdGVfY29yZS5kYXJ0JzsKCk5vdGVDb25mUGFydCBwYWdlID0gTm90ZUNvbmZQYXJ0KAogIHNob3J0VGl0bGU6ICJCYXJzIiwKICBidWlsZGVyOiBidWlsZCwKKTsKCmJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0LCBQZW4gcHJpbnQpIHsKICBwcmludC5tYXJrZG93bihyJycnCiMjIEFwcEJhcgoK5LiA6Iis5pS+5ZyoW1NjYWZmb2xkLmFwcEJhcl0uCgo+IHJlZjogPGh0dHBzOi8vYXBpLmRldi9mbHV0dGVyL21hdGVyaWFsL0FwcEJhci1jbGFzcy5odG1sPgonJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlKEFwcEJhciRNYXRlKAogICAgdGl0bGU6IFRleHQkTWF0ZSgnQXBwQmFyIFRpdGxlJyksCiAgICBsZWFkaW5nOiBEcmF3ZXJCdXR0b24kTWF0ZSgpLAogICAgLy8gdG9kbyDov5nnp43nvLrnnIHlgLzmmK/kuI3mmK/lj6/ku6XmkJ7mjonvvIzojIPkvovkuK3moLnmnKzkuI3nlKjvvIzkvYblm6DkuLrmnInpu5jorqTlgLzvvIzmiYDku6Xoh6rliqjkvJrlh7rnjrAKICAgIG5vdGlmaWNhdGlvblByZWRpY2F0ZTogZGVmYXVsdFNjcm9sbE5vdGlmaWNhdGlvblByZWRpY2F0ZQogICAgICAuLnNhbXBsZUNvZGVTdHIgPSAiZGVmYXVsdFNjcm9sbE5vdGlmaWNhdGlvblByZWRpY2F0ZSIsCiAgICBhY3Rpb25zOiA8V2lkZ2V0PlsKICAgICAgSWNvbkJ1dHRvbiRNYXRlKAogICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5hZGQpLAogICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICksCiAgICAgIEljb25CdXR0b24kTWF0ZSgKICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMuYWNjZXNzX2FsYXJtKSwKICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICApLAogICAgICBDaGVja2JveE1lbnVCdXR0b24kTWF0ZSgKICAgICAgICB2YWx1ZTogdHJ1ZSwKICAgICAgICBvbkNoYW5nZWQ6IChiKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoYil7fSIsCiAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgnQ2hlY2tib3hNZW51QnV0dG9uJyksCiAgICAgICksCiAgICAgIEZpbGxlZEJ1dHRvbiRNYXRlKAogICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgnRmlsbGVkQnV0dG9uJyksCiAgICAgICksCiAgICBdLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyBCb3R0b21BcHBCYXIKCuS4gOiIrOaUvuWcqFtTY2FmZm9sZC5ib3R0b21OYXZpZ2F0aW9uQmFyXS4KCj4gcmVmIDxodHRwczovL2FwaS5kZXYvZmx1dHRlci9tYXRlcmlhbC9Cb3R0b21BcHBCYXItY2xhc3MuaHRtbD4KCicnJyk7CiAgLy8KCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShCb3R0b21BcHBCYXIkTWF0ZSgKICAgIC8vIHNoYXBlOiBDaXJjdWxhck5vdGNoZWRSZWN0YW5nbGUoKSwKICAgIGNoaWxkOiBSb3ckTWF0ZSgKICAgICAgY2hpbGRyZW46IDxXaWRnZXQ+WwogICAgICAgIEljb25CdXR0b24kTWF0ZSgKICAgICAgICAgIHRvb2x0aXA6ICdPcGVuIG5hdmlnYXRpb24gbWVudScsCiAgICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMubWVudSksCiAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICksCiAgICAgICAgU3BhY2VyJE1hdGUoKSwKICAgICAgICBJY29uQnV0dG9uJE1hdGUoCiAgICAgICAgICB0b29sdGlwOiAnU2VhcmNoJywKICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5zZWFyY2gpLAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICApLAogICAgICAgIEljb25CdXR0b24kTWF0ZSgKICAgICAgICAgIHRvb2x0aXA6ICdGYXZvcml0ZScsCiAgICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMuZmF2b3JpdGUpLAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICApLAogICAgICBdLAogICAgKSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKICAKIyMgfn5Cb3R0b21OYXZpZ2F0aW9uQmFyfn4KCn5+Qm90dG9tTmF2aWdhdGlvbkJhcn5+IOS4jeW7uuiuruS9v+eUqO+8jOiiq1tOYXZpZ2F0aW9uQmFyXeabv+aNogogCiMjIE5hdmlnYXRpb25CYXIKCj4g8J+To01hdGVyaWFsIDMgTmF2aWdhdGlvbiBCYXIgY29tcG9uZW50LiByZXBsYWNpbmcgQm90dG9tTmF2aWdhdGlvbkJhci4KCuS4gOiIrOaUvuWcqFtTY2FmZm9sZC5ib3R0b21OYXZpZ2F0aW9uQmFyXSwg5L2G5oyJZmx1dHRlcueahOiwg+aAp++8jOW9k+eEtuaYr+WTqumDveiDveaUvuOAggoKPiByZWYgPGh0dHBzOi8vYXBpLmRldi9mbHV0dGVyL21hdGVyaWFsL0JvdHRvbUFwcEJhci1jbGFzcy5odG1sPgoKCuWFiOeci+eci+S4jeWKoOmAu+i+keaXtk5hdmlnYXRpb25CYXLnmoTplb/nm7jvvJoKJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShDb2x1bW4kTWF0ZSgKICAgIGNoaWxkcmVuOiBbCiAgICAgIENvbnRhaW5lciRNYXRlKAogICAgICAgIGhlaWdodDogMTAwLAogICAgICAgIC8vIGNvbG9yOiBDb2xvcnMubGltZSwKICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCJtYWluIGNvbnRlbnQgYm9keSIpLAogICAgICApLAogICAgICBOYXZpZ2F0aW9uQmFyJE1hdGUoCiAgICAgICAgb25EZXN0aW5hdGlvblNlbGVjdGVkOiAoXykge30uLnNhbXBsZUNvZGVTdHIgPSAiKF8pe30iLAogICAgICAgIHNlbGVjdGVkSW5kZXg6IDEsCiAgICAgICAgZGVzdGluYXRpb25zOiA8V2lkZ2V0PlsKICAgICAgICAgIE5hdmlnYXRpb25EZXN0aW5hdGlvbiRNYXRlKAogICAgICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5leHBsb3JlKSwgbGFiZWw6ICdFeHBsb3JlJyksCiAgICAgICAgICBOYXZpZ2F0aW9uRGVzdGluYXRpb24kTWF0ZSgKICAgICAgICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMuY29tbXV0ZSksIGxhYmVsOiAnQ29tbXV0ZScpLAogICAgICAgIF0sCiAgICAgICkKICAgIF0sCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCk5hdmlnYXRpb25CYXIg55qE5Li76KaB55So6YCU57G75Ly8VGFiQmFy77yM5Yqg5LiKW05hdmlnYXRpb25CYXIub25EZXN0aW5hdGlvblNlbGVjdGVkXeeahOS6i+S7tu+8jOWwseiDveWcqOS4jeWQjOmhtemdouWIh+aNou+8jOWmguS4i++8mgonJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICB2YXIgY3VycmVudFBhZ2VJbmRleCA9IDA7CiAgV2lkZ2V0IGJ1aWxkTmF2aWdhdGlvbkJhcihjb250ZXh0LCBzZXRTdGF0ZSkgewogICAgdmFyIHZpZXdzID0gWwogICAgICBDb250YWluZXIoaGVpZ2h0OiAxMDAsIGNvbG9yOiBDb2xvcnMubGltZSksCiAgICAgIENvbnRhaW5lcihoZWlnaHQ6IDEwMCwgY29sb3I6IENvbG9ycy5wdXJwbGUpLAogICAgXTsKICAgIHJldHVybiBDb2x1bW4oCiAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgdmlld3NbY3VycmVudFBhZ2VJbmRleF0sCiAgICAgICAgTmF2aWdhdGlvbkJhcigKICAgICAgICAgIG9uRGVzdGluYXRpb25TZWxlY3RlZDogKGludCBpbmRleCkgewogICAgICAgICAgICBzZXRTdGF0ZSgoKSA9PiBjdXJyZW50UGFnZUluZGV4ID0gaW5kZXgpOwogICAgICAgICAgfSwKICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IGN1cnJlbnRQYWdlSW5kZXgsCiAgICAgICAgICBkZXN0aW5hdGlvbnM6IGNvbnN0IDxXaWRnZXQ+WwogICAgICAgICAgICBOYXZpZ2F0aW9uRGVzdGluYXRpb24oCiAgICAgICAgICAgICAgICBpY29uOiBJY29uKEljb25zLmV4cGxvcmUsIGNvbG9yOiBDb2xvcnMubGltZSksCiAgICAgICAgICAgICAgICBsYWJlbDogJ2xpbWUgcGFnZScpLAogICAgICAgICAgICBOYXZpZ2F0aW9uRGVzdGluYXRpb24oCiAgICAgICAgICAgICAgICBpY29uOiBJY29uKEljb25zLmV4cGxvcmUsIGNvbG9yOiBDb2xvcnMucHVycGxlKSwKICAgICAgICAgICAgICAgIGxhYmVsOiAncHVycGxlIHBhZ2UnKSwKICAgICAgICAgIF0sCiAgICAgICAgKQogICAgICBdLAogICAgKTsKICB9CgogIHByaW50KE1hdGVTYW1wbGUoU3RhdGVmdWxCdWlsZGVyJE1hdGUoCiAgICBidWlsZGVyOiBidWlsZE5hdmlnYXRpb25CYXIuLnNhbXBsZUNvZGUgPSByZWZlcigiYnVpbGROYXZpZ2F0aW9uQmFyIiksCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIE5hdmlnYXRpb25SYWlsCgrkuLvopoHnlKjlnKhQYWTmiJbmoYzpnaLlupTnlKjkuIrjgIIKCj4gPGh0dHBzOi8vYXBpLmRldi9mbHV0dGVyL21hdGVyaWFsL05hdmlnYXRpb25SYWlsLWNsYXNzLmh0bWw+Cj4gVGhlIG5hdmlnYXRpb24gcmFpbCBpcyBtZWFudCBmb3IgbGF5b3V0cyB3aXRoIHdpZGUgdmlld3BvcnRzLCBzdWNoIGFzIGEgZGVza3RvcCB3ZWIgCj4gb3IgdGFibGV0IGxhbmRzY2FwZSBsYXlvdXQuIEZvciBzbWFsbGVyIGxheW91dHMsIGxpa2UgbW9iaWxlIHBvcnRyYWl0LCAKPiBhIEJvdHRvbU5hdmlnYXRpb25CYXIgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC4KJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CgogIHByaW50KE1hdGVTYW1wbGUoUm93JE1hdGUoCiAgICBjaGlsZHJlbjogWwogICAgICBDb250YWluZXIkTWF0ZSgKICAgICAgICBoZWlnaHQ6IDMwMCwKICAgICAgICBjaGlsZDogTmF2aWdhdGlvblJhaWwkTWF0ZSgKICAgICAgICAgIC8vIG1pbldpZHRoOiAxMCwKICAgICAgICAgIG1pbkV4dGVuZGVkV2lkdGg6IDUwLAogICAgICAgICAgLy8gZXh0ZW5kZWQ6IHRydWUsCiAgICAgICAgICBzZWxlY3RlZEluZGV4OiAwLAogICAgICAgICAgZ3JvdXBBbGlnbm1lbnQ6IDEsCiAgICAgICAgICBvbkRlc3RpbmF0aW9uU2VsZWN0ZWQ6IChfKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoXyl7fSIsCiAgICAgICAgICBsYWJlbFR5cGU6IE5hdmlnYXRpb25SYWlsTGFiZWxUeXBlLmFsbCwKICAgICAgICAgIGxlYWRpbmc6IEljb25CdXR0b24kTWF0ZSgKICAgICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmFjY2Vzc190aW1lKSwKICAgICAgICAgICAgdG9vbHRpcDogIk5hdmlnYXRpb25SYWlsLmxlYWRpbmciLAogICAgICAgICAgKSwKICAgICAgICAgIHRyYWlsaW5nOiBJY29uQnV0dG9uJE1hdGUoCiAgICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5leGl0X3RvX2FwcCksCiAgICAgICAgICAgIHRvb2x0aXA6ICJOYXZpZ2F0aW9uUmFpbC50cmFpbGluZyIsCiAgICAgICAgICApLAogICAgICAgICAgZGVzdGluYXRpb25zOiA8TmF2aWdhdGlvblJhaWxEZXN0aW5hdGlvbj5bCiAgICAgICAgICAgIE5hdmlnYXRpb25SYWlsRGVzdGluYXRpb24kTWF0ZSgKICAgICAgICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5zYW5pdGl6ZXIpLCBsYWJlbDogVGV4dCRNYXRlKCdGaXJzdCcpKSwKICAgICAgICAgICAgTmF2aWdhdGlvblJhaWxEZXN0aW5hdGlvbiRNYXRlKAogICAgICAgICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmFjY2Vzc2libGUpLCBsYWJlbDogVGV4dCRNYXRlKCdTZWNvbmQnKSksCiAgICAgICAgICBdLAogICAgICAgICksCiAgICAgICksCiAgICAgIEV4cGFuZGVkJE1hdGUoCiAgICAgICAgICBjaGlsZDogQ29udGFpbmVyJE1hdGUoCiAgICAgICAgaGVpZ2h0OiAzMDAsCiAgICAgICAgY29sb3I6IENvbG9ycy5hbWJlci5zaGFkZTUwLAogICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoIm1haW4gY29udGVudCBhcmVhIiksCiAgICAgICkpLAogICAgXSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMgVGFiQmFyCgo+IDxodHRwczovL2FwaS5mbHV0dGVyLWlvLmNuL2ZsdXR0ZXIvbWF0ZXJpYWwvVGFiQmFyLWNsYXNzLmh0bWw+Cj4gQSBNYXRlcmlhbCBEZXNpZ24gd2lkZ2V0IHRoYXQgZGlzcGxheXMgYSBob3Jpem9udGFsIHJvdyBvZiB0YWJzLgo+IFR5cGljYWxseSBjcmVhdGVkIGFzIHRoZSBBcHBCYXIuYm90dG9tIHBhcnQgb2YgYW4gQXBwQmFyIGFuZCBpbiBjb25qdW5jdGlvbiB3aXRoIGEgVGFiQmFyVmlldy4KClRhYkJhciDlvojlpb3nkIbop6PlsLHmmK9UYWLmoI/liIfmjaLnmoTnu4Tku7bjgILkuIDoiKzmlL7lnKhbU2NhZmZvbGQuYXBwQmFyLmJvdHRvbV3kuYvnsbvnmoTlnLDmlrnvvIzopoHmsYLmmK8KCi0g6KaB5LmI5aSW6Z2i5aWX5LiqRGVmYXVsdFRhYkNvbnRyb2xsZXIKLSDopoHkuYjlpJbpnaLlpZfkuKropoHkuYjorr7nva5bVGFiQmFyLmNvbnRyb2xsZXJdCgrlpoLmnpzkuKTogIXpg73kuI3mj5DkvpvvvIzkvJrmiqXplJnvvJpObyBUYWJDb250cm9sbGVyIGZvciBUYWJCYXLjgIIKVGFiQ29udHJvbGxlcuS4u+imgeaYr+S4uuS6huWNj+iwg1RhYuWSjFRhYlZpZXfnmoTliIfmjaLlhbPns7vjgIIKClRhYkJhcuS4jeWKoFRhYlZpZXfplb/ov5nmoLfvvJoKJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShEZWZhdWx0VGFiQ29udHJvbGxlciRNYXRlKAogICAgbGVuZ3RoOiAzLAogICAgY2hpbGQ6IFRhYkJhciRNYXRlKAogICAgICB0YWJzOiA8V2lkZ2V0PlsKICAgICAgICBUYWIkTWF0ZSgKICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5jbG91ZF9vdXRsaW5lZCksCiAgICAgICAgICBpY29uTWFyZ2luOiBwYWludGluZy5FZGdlSW5zZXRzJE1hdGUuYWxsKDEwKSwKICAgICAgICApLAogICAgICAgIFRhYiRNYXRlKAogICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmJlYWNoX2FjY2Vzc19zaGFycCksCiAgICAgICAgICBpY29uTWFyZ2luOiBwYWludGluZy5FZGdlSW5zZXRzJE1hdGUuYWxsKDEwKSwKICAgICAgICApLAogICAgICAgIFRhYiRNYXRlKAogICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmJyaWdodG5lc3NfNV9zaGFycCksCiAgICAgICAgICBpY29uTWFyZ2luOiBwYWludGluZy5FZGdlSW5zZXRzJE1hdGUuYWxsKDEwKSwKICAgICAgICApLAogICAgICBdLAogICAgKSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycK5YaN5p2l55yL55yL5Yqg5LqGVGFiVmlld+eahOWujOaVtOS9k++8jOWNs1RhYkJhcuWunumZheS9v+eUqOaooeW8j++8mgonJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlKERlZmF1bHRUYWJDb250cm9sbGVyJE1hdGUoCiAgICBpbml0aWFsSW5kZXg6IDEsCiAgICBsZW5ndGg6IDMsCiAgICBjaGlsZDogQ29sdW1uJE1hdGUoCiAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgVGFiQmFyJE1hdGUoCiAgICAgICAgICB0YWJzOiA8V2lkZ2V0PlsKICAgICAgICAgICAgVGFiJE1hdGUoCiAgICAgICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmNsb3VkX291dGxpbmVkKSwKICAgICAgICAgICAgICBpY29uTWFyZ2luOiBwYWludGluZy5FZGdlSW5zZXRzJE1hdGUuYWxsKDEwKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgVGFiJE1hdGUoCiAgICAgICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmJlYWNoX2FjY2Vzc19zaGFycCksCiAgICAgICAgICAgICAgaWNvbk1hcmdpbjogcGFpbnRpbmcuRWRnZUluc2V0cyRNYXRlLmFsbCgxMCksCiAgICAgICAgICAgICksCiAgICAgICAgICAgIFRhYiRNYXRlKAogICAgICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5icmlnaHRuZXNzXzVfc2hhcnApLAogICAgICAgICAgICAgIGljb25NYXJnaW46IHBhaW50aW5nLkVkZ2VJbnNldHMkTWF0ZS5hbGwoMTApLAogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICApLAogICAgICAgIENvbnRhaW5lciRNYXRlKAogICAgICAgICAgaGVpZ2h0OiAyMDAsCiAgICAgICAgICBjaGlsZDogVGFiQmFyVmlldyRNYXRlKAogICAgICAgICAgICBjaGlsZHJlbjogPFdpZGdldD5bCiAgICAgICAgICAgICAgQ2VudGVyJE1hdGUoY2hpbGQ6IFRleHQkTWF0ZSgiSXQncyBjbG91ZHkgaGVyZSIpKSwKICAgICAgICAgICAgICBDZW50ZXIkTWF0ZShjaGlsZDogVGV4dCRNYXRlKCJJdCdzIHJhaW55IGhlcmUiKSksCiAgICAgICAgICAgICAgQ2VudGVyJE1hdGUoY2hpbGQ6IFRleHQkTWF0ZSgiSXQncyBzdW5ueSBoZXJlIikpLAogICAgICAgICAgICBdLAogICAgICAgICAgKSwKICAgICAgICApCiAgICAgIF0sCiAgICApLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24oIiIiCuS4iumdoueUqOazleWSjFtOYXZpZ2F0aW9uQmFyXeW+iOWDj++8jOS4u+imgeWwseaYr+WcqOWkmuS4qumhtemdoumXtOWIh+aNou+8jOWlveWkhOWcqO+8jOi/nuS6i+S7tumAu+i+kemDveS4jemcgOimge+8jOe7hOS7tuagkeWmguS4i+e7k+aehOWNs+WPr++8mgoKRGVmYXVsdFRhYkNvbnRyb2xsZXIKICAtIFRhYkJhcgogICAgLSBUYWIgMQogICAgLSBUYWIgMgogICAgLSBUYWIgMwogIC0gVGFiQmFyVmlldwogICAgLWNoaWxkcmVuCiAgICAgIC0gV2lkZ2V0IFZpZXcgMQogICAgICAtIFdpZGdldCBWaWV3IDIKICAgICAgLSBXaWRnZXQgVmlldyAzCgogICMjIFNuYWNrQmFyCiIiIik7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIG9uUHJlc3NlZCgpIHsKICAgIFNjYWZmb2xkTWVzc2VuZ2VyLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcigKICAgICAgU25hY2tCYXIoCiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZGVlcFB1cnBsZUFjY2VudC5zaGFkZTEwMCwKICAgICAgICBjb250ZW50OiBDb2x1bW4oCiAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICBjb25zdCBUZXh0KCJTaG93IFNuYWNrYmFyIDYgc2Vjb25kcyIpLAogICAgICAgICAgICBJY29uQnV0dG9uKGljb246IGNvbnN0IEljb24oSWNvbnMuYWRkKSwgb25QcmVzc2VkOiAoKSB7fSksCiAgICAgICAgICAgIEljb25CdXR0b24oaWNvbjogY29uc3QgSWNvbihJY29ucy5hY2Nlc3NfYWxhcm0pLCBvblByZXNzZWQ6ICgpIHt9KSwKICAgICAgICAgIF0sCiAgICAgICAgKSwKICAgICAgICBhY3Rpb246IFNuYWNrQmFyQWN0aW9uKAogICAgICAgICAgbGFiZWw6ICdTb21lIEFjdGlvbicsCiAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9LAogICAgICAgICksCiAgICAgICAgZHVyYXRpb246IGNvbnN0IER1cmF0aW9uKHNlY29uZHM6IDMpLAogICAgICApLAogICAgKTsKICB9CgogIHByaW50KE1hdGVTYW1wbGUoU2l6ZWRCb3gkTWF0ZSgKICAgIGhlaWdodDogMTAwLAogICAgY2hpbGQ6IEZpbGxlZEJ1dHRvbigKICAgICAgb25QcmVzc2VkOiBvblByZXNzZWQuLnNhbXBsZUNvZGUgPSByZWZlcigib25QcmVzc2VkIiksCiAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdTaG93IFNuYWNrIGJhcicpLAogICAgKSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMgQnV0dG9uQmFyIAoKPiA8aHR0cHM6Ly9hcGkuZmx1dHRlci1pby5jbi9mbHV0dGVyL21hdGVyaWFsL0J1dHRvbkJhci1jbGFzcy5odG1sPgo+IEFuIGVuZC1hbGlnbmVkIHJvdyBvZiBidXR0b25zLCBsYXlpbmcgb3V0IGludG8gYSBjb2x1bW4gaWYgdGhlcmUgaXMgbm90IGVub3VnaCBob3Jpem9udGFsIHNwYWNlLgo+IFVzZWQgYnkgRGlhbG9nIHRvIGFycmFuZ2UgdGhlIGFjdGlvbnMgYXQgdGhlIGJvdHRvbSBvZiB0aGUgZGlhbG9nLgoK5oyJ6ZKu55qE5biD5bGA5a655Zmo77yM5Y+v5Lul5oyJ5YaF5a6555qE5a6e6ZmF5a695bqm5Zyo6KGM5oiW5YiX5LmL6Ze06LCD5pW077yM5YW25qiq5ZCR6L+Y5piv57q15ZCR5o6S5YiX77yM5Y+W5Yaz5LqO5YW25a695bqm77yaCiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShDb250YWluZXIkTWF0ZSgKICAgIHdpZHRoOiA2MDAsCiAgICBjb2xvcjogQ29sb3JzLmxpbWUuc2hhZGU1MCwKICAgIGNoaWxkOiBCdXR0b25CYXIkTWF0ZSgKICAgICAgY2hpbGRyZW46IFsKICAgICAgICBFbGV2YXRlZEJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoIkVsZXZhdGVkQnV0dG9uMiIpLAogICAgICAgICksCiAgICAgICAgT3V0bGluZWRCdXR0b24kTWF0ZSgKICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCdPdXRsaW5lZEJ1dHRvbicpLAogICAgICAgICksCiAgICAgIF0sCiAgICApLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyBPdmVyZmxvd0JhcgoKPiA8aHR0cHM6Ly9hcGkuZmx1dHRlci1pby5jbi9mbHV0dGVyL21hdGVyaWFsL0J1dHRvbkJhci1jbGFzcy5odG1sPgoKT3ZlcmZsb3dCYXLluLjnlKjlnLrmma/mmK9EaWFsb2fnmoTmjInpkq7nu4TlrrnlmajvvIxjaGlsZHJlbuWuveW6puWknyjmnKrmuqLlh7op77yM5qiq552A5o6S77yM5LiN5aSf77yI5rqi5Ye677yJ77yM5bCx56uW552A5o6S77yM5L+u5pS55LiL6Z2i5pyA5aSW5bGCQ29udGFpbmVyLndpZHRo55yL55yL77yaCiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShDb250YWluZXIkTWF0ZSgKICAgIHdpZHRoOiAzMDAsCiAgICBjaGlsZDogQ29sdW1uJE1hdGUoCiAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgUGxhY2Vob2xkZXIkTWF0ZShmYWxsYmFja0hlaWdodDogMTAwLCBjb2xvcjogQ29sb3JzLmRlZXBQdXJwbGUpLAogICAgICAgIE92ZXJmbG93QmFyJE1hdGUoCiAgICAgICAgICBhbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LmVuZCwKICAgICAgICAgIHRleHREaXJlY3Rpb246IFRleHREaXJlY3Rpb24ubHRyLAogICAgICAgICAgb3ZlcmZsb3dTcGFjaW5nOiA1LjAsCiAgICAgICAgICBvdmVyZmxvd0FsaWdubWVudDogT3ZlcmZsb3dCYXJBbGlnbm1lbnQuZW5kLAogICAgICAgICAgb3ZlcmZsb3dEaXJlY3Rpb246IFZlcnRpY2FsRGlyZWN0aW9uLmRvd24sCiAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICBFbGV2YXRlZEJ1dHRvbiRNYXRlKAogICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgiQ2FuY2Vs5qiq5o6S6L+Y5piv56uW5o6S5Y+W5Yaz5LqOd2lkdGgiKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgRWxldmF0ZWRCdXR0b24kTWF0ZSgKICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoIk9r5a+56b2Q5pa55byP5Y+W5Yaz5LqO5o6S5YiXIiksCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICkKICAgICAgXSwKICAgICksCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIFBsYXRmb3JtTWVudUJhcgoKPiA8aHR0cHM6Ly9hcGkuZmx1dHRlci1pby5jbi9mbHV0dGVyL3dpZGdldHMvUGxhdGZvcm1NZW51QmFyLWNsYXNzLmh0bWw+CgpQbGF0Zm9ybU1lbnVCYXIg55uu5YmN5LmL5pSv5oyBbWFjT1PvvIgyMDIzLTA077yJ77yM5LiN546p5LqG44CCCgojIyBNZW51QmFyCgo+IDxodHRwczovL2FwaS5mbHV0dGVyLWlvLmNuL2ZsdXR0ZXIvd2lkZ2V0cy9NZW51QmFyLWNsYXNzLmh0bWw+CgpNZW51QmFy55u45YWz57uE5Lu277yaCgotIE1lbnVBbmNob3IsIGEgd2lkZ2V0IHRoYXQgY3JlYXRlcyBhIHJlZ2lvbiB3aXRoIGEgc3VibWVudSBhbmQgc2hvd3MgaXQgd2hlbiByZXF1ZXN0ZWQuCi0gU3VibWVudUJ1dHRvbiwgYSBtZW51IGl0ZW0gd2hpY2ggbWFuYWdlcyBhIHN1Ym1lbnUuCi0gTWVudUl0ZW1CdXR0b24sIGEgbGVhZiBtZW51IGl0ZW0gd2hpY2ggZGlzcGxheXMgdGhlIGxhYmVsLCBhbiBvcHRpb25hbCBzaG9ydGN1dCBsYWJlbCwgYW5kIG9wdGlvbmFsIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGljb25zLgogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIGNsaWNrKCkgewogICAgc2hvd0Fib3V0RGlhbG9nKAogICAgICBjb250ZXh0OiBjb250ZXh0LAogICAgICBhcHBsaWNhdGlvbk5hbWU6ICdNZW51QmFyIFNhbXBsZScsCiAgICAgIGFwcGxpY2F0aW9uVmVyc2lvbjogJzEuMC4wJywKICAgICk7CiAgfQoKICBwcmludChNYXRlU2FtcGxlKE1lbnVCYXIkTWF0ZSgKICAgIGNoaWxkcmVuOiBbCiAgICAgIE1lbnVJdGVtQnV0dG9uJE1hdGUoCiAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICBjaGlsZDogTWVudUFjY2VsZXJhdG9yTGFiZWwkTWF0ZSgKICAgICAgICAgICcmRXhpdCcsCiAgICAgICAgICBidWlsZGVyOiBNZW51QWNjZWxlcmF0b3JMYWJlbC5kZWZhdWx0TGFiZWxCdWlsZGVyCiAgICAgICAgICAgIC4uc2FtcGxlQ29kZVN0ciA9ICJNZW51QWNjZWxlcmF0b3JMYWJlbC5kZWZhdWx0TGFiZWxCdWlsZGVyIiwKICAgICAgICApLAogICAgICApLAogICAgICBTdWJtZW51QnV0dG9uJE1hdGUoCiAgICAgICAgbWVudUNoaWxkcmVuOiBbCiAgICAgICAgICBNZW51SXRlbUJ1dHRvbiRNYXRlKAogICAgICAgICAgICBvblByZXNzZWQ6IGNsaWNrLi5zYW1wbGVDb2RlU3RyID0gImNsaWNrIiwKICAgICAgICAgICAgY2hpbGQ6IE1lbnVBY2NlbGVyYXRvckxhYmVsJE1hdGUoCiAgICAgICAgICAgICAgJyZmbHV0dGVyX25vdGUgZ2l0aHViJywKICAgICAgICAgICAgICBidWlsZGVyOiBNZW51QWNjZWxlcmF0b3JMYWJlbC5kZWZhdWx0TGFiZWxCdWlsZGVyCiAgICAgICAgICAgICAgICAuLnNhbXBsZUNvZGVTdHIgPSAiTWVudUFjY2VsZXJhdG9yTGFiZWwuZGVmYXVsdExhYmVsQnVpbGRlciIsCiAgICAgICAgICAgICksCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICBjaGlsZDogTWVudUFjY2VsZXJhdG9yTGFiZWwkTWF0ZSgKICAgICAgICAgICcmSGVscCcsCiAgICAgICAgICBidWlsZGVyOiBNZW51QWNjZWxlcmF0b3JMYWJlbC5kZWZhdWx0TGFiZWxCdWlsZGVyCiAgICAgICAgICAgIC4uc2FtcGxlQ29kZVN0ciA9ICJNZW51QWNjZWxlcmF0b3JMYWJlbC5kZWZhdWx0TGFiZWxCdWlsZGVyIiwKICAgICAgICApLAogICAgICApLAogICAgXSwKICApKSk7Cn0K"
    );
