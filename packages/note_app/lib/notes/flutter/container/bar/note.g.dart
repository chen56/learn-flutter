// /// Generated by gen_maters.dart, please don't edit!

final noteInfo = (
  cells: [
    /// ()
    (
      cellType: 'header',
      offset: 0,
      end: 358,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## AppBar )
    (
      cellType: 'body',
      offset: 358,
      end: 485,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(AppBar$Mate(t)
    (
      cellType: 'body',
      offset: 563,
      end: 1413,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 566,
          end: 1409,
        )
      ],
    ),

    /// (print.markdown(r''' ## BottomA)
    (
      cellType: 'body',
      offset: 1491,
      end: 1648,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(BottomAppBar$)
    (
      cellType: 'body',
      offset: 1726,
      end: 2393,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 1729,
          end: 2389,
        )
      ],
    ),

    /// (print.markdown(r'''    ## ~~Bo)
    (
      cellType: 'body',
      offset: 2471,
      end: 2828,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Column$Mate(c)
    (
      cellType: 'body',
      offset: 2906,
      end: 3475,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 2909,
          end: 3471,
        )
      ],
    ),

    /// (print.markdown(r''' Navigation)
    (
      cellType: 'body',
      offset: 3553,
      end: 3670,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (var currentPageIndex = 0;, Widget buildNavigationBar(cont, print(MateSample(StatefulBuild)
    (
      cellType: 'body',
      offset: 3748,
      end: 4687,
      statementCount: 3,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 4563,
          end: 4683,
        )
      ],
    ),

    /// (print.markdown(r''' ## Navigat)
    (
      cellType: 'body',
      offset: 4765,
      end: 5104,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 5182,
      end: 6485,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 5186,
          end: 6481,
        )
      ],
    ),

    /// (print.markdown(r''' ## TabBar )
    (
      cellType: 'body',
      offset: 6563,
      end: 7061,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(DefaultTabCon)
    (
      cellType: 'body',
      offset: 7139,
      end: 7683,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 7142,
          end: 7679,
        )
      ],
    ),

    /// (print.markdown(r''' 再来看看加了TabV)
    (
      cellType: 'body',
      offset: 7761,
      end: 7826,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(DefaultTabCon)
    (
      cellType: 'body',
      offset: 7904,
      end: 8928,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 7907,
          end: 8924,
        )
      ],
    ),

    /// (print.markdown(""" 上面用法和[Navig)
    (
      cellType: 'body',
      offset: 9006,
      end: 9277,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (onPressed() {ScaffoldMessenger, print(MateSample(SizedBox$Mate)
    (
      cellType: 'body',
      offset: 9355,
      end: 10135,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 9940,
          end: 10131,
        )
      ],
    ),

    /// (print.markdown(r''' ## ButtonB)
    (
      cellType: 'body',
      offset: 10213,
      end: 10544,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Container$Mat)
    (
      cellType: 'body',
      offset: 10622,
      end: 11054,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 10625,
          end: 11050,
        )
      ],
    ),

    /// (print.markdown(r''' ## Overflo)
    (
      cellType: 'body',
      offset: 11132,
      end: 11339,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Container$Mat)
    (
      cellType: 'body',
      offset: 11417,
      end: 12220,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 11420,
          end: 12216,
        )
      ],
    ),

    /// (print.markdown(r''' ## Platfor)
    (
      cellType: 'body',
      offset: 12298,
      end: 12833,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (click() {showAboutDialog(conte, print(MateSample(MenuBar$Mate()
    (
      cellType: 'body',
      offset: 12911,
      end: 14027,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 13059,
          end: 14026,
        )
      ],
    ),

    /// ()
    (
      cellType: 'tail',
      offset: 14027,
      end: 14029,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    )
  ],
  encodedCode:
      ""
);
