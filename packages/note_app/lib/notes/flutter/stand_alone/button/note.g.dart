// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 288,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'body',
          offset: 288,
          end: 291,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # button  )
        (
          cellType: 'body',
          offset: 369,
          end: 620,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Wrap$Mate(chi)
        (
          cellType: 'body',
          offset: 698,
          end: 1388,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### IconBu)
        (
          cellType: 'body',
          offset: 1466,
          end: 1522,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 1600,
          end: 2109,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Floati)
        (
          cellType: 'body',
          offset: 2187,
          end: 2275,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int id = 0;, print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 2353,
          end: 3355,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### 几个特殊的系)
        (
          cellType: 'body',
          offset: 3433,
          end: 3762,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 3840,
          end: 4011,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''  ### Toggl)
        (
          cellType: 'body',
          offset: 4089,
          end: 4242,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 4320,
          end: 4658,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Segmen)
        (
          cellType: 'body',
          offset: 4736,
          end: 4941,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 5019,
          end: 5972,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## 相关组件  #)
        (
          cellType: 'body',
          offset: 6050,
          end: 6590,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Ink*组件)
        (
          cellType: 'body',
          offset: 6668,
          end: 6866,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Column$Mate(c)
        (
          cellType: 'body',
          offset: 6944,
          end: 7290,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Button)
        (
          cellType: 'body',
          offset: 7368,
          end: 7477,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Container$Mat)
        (
          cellType: 'body',
          offset: 7555,
          end: 8139,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 8139,
          end: 8141,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
