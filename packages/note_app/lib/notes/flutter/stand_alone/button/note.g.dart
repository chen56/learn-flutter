// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 283,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'body',
          offset: 283,
          end: 286,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # button  )
        (
          cellType: 'body',
          offset: 364,
          end: 615,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Wrap$Mate(chi)
        (
          cellType: 'body',
          offset: 693,
          end: 1383,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### IconBu)
        (
          cellType: 'body',
          offset: 1461,
          end: 1517,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 1595,
          end: 2104,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Floati)
        (
          cellType: 'body',
          offset: 2182,
          end: 2270,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int id = 0;, print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 2348,
          end: 3350,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### 几个特殊的系)
        (
          cellType: 'body',
          offset: 3428,
          end: 3757,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 3835,
          end: 4006,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''  ### Toggl)
        (
          cellType: 'body',
          offset: 4084,
          end: 4237,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 4315,
          end: 4653,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Segmen)
        (
          cellType: 'body',
          offset: 4731,
          end: 4936,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Row$Mate(chil)
        (
          cellType: 'body',
          offset: 5014,
          end: 5967,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## 相关组件  #)
        (
          cellType: 'body',
          offset: 6045,
          end: 6585,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Ink*组件)
        (
          cellType: 'body',
          offset: 6663,
          end: 6861,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Column$Mate(c)
        (
          cellType: 'body',
          offset: 6939,
          end: 7285,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Button)
        (
          cellType: 'body',
          offset: 7363,
          end: 7472,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Container$Mat)
        (
          cellType: 'body',
          offset: 7550,
          end: 8134,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 8134,
          end: 8136,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpub3RlL21hdGVfbm90ZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm5vdGUvbm90ZV9jb3JlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6bWF0ZV9mbHV0dGVyL21hdGVyaWFsLmRhcnQnOwoKTm90ZUNvbmZQYXJ0IHBhZ2UgPSBOb3RlQ29uZlBhcnQoCiAgc2hvcnRUaXRsZTogIkJ1dHRvbnMiLAogIGJ1aWxkZXI6IGJ1aWxkLAopOwoKYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQsIFBlbiBwcmludCkgewogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyBidXR0b24KCjxodHRwczovL20zLm1hdGVyaWFsLmlvL2NvbXBvbmVudHMvYnV0dG9ucy9vdmVydmlldz4sIGFuIG92ZXJ2aWV3IG9mIGVhY2ggb2YgCnRoZSBNYXRlcmlhbCBEZXNpZ24gYnV0dG9uIHR5cGVzIGFuZCBob3cgdGhleSBzaG91bGQgYmUgdXNlZCBpbiBkZXNpZ25zLgoKIyMg5oyJ6ZKu5qaC6KeICgojIyMg5Li76KaB5oyJ6ZKuCgrku6XkuIvlh6Dnp43kuLvopoFCdXR0b27pg73nu6fmib/oh6pbQnV0dG9uU3R5bGVCdXR0b25dCiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShXcmFwJE1hdGUoCiAgICBjaGlsZHJlbjogWwogICAgICBFbGV2YXRlZEJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoIkVsZXZhdGVkQnV0dG9uIikpLAogICAgICBGaWxsZWRCdXR0b24kTWF0ZSgKICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCdGaWxsZWRCdXR0b24nKSksCiAgICAgIEZpbGxlZEJ1dHRvbiRNYXRlLnRvbmFsKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoJ0ZpbGxlZEJ1dHRvbi50b25hbCcpKSwKICAgICAgT3V0bGluZWRCdXR0b24kTWF0ZSgKICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCdPdXRsaW5lZEJ1dHRvbicpKSwKICAgICAgVGV4dEJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoJ1RleHRCdXR0b24nKSksCiAgICBdLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyMgSWNvbkJ1dHRvbgoK5Zu+5qCH5oyJ6ZKu44CCCiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShSb3ckTWF0ZSgKICAgIGNoaWxkcmVuOiBbCiAgICAgIEljb25CdXR0b24kTWF0ZSgKICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICB0b29sdGlwOiAiSWNvbkJ1dHRvbiIsCiAgICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMud2lmaSkpLAogICAgICBJY29uQnV0dG9uJE1hdGUoCiAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICAgdG9vbHRpcDogIkljb25CdXR0b24iLAogICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmFkZCkpLAogICAgICBJY29uQnV0dG9uJE1hdGUoCiAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICAgdG9vbHRpcDogIkljb25CdXR0b24iLAogICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmFjX3VuaXQpKSwKICAgIF0sCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIyBGbG9hdGluZ0FjdGlvbkJ1dHRvbgoK5rWu5Yqo5oyJ6ZKu77yM5bi46KeB5LqOW1NjYWZmb2xkXeWPs+S4i+inkueahOa1ruWKqOaMiemSruOAggogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIGludCBpZCA9IDA7CgogIHByaW50KE1hdGVTYW1wbGUoUm93JE1hdGUoCiAgICBjaGlsZHJlbjogWwogICAgICBGbG9hdGluZ0FjdGlvbkJ1dHRvbiRNYXRlKAogICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgaGVyb1RhZzogImJ1dHRvbi5GbG9hdGluZ0FjdGlvbkJ1dHRvbiR7aWQrK30iLAogICAgICAgIHRvb2x0aXA6ICJGbG9hdGluZ0FjdGlvbkJ1dHRvbiIsCiAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgi57y655yB5p6E6YCg5ZmoIiksCiAgICAgICksCiAgICAgIEZsb2F0aW5nQWN0aW9uQnV0dG9uJE1hdGUuc21hbGwoCiAgICAgICAgLy8gaXNFeHRlbmRlZDogZmFsc2UsCiAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICBoZXJvVGFnOiAiYnV0dG9uLkZsb2F0aW5nQWN0aW9uQnV0dG9uJHtpZCsrfSIsCiAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgic21hbGwiKSwKICAgICAgKSwKICAgICAgRmxvYXRpbmdBY3Rpb25CdXR0b24kTWF0ZS5sYXJnZSgKICAgICAgICAvLyBpc0V4dGVuZGVkOiBmYWxzZSwKICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgIGhlcm9UYWc6ICJidXR0b24uRmxvYXRpbmdBY3Rpb25CdXR0b24ke2lkKyt9IiwKICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCJsYXJnZSIpLAogICAgICApLAogICAgICBGbG9hdGluZ0FjdGlvbkJ1dHRvbiRNYXRlLmV4dGVuZGVkKAogICAgICAgIC8vIGlzRXh0ZW5kZWQ6IGZhbHNlLAogICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgbGFiZWw6IFRleHQkTWF0ZSgnZXh0ZW5kZWQnKSwKICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMudGh1bWJfdXApLAogICAgICAgIGhlcm9UYWc6ICJidXR0b24uRmxvYXRpbmdBY3Rpb25CdXR0b24ke2lkKyt9IiwKICAgICAgKSwKICAgIF0sCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIyDlh6DkuKrnibnmrornmoTns7vnu59CdXR0b24KCue7p+aJv+WFs+ezu++8mgotIFtTdGF0ZWxlc3NXaWRnZXRdCiAgLSBbX0FjdGlvbkJ1dHRvbl0gCiAgICAtIFtCYWNrQnV0dG9uXSBBIE1hdGVyaWFsIERlc2lnbiBiYWNrIGljb24gYnV0dG9uCiAgICAtIFtDbG9zZUJ1dHRvbl0gQSBNYXRlcmlhbCBEZXNpZ24gY2xvc2UgaWNvbiBidXR0b24KICAgIC0gW0RyYXdlckJ1dHRvbl0gQSBNYXRlcmlhbCBEZXNpZ24gZHJhd2VyIGljb24gYnV0dG9uCiAgICAtIFtFbmREcmF3ZXJCdXR0b25dIEEgTWF0ZXJpYWwgRGVzaWduIGRyYXdlciBpY29uIGJ1dHRvbgogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50KE1hdGVTYW1wbGUoUm93JE1hdGUoCiAgICBjaGlsZHJlbjogWwogICAgICBCYWNrQnV0dG9uJE1hdGUoKSwKICAgICAgQ2xvc2VCdXR0b24kTWF0ZSgpLAogICAgICBEcmF3ZXJCdXR0b24kTWF0ZSgpLAogICAgICBFbmREcmF3ZXJCdXR0b24kTWF0ZSgpLAogICAgXSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKCiMjIyBUb2dnbGVCdXR0b25zCgrkuIDnu4Tlj6/lpJrpgInvvZzljZXpgInnmoTmjInpkq7nu4TjgIIKCj4gKirwn5Oj5o+Q56S6KirvvJrmraTnu4Tku7blrp7njrDkuo5NYXRlcmlhbCAy77yM57G75Ly85LqOTWF0ZXJpYWwgM+eahFtTZWdtZW50ZWRCdXR0b25d44CC5Y+v55SoW1NlZ21lbnRlZEJ1dHRvbl3mm7/mjaLkuYvjgIIKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlKFJvdyRNYXRlKAogICAgY2hpbGRyZW46IFsKICAgICAgVG9nZ2xlQnV0dG9ucyRNYXRlKAogICAgICAgIG9uUHJlc3NlZDogKF8pIHt9Li5zYW1wbGVDb2RlU3RyID0gIihfKXt9IiwKICAgICAgICBpc1NlbGVjdGVkOiBjb25zdCBbdHJ1ZSwgZmFsc2UsIHRydWVdLAogICAgICAgIGNoaWxkcmVuOiA8V2lkZ2V0PlsKICAgICAgICAgIEljb24kTWF0ZShJY29ucy5hY191bml0KSwKICAgICAgICAgIEljb24kTWF0ZShJY29ucy5jYWxsKSwKICAgICAgICAgIEljb24kTWF0ZShJY29ucy5jYWtlKSwKICAgICAgICBdLAogICAgICApLAogICAgXSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMjIFNlZ21lbnRlZEJ1dHRvbgoK5LiA57uE5Y+v5aSa6YCJ772c5Y2V6YCJ55qE5oyJ6ZKu57uE44CCCgo+ICoq8J+To+aPkOekuioq77ya5q2k57uE5Lu25a6e546w5LqOTWF0ZXJpYWwgM++8jOexu+S8vOS6jk1hdGVyaWFsIDLnmoRbVG9nZ2xlQnV0dG9uc13vvIzlj6/nlKjmm7/mjaLmjolbVG9nZ2xlQnV0dG9uc13jgIIKCjxodHRwczovL20zLm1hdGVyaWFsLmlvL2NvbXBvbmVudHMvc2VnbWVudGVkLWJ1dHRvbnM+CiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZShSb3ckTWF0ZSgKICAgIGNoaWxkcmVuOiBbCiAgICAgIFNlZ21lbnRlZEJ1dHRvbiRNYXRlPFN0cmluZz4oCiAgICAgICAgbXVsdGlTZWxlY3Rpb25FbmFibGVkOiB0cnVlLAogICAgICAgIHNlZ21lbnRzOiA8QnV0dG9uU2VnbWVudDxTdHJpbmc+PlsKICAgICAgICAgIEJ1dHRvblNlZ21lbnQkTWF0ZTxTdHJpbmc+KAogICAgICAgICAgICAgIHZhbHVlOiAiRGF5IiwKICAgICAgICAgICAgICBsYWJlbDogVGV4dCRNYXRlKCdEYXknKSwKICAgICAgICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMuY2FsZW5kYXJfdmlld19kYXkpKSwKICAgICAgICAgIEJ1dHRvblNlZ21lbnQkTWF0ZTxTdHJpbmc+KAogICAgICAgICAgICAgIHZhbHVlOiAiV2VlayIsCiAgICAgICAgICAgICAgbGFiZWw6IFRleHQkTWF0ZSgnV2VlaycpLAogICAgICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5jYWxlbmRhcl92aWV3X3dlZWspKSwKICAgICAgICAgIEJ1dHRvblNlZ21lbnQkTWF0ZTxTdHJpbmc+KAogICAgICAgICAgICAgIHZhbHVlOiAiTW9udGgiLAogICAgICAgICAgICAgIGxhYmVsOiBUZXh0JE1hdGUoJ01vbnRoJyksCiAgICAgICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmNhbGVuZGFyX3ZpZXdfbW9udGgpKSwKICAgICAgICAgIEJ1dHRvblNlZ21lbnQkTWF0ZTxTdHJpbmc+KAogICAgICAgICAgICAgIHZhbHVlOiAiWWVhciIsCiAgICAgICAgICAgICAgbGFiZWw6IFRleHQkTWF0ZSgnWWVhcicpLAogICAgICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5jYWxlbmRhcl90b2RheSkpLAogICAgICAgIF0sCiAgICAgICAgc2VsZWN0ZWQ6IDxTdHJpbmc+eyJNb250aCJ9LAogICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDogKF8pIHt9Li5zYW1wbGVDb2RlU3RyID0gIihfKXt9IiwKICAgICAgKSwKICAgIF0sCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIOebuOWFs+e7hOS7tgoKIyMjIEdlc3R1cmVEZXRlY3RvcgoK5LqL5Lu25L6m5rWL5Zmo77yMZmx1dHRlcueahOWll+i3r+aYr+e7hOS7tue7hOWQiO+8jOWmguaenOWll+S4ikdlc3R1cmVEZXRlY3Rvcu+8jOWFtuS7lue7hOS7tuS5n+WPr+S7peWkhOeQhueCueWHu+S6i+S7tu+8jOaooeS7v+aMiemSruihjOS4uuOAggoKYGBgZmx1dHRlcgpHZXN0dXJlRGV0ZWN0b3IoCiAgb25UYXA6ICgpIHsvKueCueWHu+S6i+S7tiovfSksCiAgY2hpbGQ6IFRleHQoIuaWh+acrOWPmOaMiemSriIpLAopCmBgYAogICcnJyk7CgogIC8vIHRvZG8g5aKe5YqgR2VzdHVyZURldGVjdG9y6IyD5L6LCiAgLy8gcHJpbnQuc2FtcGxlTWF0ZShHZXN0dXJlRGV0ZWN0b3IkTWF0ZSgKICAvLyAgIC8vIHRvZG8gZGVmYXVsdCB2YWx1Ze+8mui/meenjeWPmOmHj+Wei+eahOaYr+S4jeaYr+WPr+S7peW8hOS4gOS4iyAga0RlZmF1bHRUcmFja3BhZFNjcm9sbFRvU2NhbGVGYWN0b3IKICAvLyAgIHRyYWNrcGFkU2Nyb2xsVG9TY2FsZUZhY3Rvcjoga0RlZmF1bHRUcmFja3BhZFNjcm9sbFRvU2NhbGVGYWN0b3IsCiAgLy8gICBjaGlsZDogY29uc3QgVGV4dCgi5paH5pys5Y+Y5oyJ6ZKuIiksCiAgLy8gICBvblRhcDogKCkgey8qKnRvZG8gVUkgbG9n77yM5pi+56S65Yiw5o6n5Yi25Y+w5L6/5LqO5LiA6Iis5oCn55qE5LqL5Lu25bGV56S6KiovfSwKICAvLyApKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyMgSW5rKue7hOS7tgoK5Y+v6KKr55So5p2l5qih5Lu/QnV0dG9u44CCCgpJbmtXZWxsL0lua1Jlc3BvbnNlID0gR2VzdHVyZURldGVjdG9yICsgTWF0ZXJpYWzpo47moLznmoTliqjmgIHmlYjmnpwg44CCCgrnu6fmib/lhbPns7vvvJoKLSBTdGF0ZWxlc3NXaWRnZXQKICAtIElua1Jlc3BvbnNlCiAgICAtIElua1dlbGwKICAgIArmgqjlnKjkuIvpnaLkuInnp43kuI3lkIznmoTmlofmnKzkuIrngrnngrnnnIvljLrliKvvvJoKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlKENvbHVtbiRNYXRlKAogICAgY2hpbGRyZW46IFsKICAgICAgVGV4dCRNYXRlKCIxLuaZrumAmlRleHQiKSwKICAgICAgSW5rV2VsbCRNYXRlKAogICAgICAgIG9uVGFwOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCIyLuijueS6huWxgklua1dlbGznmoRUZXh0IiksCiAgICAgICksCiAgICAgIElua1Jlc3BvbnNlJE1hdGUoCiAgICAgICAgb25UYXA6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoIjMu6KO55LqG5bGCSW5rUmVzcG9uc2XnmoRUZXh0IiksCiAgICAgICkKICAgIF0sCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIyBCdXR0b25CYXIgCgrmjInpkq7nmoTluIPlsYDlrrnlmajvvIzlj6/ku6XmjInlhoXlrrnnmoTlrp7pmYXlrr3luqblnKjooYzmiJbliJfkuYvpl7TosIPmlbTvvIzmgqjmiorkuIvpnaLojIPkvovkuK3niLblrrnlmahDb250YWluZXIud2lkdGjosIPlsI/kupvnnIvnnIvvvJoKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlKENvbnRhaW5lciRNYXRlKAogICAgd2lkdGg6IDYwMCwKICAgIGNvbG9yOiBDb2xvcnMubGltZS5zaGFkZTUwLAogICAgY2hpbGQ6IEJ1dHRvbkJhciRNYXRlKAogICAgICBjaGlsZHJlbjogWwogICAgICAgIEVsZXZhdGVkQnV0dG9uJE1hdGUoCiAgICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoIkVsZXZhdGVkQnV0dG9uMiIpKSwKICAgICAgICBPdXRsaW5lZEJ1dHRvbiRNYXRlKAogICAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCdPdXRsaW5lZEJ1dHRvbicpKSwKICAgICAgICBDaGVja2JveE1lbnVCdXR0b24kTWF0ZSgKICAgICAgICAgICAgdmFsdWU6IHRydWUsCiAgICAgICAgICAgIG9uQ2hhbmdlZDogKF8pIHt9Li5zYW1wbGVDb2RlU3RyID0gIihfKXt9IiwKICAgICAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgnQ2hlY2tib3hNZW51QnV0dG9uJykpLAogICAgICBdLAogICAgKSwKICApKSk7Cn0K"
    );
