// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 472,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # Notebook)
        (
          cellType: 'body',
          offset: 472,
          end: 621,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("hello flutter-note , i , print("today is ${DateTime.now)
        (
          cellType: 'body',
          offset: 699,
          end: 789,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' notebook的方)
        (
          cellType: 'body',
          offset: 867,
          end: 1054,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(ToggleButtons(isSelected)
        (
          cellType: 'body',
          offset: 1132,
          end: 1310,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 或者，发现[Time)
        (
          cellType: 'body',
          offset: 1388,
          end: 1530,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (ValueNotifier<int> times = Val, int maxTimes = 600;, var random = Random(1);, Timer.periodic(const Duration(, print(ListenableBuilder(listen)
        (
          cellType: 'body',
          offset: 1608,
          end: 2335,
          statementCount: 5,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" notebook模式的)
        (
          cellType: 'body',
          offset: 2413,
          end: 2793,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(ObjectContent("hello"));, print("hello");)
        (
          cellType: 'body',
          offset: 2871,
          end: 2983,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### Markdow)
        (
          cellType: 'body',
          offset: 3061,
          end: 3164,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MarkdownContent("""hello, print.markdown("""hello 形式2""")
        (
          cellType: 'body',
          offset: 3242,
          end: 3348,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### WidgetC)
        (
          cellType: 'body',
          offset: 3426,
          end: 3476,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(WidgetContent(Container(, print(Container(width: 100, he)
        (
          cellType: 'body',
          offset: 3554,
          end: 3769,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### SampleC)
        (
          cellType: 'body',
          offset: 3847,
          end: 4090,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSample(Container$Mat, print(Container$Mate(width: 10)
        (
          cellType: 'body',
          offset: 4168,
          end: 4388,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 事件回调的问题 )
        (
          cellType: 'body',
          offset: 4466,
          end: 4564,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ({int count = 0; print(Elevated)
        (
          cellType: 'body',
          offset: 4642,
          end: 4856,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 问题原因：onPres)
        (
          cellType: 'body',
          offset: 4934,
          end: 5212,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int i = 0;, print(StatefulBuilder(builder:)
        (
          cellType: 'body',
          offset: 5290,
          end: 5499,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### 处理方案2  )
        (
          cellType: 'body',
          offset: 5577,
          end: 5658,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ((NoteCell print) {int i = 0; p)
        (
          cellType: 'body',
          offset: 5736,
          end: 5959,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 或用runInCurr)
        (
          cellType: 'body',
          offset: 6037,
          end: 6126,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.runInCurrentCell((NoteCe)
        (
          cellType: 'body',
          offset: 6204,
          end: 6428,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## cell的元信息)
        (
          cellType: 'body',
          offset: 6506,
          end: 6549,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("源文件中当前cell的index：${prin, print("源文件中当前cell的起始字符位置：${pri, print("源文件中当前cell的结束字符位置：${pri, print("源文件中当前cell的代码块：${print.)
        (
          cellType: 'body',
          offset: 6627,
          end: 6903,
          statementCount: 4,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 结束  上面回调)
        (
          cellType: 'body',
          offset: 6981,
          end: 7053,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 7053,
          end: 7055,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
