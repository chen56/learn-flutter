// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 467,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # Notebook)
        (
          cellType: 'body',
          offset: 467,
          end: 616,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("hello flutter-note , i , print("today is ${DateTime.now)
        (
          cellType: 'body',
          offset: 694,
          end: 784,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' notebook的方)
        (
          cellType: 'body',
          offset: 862,
          end: 1049,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(ToggleButtons(isSelected)
        (
          cellType: 'body',
          offset: 1127,
          end: 1305,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 或者，发现[Time)
        (
          cellType: 'body',
          offset: 1383,
          end: 1525,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (ValueNotifier<int> times = Val, int maxTimes = 600;, var random = Random(1);, Timer.periodic(const Duration(, print(ListenableBuilder(listen)
        (
          cellType: 'body',
          offset: 1603,
          end: 2330,
          statementCount: 5,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" notebook模式的)
        (
          cellType: 'body',
          offset: 2408,
          end: 2788,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(ObjectContent("hello"));, print("hello");)
        (
          cellType: 'body',
          offset: 2866,
          end: 2978,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### Markdow)
        (
          cellType: 'body',
          offset: 3056,
          end: 3159,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown("""hello markdo)
        (
          cellType: 'body',
          offset: 3237,
          end: 3283,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### WidgetC)
        (
          cellType: 'body',
          offset: 3361,
          end: 3411,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(WidgetContent(Container(, print(Container(width: 100, he)
        (
          cellType: 'body',
          offset: 3489,
          end: 3704,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### SampleC)
        (
          cellType: 'body',
          offset: 3782,
          end: 4025,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai, print(Container$Mate(width: 10)
        (
          cellType: 'body',
          offset: 4103,
          end: 4330,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 事件回调的问题 )
        (
          cellType: 'body',
          offset: 4408,
          end: 4506,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ({int count = 0; print(Elevated)
        (
          cellType: 'body',
          offset: 4584,
          end: 4798,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 问题原因：onPres)
        (
          cellType: 'body',
          offset: 4876,
          end: 5154,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int i = 0;, print(StatefulBuilder(builder:)
        (
          cellType: 'body',
          offset: 5232,
          end: 5441,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### 处理方案2  )
        (
          cellType: 'body',
          offset: 5519,
          end: 5600,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ((NoteCell print) {int i = 0; p)
        (
          cellType: 'body',
          offset: 5678,
          end: 5901,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 或用runInCurr)
        (
          cellType: 'body',
          offset: 5979,
          end: 6068,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.runInCurrentCell((NoteCe)
        (
          cellType: 'body',
          offset: 6146,
          end: 6370,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## cell的元信息)
        (
          cellType: 'body',
          offset: 6448,
          end: 6491,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("源文件中当前cell的index：${prin, print("源文件中当前cell的起始字符位置：${pri, print("源文件中当前cell的结束字符位置：${pri, print("源文件中当前cell的代码块：${print.)
        (
          cellType: 'body',
          offset: 6569,
          end: 6845,
          statementCount: 4,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 结束  上面回调)
        (
          cellType: 'body',
          offset: 6923,
          end: 6995,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 6995,
          end: 6997,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
