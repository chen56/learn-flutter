// /// Generated by gen_maters.dart, please don't edit!

// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = (
  /// you need define page variable in page.dart
  /// it is use to register page meta info
  meta: page,
  cells: [
    /// ()
    (
      cellType: 'header',
      offset: 0,
      end: 426,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' # Notebook)
    (
      cellType: 'body',
      offset: 426,
      end: 576,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print("hello flutter-note , i , print("today is ${DateTime.now)
    (
      cellType: 'body',
      offset: 654,
      end: 742,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' notebook的方)
    (
      cellType: 'body',
      offset: 820,
      end: 1007,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(ToggleButtons(isSelected)
    (
      cellType: 'body',
      offset: 1085,
      end: 1263,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' 或者，发现[Time)
    (
      cellType: 'body',
      offset: 1341,
      end: 1483,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (ValueNotifier<int> times = Val, int maxTimes = 600;, var random = Random(1);, Timer.periodic(const Duration(, print(ListenableBuilder(listen)
    (
      cellType: 'body',
      offset: 1561,
      end: 2288,
      statementCount: 5,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" notebook模式的)
    (
      cellType: 'body',
      offset: 2366,
      end: 2746,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(ObjectContent("hello"));, print("hello");)
    (
      cellType: 'body',
      offset: 2824,
      end: 2936,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" ### Markdow)
    (
      cellType: 'body',
      offset: 3014,
      end: 3117,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MarkdownContent("""hello, print.markdown("""hello 形式2""")
    (
      cellType: 'body',
      offset: 3195,
      end: 3301,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" ### WidgetC)
    (
      cellType: 'body',
      offset: 3379,
      end: 3481,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(WidgetContent(Container(, print(Container(width: 100, he)
    (
      cellType: 'body',
      offset: 3559,
      end: 3774,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" ### SampleC)
    (
      cellType: 'body',
      offset: 3852,
      end: 4095,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Container$Mat, print(Container$Mate(width: 10)
    (
      cellType: 'body',
      offset: 4173,
      end: 4393,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 4186,
          end: 4278,
        )
      ],
    ),

    /// (print.markdown(""" ## 事件回调的问题 )
    (
      cellType: 'body',
      offset: 4471,
      end: 4569,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ({int count = 0; print(Elevated)
    (
      cellType: 'body',
      offset: 4647,
      end: 4861,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" 问题原因：onPres)
    (
      cellType: 'body',
      offset: 4939,
      end: 5217,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (int i = 0;, print(StatefulBuilder(builder:)
    (
      cellType: 'body',
      offset: 5295,
      end: 5504,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" ### 处理方案2  )
    (
      cellType: 'body',
      offset: 5582,
      end: 5663,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ((NoteCell print) {int i = 0; p)
    (
      cellType: 'body',
      offset: 5741,
      end: 5964,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" 或用runInCurr)
    (
      cellType: 'body',
      offset: 6042,
      end: 6131,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.runInCurrentCell((NoteCe)
    (
      cellType: 'body',
      offset: 6209,
      end: 6433,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'Pen.runInCurrentCell',
          offset: 6212,
          end: 6429,
        )
      ],
    ),

    /// (print.markdown(""" ## cell的元信息)
    (
      cellType: 'body',
      offset: 6511,
      end: 6554,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print("源文件中当前cell的index：${prin, print("源文件中当前cell的起始字符位置：${pri, print("源文件中当前cell的结束字符位置：${pri, print("源文件中当前cell的代码块：${print.)
    (
      cellType: 'body',
      offset: 6632,
      end: 6908,
      statementCount: 4,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" ## cell 内特的)
    (
      cellType: 'body',
      offset: 6986,
      end: 7034,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ({double x = 1; print.runInCurr, print("2");)
    (
      cellType: 'body',
      offset: 7112,
      end: 7263,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'Pen.runInCurrentCell',
          offset: 7168,
          end: 7240,
        )
      ],
    ),

    /// (print.markdown(""" ## 结束  上面回调)
    (
      cellType: 'body',
      offset: 7341,
      end: 7413,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ()
    (
      cellType: 'tail',
      offset: 7413,
      end: 7415,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    )
  ],
  encodedCode:
      ""
);
