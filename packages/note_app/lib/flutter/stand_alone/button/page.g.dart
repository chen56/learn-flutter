// /// Generated by gen_maters.dart, please don't edit!

// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = (
  /// you need define page variable in page.dart
  /// it is use to register page meta info
  meta: page,
  cells: [
    /// ()
    (
      cellType: 'header',
      offset: 0,
      end: 248,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ()
    (
      cellType: 'body',
      offset: 248,
      end: 251,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' # button  )
    (
      cellType: 'body',
      offset: 329,
      end: 580,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Wrap$Mate(chi)
    (
      cellType: 'body',
      offset: 658,
      end: 1348,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 661,
          end: 1344,
        )
      ],
    ),

    /// (print.markdown(r''' ### IconBu)
    (
      cellType: 'body',
      offset: 1426,
      end: 1482,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 1560,
      end: 2069,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 1563,
          end: 2065,
        )
      ],
    ),

    /// (print.markdown(r''' ### Floati)
    (
      cellType: 'body',
      offset: 2147,
      end: 2235,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (int id = 0;, print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 2313,
      end: 3315,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 2331,
          end: 3311,
        )
      ],
    ),

    /// (print.markdown(r''' ### 几个特殊的系)
    (
      cellType: 'body',
      offset: 3393,
      end: 3722,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 3800,
      end: 3971,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 3803,
          end: 3967,
        )
      ],
    ),

    /// (print.markdown(r'''  ### Toggl)
    (
      cellType: 'body',
      offset: 4049,
      end: 4202,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 4280,
      end: 4618,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 4283,
          end: 4614,
        )
      ],
    ),

    /// (print.markdown(r''' ### Segmen)
    (
      cellType: 'body',
      offset: 4696,
      end: 4901,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 4979,
      end: 5932,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 4982,
          end: 5928,
        )
      ],
    ),

    /// (print.markdown(r''' ## 相关组件  #)
    (
      cellType: 'body',
      offset: 6010,
      end: 6550,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ### Ink*组件)
    (
      cellType: 'body',
      offset: 6628,
      end: 6826,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Column$Mate(c)
    (
      cellType: 'body',
      offset: 6904,
      end: 7250,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 6907,
          end: 7246,
        )
      ],
    ),

    /// (print.markdown(r''' ### Button)
    (
      cellType: 'body',
      offset: 7328,
      end: 7437,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Container$Mat)
    (
      cellType: 'body',
      offset: 7515,
      end: 8099,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 7518,
          end: 8098,
        )
      ],
    ),

    /// ()
    (
      cellType: 'tail',
      offset: 8099,
      end: 8101,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    )
  ],
  encodedCode:
      ""
);
