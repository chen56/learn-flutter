// /// Generated by gen_maters.dart, please don't edit!

// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = (
  /// you need define page variable in page.dart
  /// it is use to register page meta info
  meta: page,
  cells: [
    /// ()
    (
      cellType: 'header',
      offset: 0,
      end: 242,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// ({{{for (var x in print.cells) )
    (
      cellType: 'body',
      offset: 242,
      end: 429,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 349,
          end: 385,
        )
      ],
    ),

    /// (print.markdown(r''' # button  )
    (
      cellType: 'body',
      offset: 507,
      end: 758,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Wrap$Mate(chi)
    (
      cellType: 'body',
      offset: 836,
      end: 1312,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 839,
          end: 1308,
        )
      ],
    ),

    /// (print.markdown(r''' ### IconBu)
    (
      cellType: 'body',
      offset: 1390,
      end: 1446,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 1524,
      end: 1921,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 1527,
          end: 1917,
        )
      ],
    ),

    /// (print.markdown(r''' ### Floati)
    (
      cellType: 'body',
      offset: 1999,
      end: 2087,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (int id = 0;, print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 2165,
      end: 3071,
      statementCount: 2,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 2183,
          end: 3067,
        )
      ],
    ),

    /// (print.markdown(r''' ### 几个特殊的系)
    (
      cellType: 'body',
      offset: 3149,
      end: 3478,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 3556,
      end: 3727,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 3559,
          end: 3723,
        )
      ],
    ),

    /// (print.markdown(r'''  ### Toggl)
    (
      cellType: 'body',
      offset: 3805,
      end: 3958,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 4036,
      end: 4357,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 4039,
          end: 4353,
        )
      ],
    ),

    /// (print.markdown(r''' ### Segmen)
    (
      cellType: 'body',
      offset: 4435,
      end: 4640,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Row$Mate(chil)
    (
      cellType: 'body',
      offset: 4718,
      end: 5669,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 4721,
          end: 5665,
        )
      ],
    ),

    /// (print.markdown(r''' ## 相关组件  #)
    (
      cellType: 'body',
      offset: 5747,
      end: 6287,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ### Ink*组件)
    (
      cellType: 'body',
      offset: 6365,
      end: 6563,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Column$Mate(c)
    (
      cellType: 'body',
      offset: 6641,
      end: 6939,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 6644,
          end: 6935,
        )
      ],
    ),

    /// (print.markdown(r''' ### Button)
    (
      cellType: 'body',
      offset: 7017,
      end: 7126,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSample(Container$Mat)
    (
      cellType: 'body',
      offset: 7204,
      end: 7701,
      statementCount: 1,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[
        (
          nodeType: 'MateSample.new.firstParentStatement',
          offset: 7207,
          end: 7700,
        )
      ],
    ),

    /// ()
    (
      cellType: 'tail',
      offset: 7701,
      end: 7703,
      statementCount: 0,
      specialNodes: <({
        String nodeType,
        int end,
        int offset,
      })>[],
    )
  ],
  encodedCode:
      ""
);
