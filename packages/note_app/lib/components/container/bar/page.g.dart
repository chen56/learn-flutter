// /// Generated by gen_maters.dart, please don't edit!

// ignore: always_use_package_imports
import 'page.dart';

final noteInfo = (
  /// you need define page variable in page.dart
  /// it is use to register page meta info
  meta: page,
  cells: [
    /// ()
    (
      cellType: 'header',
      offset: 0,
      end: 352,
      statementCount: 0,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## AppBar )
    (
      cellType: 'body',
      offset: 352,
      end: 487,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSampleContent(AppBar)
    (
      cellType: 'body',
      offset: 565,
      end: 1183,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## BottomA)
    (
      cellType: 'body',
      offset: 1261,
      end: 1426,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSampleContent(Bottom)
    (
      cellType: 'body',
      offset: 1504,
      end: 2138,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r'''    ## ~~Bo)
    (
      cellType: 'body',
      offset: 2216,
      end: 2581,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSampleContent(Column)
    (
      cellType: 'body',
      offset: 2659,
      end: 3242,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' Navigation)
    (
      cellType: 'body',
      offset: 3320,
      end: 3437,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (var currentPageIndex = 0;, flutter.Widget buildNavigation, print(MateSampleContent(Statef)
    (
      cellType: 'body',
      offset: 3515,
      end: 4588,
      statementCount: 3,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## Navigat)
    (
      cellType: 'body',
      offset: 4666,
      end: 5013,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (var navigationRail$Mate = Navi, print(MateSampleContent(Row$Ma)
    (
      cellType: 'body',
      offset: 5091,
      end: 6307,
      statementCount: 2,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## TabBar )
    (
      cellType: 'body',
      offset: 6385,
      end: 6883,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSampleContent(Defaul)
    (
      cellType: 'body',
      offset: 6961,
      end: 7544,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' 再来看看加了TabV)
    (
      cellType: 'body',
      offset: 7622,
      end: 7687,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSampleContent(Defaul)
    (
      cellType: 'body',
      offset: 7765,
      end: 8836,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(""" 上面用法和[Navig)
    (
      cellType: 'body',
      offset: 8914,
      end: 9185,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (onPressed() {flutter.ScaffoldM, print(MateSampleContent(SizedB)
    (
      cellType: 'body',
      offset: 9263,
      end: 10182,
      statementCount: 2,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## ButtonB)
    (
      cellType: 'body',
      offset: 10260,
      end: 10591,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSampleContent(Contai)
    (
      cellType: 'body',
      offset: 10669,
      end: 11032,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## Overflo)
    (
      cellType: 'body',
      offset: 11110,
      end: 11317,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print(MateSampleContent(Contai)
    (
      cellType: 'body',
      offset: 11395,
      end: 12421,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (print.markdown(r''' ## Platfor)
    (
      cellType: 'body',
      offset: 12499,
      end: 13034,
      statementCount: 1,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// (var click = () {flutter.showAb, print(MateSampleContent(MenuBa)
    (
      cellType: 'body',
      offset: 13112,
      end: 13956,
      statementCount: 2,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    ),

    /// ()
    (
      cellType: 'tail',
      offset: 13956,
      end: 13958,
      statementCount: 0,
      specialBlocks: <({
        String blockType,
        int end,
        int offset,
      })>[],
    )
  ],
  code:
      ""
);
