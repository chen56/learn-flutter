// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/multitap.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/animation.dart';

/// class DoubleTapGestureRecognizer extends GestureRecognizer
class DoubleTapGestureRecognizer$Mate extends DoubleTapGestureRecognizer with Mate {
  /// DoubleTapGestureRecognizer DoubleTapGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  DoubleTapGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior} , defaultValue:unprocessed
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'DoubleTapGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => DoubleTapGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('debugOwner', debugOwner);
    mateUse('supportedDevices', supportedDevices);
    mateUse('allowedButtonsFilter', allowedButtonsFilter);
  }
}

/// class MultiTapGestureRecognizer extends GestureRecognizer
class MultiTapGestureRecognizer$Mate extends MultiTapGestureRecognizer with Mate {
  /// MultiTapGestureRecognizer MultiTapGestureRecognizer({Duration longTapDelay = Duration.zero, Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  MultiTapGestureRecognizer$Mate({
    /// optionalParameters: {Duration longTapDelay = Duration.zero} , defaultValue:PrefixedIdentifier
    Duration longTapDelay = Duration.zero,

    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , defaultValue:none
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          longTapDelay: longTapDelay,
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'MultiTapGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => MultiTapGestureRecognizer$Mate(
          longTapDelay: p.get('longTapDelay').build(),
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('longTapDelay', longTapDelay);
    mateUse('debugOwner', debugOwner);
    mateUse('supportedDevices', supportedDevices);
    mateUse('allowedButtonsFilter', allowedButtonsFilter);
  }
}

/// class SerialTapDownDetails
class SerialTapDownDetails$Mate extends SerialTapDownDetails with Mate {
  /// SerialTapDownDetails SerialTapDownDetails({Offset globalPosition = Offset.zero, Offset? localPosition, required PointerDeviceKind kind, int buttons = 0, int count = 1})
  SerialTapDownDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , defaultValue:PrefixedIdentifier
    Offset globalPosition = Offset.zero,

    /// optionalParameters: {Offset? localPosition} , defaultValue:none
    Offset? localPosition,

    /// optionalParameters: {required PointerDeviceKind kind} , defaultValue:none
    required PointerDeviceKind kind,

    /// optionalParameters: {int buttons = 0} , defaultValue:Literal
    int buttons = 0,

    /// optionalParameters: {int count = 1} , defaultValue:Literal
    int count = 1,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
          buttons: buttons,
          count: count,
        ) {
    mateCreateName = 'SerialTapDownDetails';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapDownDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
          buttons: p.get('buttons').build(),
          count: p.get('count').build(),
        );
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
    mateUse('kind', kind);
    mateUse('buttons', buttons);
    mateUse('count', count);
  }
}

/// class SerialTapCancelDetails
class SerialTapCancelDetails$Mate extends SerialTapCancelDetails with Mate {
  /// SerialTapCancelDetails SerialTapCancelDetails({int count = 1})
  SerialTapCancelDetails$Mate(
      {
      /// optionalParameters: {int count = 1} , defaultValue:Literal
      int count = 1})
      : super(count: count) {
    mateCreateName = 'SerialTapCancelDetails';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapCancelDetails$Mate(count: p.get('count').build());
    mateUse('count', count);
  }
}

/// class SerialTapUpDetails
class SerialTapUpDetails$Mate extends SerialTapUpDetails with Mate {
  /// SerialTapUpDetails SerialTapUpDetails({Offset globalPosition = Offset.zero, Offset? localPosition, PointerDeviceKind? kind, int count = 1})
  SerialTapUpDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , defaultValue:PrefixedIdentifier
    Offset globalPosition = Offset.zero,

    /// optionalParameters: {Offset? localPosition} , defaultValue:none
    Offset? localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , defaultValue:none
    PointerDeviceKind? kind,

    /// optionalParameters: {int count = 1} , defaultValue:Literal
    int count = 1,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
          count: count,
        ) {
    mateCreateName = 'SerialTapUpDetails';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapUpDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
          count: p.get('count').build(),
        );
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
    mateUse('kind', kind);
    mateUse('count', count);
  }
}

/// class SerialTapGestureRecognizer extends GestureRecognizer
class SerialTapGestureRecognizer$Mate extends SerialTapGestureRecognizer with Mate {
  /// SerialTapGestureRecognizer SerialTapGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  SerialTapGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , defaultValue:none
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'SerialTapGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('debugOwner', debugOwner);
    mateUse('supportedDevices', supportedDevices);
    mateUse('allowedButtonsFilter', allowedButtonsFilter);
  }
}
