// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/gestures/multitap.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/gestures/recognizer.dart';import 'package:note/mate.dart' show Mate;/// class DoubleTapGestureRecognizer extends GestureRecognizer
class DoubleTapGestureRecognizer$Mate extends DoubleTapGestureRecognizer with Mate {/// DoubleTapGestureRecognizer DoubleTapGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
DoubleTapGestureRecognizer$Mate({/// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
Object? debugOwner, /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
Set<PointerDeviceKind>? supportedDevices, /// optionalParameters: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior} , hasDefaultValue:true, defaultValueCode:_defaultButtonAcceptBehavior
AllowedButtonsFilter? allowedButtonsFilter, }) : super(debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter, ) { mateBuilder = (p) => DoubleTapGestureRecognizer$Mate(debugOwner: p.get('debugOwner').build(), supportedDevices: p.get('supportedDevices').build(), allowedButtonsFilter: p.get('allowedButtonsFilter').build(), );
matePut('debugOwner', debugOwner);
matePut('supportedDevices', supportedDevices);
matePut('allowedButtonsFilter', allowedButtonsFilter); }

 }
/// class MultiTapGestureRecognizer extends GestureRecognizer
class MultiTapGestureRecognizer$Mate extends MultiTapGestureRecognizer with Mate {/// MultiTapGestureRecognizer MultiTapGestureRecognizer({Duration longTapDelay = Duration.zero, Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
MultiTapGestureRecognizer$Mate({/// optionalParameters: {Duration longTapDelay = Duration.zero} , hasDefaultValue:true, defaultValueCode:Duration.zero
required Duration longTapDelay, /// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
Object? debugOwner, /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
Set<PointerDeviceKind>? supportedDevices, /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
AllowedButtonsFilter? allowedButtonsFilter, }) : super(longTapDelay: longTapDelay, debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter, ) { mateBuilder = (p) => MultiTapGestureRecognizer$Mate(longTapDelay: p.get('longTapDelay').build(), debugOwner: p.get('debugOwner').build(), supportedDevices: p.get('supportedDevices').build(), allowedButtonsFilter: p.get('allowedButtonsFilter').build(), );
matePut('longTapDelay', longTapDelay);
matePut('debugOwner', debugOwner);
matePut('supportedDevices', supportedDevices);
matePut('allowedButtonsFilter', allowedButtonsFilter); }

 }
/// class SerialTapDownDetails
class SerialTapDownDetails$Mate extends SerialTapDownDetails with Mate {/// SerialTapDownDetails SerialTapDownDetails({Offset globalPosition = Offset.zero, Offset? localPosition, required PointerDeviceKind kind, int buttons = 0, int count = 1})
SerialTapDownDetails$Mate({/// optionalParameters: {Offset globalPosition = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset globalPosition, /// optionalParameters: {Offset? localPosition} , hasDefaultValue:false, defaultValueCode:null
Offset? localPosition, /// optionalParameters: {required PointerDeviceKind kind} , hasDefaultValue:false, defaultValueCode:null
required PointerDeviceKind kind, /// optionalParameters: {int buttons = 0} , hasDefaultValue:true, defaultValueCode:0
required int buttons, /// optionalParameters: {int count = 1} , hasDefaultValue:true, defaultValueCode:1
required int count, }) : super(globalPosition: globalPosition, localPosition: localPosition, kind: kind, buttons: buttons, count: count, ) { mateBuilder = (p) => SerialTapDownDetails$Mate(globalPosition: p.get('globalPosition').build(), localPosition: p.get('localPosition').build(), kind: p.get('kind').build(), buttons: p.get('buttons').build(), count: p.get('count').build(), );
matePut('globalPosition', globalPosition);
matePut('localPosition', localPosition);
matePut('kind', kind);
matePut('buttons', buttons);
matePut('count', count); }

 }
/// class SerialTapCancelDetails
class SerialTapCancelDetails$Mate extends SerialTapCancelDetails with Mate {/// SerialTapCancelDetails SerialTapCancelDetails({int count = 1})
SerialTapCancelDetails$Mate({/// optionalParameters: {int count = 1} , hasDefaultValue:true, defaultValueCode:1
required int count}) : super(count: count) { mateBuilder = (p) => SerialTapCancelDetails$Mate(count: p.get('count').build());
matePut('count', count); }

 }
/// class SerialTapUpDetails
class SerialTapUpDetails$Mate extends SerialTapUpDetails with Mate {/// SerialTapUpDetails SerialTapUpDetails({Offset globalPosition = Offset.zero, Offset? localPosition, PointerDeviceKind? kind, int count = 1})
SerialTapUpDetails$Mate({/// optionalParameters: {Offset globalPosition = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset globalPosition, /// optionalParameters: {Offset? localPosition} , hasDefaultValue:false, defaultValueCode:null
Offset? localPosition, /// optionalParameters: {PointerDeviceKind? kind} , hasDefaultValue:false, defaultValueCode:null
PointerDeviceKind? kind, /// optionalParameters: {int count = 1} , hasDefaultValue:true, defaultValueCode:1
required int count, }) : super(globalPosition: globalPosition, localPosition: localPosition, kind: kind, count: count, ) { mateBuilder = (p) => SerialTapUpDetails$Mate(globalPosition: p.get('globalPosition').build(), localPosition: p.get('localPosition').build(), kind: p.get('kind').build(), count: p.get('count').build(), );
matePut('globalPosition', globalPosition);
matePut('localPosition', localPosition);
matePut('kind', kind);
matePut('count', count); }

 }
/// class SerialTapGestureRecognizer extends GestureRecognizer
class SerialTapGestureRecognizer$Mate extends SerialTapGestureRecognizer with Mate {/// SerialTapGestureRecognizer SerialTapGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
SerialTapGestureRecognizer$Mate({/// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
Object? debugOwner, /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
Set<PointerDeviceKind>? supportedDevices, /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
AllowedButtonsFilter? allowedButtonsFilter, }) : super(debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter, ) { mateBuilder = (p) => SerialTapGestureRecognizer$Mate(debugOwner: p.get('debugOwner').build(), supportedDevices: p.get('supportedDevices').build(), allowedButtonsFilter: p.get('allowedButtonsFilter').build(), );
matePut('debugOwner', debugOwner);
matePut('supportedDevices', supportedDevices);
matePut('allowedButtonsFilter', allowedButtonsFilter); }

 }
