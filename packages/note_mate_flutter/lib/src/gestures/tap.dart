// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/gestures/tap.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/animation.dart' as _i4;
import 'package:flutter/src/gestures/recognizer.dart' as _i5;

/// class TapDownDetails
class TapDownDetails$Mate extends _i1.TapDownDetails with _i2.Mate {
  /// TapDownDetails TapDownDetails({Offset globalPosition = Offset.zero, Offset? localPosition, PointerDeviceKind? kind})
  TapDownDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i3.Offset globalPosition = _i4.Offset.zero,

    /// optionalParameters: {Offset? localPosition} , default:none
    _i3.Offset? localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , default:none
    _i3.PointerDeviceKind? kind,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
        ) {
    mateBuilderName = 'TapDownDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TapDownDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
        );
    mateUse(
      'globalPosition',
      globalPosition,
      isNamed: true,
      defaultValue: _i4.Offset.zero,
    );
    mateUse(
      'localPosition',
      localPosition,
      isNamed: true,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
    );
  }
}

/// class TapUpDetails
class TapUpDetails$Mate extends _i1.TapUpDetails with _i2.Mate {
  /// TapUpDetails TapUpDetails({required PointerDeviceKind kind, Offset globalPosition = Offset.zero, Offset? localPosition})
  TapUpDetails$Mate({
    /// optionalParameters: {required PointerDeviceKind kind} , default:none
    required _i3.PointerDeviceKind kind,

    /// optionalParameters: {Offset globalPosition = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i3.Offset globalPosition = _i4.Offset.zero,

    /// optionalParameters: {Offset? localPosition} , default:none
    _i3.Offset? localPosition,
  }) : super(
          kind: kind,
          globalPosition: globalPosition,
          localPosition: localPosition,
        ) {
    mateBuilderName = 'TapUpDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TapUpDetails$Mate(
          kind: p.get('kind').build(),
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
        );
    mateUse(
      'kind',
      kind,
      isNamed: true,
    );
    mateUse(
      'globalPosition',
      globalPosition,
      isNamed: true,
      defaultValue: _i4.Offset.zero,
    );
    mateUse(
      'localPosition',
      localPosition,
      isNamed: true,
    );
  }
}

/// class TapGestureRecognizer extends BaseTapGestureRecognizer
class TapGestureRecognizer$Mate extends _i1.TapGestureRecognizer with _i2.Mate {
  /// TapGestureRecognizer TapGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  TapGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , default:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , default:none
    Set<_i3.PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , default:none
    _i5.AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateBuilderName = 'TapGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => TapGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse(
      'debugOwner',
      debugOwner,
      isNamed: true,
    );
    mateUse(
      'supportedDevices',
      supportedDevices,
      isNamed: true,
    );
    mateUse(
      'allowedButtonsFilter',
      allowedButtonsFilter,
      isNamed: true,
    );
  }
}
