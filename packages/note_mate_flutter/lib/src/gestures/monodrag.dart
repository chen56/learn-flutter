// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/monodrag.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/gestures/recognizer.dart';

/// class VerticalDragGestureRecognizer extends DragGestureRecognizer
class VerticalDragGestureRecognizer$Mate extends VerticalDragGestureRecognizer with Mate {
  /// VerticalDragGestureRecognizer VerticalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  VerticalDragGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior} , defaultValue:unprocessed
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'VerticalDragGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => VerticalDragGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('debugOwner', debugOwner, isNamed: true);
    mateUse('supportedDevices', supportedDevices, isNamed: true);
    mateUse('allowedButtonsFilter', allowedButtonsFilter, isNamed: true);
  }
}

/// class HorizontalDragGestureRecognizer extends DragGestureRecognizer
class HorizontalDragGestureRecognizer$Mate extends HorizontalDragGestureRecognizer with Mate {
  /// HorizontalDragGestureRecognizer HorizontalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  HorizontalDragGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior} , defaultValue:unprocessed
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'HorizontalDragGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => HorizontalDragGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('debugOwner', debugOwner, isNamed: true);
    mateUse('supportedDevices', supportedDevices, isNamed: true);
    mateUse('allowedButtonsFilter', allowedButtonsFilter, isNamed: true);
  }
}

/// class PanGestureRecognizer extends DragGestureRecognizer
class PanGestureRecognizer$Mate extends PanGestureRecognizer with Mate {
  /// PanGestureRecognizer PanGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  PanGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior} , defaultValue:unprocessed
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'PanGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PanGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('debugOwner', debugOwner, isNamed: true);
    mateUse('supportedDevices', supportedDevices, isNamed: true);
    mateUse('allowedButtonsFilter', allowedButtonsFilter, isNamed: true);
  }
}
