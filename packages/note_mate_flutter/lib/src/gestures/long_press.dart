// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/long_press.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/velocity_tracker.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';

/// class LongPressDownDetails
class LongPressDownDetails$Mate extends LongPressDownDetails with Mate {
  /// LongPressDownDetails LongPressDownDetails({Offset globalPosition = Offset.zero, Offset? localPosition, PointerDeviceKind? kind})
  LongPressDownDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , hasDefaultValue:false, defaultValueCode:null
    Offset? localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , hasDefaultValue:false, defaultValueCode:null
    PointerDeviceKind? kind,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
        ) {
    mateBuilder = (p) => LongPressDownDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
        );
    matePut('globalPosition', globalPosition);
    matePut('localPosition', localPosition);
    matePut('kind', kind);
  }
}

/// class LongPressStartDetails
class LongPressStartDetails$Mate extends LongPressStartDetails with Mate {
  /// LongPressStartDetails LongPressStartDetails({Offset globalPosition = Offset.zero, Offset? localPosition})
  LongPressStartDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , hasDefaultValue:false, defaultValueCode:null
    Offset? localPosition,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
        ) {
    mateBuilder = (p) => LongPressStartDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
        );
    matePut('globalPosition', globalPosition);
    matePut('localPosition', localPosition);
  }
}

/// class LongPressMoveUpdateDetails
class LongPressMoveUpdateDetails$Mate extends LongPressMoveUpdateDetails with Mate {
  /// LongPressMoveUpdateDetails LongPressMoveUpdateDetails({Offset globalPosition = Offset.zero, Offset? localPosition, Offset offsetFromOrigin = Offset.zero, Offset? localOffsetFromOrigin})
  LongPressMoveUpdateDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , hasDefaultValue:false, defaultValueCode:null
    Offset? localPosition,

    /// optionalParameters: {Offset offsetFromOrigin = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset offsetFromOrigin,

    /// optionalParameters: {Offset? localOffsetFromOrigin} , hasDefaultValue:false, defaultValueCode:null
    Offset? localOffsetFromOrigin,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          offsetFromOrigin: offsetFromOrigin,
          localOffsetFromOrigin: localOffsetFromOrigin,
        ) {
    mateBuilder = (p) => LongPressMoveUpdateDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          offsetFromOrigin: p.get('offsetFromOrigin').build(),
          localOffsetFromOrigin: p.get('localOffsetFromOrigin').build(),
        );
    matePut('globalPosition', globalPosition);
    matePut('localPosition', localPosition);
    matePut('offsetFromOrigin', offsetFromOrigin);
    matePut('localOffsetFromOrigin', localOffsetFromOrigin);
  }
}

/// class LongPressEndDetails
class LongPressEndDetails$Mate extends LongPressEndDetails with Mate {
  /// LongPressEndDetails LongPressEndDetails({Offset globalPosition = Offset.zero, Offset? localPosition, Velocity velocity = Velocity.zero})
  LongPressEndDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , hasDefaultValue:false, defaultValueCode:null
    Offset? localPosition,

    /// optionalParameters: {Velocity velocity = Velocity.zero} , hasDefaultValue:true, defaultValueCode:Velocity.zero
    required Velocity velocity,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          velocity: velocity,
        ) {
    mateBuilder = (p) => LongPressEndDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          velocity: p.get('velocity').build(),
        );
    matePut('globalPosition', globalPosition);
    matePut('localPosition', localPosition);
    matePut('velocity', velocity);
  }
}

/// class LongPressGestureRecognizer extends PrimaryPointerGestureRecognizer
class LongPressGestureRecognizer$Mate extends LongPressGestureRecognizer with Mate {
  /// LongPressGestureRecognizer LongPressGestureRecognizer({Duration? duration, double? postAcceptSlopTolerance = null, Set<PointerDeviceKind>? supportedDevices, Object? debugOwner, bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior})
  LongPressGestureRecognizer$Mate({
    /// optionalParameters: {Duration? duration} , hasDefaultValue:false, defaultValueCode:null
    Duration? duration,

    /// optionalParameters: {double? postAcceptSlopTolerance = null} , hasDefaultValue:true, defaultValueCode:null
    double? postAcceptSlopTolerance,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
    Object? debugOwner,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter = _defaultButtonAcceptBehavior} , hasDefaultValue:true, defaultValueCode:_defaultButtonAcceptBehavior
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          duration: duration,
          postAcceptSlopTolerance: postAcceptSlopTolerance,
          supportedDevices: supportedDevices,
          debugOwner: debugOwner,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateBuilder = (p) => LongPressGestureRecognizer$Mate(
          duration: p.get('duration').build(),
          postAcceptSlopTolerance: p.get('postAcceptSlopTolerance').build(),
          supportedDevices: p.get('supportedDevices').build(),
          debugOwner: p.get('debugOwner').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    matePut('duration', duration);
    matePut('postAcceptSlopTolerance', postAcceptSlopTolerance);
    matePut('supportedDevices', supportedDevices);
    matePut('debugOwner', debugOwner);
    matePut('allowedButtonsFilter', allowedButtonsFilter);
  }
}
