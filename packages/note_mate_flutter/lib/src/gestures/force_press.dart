// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/force_press.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';

/// class ForcePressDetails
class ForcePressDetails$Mate extends ForcePressDetails with Mate {
  /// ForcePressDetails ForcePressDetails({required Offset globalPosition, Offset? localPosition, required double pressure})
  ForcePressDetails$Mate({
    /// optionalParameters: {required Offset globalPosition} , defaultValue:none
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , defaultValue:none
    Offset? localPosition,

    /// optionalParameters: {required double pressure} , defaultValue:none
    required double pressure,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          pressure: pressure,
        ) {
    mateBuilder = (p) => ForcePressDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          pressure: p.get('pressure').build(),
        );
    mateDeclare('globalPosition', globalPosition);
    mateDeclare('localPosition', localPosition);
    mateDeclare('pressure', pressure);
  }
}

/// class ForcePressGestureRecognizer extends OneSequenceGestureRecognizer
class ForcePressGestureRecognizer$Mate extends ForcePressGestureRecognizer with Mate {
  /// ForcePressGestureRecognizer ForcePressGestureRecognizer({double startPressure = 0.4, double peakPressure = 0.85, double Function(double, double, double) interpolation = _inverseLerp, Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  ForcePressGestureRecognizer$Mate({
    /// optionalParameters: {double startPressure = 0.4} , defaultValue:Literal
    double startPressure = 0.4,

    /// optionalParameters: {double peakPressure = 0.85} , defaultValue:Literal
    double peakPressure = 0.85,

    /// optionalParameters: {double Function(double, double, double) interpolation = _inverseLerp} , defaultValue:unprocessed
    required GestureForceInterpolation interpolation,

    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , defaultValue:none
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          startPressure: startPressure,
          peakPressure: peakPressure,
          interpolation: interpolation,
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateBuilder = (p) => ForcePressGestureRecognizer$Mate(
          startPressure: p.get('startPressure').build(),
          peakPressure: p.get('peakPressure').build(),
          interpolation: p.get('interpolation').build(),
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateDeclare('startPressure', startPressure);
    mateDeclare('peakPressure', peakPressure);
    mateDeclare('interpolation', interpolation);
    mateDeclare('debugOwner', debugOwner);
    mateDeclare('supportedDevices', supportedDevices);
    mateDeclare('allowedButtonsFilter', allowedButtonsFilter);
  }
}
