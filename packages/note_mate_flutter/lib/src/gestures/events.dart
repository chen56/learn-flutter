// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/events.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/animation.dart';

/// class PointerAddedEvent extends PointerEvent with _PointerEventDescription, _CopyPointerAddedEvent
class PointerAddedEvent$Mate extends PointerAddedEvent with Mate {
  /// PointerAddedEvent PointerAddedEvent({Duration timeStamp = Duration.zero, int pointer = 0, PointerDeviceKind kind = PointerDeviceKind.touch, int device = 0, Offset position = Offset.zero, bool obscured = false, double pressureMin = 1.0, double pressureMax = 1.0, double distance = 0.0, double distanceMax = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, int embedderId = 0})
  PointerAddedEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distance = 0.0} , default:processed=DoubleLiteralImpl
    double distance = 0.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          pointer: pointer,
          kind: kind,
          device: device,
          position: position,
          obscured: obscured,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distance: distance,
          distanceMax: distanceMax,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerAddedEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerAddedEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          pointer: p.get('pointer').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          obscured: p.get('obscured').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distance: p.get('distance').build(),
          distanceMax: p.get('distanceMax').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distance',
      distance,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerRemovedEvent extends PointerEvent with _PointerEventDescription, _CopyPointerRemovedEvent
class PointerRemovedEvent$Mate extends PointerRemovedEvent with Mate {
  /// PointerRemovedEvent PointerRemovedEvent({Duration timeStamp = Duration.zero, int pointer = 0, PointerDeviceKind kind = PointerDeviceKind.touch, int device = 0, Offset position = Offset.zero, bool obscured = false, double pressureMin = 1.0, double pressureMax = 1.0, double distanceMax = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, PointerRemovedEvent? original, int embedderId = 0})
  PointerRemovedEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {PointerRemovedEvent? original} , default:none
    PointerRemovedEvent? original,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          pointer: pointer,
          kind: kind,
          device: device,
          position: position,
          obscured: obscured,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distanceMax: distanceMax,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          original: original,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerRemovedEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerRemovedEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          pointer: p.get('pointer').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          obscured: p.get('obscured').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distanceMax: p.get('distanceMax').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          original: p.get('original').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'original',
      original,
      isNamed: true,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerHoverEvent extends PointerEvent with _PointerEventDescription, _CopyPointerHoverEvent
class PointerHoverEvent$Mate extends PointerHoverEvent with Mate {
  /// PointerHoverEvent PointerHoverEvent({Duration timeStamp = Duration.zero, PointerDeviceKind kind = PointerDeviceKind.touch, int pointer = 0, int device = 0, Offset position = Offset.zero, Offset delta = Offset.zero, int buttons = 0, bool obscured = false, double pressureMin = 1.0, double pressureMax = 1.0, double distance = 0.0, double distanceMax = 0.0, double size = 0.0, double radiusMajor = 0.0, double radiusMinor = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, bool synthesized = false, int embedderId = 0})
  PointerHoverEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {Offset delta = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset delta = Offset.zero,

    /// optionalParameters: {int buttons = 0} , default:processed=IntegerLiteralImpl
    int buttons = 0,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distance = 0.0} , default:processed=DoubleLiteralImpl
    double distance = 0.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double size = 0.0} , default:processed=DoubleLiteralImpl
    double size = 0.0,

    /// optionalParameters: {double radiusMajor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMajor = 0.0,

    /// optionalParameters: {double radiusMinor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMinor = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          kind: kind,
          pointer: pointer,
          device: device,
          position: position,
          delta: delta,
          buttons: buttons,
          obscured: obscured,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distance: distance,
          distanceMax: distanceMax,
          size: size,
          radiusMajor: radiusMajor,
          radiusMinor: radiusMinor,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          synthesized: synthesized,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerHoverEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerHoverEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          kind: p.get('kind').build(),
          pointer: p.get('pointer').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          delta: p.get('delta').build(),
          buttons: p.get('buttons').build(),
          obscured: p.get('obscured').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distance: p.get('distance').build(),
          distanceMax: p.get('distanceMax').build(),
          size: p.get('size').build(),
          radiusMajor: p.get('radiusMajor').build(),
          radiusMinor: p.get('radiusMinor').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          synthesized: p.get('synthesized').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'delta',
      delta,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'buttons',
      buttons,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distance',
      distance,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMajor',
      radiusMajor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMinor',
      radiusMinor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerEnterEvent extends PointerEvent with _PointerEventDescription, _CopyPointerEnterEvent
class PointerEnterEvent$Mate extends PointerEnterEvent with Mate {
  /// PointerEnterEvent PointerEnterEvent({Duration timeStamp = Duration.zero, int pointer = 0, PointerDeviceKind kind = PointerDeviceKind.touch, int device = 0, Offset position = Offset.zero, Offset delta = Offset.zero, int buttons = 0, bool obscured = false, double pressureMin = 1.0, double pressureMax = 1.0, double distance = 0.0, double distanceMax = 0.0, double size = 0.0, double radiusMajor = 0.0, double radiusMinor = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, bool down = false, bool synthesized = false, int embedderId = 0})
  PointerEnterEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {Offset delta = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset delta = Offset.zero,

    /// optionalParameters: {int buttons = 0} , default:processed=IntegerLiteralImpl
    int buttons = 0,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distance = 0.0} , default:processed=DoubleLiteralImpl
    double distance = 0.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double size = 0.0} , default:processed=DoubleLiteralImpl
    double size = 0.0,

    /// optionalParameters: {double radiusMajor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMajor = 0.0,

    /// optionalParameters: {double radiusMinor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMinor = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {bool down = false} , default:processed=BooleanLiteralImpl
    bool down = false,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          pointer: pointer,
          kind: kind,
          device: device,
          position: position,
          delta: delta,
          buttons: buttons,
          obscured: obscured,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distance: distance,
          distanceMax: distanceMax,
          size: size,
          radiusMajor: radiusMajor,
          radiusMinor: radiusMinor,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          down: down,
          synthesized: synthesized,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerEnterEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerEnterEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          pointer: p.get('pointer').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          delta: p.get('delta').build(),
          buttons: p.get('buttons').build(),
          obscured: p.get('obscured').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distance: p.get('distance').build(),
          distanceMax: p.get('distanceMax').build(),
          size: p.get('size').build(),
          radiusMajor: p.get('radiusMajor').build(),
          radiusMinor: p.get('radiusMinor').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          down: p.get('down').build(),
          synthesized: p.get('synthesized').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'delta',
      delta,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'buttons',
      buttons,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distance',
      distance,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMajor',
      radiusMajor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMinor',
      radiusMinor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'down',
      down,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerExitEvent extends PointerEvent with _PointerEventDescription, _CopyPointerExitEvent
class PointerExitEvent$Mate extends PointerExitEvent with Mate {
  /// PointerExitEvent PointerExitEvent({Duration timeStamp = Duration.zero, PointerDeviceKind kind = PointerDeviceKind.touch, int pointer = 0, int device = 0, Offset position = Offset.zero, Offset delta = Offset.zero, int buttons = 0, bool obscured = false, double pressureMin = 1.0, double pressureMax = 1.0, double distance = 0.0, double distanceMax = 0.0, double size = 0.0, double radiusMajor = 0.0, double radiusMinor = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, bool down = false, bool synthesized = false, int embedderId = 0})
  PointerExitEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {Offset delta = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset delta = Offset.zero,

    /// optionalParameters: {int buttons = 0} , default:processed=IntegerLiteralImpl
    int buttons = 0,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distance = 0.0} , default:processed=DoubleLiteralImpl
    double distance = 0.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double size = 0.0} , default:processed=DoubleLiteralImpl
    double size = 0.0,

    /// optionalParameters: {double radiusMajor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMajor = 0.0,

    /// optionalParameters: {double radiusMinor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMinor = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {bool down = false} , default:processed=BooleanLiteralImpl
    bool down = false,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          kind: kind,
          pointer: pointer,
          device: device,
          position: position,
          delta: delta,
          buttons: buttons,
          obscured: obscured,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distance: distance,
          distanceMax: distanceMax,
          size: size,
          radiusMajor: radiusMajor,
          radiusMinor: radiusMinor,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          down: down,
          synthesized: synthesized,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerExitEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerExitEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          kind: p.get('kind').build(),
          pointer: p.get('pointer').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          delta: p.get('delta').build(),
          buttons: p.get('buttons').build(),
          obscured: p.get('obscured').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distance: p.get('distance').build(),
          distanceMax: p.get('distanceMax').build(),
          size: p.get('size').build(),
          radiusMajor: p.get('radiusMajor').build(),
          radiusMinor: p.get('radiusMinor').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          down: p.get('down').build(),
          synthesized: p.get('synthesized').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'delta',
      delta,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'buttons',
      buttons,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distance',
      distance,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMajor',
      radiusMajor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMinor',
      radiusMinor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'down',
      down,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerDownEvent extends PointerEvent with _PointerEventDescription, _CopyPointerDownEvent
class PointerDownEvent$Mate extends PointerDownEvent with Mate {
  /// PointerDownEvent PointerDownEvent({Duration timeStamp = Duration.zero, int pointer = 0, PointerDeviceKind kind = PointerDeviceKind.touch, int device = 0, Offset position = Offset.zero, int buttons = kPrimaryButton, bool obscured = false, double pressure = 1.0, double pressureMin = 1.0, double pressureMax = 1.0, double distanceMax = 0.0, double size = 0.0, double radiusMajor = 0.0, double radiusMinor = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, int embedderId = 0})
  PointerDownEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int buttons = kPrimaryButton} , default:unprocessed=SimpleIdentifierImpl
    required int buttons,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressure = 1.0} , default:processed=DoubleLiteralImpl
    double pressure = 1.0,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double size = 0.0} , default:processed=DoubleLiteralImpl
    double size = 0.0,

    /// optionalParameters: {double radiusMajor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMajor = 0.0,

    /// optionalParameters: {double radiusMinor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMinor = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          pointer: pointer,
          kind: kind,
          device: device,
          position: position,
          buttons: buttons,
          obscured: obscured,
          pressure: pressure,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distanceMax: distanceMax,
          size: size,
          radiusMajor: radiusMajor,
          radiusMinor: radiusMinor,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerDownEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerDownEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          pointer: p.get('pointer').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          buttons: p.get('buttons').build(),
          obscured: p.get('obscured').build(),
          pressure: p.get('pressure').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distanceMax: p.get('distanceMax').build(),
          size: p.get('size').build(),
          radiusMajor: p.get('radiusMajor').build(),
          radiusMinor: p.get('radiusMinor').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'buttons',
      buttons,
      isNamed: true,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressure',
      pressure,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMajor',
      radiusMajor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMinor',
      radiusMinor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerMoveEvent extends PointerEvent with _PointerEventDescription, _CopyPointerMoveEvent
class PointerMoveEvent$Mate extends PointerMoveEvent with Mate {
  /// PointerMoveEvent PointerMoveEvent({Duration timeStamp = Duration.zero, int pointer = 0, PointerDeviceKind kind = PointerDeviceKind.touch, int device = 0, Offset position = Offset.zero, Offset delta = Offset.zero, int buttons = kPrimaryButton, bool obscured = false, double pressure = 1.0, double pressureMin = 1.0, double pressureMax = 1.0, double distanceMax = 0.0, double size = 0.0, double radiusMajor = 0.0, double radiusMinor = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, int platformData = 0, bool synthesized = false, int embedderId = 0})
  PointerMoveEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {Offset delta = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset delta = Offset.zero,

    /// optionalParameters: {int buttons = kPrimaryButton} , default:unprocessed=SimpleIdentifierImpl
    required int buttons,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressure = 1.0} , default:processed=DoubleLiteralImpl
    double pressure = 1.0,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double size = 0.0} , default:processed=DoubleLiteralImpl
    double size = 0.0,

    /// optionalParameters: {double radiusMajor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMajor = 0.0,

    /// optionalParameters: {double radiusMinor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMinor = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {int platformData = 0} , default:processed=IntegerLiteralImpl
    int platformData = 0,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          pointer: pointer,
          kind: kind,
          device: device,
          position: position,
          delta: delta,
          buttons: buttons,
          obscured: obscured,
          pressure: pressure,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distanceMax: distanceMax,
          size: size,
          radiusMajor: radiusMajor,
          radiusMinor: radiusMinor,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          platformData: platformData,
          synthesized: synthesized,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerMoveEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerMoveEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          pointer: p.get('pointer').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          delta: p.get('delta').build(),
          buttons: p.get('buttons').build(),
          obscured: p.get('obscured').build(),
          pressure: p.get('pressure').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distanceMax: p.get('distanceMax').build(),
          size: p.get('size').build(),
          radiusMajor: p.get('radiusMajor').build(),
          radiusMinor: p.get('radiusMinor').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          platformData: p.get('platformData').build(),
          synthesized: p.get('synthesized').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'delta',
      delta,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'buttons',
      buttons,
      isNamed: true,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressure',
      pressure,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMajor',
      radiusMajor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMinor',
      radiusMinor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'platformData',
      platformData,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerUpEvent extends PointerEvent with _PointerEventDescription, _CopyPointerUpEvent
class PointerUpEvent$Mate extends PointerUpEvent with Mate {
  /// PointerUpEvent PointerUpEvent({Duration timeStamp = Duration.zero, int pointer = 0, PointerDeviceKind kind = PointerDeviceKind.touch, int device = 0, Offset position = Offset.zero, int buttons = 0, bool obscured = false, double pressure = 0.0, double pressureMin = 1.0, double pressureMax = 1.0, double distance = 0.0, double distanceMax = 0.0, double size = 0.0, double radiusMajor = 0.0, double radiusMinor = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, int embedderId = 0})
  PointerUpEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int buttons = 0} , default:processed=IntegerLiteralImpl
    int buttons = 0,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressure = 0.0} , default:processed=DoubleLiteralImpl
    double pressure = 0.0,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distance = 0.0} , default:processed=DoubleLiteralImpl
    double distance = 0.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double size = 0.0} , default:processed=DoubleLiteralImpl
    double size = 0.0,

    /// optionalParameters: {double radiusMajor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMajor = 0.0,

    /// optionalParameters: {double radiusMinor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMinor = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          pointer: pointer,
          kind: kind,
          device: device,
          position: position,
          buttons: buttons,
          obscured: obscured,
          pressure: pressure,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distance: distance,
          distanceMax: distanceMax,
          size: size,
          radiusMajor: radiusMajor,
          radiusMinor: radiusMinor,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerUpEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerUpEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          pointer: p.get('pointer').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          buttons: p.get('buttons').build(),
          obscured: p.get('obscured').build(),
          pressure: p.get('pressure').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distance: p.get('distance').build(),
          distanceMax: p.get('distanceMax').build(),
          size: p.get('size').build(),
          radiusMajor: p.get('radiusMajor').build(),
          radiusMinor: p.get('radiusMinor').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'buttons',
      buttons,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressure',
      pressure,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distance',
      distance,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMajor',
      radiusMajor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMinor',
      radiusMinor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerScrollEvent extends PointerSignalEvent with _PointerEventDescription, _CopyPointerScrollEvent
class PointerScrollEvent$Mate extends PointerScrollEvent with Mate {
  /// PointerScrollEvent PointerScrollEvent({Duration timeStamp = Duration.zero, PointerDeviceKind kind = PointerDeviceKind.mouse, int device = 0, Offset position = Offset.zero, Offset scrollDelta = Offset.zero, int embedderId = 0})
  PointerScrollEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.mouse} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.mouse,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {Offset scrollDelta = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset scrollDelta = Offset.zero,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          kind: kind,
          device: device,
          position: position,
          scrollDelta: scrollDelta,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerScrollEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerScrollEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          scrollDelta: p.get('scrollDelta').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.mouse,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'scrollDelta',
      scrollDelta,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerScrollInertiaCancelEvent extends PointerSignalEvent with _PointerEventDescription, _CopyPointerScrollInertiaCancelEvent
class PointerScrollInertiaCancelEvent$Mate extends PointerScrollInertiaCancelEvent with Mate {
  /// PointerScrollInertiaCancelEvent PointerScrollInertiaCancelEvent({Duration timeStamp = Duration.zero, PointerDeviceKind kind = PointerDeviceKind.mouse, int device = 0, Offset position = Offset.zero, int embedderId = 0})
  PointerScrollInertiaCancelEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.mouse} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.mouse,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          kind: kind,
          device: device,
          position: position,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerScrollInertiaCancelEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerScrollInertiaCancelEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.mouse,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class PointerScaleEvent extends PointerSignalEvent with _PointerEventDescription, _CopyPointerScaleEvent
class PointerScaleEvent$Mate extends PointerScaleEvent with Mate {
  /// PointerScaleEvent PointerScaleEvent({Duration timeStamp = Duration.zero, PointerDeviceKind kind = PointerDeviceKind.mouse, int device = 0, Offset position = Offset.zero, int embedderId = 0, double scale = 1.0})
  PointerScaleEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.mouse} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.mouse,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    double scale = 1.0,
  }) : super(
          timeStamp: timeStamp,
          kind: kind,
          device: device,
          position: position,
          embedderId: embedderId,
          scale: scale,
        ) {
    mateBuilderName = 'PointerScaleEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerScaleEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          embedderId: p.get('embedderId').build(),
          scale: p.get('scale').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.mouse,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'scale',
      scale,
      isNamed: true,
      defaultValue: 1.0,
    );
  }
}

/// class PointerPanZoomStartEvent extends PointerEvent with _PointerEventDescription, _CopyPointerPanZoomStartEvent
class PointerPanZoomStartEvent$Mate extends PointerPanZoomStartEvent with Mate {
  /// PointerPanZoomStartEvent PointerPanZoomStartEvent({Duration timeStamp = Duration.zero, int device = 0, int pointer = 0, Offset position = Offset.zero, int embedderId = 0, bool synthesized = false})
  PointerPanZoomStartEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,
  }) : super(
          timeStamp: timeStamp,
          device: device,
          pointer: pointer,
          position: position,
          embedderId: embedderId,
          synthesized: synthesized,
        ) {
    mateBuilderName = 'PointerPanZoomStartEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerPanZoomStartEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          device: p.get('device').build(),
          pointer: p.get('pointer').build(),
          position: p.get('position').build(),
          embedderId: p.get('embedderId').build(),
          synthesized: p.get('synthesized').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class PointerPanZoomUpdateEvent extends PointerEvent with _PointerEventDescription, _CopyPointerPanZoomUpdateEvent
class PointerPanZoomUpdateEvent$Mate extends PointerPanZoomUpdateEvent with Mate {
  /// PointerPanZoomUpdateEvent PointerPanZoomUpdateEvent({Duration timeStamp = Duration.zero, int device = 0, int pointer = 0, Offset position = Offset.zero, int embedderId = 0, Offset pan = Offset.zero, Offset panDelta = Offset.zero, double scale = 1.0, double rotation = 0.0, bool synthesized = false})
  PointerPanZoomUpdateEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,

    /// optionalParameters: {Offset pan = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset pan = Offset.zero,

    /// optionalParameters: {Offset panDelta = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset panDelta = Offset.zero,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    double scale = 1.0,

    /// optionalParameters: {double rotation = 0.0} , default:processed=DoubleLiteralImpl
    double rotation = 0.0,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,
  }) : super(
          timeStamp: timeStamp,
          device: device,
          pointer: pointer,
          position: position,
          embedderId: embedderId,
          pan: pan,
          panDelta: panDelta,
          scale: scale,
          rotation: rotation,
          synthesized: synthesized,
        ) {
    mateBuilderName = 'PointerPanZoomUpdateEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerPanZoomUpdateEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          device: p.get('device').build(),
          pointer: p.get('pointer').build(),
          position: p.get('position').build(),
          embedderId: p.get('embedderId').build(),
          pan: p.get('pan').build(),
          panDelta: p.get('panDelta').build(),
          scale: p.get('scale').build(),
          rotation: p.get('rotation').build(),
          synthesized: p.get('synthesized').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'pan',
      pan,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'panDelta',
      panDelta,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'scale',
      scale,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'rotation',
      rotation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class PointerPanZoomEndEvent extends PointerEvent with _PointerEventDescription, _CopyPointerPanZoomEndEvent
class PointerPanZoomEndEvent$Mate extends PointerPanZoomEndEvent with Mate {
  /// PointerPanZoomEndEvent PointerPanZoomEndEvent({Duration timeStamp = Duration.zero, int device = 0, int pointer = 0, Offset position = Offset.zero, int embedderId = 0, bool synthesized = false})
  PointerPanZoomEndEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,
  }) : super(
          timeStamp: timeStamp,
          device: device,
          pointer: pointer,
          position: position,
          embedderId: embedderId,
          synthesized: synthesized,
        ) {
    mateBuilderName = 'PointerPanZoomEndEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerPanZoomEndEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          device: p.get('device').build(),
          pointer: p.get('pointer').build(),
          position: p.get('position').build(),
          embedderId: p.get('embedderId').build(),
          synthesized: p.get('synthesized').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class PointerCancelEvent extends PointerEvent with _PointerEventDescription, _CopyPointerCancelEvent
class PointerCancelEvent$Mate extends PointerCancelEvent with Mate {
  /// PointerCancelEvent PointerCancelEvent({Duration timeStamp = Duration.zero, int pointer = 0, PointerDeviceKind kind = PointerDeviceKind.touch, int device = 0, Offset position = Offset.zero, int buttons = 0, bool obscured = false, double pressureMin = 1.0, double pressureMax = 1.0, double distance = 0.0, double distanceMax = 0.0, double size = 0.0, double radiusMajor = 0.0, double radiusMinor = 0.0, double radiusMin = 0.0, double radiusMax = 0.0, double orientation = 0.0, double tilt = 0.0, int embedderId = 0})
  PointerCancelEvent$Mate({
    /// optionalParameters: {Duration timeStamp = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration timeStamp = Duration.zero,

    /// optionalParameters: {int pointer = 0} , default:processed=IntegerLiteralImpl
    int pointer = 0,

    /// optionalParameters: {PointerDeviceKind kind = PointerDeviceKind.touch} , default:processed=PrefixedIdentifierImpl
    PointerDeviceKind kind = PointerDeviceKind.touch,

    /// optionalParameters: {int device = 0} , default:processed=IntegerLiteralImpl
    int device = 0,

    /// optionalParameters: {Offset position = Offset.zero} , default:processed=PrefixedIdentifierImpl
    Offset position = Offset.zero,

    /// optionalParameters: {int buttons = 0} , default:processed=IntegerLiteralImpl
    int buttons = 0,

    /// optionalParameters: {bool obscured = false} , default:processed=BooleanLiteralImpl
    bool obscured = false,

    /// optionalParameters: {double pressureMin = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMin = 1.0,

    /// optionalParameters: {double pressureMax = 1.0} , default:processed=DoubleLiteralImpl
    double pressureMax = 1.0,

    /// optionalParameters: {double distance = 0.0} , default:processed=DoubleLiteralImpl
    double distance = 0.0,

    /// optionalParameters: {double distanceMax = 0.0} , default:processed=DoubleLiteralImpl
    double distanceMax = 0.0,

    /// optionalParameters: {double size = 0.0} , default:processed=DoubleLiteralImpl
    double size = 0.0,

    /// optionalParameters: {double radiusMajor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMajor = 0.0,

    /// optionalParameters: {double radiusMinor = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMinor = 0.0,

    /// optionalParameters: {double radiusMin = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMin = 0.0,

    /// optionalParameters: {double radiusMax = 0.0} , default:processed=DoubleLiteralImpl
    double radiusMax = 0.0,

    /// optionalParameters: {double orientation = 0.0} , default:processed=DoubleLiteralImpl
    double orientation = 0.0,

    /// optionalParameters: {double tilt = 0.0} , default:processed=DoubleLiteralImpl
    double tilt = 0.0,

    /// optionalParameters: {int embedderId = 0} , default:processed=IntegerLiteralImpl
    int embedderId = 0,
  }) : super(
          timeStamp: timeStamp,
          pointer: pointer,
          kind: kind,
          device: device,
          position: position,
          buttons: buttons,
          obscured: obscured,
          pressureMin: pressureMin,
          pressureMax: pressureMax,
          distance: distance,
          distanceMax: distanceMax,
          size: size,
          radiusMajor: radiusMajor,
          radiusMinor: radiusMinor,
          radiusMin: radiusMin,
          radiusMax: radiusMax,
          orientation: orientation,
          tilt: tilt,
          embedderId: embedderId,
        ) {
    mateBuilderName = 'PointerCancelEvent';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => PointerCancelEvent$Mate(
          timeStamp: p.get('timeStamp').build(),
          pointer: p.get('pointer').build(),
          kind: p.get('kind').build(),
          device: p.get('device').build(),
          position: p.get('position').build(),
          buttons: p.get('buttons').build(),
          obscured: p.get('obscured').build(),
          pressureMin: p.get('pressureMin').build(),
          pressureMax: p.get('pressureMax').build(),
          distance: p.get('distance').build(),
          distanceMax: p.get('distanceMax').build(),
          size: p.get('size').build(),
          radiusMajor: p.get('radiusMajor').build(),
          radiusMinor: p.get('radiusMinor').build(),
          radiusMin: p.get('radiusMin').build(),
          radiusMax: p.get('radiusMax').build(),
          orientation: p.get('orientation').build(),
          tilt: p.get('tilt').build(),
          embedderId: p.get('embedderId').build(),
        );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'pointer',
      pointer,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
      defaultValue: PointerDeviceKind.touch,
    );
    mateUse(
      'device',
      device,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: Offset.zero,
    );
    mateUse(
      'buttons',
      buttons,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'pressureMin',
      pressureMin,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressureMax',
      pressureMax,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'distance',
      distance,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'distanceMax',
      distanceMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMajor',
      radiusMajor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMinor',
      radiusMinor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMin',
      radiusMin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radiusMax',
      radiusMax,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'orientation',
      orientation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'tilt',
      tilt,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'embedderId',
      embedderId,
      isNamed: true,
      defaultValue: 0,
    );
  }
}
