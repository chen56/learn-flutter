// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/gestures/binding.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/diagnostics.dart' as _i3;
import 'package:flutter/src/gestures/events.dart' as _i4;
import 'package:flutter/src/gestures/hit_test.dart' as _i5;
import 'package:flutter/src/foundation/assertions.dart' as _i6;

/// class FlutterErrorDetailsForPointerEventDispatcher extends FlutterErrorDetails
class FlutterErrorDetailsForPointerEventDispatcher$Mate extends _i1.FlutterErrorDetailsForPointerEventDispatcher
    with _i2.Mate {
  /// FlutterErrorDetailsForPointerEventDispatcher FlutterErrorDetailsForPointerEventDispatcher({required Object exception, StackTrace? stack, String? library = 'Flutter framework', DiagnosticsNode? context, PointerEvent? event, HitTestEntry<HitTestTarget>? hitTestEntry, Iterable<DiagnosticsNode> Function()? informationCollector, bool silent = false})
  FlutterErrorDetailsForPointerEventDispatcher$Mate({
    /// optionalParameters: {required Object exception} , default:none
    required Object exception,

    /// optionalParameters: {StackTrace? stack} , default:none
    StackTrace? stack,

    /// optionalParameters: {String? library = 'Flutter framework'} , default:processed=SimpleStringLiteralImpl
    String? library = 'Flutter framework',

    /// optionalParameters: {DiagnosticsNode? context} , default:none
    _i3.DiagnosticsNode? context,

    /// optionalParameters: {PointerEvent? event} , default:none
    _i4.PointerEvent? event,

    /// optionalParameters: {HitTestEntry<HitTestTarget>? hitTestEntry} , default:none
    _i5.HitTestEntry<_i5.HitTestTarget>? hitTestEntry,

    /// optionalParameters: {Iterable<DiagnosticsNode> Function()? informationCollector} , default:none
    _i6.InformationCollector? informationCollector,

    /// optionalParameters: {bool silent = false} , default:processed=BooleanLiteralImpl
    bool silent = false,
  }) : super(
          exception: exception,
          stack: stack,
          library: library,
          context: context,
          event: event,
          hitTestEntry: hitTestEntry,
          informationCollector: informationCollector,
          silent: silent,
        ) {
    mateBuilderName = 'FlutterErrorDetailsForPointerEventDispatcher';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => FlutterErrorDetailsForPointerEventDispatcher$Mate(
          exception: p.get('exception').build(),
          stack: p.get('stack').build(),
          library: p.get('library').build(),
          context: p.get('context').build(),
          event: p.get('event').build(),
          hitTestEntry: p.get('hitTestEntry').build(),
          informationCollector: p.get('informationCollector').build(),
          silent: p.get('silent').build(),
        );
    mateUse(
      'exception',
      exception,
      isNamed: true,
    );
    mateUse(
      'stack',
      stack,
      isNamed: true,
    );
    mateUse(
      'library',
      library,
      isNamed: true,
      defaultValue: 'Flutter framework',
    );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'event',
      event,
      isNamed: true,
    );
    mateUse(
      'hitTestEntry',
      hitTestEntry,
      isNamed: true,
    );
    mateUse(
      'informationCollector',
      informationCollector,
      isNamed: true,
    );
    mateUse(
      'silent',
      silent,
      isNamed: true,
      defaultValue: false,
    );
  }
}
