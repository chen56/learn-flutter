// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/scale.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/gestures/velocity_tracker.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class ScaleStartDetails
class ScaleStartDetails$Mate extends ScaleStartDetails with Mate {
  /// ScaleStartDetails ScaleStartDetails({Offset focalPoint = Offset.zero, Offset? localFocalPoint, int pointerCount = 0})
  ScaleStartDetails$Mate({
    /// optionalParameters: {Offset focalPoint = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset focalPoint,

    /// optionalParameters: {Offset? localFocalPoint} , hasDefaultValue:false, defaultValueCode:null
    Offset? localFocalPoint,

    /// optionalParameters: {int pointerCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int pointerCount,
  }) : super(
          focalPoint: focalPoint,
          localFocalPoint: localFocalPoint,
          pointerCount: pointerCount,
        ) {
    mateBuilder = (p) => ScaleStartDetails$Mate(
          focalPoint: p.get('focalPoint').build(),
          localFocalPoint: p.get('localFocalPoint').build(),
          pointerCount: p.get('pointerCount').build(),
        );
    matePut('focalPoint', focalPoint);
    matePut('localFocalPoint', localFocalPoint);
    matePut('pointerCount', pointerCount);
  }
}

/// class ScaleUpdateDetails
class ScaleUpdateDetails$Mate extends ScaleUpdateDetails with Mate {
  /// ScaleUpdateDetails ScaleUpdateDetails({Offset focalPoint = Offset.zero, Offset? localFocalPoint, double scale = 1.0, double horizontalScale = 1.0, double verticalScale = 1.0, double rotation = 0.0, int pointerCount = 0, Offset focalPointDelta = Offset.zero})
  ScaleUpdateDetails$Mate({
    /// optionalParameters: {Offset focalPoint = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset focalPoint,

    /// optionalParameters: {Offset? localFocalPoint} , hasDefaultValue:false, defaultValueCode:null
    Offset? localFocalPoint,

    /// optionalParameters: {double scale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double scale,

    /// optionalParameters: {double horizontalScale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double horizontalScale,

    /// optionalParameters: {double verticalScale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double verticalScale,

    /// optionalParameters: {double rotation = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double rotation,

    /// optionalParameters: {int pointerCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int pointerCount,

    /// optionalParameters: {Offset focalPointDelta = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
    required Offset focalPointDelta,
  }) : super(
          focalPoint: focalPoint,
          localFocalPoint: localFocalPoint,
          scale: scale,
          horizontalScale: horizontalScale,
          verticalScale: verticalScale,
          rotation: rotation,
          pointerCount: pointerCount,
          focalPointDelta: focalPointDelta,
        ) {
    mateBuilder = (p) => ScaleUpdateDetails$Mate(
          focalPoint: p.get('focalPoint').build(),
          localFocalPoint: p.get('localFocalPoint').build(),
          scale: p.get('scale').build(),
          horizontalScale: p.get('horizontalScale').build(),
          verticalScale: p.get('verticalScale').build(),
          rotation: p.get('rotation').build(),
          pointerCount: p.get('pointerCount').build(),
          focalPointDelta: p.get('focalPointDelta').build(),
        );
    matePut('focalPoint', focalPoint);
    matePut('localFocalPoint', localFocalPoint);
    matePut('scale', scale);
    matePut('horizontalScale', horizontalScale);
    matePut('verticalScale', verticalScale);
    matePut('rotation', rotation);
    matePut('pointerCount', pointerCount);
    matePut('focalPointDelta', focalPointDelta);
  }
}

/// class ScaleEndDetails
class ScaleEndDetails$Mate extends ScaleEndDetails with Mate {
  /// ScaleEndDetails ScaleEndDetails({Velocity velocity = Velocity.zero, double scaleVelocity = 0, int pointerCount = 0})
  ScaleEndDetails$Mate({
    /// optionalParameters: {Velocity velocity = Velocity.zero} , hasDefaultValue:true, defaultValueCode:Velocity.zero
    required Velocity velocity,

    /// optionalParameters: {double scaleVelocity = 0} , hasDefaultValue:true, defaultValueCode:0
    required double scaleVelocity,

    /// optionalParameters: {int pointerCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int pointerCount,
  }) : super(
          velocity: velocity,
          scaleVelocity: scaleVelocity,
          pointerCount: pointerCount,
        ) {
    mateBuilder = (p) => ScaleEndDetails$Mate(
          velocity: p.get('velocity').build(),
          scaleVelocity: p.get('scaleVelocity').build(),
          pointerCount: p.get('pointerCount').build(),
        );
    matePut('velocity', velocity);
    matePut('scaleVelocity', scaleVelocity);
    matePut('pointerCount', pointerCount);
  }
}

/// class ScaleGestureRecognizer extends OneSequenceGestureRecognizer
class ScaleGestureRecognizer$Mate extends ScaleGestureRecognizer with Mate {
  /// ScaleGestureRecognizer ScaleGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter, DragStartBehavior dragStartBehavior = DragStartBehavior.down, bool trackpadScrollCausesScale = false, Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor})
  ScaleGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
    AllowedButtonsFilter? allowedButtonsFilter,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.down} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.down
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool trackpadScrollCausesScale = false} , hasDefaultValue:true, defaultValueCode:false
    required bool trackpadScrollCausesScale,

    /// optionalParameters: {Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor} , hasDefaultValue:true, defaultValueCode:kDefaultTrackpadScrollToScaleFactor
    required Offset trackpadScrollToScaleFactor,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
          dragStartBehavior: dragStartBehavior,
          trackpadScrollCausesScale: trackpadScrollCausesScale,
          trackpadScrollToScaleFactor: trackpadScrollToScaleFactor,
        ) {
    mateBuilder = (p) => ScaleGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          trackpadScrollCausesScale: p.get('trackpadScrollCausesScale').build(),
          trackpadScrollToScaleFactor: p.get('trackpadScrollToScaleFactor').build(),
        );
    matePut('debugOwner', debugOwner);
    matePut('supportedDevices', supportedDevices);
    matePut('allowedButtonsFilter', allowedButtonsFilter);
    matePut('dragStartBehavior', dragStartBehavior);
    matePut('trackpadScrollCausesScale', trackpadScrollCausesScale);
    matePut('trackpadScrollToScaleFactor', trackpadScrollToScaleFactor);
  }
}
