// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/drag_details.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/gestures/velocity_tracker.dart';

/// class DragDownDetails
class DragDownDetails$Mate extends DragDownDetails with Mate {
  /// DragDownDetails DragDownDetails({Offset globalPosition = Offset.zero, Offset? localPosition})
  DragDownDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , defaultValue:unprocessed
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , defaultValue:none
    Offset? localPosition,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
        ) {
    mateBuilder = (p) => DragDownDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
        );
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
  }
}

/// class DragStartDetails
class DragStartDetails$Mate extends DragStartDetails with Mate {
  /// DragStartDetails DragStartDetails({Duration? sourceTimeStamp, Offset globalPosition = Offset.zero, Offset? localPosition, PointerDeviceKind? kind})
  DragStartDetails$Mate({
    /// optionalParameters: {Duration? sourceTimeStamp} , defaultValue:none
    Duration? sourceTimeStamp,

    /// optionalParameters: {Offset globalPosition = Offset.zero} , defaultValue:unprocessed
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , defaultValue:none
    Offset? localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , defaultValue:none
    PointerDeviceKind? kind,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
        ) {
    mateBuilder = (p) => DragStartDetails$Mate(
          sourceTimeStamp: p.get('sourceTimeStamp').build(),
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
        );
    mateUse('sourceTimeStamp', sourceTimeStamp);
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
    mateUse('kind', kind);
  }
}

/// class DragUpdateDetails
class DragUpdateDetails$Mate extends DragUpdateDetails with Mate {
  /// DragUpdateDetails DragUpdateDetails({Duration? sourceTimeStamp, Offset delta = Offset.zero, double? primaryDelta, required Offset globalPosition, Offset? localPosition})
  DragUpdateDetails$Mate({
    /// optionalParameters: {Duration? sourceTimeStamp} , defaultValue:none
    Duration? sourceTimeStamp,

    /// optionalParameters: {Offset delta = Offset.zero} , defaultValue:unprocessed
    required Offset delta,

    /// optionalParameters: {double? primaryDelta} , defaultValue:none
    double? primaryDelta,

    /// optionalParameters: {required Offset globalPosition} , defaultValue:none
    required Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , defaultValue:none
    Offset? localPosition,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          delta: delta,
          primaryDelta: primaryDelta,
          globalPosition: globalPosition,
          localPosition: localPosition,
        ) {
    mateBuilder = (p) => DragUpdateDetails$Mate(
          sourceTimeStamp: p.get('sourceTimeStamp').build(),
          delta: p.get('delta').build(),
          primaryDelta: p.get('primaryDelta').build(),
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
        );
    mateUse('sourceTimeStamp', sourceTimeStamp);
    mateUse('delta', delta);
    mateUse('primaryDelta', primaryDelta);
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
  }
}

/// class DragEndDetails
class DragEndDetails$Mate extends DragEndDetails with Mate {
  /// DragEndDetails DragEndDetails({Velocity velocity = Velocity.zero, double? primaryVelocity})
  DragEndDetails$Mate({
    /// optionalParameters: {Velocity velocity = Velocity.zero} , defaultValue:unprocessed
    required Velocity velocity,

    /// optionalParameters: {double? primaryVelocity} , defaultValue:none
    double? primaryVelocity,
  }) : super(
          velocity: velocity,
          primaryVelocity: primaryVelocity,
        ) {
    mateBuilder = (p) => DragEndDetails$Mate(
          velocity: p.get('velocity').build(),
          primaryVelocity: p.get('primaryVelocity').build(),
        );
    mateUse('velocity', velocity);
    mateUse('primaryVelocity', primaryVelocity);
  }
}
