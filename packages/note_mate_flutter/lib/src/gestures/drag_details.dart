// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/gestures/drag_details.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/animation.dart' as _i4;
import 'package:flutter/src/gestures/velocity_tracker.dart' as _i5;
import 'package:flutter/cupertino.dart' as _i6;

/// class DragDownDetails
class DragDownDetails$Mate extends _i1.DragDownDetails with _i2.Mate {
  /// DragDownDetails DragDownDetails({Offset globalPosition = Offset.zero, Offset? localPosition})
  DragDownDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i3.Offset globalPosition = _i4.Offset.zero,

    /// optionalParameters: {Offset? localPosition} , default:none
    _i3.Offset? localPosition,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
        ) {
    mateBuilderName = 'DragDownDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DragDownDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
        );
    mateUse(
      'globalPosition',
      globalPosition,
      isNamed: true,
      defaultValue: _i4.Offset.zero,
    );
    mateUse(
      'localPosition',
      localPosition,
      isNamed: true,
    );
  }
}

/// class DragStartDetails
class DragStartDetails$Mate extends _i1.DragStartDetails with _i2.Mate {
  /// DragStartDetails DragStartDetails({Duration? sourceTimeStamp, Offset globalPosition = Offset.zero, Offset? localPosition, PointerDeviceKind? kind})
  DragStartDetails$Mate({
    /// optionalParameters: {Duration? sourceTimeStamp} , default:none
    Duration? sourceTimeStamp,

    /// optionalParameters: {Offset globalPosition = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i3.Offset globalPosition = _i4.Offset.zero,

    /// optionalParameters: {Offset? localPosition} , default:none
    _i3.Offset? localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , default:none
    _i3.PointerDeviceKind? kind,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
        ) {
    mateBuilderName = 'DragStartDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DragStartDetails$Mate(
          sourceTimeStamp: p.get('sourceTimeStamp').build(),
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
        );
    mateUse(
      'sourceTimeStamp',
      sourceTimeStamp,
      isNamed: true,
    );
    mateUse(
      'globalPosition',
      globalPosition,
      isNamed: true,
      defaultValue: _i4.Offset.zero,
    );
    mateUse(
      'localPosition',
      localPosition,
      isNamed: true,
    );
    mateUse(
      'kind',
      kind,
      isNamed: true,
    );
  }
}

/// class DragUpdateDetails
class DragUpdateDetails$Mate extends _i1.DragUpdateDetails with _i2.Mate {
  /// DragUpdateDetails DragUpdateDetails({Duration? sourceTimeStamp, Offset delta = Offset.zero, double? primaryDelta, required Offset globalPosition, Offset? localPosition})
  DragUpdateDetails$Mate({
    /// optionalParameters: {Duration? sourceTimeStamp} , default:none
    Duration? sourceTimeStamp,

    /// optionalParameters: {Offset delta = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i3.Offset delta = _i4.Offset.zero,

    /// optionalParameters: {double? primaryDelta} , default:none
    double? primaryDelta,

    /// optionalParameters: {required Offset globalPosition} , default:none
    required _i3.Offset globalPosition,

    /// optionalParameters: {Offset? localPosition} , default:none
    _i3.Offset? localPosition,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          delta: delta,
          primaryDelta: primaryDelta,
          globalPosition: globalPosition,
          localPosition: localPosition,
        ) {
    mateBuilderName = 'DragUpdateDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DragUpdateDetails$Mate(
          sourceTimeStamp: p.get('sourceTimeStamp').build(),
          delta: p.get('delta').build(),
          primaryDelta: p.get('primaryDelta').build(),
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
        );
    mateUse(
      'sourceTimeStamp',
      sourceTimeStamp,
      isNamed: true,
    );
    mateUse(
      'delta',
      delta,
      isNamed: true,
      defaultValue: _i4.Offset.zero,
    );
    mateUse(
      'primaryDelta',
      primaryDelta,
      isNamed: true,
    );
    mateUse(
      'globalPosition',
      globalPosition,
      isNamed: true,
    );
    mateUse(
      'localPosition',
      localPosition,
      isNamed: true,
    );
  }
}

/// class DragEndDetails
class DragEndDetails$Mate extends _i1.DragEndDetails with _i2.Mate {
  /// DragEndDetails DragEndDetails({Velocity velocity = Velocity.zero, double? primaryVelocity})
  DragEndDetails$Mate({
    /// optionalParameters: {Velocity velocity = Velocity.zero} , default:processed=PrefixedIdentifierImpl
    _i5.Velocity velocity = _i6.Velocity.zero,

    /// optionalParameters: {double? primaryVelocity} , default:none
    double? primaryVelocity,
  }) : super(
          velocity: velocity,
          primaryVelocity: primaryVelocity,
        ) {
    mateBuilderName = 'DragEndDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DragEndDetails$Mate(
          velocity: p.get('velocity').build(),
          primaryVelocity: p.get('primaryVelocity').build(),
        );
    mateUse(
      'velocity',
      velocity,
      isNamed: true,
      defaultValue: _i6.Velocity.zero,
    );
    mateUse(
      'primaryVelocity',
      primaryVelocity,
      isNamed: true,
    );
  }
}
