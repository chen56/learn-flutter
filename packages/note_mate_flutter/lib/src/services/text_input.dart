// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/text_input.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/services/autofill.dart' as _i4;
import 'package:flutter/src/services/text_editing.dart' as _i5;

/// class TextInputType
class TextInputType$Mate extends _i1.TextInputType with _i2.Mate {
  /// TextInputType TextInputType.numberWithOptions({bool? signed = false, bool? decimal = false})
  TextInputType$Mate.numberWithOptions({
    /// optionalParameters: {bool? signed = false} , default:processed=BooleanLiteralImpl
    super.signed,

    /// optionalParameters: {bool? decimal = false} , default:processed=BooleanLiteralImpl
    super.decimal,
  })  : mateParams = {
          'signed': _i2.BuilderArg<bool?>(
            name: 'signed',
            init: signed,
            isNamed: true,
            defaultValue: false,
          ),
          'decimal': _i2.BuilderArg<bool?>(
            name: 'decimal',
            init: decimal,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super.numberWithOptions() {
    mateBuilderName = 'TextInputType.numberWithOptions';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextInputType$Mate.numberWithOptions(
          signed: p.get('signed').build(),
          decimal: p.get('decimal').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TextInputConfiguration
class TextInputConfiguration$Mate extends _i1.TextInputConfiguration with _i2.Mate {
  /// TextInputConfiguration TextInputConfiguration({TextInputType inputType = TextInputType.text, bool readOnly = false, bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, bool enableInteractiveSelection = true, String? actionLabel, TextInputAction inputAction = TextInputAction.done, Brightness keyboardAppearance = Brightness.light, TextCapitalization textCapitalization = TextCapitalization.none, AutofillConfiguration autofillConfiguration = AutofillConfiguration.disabled, bool enableIMEPersonalizedLearning = true, List<String> allowedMimeTypes = const <String>[], bool enableDeltaModel = false})
  TextInputConfiguration$Mate({
    /// optionalParameters: {TextInputType inputType = TextInputType.text} , default:unprocessed=PrefixedIdentifierImpl
    super.inputType,

    /// optionalParameters: {bool readOnly = false} , default:processed=BooleanLiteralImpl
    super.readOnly,

    /// optionalParameters: {bool obscureText = false} , default:processed=BooleanLiteralImpl
    super.obscureText,

    /// optionalParameters: {bool autocorrect = true} , default:processed=BooleanLiteralImpl
    super.autocorrect,

    /// optionalParameters: {SmartDashesType? smartDashesType} , default:none
    super.smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , default:none
    super.smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , default:processed=BooleanLiteralImpl
    super.enableSuggestions,

    /// optionalParameters: {bool enableInteractiveSelection = true} , default:processed=BooleanLiteralImpl
    super.enableInteractiveSelection,

    /// optionalParameters: {String? actionLabel} , default:none
    super.actionLabel,

    /// optionalParameters: {TextInputAction inputAction = TextInputAction.done} , default:unprocessed=PrefixedIdentifierImpl
    super.inputAction,

    /// optionalParameters: {Brightness keyboardAppearance = Brightness.light} , default:unprocessed=PrefixedIdentifierImpl
    super.keyboardAppearance,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , default:unprocessed=PrefixedIdentifierImpl
    super.textCapitalization,

    /// optionalParameters: {AutofillConfiguration autofillConfiguration = AutofillConfiguration.disabled} , default:unprocessed=PrefixedIdentifierImpl
    super.autofillConfiguration,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , default:processed=BooleanLiteralImpl
    super.enableIMEPersonalizedLearning,

    /// optionalParameters: {List<String> allowedMimeTypes = const <String>[]} , default:unprocessed=ListLiteralImpl
    super.allowedMimeTypes,

    /// optionalParameters: {bool enableDeltaModel = false} , default:processed=BooleanLiteralImpl
    super.enableDeltaModel,
  })  : mateParams = {
          'inputType': _i2.BuilderArg<_i1.TextInputType>(
            name: 'inputType',
            init: inputType,
            isNamed: true,
          ),
          'readOnly': _i2.BuilderArg<bool>(
            name: 'readOnly',
            init: readOnly,
            isNamed: true,
            defaultValue: false,
          ),
          'obscureText': _i2.BuilderArg<bool>(
            name: 'obscureText',
            init: obscureText,
            isNamed: true,
            defaultValue: false,
          ),
          'autocorrect': _i2.BuilderArg<bool>(
            name: 'autocorrect',
            init: autocorrect,
            isNamed: true,
            defaultValue: true,
          ),
          'smartDashesType': _i2.BuilderArg<_i1.SmartDashesType?>(
            name: 'smartDashesType',
            init: smartDashesType,
            isNamed: true,
          ),
          'smartQuotesType': _i2.BuilderArg<_i1.SmartQuotesType?>(
            name: 'smartQuotesType',
            init: smartQuotesType,
            isNamed: true,
          ),
          'enableSuggestions': _i2.BuilderArg<bool>(
            name: 'enableSuggestions',
            init: enableSuggestions,
            isNamed: true,
            defaultValue: true,
          ),
          'enableInteractiveSelection': _i2.BuilderArg<bool>(
            name: 'enableInteractiveSelection',
            init: enableInteractiveSelection,
            isNamed: true,
            defaultValue: true,
          ),
          'actionLabel': _i2.BuilderArg<String?>(
            name: 'actionLabel',
            init: actionLabel,
            isNamed: true,
          ),
          'inputAction': _i2.BuilderArg<_i1.TextInputAction>(
            name: 'inputAction',
            init: inputAction,
            isNamed: true,
          ),
          'keyboardAppearance': _i2.BuilderArg<_i3.Brightness>(
            name: 'keyboardAppearance',
            init: keyboardAppearance,
            isNamed: true,
          ),
          'textCapitalization': _i2.BuilderArg<_i1.TextCapitalization>(
            name: 'textCapitalization',
            init: textCapitalization,
            isNamed: true,
          ),
          'autofillConfiguration': _i2.BuilderArg<_i4.AutofillConfiguration>(
            name: 'autofillConfiguration',
            init: autofillConfiguration,
            isNamed: true,
          ),
          'enableIMEPersonalizedLearning': _i2.BuilderArg<bool>(
            name: 'enableIMEPersonalizedLearning',
            init: enableIMEPersonalizedLearning,
            isNamed: true,
            defaultValue: true,
          ),
          'allowedMimeTypes': _i2.BuilderArg<List<String>>(
            name: 'allowedMimeTypes',
            init: allowedMimeTypes,
            isNamed: true,
          ),
          'enableDeltaModel': _i2.BuilderArg<bool>(
            name: 'enableDeltaModel',
            init: enableDeltaModel,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'TextInputConfiguration';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => TextInputConfiguration$Mate(
          inputType: p.get('inputType').build(),
          readOnly: p.get('readOnly').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          actionLabel: p.get('actionLabel').build(),
          inputAction: p.get('inputAction').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          textCapitalization: p.get('textCapitalization').build(),
          autofillConfiguration: p.get('autofillConfiguration').build(),
          enableIMEPersonalizedLearning: p.get('enableIMEPersonalizedLearning').build(),
          allowedMimeTypes: p.get('allowedMimeTypes').build(),
          enableDeltaModel: p.get('enableDeltaModel').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RawFloatingCursorPoint
class RawFloatingCursorPoint$Mate extends _i1.RawFloatingCursorPoint with _i2.Mate {
  /// RawFloatingCursorPoint RawFloatingCursorPoint({Offset? offset, required FloatingCursorDragState state})
  RawFloatingCursorPoint$Mate({
    /// optionalParameters: {Offset? offset} , default:none
    super.offset,

    /// optionalParameters: {required FloatingCursorDragState state} , default:none
    required super.state,
  })  : mateParams = {
          'offset': _i2.BuilderArg<_i3.Offset?>(
            name: 'offset',
            init: offset,
            isNamed: true,
          ),
          'state': _i2.BuilderArg<_i1.FloatingCursorDragState>(
            name: 'state',
            init: state,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RawFloatingCursorPoint';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => RawFloatingCursorPoint$Mate(
          offset: p.get('offset').build(),
          state: p.get('state').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TextEditingValue
class TextEditingValue$Mate extends _i1.TextEditingValue with _i2.Mate {
  /// TextEditingValue TextEditingValue({String text = '', TextSelection selection = const TextSelection.collapsed(offset: -1), TextRange composing = TextRange.empty})
  TextEditingValue$Mate({
    /// optionalParameters: {String text = ''} , default:processed=SimpleStringLiteralImpl
    super.text,

    /// optionalParameters: {TextSelection selection = const TextSelection.collapsed(offset: -1)} , default:unprocessed=InstanceCreationExpressionImpl
    super.selection,

    /// optionalParameters: {TextRange composing = TextRange.empty} , default:unprocessed=PrefixedIdentifierImpl
    super.composing,
  })  : mateParams = {
          'text': _i2.BuilderArg<String>(
            name: 'text',
            init: text,
            isNamed: true,
            defaultValue: '',
          ),
          'selection': _i2.BuilderArg<_i5.TextSelection>(
            name: 'selection',
            init: selection,
            isNamed: true,
          ),
          'composing': _i2.BuilderArg<_i3.TextRange>(
            name: 'composing',
            init: composing,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TextEditingValue';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextEditingValue$Mate(
          text: p.get('text').build(),
          selection: p.get('selection').build(),
          composing: p.get('composing').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SelectionRect
class SelectionRect$Mate extends _i1.SelectionRect with _i2.Mate {
  /// SelectionRect SelectionRect({required int position, required Rect bounds, TextDirection direction = TextDirection.ltr})
  SelectionRect$Mate({
    /// optionalParameters: {required int position} , default:none
    required super.position,

    /// optionalParameters: {required Rect bounds} , default:none
    required super.bounds,

    /// optionalParameters: {TextDirection direction = TextDirection.ltr} , default:unprocessed=PrefixedIdentifierImpl
    super.direction,
  })  : mateParams = {
          'position': _i2.BuilderArg<int>(
            name: 'position',
            init: position,
            isNamed: true,
          ),
          'bounds': _i2.BuilderArg<_i3.Rect>(
            name: 'bounds',
            init: bounds,
            isNamed: true,
          ),
          'direction': _i2.BuilderArg<_i3.TextDirection>(
            name: 'direction',
            init: direction,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SelectionRect';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => SelectionRect$Mate(
          position: p.get('position').build(),
          bounds: p.get('bounds').build(),
          direction: p.get('direction').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
