// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/services/text_input.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/services/autofill.dart';import 'package:flutter/src/services/text_editing.dart';import 'package:note/mate.dart' show Mate;/// class TextInputType
class TextInputType$Mate extends TextInputType with Mate {/// TextInputType TextInputType.numberWithOptions({bool? signed = false, bool? decimal = false})
TextInputType$Mate.numberWithOptions({/// optionalParameters: {bool? signed = false} , hasDefaultValue:true, defaultValueCode:false
bool? signed, /// optionalParameters: {bool? decimal = false} , hasDefaultValue:true, defaultValueCode:false
bool? decimal, }) : super.numberWithOptions(signed: signed, decimal: decimal, ) { mateBuilder = (p) => TextInputType$Mate.numberWithOptions(signed: p.get('signed').build(), decimal: p.get('decimal').build(), );
matePut('signed', signed);
matePut('decimal', decimal); }

 }
/// class TextInputConfiguration
class TextInputConfiguration$Mate extends TextInputConfiguration with Mate {/// TextInputConfiguration TextInputConfiguration({TextInputType inputType = TextInputType.text, bool readOnly = false, bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, bool enableInteractiveSelection = true, String? actionLabel, TextInputAction inputAction = TextInputAction.done, Brightness keyboardAppearance = Brightness.light, TextCapitalization textCapitalization = TextCapitalization.none, AutofillConfiguration autofillConfiguration = AutofillConfiguration.disabled, bool enableIMEPersonalizedLearning = true, List<String> allowedMimeTypes = const <String>[], bool enableDeltaModel = false})
TextInputConfiguration$Mate({/// optionalParameters: {TextInputType inputType = TextInputType.text} , hasDefaultValue:true, defaultValueCode:TextInputType.text
required TextInputType inputType, /// optionalParameters: {bool readOnly = false} , hasDefaultValue:true, defaultValueCode:false
required bool readOnly, /// optionalParameters: {bool obscureText = false} , hasDefaultValue:true, defaultValueCode:false
required bool obscureText, /// optionalParameters: {bool autocorrect = true} , hasDefaultValue:true, defaultValueCode:true
required bool autocorrect, /// optionalParameters: {SmartDashesType? smartDashesType} , hasDefaultValue:false, defaultValueCode:null
SmartDashesType? smartDashesType, /// optionalParameters: {SmartQuotesType? smartQuotesType} , hasDefaultValue:false, defaultValueCode:null
SmartQuotesType? smartQuotesType, /// optionalParameters: {bool enableSuggestions = true} , hasDefaultValue:true, defaultValueCode:true
required bool enableSuggestions, /// optionalParameters: {bool enableInteractiveSelection = true} , hasDefaultValue:true, defaultValueCode:true
required bool enableInteractiveSelection, /// optionalParameters: {String? actionLabel} , hasDefaultValue:false, defaultValueCode:null
String? actionLabel, /// optionalParameters: {TextInputAction inputAction = TextInputAction.done} , hasDefaultValue:true, defaultValueCode:TextInputAction.done
required TextInputAction inputAction, /// optionalParameters: {Brightness keyboardAppearance = Brightness.light} , hasDefaultValue:true, defaultValueCode:Brightness.light
required Brightness keyboardAppearance, /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , hasDefaultValue:true, defaultValueCode:TextCapitalization.none
required TextCapitalization textCapitalization, /// optionalParameters: {AutofillConfiguration autofillConfiguration = AutofillConfiguration.disabled} , hasDefaultValue:true, defaultValueCode:AutofillConfiguration.disabled
required AutofillConfiguration autofillConfiguration, /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , hasDefaultValue:true, defaultValueCode:true
required bool enableIMEPersonalizedLearning, /// optionalParameters: {List<String> allowedMimeTypes = const <String>[]} , hasDefaultValue:true, defaultValueCode:const <String>[]
required List<String> allowedMimeTypes, /// optionalParameters: {bool enableDeltaModel = false} , hasDefaultValue:true, defaultValueCode:false
required bool enableDeltaModel, }) : super(inputType: inputType, readOnly: readOnly, obscureText: obscureText, autocorrect: autocorrect, smartDashesType: smartDashesType, smartQuotesType: smartQuotesType, enableSuggestions: enableSuggestions, enableInteractiveSelection: enableInteractiveSelection, actionLabel: actionLabel, inputAction: inputAction, keyboardAppearance: keyboardAppearance, textCapitalization: textCapitalization, autofillConfiguration: autofillConfiguration, enableIMEPersonalizedLearning: enableIMEPersonalizedLearning, allowedMimeTypes: allowedMimeTypes, enableDeltaModel: enableDeltaModel, ) { mateBuilder = (p) => TextInputConfiguration$Mate(inputType: p.get('inputType').build(), readOnly: p.get('readOnly').build(), obscureText: p.get('obscureText').build(), autocorrect: p.get('autocorrect').build(), smartDashesType: p.get('smartDashesType').build(), smartQuotesType: p.get('smartQuotesType').build(), enableSuggestions: p.get('enableSuggestions').build(), enableInteractiveSelection: p.get('enableInteractiveSelection').build(), actionLabel: p.get('actionLabel').build(), inputAction: p.get('inputAction').build(), keyboardAppearance: p.get('keyboardAppearance').build(), textCapitalization: p.get('textCapitalization').build(), autofillConfiguration: p.get('autofillConfiguration').build(), enableIMEPersonalizedLearning: p.get('enableIMEPersonalizedLearning').build(), allowedMimeTypes: p.get('allowedMimeTypes').build(), enableDeltaModel: p.get('enableDeltaModel').build(), );
matePut('inputType', inputType);
matePut('readOnly', readOnly);
matePut('obscureText', obscureText);
matePut('autocorrect', autocorrect);
matePut('smartDashesType', smartDashesType);
matePut('smartQuotesType', smartQuotesType);
matePut('enableSuggestions', enableSuggestions);
matePut('enableInteractiveSelection', enableInteractiveSelection);
matePut('actionLabel', actionLabel);
matePut('inputAction', inputAction);
matePut('keyboardAppearance', keyboardAppearance);
matePut('textCapitalization', textCapitalization);
matePut('autofillConfiguration', autofillConfiguration);
matePut('enableIMEPersonalizedLearning', enableIMEPersonalizedLearning);
matePut('allowedMimeTypes', allowedMimeTypes);
matePut('enableDeltaModel', enableDeltaModel); }

 }
/// class RawFloatingCursorPoint
class RawFloatingCursorPoint$Mate extends RawFloatingCursorPoint with Mate {/// RawFloatingCursorPoint RawFloatingCursorPoint({Offset? offset, required FloatingCursorDragState state})
RawFloatingCursorPoint$Mate({/// optionalParameters: {Offset? offset} , hasDefaultValue:false, defaultValueCode:null
Offset? offset, /// optionalParameters: {required FloatingCursorDragState state} , hasDefaultValue:false, defaultValueCode:null
required FloatingCursorDragState state, }) : super(offset: offset, state: state, ) { mateBuilder = (p) => RawFloatingCursorPoint$Mate(offset: p.get('offset').build(), state: p.get('state').build(), );
matePut('offset', offset);
matePut('state', state); }

 }
/// class TextEditingValue
class TextEditingValue$Mate extends TextEditingValue with Mate {/// TextEditingValue TextEditingValue({String text = '', TextSelection selection = const TextSelection.collapsed(offset: -1), TextRange composing = TextRange.empty})
TextEditingValue$Mate({/// optionalParameters: {String text = ''} , hasDefaultValue:true, defaultValueCode:''
required String text, /// optionalParameters: {TextSelection selection = const TextSelection.collapsed(offset: -1)} , hasDefaultValue:true, defaultValueCode:const TextSelection.collapsed(offset: -1)
required TextSelection selection, /// optionalParameters: {TextRange composing = TextRange.empty} , hasDefaultValue:true, defaultValueCode:TextRange.empty
required TextRange composing, }) : super(text: text, selection: selection, composing: composing, ) { mateBuilder = (p) => TextEditingValue$Mate(text: p.get('text').build(), selection: p.get('selection').build(), composing: p.get('composing').build(), );
matePut('text', text);
matePut('selection', selection);
matePut('composing', composing); }

 }
/// class SelectionRect
class SelectionRect$Mate extends SelectionRect with Mate {/// SelectionRect SelectionRect({required int position, required Rect bounds, TextDirection direction = TextDirection.ltr})
SelectionRect$Mate({/// optionalParameters: {required int position} , hasDefaultValue:false, defaultValueCode:null
required int position, /// optionalParameters: {required Rect bounds} , hasDefaultValue:false, defaultValueCode:null
required Rect bounds, /// optionalParameters: {TextDirection direction = TextDirection.ltr} , hasDefaultValue:true, defaultValueCode:TextDirection.ltr
required TextDirection direction, }) : super(position: position, bounds: bounds, direction: direction, ) { mateBuilder = (p) => SelectionRect$Mate(position: p.get('position').build(), bounds: p.get('bounds').build(), direction: p.get('direction').build(), );
matePut('position', position);
matePut('bounds', bounds);
matePut('direction', direction); }

 }
