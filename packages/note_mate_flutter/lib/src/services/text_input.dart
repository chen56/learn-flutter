// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/text_input.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/cupertino.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/services/autofill.dart' as _i5;
import 'package:flutter/services.dart' as _i6;
import 'package:flutter/src/services/text_editing.dart' as _i7;

/// class TextInputType
class TextInputType$Mate extends _i1.TextInputType with _i2.Mate {
  /// TextInputType TextInputType.numberWithOptions({bool? signed = false, bool? decimal = false})
  TextInputType$Mate.numberWithOptions({
    /// optionalParameters: {bool? signed = false} , default:processed=BooleanLiteralImpl
    bool? signed = false,

    /// optionalParameters: {bool? decimal = false} , default:processed=BooleanLiteralImpl
    bool? decimal = false,
  }) : super.numberWithOptions(
          signed: signed,
          decimal: decimal,
        ) {
    mateBuilderName = 'TextInputType.numberWithOptions';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextInputType$Mate.numberWithOptions(
          signed: p.get('signed').build(),
          decimal: p.get('decimal').build(),
        );
    mateUse(
      'signed',
      signed,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'decimal',
      decimal,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class TextInputConfiguration
class TextInputConfiguration$Mate extends _i1.TextInputConfiguration with _i2.Mate {
  /// TextInputConfiguration TextInputConfiguration({TextInputType inputType = TextInputType.text, bool readOnly = false, bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, bool enableInteractiveSelection = true, String? actionLabel, TextInputAction inputAction = TextInputAction.done, Brightness keyboardAppearance = Brightness.light, TextCapitalization textCapitalization = TextCapitalization.none, AutofillConfiguration autofillConfiguration = AutofillConfiguration.disabled, bool enableIMEPersonalizedLearning = true, List<String> allowedMimeTypes = const <String>[], bool enableDeltaModel = false})
  TextInputConfiguration$Mate({
    /// optionalParameters: {TextInputType inputType = TextInputType.text} , default:processed=PrefixedIdentifierImpl
    _i1.TextInputType inputType = _i3.TextInputType.text,

    /// optionalParameters: {bool readOnly = false} , default:processed=BooleanLiteralImpl
    bool readOnly = false,

    /// optionalParameters: {bool obscureText = false} , default:processed=BooleanLiteralImpl
    bool obscureText = false,

    /// optionalParameters: {bool autocorrect = true} , default:processed=BooleanLiteralImpl
    bool autocorrect = true,

    /// optionalParameters: {SmartDashesType? smartDashesType} , default:none
    _i1.SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , default:none
    _i1.SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , default:processed=BooleanLiteralImpl
    bool enableSuggestions = true,

    /// optionalParameters: {bool enableInteractiveSelection = true} , default:processed=BooleanLiteralImpl
    bool enableInteractiveSelection = true,

    /// optionalParameters: {String? actionLabel} , default:none
    String? actionLabel,

    /// optionalParameters: {TextInputAction inputAction = TextInputAction.done} , default:processed=PrefixedIdentifierImpl
    _i1.TextInputAction inputAction = _i3.TextInputAction.done,

    /// optionalParameters: {Brightness keyboardAppearance = Brightness.light} , default:processed=PrefixedIdentifierImpl
    _i4.Brightness keyboardAppearance = _i4.Brightness.light,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , default:processed=PrefixedIdentifierImpl
    _i1.TextCapitalization textCapitalization = _i3.TextCapitalization.none,

    /// optionalParameters: {AutofillConfiguration autofillConfiguration = AutofillConfiguration.disabled} , default:processed=PrefixedIdentifierImpl
    _i5.AutofillConfiguration autofillConfiguration = _i6.AutofillConfiguration.disabled,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , default:processed=BooleanLiteralImpl
    bool enableIMEPersonalizedLearning = true,

    /// optionalParameters: {List<String> allowedMimeTypes = const <String>[]} , default:unprocessed=ListLiteralImpl
    required List<String> allowedMimeTypes,

    /// optionalParameters: {bool enableDeltaModel = false} , default:processed=BooleanLiteralImpl
    bool enableDeltaModel = false,
  }) : super(
          inputType: inputType,
          readOnly: readOnly,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          enableInteractiveSelection: enableInteractiveSelection,
          actionLabel: actionLabel,
          inputAction: inputAction,
          keyboardAppearance: keyboardAppearance,
          textCapitalization: textCapitalization,
          autofillConfiguration: autofillConfiguration,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          allowedMimeTypes: allowedMimeTypes,
          enableDeltaModel: enableDeltaModel,
        ) {
    mateBuilderName = 'TextInputConfiguration';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => TextInputConfiguration$Mate(
          inputType: p.get('inputType').build(),
          readOnly: p.get('readOnly').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          actionLabel: p.get('actionLabel').build(),
          inputAction: p.get('inputAction').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          textCapitalization: p.get('textCapitalization').build(),
          autofillConfiguration: p.get('autofillConfiguration').build(),
          enableIMEPersonalizedLearning: p.get('enableIMEPersonalizedLearning').build(),
          allowedMimeTypes: p.get('allowedMimeTypes').build(),
          enableDeltaModel: p.get('enableDeltaModel').build(),
        );
    mateUse(
      'inputType',
      inputType,
      isNamed: true,
      defaultValue: _i3.TextInputType.text,
    );
    mateUse(
      'readOnly',
      readOnly,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'obscureText',
      obscureText,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'autocorrect',
      autocorrect,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'smartDashesType',
      smartDashesType,
      isNamed: true,
    );
    mateUse(
      'smartQuotesType',
      smartQuotesType,
      isNamed: true,
    );
    mateUse(
      'enableSuggestions',
      enableSuggestions,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'enableInteractiveSelection',
      enableInteractiveSelection,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'actionLabel',
      actionLabel,
      isNamed: true,
    );
    mateUse(
      'inputAction',
      inputAction,
      isNamed: true,
      defaultValue: _i3.TextInputAction.done,
    );
    mateUse(
      'keyboardAppearance',
      keyboardAppearance,
      isNamed: true,
      defaultValue: _i4.Brightness.light,
    );
    mateUse(
      'textCapitalization',
      textCapitalization,
      isNamed: true,
      defaultValue: _i3.TextCapitalization.none,
    );
    mateUse(
      'autofillConfiguration',
      autofillConfiguration,
      isNamed: true,
      defaultValue: _i6.AutofillConfiguration.disabled,
    );
    mateUse(
      'enableIMEPersonalizedLearning',
      enableIMEPersonalizedLearning,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'allowedMimeTypes',
      allowedMimeTypes,
      isNamed: true,
    );
    mateUse(
      'enableDeltaModel',
      enableDeltaModel,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class RawFloatingCursorPoint
class RawFloatingCursorPoint$Mate extends _i1.RawFloatingCursorPoint with _i2.Mate {
  /// RawFloatingCursorPoint RawFloatingCursorPoint({Offset? offset, required FloatingCursorDragState state})
  RawFloatingCursorPoint$Mate({
    /// optionalParameters: {Offset? offset} , default:none
    _i4.Offset? offset,

    /// optionalParameters: {required FloatingCursorDragState state} , default:none
    required _i1.FloatingCursorDragState state,
  }) : super(
          offset: offset,
          state: state,
        ) {
    mateBuilderName = 'RawFloatingCursorPoint';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => RawFloatingCursorPoint$Mate(
          offset: p.get('offset').build(),
          state: p.get('state').build(),
        );
    mateUse(
      'offset',
      offset,
      isNamed: true,
    );
    mateUse(
      'state',
      state,
      isNamed: true,
    );
  }
}

/// class TextEditingValue
class TextEditingValue$Mate extends _i1.TextEditingValue with _i2.Mate {
  /// TextEditingValue TextEditingValue({String text = '', TextSelection selection = const TextSelection.collapsed(offset: -1), TextRange composing = TextRange.empty})
  TextEditingValue$Mate({
    /// optionalParameters: {String text = ''} , default:processed=SimpleStringLiteralImpl
    String text = '',

    /// optionalParameters: {TextSelection selection = const TextSelection.collapsed(offset: -1)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i7.TextSelection selection,

    /// optionalParameters: {TextRange composing = TextRange.empty} , default:processed=PrefixedIdentifierImpl
    _i4.TextRange composing = _i4.TextRange.empty,
  }) : super(
          text: text,
          selection: selection,
          composing: composing,
        ) {
    mateBuilderName = 'TextEditingValue';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextEditingValue$Mate(
          text: p.get('text').build(),
          selection: p.get('selection').build(),
          composing: p.get('composing').build(),
        );
    mateUse(
      'text',
      text,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'selection',
      selection,
      isNamed: true,
    );
    mateUse(
      'composing',
      composing,
      isNamed: true,
      defaultValue: _i4.TextRange.empty,
    );
  }
}

/// class SelectionRect
class SelectionRect$Mate extends _i1.SelectionRect with _i2.Mate {
  /// SelectionRect SelectionRect({required int position, required Rect bounds, TextDirection direction = TextDirection.ltr})
  SelectionRect$Mate({
    /// optionalParameters: {required int position} , default:none
    required int position,

    /// optionalParameters: {required Rect bounds} , default:none
    required _i4.Rect bounds,

    /// optionalParameters: {TextDirection direction = TextDirection.ltr} , default:processed=PrefixedIdentifierImpl
    _i4.TextDirection direction = _i4.TextDirection.ltr,
  }) : super(
          position: position,
          bounds: bounds,
          direction: direction,
        ) {
    mateBuilderName = 'SelectionRect';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => SelectionRect$Mate(
          position: p.get('position').build(),
          bounds: p.get('bounds').build(),
          direction: p.get('direction').build(),
        );
    mateUse(
      'position',
      position,
      isNamed: true,
    );
    mateUse(
      'bounds',
      bounds,
      isNamed: true,
    );
    mateUse(
      'direction',
      direction,
      isNamed: true,
      defaultValue: _i4.TextDirection.ltr,
    );
  }
}
