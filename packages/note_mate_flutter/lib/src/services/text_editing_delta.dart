// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/text_editing_delta.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/services/text_editing.dart';
import 'dart:ui';

/// class TextEditingDeltaInsertion extends TextEditingDelta
class TextEditingDeltaInsertion$Mate extends TextEditingDeltaInsertion with Mate {
  /// TextEditingDeltaInsertion TextEditingDeltaInsertion({required String oldText, required String textInserted, required int insertionOffset, required TextSelection selection, required TextRange composing})
  TextEditingDeltaInsertion$Mate({
    /// optionalParameters: {required String oldText} , hasDefaultValue:false, defaultValueCode:null
    required String oldText,

    /// optionalParameters: {required String textInserted} , hasDefaultValue:false, defaultValueCode:null
    required String textInserted,

    /// optionalParameters: {required int insertionOffset} , hasDefaultValue:false, defaultValueCode:null
    required int insertionOffset,

    /// optionalParameters: {required TextSelection selection} , hasDefaultValue:false, defaultValueCode:null
    required TextSelection selection,

    /// optionalParameters: {required TextRange composing} , hasDefaultValue:false, defaultValueCode:null
    required TextRange composing,
  }) : super(
          oldText: oldText,
          textInserted: textInserted,
          insertionOffset: insertionOffset,
          selection: selection,
          composing: composing,
        ) {
    mateBuilder = (p) => TextEditingDeltaInsertion$Mate(
          oldText: p.get('oldText').build(),
          textInserted: p.get('textInserted').build(),
          insertionOffset: p.get('insertionOffset').build(),
          selection: p.get('selection').build(),
          composing: p.get('composing').build(),
        );
    matePut('oldText', oldText);
    matePut('textInserted', textInserted);
    matePut('insertionOffset', insertionOffset);
    matePut('selection', selection);
    matePut('composing', composing);
  }
}

/// class TextEditingDeltaDeletion extends TextEditingDelta
class TextEditingDeltaDeletion$Mate extends TextEditingDeltaDeletion with Mate {
  /// TextEditingDeltaDeletion TextEditingDeltaDeletion({required String oldText, required TextRange deletedRange, required TextSelection selection, required TextRange composing})
  TextEditingDeltaDeletion$Mate({
    /// optionalParameters: {required String oldText} , hasDefaultValue:false, defaultValueCode:null
    required String oldText,

    /// optionalParameters: {required TextRange deletedRange} , hasDefaultValue:false, defaultValueCode:null
    required TextRange deletedRange,

    /// optionalParameters: {required TextSelection selection} , hasDefaultValue:false, defaultValueCode:null
    required TextSelection selection,

    /// optionalParameters: {required TextRange composing} , hasDefaultValue:false, defaultValueCode:null
    required TextRange composing,
  }) : super(
          oldText: oldText,
          deletedRange: deletedRange,
          selection: selection,
          composing: composing,
        ) {
    mateBuilder = (p) => TextEditingDeltaDeletion$Mate(
          oldText: p.get('oldText').build(),
          deletedRange: p.get('deletedRange').build(),
          selection: p.get('selection').build(),
          composing: p.get('composing').build(),
        );
    matePut('oldText', oldText);
    matePut('deletedRange', deletedRange);
    matePut('selection', selection);
    matePut('composing', composing);
  }
}

/// class TextEditingDeltaReplacement extends TextEditingDelta
class TextEditingDeltaReplacement$Mate extends TextEditingDeltaReplacement with Mate {
  /// TextEditingDeltaReplacement TextEditingDeltaReplacement({required String oldText, required String replacementText, required TextRange replacedRange, required TextSelection selection, required TextRange composing})
  TextEditingDeltaReplacement$Mate({
    /// optionalParameters: {required String oldText} , hasDefaultValue:false, defaultValueCode:null
    required String oldText,

    /// optionalParameters: {required String replacementText} , hasDefaultValue:false, defaultValueCode:null
    required String replacementText,

    /// optionalParameters: {required TextRange replacedRange} , hasDefaultValue:false, defaultValueCode:null
    required TextRange replacedRange,

    /// optionalParameters: {required TextSelection selection} , hasDefaultValue:false, defaultValueCode:null
    required TextSelection selection,

    /// optionalParameters: {required TextRange composing} , hasDefaultValue:false, defaultValueCode:null
    required TextRange composing,
  }) : super(
          oldText: oldText,
          replacementText: replacementText,
          replacedRange: replacedRange,
          selection: selection,
          composing: composing,
        ) {
    mateBuilder = (p) => TextEditingDeltaReplacement$Mate(
          oldText: p.get('oldText').build(),
          replacementText: p.get('replacementText').build(),
          replacedRange: p.get('replacedRange').build(),
          selection: p.get('selection').build(),
          composing: p.get('composing').build(),
        );
    matePut('oldText', oldText);
    matePut('replacementText', replacementText);
    matePut('replacedRange', replacedRange);
    matePut('selection', selection);
    matePut('composing', composing);
  }
}

/// class TextEditingDeltaNonTextUpdate extends TextEditingDelta
class TextEditingDeltaNonTextUpdate$Mate extends TextEditingDeltaNonTextUpdate with Mate {
  /// TextEditingDeltaNonTextUpdate TextEditingDeltaNonTextUpdate({required String oldText, required TextSelection selection, required TextRange composing})
  TextEditingDeltaNonTextUpdate$Mate({
    /// optionalParameters: {required String oldText} , hasDefaultValue:false, defaultValueCode:null
    required String oldText,

    /// optionalParameters: {required TextSelection selection} , hasDefaultValue:false, defaultValueCode:null
    required TextSelection selection,

    /// optionalParameters: {required TextRange composing} , hasDefaultValue:false, defaultValueCode:null
    required TextRange composing,
  }) : super(
          oldText: oldText,
          selection: selection,
          composing: composing,
        ) {
    mateBuilder = (p) => TextEditingDeltaNonTextUpdate$Mate(
          oldText: p.get('oldText').build(),
          selection: p.get('selection').build(),
          composing: p.get('composing').build(),
        );
    matePut('oldText', oldText);
    matePut('selection', selection);
    matePut('composing', composing);
  }
}
