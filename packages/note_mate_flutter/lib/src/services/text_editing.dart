// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/text_editing.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';

/// class TextSelection extends TextRange
class TextSelection$Mate extends TextSelection with Mate {
  /// TextSelection TextSelection({required int baseOffset, required int extentOffset, TextAffinity affinity = TextAffinity.downstream, bool isDirectional = false})
  TextSelection$Mate({
    /// optionalParameters: {required int baseOffset} , hasDefaultValue:false, defaultValueCode:null
    required int baseOffset,

    /// optionalParameters: {required int extentOffset} , hasDefaultValue:false, defaultValueCode:null
    required int extentOffset,

    /// optionalParameters: {TextAffinity affinity = TextAffinity.downstream} , hasDefaultValue:true, defaultValueCode:TextAffinity.downstream
    required TextAffinity affinity,

    /// optionalParameters: {bool isDirectional = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isDirectional,
  }) : super(
          baseOffset: baseOffset,
          extentOffset: extentOffset,
          affinity: affinity,
          isDirectional: isDirectional,
        ) {
    mateBuilder = (p) => TextSelection$Mate(
          baseOffset: p.get('baseOffset').build(),
          extentOffset: p.get('extentOffset').build(),
          affinity: p.get('affinity').build(),
          isDirectional: p.get('isDirectional').build(),
        );
    matePut('baseOffset', baseOffset);
    matePut('extentOffset', extentOffset);
    matePut('affinity', affinity);
    matePut('isDirectional', isDirectional);
  }

  /// TextSelection TextSelection.collapsed({required int offset, TextAffinity affinity = TextAffinity.downstream})
  TextSelection$Mate.collapsed({
    /// optionalParameters: {required int offset} , hasDefaultValue:false, defaultValueCode:null
    required int offset,

    /// optionalParameters: {TextAffinity affinity = TextAffinity.downstream} , hasDefaultValue:true, defaultValueCode:TextAffinity.downstream
    required TextAffinity affinity,
  }) : super.collapsed(
          offset: offset,
          affinity: affinity,
        ) {
    mateBuilder = (p) => TextSelection$Mate.collapsed(
          offset: p.get('offset').build(),
          affinity: p.get('affinity').build(),
        );
    matePut('offset', offset);
    matePut('affinity', affinity);
  }

  /// TextSelection TextSelection.fromPosition(TextPosition position)
  TextSelection$Mate.fromPosition(

      /// requiredParameters: TextPosition position
      TextPosition position)
      : super.fromPosition(position) {
    mateBuilder = (p) => TextSelection$Mate.fromPosition(p.get('position').value);
    matePut('position', position);
  }
}
