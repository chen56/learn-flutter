// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/hardware_keyboard.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/services/keyboard_key.g.dart' as _i3;
import 'package:flutter/src/services/raw_keyboard.dart' as _i4;

/// class KeyDownEvent extends KeyEvent
class KeyDownEvent$Mate extends _i1.KeyDownEvent with _i2.Mate {
  /// KeyDownEvent KeyDownEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, String? character, required Duration timeStamp, bool synthesized = false})
  KeyDownEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , default:none
    required _i3.PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , default:none
    required _i3.LogicalKeyboardKey logicalKey,

    /// optionalParameters: {String? character} , default:none
    String? character,

    /// optionalParameters: {required Duration timeStamp} , default:none
    required Duration timeStamp,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          character: character,
          timeStamp: timeStamp,
          synthesized: synthesized,
        ) {
    mateBuilderName = 'KeyDownEvent';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyDownEvent$Mate(
          physicalKey: p.get('physicalKey').build(),
          logicalKey: p.get('logicalKey').build(),
          character: p.get('character').build(),
          timeStamp: p.get('timeStamp').build(),
          synthesized: p.get('synthesized').build(),
        );
    mateUse(
      'physicalKey',
      physicalKey,
      isNamed: true,
    );
    mateUse(
      'logicalKey',
      logicalKey,
      isNamed: true,
    );
    mateUse(
      'character',
      character,
      isNamed: true,
    );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class KeyUpEvent extends KeyEvent
class KeyUpEvent$Mate extends _i1.KeyUpEvent with _i2.Mate {
  /// KeyUpEvent KeyUpEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, required Duration timeStamp, bool synthesized = false})
  KeyUpEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , default:none
    required _i3.PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , default:none
    required _i3.LogicalKeyboardKey logicalKey,

    /// optionalParameters: {required Duration timeStamp} , default:none
    required Duration timeStamp,

    /// optionalParameters: {bool synthesized = false} , default:processed=BooleanLiteralImpl
    bool synthesized = false,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          timeStamp: timeStamp,
          synthesized: synthesized,
        ) {
    mateBuilderName = 'KeyUpEvent';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyUpEvent$Mate(
          physicalKey: p.get('physicalKey').build(),
          logicalKey: p.get('logicalKey').build(),
          timeStamp: p.get('timeStamp').build(),
          synthesized: p.get('synthesized').build(),
        );
    mateUse(
      'physicalKey',
      physicalKey,
      isNamed: true,
    );
    mateUse(
      'logicalKey',
      logicalKey,
      isNamed: true,
    );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
    );
    mateUse(
      'synthesized',
      synthesized,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class KeyRepeatEvent extends KeyEvent
class KeyRepeatEvent$Mate extends _i1.KeyRepeatEvent with _i2.Mate {
  /// KeyRepeatEvent KeyRepeatEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, String? character, required Duration timeStamp})
  KeyRepeatEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , default:none
    required _i3.PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , default:none
    required _i3.LogicalKeyboardKey logicalKey,

    /// optionalParameters: {String? character} , default:none
    String? character,

    /// optionalParameters: {required Duration timeStamp} , default:none
    required Duration timeStamp,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          character: character,
          timeStamp: timeStamp,
        ) {
    mateBuilderName = 'KeyRepeatEvent';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyRepeatEvent$Mate(
          physicalKey: p.get('physicalKey').build(),
          logicalKey: p.get('logicalKey').build(),
          character: p.get('character').build(),
          timeStamp: p.get('timeStamp').build(),
        );
    mateUse(
      'physicalKey',
      physicalKey,
      isNamed: true,
    );
    mateUse(
      'logicalKey',
      logicalKey,
      isNamed: true,
    );
    mateUse(
      'character',
      character,
      isNamed: true,
    );
    mateUse(
      'timeStamp',
      timeStamp,
      isNamed: true,
    );
  }
}

/// class KeyMessage
class KeyMessage$Mate extends _i1.KeyMessage with _i2.Mate {
  /// KeyMessage KeyMessage(List<KeyEvent> events, RawKeyEvent? rawEvent)
  KeyMessage$Mate(
    /// requiredParameters: List<KeyEvent> events
    List<_i1.KeyEvent> events,

    /// requiredParameters: RawKeyEvent? rawEvent
    _i4.RawKeyEvent? rawEvent,
  ) : super(
          events,
          rawEvent,
        ) {
    mateBuilderName = 'KeyMessage';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyMessage$Mate(
          p.get('events').value,
          p.get('rawEvent').value,
        );
    mateUse(
      'events',
      events,
      isNamed: false,
    );
    mateUse(
      'rawEvent',
      rawEvent,
      isNamed: false,
    );
  }
}

/// class KeyEventManager
class KeyEventManager$Mate extends _i1.KeyEventManager with _i2.Mate {
  /// KeyEventManager KeyEventManager(HardwareKeyboard _hardwareKeyboard, RawKeyboard _rawKeyboard)
  KeyEventManager$Mate(
    /// requiredParameters: HardwareKeyboard _hardwareKeyboard
    _i1.HardwareKeyboard _hardwareKeyboard,

    /// requiredParameters: RawKeyboard _rawKeyboard
    _i4.RawKeyboard _rawKeyboard,
  ) : super(
          _hardwareKeyboard,
          _rawKeyboard,
        ) {
    mateBuilderName = 'KeyEventManager';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyEventManager$Mate(
          p.get('_hardwareKeyboard').value,
          p.get('_rawKeyboard').value,
        );
    mateUse(
      '_hardwareKeyboard',
      _hardwareKeyboard,
      isNamed: false,
    );
    mateUse(
      '_rawKeyboard',
      _rawKeyboard,
      isNamed: false,
    );
  }
}
