// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/hardware_keyboard.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'dart:core';
import 'package:flutter/src/services/raw_keyboard.dart';

/// class KeyDownEvent extends KeyEvent
class KeyDownEvent$Mate extends KeyDownEvent with Mate {
  /// KeyDownEvent KeyDownEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, String? character, required Duration timeStamp, bool synthesized = false})
  KeyDownEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , defaultValue:none
    required PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , defaultValue:none
    required LogicalKeyboardKey logicalKey,

    /// optionalParameters: {String? character} , defaultValue:none
    String? character,

    /// optionalParameters: {required Duration timeStamp} , defaultValue:none
    required Duration timeStamp,

    /// optionalParameters: {bool synthesized = false} , defaultValue:Literal
    bool synthesized = false,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          character: character,
          timeStamp: timeStamp,
          synthesized: synthesized,
        ) {
    mateCreateName = 'KeyDownEvent';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyDownEvent$Mate(
          physicalKey: p.get('physicalKey').build(),
          logicalKey: p.get('logicalKey').build(),
          character: p.get('character').build(),
          timeStamp: p.get('timeStamp').build(),
          synthesized: p.get('synthesized').build(),
        );
    mateUse('physicalKey', physicalKey);
    mateUse('logicalKey', logicalKey);
    mateUse('character', character);
    mateUse('timeStamp', timeStamp);
    mateUse('synthesized', synthesized);
  }
}

/// class KeyUpEvent extends KeyEvent
class KeyUpEvent$Mate extends KeyUpEvent with Mate {
  /// KeyUpEvent KeyUpEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, required Duration timeStamp, bool synthesized = false})
  KeyUpEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , defaultValue:none
    required PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , defaultValue:none
    required LogicalKeyboardKey logicalKey,

    /// optionalParameters: {required Duration timeStamp} , defaultValue:none
    required Duration timeStamp,

    /// optionalParameters: {bool synthesized = false} , defaultValue:Literal
    bool synthesized = false,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          timeStamp: timeStamp,
          synthesized: synthesized,
        ) {
    mateCreateName = 'KeyUpEvent';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyUpEvent$Mate(
          physicalKey: p.get('physicalKey').build(),
          logicalKey: p.get('logicalKey').build(),
          timeStamp: p.get('timeStamp').build(),
          synthesized: p.get('synthesized').build(),
        );
    mateUse('physicalKey', physicalKey);
    mateUse('logicalKey', logicalKey);
    mateUse('timeStamp', timeStamp);
    mateUse('synthesized', synthesized);
  }
}

/// class KeyRepeatEvent extends KeyEvent
class KeyRepeatEvent$Mate extends KeyRepeatEvent with Mate {
  /// KeyRepeatEvent KeyRepeatEvent({required PhysicalKeyboardKey physicalKey, required LogicalKeyboardKey logicalKey, String? character, required Duration timeStamp})
  KeyRepeatEvent$Mate({
    /// optionalParameters: {required PhysicalKeyboardKey physicalKey} , defaultValue:none
    required PhysicalKeyboardKey physicalKey,

    /// optionalParameters: {required LogicalKeyboardKey logicalKey} , defaultValue:none
    required LogicalKeyboardKey logicalKey,

    /// optionalParameters: {String? character} , defaultValue:none
    String? character,

    /// optionalParameters: {required Duration timeStamp} , defaultValue:none
    required Duration timeStamp,
  }) : super(
          physicalKey: physicalKey,
          logicalKey: logicalKey,
          character: character,
          timeStamp: timeStamp,
        ) {
    mateCreateName = 'KeyRepeatEvent';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyRepeatEvent$Mate(
          physicalKey: p.get('physicalKey').build(),
          logicalKey: p.get('logicalKey').build(),
          character: p.get('character').build(),
          timeStamp: p.get('timeStamp').build(),
        );
    mateUse('physicalKey', physicalKey);
    mateUse('logicalKey', logicalKey);
    mateUse('character', character);
    mateUse('timeStamp', timeStamp);
  }
}

/// class KeyMessage
class KeyMessage$Mate extends KeyMessage with Mate {
  /// KeyMessage KeyMessage(List<KeyEvent> events, RawKeyEvent? rawEvent)
  KeyMessage$Mate(
    /// requiredParameters: List<KeyEvent> events
    List<KeyEvent> events,

    /// requiredParameters: RawKeyEvent? rawEvent
    RawKeyEvent? rawEvent,
  ) : super(
          events,
          rawEvent,
        ) {
    mateCreateName = 'KeyMessage';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyMessage$Mate(
          p.get('events').value,
          p.get('rawEvent').value,
        );
    mateUse('events', events);
    mateUse('rawEvent', rawEvent);
  }
}

/// class KeyEventManager
class KeyEventManager$Mate extends KeyEventManager with Mate {
  /// KeyEventManager KeyEventManager(HardwareKeyboard _hardwareKeyboard, RawKeyboard _rawKeyboard)
  KeyEventManager$Mate(
    /// requiredParameters: HardwareKeyboard _hardwareKeyboard
    HardwareKeyboard _hardwareKeyboard,

    /// requiredParameters: RawKeyboard _rawKeyboard
    RawKeyboard _rawKeyboard,
  ) : super(
          _hardwareKeyboard,
          _rawKeyboard,
        ) {
    mateCreateName = 'KeyEventManager';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => KeyEventManager$Mate(
          p.get('_hardwareKeyboard').value,
          p.get('_rawKeyboard').value,
        );
    mateUse('_hardwareKeyboard', _hardwareKeyboard);
    mateUse('_rawKeyboard', _rawKeyboard);
  }
}
