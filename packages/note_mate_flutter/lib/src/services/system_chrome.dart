// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/system_chrome.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'dart:ui' as _i3;

/// class ApplicationSwitcherDescription
class ApplicationSwitcherDescription$Mate
    extends _i1.ApplicationSwitcherDescription with _i2.Mate {
  /// ApplicationSwitcherDescription ApplicationSwitcherDescription({String? label, int? primaryColor})
  ApplicationSwitcherDescription$Mate({
    /// optionalParameters: {String? label} , default:none
    super.label,

    /// optionalParameters: {int? primaryColor} , default:none
    super.primaryColor,
  })  : mateParams = {
          'label': _i2.BuilderArg<String?>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'primaryColor': _i2.BuilderArg<int?>(
            name: 'primaryColor',
            init: primaryColor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ApplicationSwitcherDescription';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => ApplicationSwitcherDescription$Mate(
          label: p.get('label').build(),
          primaryColor: p.get('primaryColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SystemUiOverlayStyle
class SystemUiOverlayStyle$Mate extends _i1.SystemUiOverlayStyle with _i2.Mate {
  /// SystemUiOverlayStyle SystemUiOverlayStyle({Color? systemNavigationBarColor, Color? systemNavigationBarDividerColor, Brightness? systemNavigationBarIconBrightness, bool? systemNavigationBarContrastEnforced, Color? statusBarColor, Brightness? statusBarBrightness, Brightness? statusBarIconBrightness, bool? systemStatusBarContrastEnforced})
  SystemUiOverlayStyle$Mate({
    /// optionalParameters: {Color? systemNavigationBarColor} , default:none
    super.systemNavigationBarColor,

    /// optionalParameters: {Color? systemNavigationBarDividerColor} , default:none
    super.systemNavigationBarDividerColor,

    /// optionalParameters: {Brightness? systemNavigationBarIconBrightness} , default:none
    super.systemNavigationBarIconBrightness,

    /// optionalParameters: {bool? systemNavigationBarContrastEnforced} , default:none
    super.systemNavigationBarContrastEnforced,

    /// optionalParameters: {Color? statusBarColor} , default:none
    super.statusBarColor,

    /// optionalParameters: {Brightness? statusBarBrightness} , default:none
    super.statusBarBrightness,

    /// optionalParameters: {Brightness? statusBarIconBrightness} , default:none
    super.statusBarIconBrightness,

    /// optionalParameters: {bool? systemStatusBarContrastEnforced} , default:none
    super.systemStatusBarContrastEnforced,
  })  : mateParams = {
          'systemNavigationBarColor': _i2.BuilderArg<_i3.Color?>(
            name: 'systemNavigationBarColor',
            init: systemNavigationBarColor,
            isNamed: true,
          ),
          'systemNavigationBarDividerColor': _i2.BuilderArg<_i3.Color?>(
            name: 'systemNavigationBarDividerColor',
            init: systemNavigationBarDividerColor,
            isNamed: true,
          ),
          'systemNavigationBarIconBrightness': _i2.BuilderArg<_i3.Brightness?>(
            name: 'systemNavigationBarIconBrightness',
            init: systemNavigationBarIconBrightness,
            isNamed: true,
          ),
          'systemNavigationBarContrastEnforced': _i2.BuilderArg<bool?>(
            name: 'systemNavigationBarContrastEnforced',
            init: systemNavigationBarContrastEnforced,
            isNamed: true,
          ),
          'statusBarColor': _i2.BuilderArg<_i3.Color?>(
            name: 'statusBarColor',
            init: statusBarColor,
            isNamed: true,
          ),
          'statusBarBrightness': _i2.BuilderArg<_i3.Brightness?>(
            name: 'statusBarBrightness',
            init: statusBarBrightness,
            isNamed: true,
          ),
          'statusBarIconBrightness': _i2.BuilderArg<_i3.Brightness?>(
            name: 'statusBarIconBrightness',
            init: statusBarIconBrightness,
            isNamed: true,
          ),
          'systemStatusBarContrastEnforced': _i2.BuilderArg<bool?>(
            name: 'systemStatusBarContrastEnforced',
            init: systemStatusBarContrastEnforced,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SystemUiOverlayStyle';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => SystemUiOverlayStyle$Mate(
          systemNavigationBarColor: p.get('systemNavigationBarColor').build(),
          systemNavigationBarDividerColor:
              p.get('systemNavigationBarDividerColor').build(),
          systemNavigationBarIconBrightness:
              p.get('systemNavigationBarIconBrightness').build(),
          systemNavigationBarContrastEnforced:
              p.get('systemNavigationBarContrastEnforced').build(),
          statusBarColor: p.get('statusBarColor').build(),
          statusBarBrightness: p.get('statusBarBrightness').build(),
          statusBarIconBrightness: p.get('statusBarIconBrightness').build(),
          systemStatusBarContrastEnforced:
              p.get('systemStatusBarContrastEnforced').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
