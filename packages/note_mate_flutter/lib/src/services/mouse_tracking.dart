// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/services/mouse_tracking.dart';import 'package:flutter/src/services/mouse_cursor.dart';import 'dart:core';import 'package:note/mate.dart' show Mate;/// class MouseTrackerAnnotation with Diagnosticable
class MouseTrackerAnnotation$Mate extends MouseTrackerAnnotation with Mate {/// MouseTrackerAnnotation MouseTrackerAnnotation({void Function(PointerEnterEvent)? onEnter, void Function(PointerExitEvent)? onExit, MouseCursor cursor = MouseCursor.defer, bool validForMouseTracker = true})
MouseTrackerAnnotation$Mate({/// optionalParameters: {void Function(PointerEnterEvent)? onEnter} , hasDefaultValue:false, defaultValueCode:null
PointerEnterEventListener? onEnter, /// optionalParameters: {void Function(PointerExitEvent)? onExit} , hasDefaultValue:false, defaultValueCode:null
PointerExitEventListener? onExit, /// optionalParameters: {MouseCursor cursor = MouseCursor.defer} , hasDefaultValue:true, defaultValueCode:MouseCursor.defer
required MouseCursor cursor, /// optionalParameters: {bool validForMouseTracker = true} , hasDefaultValue:true, defaultValueCode:true
required bool validForMouseTracker, }) : super(onEnter: onEnter, onExit: onExit, cursor: cursor, validForMouseTracker: validForMouseTracker, ) { mateBuilder = (p) => MouseTrackerAnnotation$Mate(onEnter: p.get('onEnter').build(), onExit: p.get('onExit').build(), cursor: p.get('cursor').build(), validForMouseTracker: p.get('validForMouseTracker').build(), );
matePut('onEnter', onEnter);
matePut('onExit', onExit);
matePut('cursor', cursor);
matePut('validForMouseTracker', validForMouseTracker); }

 }
