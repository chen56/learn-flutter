// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/platform_channel.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/services/message_codec.dart' as _i3;
import 'package:flutter/src/services/binary_messenger.dart' as _i4;
export '_background_isolate_binary_messenger_io.dart';

/// class BasicMessageChannel<T>
class BasicMessageChannel$Mate<T> extends _i1.BasicMessageChannel<T> with _i2.Mate {
  /// BasicMessageChannel<T> BasicMessageChannel(String name, MessageCodec<T> codec, {BinaryMessenger? binaryMessenger})
  BasicMessageChannel$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: MessageCodec<T> codec
    super.codec, {
    /// optionalParameters: {BinaryMessenger? binaryMessenger} , default:none
    super.binaryMessenger,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'codec': _i2.BuilderArg<_i3.MessageCodec<T>>(
            name: 'codec',
            init: codec,
            isNamed: false,
          ),
          'binaryMessenger': _i2.BuilderArg<_i4.BinaryMessenger?>(
            name: 'binaryMessenger',
            init: binaryMessenger,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'BasicMessageChannel';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => BasicMessageChannel$Mate<T>(
          p.get('name').value,
          p.get('codec').value,
          binaryMessenger: p.get('binaryMessenger').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class MethodChannel
class MethodChannel$Mate extends _i1.MethodChannel with _i2.Mate {
  /// MethodChannel MethodChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  MethodChannel$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: [MethodCodec codec = const StandardMethodCodec()]
    super.codec,

    /// requiredParameters: [BinaryMessenger? binaryMessenger]
    super.binaryMessenger,
  )   : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'codec': _i2.BuilderArg<_i3.MethodCodec>(
            name: 'codec',
            init: codec,
            isNamed: false,
          ),
          'binaryMessenger': _i2.BuilderArg<_i4.BinaryMessenger?>(
            name: 'binaryMessenger',
            init: binaryMessenger,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'MethodChannel';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => MethodChannel$Mate(
          p.get('name').value,
          p.get('codec').value,
          p.get('binaryMessenger').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class OptionalMethodChannel extends MethodChannel
class OptionalMethodChannel$Mate extends _i1.OptionalMethodChannel with _i2.Mate {
  /// OptionalMethodChannel OptionalMethodChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  OptionalMethodChannel$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: [MethodCodec codec = const StandardMethodCodec()]
    super.codec,

    /// requiredParameters: [BinaryMessenger? binaryMessenger]
    super.binaryMessenger,
  )   : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'codec': _i2.BuilderArg<_i3.MethodCodec>(
            name: 'codec',
            init: codec,
            isNamed: false,
          ),
          'binaryMessenger': _i2.BuilderArg<_i4.BinaryMessenger?>(
            name: 'binaryMessenger',
            init: binaryMessenger,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'OptionalMethodChannel';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => OptionalMethodChannel$Mate(
          p.get('name').value,
          p.get('codec').value,
          p.get('binaryMessenger').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class EventChannel
class EventChannel$Mate extends _i1.EventChannel with _i2.Mate {
  /// EventChannel EventChannel(String name, [MethodCodec codec = const StandardMethodCodec(), BinaryMessenger? binaryMessenger])
  EventChannel$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: [MethodCodec codec = const StandardMethodCodec()]
    super.codec,

    /// requiredParameters: [BinaryMessenger? binaryMessenger]
    super.binaryMessenger,
  )   : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'codec': _i2.BuilderArg<_i3.MethodCodec>(
            name: 'codec',
            init: codec,
            isNamed: false,
          ),
          'binaryMessenger': _i2.BuilderArg<_i4.BinaryMessenger?>(
            name: 'binaryMessenger',
            init: binaryMessenger,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'EventChannel';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => EventChannel$Mate(
          p.get('name').value,
          p.get('codec').value,
          p.get('binaryMessenger').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
