// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/raw_keyboard_linux.dart';
import 'package:note/mate.dart';
import 'dart:core';

/// class RawKeyEventDataLinux extends RawKeyEventData
class RawKeyEventDataLinux$Mate extends RawKeyEventDataLinux with Mate {
  /// RawKeyEventDataLinux RawKeyEventDataLinux({required KeyHelper keyHelper, int unicodeScalarValues = 0, int scanCode = 0, int keyCode = 0, int modifiers = 0, required bool isDown, int? specifiedLogicalKey})
  RawKeyEventDataLinux$Mate({
    /// optionalParameters: {required KeyHelper keyHelper} , default:none
    required KeyHelper keyHelper,

    /// optionalParameters: {int unicodeScalarValues = 0} , default:processed=IntegerLiteralImpl
    int unicodeScalarValues = 0,

    /// optionalParameters: {int scanCode = 0} , default:processed=IntegerLiteralImpl
    int scanCode = 0,

    /// optionalParameters: {int keyCode = 0} , default:processed=IntegerLiteralImpl
    int keyCode = 0,

    /// optionalParameters: {int modifiers = 0} , default:processed=IntegerLiteralImpl
    int modifiers = 0,

    /// optionalParameters: {required bool isDown} , default:none
    required bool isDown,

    /// optionalParameters: {int? specifiedLogicalKey} , default:none
    int? specifiedLogicalKey,
  }) : super(
          keyHelper: keyHelper,
          unicodeScalarValues: unicodeScalarValues,
          scanCode: scanCode,
          keyCode: keyCode,
          modifiers: modifiers,
          isDown: isDown,
          specifiedLogicalKey: specifiedLogicalKey,
        ) {
    mateBuilderName = 'RawKeyEventDataLinux';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => RawKeyEventDataLinux$Mate(
          keyHelper: p.get('keyHelper').build(),
          unicodeScalarValues: p.get('unicodeScalarValues').build(),
          scanCode: p.get('scanCode').build(),
          keyCode: p.get('keyCode').build(),
          modifiers: p.get('modifiers').build(),
          isDown: p.get('isDown').build(),
          specifiedLogicalKey: p.get('specifiedLogicalKey').build(),
        );
    mateUse(
      'keyHelper',
      keyHelper,
      isNamed: true,
    );
    mateUse(
      'unicodeScalarValues',
      unicodeScalarValues,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'scanCode',
      scanCode,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'keyCode',
      keyCode,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'modifiers',
      modifiers,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'isDown',
      isDown,
      isNamed: true,
    );
    mateUse(
      'specifiedLogicalKey',
      specifiedLogicalKey,
      isNamed: true,
    );
  }
}
