// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/services/raw_keyboard_linux.dart';import 'dart:core';import 'package:note/mate.dart' show Mate;/// class RawKeyEventDataLinux extends RawKeyEventData
class RawKeyEventDataLinux$Mate extends RawKeyEventDataLinux with Mate {/// RawKeyEventDataLinux RawKeyEventDataLinux({required KeyHelper keyHelper, int unicodeScalarValues = 0, int scanCode = 0, int keyCode = 0, int modifiers = 0, required bool isDown, int? specifiedLogicalKey})
RawKeyEventDataLinux$Mate({/// optionalParameters: {required KeyHelper keyHelper} , hasDefaultValue:false, defaultValueCode:null
required KeyHelper keyHelper, /// optionalParameters: {int unicodeScalarValues = 0} , hasDefaultValue:true, defaultValueCode:0
required int unicodeScalarValues, /// optionalParameters: {int scanCode = 0} , hasDefaultValue:true, defaultValueCode:0
required int scanCode, /// optionalParameters: {int keyCode = 0} , hasDefaultValue:true, defaultValueCode:0
required int keyCode, /// optionalParameters: {int modifiers = 0} , hasDefaultValue:true, defaultValueCode:0
required int modifiers, /// optionalParameters: {required bool isDown} , hasDefaultValue:false, defaultValueCode:null
required bool isDown, /// optionalParameters: {int? specifiedLogicalKey} , hasDefaultValue:false, defaultValueCode:null
int? specifiedLogicalKey, }) : super(keyHelper: keyHelper, unicodeScalarValues: unicodeScalarValues, scanCode: scanCode, keyCode: keyCode, modifiers: modifiers, isDown: isDown, specifiedLogicalKey: specifiedLogicalKey, ) { mateBuilder = (p) => RawKeyEventDataLinux$Mate(keyHelper: p.get('keyHelper').build(), unicodeScalarValues: p.get('unicodeScalarValues').build(), scanCode: p.get('scanCode').build(), keyCode: p.get('keyCode').build(), modifiers: p.get('modifiers').build(), isDown: p.get('isDown').build(), specifiedLogicalKey: p.get('specifiedLogicalKey').build(), );
matePut('keyHelper', keyHelper);
matePut('unicodeScalarValues', unicodeScalarValues);
matePut('scanCode', scanCode);
matePut('keyCode', keyCode);
matePut('modifiers', modifiers);
matePut('isDown', isDown);
matePut('specifiedLogicalKey', specifiedLogicalKey); }

 }
