// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/banner.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/painting/text_style.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/src/painting/edge_insets.dart' as _i7;
import 'package:flutter/src/widgets/overflow_bar.dart' as _i8;
import 'package:flutter/cupertino.dart' as _i9;
import 'package:flutter/src/animation/animation.dart' as _i10;

/// class MaterialBanner extends StatefulWidget
class MaterialBanner$Mate extends _i1.MaterialBanner with _i2.Mate {
  /// MaterialBanner MaterialBanner({Key? key, required Widget content, TextStyle? contentTextStyle, required List<Widget> actions, double? elevation, Widget? leading, Color? backgroundColor, Color? surfaceTintColor, Color? shadowColor, Color? dividerColor, EdgeInsetsGeometry? padding, EdgeInsetsGeometry? margin, EdgeInsetsGeometry? leadingPadding, bool forceActionsBelow = false, OverflowBarAlignment overflowAlignment = OverflowBarAlignment.end, Animation<double>? animation, void Function()? onVisible})
  MaterialBanner$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget content} , default:none
    required _i4.Widget content,

    /// optionalParameters: {TextStyle? contentTextStyle} , default:none
    _i5.TextStyle? contentTextStyle,

    /// optionalParameters: {required List<Widget> actions} , default:none
    required List<_i4.Widget> actions,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {Widget? leading} , default:none
    _i4.Widget? leading,

    /// optionalParameters: {Color? backgroundColor} , default:none
    _i6.Color? backgroundColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    _i6.Color? surfaceTintColor,

    /// optionalParameters: {Color? shadowColor} , default:none
    _i6.Color? shadowColor,

    /// optionalParameters: {Color? dividerColor} , default:none
    _i6.Color? dividerColor,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i7.EdgeInsetsGeometry? padding,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , default:none
    _i7.EdgeInsetsGeometry? margin,

    /// optionalParameters: {EdgeInsetsGeometry? leadingPadding} , default:none
    _i7.EdgeInsetsGeometry? leadingPadding,

    /// optionalParameters: {bool forceActionsBelow = false} , default:processed=BooleanLiteralImpl
    bool forceActionsBelow = false,

    /// optionalParameters: {OverflowBarAlignment overflowAlignment = OverflowBarAlignment.end} , default:processed=PrefixedIdentifierImpl
    _i8.OverflowBarAlignment overflowAlignment = _i9.OverflowBarAlignment.end,

    /// optionalParameters: {Animation<double>? animation} , default:none
    _i10.Animation<double>? animation,

    /// optionalParameters: {void Function()? onVisible} , default:none
    _i6.VoidCallback? onVisible,
  }) : super(
          key: key,
          content: content,
          contentTextStyle: contentTextStyle,
          actions: actions,
          elevation: elevation,
          leading: leading,
          backgroundColor: backgroundColor,
          surfaceTintColor: surfaceTintColor,
          shadowColor: shadowColor,
          dividerColor: dividerColor,
          padding: padding,
          margin: margin,
          leadingPadding: leadingPadding,
          forceActionsBelow: forceActionsBelow,
          overflowAlignment: overflowAlignment,
          animation: animation,
          onVisible: onVisible,
        ) {
    mateBuilderName = 'MaterialBanner';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MaterialBanner$Mate(
          key: p.get('key').build(),
          content: p.get('content').build(),
          contentTextStyle: p.get('contentTextStyle').build(),
          actions: p.get('actions').build(),
          elevation: p.get('elevation').build(),
          leading: p.get('leading').build(),
          backgroundColor: p.get('backgroundColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          shadowColor: p.get('shadowColor').build(),
          dividerColor: p.get('dividerColor').build(),
          padding: p.get('padding').build(),
          margin: p.get('margin').build(),
          leadingPadding: p.get('leadingPadding').build(),
          forceActionsBelow: p.get('forceActionsBelow').build(),
          overflowAlignment: p.get('overflowAlignment').build(),
          animation: p.get('animation').build(),
          onVisible: p.get('onVisible').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'content',
      content,
      isNamed: true,
    );
    mateUse(
      'contentTextStyle',
      contentTextStyle,
      isNamed: true,
    );
    mateUse(
      'actions',
      actions,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'leading',
      leading,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'surfaceTintColor',
      surfaceTintColor,
      isNamed: true,
    );
    mateUse(
      'shadowColor',
      shadowColor,
      isNamed: true,
    );
    mateUse(
      'dividerColor',
      dividerColor,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'margin',
      margin,
      isNamed: true,
    );
    mateUse(
      'leadingPadding',
      leadingPadding,
      isNamed: true,
    );
    mateUse(
      'forceActionsBelow',
      forceActionsBelow,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'overflowAlignment',
      overflowAlignment,
      isNamed: true,
      defaultValue: _i9.OverflowBarAlignment.end,
    );
    mateUse(
      'animation',
      animation,
      isNamed: true,
    );
    mateUse(
      'onVisible',
      onVisible,
      isNamed: true,
    );
  }
}
