// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/ink_sparkle.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/rendering/box.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';

/// class InkSparkle extends InteractiveInkFeature
class InkSparkle$Mate extends InkSparkle with Mate<InkSparkle$Mate> {
  /// InkSparkle InkSparkle({required MaterialInkController controller, required RenderBox referenceBox, required Color color, required Offset position, required TextDirection textDirection, bool containedInkWell = true, Rect Function()? rectCallback, BorderRadius? borderRadius, ShapeBorder? customBorder, double? radius, void Function()? onRemoved, double? turbulenceSeed})
  InkSparkle$Mate({
    /// optionalParameters: {required MaterialInkController controller} , hasDefaultValue:false, defaultValueCode:null
    required MaterialInkController controller,

    /// optionalParameters: {required RenderBox referenceBox} , hasDefaultValue:false, defaultValueCode:null
    required RenderBox referenceBox,

    /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
    required Color color,

    /// optionalParameters: {required Offset position} , hasDefaultValue:false, defaultValueCode:null
    required Offset position,

    /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
    required TextDirection textDirection,

    /// optionalParameters: {bool containedInkWell = true} , hasDefaultValue:true, defaultValueCode:true
    required bool containedInkWell,

    /// optionalParameters: {Rect Function()? rectCallback} , hasDefaultValue:false, defaultValueCode:null
    RectCallback? rectCallback,

    /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
    BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? customBorder,

    /// optionalParameters: {double? radius} , hasDefaultValue:false, defaultValueCode:null
    double? radius,

    /// optionalParameters: {void Function()? onRemoved} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onRemoved,

    /// optionalParameters: {double? turbulenceSeed} , hasDefaultValue:false, defaultValueCode:null
    double? turbulenceSeed,
  }) : super(
          controller: controller,
          referenceBox: referenceBox,
          color: color,
          position: position,
          textDirection: textDirection,
          containedInkWell: containedInkWell,
          rectCallback: rectCallback,
          borderRadius: borderRadius,
          customBorder: customBorder,
          radius: radius,
          onRemoved: onRemoved,
          turbulenceSeed: turbulenceSeed,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InkSparkle$Mate(
        controller: p.get('controller').build(),
        referenceBox: p.get('referenceBox').build(),
        color: p.get('color').build(),
        position: p.get('position').build(),
        textDirection: p.get('textDirection').build(),
        containedInkWell: p.get('containedInkWell').build(),
        rectCallback: p.get('rectCallback').build(),
        borderRadius: p.get('borderRadius').build(),
        customBorder: p.get('customBorder').build(),
        radius: p.get('radius').build(),
        onRemoved: p.get('onRemoved').build(),
        turbulenceSeed: p.get('turbulenceSeed').build(),
      ),
    );
    mateParams.put('controller', controller);
    mateParams.put('referenceBox', referenceBox);
    mateParams.put('color', color);
    mateParams.put('position', position);
    mateParams.put('textDirection', textDirection);
    mateParams.put('containedInkWell', containedInkWell);
    mateParams.put('rectCallback', rectCallback);
    mateParams.put('borderRadius', borderRadius);
    mateParams.put('customBorder', customBorder);
    mateParams.put('radius', radius);
    mateParams.put('onRemoved', onRemoved);
    mateParams.put('turbulenceSeed', turbulenceSeed);
  }
}
