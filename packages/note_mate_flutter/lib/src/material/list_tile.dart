// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class ListTile extends StatelessWidget
class ListTile$Mate extends ListTile with Mate<ListTile$Mate> {
  /// ListTile ListTile({Key? key, Widget? leading, Widget? title, Widget? subtitle, Widget? trailing, bool isThreeLine = false, bool? dense, VisualDensity? visualDensity, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, bool enabled = true, void Function()? onTap, void Function()? onLongPress, void Function(bool)? onFocusChange, MouseCursor? mouseCursor, bool selected = false, Color? focusColor, Color? hoverColor, Color? splashColor, FocusNode? focusNode, bool autofocus = false, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, ListTileTitleAlignment? titleAlignment})
  ListTile$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? title} , hasDefaultValue:false, defaultValueCode:null
    Widget? title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {bool isThreeLine = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isThreeLine,

    /// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
    bool? dense,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , hasDefaultValue:false, defaultValueCode:null
    ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {TextStyle? titleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? titleTextStyle,

    /// optionalParameters: {TextStyle? subtitleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? subtitleTextStyle,

    /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? leadingAndTrailingTextStyle,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool selected = false} , hasDefaultValue:true, defaultValueCode:false
    required bool selected,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedTileColor,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {double? horizontalTitleGap} , hasDefaultValue:false, defaultValueCode:null
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , hasDefaultValue:false, defaultValueCode:null
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minLeadingWidth,

    /// optionalParameters: {ListTileTitleAlignment? titleAlignment} , hasDefaultValue:false, defaultValueCode:null
    ListTileTitleAlignment? titleAlignment,
  }) : super(
          key: key,
          leading: leading,
          title: title,
          subtitle: subtitle,
          trailing: trailing,
          isThreeLine: isThreeLine,
          dense: dense,
          visualDensity: visualDensity,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          titleTextStyle: titleTextStyle,
          subtitleTextStyle: subtitleTextStyle,
          leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
          contentPadding: contentPadding,
          enabled: enabled,
          onTap: onTap,
          onLongPress: onLongPress,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          selected: selected,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          focusNode: focusNode,
          autofocus: autofocus,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          enableFeedback: enableFeedback,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          titleAlignment: titleAlignment,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListTile$Mate(
        key: p.get('key').build(),
        leading: p.get('leading').build(),
        title: p.get('title').build(),
        subtitle: p.get('subtitle').build(),
        trailing: p.get('trailing').build(),
        isThreeLine: p.get('isThreeLine').build(),
        dense: p.get('dense').build(),
        visualDensity: p.get('visualDensity').build(),
        shape: p.get('shape').build(),
        style: p.get('style').build(),
        selectedColor: p.get('selectedColor').build(),
        iconColor: p.get('iconColor').build(),
        textColor: p.get('textColor').build(),
        titleTextStyle: p.get('titleTextStyle').build(),
        subtitleTextStyle: p.get('subtitleTextStyle').build(),
        leadingAndTrailingTextStyle: p.get('leadingAndTrailingTextStyle').build(),
        contentPadding: p.get('contentPadding').build(),
        enabled: p.get('enabled').build(),
        onTap: p.get('onTap').build(),
        onLongPress: p.get('onLongPress').build(),
        onFocusChange: p.get('onFocusChange').build(),
        mouseCursor: p.get('mouseCursor').build(),
        selected: p.get('selected').build(),
        focusColor: p.get('focusColor').build(),
        hoverColor: p.get('hoverColor').build(),
        splashColor: p.get('splashColor').build(),
        focusNode: p.get('focusNode').build(),
        autofocus: p.get('autofocus').build(),
        tileColor: p.get('tileColor').build(),
        selectedTileColor: p.get('selectedTileColor').build(),
        enableFeedback: p.get('enableFeedback').build(),
        horizontalTitleGap: p.get('horizontalTitleGap').build(),
        minVerticalPadding: p.get('minVerticalPadding').build(),
        minLeadingWidth: p.get('minLeadingWidth').build(),
        titleAlignment: p.get('titleAlignment').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('leading', leading);
    mateParams.put('title', title);
    mateParams.put('subtitle', subtitle);
    mateParams.put('trailing', trailing);
    mateParams.put('isThreeLine', isThreeLine);
    mateParams.put('dense', dense);
    mateParams.put('visualDensity', visualDensity);
    mateParams.put('shape', shape);
    mateParams.put('style', style);
    mateParams.put('selectedColor', selectedColor);
    mateParams.put('iconColor', iconColor);
    mateParams.put('textColor', textColor);
    mateParams.put('titleTextStyle', titleTextStyle);
    mateParams.put('subtitleTextStyle', subtitleTextStyle);
    mateParams.put('leadingAndTrailingTextStyle', leadingAndTrailingTextStyle);
    mateParams.put('contentPadding', contentPadding);
    mateParams.put('enabled', enabled);
    mateParams.put('onTap', onTap);
    mateParams.put('onLongPress', onLongPress);
    mateParams.put('onFocusChange', onFocusChange);
    mateParams.put('mouseCursor', mouseCursor);
    mateParams.put('selected', selected);
    mateParams.put('focusColor', focusColor);
    mateParams.put('hoverColor', hoverColor);
    mateParams.put('splashColor', splashColor);
    mateParams.put('focusNode', focusNode);
    mateParams.put('autofocus', autofocus);
    mateParams.put('tileColor', tileColor);
    mateParams.put('selectedTileColor', selectedTileColor);
    mateParams.put('enableFeedback', enableFeedback);
    mateParams.put('horizontalTitleGap', horizontalTitleGap);
    mateParams.put('minVerticalPadding', minVerticalPadding);
    mateParams.put('minLeadingWidth', minLeadingWidth);
    mateParams.put('titleAlignment', titleAlignment);
  }
}
