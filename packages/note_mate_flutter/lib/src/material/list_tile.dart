// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/list_tile.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class ListTile extends StatelessWidget
class ListTile$Mate extends ListTile with Mate {
  /// ListTile ListTile({Key? key, Widget? leading, Widget? title, Widget? subtitle, Widget? trailing, bool isThreeLine = false, bool? dense, VisualDensity? visualDensity, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, bool enabled = true, void Function()? onTap, void Function()? onLongPress, void Function(bool)? onFocusChange, MouseCursor? mouseCursor, bool selected = false, Color? focusColor, Color? hoverColor, Color? splashColor, FocusNode? focusNode, bool autofocus = false, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, ListTileTitleAlignment? titleAlignment})
  ListTile$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? leading} , defaultValue:none
    Widget? leading,

    /// optionalParameters: {Widget? title} , defaultValue:none
    Widget? title,

    /// optionalParameters: {Widget? subtitle} , defaultValue:none
    Widget? subtitle,

    /// optionalParameters: {Widget? trailing} , defaultValue:none
    Widget? trailing,

    /// optionalParameters: {bool isThreeLine = false} , defaultValue:Literal
    bool isThreeLine = false,

    /// optionalParameters: {bool? dense} , defaultValue:none
    bool? dense,

    /// optionalParameters: {VisualDensity? visualDensity} , defaultValue:none
    VisualDensity? visualDensity,

    /// optionalParameters: {ShapeBorder? shape} , defaultValue:none
    ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , defaultValue:none
    ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , defaultValue:none
    Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , defaultValue:none
    Color? iconColor,

    /// optionalParameters: {Color? textColor} , defaultValue:none
    Color? textColor,

    /// optionalParameters: {TextStyle? titleTextStyle} , defaultValue:none
    TextStyle? titleTextStyle,

    /// optionalParameters: {TextStyle? subtitleTextStyle} , defaultValue:none
    TextStyle? subtitleTextStyle,

    /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , defaultValue:none
    TextStyle? leadingAndTrailingTextStyle,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , defaultValue:none
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {bool enabled = true} , defaultValue:Literal
    bool enabled = true,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onFocusChange} , defaultValue:none
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool selected = false} , defaultValue:Literal
    bool selected = false,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , defaultValue:none
    Color? splashColor,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {Color? tileColor} , defaultValue:none
    Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , defaultValue:none
    Color? selectedTileColor,

    /// optionalParameters: {bool? enableFeedback} , defaultValue:none
    bool? enableFeedback,

    /// optionalParameters: {double? horizontalTitleGap} , defaultValue:none
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , defaultValue:none
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , defaultValue:none
    double? minLeadingWidth,

    /// optionalParameters: {ListTileTitleAlignment? titleAlignment} , defaultValue:none
    ListTileTitleAlignment? titleAlignment,
  }) : super(
          key: key,
          leading: leading,
          title: title,
          subtitle: subtitle,
          trailing: trailing,
          isThreeLine: isThreeLine,
          dense: dense,
          visualDensity: visualDensity,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          titleTextStyle: titleTextStyle,
          subtitleTextStyle: subtitleTextStyle,
          leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
          contentPadding: contentPadding,
          enabled: enabled,
          onTap: onTap,
          onLongPress: onLongPress,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          selected: selected,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          focusNode: focusNode,
          autofocus: autofocus,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          enableFeedback: enableFeedback,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          titleAlignment: titleAlignment,
        ) {
    mateBuilder = (p) => ListTile$Mate(
          key: p.get('key').build(),
          leading: p.get('leading').build(),
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          trailing: p.get('trailing').build(),
          isThreeLine: p.get('isThreeLine').build(),
          dense: p.get('dense').build(),
          visualDensity: p.get('visualDensity').build(),
          shape: p.get('shape').build(),
          style: p.get('style').build(),
          selectedColor: p.get('selectedColor').build(),
          iconColor: p.get('iconColor').build(),
          textColor: p.get('textColor').build(),
          titleTextStyle: p.get('titleTextStyle').build(),
          subtitleTextStyle: p.get('subtitleTextStyle').build(),
          leadingAndTrailingTextStyle: p.get('leadingAndTrailingTextStyle').build(),
          contentPadding: p.get('contentPadding').build(),
          enabled: p.get('enabled').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onFocusChange: p.get('onFocusChange').build(),
          mouseCursor: p.get('mouseCursor').build(),
          selected: p.get('selected').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          horizontalTitleGap: p.get('horizontalTitleGap').build(),
          minVerticalPadding: p.get('minVerticalPadding').build(),
          minLeadingWidth: p.get('minLeadingWidth').build(),
          titleAlignment: p.get('titleAlignment').build(),
        );
    mateDeclare('key', key);
    mateDeclare('leading', leading);
    mateDeclare('title', title);
    mateDeclare('subtitle', subtitle);
    mateDeclare('trailing', trailing);
    mateDeclare('isThreeLine', isThreeLine);
    mateDeclare('dense', dense);
    mateDeclare('visualDensity', visualDensity);
    mateDeclare('shape', shape);
    mateDeclare('style', style);
    mateDeclare('selectedColor', selectedColor);
    mateDeclare('iconColor', iconColor);
    mateDeclare('textColor', textColor);
    mateDeclare('titleTextStyle', titleTextStyle);
    mateDeclare('subtitleTextStyle', subtitleTextStyle);
    mateDeclare('leadingAndTrailingTextStyle', leadingAndTrailingTextStyle);
    mateDeclare('contentPadding', contentPadding);
    mateDeclare('enabled', enabled);
    mateDeclare('onTap', onTap);
    mateDeclare('onLongPress', onLongPress);
    mateDeclare('onFocusChange', onFocusChange);
    mateDeclare('mouseCursor', mouseCursor);
    mateDeclare('selected', selected);
    mateDeclare('focusColor', focusColor);
    mateDeclare('hoverColor', hoverColor);
    mateDeclare('splashColor', splashColor);
    mateDeclare('focusNode', focusNode);
    mateDeclare('autofocus', autofocus);
    mateDeclare('tileColor', tileColor);
    mateDeclare('selectedTileColor', selectedTileColor);
    mateDeclare('enableFeedback', enableFeedback);
    mateDeclare('horizontalTitleGap', horizontalTitleGap);
    mateDeclare('minVerticalPadding', minVerticalPadding);
    mateDeclare('minLeadingWidth', minLeadingWidth);
    mateDeclare('titleAlignment', titleAlignment);
  }
}
