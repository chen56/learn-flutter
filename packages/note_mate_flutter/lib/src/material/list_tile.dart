// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/list_tile.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/material/theme_data.dart' as _i5;
import 'package:flutter/src/painting/borders.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/painting/text_style.dart' as _i8;
import 'package:flutter/src/painting/edge_insets.dart' as _i9;
import 'package:flutter/src/gestures/tap.dart' as _i10;
import 'package:flutter/src/gestures/long_press.dart' as _i11;
import 'package:flutter/src/foundation/basic_types.dart' as _i12;
import 'package:flutter/src/services/mouse_cursor.dart' as _i13;
import 'package:flutter/src/widgets/focus_manager.dart' as _i14;

/// class ListTile extends StatelessWidget
class ListTile$Mate extends _i1.ListTile with _i2.Mate {
  /// ListTile ListTile({Key? key, Widget? leading, Widget? title, Widget? subtitle, Widget? trailing, bool isThreeLine = false, bool? dense, VisualDensity? visualDensity, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, bool enabled = true, void Function()? onTap, void Function()? onLongPress, void Function(bool)? onFocusChange, MouseCursor? mouseCursor, bool selected = false, Color? focusColor, Color? hoverColor, Color? splashColor, FocusNode? focusNode, bool autofocus = false, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, ListTileTitleAlignment? titleAlignment})
  ListTile$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? leading} , default:none
    _i4.Widget? leading,

    /// optionalParameters: {Widget? title} , default:none
    _i4.Widget? title,

    /// optionalParameters: {Widget? subtitle} , default:none
    _i4.Widget? subtitle,

    /// optionalParameters: {Widget? trailing} , default:none
    _i4.Widget? trailing,

    /// optionalParameters: {bool isThreeLine = false} , default:processed=BooleanLiteralImpl
    bool isThreeLine = false,

    /// optionalParameters: {bool? dense} , default:none
    bool? dense,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i5.VisualDensity? visualDensity,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    _i6.ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , default:none
    _i1.ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , default:none
    _i7.Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , default:none
    _i7.Color? iconColor,

    /// optionalParameters: {Color? textColor} , default:none
    _i7.Color? textColor,

    /// optionalParameters: {TextStyle? titleTextStyle} , default:none
    _i8.TextStyle? titleTextStyle,

    /// optionalParameters: {TextStyle? subtitleTextStyle} , default:none
    _i8.TextStyle? subtitleTextStyle,

    /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , default:none
    _i8.TextStyle? leadingAndTrailingTextStyle,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    _i9.EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i10.GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    _i11.GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i12.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i13.MouseCursor? mouseCursor,

    /// optionalParameters: {bool selected = false} , default:processed=BooleanLiteralImpl
    bool selected = false,

    /// optionalParameters: {Color? focusColor} , default:none
    _i7.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i7.Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i7.Color? splashColor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i14.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {Color? tileColor} , default:none
    _i7.Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , default:none
    _i7.Color? selectedTileColor,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {double? horizontalTitleGap} , default:none
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , default:none
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , default:none
    double? minLeadingWidth,

    /// optionalParameters: {ListTileTitleAlignment? titleAlignment} , default:none
    _i1.ListTileTitleAlignment? titleAlignment,
  }) : super(
          key: key,
          leading: leading,
          title: title,
          subtitle: subtitle,
          trailing: trailing,
          isThreeLine: isThreeLine,
          dense: dense,
          visualDensity: visualDensity,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          titleTextStyle: titleTextStyle,
          subtitleTextStyle: subtitleTextStyle,
          leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
          contentPadding: contentPadding,
          enabled: enabled,
          onTap: onTap,
          onLongPress: onLongPress,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          selected: selected,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          focusNode: focusNode,
          autofocus: autofocus,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          enableFeedback: enableFeedback,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          titleAlignment: titleAlignment,
        ) {
    mateBuilderName = 'ListTile';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ListTile$Mate(
          key: p.get('key').build(),
          leading: p.get('leading').build(),
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          trailing: p.get('trailing').build(),
          isThreeLine: p.get('isThreeLine').build(),
          dense: p.get('dense').build(),
          visualDensity: p.get('visualDensity').build(),
          shape: p.get('shape').build(),
          style: p.get('style').build(),
          selectedColor: p.get('selectedColor').build(),
          iconColor: p.get('iconColor').build(),
          textColor: p.get('textColor').build(),
          titleTextStyle: p.get('titleTextStyle').build(),
          subtitleTextStyle: p.get('subtitleTextStyle').build(),
          leadingAndTrailingTextStyle: p.get('leadingAndTrailingTextStyle').build(),
          contentPadding: p.get('contentPadding').build(),
          enabled: p.get('enabled').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onFocusChange: p.get('onFocusChange').build(),
          mouseCursor: p.get('mouseCursor').build(),
          selected: p.get('selected').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          horizontalTitleGap: p.get('horizontalTitleGap').build(),
          minVerticalPadding: p.get('minVerticalPadding').build(),
          minLeadingWidth: p.get('minLeadingWidth').build(),
          titleAlignment: p.get('titleAlignment').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'leading',
      leading,
      isNamed: true,
    );
    mateUse(
      'title',
      title,
      isNamed: true,
    );
    mateUse(
      'subtitle',
      subtitle,
      isNamed: true,
    );
    mateUse(
      'trailing',
      trailing,
      isNamed: true,
    );
    mateUse(
      'isThreeLine',
      isThreeLine,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'dense',
      dense,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'selectedColor',
      selectedColor,
      isNamed: true,
    );
    mateUse(
      'iconColor',
      iconColor,
      isNamed: true,
    );
    mateUse(
      'textColor',
      textColor,
      isNamed: true,
    );
    mateUse(
      'titleTextStyle',
      titleTextStyle,
      isNamed: true,
    );
    mateUse(
      'subtitleTextStyle',
      subtitleTextStyle,
      isNamed: true,
    );
    mateUse(
      'leadingAndTrailingTextStyle',
      leadingAndTrailingTextStyle,
      isNamed: true,
    );
    mateUse(
      'contentPadding',
      contentPadding,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'onLongPress',
      onLongPress,
      isNamed: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'selected',
      selected,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'tileColor',
      tileColor,
      isNamed: true,
    );
    mateUse(
      'selectedTileColor',
      selectedTileColor,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'horizontalTitleGap',
      horizontalTitleGap,
      isNamed: true,
    );
    mateUse(
      'minVerticalPadding',
      minVerticalPadding,
      isNamed: true,
    );
    mateUse(
      'minLeadingWidth',
      minLeadingWidth,
      isNamed: true,
    );
    mateUse(
      'titleAlignment',
      titleAlignment,
      isNamed: true,
    );
  }
}
