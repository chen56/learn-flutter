// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/button_style.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/material/material_state.dart' as _i3;
import 'package:flutter/src/painting/text_style.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/edge_insets.dart' as _i6;
import 'package:flutter/src/painting/borders.dart' as _i7;
import 'package:flutter/src/services/mouse_cursor.dart' as _i8;
import 'package:flutter/src/material/theme_data.dart' as _i9;
import 'package:flutter/src/painting/alignment.dart' as _i10;
import 'package:flutter/src/material/ink_well.dart' as _i11;

/// class ButtonStyle with Diagnosticable
class ButtonStyle$Mate extends _i1.ButtonStyle with _i2.Mate {
  /// ButtonStyle ButtonStyle({MaterialStateProperty<TextStyle?>? textStyle, MaterialStateProperty<Color?>? backgroundColor, MaterialStateProperty<Color?>? foregroundColor, MaterialStateProperty<Color?>? overlayColor, MaterialStateProperty<Color?>? shadowColor, MaterialStateProperty<Color?>? surfaceTintColor, MaterialStateProperty<double?>? elevation, MaterialStateProperty<EdgeInsetsGeometry?>? padding, MaterialStateProperty<Size?>? minimumSize, MaterialStateProperty<Size?>? fixedSize, MaterialStateProperty<Size?>? maximumSize, MaterialStateProperty<Color?>? iconColor, MaterialStateProperty<double?>? iconSize, MaterialStateProperty<BorderSide?>? side, MaterialStateProperty<OutlinedBorder?>? shape, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity, MaterialTapTargetSize? tapTargetSize, Duration? animationDuration, bool? enableFeedback, AlignmentGeometry? alignment, InteractiveInkFeatureFactory? splashFactory})
  ButtonStyle$Mate({
    /// optionalParameters: {MaterialStateProperty<TextStyle?>? textStyle} , default:none
    _i3.MaterialStateProperty<_i4.TextStyle?>? textStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? backgroundColor} , default:none
    _i3.MaterialStateProperty<_i5.Color?>? backgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? foregroundColor} , default:none
    _i3.MaterialStateProperty<_i5.Color?>? foregroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    _i3.MaterialStateProperty<_i5.Color?>? overlayColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? shadowColor} , default:none
    _i3.MaterialStateProperty<_i5.Color?>? shadowColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? surfaceTintColor} , default:none
    _i3.MaterialStateProperty<_i5.Color?>? surfaceTintColor,

    /// optionalParameters: {MaterialStateProperty<double?>? elevation} , default:none
    _i3.MaterialStateProperty<double?>? elevation,

    /// optionalParameters: {MaterialStateProperty<EdgeInsetsGeometry?>? padding} , default:none
    _i3.MaterialStateProperty<_i6.EdgeInsetsGeometry?>? padding,

    /// optionalParameters: {MaterialStateProperty<Size?>? minimumSize} , default:none
    _i3.MaterialStateProperty<_i5.Size?>? minimumSize,

    /// optionalParameters: {MaterialStateProperty<Size?>? fixedSize} , default:none
    _i3.MaterialStateProperty<_i5.Size?>? fixedSize,

    /// optionalParameters: {MaterialStateProperty<Size?>? maximumSize} , default:none
    _i3.MaterialStateProperty<_i5.Size?>? maximumSize,

    /// optionalParameters: {MaterialStateProperty<Color?>? iconColor} , default:none
    _i3.MaterialStateProperty<_i5.Color?>? iconColor,

    /// optionalParameters: {MaterialStateProperty<double?>? iconSize} , default:none
    _i3.MaterialStateProperty<double?>? iconSize,

    /// optionalParameters: {MaterialStateProperty<BorderSide?>? side} , default:none
    _i3.MaterialStateProperty<_i7.BorderSide?>? side,

    /// optionalParameters: {MaterialStateProperty<OutlinedBorder?>? shape} , default:none
    _i3.MaterialStateProperty<_i7.OutlinedBorder?>? shape,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    _i3.MaterialStateProperty<_i8.MouseCursor?>? mouseCursor,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i9.VisualDensity? visualDensity,

    /// optionalParameters: {MaterialTapTargetSize? tapTargetSize} , default:none
    _i9.MaterialTapTargetSize? tapTargetSize,

    /// optionalParameters: {Duration? animationDuration} , default:none
    Duration? animationDuration,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    _i10.AlignmentGeometry? alignment,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , default:none
    _i11.InteractiveInkFeatureFactory? splashFactory,
  }) : super(
          textStyle: textStyle,
          backgroundColor: backgroundColor,
          foregroundColor: foregroundColor,
          overlayColor: overlayColor,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          elevation: elevation,
          padding: padding,
          minimumSize: minimumSize,
          fixedSize: fixedSize,
          maximumSize: maximumSize,
          iconColor: iconColor,
          iconSize: iconSize,
          side: side,
          shape: shape,
          mouseCursor: mouseCursor,
          visualDensity: visualDensity,
          tapTargetSize: tapTargetSize,
          animationDuration: animationDuration,
          enableFeedback: enableFeedback,
          alignment: alignment,
          splashFactory: splashFactory,
        ) {
    mateBuilderName = 'ButtonStyle';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonStyle$Mate(
          textStyle: p.get('textStyle').build(),
          backgroundColor: p.get('backgroundColor').build(),
          foregroundColor: p.get('foregroundColor').build(),
          overlayColor: p.get('overlayColor').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          elevation: p.get('elevation').build(),
          padding: p.get('padding').build(),
          minimumSize: p.get('minimumSize').build(),
          fixedSize: p.get('fixedSize').build(),
          maximumSize: p.get('maximumSize').build(),
          iconColor: p.get('iconColor').build(),
          iconSize: p.get('iconSize').build(),
          side: p.get('side').build(),
          shape: p.get('shape').build(),
          mouseCursor: p.get('mouseCursor').build(),
          visualDensity: p.get('visualDensity').build(),
          tapTargetSize: p.get('tapTargetSize').build(),
          animationDuration: p.get('animationDuration').build(),
          enableFeedback: p.get('enableFeedback').build(),
          alignment: p.get('alignment').build(),
          splashFactory: p.get('splashFactory').build(),
        );
    mateUse(
      'textStyle',
      textStyle,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'foregroundColor',
      foregroundColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'shadowColor',
      shadowColor,
      isNamed: true,
    );
    mateUse(
      'surfaceTintColor',
      surfaceTintColor,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'minimumSize',
      minimumSize,
      isNamed: true,
    );
    mateUse(
      'fixedSize',
      fixedSize,
      isNamed: true,
    );
    mateUse(
      'maximumSize',
      maximumSize,
      isNamed: true,
    );
    mateUse(
      'iconColor',
      iconColor,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
    );
    mateUse(
      'side',
      side,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'tapTargetSize',
      tapTargetSize,
      isNamed: true,
    );
    mateUse(
      'animationDuration',
      animationDuration,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'splashFactory',
      splashFactory,
      isNamed: true,
    );
  }
}
