// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/radio.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/foundation/basic_types.dart' as _i4;
import 'package:flutter/src/services/mouse_cursor.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/src/material/material_state.dart' as _i7;
import 'package:flutter/src/material/theme_data.dart' as _i8;
import 'package:flutter/src/widgets/focus_manager.dart' as _i9;

/// class Radio<T> extends StatefulWidget
class Radio$Mate<T> extends _i1.Radio<T> with _i2.Mate {
  /// Radio<T> Radio({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false})
  Radio$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required T value} , default:none
    required T value,

    /// optionalParameters: {required T? groupValue} , default:none
    required T? groupValue,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required _i4.ValueChanged<T?>? onChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i5.MouseCursor? mouseCursor,

    /// optionalParameters: {bool toggleable = false} , default:processed=BooleanLiteralImpl
    bool toggleable = false,

    /// optionalParameters: {Color? activeColor} , default:none
    _i6.Color? activeColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , default:none
    _i7.MaterialStateProperty<_i6.Color?>? fillColor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i6.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i6.Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    _i7.MaterialStateProperty<_i6.Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    _i8.MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i8.VisualDensity? visualDensity,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i9.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,
  }) : super(
          key: key,
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
          mouseCursor: mouseCursor,
          toggleable: toggleable,
          activeColor: activeColor,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          visualDensity: visualDensity,
          focusNode: focusNode,
          autofocus: autofocus,
        ) {
    mateBuilderName = 'Radio';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Radio$Mate<T>(
          key: p.get('key').build(),
          value: p.get('value').build(),
          groupValue: p.get('groupValue').build(),
          onChanged: p.get('onChanged').build(),
          mouseCursor: p.get('mouseCursor').build(),
          toggleable: p.get('toggleable').build(),
          activeColor: p.get('activeColor').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          visualDensity: p.get('visualDensity').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'groupValue',
      groupValue,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'toggleable',
      toggleable,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'activeColor',
      activeColor,
      isNamed: true,
    );
    mateUse(
      'fillColor',
      fillColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
  }

  /// Radio<T> Radio.adaptive({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false})
  Radio$Mate.adaptive({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required T value} , default:none
    required T value,

    /// optionalParameters: {required T? groupValue} , default:none
    required T? groupValue,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required _i4.ValueChanged<T?>? onChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i5.MouseCursor? mouseCursor,

    /// optionalParameters: {bool toggleable = false} , default:processed=BooleanLiteralImpl
    bool toggleable = false,

    /// optionalParameters: {Color? activeColor} , default:none
    _i6.Color? activeColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , default:none
    _i7.MaterialStateProperty<_i6.Color?>? fillColor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i6.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i6.Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    _i7.MaterialStateProperty<_i6.Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    _i8.MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i8.VisualDensity? visualDensity,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i9.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,
  }) : super.adaptive(
          key: key,
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
          mouseCursor: mouseCursor,
          toggleable: toggleable,
          activeColor: activeColor,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          visualDensity: visualDensity,
          focusNode: focusNode,
          autofocus: autofocus,
        ) {
    mateBuilderName = 'Radio.adaptive';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Radio$Mate<T>.adaptive(
          key: p.get('key').build(),
          value: p.get('value').build(),
          groupValue: p.get('groupValue').build(),
          onChanged: p.get('onChanged').build(),
          mouseCursor: p.get('mouseCursor').build(),
          toggleable: p.get('toggleable').build(),
          activeColor: p.get('activeColor').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          visualDensity: p.get('visualDensity').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'groupValue',
      groupValue,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'toggleable',
      toggleable,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'activeColor',
      activeColor,
      isNamed: true,
    );
    mateUse(
      'fillColor',
      fillColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
  }
}
