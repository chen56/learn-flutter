// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/radio.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/foundation/basic_types.dart';import 'package:flutter/src/services/mouse_cursor.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/material/material_state.dart';import 'package:flutter/src/material/theme_data.dart';import 'package:flutter/src/widgets/focus_manager.dart';import 'package:note/mate.dart' show Mate;/// class Radio<T> extends StatefulWidget
class Radio$Mate<T> extends Radio<T> with Mate {/// Radio<T> Radio({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false})
Radio$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required T value} , hasDefaultValue:false, defaultValueCode:null
required T value, /// optionalParameters: {required T? groupValue} , hasDefaultValue:false, defaultValueCode:null
required T? groupValue, /// optionalParameters: {required void Function(T?)? onChanged} , hasDefaultValue:false, defaultValueCode:null
required ValueChanged<T?>? onChanged, /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
MouseCursor? mouseCursor, /// optionalParameters: {bool toggleable = false} , hasDefaultValue:true, defaultValueCode:false
required bool toggleable, /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
Color? activeColor, /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? fillColor, /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
Color? focusColor, /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
Color? hoverColor, /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? overlayColor, /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
double? splashRadius, /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
MaterialTapTargetSize? materialTapTargetSize, /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
VisualDensity? visualDensity, /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
FocusNode? focusNode, /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
required bool autofocus, }) : super(key: key, value: value, groupValue: groupValue, onChanged: onChanged, mouseCursor: mouseCursor, toggleable: toggleable, activeColor: activeColor, fillColor: fillColor, focusColor: focusColor, hoverColor: hoverColor, overlayColor: overlayColor, splashRadius: splashRadius, materialTapTargetSize: materialTapTargetSize, visualDensity: visualDensity, focusNode: focusNode, autofocus: autofocus, ) { mateBuilder = (p) => Radio$Mate<T>(key: p.get('key').build(), value: p.get('value').build(), groupValue: p.get('groupValue').build(), onChanged: p.get('onChanged').build(), mouseCursor: p.get('mouseCursor').build(), toggleable: p.get('toggleable').build(), activeColor: p.get('activeColor').build(), fillColor: p.get('fillColor').build(), focusColor: p.get('focusColor').build(), hoverColor: p.get('hoverColor').build(), overlayColor: p.get('overlayColor').build(), splashRadius: p.get('splashRadius').build(), materialTapTargetSize: p.get('materialTapTargetSize').build(), visualDensity: p.get('visualDensity').build(), focusNode: p.get('focusNode').build(), autofocus: p.get('autofocus').build(), );
matePut('key', key);
matePut('value', value);
matePut('groupValue', groupValue);
matePut('onChanged', onChanged);
matePut('mouseCursor', mouseCursor);
matePut('toggleable', toggleable);
matePut('activeColor', activeColor);
matePut('fillColor', fillColor);
matePut('focusColor', focusColor);
matePut('hoverColor', hoverColor);
matePut('overlayColor', overlayColor);
matePut('splashRadius', splashRadius);
matePut('materialTapTargetSize', materialTapTargetSize);
matePut('visualDensity', visualDensity);
matePut('focusNode', focusNode);
matePut('autofocus', autofocus); }

 }
