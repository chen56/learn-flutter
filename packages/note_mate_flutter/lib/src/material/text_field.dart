// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/text_field.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:core';
import 'package:flutter/src/services/text_formatter.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/src/widgets/magnifier.dart';

/// class TextField extends StatefulWidget
class TextField$Mate extends TextField with Mate {
  /// TextField TextField({Key? key, TextEditingController? controller, FocusNode? focusNode, InputDecoration? decoration = const InputDecoration(), TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(String, Map<String, dynamic>)? onAppPrivateCommand, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, void Function()? onTap, void Function(PointerDownEvent)? onTapOutside, MouseCursor? mouseCursor, Widget? Function(BuildContext, {required int currentLength, required bool isFocused, required int? maxLength})? buildCounter, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, bool canRequestFocus = true, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})
  TextField$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {TextEditingController? controller} , defaultValue:none
    TextEditingController? controller,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {InputDecoration? decoration = const InputDecoration()} , defaultValue:unprocessed
    InputDecoration? decoration,

    /// optionalParameters: {TextInputType? keyboardType} , defaultValue:none
    TextInputType? keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , defaultValue:none
    TextInputAction? textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , defaultValue:unprocessed
    required TextCapitalization textCapitalization,

    /// optionalParameters: {TextStyle? style} , defaultValue:none
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , defaultValue:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , defaultValue:unprocessed
    required TextAlign textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , defaultValue:none
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {bool readOnly = false} , defaultValue:Literal
    bool readOnly = false,

    /// optionalParameters: {bool? showCursor} , defaultValue:none
    bool? showCursor,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {String obscuringCharacter = '•'} , defaultValue:Literal
    String obscuringCharacter = '•',

    /// optionalParameters: {bool obscureText = false} , defaultValue:Literal
    bool obscureText = false,

    /// optionalParameters: {bool autocorrect = true} , defaultValue:Literal
    bool autocorrect = true,

    /// optionalParameters: {SmartDashesType? smartDashesType} , defaultValue:none
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , defaultValue:none
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , defaultValue:Literal
    bool enableSuggestions = true,

    /// optionalParameters: {int? maxLines = 1} , defaultValue:Literal
    int? maxLines = 1,

    /// optionalParameters: {int? minLines} , defaultValue:none
    int? minLines,

    /// optionalParameters: {bool expands = false} , defaultValue:Literal
    bool expands = false,

    /// optionalParameters: {int? maxLength} , defaultValue:none
    int? maxLength,

    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , defaultValue:none
    MaxLengthEnforcement? maxLengthEnforcement,

    /// optionalParameters: {void Function(String)? onChanged} , defaultValue:none
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , defaultValue:none
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , defaultValue:none
    ValueChanged<String>? onSubmitted,

    /// optionalParameters: {void Function(String, Map<String, dynamic>)? onAppPrivateCommand} , defaultValue:none
    AppPrivateCommandCallback? onAppPrivateCommand,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , defaultValue:none
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {bool? enabled} , defaultValue:none
    bool? enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , defaultValue:Literal
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , defaultValue:none
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , defaultValue:none
    Radius? cursorRadius,

    /// optionalParameters: {Color? cursorColor} , defaultValue:none
    Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , defaultValue:unprocessed
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , defaultValue:unprocessed
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {Brightness? keyboardAppearance} , defaultValue:none
    Brightness? keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , defaultValue:unprocessed
    required EdgeInsets scrollPadding,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , defaultValue:none
    bool? enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , defaultValue:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , defaultValue:none
    TapRegionCallback? onTapOutside,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {Widget? Function(BuildContext, {required int currentLength, required bool isFocused, required int? maxLength})? buildCounter} , defaultValue:none
    InputCounterWidgetBuilder? buildCounter,

    /// optionalParameters: {ScrollController? scrollController} , defaultValue:none
    ScrollController? scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , defaultValue:none
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , defaultValue:unprocessed
    Iterable<String>? autofillHints,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , defaultValue:none
    ContentInsertionConfiguration? contentInsertionConfiguration,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {bool scribbleEnabled = true} , defaultValue:Literal
    bool scribbleEnabled = true,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , defaultValue:Literal
    bool enableIMEPersonalizedLearning = true,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , defaultValue:unprocessed
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {bool canRequestFocus = true} , defaultValue:Literal
    bool canRequestFocus = true,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , defaultValue:none
    SpellCheckConfiguration? spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , defaultValue:none
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super(
          key: key,
          controller: controller,
          focusNode: focusNode,
          decoration: decoration,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          textCapitalization: textCapitalization,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          textDirection: textDirection,
          readOnly: readOnly,
          showCursor: showCursor,
          autofocus: autofocus,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          maxLength: maxLength,
          maxLengthEnforcement: maxLengthEnforcement,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          onAppPrivateCommand: onAppPrivateCommand,
          inputFormatters: inputFormatters,
          enabled: enabled,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          keyboardAppearance: keyboardAppearance,
          scrollPadding: scrollPadding,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          onTapOutside: onTapOutside,
          mouseCursor: mouseCursor,
          buildCounter: buildCounter,
          scrollController: scrollController,
          scrollPhysics: scrollPhysics,
          autofillHints: autofillHints,
          contentInsertionConfiguration: contentInsertionConfiguration,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scribbleEnabled: scribbleEnabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          contextMenuBuilder: contextMenuBuilder,
          canRequestFocus: canRequestFocus,
          spellCheckConfiguration: spellCheckConfiguration,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilder = (p) => TextField$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          focusNode: p.get('focusNode').build(),
          decoration: p.get('decoration').build(),
          keyboardType: p.get('keyboardType').build(),
          textInputAction: p.get('textInputAction').build(),
          textCapitalization: p.get('textCapitalization').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          textDirection: p.get('textDirection').build(),
          readOnly: p.get('readOnly').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          maxLength: p.get('maxLength').build(),
          maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
          onChanged: p.get('onChanged').build(),
          onEditingComplete: p.get('onEditingComplete').build(),
          onSubmitted: p.get('onSubmitted').build(),
          onAppPrivateCommand: p.get('onAppPrivateCommand').build(),
          inputFormatters: p.get('inputFormatters').build(),
          enabled: p.get('enabled').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          scrollPadding: p.get('scrollPadding').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          onTapOutside: p.get('onTapOutside').build(),
          mouseCursor: p.get('mouseCursor').build(),
          buildCounter: p.get('buildCounter').build(),
          scrollController: p.get('scrollController').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          autofillHints: p.get('autofillHints').build(),
          contentInsertionConfiguration: p.get('contentInsertionConfiguration').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scribbleEnabled: p.get('scribbleEnabled').build(),
          enableIMEPersonalizedLearning: p.get('enableIMEPersonalizedLearning').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateDeclare('key', key);
    mateDeclare('controller', controller);
    mateDeclare('focusNode', focusNode);
    mateDeclare('decoration', decoration);
    mateDeclare('keyboardType', keyboardType);
    mateDeclare('textInputAction', textInputAction);
    mateDeclare('textCapitalization', textCapitalization);
    mateDeclare('style', style);
    mateDeclare('strutStyle', strutStyle);
    mateDeclare('textAlign', textAlign);
    mateDeclare('textAlignVertical', textAlignVertical);
    mateDeclare('textDirection', textDirection);
    mateDeclare('readOnly', readOnly);
    mateDeclare('showCursor', showCursor);
    mateDeclare('autofocus', autofocus);
    mateDeclare('obscuringCharacter', obscuringCharacter);
    mateDeclare('obscureText', obscureText);
    mateDeclare('autocorrect', autocorrect);
    mateDeclare('smartDashesType', smartDashesType);
    mateDeclare('smartQuotesType', smartQuotesType);
    mateDeclare('enableSuggestions', enableSuggestions);
    mateDeclare('maxLines', maxLines);
    mateDeclare('minLines', minLines);
    mateDeclare('expands', expands);
    mateDeclare('maxLength', maxLength);
    mateDeclare('maxLengthEnforcement', maxLengthEnforcement);
    mateDeclare('onChanged', onChanged);
    mateDeclare('onEditingComplete', onEditingComplete);
    mateDeclare('onSubmitted', onSubmitted);
    mateDeclare('onAppPrivateCommand', onAppPrivateCommand);
    mateDeclare('inputFormatters', inputFormatters);
    mateDeclare('enabled', enabled);
    mateDeclare('cursorWidth', cursorWidth);
    mateDeclare('cursorHeight', cursorHeight);
    mateDeclare('cursorRadius', cursorRadius);
    mateDeclare('cursorColor', cursorColor);
    mateDeclare('selectionHeightStyle', selectionHeightStyle);
    mateDeclare('selectionWidthStyle', selectionWidthStyle);
    mateDeclare('keyboardAppearance', keyboardAppearance);
    mateDeclare('scrollPadding', scrollPadding);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('enableInteractiveSelection', enableInteractiveSelection);
    mateDeclare('selectionControls', selectionControls);
    mateDeclare('onTap', onTap);
    mateDeclare('onTapOutside', onTapOutside);
    mateDeclare('mouseCursor', mouseCursor);
    mateDeclare('buildCounter', buildCounter);
    mateDeclare('scrollController', scrollController);
    mateDeclare('scrollPhysics', scrollPhysics);
    mateDeclare('autofillHints', autofillHints);
    mateDeclare('contentInsertionConfiguration', contentInsertionConfiguration);
    mateDeclare('clipBehavior', clipBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('scribbleEnabled', scribbleEnabled);
    mateDeclare('enableIMEPersonalizedLearning', enableIMEPersonalizedLearning);
    mateDeclare('contextMenuBuilder', contextMenuBuilder);
    mateDeclare('canRequestFocus', canRequestFocus);
    mateDeclare('spellCheckConfiguration', spellCheckConfiguration);
    mateDeclare('magnifierConfiguration', magnifierConfiguration);
  }
}
