// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/input_decorator.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/material/input_border.dart';
import 'package:flutter/material.dart';
import 'package:flutter/src/painting/borders.dart';

/// class InputDecorator extends StatefulWidget
class InputDecorator$Mate extends InputDecorator with Mate {
  /// InputDecorator InputDecorator({Key? key, required InputDecoration decoration, TextStyle? baseStyle, TextAlign? textAlign, TextAlignVertical? textAlignVertical, bool isFocused = false, bool isHovering = false, bool expands = false, bool isEmpty = false, Widget? child})
  InputDecorator$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required InputDecoration decoration} , defaultValue:none
    required InputDecoration decoration,

    /// optionalParameters: {TextStyle? baseStyle} , defaultValue:none
    TextStyle? baseStyle,

    /// optionalParameters: {TextAlign? textAlign} , defaultValue:none
    TextAlign? textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , defaultValue:none
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {bool isFocused = false} , defaultValue:Literal
    bool isFocused = false,

    /// optionalParameters: {bool isHovering = false} , defaultValue:Literal
    bool isHovering = false,

    /// optionalParameters: {bool expands = false} , defaultValue:Literal
    bool expands = false,

    /// optionalParameters: {bool isEmpty = false} , defaultValue:Literal
    bool isEmpty = false,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          decoration: decoration,
          baseStyle: baseStyle,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          isFocused: isFocused,
          isHovering: isHovering,
          expands: expands,
          isEmpty: isEmpty,
          child: child,
        ) {
    mateCreateName = 'InputDecorator';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecorator$Mate(
          key: p.get('key').build(),
          decoration: p.get('decoration').build(),
          baseStyle: p.get('baseStyle').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          isFocused: p.get('isFocused').build(),
          isHovering: p.get('isHovering').build(),
          expands: p.get('expands').build(),
          isEmpty: p.get('isEmpty').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('decoration', decoration, isNamed: true);
    mateUse('baseStyle', baseStyle, isNamed: true);
    mateUse('textAlign', textAlign, isNamed: true);
    mateUse('textAlignVertical', textAlignVertical, isNamed: true);
    mateUse('isFocused', isFocused, isNamed: true);
    mateUse('isHovering', isHovering, isNamed: true);
    mateUse('expands', expands, isNamed: true);
    mateUse('isEmpty', isEmpty, isNamed: true);
    mateUse('child', child, isNamed: true);
  }
}

/// class InputDecoration
class InputDecoration$Mate extends InputDecoration with Mate {
  /// InputDecoration InputDecoration({Widget? icon, Color? iconColor, Widget? label, String? labelText, TextStyle? labelStyle, TextStyle? floatingLabelStyle, String? helperText, TextStyle? helperStyle, int? helperMaxLines, String? hintText, TextStyle? hintStyle, TextDirection? hintTextDirection, int? hintMaxLines, String? errorText, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, bool isCollapsed = false, bool? isDense, EdgeInsetsGeometry? contentPadding, Widget? prefixIcon, BoxConstraints? prefixIconConstraints, Widget? prefix, String? prefixText, TextStyle? prefixStyle, Color? prefixIconColor, Widget? suffixIcon, Widget? suffix, String? suffixText, TextStyle? suffixStyle, Color? suffixIconColor, BoxConstraints? suffixIconConstraints, Widget? counter, String? counterText, TextStyle? counterStyle, bool? filled, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool enabled = true, String? semanticCounterText, bool? alignLabelWithHint, BoxConstraints? constraints})
  InputDecoration$Mate({
    /// optionalParameters: {Widget? icon} , defaultValue:none
    Widget? icon,

    /// optionalParameters: {Color? iconColor} , defaultValue:none
    Color? iconColor,

    /// optionalParameters: {Widget? label} , defaultValue:none
    Widget? label,

    /// optionalParameters: {String? labelText} , defaultValue:none
    String? labelText,

    /// optionalParameters: {TextStyle? labelStyle} , defaultValue:none
    TextStyle? labelStyle,

    /// optionalParameters: {TextStyle? floatingLabelStyle} , defaultValue:none
    TextStyle? floatingLabelStyle,

    /// optionalParameters: {String? helperText} , defaultValue:none
    String? helperText,

    /// optionalParameters: {TextStyle? helperStyle} , defaultValue:none
    TextStyle? helperStyle,

    /// optionalParameters: {int? helperMaxLines} , defaultValue:none
    int? helperMaxLines,

    /// optionalParameters: {String? hintText} , defaultValue:none
    String? hintText,

    /// optionalParameters: {TextStyle? hintStyle} , defaultValue:none
    TextStyle? hintStyle,

    /// optionalParameters: {TextDirection? hintTextDirection} , defaultValue:none
    TextDirection? hintTextDirection,

    /// optionalParameters: {int? hintMaxLines} , defaultValue:none
    int? hintMaxLines,

    /// optionalParameters: {String? errorText} , defaultValue:none
    String? errorText,

    /// optionalParameters: {TextStyle? errorStyle} , defaultValue:none
    TextStyle? errorStyle,

    /// optionalParameters: {int? errorMaxLines} , defaultValue:none
    int? errorMaxLines,

    /// optionalParameters: {FloatingLabelBehavior? floatingLabelBehavior} , defaultValue:none
    FloatingLabelBehavior? floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment? floatingLabelAlignment} , defaultValue:none
    FloatingLabelAlignment? floatingLabelAlignment,

    /// optionalParameters: {bool isCollapsed = false} , defaultValue:Literal
    bool isCollapsed = false,

    /// optionalParameters: {bool? isDense} , defaultValue:none
    bool? isDense,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , defaultValue:none
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {Widget? prefixIcon} , defaultValue:none
    Widget? prefixIcon,

    /// optionalParameters: {BoxConstraints? prefixIconConstraints} , defaultValue:none
    BoxConstraints? prefixIconConstraints,

    /// optionalParameters: {Widget? prefix} , defaultValue:none
    Widget? prefix,

    /// optionalParameters: {String? prefixText} , defaultValue:none
    String? prefixText,

    /// optionalParameters: {TextStyle? prefixStyle} , defaultValue:none
    TextStyle? prefixStyle,

    /// optionalParameters: {Color? prefixIconColor} , defaultValue:none
    Color? prefixIconColor,

    /// optionalParameters: {Widget? suffixIcon} , defaultValue:none
    Widget? suffixIcon,

    /// optionalParameters: {Widget? suffix} , defaultValue:none
    Widget? suffix,

    /// optionalParameters: {String? suffixText} , defaultValue:none
    String? suffixText,

    /// optionalParameters: {TextStyle? suffixStyle} , defaultValue:none
    TextStyle? suffixStyle,

    /// optionalParameters: {Color? suffixIconColor} , defaultValue:none
    Color? suffixIconColor,

    /// optionalParameters: {BoxConstraints? suffixIconConstraints} , defaultValue:none
    BoxConstraints? suffixIconConstraints,

    /// optionalParameters: {Widget? counter} , defaultValue:none
    Widget? counter,

    /// optionalParameters: {String? counterText} , defaultValue:none
    String? counterText,

    /// optionalParameters: {TextStyle? counterStyle} , defaultValue:none
    TextStyle? counterStyle,

    /// optionalParameters: {bool? filled} , defaultValue:none
    bool? filled,

    /// optionalParameters: {Color? fillColor} , defaultValue:none
    Color? fillColor,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {InputBorder? errorBorder} , defaultValue:none
    InputBorder? errorBorder,

    /// optionalParameters: {InputBorder? focusedBorder} , defaultValue:none
    InputBorder? focusedBorder,

    /// optionalParameters: {InputBorder? focusedErrorBorder} , defaultValue:none
    InputBorder? focusedErrorBorder,

    /// optionalParameters: {InputBorder? disabledBorder} , defaultValue:none
    InputBorder? disabledBorder,

    /// optionalParameters: {InputBorder? enabledBorder} , defaultValue:none
    InputBorder? enabledBorder,

    /// optionalParameters: {InputBorder? border} , defaultValue:none
    InputBorder? border,

    /// optionalParameters: {bool enabled = true} , defaultValue:Literal
    bool enabled = true,

    /// optionalParameters: {String? semanticCounterText} , defaultValue:none
    String? semanticCounterText,

    /// optionalParameters: {bool? alignLabelWithHint} , defaultValue:none
    bool? alignLabelWithHint,

    /// optionalParameters: {BoxConstraints? constraints} , defaultValue:none
    BoxConstraints? constraints,
  }) : super(
          icon: icon,
          iconColor: iconColor,
          label: label,
          labelText: labelText,
          labelStyle: labelStyle,
          floatingLabelStyle: floatingLabelStyle,
          helperText: helperText,
          helperStyle: helperStyle,
          helperMaxLines: helperMaxLines,
          hintText: hintText,
          hintStyle: hintStyle,
          hintTextDirection: hintTextDirection,
          hintMaxLines: hintMaxLines,
          errorText: errorText,
          errorStyle: errorStyle,
          errorMaxLines: errorMaxLines,
          floatingLabelBehavior: floatingLabelBehavior,
          floatingLabelAlignment: floatingLabelAlignment,
          isCollapsed: isCollapsed,
          isDense: isDense,
          contentPadding: contentPadding,
          prefixIcon: prefixIcon,
          prefixIconConstraints: prefixIconConstraints,
          prefix: prefix,
          prefixText: prefixText,
          prefixStyle: prefixStyle,
          prefixIconColor: prefixIconColor,
          suffixIcon: suffixIcon,
          suffix: suffix,
          suffixText: suffixText,
          suffixStyle: suffixStyle,
          suffixIconColor: suffixIconColor,
          suffixIconConstraints: suffixIconConstraints,
          counter: counter,
          counterText: counterText,
          counterStyle: counterStyle,
          filled: filled,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          errorBorder: errorBorder,
          focusedBorder: focusedBorder,
          focusedErrorBorder: focusedErrorBorder,
          disabledBorder: disabledBorder,
          enabledBorder: enabledBorder,
          border: border,
          enabled: enabled,
          semanticCounterText: semanticCounterText,
          alignLabelWithHint: alignLabelWithHint,
          constraints: constraints,
        ) {
    mateCreateName = 'InputDecoration';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecoration$Mate(
          icon: p.get('icon').build(),
          iconColor: p.get('iconColor').build(),
          label: p.get('label').build(),
          labelText: p.get('labelText').build(),
          labelStyle: p.get('labelStyle').build(),
          floatingLabelStyle: p.get('floatingLabelStyle').build(),
          helperText: p.get('helperText').build(),
          helperStyle: p.get('helperStyle').build(),
          helperMaxLines: p.get('helperMaxLines').build(),
          hintText: p.get('hintText').build(),
          hintStyle: p.get('hintStyle').build(),
          hintTextDirection: p.get('hintTextDirection').build(),
          hintMaxLines: p.get('hintMaxLines').build(),
          errorText: p.get('errorText').build(),
          errorStyle: p.get('errorStyle').build(),
          errorMaxLines: p.get('errorMaxLines').build(),
          floatingLabelBehavior: p.get('floatingLabelBehavior').build(),
          floatingLabelAlignment: p.get('floatingLabelAlignment').build(),
          isCollapsed: p.get('isCollapsed').build(),
          isDense: p.get('isDense').build(),
          contentPadding: p.get('contentPadding').build(),
          prefixIcon: p.get('prefixIcon').build(),
          prefixIconConstraints: p.get('prefixIconConstraints').build(),
          prefix: p.get('prefix').build(),
          prefixText: p.get('prefixText').build(),
          prefixStyle: p.get('prefixStyle').build(),
          prefixIconColor: p.get('prefixIconColor').build(),
          suffixIcon: p.get('suffixIcon').build(),
          suffix: p.get('suffix').build(),
          suffixText: p.get('suffixText').build(),
          suffixStyle: p.get('suffixStyle').build(),
          suffixIconColor: p.get('suffixIconColor').build(),
          suffixIconConstraints: p.get('suffixIconConstraints').build(),
          counter: p.get('counter').build(),
          counterText: p.get('counterText').build(),
          counterStyle: p.get('counterStyle').build(),
          filled: p.get('filled').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          errorBorder: p.get('errorBorder').build(),
          focusedBorder: p.get('focusedBorder').build(),
          focusedErrorBorder: p.get('focusedErrorBorder').build(),
          disabledBorder: p.get('disabledBorder').build(),
          enabledBorder: p.get('enabledBorder').build(),
          border: p.get('border').build(),
          enabled: p.get('enabled').build(),
          semanticCounterText: p.get('semanticCounterText').build(),
          alignLabelWithHint: p.get('alignLabelWithHint').build(),
          constraints: p.get('constraints').build(),
        );
    mateUse('icon', icon, isNamed: true);
    mateUse('iconColor', iconColor, isNamed: true);
    mateUse('label', label, isNamed: true);
    mateUse('labelText', labelText, isNamed: true);
    mateUse('labelStyle', labelStyle, isNamed: true);
    mateUse('floatingLabelStyle', floatingLabelStyle, isNamed: true);
    mateUse('helperText', helperText, isNamed: true);
    mateUse('helperStyle', helperStyle, isNamed: true);
    mateUse('helperMaxLines', helperMaxLines, isNamed: true);
    mateUse('hintText', hintText, isNamed: true);
    mateUse('hintStyle', hintStyle, isNamed: true);
    mateUse('hintTextDirection', hintTextDirection, isNamed: true);
    mateUse('hintMaxLines', hintMaxLines, isNamed: true);
    mateUse('errorText', errorText, isNamed: true);
    mateUse('errorStyle', errorStyle, isNamed: true);
    mateUse('errorMaxLines', errorMaxLines, isNamed: true);
    mateUse('floatingLabelBehavior', floatingLabelBehavior, isNamed: true);
    mateUse('floatingLabelAlignment', floatingLabelAlignment, isNamed: true);
    mateUse('isCollapsed', isCollapsed, isNamed: true);
    mateUse('isDense', isDense, isNamed: true);
    mateUse('contentPadding', contentPadding, isNamed: true);
    mateUse('prefixIcon', prefixIcon, isNamed: true);
    mateUse('prefixIconConstraints', prefixIconConstraints, isNamed: true);
    mateUse('prefix', prefix, isNamed: true);
    mateUse('prefixText', prefixText, isNamed: true);
    mateUse('prefixStyle', prefixStyle, isNamed: true);
    mateUse('prefixIconColor', prefixIconColor, isNamed: true);
    mateUse('suffixIcon', suffixIcon, isNamed: true);
    mateUse('suffix', suffix, isNamed: true);
    mateUse('suffixText', suffixText, isNamed: true);
    mateUse('suffixStyle', suffixStyle, isNamed: true);
    mateUse('suffixIconColor', suffixIconColor, isNamed: true);
    mateUse('suffixIconConstraints', suffixIconConstraints, isNamed: true);
    mateUse('counter', counter, isNamed: true);
    mateUse('counterText', counterText, isNamed: true);
    mateUse('counterStyle', counterStyle, isNamed: true);
    mateUse('filled', filled, isNamed: true);
    mateUse('fillColor', fillColor, isNamed: true);
    mateUse('focusColor', focusColor, isNamed: true);
    mateUse('hoverColor', hoverColor, isNamed: true);
    mateUse('errorBorder', errorBorder, isNamed: true);
    mateUse('focusedBorder', focusedBorder, isNamed: true);
    mateUse('focusedErrorBorder', focusedErrorBorder, isNamed: true);
    mateUse('disabledBorder', disabledBorder, isNamed: true);
    mateUse('enabledBorder', enabledBorder, isNamed: true);
    mateUse('border', border, isNamed: true);
    mateUse('enabled', enabled, isNamed: true);
    mateUse('semanticCounterText', semanticCounterText, isNamed: true);
    mateUse('alignLabelWithHint', alignLabelWithHint, isNamed: true);
    mateUse('constraints', constraints, isNamed: true);
  }

  /// InputDecoration InputDecoration.collapsed({required String? hintText, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, TextStyle? hintStyle, TextDirection? hintTextDirection, bool? filled = false, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? border = InputBorder.none, bool enabled = true})
  InputDecoration$Mate.collapsed({
    /// optionalParameters: {required String? hintText} , defaultValue:none
    required String? hintText,

    /// optionalParameters: {FloatingLabelBehavior? floatingLabelBehavior} , defaultValue:none
    FloatingLabelBehavior? floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment? floatingLabelAlignment} , defaultValue:none
    FloatingLabelAlignment? floatingLabelAlignment,

    /// optionalParameters: {TextStyle? hintStyle} , defaultValue:none
    TextStyle? hintStyle,

    /// optionalParameters: {TextDirection? hintTextDirection} , defaultValue:none
    TextDirection? hintTextDirection,

    /// optionalParameters: {bool? filled = false} , defaultValue:Literal
    bool? filled = false,

    /// optionalParameters: {Color? fillColor} , defaultValue:none
    Color? fillColor,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {InputBorder? border = InputBorder.none} , defaultValue:PrefixedIdentifier
    InputBorder? border = InputBorder.none,

    /// optionalParameters: {bool enabled = true} , defaultValue:Literal
    bool enabled = true,
  }) : super.collapsed(
          hintText: hintText,
          floatingLabelBehavior: floatingLabelBehavior,
          floatingLabelAlignment: floatingLabelAlignment,
          hintStyle: hintStyle,
          hintTextDirection: hintTextDirection,
          filled: filled,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          border: border,
          enabled: enabled,
        ) {
    mateCreateName = 'InputDecoration.collapsed';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecoration$Mate.collapsed(
          hintText: p.get('hintText').build(),
          floatingLabelBehavior: p.get('floatingLabelBehavior').build(),
          floatingLabelAlignment: p.get('floatingLabelAlignment').build(),
          hintStyle: p.get('hintStyle').build(),
          hintTextDirection: p.get('hintTextDirection').build(),
          filled: p.get('filled').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          border: p.get('border').build(),
          enabled: p.get('enabled').build(),
        );
    mateUse('hintText', hintText, isNamed: true);
    mateUse('floatingLabelBehavior', floatingLabelBehavior, isNamed: true);
    mateUse('floatingLabelAlignment', floatingLabelAlignment, isNamed: true);
    mateUse('hintStyle', hintStyle, isNamed: true);
    mateUse('hintTextDirection', hintTextDirection, isNamed: true);
    mateUse('filled', filled, isNamed: true);
    mateUse('fillColor', fillColor, isNamed: true);
    mateUse('focusColor', focusColor, isNamed: true);
    mateUse('hoverColor', hoverColor, isNamed: true);
    mateUse('border', border, isNamed: true);
    mateUse('enabled', enabled, isNamed: true);
  }
}

/// class InputDecorationTheme with Diagnosticable
class InputDecorationTheme$Mate extends InputDecorationTheme with Mate {
  /// InputDecorationTheme InputDecorationTheme({TextStyle? labelStyle, TextStyle? floatingLabelStyle, TextStyle? helperStyle, int? helperMaxLines, TextStyle? hintStyle, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto, FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start, bool isDense = false, EdgeInsetsGeometry? contentPadding, bool isCollapsed = false, Color? iconColor, TextStyle? prefixStyle, Color? prefixIconColor, TextStyle? suffixStyle, Color? suffixIconColor, TextStyle? counterStyle, bool filled = false, Color? fillColor, BorderSide? activeIndicatorBorder, BorderSide? outlineBorder, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool alignLabelWithHint = false, BoxConstraints? constraints})
  InputDecorationTheme$Mate({
    /// optionalParameters: {TextStyle? labelStyle} , defaultValue:none
    TextStyle? labelStyle,

    /// optionalParameters: {TextStyle? floatingLabelStyle} , defaultValue:none
    TextStyle? floatingLabelStyle,

    /// optionalParameters: {TextStyle? helperStyle} , defaultValue:none
    TextStyle? helperStyle,

    /// optionalParameters: {int? helperMaxLines} , defaultValue:none
    int? helperMaxLines,

    /// optionalParameters: {TextStyle? hintStyle} , defaultValue:none
    TextStyle? hintStyle,

    /// optionalParameters: {TextStyle? errorStyle} , defaultValue:none
    TextStyle? errorStyle,

    /// optionalParameters: {int? errorMaxLines} , defaultValue:none
    int? errorMaxLines,

    /// optionalParameters: {FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto} , defaultValue:PrefixedIdentifier
    FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto,

    /// optionalParameters: {FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start} , defaultValue:PrefixedIdentifier
    FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start,

    /// optionalParameters: {bool isDense = false} , defaultValue:Literal
    bool isDense = false,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , defaultValue:none
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {bool isCollapsed = false} , defaultValue:Literal
    bool isCollapsed = false,

    /// optionalParameters: {Color? iconColor} , defaultValue:none
    Color? iconColor,

    /// optionalParameters: {TextStyle? prefixStyle} , defaultValue:none
    TextStyle? prefixStyle,

    /// optionalParameters: {Color? prefixIconColor} , defaultValue:none
    Color? prefixIconColor,

    /// optionalParameters: {TextStyle? suffixStyle} , defaultValue:none
    TextStyle? suffixStyle,

    /// optionalParameters: {Color? suffixIconColor} , defaultValue:none
    Color? suffixIconColor,

    /// optionalParameters: {TextStyle? counterStyle} , defaultValue:none
    TextStyle? counterStyle,

    /// optionalParameters: {bool filled = false} , defaultValue:Literal
    bool filled = false,

    /// optionalParameters: {Color? fillColor} , defaultValue:none
    Color? fillColor,

    /// optionalParameters: {BorderSide? activeIndicatorBorder} , defaultValue:none
    BorderSide? activeIndicatorBorder,

    /// optionalParameters: {BorderSide? outlineBorder} , defaultValue:none
    BorderSide? outlineBorder,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {InputBorder? errorBorder} , defaultValue:none
    InputBorder? errorBorder,

    /// optionalParameters: {InputBorder? focusedBorder} , defaultValue:none
    InputBorder? focusedBorder,

    /// optionalParameters: {InputBorder? focusedErrorBorder} , defaultValue:none
    InputBorder? focusedErrorBorder,

    /// optionalParameters: {InputBorder? disabledBorder} , defaultValue:none
    InputBorder? disabledBorder,

    /// optionalParameters: {InputBorder? enabledBorder} , defaultValue:none
    InputBorder? enabledBorder,

    /// optionalParameters: {InputBorder? border} , defaultValue:none
    InputBorder? border,

    /// optionalParameters: {bool alignLabelWithHint = false} , defaultValue:Literal
    bool alignLabelWithHint = false,

    /// optionalParameters: {BoxConstraints? constraints} , defaultValue:none
    BoxConstraints? constraints,
  }) : super(
          labelStyle: labelStyle,
          floatingLabelStyle: floatingLabelStyle,
          helperStyle: helperStyle,
          helperMaxLines: helperMaxLines,
          hintStyle: hintStyle,
          errorStyle: errorStyle,
          errorMaxLines: errorMaxLines,
          floatingLabelBehavior: floatingLabelBehavior,
          floatingLabelAlignment: floatingLabelAlignment,
          isDense: isDense,
          contentPadding: contentPadding,
          isCollapsed: isCollapsed,
          iconColor: iconColor,
          prefixStyle: prefixStyle,
          prefixIconColor: prefixIconColor,
          suffixStyle: suffixStyle,
          suffixIconColor: suffixIconColor,
          counterStyle: counterStyle,
          filled: filled,
          fillColor: fillColor,
          activeIndicatorBorder: activeIndicatorBorder,
          outlineBorder: outlineBorder,
          focusColor: focusColor,
          hoverColor: hoverColor,
          errorBorder: errorBorder,
          focusedBorder: focusedBorder,
          focusedErrorBorder: focusedErrorBorder,
          disabledBorder: disabledBorder,
          enabledBorder: enabledBorder,
          border: border,
          alignLabelWithHint: alignLabelWithHint,
          constraints: constraints,
        ) {
    mateCreateName = 'InputDecorationTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecorationTheme$Mate(
          labelStyle: p.get('labelStyle').build(),
          floatingLabelStyle: p.get('floatingLabelStyle').build(),
          helperStyle: p.get('helperStyle').build(),
          helperMaxLines: p.get('helperMaxLines').build(),
          hintStyle: p.get('hintStyle').build(),
          errorStyle: p.get('errorStyle').build(),
          errorMaxLines: p.get('errorMaxLines').build(),
          floatingLabelBehavior: p.get('floatingLabelBehavior').build(),
          floatingLabelAlignment: p.get('floatingLabelAlignment').build(),
          isDense: p.get('isDense').build(),
          contentPadding: p.get('contentPadding').build(),
          isCollapsed: p.get('isCollapsed').build(),
          iconColor: p.get('iconColor').build(),
          prefixStyle: p.get('prefixStyle').build(),
          prefixIconColor: p.get('prefixIconColor').build(),
          suffixStyle: p.get('suffixStyle').build(),
          suffixIconColor: p.get('suffixIconColor').build(),
          counterStyle: p.get('counterStyle').build(),
          filled: p.get('filled').build(),
          fillColor: p.get('fillColor').build(),
          activeIndicatorBorder: p.get('activeIndicatorBorder').build(),
          outlineBorder: p.get('outlineBorder').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          errorBorder: p.get('errorBorder').build(),
          focusedBorder: p.get('focusedBorder').build(),
          focusedErrorBorder: p.get('focusedErrorBorder').build(),
          disabledBorder: p.get('disabledBorder').build(),
          enabledBorder: p.get('enabledBorder').build(),
          border: p.get('border').build(),
          alignLabelWithHint: p.get('alignLabelWithHint').build(),
          constraints: p.get('constraints').build(),
        );
    mateUse('labelStyle', labelStyle, isNamed: true);
    mateUse('floatingLabelStyle', floatingLabelStyle, isNamed: true);
    mateUse('helperStyle', helperStyle, isNamed: true);
    mateUse('helperMaxLines', helperMaxLines, isNamed: true);
    mateUse('hintStyle', hintStyle, isNamed: true);
    mateUse('errorStyle', errorStyle, isNamed: true);
    mateUse('errorMaxLines', errorMaxLines, isNamed: true);
    mateUse('floatingLabelBehavior', floatingLabelBehavior, isNamed: true);
    mateUse('floatingLabelAlignment', floatingLabelAlignment, isNamed: true);
    mateUse('isDense', isDense, isNamed: true);
    mateUse('contentPadding', contentPadding, isNamed: true);
    mateUse('isCollapsed', isCollapsed, isNamed: true);
    mateUse('iconColor', iconColor, isNamed: true);
    mateUse('prefixStyle', prefixStyle, isNamed: true);
    mateUse('prefixIconColor', prefixIconColor, isNamed: true);
    mateUse('suffixStyle', suffixStyle, isNamed: true);
    mateUse('suffixIconColor', suffixIconColor, isNamed: true);
    mateUse('counterStyle', counterStyle, isNamed: true);
    mateUse('filled', filled, isNamed: true);
    mateUse('fillColor', fillColor, isNamed: true);
    mateUse('activeIndicatorBorder', activeIndicatorBorder, isNamed: true);
    mateUse('outlineBorder', outlineBorder, isNamed: true);
    mateUse('focusColor', focusColor, isNamed: true);
    mateUse('hoverColor', hoverColor, isNamed: true);
    mateUse('errorBorder', errorBorder, isNamed: true);
    mateUse('focusedBorder', focusedBorder, isNamed: true);
    mateUse('focusedErrorBorder', focusedErrorBorder, isNamed: true);
    mateUse('disabledBorder', disabledBorder, isNamed: true);
    mateUse('enabledBorder', enabledBorder, isNamed: true);
    mateUse('border', border, isNamed: true);
    mateUse('alignLabelWithHint', alignLabelWithHint, isNamed: true);
    mateUse('constraints', constraints, isNamed: true);
  }
}
