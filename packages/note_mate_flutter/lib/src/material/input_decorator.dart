// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/input_decorator.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/text_style.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/alignment.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i7;
import 'package:flutter/src/painting/edge_insets.dart' as _i8;
import 'package:flutter/src/rendering/box.dart' as _i9;
import 'package:flutter/src/material/input_border.dart' as _i10;
import 'package:flutter/material.dart' as _i11;
import 'package:flutter/src/painting/borders.dart' as _i12;

/// class InputDecorator extends StatefulWidget
class InputDecorator$Mate extends _i1.InputDecorator with _i2.Mate {
  /// InputDecorator InputDecorator({Key? key, required InputDecoration decoration, TextStyle? baseStyle, TextAlign? textAlign, TextAlignVertical? textAlignVertical, bool isFocused = false, bool isHovering = false, bool expands = false, bool isEmpty = false, Widget? child})
  InputDecorator$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required InputDecoration decoration} , default:none
    required super.decoration,

    /// optionalParameters: {TextStyle? baseStyle} , default:none
    super.baseStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    super.textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , default:none
    super.textAlignVertical,

    /// optionalParameters: {bool isFocused = false} , default:processed=BooleanLiteralImpl
    super.isFocused,

    /// optionalParameters: {bool isHovering = false} , default:processed=BooleanLiteralImpl
    super.isHovering,

    /// optionalParameters: {bool expands = false} , default:processed=BooleanLiteralImpl
    super.expands,

    /// optionalParameters: {bool isEmpty = false} , default:processed=BooleanLiteralImpl
    super.isEmpty,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'decoration': _i2.BuilderArg<_i1.InputDecoration>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'baseStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'baseStyle',
            init: baseStyle,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i5.TextAlign?>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
          ),
          'textAlignVertical': _i2.BuilderArg<_i6.TextAlignVertical?>(
            name: 'textAlignVertical',
            init: textAlignVertical,
            isNamed: true,
          ),
          'isFocused': _i2.BuilderArg<bool>(
            name: 'isFocused',
            init: isFocused,
            isNamed: true,
            defaultValue: false,
          ),
          'isHovering': _i2.BuilderArg<bool>(
            name: 'isHovering',
            init: isHovering,
            isNamed: true,
            defaultValue: false,
          ),
          'expands': _i2.BuilderArg<bool>(
            name: 'expands',
            init: expands,
            isNamed: true,
            defaultValue: false,
          ),
          'isEmpty': _i2.BuilderArg<bool>(
            name: 'isEmpty',
            init: isEmpty,
            isNamed: true,
            defaultValue: false,
          ),
          'child': _i2.BuilderArg<_i7.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'InputDecorator';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecorator$Mate(
          key: p.get('key').build(),
          decoration: p.get('decoration').build(),
          baseStyle: p.get('baseStyle').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          isFocused: p.get('isFocused').build(),
          isHovering: p.get('isHovering').build(),
          expands: p.get('expands').build(),
          isEmpty: p.get('isEmpty').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class InputDecoration
class InputDecoration$Mate extends _i1.InputDecoration with _i2.Mate {
  /// InputDecoration InputDecoration({Widget? icon, Color? iconColor, Widget? label, String? labelText, TextStyle? labelStyle, TextStyle? floatingLabelStyle, String? helperText, TextStyle? helperStyle, int? helperMaxLines, String? hintText, TextStyle? hintStyle, TextDirection? hintTextDirection, int? hintMaxLines, String? errorText, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, bool isCollapsed = false, bool? isDense, EdgeInsetsGeometry? contentPadding, Widget? prefixIcon, BoxConstraints? prefixIconConstraints, Widget? prefix, String? prefixText, TextStyle? prefixStyle, Color? prefixIconColor, Widget? suffixIcon, Widget? suffix, String? suffixText, TextStyle? suffixStyle, Color? suffixIconColor, BoxConstraints? suffixIconConstraints, Widget? counter, String? counterText, TextStyle? counterStyle, bool? filled, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool enabled = true, String? semanticCounterText, bool? alignLabelWithHint, BoxConstraints? constraints})
  InputDecoration$Mate({
    /// optionalParameters: {Widget? icon} , default:none
    super.icon,

    /// optionalParameters: {Color? iconColor} , default:none
    super.iconColor,

    /// optionalParameters: {Widget? label} , default:none
    super.label,

    /// optionalParameters: {String? labelText} , default:none
    super.labelText,

    /// optionalParameters: {TextStyle? labelStyle} , default:none
    super.labelStyle,

    /// optionalParameters: {TextStyle? floatingLabelStyle} , default:none
    super.floatingLabelStyle,

    /// optionalParameters: {String? helperText} , default:none
    super.helperText,

    /// optionalParameters: {TextStyle? helperStyle} , default:none
    super.helperStyle,

    /// optionalParameters: {int? helperMaxLines} , default:none
    super.helperMaxLines,

    /// optionalParameters: {String? hintText} , default:none
    super.hintText,

    /// optionalParameters: {TextStyle? hintStyle} , default:none
    super.hintStyle,

    /// optionalParameters: {TextDirection? hintTextDirection} , default:none
    super.hintTextDirection,

    /// optionalParameters: {int? hintMaxLines} , default:none
    super.hintMaxLines,

    /// optionalParameters: {String? errorText} , default:none
    super.errorText,

    /// optionalParameters: {TextStyle? errorStyle} , default:none
    super.errorStyle,

    /// optionalParameters: {int? errorMaxLines} , default:none
    super.errorMaxLines,

    /// optionalParameters: {FloatingLabelBehavior? floatingLabelBehavior} , default:none
    super.floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment? floatingLabelAlignment} , default:none
    super.floatingLabelAlignment,

    /// optionalParameters: {bool isCollapsed = false} , default:processed=BooleanLiteralImpl
    super.isCollapsed,

    /// optionalParameters: {bool? isDense} , default:none
    super.isDense,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    super.contentPadding,

    /// optionalParameters: {Widget? prefixIcon} , default:none
    super.prefixIcon,

    /// optionalParameters: {BoxConstraints? prefixIconConstraints} , default:none
    super.prefixIconConstraints,

    /// optionalParameters: {Widget? prefix} , default:none
    super.prefix,

    /// optionalParameters: {String? prefixText} , default:none
    super.prefixText,

    /// optionalParameters: {TextStyle? prefixStyle} , default:none
    super.prefixStyle,

    /// optionalParameters: {Color? prefixIconColor} , default:none
    super.prefixIconColor,

    /// optionalParameters: {Widget? suffixIcon} , default:none
    super.suffixIcon,

    /// optionalParameters: {Widget? suffix} , default:none
    super.suffix,

    /// optionalParameters: {String? suffixText} , default:none
    super.suffixText,

    /// optionalParameters: {TextStyle? suffixStyle} , default:none
    super.suffixStyle,

    /// optionalParameters: {Color? suffixIconColor} , default:none
    super.suffixIconColor,

    /// optionalParameters: {BoxConstraints? suffixIconConstraints} , default:none
    super.suffixIconConstraints,

    /// optionalParameters: {Widget? counter} , default:none
    super.counter,

    /// optionalParameters: {String? counterText} , default:none
    super.counterText,

    /// optionalParameters: {TextStyle? counterStyle} , default:none
    super.counterStyle,

    /// optionalParameters: {bool? filled} , default:none
    super.filled,

    /// optionalParameters: {Color? fillColor} , default:none
    super.fillColor,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {InputBorder? errorBorder} , default:none
    super.errorBorder,

    /// optionalParameters: {InputBorder? focusedBorder} , default:none
    super.focusedBorder,

    /// optionalParameters: {InputBorder? focusedErrorBorder} , default:none
    super.focusedErrorBorder,

    /// optionalParameters: {InputBorder? disabledBorder} , default:none
    super.disabledBorder,

    /// optionalParameters: {InputBorder? enabledBorder} , default:none
    super.enabledBorder,

    /// optionalParameters: {InputBorder? border} , default:none
    super.border,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,

    /// optionalParameters: {String? semanticCounterText} , default:none
    super.semanticCounterText,

    /// optionalParameters: {bool? alignLabelWithHint} , default:none
    super.alignLabelWithHint,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,
  })  : mateParams = {
          'icon': _i2.BuilderArg<_i7.Widget?>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'iconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'iconColor',
            init: iconColor,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<_i7.Widget?>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'labelText': _i2.BuilderArg<String?>(
            name: 'labelText',
            init: labelText,
            isNamed: true,
          ),
          'labelStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'labelStyle',
            init: labelStyle,
            isNamed: true,
          ),
          'floatingLabelStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'floatingLabelStyle',
            init: floatingLabelStyle,
            isNamed: true,
          ),
          'helperText': _i2.BuilderArg<String?>(
            name: 'helperText',
            init: helperText,
            isNamed: true,
          ),
          'helperStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'helperStyle',
            init: helperStyle,
            isNamed: true,
          ),
          'helperMaxLines': _i2.BuilderArg<int?>(
            name: 'helperMaxLines',
            init: helperMaxLines,
            isNamed: true,
          ),
          'hintText': _i2.BuilderArg<String?>(
            name: 'hintText',
            init: hintText,
            isNamed: true,
          ),
          'hintStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'hintStyle',
            init: hintStyle,
            isNamed: true,
          ),
          'hintTextDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'hintTextDirection',
            init: hintTextDirection,
            isNamed: true,
          ),
          'hintMaxLines': _i2.BuilderArg<int?>(
            name: 'hintMaxLines',
            init: hintMaxLines,
            isNamed: true,
          ),
          'errorText': _i2.BuilderArg<String?>(
            name: 'errorText',
            init: errorText,
            isNamed: true,
          ),
          'errorStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'errorStyle',
            init: errorStyle,
            isNamed: true,
          ),
          'errorMaxLines': _i2.BuilderArg<int?>(
            name: 'errorMaxLines',
            init: errorMaxLines,
            isNamed: true,
          ),
          'floatingLabelBehavior': _i2.BuilderArg<_i1.FloatingLabelBehavior?>(
            name: 'floatingLabelBehavior',
            init: floatingLabelBehavior,
            isNamed: true,
          ),
          'floatingLabelAlignment': _i2.BuilderArg<_i1.FloatingLabelAlignment?>(
            name: 'floatingLabelAlignment',
            init: floatingLabelAlignment,
            isNamed: true,
          ),
          'isCollapsed': _i2.BuilderArg<bool>(
            name: 'isCollapsed',
            init: isCollapsed,
            isNamed: true,
            defaultValue: false,
          ),
          'isDense': _i2.BuilderArg<bool?>(
            name: 'isDense',
            init: isDense,
            isNamed: true,
          ),
          'contentPadding': _i2.BuilderArg<_i8.EdgeInsetsGeometry?>(
            name: 'contentPadding',
            init: contentPadding,
            isNamed: true,
          ),
          'prefixIcon': _i2.BuilderArg<_i7.Widget?>(
            name: 'prefixIcon',
            init: prefixIcon,
            isNamed: true,
          ),
          'prefixIconConstraints': _i2.BuilderArg<_i9.BoxConstraints?>(
            name: 'prefixIconConstraints',
            init: prefixIconConstraints,
            isNamed: true,
          ),
          'prefix': _i2.BuilderArg<_i7.Widget?>(
            name: 'prefix',
            init: prefix,
            isNamed: true,
          ),
          'prefixText': _i2.BuilderArg<String?>(
            name: 'prefixText',
            init: prefixText,
            isNamed: true,
          ),
          'prefixStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'prefixStyle',
            init: prefixStyle,
            isNamed: true,
          ),
          'prefixIconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'prefixIconColor',
            init: prefixIconColor,
            isNamed: true,
          ),
          'suffixIcon': _i2.BuilderArg<_i7.Widget?>(
            name: 'suffixIcon',
            init: suffixIcon,
            isNamed: true,
          ),
          'suffix': _i2.BuilderArg<_i7.Widget?>(
            name: 'suffix',
            init: suffix,
            isNamed: true,
          ),
          'suffixText': _i2.BuilderArg<String?>(
            name: 'suffixText',
            init: suffixText,
            isNamed: true,
          ),
          'suffixStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'suffixStyle',
            init: suffixStyle,
            isNamed: true,
          ),
          'suffixIconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'suffixIconColor',
            init: suffixIconColor,
            isNamed: true,
          ),
          'suffixIconConstraints': _i2.BuilderArg<_i9.BoxConstraints?>(
            name: 'suffixIconConstraints',
            init: suffixIconConstraints,
            isNamed: true,
          ),
          'counter': _i2.BuilderArg<_i7.Widget?>(
            name: 'counter',
            init: counter,
            isNamed: true,
          ),
          'counterText': _i2.BuilderArg<String?>(
            name: 'counterText',
            init: counterText,
            isNamed: true,
          ),
          'counterStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'counterStyle',
            init: counterStyle,
            isNamed: true,
          ),
          'filled': _i2.BuilderArg<bool?>(
            name: 'filled',
            init: filled,
            isNamed: true,
          ),
          'fillColor': _i2.BuilderArg<_i5.Color?>(
            name: 'fillColor',
            init: fillColor,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i5.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i5.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'errorBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'errorBorder',
            init: errorBorder,
            isNamed: true,
          ),
          'focusedBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'focusedBorder',
            init: focusedBorder,
            isNamed: true,
          ),
          'focusedErrorBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'focusedErrorBorder',
            init: focusedErrorBorder,
            isNamed: true,
          ),
          'disabledBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'disabledBorder',
            init: disabledBorder,
            isNamed: true,
          ),
          'enabledBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'enabledBorder',
            init: enabledBorder,
            isNamed: true,
          ),
          'border': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'border',
            init: border,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
          'semanticCounterText': _i2.BuilderArg<String?>(
            name: 'semanticCounterText',
            init: semanticCounterText,
            isNamed: true,
          ),
          'alignLabelWithHint': _i2.BuilderArg<bool?>(
            name: 'alignLabelWithHint',
            init: alignLabelWithHint,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i9.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'InputDecoration';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecoration$Mate(
          icon: p.get('icon').build(),
          iconColor: p.get('iconColor').build(),
          label: p.get('label').build(),
          labelText: p.get('labelText').build(),
          labelStyle: p.get('labelStyle').build(),
          floatingLabelStyle: p.get('floatingLabelStyle').build(),
          helperText: p.get('helperText').build(),
          helperStyle: p.get('helperStyle').build(),
          helperMaxLines: p.get('helperMaxLines').build(),
          hintText: p.get('hintText').build(),
          hintStyle: p.get('hintStyle').build(),
          hintTextDirection: p.get('hintTextDirection').build(),
          hintMaxLines: p.get('hintMaxLines').build(),
          errorText: p.get('errorText').build(),
          errorStyle: p.get('errorStyle').build(),
          errorMaxLines: p.get('errorMaxLines').build(),
          floatingLabelBehavior: p.get('floatingLabelBehavior').build(),
          floatingLabelAlignment: p.get('floatingLabelAlignment').build(),
          isCollapsed: p.get('isCollapsed').build(),
          isDense: p.get('isDense').build(),
          contentPadding: p.get('contentPadding').build(),
          prefixIcon: p.get('prefixIcon').build(),
          prefixIconConstraints: p.get('prefixIconConstraints').build(),
          prefix: p.get('prefix').build(),
          prefixText: p.get('prefixText').build(),
          prefixStyle: p.get('prefixStyle').build(),
          prefixIconColor: p.get('prefixIconColor').build(),
          suffixIcon: p.get('suffixIcon').build(),
          suffix: p.get('suffix').build(),
          suffixText: p.get('suffixText').build(),
          suffixStyle: p.get('suffixStyle').build(),
          suffixIconColor: p.get('suffixIconColor').build(),
          suffixIconConstraints: p.get('suffixIconConstraints').build(),
          counter: p.get('counter').build(),
          counterText: p.get('counterText').build(),
          counterStyle: p.get('counterStyle').build(),
          filled: p.get('filled').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          errorBorder: p.get('errorBorder').build(),
          focusedBorder: p.get('focusedBorder').build(),
          focusedErrorBorder: p.get('focusedErrorBorder').build(),
          disabledBorder: p.get('disabledBorder').build(),
          enabledBorder: p.get('enabledBorder').build(),
          border: p.get('border').build(),
          enabled: p.get('enabled').build(),
          semanticCounterText: p.get('semanticCounterText').build(),
          alignLabelWithHint: p.get('alignLabelWithHint').build(),
          constraints: p.get('constraints').build(),
        );
  }

  /// InputDecoration InputDecoration.collapsed({required String? hintText, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, TextStyle? hintStyle, TextDirection? hintTextDirection, bool? filled = false, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? border = InputBorder.none, bool enabled = true})
  InputDecoration$Mate.collapsed({
    /// optionalParameters: {required String? hintText} , default:none
    required super.hintText,

    /// optionalParameters: {FloatingLabelBehavior? floatingLabelBehavior} , default:none
    super.floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment? floatingLabelAlignment} , default:none
    super.floatingLabelAlignment,

    /// optionalParameters: {TextStyle? hintStyle} , default:none
    super.hintStyle,

    /// optionalParameters: {TextDirection? hintTextDirection} , default:none
    super.hintTextDirection,

    /// optionalParameters: {bool? filled = false} , default:processed=BooleanLiteralImpl
    super.filled,

    /// optionalParameters: {Color? fillColor} , default:none
    super.fillColor,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {InputBorder? border = InputBorder.none} , default:processed=PrefixedIdentifierImpl
    super.border,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,
  })  : mateParams = {
          'hintText': _i2.BuilderArg<String?>(
            name: 'hintText',
            init: hintText,
            isNamed: true,
          ),
          'floatingLabelBehavior': _i2.BuilderArg<_i1.FloatingLabelBehavior?>(
            name: 'floatingLabelBehavior',
            init: floatingLabelBehavior,
            isNamed: true,
          ),
          'floatingLabelAlignment': _i2.BuilderArg<_i1.FloatingLabelAlignment?>(
            name: 'floatingLabelAlignment',
            init: floatingLabelAlignment,
            isNamed: true,
          ),
          'hintStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'hintStyle',
            init: hintStyle,
            isNamed: true,
          ),
          'hintTextDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'hintTextDirection',
            init: hintTextDirection,
            isNamed: true,
          ),
          'filled': _i2.BuilderArg<bool?>(
            name: 'filled',
            init: filled,
            isNamed: true,
            defaultValue: false,
          ),
          'fillColor': _i2.BuilderArg<_i5.Color?>(
            name: 'fillColor',
            init: fillColor,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i5.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i5.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'border': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'border',
            init: border,
            isNamed: true,
            defaultValue: _i11.InputBorder.none,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super.collapsed() {
    mateBuilderName = 'InputDecoration.collapsed';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecoration$Mate.collapsed(
          hintText: p.get('hintText').build(),
          floatingLabelBehavior: p.get('floatingLabelBehavior').build(),
          floatingLabelAlignment: p.get('floatingLabelAlignment').build(),
          hintStyle: p.get('hintStyle').build(),
          hintTextDirection: p.get('hintTextDirection').build(),
          filled: p.get('filled').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          border: p.get('border').build(),
          enabled: p.get('enabled').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class InputDecorationTheme with Diagnosticable
class InputDecorationTheme$Mate extends _i1.InputDecorationTheme with _i2.Mate {
  /// InputDecorationTheme InputDecorationTheme({TextStyle? labelStyle, TextStyle? floatingLabelStyle, TextStyle? helperStyle, int? helperMaxLines, TextStyle? hintStyle, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto, FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start, bool isDense = false, EdgeInsetsGeometry? contentPadding, bool isCollapsed = false, Color? iconColor, TextStyle? prefixStyle, Color? prefixIconColor, TextStyle? suffixStyle, Color? suffixIconColor, TextStyle? counterStyle, bool filled = false, Color? fillColor, BorderSide? activeIndicatorBorder, BorderSide? outlineBorder, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool alignLabelWithHint = false, BoxConstraints? constraints})
  InputDecorationTheme$Mate({
    /// optionalParameters: {TextStyle? labelStyle} , default:none
    super.labelStyle,

    /// optionalParameters: {TextStyle? floatingLabelStyle} , default:none
    super.floatingLabelStyle,

    /// optionalParameters: {TextStyle? helperStyle} , default:none
    super.helperStyle,

    /// optionalParameters: {int? helperMaxLines} , default:none
    super.helperMaxLines,

    /// optionalParameters: {TextStyle? hintStyle} , default:none
    super.hintStyle,

    /// optionalParameters: {TextStyle? errorStyle} , default:none
    super.errorStyle,

    /// optionalParameters: {int? errorMaxLines} , default:none
    super.errorMaxLines,

    /// optionalParameters: {FloatingLabelBehavior floatingLabelBehavior = FloatingLabelBehavior.auto} , default:processed=PrefixedIdentifierImpl
    super.floatingLabelBehavior,

    /// optionalParameters: {FloatingLabelAlignment floatingLabelAlignment = FloatingLabelAlignment.start} , default:processed=PrefixedIdentifierImpl
    super.floatingLabelAlignment,

    /// optionalParameters: {bool isDense = false} , default:processed=BooleanLiteralImpl
    super.isDense,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    super.contentPadding,

    /// optionalParameters: {bool isCollapsed = false} , default:processed=BooleanLiteralImpl
    super.isCollapsed,

    /// optionalParameters: {Color? iconColor} , default:none
    super.iconColor,

    /// optionalParameters: {TextStyle? prefixStyle} , default:none
    super.prefixStyle,

    /// optionalParameters: {Color? prefixIconColor} , default:none
    super.prefixIconColor,

    /// optionalParameters: {TextStyle? suffixStyle} , default:none
    super.suffixStyle,

    /// optionalParameters: {Color? suffixIconColor} , default:none
    super.suffixIconColor,

    /// optionalParameters: {TextStyle? counterStyle} , default:none
    super.counterStyle,

    /// optionalParameters: {bool filled = false} , default:processed=BooleanLiteralImpl
    super.filled,

    /// optionalParameters: {Color? fillColor} , default:none
    super.fillColor,

    /// optionalParameters: {BorderSide? activeIndicatorBorder} , default:none
    super.activeIndicatorBorder,

    /// optionalParameters: {BorderSide? outlineBorder} , default:none
    super.outlineBorder,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {InputBorder? errorBorder} , default:none
    super.errorBorder,

    /// optionalParameters: {InputBorder? focusedBorder} , default:none
    super.focusedBorder,

    /// optionalParameters: {InputBorder? focusedErrorBorder} , default:none
    super.focusedErrorBorder,

    /// optionalParameters: {InputBorder? disabledBorder} , default:none
    super.disabledBorder,

    /// optionalParameters: {InputBorder? enabledBorder} , default:none
    super.enabledBorder,

    /// optionalParameters: {InputBorder? border} , default:none
    super.border,

    /// optionalParameters: {bool alignLabelWithHint = false} , default:processed=BooleanLiteralImpl
    super.alignLabelWithHint,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,
  })  : mateParams = {
          'labelStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'labelStyle',
            init: labelStyle,
            isNamed: true,
          ),
          'floatingLabelStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'floatingLabelStyle',
            init: floatingLabelStyle,
            isNamed: true,
          ),
          'helperStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'helperStyle',
            init: helperStyle,
            isNamed: true,
          ),
          'helperMaxLines': _i2.BuilderArg<int?>(
            name: 'helperMaxLines',
            init: helperMaxLines,
            isNamed: true,
          ),
          'hintStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'hintStyle',
            init: hintStyle,
            isNamed: true,
          ),
          'errorStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'errorStyle',
            init: errorStyle,
            isNamed: true,
          ),
          'errorMaxLines': _i2.BuilderArg<int?>(
            name: 'errorMaxLines',
            init: errorMaxLines,
            isNamed: true,
          ),
          'floatingLabelBehavior': _i2.BuilderArg<_i1.FloatingLabelBehavior>(
            name: 'floatingLabelBehavior',
            init: floatingLabelBehavior,
            isNamed: true,
            defaultValue: _i11.FloatingLabelBehavior.auto,
          ),
          'floatingLabelAlignment': _i2.BuilderArg<_i1.FloatingLabelAlignment>(
            name: 'floatingLabelAlignment',
            init: floatingLabelAlignment,
            isNamed: true,
            defaultValue: _i11.FloatingLabelAlignment.start,
          ),
          'isDense': _i2.BuilderArg<bool>(
            name: 'isDense',
            init: isDense,
            isNamed: true,
            defaultValue: false,
          ),
          'contentPadding': _i2.BuilderArg<_i8.EdgeInsetsGeometry?>(
            name: 'contentPadding',
            init: contentPadding,
            isNamed: true,
          ),
          'isCollapsed': _i2.BuilderArg<bool>(
            name: 'isCollapsed',
            init: isCollapsed,
            isNamed: true,
            defaultValue: false,
          ),
          'iconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'iconColor',
            init: iconColor,
            isNamed: true,
          ),
          'prefixStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'prefixStyle',
            init: prefixStyle,
            isNamed: true,
          ),
          'prefixIconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'prefixIconColor',
            init: prefixIconColor,
            isNamed: true,
          ),
          'suffixStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'suffixStyle',
            init: suffixStyle,
            isNamed: true,
          ),
          'suffixIconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'suffixIconColor',
            init: suffixIconColor,
            isNamed: true,
          ),
          'counterStyle': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'counterStyle',
            init: counterStyle,
            isNamed: true,
          ),
          'filled': _i2.BuilderArg<bool>(
            name: 'filled',
            init: filled,
            isNamed: true,
            defaultValue: false,
          ),
          'fillColor': _i2.BuilderArg<_i5.Color?>(
            name: 'fillColor',
            init: fillColor,
            isNamed: true,
          ),
          'activeIndicatorBorder': _i2.BuilderArg<_i12.BorderSide?>(
            name: 'activeIndicatorBorder',
            init: activeIndicatorBorder,
            isNamed: true,
          ),
          'outlineBorder': _i2.BuilderArg<_i12.BorderSide?>(
            name: 'outlineBorder',
            init: outlineBorder,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i5.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i5.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'errorBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'errorBorder',
            init: errorBorder,
            isNamed: true,
          ),
          'focusedBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'focusedBorder',
            init: focusedBorder,
            isNamed: true,
          ),
          'focusedErrorBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'focusedErrorBorder',
            init: focusedErrorBorder,
            isNamed: true,
          ),
          'disabledBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'disabledBorder',
            init: disabledBorder,
            isNamed: true,
          ),
          'enabledBorder': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'enabledBorder',
            init: enabledBorder,
            isNamed: true,
          ),
          'border': _i2.BuilderArg<_i10.InputBorder?>(
            name: 'border',
            init: border,
            isNamed: true,
          ),
          'alignLabelWithHint': _i2.BuilderArg<bool>(
            name: 'alignLabelWithHint',
            init: alignLabelWithHint,
            isNamed: true,
            defaultValue: false,
          ),
          'constraints': _i2.BuilderArg<_i9.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'InputDecorationTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InputDecorationTheme$Mate(
          labelStyle: p.get('labelStyle').build(),
          floatingLabelStyle: p.get('floatingLabelStyle').build(),
          helperStyle: p.get('helperStyle').build(),
          helperMaxLines: p.get('helperMaxLines').build(),
          hintStyle: p.get('hintStyle').build(),
          errorStyle: p.get('errorStyle').build(),
          errorMaxLines: p.get('errorMaxLines').build(),
          floatingLabelBehavior: p.get('floatingLabelBehavior').build(),
          floatingLabelAlignment: p.get('floatingLabelAlignment').build(),
          isDense: p.get('isDense').build(),
          contentPadding: p.get('contentPadding').build(),
          isCollapsed: p.get('isCollapsed').build(),
          iconColor: p.get('iconColor').build(),
          prefixStyle: p.get('prefixStyle').build(),
          prefixIconColor: p.get('prefixIconColor').build(),
          suffixStyle: p.get('suffixStyle').build(),
          suffixIconColor: p.get('suffixIconColor').build(),
          counterStyle: p.get('counterStyle').build(),
          filled: p.get('filled').build(),
          fillColor: p.get('fillColor').build(),
          activeIndicatorBorder: p.get('activeIndicatorBorder').build(),
          outlineBorder: p.get('outlineBorder').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          errorBorder: p.get('errorBorder').build(),
          focusedBorder: p.get('focusedBorder').build(),
          focusedErrorBorder: p.get('focusedErrorBorder').build(),
          disabledBorder: p.get('disabledBorder').build(),
          enabledBorder: p.get('enabledBorder').build(),
          border: p.get('border').build(),
          alignLabelWithHint: p.get('alignLabelWithHint').build(),
          constraints: p.get('constraints').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
