// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/material_button.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class MaterialButton extends StatelessWidget
class MaterialButton$Mate extends MaterialButton with Mate {
  /// MaterialButton MaterialButton({Key? key, required void Function()? onPressed, void Function()? onLongPress, void Function(bool)? onHighlightChanged, MouseCursor? mouseCursor, ButtonTextTheme? textTheme, Color? textColor, Color? disabledTextColor, Color? color, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Brightness? colorBrightness, double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, Duration? animationDuration, double? minWidth, double? height, bool enableFeedback = true, Widget? child})
  MaterialButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onPressed,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {ButtonTextTheme? textTheme} , hasDefaultValue:false, defaultValueCode:null
    ButtonTextTheme? textTheme,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {Color? disabledTextColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledTextColor,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {Brightness? colorBrightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? colorBrightness,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? focusElevation} , hasDefaultValue:false, defaultValueCode:null
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , hasDefaultValue:false, defaultValueCode:null
    double? hoverElevation,

    /// optionalParameters: {double? highlightElevation} , hasDefaultValue:false, defaultValueCode:null
    double? highlightElevation,

    /// optionalParameters: {double? disabledElevation} , hasDefaultValue:false, defaultValueCode:null
    double? disabledElevation,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
    required Clip clipBehavior,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {Duration? animationDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? animationDuration,

    /// optionalParameters: {double? minWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minWidth,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {bool enableFeedback = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableFeedback,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          onPressed: onPressed,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          mouseCursor: mouseCursor,
          textTheme: textTheme,
          textColor: textColor,
          disabledTextColor: disabledTextColor,
          color: color,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorBrightness: colorBrightness,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          highlightElevation: highlightElevation,
          disabledElevation: disabledElevation,
          padding: padding,
          visualDensity: visualDensity,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          materialTapTargetSize: materialTapTargetSize,
          animationDuration: animationDuration,
          minWidth: minWidth,
          height: height,
          enableFeedback: enableFeedback,
          child: child,
        ) {
    mateBuilder = (p) => MaterialButton$Mate(
          key: p.get('key').build(),
          onPressed: p.get('onPressed').build(),
          onLongPress: p.get('onLongPress').build(),
          onHighlightChanged: p.get('onHighlightChanged').build(),
          mouseCursor: p.get('mouseCursor').build(),
          textTheme: p.get('textTheme').build(),
          textColor: p.get('textColor').build(),
          disabledTextColor: p.get('disabledTextColor').build(),
          color: p.get('color').build(),
          disabledColor: p.get('disabledColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          colorBrightness: p.get('colorBrightness').build(),
          elevation: p.get('elevation').build(),
          focusElevation: p.get('focusElevation').build(),
          hoverElevation: p.get('hoverElevation').build(),
          highlightElevation: p.get('highlightElevation').build(),
          disabledElevation: p.get('disabledElevation').build(),
          padding: p.get('padding').build(),
          visualDensity: p.get('visualDensity').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          animationDuration: p.get('animationDuration').build(),
          minWidth: p.get('minWidth').build(),
          height: p.get('height').build(),
          enableFeedback: p.get('enableFeedback').build(),
          child: p.get('child').build(),
        );
    matePut('key', key);
    matePut('onPressed', onPressed);
    matePut('onLongPress', onLongPress);
    matePut('onHighlightChanged', onHighlightChanged);
    matePut('mouseCursor', mouseCursor);
    matePut('textTheme', textTheme);
    matePut('textColor', textColor);
    matePut('disabledTextColor', disabledTextColor);
    matePut('color', color);
    matePut('disabledColor', disabledColor);
    matePut('focusColor', focusColor);
    matePut('hoverColor', hoverColor);
    matePut('highlightColor', highlightColor);
    matePut('splashColor', splashColor);
    matePut('colorBrightness', colorBrightness);
    matePut('elevation', elevation);
    matePut('focusElevation', focusElevation);
    matePut('hoverElevation', hoverElevation);
    matePut('highlightElevation', highlightElevation);
    matePut('disabledElevation', disabledElevation);
    matePut('padding', padding);
    matePut('visualDensity', visualDensity);
    matePut('shape', shape);
    matePut('clipBehavior', clipBehavior);
    matePut('focusNode', focusNode);
    matePut('autofocus', autofocus);
    matePut('materialTapTargetSize', materialTapTargetSize);
    matePut('animationDuration', animationDuration);
    matePut('minWidth', minWidth);
    matePut('height', height);
    matePut('enableFeedback', enableFeedback);
    matePut('child', child);
  }
}
