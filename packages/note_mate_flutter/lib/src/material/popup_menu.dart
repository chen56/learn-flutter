// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/popup_menu.dart';import 'package:flutter/src/foundation/key.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/painting/edge_insets.dart';import 'package:flutter/src/painting/text_style.dart';import 'package:flutter/src/material/material_state.dart';import 'package:flutter/src/services/mouse_cursor.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:flutter/src/painting/borders.dart';import 'package:flutter/src/rendering/box.dart';import 'package:flutter/src/material/popup_menu_theme.dart';import 'package:note/mate.dart' show Mate;/// class PopupMenuDivider extends PopupMenuEntry<Never>
class PopupMenuDivider$Mate extends PopupMenuDivider with Mate {/// PopupMenuDivider PopupMenuDivider({Key? key, double height = _kMenuDividerHeight})
PopupMenuDivider$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {double height = _kMenuDividerHeight} , hasDefaultValue:true, defaultValueCode:_kMenuDividerHeight
required double height, }) : super(key: key, height: height, ) { mateBuilder = (p) => PopupMenuDivider$Mate(key: p.get('key').build(), height: p.get('height').build(), );
matePut('key', key);
matePut('height', height); }

 }
/// class PopupMenuItem<T> extends PopupMenuEntry<T>
class PopupMenuItem$Mate<T> extends PopupMenuItem<T> with Mate {/// PopupMenuItem<T> PopupMenuItem({Key? key, T? value, void Function()? onTap, bool enabled = true, double height = kMinInteractiveDimension, EdgeInsets? padding, TextStyle? textStyle, MaterialStateProperty<TextStyle?>? labelTextStyle, MouseCursor? mouseCursor, required Widget? child})
PopupMenuItem$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {T? value} , hasDefaultValue:false, defaultValueCode:null
T? value, /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onTap, /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
required bool enabled, /// optionalParameters: {double height = kMinInteractiveDimension} , hasDefaultValue:true, defaultValueCode:kMinInteractiveDimension
required double height, /// optionalParameters: {EdgeInsets? padding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsets? padding, /// optionalParameters: {TextStyle? textStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? textStyle, /// optionalParameters: {MaterialStateProperty<TextStyle?>? labelTextStyle} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<TextStyle?>? labelTextStyle, /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
MouseCursor? mouseCursor, /// optionalParameters: {required Widget? child} , hasDefaultValue:false, defaultValueCode:null
required Widget? child, }) : super(key: key, value: value, onTap: onTap, enabled: enabled, height: height, padding: padding, textStyle: textStyle, labelTextStyle: labelTextStyle, mouseCursor: mouseCursor, child: child, ) { mateBuilder = (p) => PopupMenuItem$Mate<T>(key: p.get('key').build(), value: p.get('value').build(), onTap: p.get('onTap').build(), enabled: p.get('enabled').build(), height: p.get('height').build(), padding: p.get('padding').build(), textStyle: p.get('textStyle').build(), labelTextStyle: p.get('labelTextStyle').build(), mouseCursor: p.get('mouseCursor').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('value', value);
matePut('onTap', onTap);
matePut('enabled', enabled);
matePut('height', height);
matePut('padding', padding);
matePut('textStyle', textStyle);
matePut('labelTextStyle', labelTextStyle);
matePut('mouseCursor', mouseCursor);
matePut('child', child); }

 }
/// class CheckedPopupMenuItem<T> extends PopupMenuItem<T>
class CheckedPopupMenuItem$Mate<T> extends CheckedPopupMenuItem<T> with Mate {/// CheckedPopupMenuItem<T> CheckedPopupMenuItem({Key? key, T? value, bool checked = false, bool enabled = true, EdgeInsets? padding, double height = kMinInteractiveDimension, MouseCursor? mouseCursor, Widget? child})
CheckedPopupMenuItem$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {T? value} , hasDefaultValue:false, defaultValueCode:null
T? value, /// optionalParameters: {bool checked = false} , hasDefaultValue:true, defaultValueCode:false
required bool checked, /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
required bool enabled, /// optionalParameters: {EdgeInsets? padding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsets? padding, /// optionalParameters: {double height = kMinInteractiveDimension} , hasDefaultValue:true, defaultValueCode:kMinInteractiveDimension
required double height, /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
MouseCursor? mouseCursor, /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
Widget? child, }) : super(key: key, value: value, checked: checked, enabled: enabled, padding: padding, height: height, mouseCursor: mouseCursor, child: child, ) { mateBuilder = (p) => CheckedPopupMenuItem$Mate<T>(key: p.get('key').build(), value: p.get('value').build(), checked: p.get('checked').build(), enabled: p.get('enabled').build(), padding: p.get('padding').build(), height: p.get('height').build(), mouseCursor: p.get('mouseCursor').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('value', value);
matePut('checked', checked);
matePut('enabled', enabled);
matePut('padding', padding);
matePut('height', height);
matePut('mouseCursor', mouseCursor);
matePut('child', child); }

 }
/// class PopupMenuButton<T> extends StatefulWidget
class PopupMenuButton$Mate<T> extends PopupMenuButton<T> with Mate {/// PopupMenuButton<T> PopupMenuButton({Key? key, required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder, T? initialValue, void Function()? onOpened, void Function(T)? onSelected, void Function()? onCanceled, String? tooltip, double? elevation, Color? shadowColor, Color? surfaceTintColor, EdgeInsetsGeometry padding = const EdgeInsets.all(8.0), Widget? child, double? splashRadius, Widget? icon, double? iconSize, Offset offset = Offset.zero, bool enabled = true, ShapeBorder? shape, Color? color, bool? enableFeedback, BoxConstraints? constraints, PopupMenuPosition? position, Clip clipBehavior = Clip.none})
PopupMenuButton$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
required PopupMenuItemBuilder<T> itemBuilder, /// optionalParameters: {T? initialValue} , hasDefaultValue:false, defaultValueCode:null
T? initialValue, /// optionalParameters: {void Function()? onOpened} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onOpened, /// optionalParameters: {void Function(T)? onSelected} , hasDefaultValue:false, defaultValueCode:null
PopupMenuItemSelected<T>? onSelected, /// optionalParameters: {void Function()? onCanceled} , hasDefaultValue:false, defaultValueCode:null
PopupMenuCanceled? onCanceled, /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
String? tooltip, /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
double? elevation, /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
Color? shadowColor, /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
Color? surfaceTintColor, /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(8.0)} , hasDefaultValue:true, defaultValueCode:const EdgeInsets.all(8.0)
required EdgeInsetsGeometry padding, /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
Widget? child, /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
double? splashRadius, /// optionalParameters: {Widget? icon} , hasDefaultValue:false, defaultValueCode:null
Widget? icon, /// optionalParameters: {double? iconSize} , hasDefaultValue:false, defaultValueCode:null
double? iconSize, /// optionalParameters: {Offset offset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset offset, /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
required bool enabled, /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
ShapeBorder? shape, /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
Color? color, /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
bool? enableFeedback, /// optionalParameters: {BoxConstraints? constraints} , hasDefaultValue:false, defaultValueCode:null
BoxConstraints? constraints, /// optionalParameters: {PopupMenuPosition? position} , hasDefaultValue:false, defaultValueCode:null
PopupMenuPosition? position, /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
required Clip clipBehavior, }) : super(key: key, itemBuilder: itemBuilder, initialValue: initialValue, onOpened: onOpened, onSelected: onSelected, onCanceled: onCanceled, tooltip: tooltip, elevation: elevation, shadowColor: shadowColor, surfaceTintColor: surfaceTintColor, padding: padding, child: child, splashRadius: splashRadius, icon: icon, iconSize: iconSize, offset: offset, enabled: enabled, shape: shape, color: color, enableFeedback: enableFeedback, constraints: constraints, position: position, clipBehavior: clipBehavior, ) { mateBuilder = (p) => PopupMenuButton$Mate<T>(key: p.get('key').build(), itemBuilder: p.get('itemBuilder').build(), initialValue: p.get('initialValue').build(), onOpened: p.get('onOpened').build(), onSelected: p.get('onSelected').build(), onCanceled: p.get('onCanceled').build(), tooltip: p.get('tooltip').build(), elevation: p.get('elevation').build(), shadowColor: p.get('shadowColor').build(), surfaceTintColor: p.get('surfaceTintColor').build(), padding: p.get('padding').build(), child: p.get('child').build(), splashRadius: p.get('splashRadius').build(), icon: p.get('icon').build(), iconSize: p.get('iconSize').build(), offset: p.get('offset').build(), enabled: p.get('enabled').build(), shape: p.get('shape').build(), color: p.get('color').build(), enableFeedback: p.get('enableFeedback').build(), constraints: p.get('constraints').build(), position: p.get('position').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('key', key);
matePut('itemBuilder', itemBuilder);
matePut('initialValue', initialValue);
matePut('onOpened', onOpened);
matePut('onSelected', onSelected);
matePut('onCanceled', onCanceled);
matePut('tooltip', tooltip);
matePut('elevation', elevation);
matePut('shadowColor', shadowColor);
matePut('surfaceTintColor', surfaceTintColor);
matePut('padding', padding);
matePut('child', child);
matePut('splashRadius', splashRadius);
matePut('icon', icon);
matePut('iconSize', iconSize);
matePut('offset', offset);
matePut('enabled', enabled);
matePut('shape', shape);
matePut('color', color);
matePut('enableFeedback', enableFeedback);
matePut('constraints', constraints);
matePut('position', position);
matePut('clipBehavior', clipBehavior); }

 }
