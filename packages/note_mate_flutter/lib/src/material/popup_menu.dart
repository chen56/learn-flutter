// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/popup_menu.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/painting/text_style.dart' as _i6;
import 'package:flutter/src/material/material_state.dart' as _i7;
import 'package:flutter/src/services/mouse_cursor.dart' as _i8;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:flutter/animation.dart' as _i10;
import 'package:flutter/src/painting/borders.dart' as _i11;
import 'package:flutter/src/rendering/box.dart' as _i12;
import 'package:flutter/src/material/popup_menu_theme.dart' as _i13;

/// class PopupMenuDivider extends PopupMenuEntry<Never>
class PopupMenuDivider$Mate extends _i1.PopupMenuDivider with _i2.Mate {
  /// PopupMenuDivider PopupMenuDivider({Key? key, double height = _kMenuDividerHeight})
  PopupMenuDivider$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double height = _kMenuDividerHeight} , default:unprocessed=SimpleIdentifierImpl
    required double height,
  }) : super(
          key: key,
          height: height,
        ) {
    mateBuilderName = 'PopupMenuDivider';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PopupMenuDivider$Mate(
          key: p.get('key').build(),
          height: p.get('height').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
  }
}

/// class PopupMenuItem<T> extends PopupMenuEntry<T>
class PopupMenuItem$Mate<T> extends _i1.PopupMenuItem<T> with _i2.Mate {
  /// PopupMenuItem<T> PopupMenuItem({Key? key, T? value, void Function()? onTap, bool enabled = true, double height = kMinInteractiveDimension, EdgeInsets? padding, TextStyle? textStyle, MaterialStateProperty<TextStyle?>? labelTextStyle, MouseCursor? mouseCursor, required Widget? child})
  PopupMenuItem$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {T? value} , default:none
    T? value,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i4.VoidCallback? onTap,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {double height = kMinInteractiveDimension} , default:unprocessed=SimpleIdentifierImpl
    required double height,

    /// optionalParameters: {EdgeInsets? padding} , default:none
    _i5.EdgeInsets? padding,

    /// optionalParameters: {TextStyle? textStyle} , default:none
    _i6.TextStyle? textStyle,

    /// optionalParameters: {MaterialStateProperty<TextStyle?>? labelTextStyle} , default:none
    _i7.MaterialStateProperty<_i6.TextStyle?>? labelTextStyle,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {required Widget? child} , default:none
    required _i9.Widget? child,
  }) : super(
          key: key,
          value: value,
          onTap: onTap,
          enabled: enabled,
          height: height,
          padding: padding,
          textStyle: textStyle,
          labelTextStyle: labelTextStyle,
          mouseCursor: mouseCursor,
          child: child,
        ) {
    mateBuilderName = 'PopupMenuItem';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PopupMenuItem$Mate<T>(
          key: p.get('key').build(),
          value: p.get('value').build(),
          onTap: p.get('onTap').build(),
          enabled: p.get('enabled').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          textStyle: p.get('textStyle').build(),
          labelTextStyle: p.get('labelTextStyle').build(),
          mouseCursor: p.get('mouseCursor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'textStyle',
      textStyle,
      isNamed: true,
    );
    mateUse(
      'labelTextStyle',
      labelTextStyle,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class CheckedPopupMenuItem<T> extends PopupMenuItem<T>
class CheckedPopupMenuItem$Mate<T> extends _i1.CheckedPopupMenuItem<T> with _i2.Mate {
  /// CheckedPopupMenuItem<T> CheckedPopupMenuItem({Key? key, T? value, bool checked = false, bool enabled = true, EdgeInsets? padding, double height = kMinInteractiveDimension, MouseCursor? mouseCursor, Widget? child})
  CheckedPopupMenuItem$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {T? value} , default:none
    T? value,

    /// optionalParameters: {bool checked = false} , default:processed=BooleanLiteralImpl
    bool checked = false,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {EdgeInsets? padding} , default:none
    _i5.EdgeInsets? padding,

    /// optionalParameters: {double height = kMinInteractiveDimension} , default:unprocessed=SimpleIdentifierImpl
    required double height,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {Widget? child} , default:none
    _i9.Widget? child,
  }) : super(
          key: key,
          value: value,
          checked: checked,
          enabled: enabled,
          padding: padding,
          height: height,
          mouseCursor: mouseCursor,
          child: child,
        ) {
    mateBuilderName = 'CheckedPopupMenuItem';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => CheckedPopupMenuItem$Mate<T>(
          key: p.get('key').build(),
          value: p.get('value').build(),
          checked: p.get('checked').build(),
          enabled: p.get('enabled').build(),
          padding: p.get('padding').build(),
          height: p.get('height').build(),
          mouseCursor: p.get('mouseCursor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'checked',
      checked,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class PopupMenuButton<T> extends StatefulWidget
class PopupMenuButton$Mate<T> extends _i1.PopupMenuButton<T> with _i2.Mate {
  /// PopupMenuButton<T> PopupMenuButton({Key? key, required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder, T? initialValue, void Function()? onOpened, void Function(T)? onSelected, void Function()? onCanceled, String? tooltip, double? elevation, Color? shadowColor, Color? surfaceTintColor, EdgeInsetsGeometry padding = const EdgeInsets.all(8.0), Widget? child, double? splashRadius, Widget? icon, double? iconSize, Offset offset = Offset.zero, bool enabled = true, ShapeBorder? shape, Color? color, bool? enableFeedback, BoxConstraints? constraints, PopupMenuPosition? position, Clip clipBehavior = Clip.none})
  PopupMenuButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder} , default:none
    required _i1.PopupMenuItemBuilder<T> itemBuilder,

    /// optionalParameters: {T? initialValue} , default:none
    T? initialValue,

    /// optionalParameters: {void Function()? onOpened} , default:none
    _i4.VoidCallback? onOpened,

    /// optionalParameters: {void Function(T)? onSelected} , default:none
    _i1.PopupMenuItemSelected<T>? onSelected,

    /// optionalParameters: {void Function()? onCanceled} , default:none
    _i1.PopupMenuCanceled? onCanceled,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , default:none
    _i4.Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    _i4.Color? surfaceTintColor,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(8.0)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i5.EdgeInsetsGeometry padding,

    /// optionalParameters: {Widget? child} , default:none
    _i9.Widget? child,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {Widget? icon} , default:none
    _i9.Widget? icon,

    /// optionalParameters: {double? iconSize} , default:none
    double? iconSize,

    /// optionalParameters: {Offset offset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i4.Offset offset = _i10.Offset.zero,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    _i11.ShapeBorder? shape,

    /// optionalParameters: {Color? color} , default:none
    _i4.Color? color,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    _i12.BoxConstraints? constraints,

    /// optionalParameters: {PopupMenuPosition? position} , default:none
    _i13.PopupMenuPosition? position,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          initialValue: initialValue,
          onOpened: onOpened,
          onSelected: onSelected,
          onCanceled: onCanceled,
          tooltip: tooltip,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          padding: padding,
          child: child,
          splashRadius: splashRadius,
          icon: icon,
          iconSize: iconSize,
          offset: offset,
          enabled: enabled,
          shape: shape,
          color: color,
          enableFeedback: enableFeedback,
          constraints: constraints,
          position: position,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'PopupMenuButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PopupMenuButton$Mate<T>(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          initialValue: p.get('initialValue').build(),
          onOpened: p.get('onOpened').build(),
          onSelected: p.get('onSelected').build(),
          onCanceled: p.get('onCanceled').build(),
          tooltip: p.get('tooltip').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          padding: p.get('padding').build(),
          child: p.get('child').build(),
          splashRadius: p.get('splashRadius').build(),
          icon: p.get('icon').build(),
          iconSize: p.get('iconSize').build(),
          offset: p.get('offset').build(),
          enabled: p.get('enabled').build(),
          shape: p.get('shape').build(),
          color: p.get('color').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          position: p.get('position').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'itemBuilder',
      itemBuilder,
      isNamed: true,
    );
    mateUse(
      'initialValue',
      initialValue,
      isNamed: true,
    );
    mateUse(
      'onOpened',
      onOpened,
      isNamed: true,
    );
    mateUse(
      'onSelected',
      onSelected,
      isNamed: true,
    );
    mateUse(
      'onCanceled',
      onCanceled,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'shadowColor',
      shadowColor,
      isNamed: true,
    );
    mateUse(
      'surfaceTintColor',
      surfaceTintColor,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
    );
    mateUse(
      'offset',
      offset,
      isNamed: true,
      defaultValue: _i10.Offset.zero,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'constraints',
      constraints,
      isNamed: true,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
  }
}
