// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/dropdown.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/painting/alignment.dart' as _i5;
import 'package:flutter/src/widgets/framework.dart' as _i6;
import 'package:flutter/src/foundation/basic_types.dart' as _i7;
import 'package:flutter/src/painting/text_style.dart' as _i8;
import 'package:flutter/src/widgets/focus_manager.dart' as _i9;
import 'package:flutter/src/painting/border_radius.dart' as _i10;
import 'package:flutter/src/painting/edge_insets.dart' as _i11;
import 'package:flutter/src/material/input_decorator.dart' as _i12;
import 'package:flutter/src/widgets/form.dart' as _i13;

/// class DropdownMenuItem<T> extends _DropdownMenuItemContainer
class DropdownMenuItem$Mate<T> extends _i1.DropdownMenuItem<T> with _i2.Mate {
  /// DropdownMenuItem<T> DropdownMenuItem({Key? key, void Function()? onTap, T? value, bool enabled = true, AlignmentGeometry alignment = AlignmentDirectional.centerStart, required Widget child})
  DropdownMenuItem$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {T? value} , default:none
    super.value,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
          'alignment': _i2.BuilderArg<_i5.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i6.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DropdownMenuItem';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownMenuItem$Mate<T>(
          key: p.get('key').build(),
          onTap: p.get('onTap').build(),
          value: p.get('value').build(),
          enabled: p.get('enabled').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DropdownButtonHideUnderline extends InheritedWidget
class DropdownButtonHideUnderline$Mate extends _i1.DropdownButtonHideUnderline with _i2.Mate {
  /// DropdownButtonHideUnderline DropdownButtonHideUnderline({Key? key, required Widget child})
  DropdownButtonHideUnderline$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i6.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DropdownButtonHideUnderline';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownButtonHideUnderline$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DropdownButton<T> extends StatefulWidget
class DropdownButton$Mate<T> extends _i1.DropdownButton<T> with _i2.Mate {
  /// DropdownButton<T> DropdownButton({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? underline, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = false, bool isExpanded = false, double? itemHeight = kMinInteractiveDimension, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius, EdgeInsetsGeometry? padding})
  DropdownButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , default:none
    required super.items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , default:none
    super.selectedItemBuilder,

    /// optionalParameters: {T? value} , default:none
    super.value,

    /// optionalParameters: {Widget? hint} , default:none
    super.hint,

    /// optionalParameters: {Widget? disabledHint} , default:none
    super.disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required super.onChanged,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {int elevation = 8} , default:processed=IntegerLiteralImpl
    super.elevation,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {Widget? underline} , default:none
    super.underline,

    /// optionalParameters: {Widget? icon} , default:none
    super.icon,

    /// optionalParameters: {Color? iconDisabledColor} , default:none
    super.iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , default:none
    super.iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , default:processed=DoubleLiteralImpl
    super.iconSize,

    /// optionalParameters: {bool isDense = false} , default:processed=BooleanLiteralImpl
    super.isDense,

    /// optionalParameters: {bool isExpanded = false} , default:processed=BooleanLiteralImpl
    super.isExpanded,

    /// optionalParameters: {double? itemHeight = kMinInteractiveDimension} , default:unprocessed=SimpleIdentifierImpl
    super.itemHeight,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {Color? dropdownColor} , default:none
    super.dropdownColor,

    /// optionalParameters: {double? menuMaxHeight} , default:none
    super.menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    super.borderRadius,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'items': _i2.BuilderArg<List<_i1.DropdownMenuItem<T>>?>(
            name: 'items',
            init: items,
            isNamed: true,
          ),
          'selectedItemBuilder': _i2.BuilderArg<_i1.DropdownButtonBuilder?>(
            name: 'selectedItemBuilder',
            init: selectedItemBuilder,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'hint': _i2.BuilderArg<_i6.Widget?>(
            name: 'hint',
            init: hint,
            isNamed: true,
          ),
          'disabledHint': _i2.BuilderArg<_i6.Widget?>(
            name: 'disabledHint',
            init: disabledHint,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i7.ValueChanged<T?>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<int>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 8,
          ),
          'style': _i2.BuilderArg<_i8.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'underline': _i2.BuilderArg<_i6.Widget?>(
            name: 'underline',
            init: underline,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i6.Widget?>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'iconDisabledColor': _i2.BuilderArg<_i4.Color?>(
            name: 'iconDisabledColor',
            init: iconDisabledColor,
            isNamed: true,
          ),
          'iconEnabledColor': _i2.BuilderArg<_i4.Color?>(
            name: 'iconEnabledColor',
            init: iconEnabledColor,
            isNamed: true,
          ),
          'iconSize': _i2.BuilderArg<double>(
            name: 'iconSize',
            init: iconSize,
            isNamed: true,
            defaultValue: 24.0,
          ),
          'isDense': _i2.BuilderArg<bool>(
            name: 'isDense',
            init: isDense,
            isNamed: true,
            defaultValue: false,
          ),
          'isExpanded': _i2.BuilderArg<bool>(
            name: 'isExpanded',
            init: isExpanded,
            isNamed: true,
            defaultValue: false,
          ),
          'itemHeight': _i2.BuilderArg<double?>(
            name: 'itemHeight',
            init: itemHeight,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i4.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'dropdownColor': _i2.BuilderArg<_i4.Color?>(
            name: 'dropdownColor',
            init: dropdownColor,
            isNamed: true,
          ),
          'menuMaxHeight': _i2.BuilderArg<double?>(
            name: 'menuMaxHeight',
            init: menuMaxHeight,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i5.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i10.BorderRadius?>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i11.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DropdownButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownButton$Mate<T>(
          key: p.get('key').build(),
          items: p.get('items').build(),
          selectedItemBuilder: p.get('selectedItemBuilder').build(),
          value: p.get('value').build(),
          hint: p.get('hint').build(),
          disabledHint: p.get('disabledHint').build(),
          onChanged: p.get('onChanged').build(),
          onTap: p.get('onTap').build(),
          elevation: p.get('elevation').build(),
          style: p.get('style').build(),
          underline: p.get('underline').build(),
          icon: p.get('icon').build(),
          iconDisabledColor: p.get('iconDisabledColor').build(),
          iconEnabledColor: p.get('iconEnabledColor').build(),
          iconSize: p.get('iconSize').build(),
          isDense: p.get('isDense').build(),
          isExpanded: p.get('isExpanded').build(),
          itemHeight: p.get('itemHeight').build(),
          focusColor: p.get('focusColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          dropdownColor: p.get('dropdownColor').build(),
          menuMaxHeight: p.get('menuMaxHeight').build(),
          enableFeedback: p.get('enableFeedback').build(),
          alignment: p.get('alignment').build(),
          borderRadius: p.get('borderRadius').build(),
          padding: p.get('padding').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DropdownButtonFormField<T> extends FormField<T>
class DropdownButtonFormField$Mate<T> extends _i1.DropdownButtonFormField<T> with _i2.Mate {
  /// DropdownButtonFormField<T> DropdownButtonFormField({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = true, bool isExpanded = false, double? itemHeight, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, InputDecoration? decoration, void Function(T?)? onSaved, String? Function(T?)? validator, AutovalidateMode? autovalidateMode, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius, EdgeInsetsGeometry? padding})
  DropdownButtonFormField$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , default:none
    required super.items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , default:none
    super.selectedItemBuilder,

    /// optionalParameters: {T? value} , default:none
    super.value,

    /// optionalParameters: {Widget? hint} , default:none
    super.hint,

    /// optionalParameters: {Widget? disabledHint} , default:none
    super.disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required super.onChanged,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {int elevation = 8} , default:processed=IntegerLiteralImpl
    super.elevation,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {Widget? icon} , default:none
    super.icon,

    /// optionalParameters: {Color? iconDisabledColor} , default:none
    super.iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , default:none
    super.iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , default:processed=DoubleLiteralImpl
    super.iconSize,

    /// optionalParameters: {bool isDense = true} , default:processed=BooleanLiteralImpl
    super.isDense,

    /// optionalParameters: {bool isExpanded = false} , default:processed=BooleanLiteralImpl
    super.isExpanded,

    /// optionalParameters: {double? itemHeight} , default:none
    super.itemHeight,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {Color? dropdownColor} , default:none
    super.dropdownColor,

    /// optionalParameters: {InputDecoration? decoration} , default:none
    super.decoration,

    /// optionalParameters: {void Function(T?)? onSaved} , default:none
    super.onSaved,

    /// optionalParameters: {String? Function(T?)? validator} , default:none
    super.validator,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , default:none
    super.autovalidateMode,

    /// optionalParameters: {double? menuMaxHeight} , default:none
    super.menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    super.borderRadius,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'items': _i2.BuilderArg<List<_i1.DropdownMenuItem<T>>?>(
            name: 'items',
            init: items,
            isNamed: true,
          ),
          'selectedItemBuilder': _i2.BuilderArg<_i1.DropdownButtonBuilder?>(
            name: 'selectedItemBuilder',
            init: selectedItemBuilder,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'hint': _i2.BuilderArg<_i6.Widget?>(
            name: 'hint',
            init: hint,
            isNamed: true,
          ),
          'disabledHint': _i2.BuilderArg<_i6.Widget?>(
            name: 'disabledHint',
            init: disabledHint,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i7.ValueChanged<T?>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<int>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 8,
          ),
          'style': _i2.BuilderArg<_i8.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i6.Widget?>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'iconDisabledColor': _i2.BuilderArg<_i4.Color?>(
            name: 'iconDisabledColor',
            init: iconDisabledColor,
            isNamed: true,
          ),
          'iconEnabledColor': _i2.BuilderArg<_i4.Color?>(
            name: 'iconEnabledColor',
            init: iconEnabledColor,
            isNamed: true,
          ),
          'iconSize': _i2.BuilderArg<double>(
            name: 'iconSize',
            init: iconSize,
            isNamed: true,
            defaultValue: 24.0,
          ),
          'isDense': _i2.BuilderArg<bool>(
            name: 'isDense',
            init: isDense,
            isNamed: true,
            defaultValue: true,
          ),
          'isExpanded': _i2.BuilderArg<bool>(
            name: 'isExpanded',
            init: isExpanded,
            isNamed: true,
            defaultValue: false,
          ),
          'itemHeight': _i2.BuilderArg<double?>(
            name: 'itemHeight',
            init: itemHeight,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i4.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'dropdownColor': _i2.BuilderArg<_i4.Color?>(
            name: 'dropdownColor',
            init: dropdownColor,
            isNamed: true,
          ),
          'decoration': _i2.BuilderArg<_i12.InputDecoration?>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'onSaved': _i2.BuilderArg<_i13.FormFieldSetter<T>?>(
            name: 'onSaved',
            init: onSaved,
            isNamed: true,
          ),
          'validator': _i2.BuilderArg<_i13.FormFieldValidator<T>?>(
            name: 'validator',
            init: validator,
            isNamed: true,
          ),
          'autovalidateMode': _i2.BuilderArg<_i13.AutovalidateMode?>(
            name: 'autovalidateMode',
            init: autovalidateMode,
            isNamed: true,
          ),
          'menuMaxHeight': _i2.BuilderArg<double?>(
            name: 'menuMaxHeight',
            init: menuMaxHeight,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i5.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i10.BorderRadius?>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i11.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DropdownButtonFormField';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownButtonFormField$Mate<T>(
          key: p.get('key').build(),
          items: p.get('items').build(),
          selectedItemBuilder: p.get('selectedItemBuilder').build(),
          value: p.get('value').build(),
          hint: p.get('hint').build(),
          disabledHint: p.get('disabledHint').build(),
          onChanged: p.get('onChanged').build(),
          onTap: p.get('onTap').build(),
          elevation: p.get('elevation').build(),
          style: p.get('style').build(),
          icon: p.get('icon').build(),
          iconDisabledColor: p.get('iconDisabledColor').build(),
          iconEnabledColor: p.get('iconEnabledColor').build(),
          iconSize: p.get('iconSize').build(),
          isDense: p.get('isDense').build(),
          isExpanded: p.get('isExpanded').build(),
          itemHeight: p.get('itemHeight').build(),
          focusColor: p.get('focusColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          dropdownColor: p.get('dropdownColor').build(),
          decoration: p.get('decoration').build(),
          onSaved: p.get('onSaved').build(),
          validator: p.get('validator').build(),
          autovalidateMode: p.get('autovalidateMode').build(),
          menuMaxHeight: p.get('menuMaxHeight').build(),
          enableFeedback: p.get('enableFeedback').build(),
          alignment: p.get('alignment').build(),
          borderRadius: p.get('borderRadius').build(),
          padding: p.get('padding').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
