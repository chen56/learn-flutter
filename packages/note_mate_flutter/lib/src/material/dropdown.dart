// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/dropdown.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/painting/alignment.dart' as _i5;
import 'package:flutter/cupertino.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i7;
import 'package:flutter/src/foundation/basic_types.dart' as _i8;
import 'package:flutter/src/painting/text_style.dart' as _i9;
import 'package:flutter/src/widgets/focus_manager.dart' as _i10;
import 'package:flutter/src/painting/border_radius.dart' as _i11;
import 'package:flutter/src/painting/edge_insets.dart' as _i12;
import 'package:flutter/src/material/input_decorator.dart' as _i13;
import 'package:flutter/src/widgets/form.dart' as _i14;

/// class DropdownMenuItem<T> extends _DropdownMenuItemContainer
class DropdownMenuItem$Mate<T> extends _i1.DropdownMenuItem<T> with _i2.Mate {
  /// DropdownMenuItem<T> DropdownMenuItem({Key? key, void Function()? onTap, T? value, bool enabled = true, AlignmentGeometry alignment = AlignmentDirectional.centerStart, required Widget child})
  DropdownMenuItem$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i4.VoidCallback? onTap,

    /// optionalParameters: {T? value} , default:none
    T? value,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , default:processed=PrefixedIdentifierImpl
    _i5.AlignmentGeometry alignment = _i6.AlignmentDirectional.centerStart,

    /// optionalParameters: {required Widget child} , default:none
    required _i7.Widget child,
  }) : super(
          key: key,
          onTap: onTap,
          value: value,
          enabled: enabled,
          alignment: alignment,
          child: child,
        ) {
    mateBuilderName = 'DropdownMenuItem';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownMenuItem$Mate<T>(
          key: p.get('key').build(),
          onTap: p.get('onTap').build(),
          value: p.get('value').build(),
          enabled: p.get('enabled').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i6.AlignmentDirectional.centerStart,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class DropdownButtonHideUnderline extends InheritedWidget
class DropdownButtonHideUnderline$Mate extends _i1.DropdownButtonHideUnderline with _i2.Mate {
  /// DropdownButtonHideUnderline DropdownButtonHideUnderline({Key? key, required Widget child})
  DropdownButtonHideUnderline$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i7.Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'DropdownButtonHideUnderline';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownButtonHideUnderline$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class DropdownButton<T> extends StatefulWidget
class DropdownButton$Mate<T> extends _i1.DropdownButton<T> with _i2.Mate {
  /// DropdownButton<T> DropdownButton({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? underline, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = false, bool isExpanded = false, double? itemHeight = kMinInteractiveDimension, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius, EdgeInsetsGeometry? padding})
  DropdownButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , default:none
    required List<_i1.DropdownMenuItem<T>>? items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , default:none
    _i1.DropdownButtonBuilder? selectedItemBuilder,

    /// optionalParameters: {T? value} , default:none
    T? value,

    /// optionalParameters: {Widget? hint} , default:none
    _i7.Widget? hint,

    /// optionalParameters: {Widget? disabledHint} , default:none
    _i7.Widget? disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required _i8.ValueChanged<T?>? onChanged,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i4.VoidCallback? onTap,

    /// optionalParameters: {int elevation = 8} , default:processed=IntegerLiteralImpl
    int elevation = 8,

    /// optionalParameters: {TextStyle? style} , default:none
    _i9.TextStyle? style,

    /// optionalParameters: {Widget? underline} , default:none
    _i7.Widget? underline,

    /// optionalParameters: {Widget? icon} , default:none
    _i7.Widget? icon,

    /// optionalParameters: {Color? iconDisabledColor} , default:none
    _i4.Color? iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , default:none
    _i4.Color? iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , default:processed=DoubleLiteralImpl
    double iconSize = 24.0,

    /// optionalParameters: {bool isDense = false} , default:processed=BooleanLiteralImpl
    bool isDense = false,

    /// optionalParameters: {bool isExpanded = false} , default:processed=BooleanLiteralImpl
    bool isExpanded = false,

    /// optionalParameters: {double? itemHeight = kMinInteractiveDimension} , default:unprocessed=SimpleIdentifierImpl
    required double? itemHeight,

    /// optionalParameters: {Color? focusColor} , default:none
    _i4.Color? focusColor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i10.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {Color? dropdownColor} , default:none
    _i4.Color? dropdownColor,

    /// optionalParameters: {double? menuMaxHeight} , default:none
    double? menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , default:processed=PrefixedIdentifierImpl
    _i5.AlignmentGeometry alignment = _i6.AlignmentDirectional.centerStart,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    _i11.BorderRadius? borderRadius,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i12.EdgeInsetsGeometry? padding,
  }) : super(
          key: key,
          items: items,
          selectedItemBuilder: selectedItemBuilder,
          value: value,
          hint: hint,
          disabledHint: disabledHint,
          onChanged: onChanged,
          onTap: onTap,
          elevation: elevation,
          style: style,
          underline: underline,
          icon: icon,
          iconDisabledColor: iconDisabledColor,
          iconEnabledColor: iconEnabledColor,
          iconSize: iconSize,
          isDense: isDense,
          isExpanded: isExpanded,
          itemHeight: itemHeight,
          focusColor: focusColor,
          focusNode: focusNode,
          autofocus: autofocus,
          dropdownColor: dropdownColor,
          menuMaxHeight: menuMaxHeight,
          enableFeedback: enableFeedback,
          alignment: alignment,
          borderRadius: borderRadius,
          padding: padding,
        ) {
    mateBuilderName = 'DropdownButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownButton$Mate<T>(
          key: p.get('key').build(),
          items: p.get('items').build(),
          selectedItemBuilder: p.get('selectedItemBuilder').build(),
          value: p.get('value').build(),
          hint: p.get('hint').build(),
          disabledHint: p.get('disabledHint').build(),
          onChanged: p.get('onChanged').build(),
          onTap: p.get('onTap').build(),
          elevation: p.get('elevation').build(),
          style: p.get('style').build(),
          underline: p.get('underline').build(),
          icon: p.get('icon').build(),
          iconDisabledColor: p.get('iconDisabledColor').build(),
          iconEnabledColor: p.get('iconEnabledColor').build(),
          iconSize: p.get('iconSize').build(),
          isDense: p.get('isDense').build(),
          isExpanded: p.get('isExpanded').build(),
          itemHeight: p.get('itemHeight').build(),
          focusColor: p.get('focusColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          dropdownColor: p.get('dropdownColor').build(),
          menuMaxHeight: p.get('menuMaxHeight').build(),
          enableFeedback: p.get('enableFeedback').build(),
          alignment: p.get('alignment').build(),
          borderRadius: p.get('borderRadius').build(),
          padding: p.get('padding').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'items',
      items,
      isNamed: true,
    );
    mateUse(
      'selectedItemBuilder',
      selectedItemBuilder,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'hint',
      hint,
      isNamed: true,
    );
    mateUse(
      'disabledHint',
      disabledHint,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 8,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'underline',
      underline,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
    mateUse(
      'iconDisabledColor',
      iconDisabledColor,
      isNamed: true,
    );
    mateUse(
      'iconEnabledColor',
      iconEnabledColor,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
      defaultValue: 24.0,
    );
    mateUse(
      'isDense',
      isDense,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'isExpanded',
      isExpanded,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'itemHeight',
      itemHeight,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'dropdownColor',
      dropdownColor,
      isNamed: true,
    );
    mateUse(
      'menuMaxHeight',
      menuMaxHeight,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i6.AlignmentDirectional.centerStart,
    );
    mateUse(
      'borderRadius',
      borderRadius,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
  }
}

/// class DropdownButtonFormField<T> extends FormField<T>
class DropdownButtonFormField$Mate<T> extends _i1.DropdownButtonFormField<T> with _i2.Mate {
  /// DropdownButtonFormField<T> DropdownButtonFormField({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = true, bool isExpanded = false, double? itemHeight, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, InputDecoration? decoration, void Function(T?)? onSaved, String? Function(T?)? validator, AutovalidateMode? autovalidateMode, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius, EdgeInsetsGeometry? padding})
  DropdownButtonFormField$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , default:none
    required List<_i1.DropdownMenuItem<T>>? items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , default:none
    _i1.DropdownButtonBuilder? selectedItemBuilder,

    /// optionalParameters: {T? value} , default:none
    T? value,

    /// optionalParameters: {Widget? hint} , default:none
    _i7.Widget? hint,

    /// optionalParameters: {Widget? disabledHint} , default:none
    _i7.Widget? disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required _i8.ValueChanged<T?>? onChanged,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i4.VoidCallback? onTap,

    /// optionalParameters: {int elevation = 8} , default:processed=IntegerLiteralImpl
    int elevation = 8,

    /// optionalParameters: {TextStyle? style} , default:none
    _i9.TextStyle? style,

    /// optionalParameters: {Widget? icon} , default:none
    _i7.Widget? icon,

    /// optionalParameters: {Color? iconDisabledColor} , default:none
    _i4.Color? iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , default:none
    _i4.Color? iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , default:processed=DoubleLiteralImpl
    double iconSize = 24.0,

    /// optionalParameters: {bool isDense = true} , default:processed=BooleanLiteralImpl
    bool isDense = true,

    /// optionalParameters: {bool isExpanded = false} , default:processed=BooleanLiteralImpl
    bool isExpanded = false,

    /// optionalParameters: {double? itemHeight} , default:none
    double? itemHeight,

    /// optionalParameters: {Color? focusColor} , default:none
    _i4.Color? focusColor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i10.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {Color? dropdownColor} , default:none
    _i4.Color? dropdownColor,

    /// optionalParameters: {InputDecoration? decoration} , default:none
    _i13.InputDecoration? decoration,

    /// optionalParameters: {void Function(T?)? onSaved} , default:none
    _i14.FormFieldSetter<T>? onSaved,

    /// optionalParameters: {String? Function(T?)? validator} , default:none
    _i14.FormFieldValidator<T>? validator,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , default:none
    _i14.AutovalidateMode? autovalidateMode,

    /// optionalParameters: {double? menuMaxHeight} , default:none
    double? menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , default:processed=PrefixedIdentifierImpl
    _i5.AlignmentGeometry alignment = _i6.AlignmentDirectional.centerStart,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    _i11.BorderRadius? borderRadius,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i12.EdgeInsetsGeometry? padding,
  }) : super(
          key: key,
          items: items,
          selectedItemBuilder: selectedItemBuilder,
          value: value,
          hint: hint,
          disabledHint: disabledHint,
          onChanged: onChanged,
          onTap: onTap,
          elevation: elevation,
          style: style,
          icon: icon,
          iconDisabledColor: iconDisabledColor,
          iconEnabledColor: iconEnabledColor,
          iconSize: iconSize,
          isDense: isDense,
          isExpanded: isExpanded,
          itemHeight: itemHeight,
          focusColor: focusColor,
          focusNode: focusNode,
          autofocus: autofocus,
          dropdownColor: dropdownColor,
          decoration: decoration,
          onSaved: onSaved,
          validator: validator,
          autovalidateMode: autovalidateMode,
          menuMaxHeight: menuMaxHeight,
          enableFeedback: enableFeedback,
          alignment: alignment,
          borderRadius: borderRadius,
          padding: padding,
        ) {
    mateBuilderName = 'DropdownButtonFormField';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DropdownButtonFormField$Mate<T>(
          key: p.get('key').build(),
          items: p.get('items').build(),
          selectedItemBuilder: p.get('selectedItemBuilder').build(),
          value: p.get('value').build(),
          hint: p.get('hint').build(),
          disabledHint: p.get('disabledHint').build(),
          onChanged: p.get('onChanged').build(),
          onTap: p.get('onTap').build(),
          elevation: p.get('elevation').build(),
          style: p.get('style').build(),
          icon: p.get('icon').build(),
          iconDisabledColor: p.get('iconDisabledColor').build(),
          iconEnabledColor: p.get('iconEnabledColor').build(),
          iconSize: p.get('iconSize').build(),
          isDense: p.get('isDense').build(),
          isExpanded: p.get('isExpanded').build(),
          itemHeight: p.get('itemHeight').build(),
          focusColor: p.get('focusColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          dropdownColor: p.get('dropdownColor').build(),
          decoration: p.get('decoration').build(),
          onSaved: p.get('onSaved').build(),
          validator: p.get('validator').build(),
          autovalidateMode: p.get('autovalidateMode').build(),
          menuMaxHeight: p.get('menuMaxHeight').build(),
          enableFeedback: p.get('enableFeedback').build(),
          alignment: p.get('alignment').build(),
          borderRadius: p.get('borderRadius').build(),
          padding: p.get('padding').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'items',
      items,
      isNamed: true,
    );
    mateUse(
      'selectedItemBuilder',
      selectedItemBuilder,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'hint',
      hint,
      isNamed: true,
    );
    mateUse(
      'disabledHint',
      disabledHint,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 8,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
    mateUse(
      'iconDisabledColor',
      iconDisabledColor,
      isNamed: true,
    );
    mateUse(
      'iconEnabledColor',
      iconEnabledColor,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
      defaultValue: 24.0,
    );
    mateUse(
      'isDense',
      isDense,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'isExpanded',
      isExpanded,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'itemHeight',
      itemHeight,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'dropdownColor',
      dropdownColor,
      isNamed: true,
    );
    mateUse(
      'decoration',
      decoration,
      isNamed: true,
    );
    mateUse(
      'onSaved',
      onSaved,
      isNamed: true,
    );
    mateUse(
      'validator',
      validator,
      isNamed: true,
    );
    mateUse(
      'autovalidateMode',
      autovalidateMode,
      isNamed: true,
    );
    mateUse(
      'menuMaxHeight',
      menuMaxHeight,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i6.AlignmentDirectional.centerStart,
    );
    mateUse(
      'borderRadius',
      borderRadius,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
  }
}
