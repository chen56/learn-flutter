// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/dropdown.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/widgets/form.dart';

/// class DropdownMenuItem<T> extends _DropdownMenuItemContainer
class DropdownMenuItem$Mate<T> extends DropdownMenuItem<T> with Mate {
  /// DropdownMenuItem<T> DropdownMenuItem({Key? key, void Function()? onTap, T? value, bool enabled = true, AlignmentGeometry alignment = AlignmentDirectional.centerStart, required Widget child})
  DropdownMenuItem$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    VoidCallback? onTap,

    /// optionalParameters: {T? value} , defaultValue:none
    T? value,

    /// optionalParameters: {bool enabled = true} , defaultValue:Literal
    bool enabled = true,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , defaultValue:unprocessed
    required AlignmentGeometry alignment,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          onTap: onTap,
          value: value,
          enabled: enabled,
          alignment: alignment,
          child: child,
        ) {
    mateBuilder = (p) => DropdownMenuItem$Mate<T>(
          key: p.get('key').build(),
          onTap: p.get('onTap').build(),
          value: p.get('value').build(),
          enabled: p.get('enabled').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('onTap', onTap);
    mateUse('value', value);
    mateUse('enabled', enabled);
    mateUse('alignment', alignment);
    mateUse('child', child);
  }
}

/// class DropdownButtonHideUnderline extends InheritedWidget
class DropdownButtonHideUnderline$Mate extends DropdownButtonHideUnderline
    with Mate {
  /// DropdownButtonHideUnderline DropdownButtonHideUnderline({Key? key, required Widget child})
  DropdownButtonHideUnderline$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilder = (p) => DropdownButtonHideUnderline$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('child', child);
  }
}

/// class DropdownButton<T> extends StatefulWidget
class DropdownButton$Mate<T> extends DropdownButton<T> with Mate {
  /// DropdownButton<T> DropdownButton({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? underline, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = false, bool isExpanded = false, double? itemHeight = kMinInteractiveDimension, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius, EdgeInsetsGeometry? padding})
  DropdownButton$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , defaultValue:none
    required List<DropdownMenuItem<T>>? items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , defaultValue:none
    DropdownButtonBuilder? selectedItemBuilder,

    /// optionalParameters: {T? value} , defaultValue:none
    T? value,

    /// optionalParameters: {Widget? hint} , defaultValue:none
    Widget? hint,

    /// optionalParameters: {Widget? disabledHint} , defaultValue:none
    Widget? disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , defaultValue:none
    required ValueChanged<T?>? onChanged,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    VoidCallback? onTap,

    /// optionalParameters: {int elevation = 8} , defaultValue:Literal
    int elevation = 8,

    /// optionalParameters: {TextStyle? style} , defaultValue:none
    TextStyle? style,

    /// optionalParameters: {Widget? underline} , defaultValue:none
    Widget? underline,

    /// optionalParameters: {Widget? icon} , defaultValue:none
    Widget? icon,

    /// optionalParameters: {Color? iconDisabledColor} , defaultValue:none
    Color? iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , defaultValue:none
    Color? iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , defaultValue:Literal
    double iconSize = 24.0,

    /// optionalParameters: {bool isDense = false} , defaultValue:Literal
    bool isDense = false,

    /// optionalParameters: {bool isExpanded = false} , defaultValue:Literal
    bool isExpanded = false,

    /// optionalParameters: {double? itemHeight = kMinInteractiveDimension} , defaultValue:unprocessed
    double? itemHeight,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {Color? dropdownColor} , defaultValue:none
    Color? dropdownColor,

    /// optionalParameters: {double? menuMaxHeight} , defaultValue:none
    double? menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , defaultValue:none
    bool? enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , defaultValue:unprocessed
    required AlignmentGeometry alignment,

    /// optionalParameters: {BorderRadius? borderRadius} , defaultValue:none
    BorderRadius? borderRadius,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,
  }) : super(
          key: key,
          items: items,
          selectedItemBuilder: selectedItemBuilder,
          value: value,
          hint: hint,
          disabledHint: disabledHint,
          onChanged: onChanged,
          onTap: onTap,
          elevation: elevation,
          style: style,
          underline: underline,
          icon: icon,
          iconDisabledColor: iconDisabledColor,
          iconEnabledColor: iconEnabledColor,
          iconSize: iconSize,
          isDense: isDense,
          isExpanded: isExpanded,
          itemHeight: itemHeight,
          focusColor: focusColor,
          focusNode: focusNode,
          autofocus: autofocus,
          dropdownColor: dropdownColor,
          menuMaxHeight: menuMaxHeight,
          enableFeedback: enableFeedback,
          alignment: alignment,
          borderRadius: borderRadius,
          padding: padding,
        ) {
    mateBuilder = (p) => DropdownButton$Mate<T>(
          key: p.get('key').build(),
          items: p.get('items').build(),
          selectedItemBuilder: p.get('selectedItemBuilder').build(),
          value: p.get('value').build(),
          hint: p.get('hint').build(),
          disabledHint: p.get('disabledHint').build(),
          onChanged: p.get('onChanged').build(),
          onTap: p.get('onTap').build(),
          elevation: p.get('elevation').build(),
          style: p.get('style').build(),
          underline: p.get('underline').build(),
          icon: p.get('icon').build(),
          iconDisabledColor: p.get('iconDisabledColor').build(),
          iconEnabledColor: p.get('iconEnabledColor').build(),
          iconSize: p.get('iconSize').build(),
          isDense: p.get('isDense').build(),
          isExpanded: p.get('isExpanded').build(),
          itemHeight: p.get('itemHeight').build(),
          focusColor: p.get('focusColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          dropdownColor: p.get('dropdownColor').build(),
          menuMaxHeight: p.get('menuMaxHeight').build(),
          enableFeedback: p.get('enableFeedback').build(),
          alignment: p.get('alignment').build(),
          borderRadius: p.get('borderRadius').build(),
          padding: p.get('padding').build(),
        );
    mateUse('key', key);
    mateUse('items', items);
    mateUse('selectedItemBuilder', selectedItemBuilder);
    mateUse('value', value);
    mateUse('hint', hint);
    mateUse('disabledHint', disabledHint);
    mateUse('onChanged', onChanged);
    mateUse('onTap', onTap);
    mateUse('elevation', elevation);
    mateUse('style', style);
    mateUse('underline', underline);
    mateUse('icon', icon);
    mateUse('iconDisabledColor', iconDisabledColor);
    mateUse('iconEnabledColor', iconEnabledColor);
    mateUse('iconSize', iconSize);
    mateUse('isDense', isDense);
    mateUse('isExpanded', isExpanded);
    mateUse('itemHeight', itemHeight);
    mateUse('focusColor', focusColor);
    mateUse('focusNode', focusNode);
    mateUse('autofocus', autofocus);
    mateUse('dropdownColor', dropdownColor);
    mateUse('menuMaxHeight', menuMaxHeight);
    mateUse('enableFeedback', enableFeedback);
    mateUse('alignment', alignment);
    mateUse('borderRadius', borderRadius);
    mateUse('padding', padding);
  }
}

/// class DropdownButtonFormField<T> extends FormField<T>
class DropdownButtonFormField$Mate<T> extends DropdownButtonFormField<T>
    with Mate {
  /// DropdownButtonFormField<T> DropdownButtonFormField({Key? key, required List<DropdownMenuItem<T>>? items, List<Widget> Function(BuildContext)? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required void Function(T?)? onChanged, void Function()? onTap, int elevation = 8, TextStyle? style, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = true, bool isExpanded = false, double? itemHeight, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, InputDecoration? decoration, void Function(T?)? onSaved, String? Function(T?)? validator, AutovalidateMode? autovalidateMode, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius, EdgeInsetsGeometry? padding})
  DropdownButtonFormField$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<DropdownMenuItem<T>>? items} , defaultValue:none
    required List<DropdownMenuItem<T>>? items,

    /// optionalParameters: {List<Widget> Function(BuildContext)? selectedItemBuilder} , defaultValue:none
    DropdownButtonBuilder? selectedItemBuilder,

    /// optionalParameters: {T? value} , defaultValue:none
    T? value,

    /// optionalParameters: {Widget? hint} , defaultValue:none
    Widget? hint,

    /// optionalParameters: {Widget? disabledHint} , defaultValue:none
    Widget? disabledHint,

    /// optionalParameters: {required void Function(T?)? onChanged} , defaultValue:none
    required ValueChanged<T?>? onChanged,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    VoidCallback? onTap,

    /// optionalParameters: {int elevation = 8} , defaultValue:Literal
    int elevation = 8,

    /// optionalParameters: {TextStyle? style} , defaultValue:none
    TextStyle? style,

    /// optionalParameters: {Widget? icon} , defaultValue:none
    Widget? icon,

    /// optionalParameters: {Color? iconDisabledColor} , defaultValue:none
    Color? iconDisabledColor,

    /// optionalParameters: {Color? iconEnabledColor} , defaultValue:none
    Color? iconEnabledColor,

    /// optionalParameters: {double iconSize = 24.0} , defaultValue:Literal
    double iconSize = 24.0,

    /// optionalParameters: {bool isDense = true} , defaultValue:Literal
    bool isDense = true,

    /// optionalParameters: {bool isExpanded = false} , defaultValue:Literal
    bool isExpanded = false,

    /// optionalParameters: {double? itemHeight} , defaultValue:none
    double? itemHeight,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {Color? dropdownColor} , defaultValue:none
    Color? dropdownColor,

    /// optionalParameters: {InputDecoration? decoration} , defaultValue:none
    InputDecoration? decoration,

    /// optionalParameters: {void Function(T?)? onSaved} , defaultValue:none
    FormFieldSetter<T>? onSaved,

    /// optionalParameters: {String? Function(T?)? validator} , defaultValue:none
    FormFieldValidator<T>? validator,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , defaultValue:none
    AutovalidateMode? autovalidateMode,

    /// optionalParameters: {double? menuMaxHeight} , defaultValue:none
    double? menuMaxHeight,

    /// optionalParameters: {bool? enableFeedback} , defaultValue:none
    bool? enableFeedback,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.centerStart} , defaultValue:unprocessed
    required AlignmentGeometry alignment,

    /// optionalParameters: {BorderRadius? borderRadius} , defaultValue:none
    BorderRadius? borderRadius,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,
  }) : super(
          key: key,
          items: items,
          selectedItemBuilder: selectedItemBuilder,
          value: value,
          hint: hint,
          disabledHint: disabledHint,
          onChanged: onChanged,
          onTap: onTap,
          elevation: elevation,
          style: style,
          icon: icon,
          iconDisabledColor: iconDisabledColor,
          iconEnabledColor: iconEnabledColor,
          iconSize: iconSize,
          isDense: isDense,
          isExpanded: isExpanded,
          itemHeight: itemHeight,
          focusColor: focusColor,
          focusNode: focusNode,
          autofocus: autofocus,
          dropdownColor: dropdownColor,
          decoration: decoration,
          onSaved: onSaved,
          validator: validator,
          autovalidateMode: autovalidateMode,
          menuMaxHeight: menuMaxHeight,
          enableFeedback: enableFeedback,
          alignment: alignment,
          borderRadius: borderRadius,
          padding: padding,
        ) {
    mateBuilder = (p) => DropdownButtonFormField$Mate<T>(
          key: p.get('key').build(),
          items: p.get('items').build(),
          selectedItemBuilder: p.get('selectedItemBuilder').build(),
          value: p.get('value').build(),
          hint: p.get('hint').build(),
          disabledHint: p.get('disabledHint').build(),
          onChanged: p.get('onChanged').build(),
          onTap: p.get('onTap').build(),
          elevation: p.get('elevation').build(),
          style: p.get('style').build(),
          icon: p.get('icon').build(),
          iconDisabledColor: p.get('iconDisabledColor').build(),
          iconEnabledColor: p.get('iconEnabledColor').build(),
          iconSize: p.get('iconSize').build(),
          isDense: p.get('isDense').build(),
          isExpanded: p.get('isExpanded').build(),
          itemHeight: p.get('itemHeight').build(),
          focusColor: p.get('focusColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          dropdownColor: p.get('dropdownColor').build(),
          decoration: p.get('decoration').build(),
          onSaved: p.get('onSaved').build(),
          validator: p.get('validator').build(),
          autovalidateMode: p.get('autovalidateMode').build(),
          menuMaxHeight: p.get('menuMaxHeight').build(),
          enableFeedback: p.get('enableFeedback').build(),
          alignment: p.get('alignment').build(),
          borderRadius: p.get('borderRadius').build(),
          padding: p.get('padding').build(),
        );
    mateUse('key', key);
    mateUse('items', items);
    mateUse('selectedItemBuilder', selectedItemBuilder);
    mateUse('value', value);
    mateUse('hint', hint);
    mateUse('disabledHint', disabledHint);
    mateUse('onChanged', onChanged);
    mateUse('onTap', onTap);
    mateUse('elevation', elevation);
    mateUse('style', style);
    mateUse('icon', icon);
    mateUse('iconDisabledColor', iconDisabledColor);
    mateUse('iconEnabledColor', iconEnabledColor);
    mateUse('iconSize', iconSize);
    mateUse('isDense', isDense);
    mateUse('isExpanded', isExpanded);
    mateUse('itemHeight', itemHeight);
    mateUse('focusColor', focusColor);
    mateUse('focusNode', focusNode);
    mateUse('autofocus', autofocus);
    mateUse('dropdownColor', dropdownColor);
    mateUse('decoration', decoration);
    mateUse('onSaved', onSaved);
    mateUse('validator', validator);
    mateUse('autovalidateMode', autovalidateMode);
    mateUse('menuMaxHeight', menuMaxHeight);
    mateUse('enableFeedback', enableFeedback);
    mateUse('alignment', alignment);
    mateUse('borderRadius', borderRadius);
    mateUse('padding', padding);
  }
}
