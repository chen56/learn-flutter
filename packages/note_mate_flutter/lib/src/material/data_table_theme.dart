// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/data_table_theme.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/material/material_state.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class DataTableThemeData with Diagnosticable
class DataTableThemeData$Mate extends DataTableThemeData with Mate {
  /// DataTableThemeData DataTableThemeData({Decoration? decoration, MaterialStateProperty<Color?>? dataRowColor, double? dataRowHeight, double? dataRowMinHeight, double? dataRowMaxHeight, TextStyle? dataTextStyle, MaterialStateProperty<Color?>? headingRowColor, double? headingRowHeight, TextStyle? headingTextStyle, double? horizontalMargin, double? columnSpacing, double? dividerThickness, double? checkboxHorizontalMargin})
  DataTableThemeData$Mate({
    /// optionalParameters: {Decoration? decoration} , defaultValue:none
    Decoration? decoration,

    /// optionalParameters: {MaterialStateProperty<Color?>? dataRowColor} , defaultValue:none
    MaterialStateProperty<Color?>? dataRowColor,

    /// optionalParameters: {double? dataRowMinHeight} , defaultValue:none
    double? dataRowMinHeight,

    /// optionalParameters: {double? dataRowMaxHeight} , defaultValue:none
    double? dataRowMaxHeight,

    /// optionalParameters: {TextStyle? dataTextStyle} , defaultValue:none
    TextStyle? dataTextStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? headingRowColor} , defaultValue:none
    MaterialStateProperty<Color?>? headingRowColor,

    /// optionalParameters: {double? headingRowHeight} , defaultValue:none
    double? headingRowHeight,

    /// optionalParameters: {TextStyle? headingTextStyle} , defaultValue:none
    TextStyle? headingTextStyle,

    /// optionalParameters: {double? horizontalMargin} , defaultValue:none
    double? horizontalMargin,

    /// optionalParameters: {double? columnSpacing} , defaultValue:none
    double? columnSpacing,

    /// optionalParameters: {double? dividerThickness} , defaultValue:none
    double? dividerThickness,

    /// optionalParameters: {double? checkboxHorizontalMargin} , defaultValue:none
    double? checkboxHorizontalMargin,
  }) : super(
          decoration: decoration,
          dataRowColor: dataRowColor,
          dataRowMinHeight: dataRowMinHeight,
          dataRowMaxHeight: dataRowMaxHeight,
          dataTextStyle: dataTextStyle,
          headingRowColor: headingRowColor,
          headingRowHeight: headingRowHeight,
          headingTextStyle: headingTextStyle,
          horizontalMargin: horizontalMargin,
          columnSpacing: columnSpacing,
          dividerThickness: dividerThickness,
          checkboxHorizontalMargin: checkboxHorizontalMargin,
        ) {
    mateBuilder = (p) => DataTableThemeData$Mate(
          decoration: p.get('decoration').build(),
          dataRowColor: p.get('dataRowColor').build(),
          dataRowMinHeight: p.get('dataRowMinHeight').build(),
          dataRowMaxHeight: p.get('dataRowMaxHeight').build(),
          dataTextStyle: p.get('dataTextStyle').build(),
          headingRowColor: p.get('headingRowColor').build(),
          headingRowHeight: p.get('headingRowHeight').build(),
          headingTextStyle: p.get('headingTextStyle').build(),
          horizontalMargin: p.get('horizontalMargin').build(),
          columnSpacing: p.get('columnSpacing').build(),
          dividerThickness: p.get('dividerThickness').build(),
          checkboxHorizontalMargin: p.get('checkboxHorizontalMargin').build(),
        );
    mateDeclare('decoration', decoration);
    mateDeclare('dataRowColor', dataRowColor);
    mateDeclare('dataRowMinHeight', dataRowMinHeight);
    mateDeclare('dataRowMaxHeight', dataRowMaxHeight);
    mateDeclare('dataTextStyle', dataTextStyle);
    mateDeclare('headingRowColor', headingRowColor);
    mateDeclare('headingRowHeight', headingRowHeight);
    mateDeclare('headingTextStyle', headingTextStyle);
    mateDeclare('horizontalMargin', horizontalMargin);
    mateDeclare('columnSpacing', columnSpacing);
    mateDeclare('dividerThickness', dividerThickness);
    mateDeclare('checkboxHorizontalMargin', checkboxHorizontalMargin);
  }
}

/// class DataTableTheme extends InheritedWidget
class DataTableTheme$Mate extends DataTableTheme with Mate {
  /// DataTableTheme DataTableTheme({Key? key, required DataTableThemeData data, required Widget child})
  DataTableTheme$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required DataTableThemeData data} , defaultValue:none
    required DataTableThemeData data,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateBuilder = (p) => DataTableTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    mateDeclare('key', key);
    mateDeclare('data', data);
    mateDeclare('child', child);
  }
}
