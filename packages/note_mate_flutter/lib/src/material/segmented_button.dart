// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/segmented_button.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/button_style.dart';

/// class ButtonSegment<T>
class ButtonSegment$Mate<T> extends ButtonSegment<T> with Mate {
  /// ButtonSegment<T> ButtonSegment({required T value, Widget? icon, Widget? label, bool enabled = true})
  ButtonSegment$Mate({
    /// optionalParameters: {required T value} , default:none
    required T value,

    /// optionalParameters: {Widget? icon} , default:none
    Widget? icon,

    /// optionalParameters: {Widget? label} , default:none
    Widget? label,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,
  }) : super(
          value: value,
          icon: icon,
          label: label,
          enabled: enabled,
        ) {
    mateBuilderName = 'ButtonSegment';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonSegment$Mate<T>(
          value: p.get('value').build(),
          icon: p.get('icon').build(),
          label: p.get('label').build(),
          enabled: p.get('enabled').build(),
        );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class SegmentedButton<T> extends StatelessWidget
class SegmentedButton$Mate<T> extends SegmentedButton<T> with Mate {
  /// SegmentedButton<T> SegmentedButton({Key? key, required List<ButtonSegment<T>> segments, required Set<T> selected, void Function(Set<T>)? onSelectionChanged, bool multiSelectionEnabled = false, bool emptySelectionAllowed = false, ButtonStyle? style, bool showSelectedIcon = true, Widget? selectedIcon})
  SegmentedButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required List<ButtonSegment<T>> segments} , default:none
    required List<ButtonSegment<T>> segments,

    /// optionalParameters: {required Set<T> selected} , default:none
    required Set<T> selected,

    /// optionalParameters: {void Function(Set<T>)? onSelectionChanged} , default:none
    void Function(Set<T>)? onSelectionChanged,

    /// optionalParameters: {bool multiSelectionEnabled = false} , default:processed=BooleanLiteralImpl
    bool multiSelectionEnabled = false,

    /// optionalParameters: {bool emptySelectionAllowed = false} , default:processed=BooleanLiteralImpl
    bool emptySelectionAllowed = false,

    /// optionalParameters: {ButtonStyle? style} , default:none
    ButtonStyle? style,

    /// optionalParameters: {bool showSelectedIcon = true} , default:processed=BooleanLiteralImpl
    bool showSelectedIcon = true,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    Widget? selectedIcon,
  }) : super(
          key: key,
          segments: segments,
          selected: selected,
          onSelectionChanged: onSelectionChanged,
          multiSelectionEnabled: multiSelectionEnabled,
          emptySelectionAllowed: emptySelectionAllowed,
          style: style,
          showSelectedIcon: showSelectedIcon,
          selectedIcon: selectedIcon,
        ) {
    mateBuilderName = 'SegmentedButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SegmentedButton$Mate<T>(
          key: p.get('key').build(),
          segments: p.get('segments').build(),
          selected: p.get('selected').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          multiSelectionEnabled: p.get('multiSelectionEnabled').build(),
          emptySelectionAllowed: p.get('emptySelectionAllowed').build(),
          style: p.get('style').build(),
          showSelectedIcon: p.get('showSelectedIcon').build(),
          selectedIcon: p.get('selectedIcon').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'segments',
      segments,
      isNamed: true,
    );
    mateUse(
      'selected',
      selected,
      isNamed: true,
    );
    mateUse(
      'onSelectionChanged',
      onSelectionChanged,
      isNamed: true,
    );
    mateUse(
      'multiSelectionEnabled',
      multiSelectionEnabled,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'emptySelectionAllowed',
      emptySelectionAllowed,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'showSelectedIcon',
      showSelectedIcon,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'selectedIcon',
      selectedIcon,
      isNamed: true,
    );
  }
}
