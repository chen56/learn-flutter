// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/button_bar.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/rendering/flex.dart';import 'package:flutter/src/material/button_theme.dart';import 'dart:core';import 'package:flutter/src/painting/edge_insets.dart';import 'package:flutter/src/painting/basic_types.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:note/mate.dart' show Mate;/// class ButtonBar extends StatelessWidget
class ButtonBar$Mate extends ButtonBar with Mate {/// ButtonBar ButtonBar({Key? key, MainAxisAlignment? alignment, MainAxisSize? mainAxisSize, ButtonTextTheme? buttonTextTheme, double? buttonMinWidth, double? buttonHeight, EdgeInsetsGeometry? buttonPadding, bool? buttonAlignedDropdown, ButtonBarLayoutBehavior? layoutBehavior, VerticalDirection? overflowDirection, double? overflowButtonSpacing, List<Widget> children = const <Widget>[]})
ButtonBar$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {MainAxisAlignment? alignment} , hasDefaultValue:false, defaultValueCode:null
MainAxisAlignment? alignment, /// optionalParameters: {MainAxisSize? mainAxisSize} , hasDefaultValue:false, defaultValueCode:null
MainAxisSize? mainAxisSize, /// optionalParameters: {ButtonTextTheme? buttonTextTheme} , hasDefaultValue:false, defaultValueCode:null
ButtonTextTheme? buttonTextTheme, /// optionalParameters: {double? buttonMinWidth} , hasDefaultValue:false, defaultValueCode:null
double? buttonMinWidth, /// optionalParameters: {double? buttonHeight} , hasDefaultValue:false, defaultValueCode:null
double? buttonHeight, /// optionalParameters: {EdgeInsetsGeometry? buttonPadding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? buttonPadding, /// optionalParameters: {bool? buttonAlignedDropdown} , hasDefaultValue:false, defaultValueCode:null
bool? buttonAlignedDropdown, /// optionalParameters: {ButtonBarLayoutBehavior? layoutBehavior} , hasDefaultValue:false, defaultValueCode:null
ButtonBarLayoutBehavior? layoutBehavior, /// optionalParameters: {VerticalDirection? overflowDirection} , hasDefaultValue:false, defaultValueCode:null
VerticalDirection? overflowDirection, /// optionalParameters: {double? overflowButtonSpacing} , hasDefaultValue:false, defaultValueCode:null
double? overflowButtonSpacing, /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
required List<Widget> children, }) : super(key: key, alignment: alignment, mainAxisSize: mainAxisSize, buttonTextTheme: buttonTextTheme, buttonMinWidth: buttonMinWidth, buttonHeight: buttonHeight, buttonPadding: buttonPadding, buttonAlignedDropdown: buttonAlignedDropdown, layoutBehavior: layoutBehavior, overflowDirection: overflowDirection, overflowButtonSpacing: overflowButtonSpacing, children: children, ) { mateBuilder = (p) => ButtonBar$Mate(key: p.get('key').build(), alignment: p.get('alignment').build(), mainAxisSize: p.get('mainAxisSize').build(), buttonTextTheme: p.get('buttonTextTheme').build(), buttonMinWidth: p.get('buttonMinWidth').build(), buttonHeight: p.get('buttonHeight').build(), buttonPadding: p.get('buttonPadding').build(), buttonAlignedDropdown: p.get('buttonAlignedDropdown').build(), layoutBehavior: p.get('layoutBehavior').build(), overflowDirection: p.get('overflowDirection').build(), overflowButtonSpacing: p.get('overflowButtonSpacing').build(), children: p.get('children').build(), );
matePut('key', key);
matePut('alignment', alignment);
matePut('mainAxisSize', mainAxisSize);
matePut('buttonTextTheme', buttonTextTheme);
matePut('buttonMinWidth', buttonMinWidth);
matePut('buttonHeight', buttonHeight);
matePut('buttonPadding', buttonPadding);
matePut('buttonAlignedDropdown', buttonAlignedDropdown);
matePut('layoutBehavior', layoutBehavior);
matePut('overflowDirection', overflowDirection);
matePut('overflowButtonSpacing', overflowButtonSpacing);
matePut('children', children); }

 }
