// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/paginated_data_table.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/material/data_table.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:flutter/src/material/data_table_source.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';

/// class PaginatedDataTable extends StatefulWidget
class PaginatedDataTable$Mate extends PaginatedDataTable with Mate {
  /// PaginatedDataTable PaginatedDataTable({Key? key, Widget? header, List<Widget>? actions, required List<DataColumn> columns, int? sortColumnIndex, bool sortAscending = true, void Function(bool?)? onSelectAll, double? dataRowHeight, double? dataRowMinHeight, double? dataRowMaxHeight, double headingRowHeight = 56.0, double horizontalMargin = 24.0, double columnSpacing = 56.0, bool showCheckboxColumn = true, bool showFirstLastButtons = false, int? initialFirstRowIndex = 0, void Function(int)? onPageChanged, int rowsPerPage = defaultRowsPerPage, List<int> availableRowsPerPage = const <int>[defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10], void Function(int?)? onRowsPerPageChanged, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Color? arrowHeadColor, required DataTableSource source, double? checkboxHorizontalMargin, ScrollController? controller, bool? primary})
  PaginatedDataTable$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? header} , hasDefaultValue:false, defaultValueCode:null
    Widget? header,

    /// optionalParameters: {List<Widget>? actions} , hasDefaultValue:false, defaultValueCode:null
    List<Widget>? actions,

    /// optionalParameters: {required List<DataColumn> columns} , hasDefaultValue:false, defaultValueCode:null
    required List<DataColumn> columns,

    /// optionalParameters: {int? sortColumnIndex} , hasDefaultValue:false, defaultValueCode:null
    int? sortColumnIndex,

    /// optionalParameters: {bool sortAscending = true} , hasDefaultValue:true, defaultValueCode:true
    required bool sortAscending,

    /// optionalParameters: {void Function(bool?)? onSelectAll} , hasDefaultValue:false, defaultValueCode:null
    ValueSetter<bool?>? onSelectAll,

    /// optionalParameters: {double? dataRowMinHeight} , hasDefaultValue:false, defaultValueCode:null
    double? dataRowMinHeight,

    /// optionalParameters: {double? dataRowMaxHeight} , hasDefaultValue:false, defaultValueCode:null
    double? dataRowMaxHeight,

    /// optionalParameters: {double headingRowHeight = 56.0} , hasDefaultValue:true, defaultValueCode:56.0
    required double headingRowHeight,

    /// optionalParameters: {double horizontalMargin = 24.0} , hasDefaultValue:true, defaultValueCode:24.0
    required double horizontalMargin,

    /// optionalParameters: {double columnSpacing = 56.0} , hasDefaultValue:true, defaultValueCode:56.0
    required double columnSpacing,

    /// optionalParameters: {bool showCheckboxColumn = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showCheckboxColumn,

    /// optionalParameters: {bool showFirstLastButtons = false} , hasDefaultValue:true, defaultValueCode:false
    required bool showFirstLastButtons,

    /// optionalParameters: {int? initialFirstRowIndex = 0} , hasDefaultValue:true, defaultValueCode:0
    int? initialFirstRowIndex,

    /// optionalParameters: {void Function(int)? onPageChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<int>? onPageChanged,

    /// optionalParameters: {int rowsPerPage = defaultRowsPerPage} , hasDefaultValue:true, defaultValueCode:defaultRowsPerPage
    required int rowsPerPage,

    /// optionalParameters: {List<int> availableRowsPerPage = const <int>[defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10]} , hasDefaultValue:true, defaultValueCode:const <int>[defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10]
    required List<int> availableRowsPerPage,

    /// optionalParameters: {void Function(int?)? onRowsPerPageChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<int?>? onRowsPerPageChanged,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {Color? arrowHeadColor} , hasDefaultValue:false, defaultValueCode:null
    Color? arrowHeadColor,

    /// optionalParameters: {required DataTableSource source} , hasDefaultValue:false, defaultValueCode:null
    required DataTableSource source,

    /// optionalParameters: {double? checkboxHorizontalMargin} , hasDefaultValue:false, defaultValueCode:null
    double? checkboxHorizontalMargin,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,
  }) : super(
          key: key,
          header: header,
          actions: actions,
          columns: columns,
          sortColumnIndex: sortColumnIndex,
          sortAscending: sortAscending,
          onSelectAll: onSelectAll,
          dataRowMinHeight: dataRowMinHeight,
          dataRowMaxHeight: dataRowMaxHeight,
          headingRowHeight: headingRowHeight,
          horizontalMargin: horizontalMargin,
          columnSpacing: columnSpacing,
          showCheckboxColumn: showCheckboxColumn,
          showFirstLastButtons: showFirstLastButtons,
          initialFirstRowIndex: initialFirstRowIndex,
          onPageChanged: onPageChanged,
          rowsPerPage: rowsPerPage,
          availableRowsPerPage: availableRowsPerPage,
          onRowsPerPageChanged: onRowsPerPageChanged,
          dragStartBehavior: dragStartBehavior,
          arrowHeadColor: arrowHeadColor,
          source: source,
          checkboxHorizontalMargin: checkboxHorizontalMargin,
          controller: controller,
          primary: primary,
        ) {
    mateBuilder = (p) => PaginatedDataTable$Mate(
          key: p.get('key').build(),
          header: p.get('header').build(),
          actions: p.get('actions').build(),
          columns: p.get('columns').build(),
          sortColumnIndex: p.get('sortColumnIndex').build(),
          sortAscending: p.get('sortAscending').build(),
          onSelectAll: p.get('onSelectAll').build(),
          dataRowMinHeight: p.get('dataRowMinHeight').build(),
          dataRowMaxHeight: p.get('dataRowMaxHeight').build(),
          headingRowHeight: p.get('headingRowHeight').build(),
          horizontalMargin: p.get('horizontalMargin').build(),
          columnSpacing: p.get('columnSpacing').build(),
          showCheckboxColumn: p.get('showCheckboxColumn').build(),
          showFirstLastButtons: p.get('showFirstLastButtons').build(),
          initialFirstRowIndex: p.get('initialFirstRowIndex').build(),
          onPageChanged: p.get('onPageChanged').build(),
          rowsPerPage: p.get('rowsPerPage').build(),
          availableRowsPerPage: p.get('availableRowsPerPage').build(),
          onRowsPerPageChanged: p.get('onRowsPerPageChanged').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          arrowHeadColor: p.get('arrowHeadColor').build(),
          source: p.get('source').build(),
          checkboxHorizontalMargin: p.get('checkboxHorizontalMargin').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
        );
    matePut('key', key);
    matePut('header', header);
    matePut('actions', actions);
    matePut('columns', columns);
    matePut('sortColumnIndex', sortColumnIndex);
    matePut('sortAscending', sortAscending);
    matePut('onSelectAll', onSelectAll);
    matePut('dataRowMinHeight', dataRowMinHeight);
    matePut('dataRowMaxHeight', dataRowMaxHeight);
    matePut('headingRowHeight', headingRowHeight);
    matePut('horizontalMargin', horizontalMargin);
    matePut('columnSpacing', columnSpacing);
    matePut('showCheckboxColumn', showCheckboxColumn);
    matePut('showFirstLastButtons', showFirstLastButtons);
    matePut('initialFirstRowIndex', initialFirstRowIndex);
    matePut('onPageChanged', onPageChanged);
    matePut('rowsPerPage', rowsPerPage);
    matePut('availableRowsPerPage', availableRowsPerPage);
    matePut('onRowsPerPageChanged', onRowsPerPageChanged);
    matePut('dragStartBehavior', dragStartBehavior);
    matePut('arrowHeadColor', arrowHeadColor);
    matePut('source', source);
    matePut('checkboxHorizontalMargin', checkboxHorizontalMargin);
    matePut('controller', controller);
    matePut('primary', primary);
  }
}
