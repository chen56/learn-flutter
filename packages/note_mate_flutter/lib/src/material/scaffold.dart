// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/scaffold.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'dart:ui';import 'dart:core';import 'package:flutter/src/painting/edge_insets.dart';import 'package:flutter/src/widgets/preferred_size.dart';import 'package:flutter/src/material/floating_action_button_location.dart';import 'package:flutter/src/painting/alignment.dart';import 'package:flutter/src/material/drawer.dart';import 'package:flutter/src/gestures/recognizer.dart';import 'package:note/mate.dart' show Mate;/// class ScaffoldMessenger extends StatefulWidget
class ScaffoldMessenger$Mate extends ScaffoldMessenger with Mate {/// ScaffoldMessenger ScaffoldMessenger({Key? key, required Widget child})
ScaffoldMessenger$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, child: child, ) { mateBuilder = (p) => ScaffoldMessenger$Mate(key: p.get('key').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('child', child); }

 }
/// class ScaffoldPrelayoutGeometry
class ScaffoldPrelayoutGeometry$Mate extends ScaffoldPrelayoutGeometry with Mate {/// ScaffoldPrelayoutGeometry ScaffoldPrelayoutGeometry({required Size bottomSheetSize, required double contentBottom, required double contentTop, required Size floatingActionButtonSize, required EdgeInsets minInsets, required EdgeInsets minViewPadding, required Size scaffoldSize, required Size snackBarSize, required Size materialBannerSize, required TextDirection textDirection})
ScaffoldPrelayoutGeometry$Mate({/// optionalParameters: {required Size bottomSheetSize} , hasDefaultValue:false, defaultValueCode:null
required Size bottomSheetSize, /// optionalParameters: {required double contentBottom} , hasDefaultValue:false, defaultValueCode:null
required double contentBottom, /// optionalParameters: {required double contentTop} , hasDefaultValue:false, defaultValueCode:null
required double contentTop, /// optionalParameters: {required Size floatingActionButtonSize} , hasDefaultValue:false, defaultValueCode:null
required Size floatingActionButtonSize, /// optionalParameters: {required EdgeInsets minInsets} , hasDefaultValue:false, defaultValueCode:null
required EdgeInsets minInsets, /// optionalParameters: {required EdgeInsets minViewPadding} , hasDefaultValue:false, defaultValueCode:null
required EdgeInsets minViewPadding, /// optionalParameters: {required Size scaffoldSize} , hasDefaultValue:false, defaultValueCode:null
required Size scaffoldSize, /// optionalParameters: {required Size snackBarSize} , hasDefaultValue:false, defaultValueCode:null
required Size snackBarSize, /// optionalParameters: {required Size materialBannerSize} , hasDefaultValue:false, defaultValueCode:null
required Size materialBannerSize, /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
required TextDirection textDirection, }) : super(bottomSheetSize: bottomSheetSize, contentBottom: contentBottom, contentTop: contentTop, floatingActionButtonSize: floatingActionButtonSize, minInsets: minInsets, minViewPadding: minViewPadding, scaffoldSize: scaffoldSize, snackBarSize: snackBarSize, materialBannerSize: materialBannerSize, textDirection: textDirection, ) { mateBuilder = (p) => ScaffoldPrelayoutGeometry$Mate(bottomSheetSize: p.get('bottomSheetSize').build(), contentBottom: p.get('contentBottom').build(), contentTop: p.get('contentTop').build(), floatingActionButtonSize: p.get('floatingActionButtonSize').build(), minInsets: p.get('minInsets').build(), minViewPadding: p.get('minViewPadding').build(), scaffoldSize: p.get('scaffoldSize').build(), snackBarSize: p.get('snackBarSize').build(), materialBannerSize: p.get('materialBannerSize').build(), textDirection: p.get('textDirection').build(), );
matePut('bottomSheetSize', bottomSheetSize);
matePut('contentBottom', contentBottom);
matePut('contentTop', contentTop);
matePut('floatingActionButtonSize', floatingActionButtonSize);
matePut('minInsets', minInsets);
matePut('minViewPadding', minViewPadding);
matePut('scaffoldSize', scaffoldSize);
matePut('snackBarSize', snackBarSize);
matePut('materialBannerSize', materialBannerSize);
matePut('textDirection', textDirection); }

 }
/// class ScaffoldGeometry
class ScaffoldGeometry$Mate extends ScaffoldGeometry with Mate {/// ScaffoldGeometry ScaffoldGeometry({double? bottomNavigationBarTop, Rect? floatingActionButtonArea})
ScaffoldGeometry$Mate({/// optionalParameters: {double? bottomNavigationBarTop} , hasDefaultValue:false, defaultValueCode:null
double? bottomNavigationBarTop, /// optionalParameters: {Rect? floatingActionButtonArea} , hasDefaultValue:false, defaultValueCode:null
Rect? floatingActionButtonArea, }) : super(bottomNavigationBarTop: bottomNavigationBarTop, floatingActionButtonArea: floatingActionButtonArea, ) { mateBuilder = (p) => ScaffoldGeometry$Mate(bottomNavigationBarTop: p.get('bottomNavigationBarTop').build(), floatingActionButtonArea: p.get('floatingActionButtonArea').build(), );
matePut('bottomNavigationBarTop', bottomNavigationBarTop);
matePut('floatingActionButtonArea', floatingActionButtonArea); }

 }
/// class Scaffold extends StatefulWidget
class Scaffold$Mate extends Scaffold with Mate {/// Scaffold Scaffold({Key? key, PreferredSizeWidget? appBar, Widget? body, Widget? floatingActionButton, FloatingActionButtonLocation? floatingActionButtonLocation, FloatingActionButtonAnimator? floatingActionButtonAnimator, List<Widget>? persistentFooterButtons, AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd, Widget? drawer, void Function(bool)? onDrawerChanged, Widget? endDrawer, void Function(bool)? onEndDrawerChanged, Widget? bottomNavigationBar, Widget? bottomSheet, Color? backgroundColor, bool? resizeToAvoidBottomInset, bool primary = true, DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start, bool extendBody = false, bool extendBodyBehindAppBar = false, Color? drawerScrimColor, double? drawerEdgeDragWidth, bool drawerEnableOpenDragGesture = true, bool endDrawerEnableOpenDragGesture = true, String? restorationId})
Scaffold$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {PreferredSizeWidget? appBar} , hasDefaultValue:false, defaultValueCode:null
PreferredSizeWidget? appBar, /// optionalParameters: {Widget? body} , hasDefaultValue:false, defaultValueCode:null
Widget? body, /// optionalParameters: {Widget? floatingActionButton} , hasDefaultValue:false, defaultValueCode:null
Widget? floatingActionButton, /// optionalParameters: {FloatingActionButtonLocation? floatingActionButtonLocation} , hasDefaultValue:false, defaultValueCode:null
FloatingActionButtonLocation? floatingActionButtonLocation, /// optionalParameters: {FloatingActionButtonAnimator? floatingActionButtonAnimator} , hasDefaultValue:false, defaultValueCode:null
FloatingActionButtonAnimator? floatingActionButtonAnimator, /// optionalParameters: {List<Widget>? persistentFooterButtons} , hasDefaultValue:false, defaultValueCode:null
List<Widget>? persistentFooterButtons, /// optionalParameters: {AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.centerEnd
required AlignmentDirectional persistentFooterAlignment, /// optionalParameters: {Widget? drawer} , hasDefaultValue:false, defaultValueCode:null
Widget? drawer, /// optionalParameters: {void Function(bool)? onDrawerChanged} , hasDefaultValue:false, defaultValueCode:null
DrawerCallback? onDrawerChanged, /// optionalParameters: {Widget? endDrawer} , hasDefaultValue:false, defaultValueCode:null
Widget? endDrawer, /// optionalParameters: {void Function(bool)? onEndDrawerChanged} , hasDefaultValue:false, defaultValueCode:null
DrawerCallback? onEndDrawerChanged, /// optionalParameters: {Widget? bottomNavigationBar} , hasDefaultValue:false, defaultValueCode:null
Widget? bottomNavigationBar, /// optionalParameters: {Widget? bottomSheet} , hasDefaultValue:false, defaultValueCode:null
Widget? bottomSheet, /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
Color? backgroundColor, /// optionalParameters: {bool? resizeToAvoidBottomInset} , hasDefaultValue:false, defaultValueCode:null
bool? resizeToAvoidBottomInset, /// optionalParameters: {bool primary = true} , hasDefaultValue:true, defaultValueCode:true
required bool primary, /// optionalParameters: {DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
required DragStartBehavior drawerDragStartBehavior, /// optionalParameters: {bool extendBody = false} , hasDefaultValue:true, defaultValueCode:false
required bool extendBody, /// optionalParameters: {bool extendBodyBehindAppBar = false} , hasDefaultValue:true, defaultValueCode:false
required bool extendBodyBehindAppBar, /// optionalParameters: {Color? drawerScrimColor} , hasDefaultValue:false, defaultValueCode:null
Color? drawerScrimColor, /// optionalParameters: {double? drawerEdgeDragWidth} , hasDefaultValue:false, defaultValueCode:null
double? drawerEdgeDragWidth, /// optionalParameters: {bool drawerEnableOpenDragGesture = true} , hasDefaultValue:true, defaultValueCode:true
required bool drawerEnableOpenDragGesture, /// optionalParameters: {bool endDrawerEnableOpenDragGesture = true} , hasDefaultValue:true, defaultValueCode:true
required bool endDrawerEnableOpenDragGesture, /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
String? restorationId, }) : super(key: key, appBar: appBar, body: body, floatingActionButton: floatingActionButton, floatingActionButtonLocation: floatingActionButtonLocation, floatingActionButtonAnimator: floatingActionButtonAnimator, persistentFooterButtons: persistentFooterButtons, persistentFooterAlignment: persistentFooterAlignment, drawer: drawer, onDrawerChanged: onDrawerChanged, endDrawer: endDrawer, onEndDrawerChanged: onEndDrawerChanged, bottomNavigationBar: bottomNavigationBar, bottomSheet: bottomSheet, backgroundColor: backgroundColor, resizeToAvoidBottomInset: resizeToAvoidBottomInset, primary: primary, drawerDragStartBehavior: drawerDragStartBehavior, extendBody: extendBody, extendBodyBehindAppBar: extendBodyBehindAppBar, drawerScrimColor: drawerScrimColor, drawerEdgeDragWidth: drawerEdgeDragWidth, drawerEnableOpenDragGesture: drawerEnableOpenDragGesture, endDrawerEnableOpenDragGesture: endDrawerEnableOpenDragGesture, restorationId: restorationId, ) { mateBuilder = (p) => Scaffold$Mate(key: p.get('key').build(), appBar: p.get('appBar').build(), body: p.get('body').build(), floatingActionButton: p.get('floatingActionButton').build(), floatingActionButtonLocation: p.get('floatingActionButtonLocation').build(), floatingActionButtonAnimator: p.get('floatingActionButtonAnimator').build(), persistentFooterButtons: p.get('persistentFooterButtons').build(), persistentFooterAlignment: p.get('persistentFooterAlignment').build(), drawer: p.get('drawer').build(), onDrawerChanged: p.get('onDrawerChanged').build(), endDrawer: p.get('endDrawer').build(), onEndDrawerChanged: p.get('onEndDrawerChanged').build(), bottomNavigationBar: p.get('bottomNavigationBar').build(), bottomSheet: p.get('bottomSheet').build(), backgroundColor: p.get('backgroundColor').build(), resizeToAvoidBottomInset: p.get('resizeToAvoidBottomInset').build(), primary: p.get('primary').build(), drawerDragStartBehavior: p.get('drawerDragStartBehavior').build(), extendBody: p.get('extendBody').build(), extendBodyBehindAppBar: p.get('extendBodyBehindAppBar').build(), drawerScrimColor: p.get('drawerScrimColor').build(), drawerEdgeDragWidth: p.get('drawerEdgeDragWidth').build(), drawerEnableOpenDragGesture: p.get('drawerEnableOpenDragGesture').build(), endDrawerEnableOpenDragGesture: p.get('endDrawerEnableOpenDragGesture').build(), restorationId: p.get('restorationId').build(), );
matePut('key', key);
matePut('appBar', appBar);
matePut('body', body);
matePut('floatingActionButton', floatingActionButton);
matePut('floatingActionButtonLocation', floatingActionButtonLocation);
matePut('floatingActionButtonAnimator', floatingActionButtonAnimator);
matePut('persistentFooterButtons', persistentFooterButtons);
matePut('persistentFooterAlignment', persistentFooterAlignment);
matePut('drawer', drawer);
matePut('onDrawerChanged', onDrawerChanged);
matePut('endDrawer', endDrawer);
matePut('onEndDrawerChanged', onEndDrawerChanged);
matePut('bottomNavigationBar', bottomNavigationBar);
matePut('bottomSheet', bottomSheet);
matePut('backgroundColor', backgroundColor);
matePut('resizeToAvoidBottomInset', resizeToAvoidBottomInset);
matePut('primary', primary);
matePut('drawerDragStartBehavior', drawerDragStartBehavior);
matePut('extendBody', extendBody);
matePut('extendBodyBehindAppBar', extendBodyBehindAppBar);
matePut('drawerScrimColor', drawerScrimColor);
matePut('drawerEdgeDragWidth', drawerEdgeDragWidth);
matePut('drawerEnableOpenDragGesture', drawerEnableOpenDragGesture);
matePut('endDrawerEnableOpenDragGesture', endDrawerEnableOpenDragGesture);
matePut('restorationId', restorationId); }

 }
