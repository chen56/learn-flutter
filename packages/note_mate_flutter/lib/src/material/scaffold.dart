// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/scaffold.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/edge_insets.dart' as _i6;
import 'package:flutter/src/widgets/preferred_size.dart' as _i7;
import 'package:flutter/src/material/floating_action_button_location.dart' as _i8;
import 'package:flutter/src/painting/alignment.dart' as _i9;
import 'package:flutter/cupertino.dart' as _i10;
import 'package:flutter/src/material/drawer.dart' as _i11;
import 'package:flutter/src/gestures/recognizer.dart' as _i12;
import 'package:flutter/gestures.dart' as _i13;

/// class ScaffoldMessenger extends StatefulWidget
class ScaffoldMessenger$Mate extends _i1.ScaffoldMessenger with _i2.Mate {
  /// ScaffoldMessenger ScaffoldMessenger({Key? key, required Widget child})
  ScaffoldMessenger$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'ScaffoldMessenger';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ScaffoldMessenger$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ScaffoldPrelayoutGeometry
class ScaffoldPrelayoutGeometry$Mate extends _i1.ScaffoldPrelayoutGeometry with _i2.Mate {
  /// ScaffoldPrelayoutGeometry ScaffoldPrelayoutGeometry({required Size bottomSheetSize, required double contentBottom, required double contentTop, required Size floatingActionButtonSize, required EdgeInsets minInsets, required EdgeInsets minViewPadding, required Size scaffoldSize, required Size snackBarSize, required Size materialBannerSize, required TextDirection textDirection})
  ScaffoldPrelayoutGeometry$Mate({
    /// optionalParameters: {required Size bottomSheetSize} , default:none
    required _i5.Size bottomSheetSize,

    /// optionalParameters: {required double contentBottom} , default:none
    required double contentBottom,

    /// optionalParameters: {required double contentTop} , default:none
    required double contentTop,

    /// optionalParameters: {required Size floatingActionButtonSize} , default:none
    required _i5.Size floatingActionButtonSize,

    /// optionalParameters: {required EdgeInsets minInsets} , default:none
    required _i6.EdgeInsets minInsets,

    /// optionalParameters: {required EdgeInsets minViewPadding} , default:none
    required _i6.EdgeInsets minViewPadding,

    /// optionalParameters: {required Size scaffoldSize} , default:none
    required _i5.Size scaffoldSize,

    /// optionalParameters: {required Size snackBarSize} , default:none
    required _i5.Size snackBarSize,

    /// optionalParameters: {required Size materialBannerSize} , default:none
    required _i5.Size materialBannerSize,

    /// optionalParameters: {required TextDirection textDirection} , default:none
    required _i5.TextDirection textDirection,
  }) : super(
          bottomSheetSize: bottomSheetSize,
          contentBottom: contentBottom,
          contentTop: contentTop,
          floatingActionButtonSize: floatingActionButtonSize,
          minInsets: minInsets,
          minViewPadding: minViewPadding,
          scaffoldSize: scaffoldSize,
          snackBarSize: snackBarSize,
          materialBannerSize: materialBannerSize,
          textDirection: textDirection,
        ) {
    mateBuilderName = 'ScaffoldPrelayoutGeometry';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ScaffoldPrelayoutGeometry$Mate(
          bottomSheetSize: p.get('bottomSheetSize').build(),
          contentBottom: p.get('contentBottom').build(),
          contentTop: p.get('contentTop').build(),
          floatingActionButtonSize: p.get('floatingActionButtonSize').build(),
          minInsets: p.get('minInsets').build(),
          minViewPadding: p.get('minViewPadding').build(),
          scaffoldSize: p.get('scaffoldSize').build(),
          snackBarSize: p.get('snackBarSize').build(),
          materialBannerSize: p.get('materialBannerSize').build(),
          textDirection: p.get('textDirection').build(),
        );
    mateUse(
      'bottomSheetSize',
      bottomSheetSize,
      isNamed: true,
    );
    mateUse(
      'contentBottom',
      contentBottom,
      isNamed: true,
    );
    mateUse(
      'contentTop',
      contentTop,
      isNamed: true,
    );
    mateUse(
      'floatingActionButtonSize',
      floatingActionButtonSize,
      isNamed: true,
    );
    mateUse(
      'minInsets',
      minInsets,
      isNamed: true,
    );
    mateUse(
      'minViewPadding',
      minViewPadding,
      isNamed: true,
    );
    mateUse(
      'scaffoldSize',
      scaffoldSize,
      isNamed: true,
    );
    mateUse(
      'snackBarSize',
      snackBarSize,
      isNamed: true,
    );
    mateUse(
      'materialBannerSize',
      materialBannerSize,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
  }
}

/// class ScaffoldGeometry
class ScaffoldGeometry$Mate extends _i1.ScaffoldGeometry with _i2.Mate {
  /// ScaffoldGeometry ScaffoldGeometry({double? bottomNavigationBarTop, Rect? floatingActionButtonArea})
  ScaffoldGeometry$Mate({
    /// optionalParameters: {double? bottomNavigationBarTop} , default:none
    double? bottomNavigationBarTop,

    /// optionalParameters: {Rect? floatingActionButtonArea} , default:none
    _i5.Rect? floatingActionButtonArea,
  }) : super(
          bottomNavigationBarTop: bottomNavigationBarTop,
          floatingActionButtonArea: floatingActionButtonArea,
        ) {
    mateBuilderName = 'ScaffoldGeometry';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ScaffoldGeometry$Mate(
          bottomNavigationBarTop: p.get('bottomNavigationBarTop').build(),
          floatingActionButtonArea: p.get('floatingActionButtonArea').build(),
        );
    mateUse(
      'bottomNavigationBarTop',
      bottomNavigationBarTop,
      isNamed: true,
    );
    mateUse(
      'floatingActionButtonArea',
      floatingActionButtonArea,
      isNamed: true,
    );
  }
}

/// class Scaffold extends StatefulWidget
class Scaffold$Mate extends _i1.Scaffold with _i2.Mate {
  /// Scaffold Scaffold({Key? key, PreferredSizeWidget? appBar, Widget? body, Widget? floatingActionButton, FloatingActionButtonLocation? floatingActionButtonLocation, FloatingActionButtonAnimator? floatingActionButtonAnimator, List<Widget>? persistentFooterButtons, AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd, Widget? drawer, void Function(bool)? onDrawerChanged, Widget? endDrawer, void Function(bool)? onEndDrawerChanged, Widget? bottomNavigationBar, Widget? bottomSheet, Color? backgroundColor, bool? resizeToAvoidBottomInset, bool primary = true, DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start, bool extendBody = false, bool extendBodyBehindAppBar = false, Color? drawerScrimColor, double? drawerEdgeDragWidth, bool drawerEnableOpenDragGesture = true, bool endDrawerEnableOpenDragGesture = true, String? restorationId})
  Scaffold$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {PreferredSizeWidget? appBar} , default:none
    _i7.PreferredSizeWidget? appBar,

    /// optionalParameters: {Widget? body} , default:none
    _i4.Widget? body,

    /// optionalParameters: {Widget? floatingActionButton} , default:none
    _i4.Widget? floatingActionButton,

    /// optionalParameters: {FloatingActionButtonLocation? floatingActionButtonLocation} , default:none
    _i8.FloatingActionButtonLocation? floatingActionButtonLocation,

    /// optionalParameters: {FloatingActionButtonAnimator? floatingActionButtonAnimator} , default:none
    _i8.FloatingActionButtonAnimator? floatingActionButtonAnimator,

    /// optionalParameters: {List<Widget>? persistentFooterButtons} , default:none
    List<_i4.Widget>? persistentFooterButtons,

    /// optionalParameters: {AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd} , default:processed=PrefixedIdentifierImpl
    _i9.AlignmentDirectional persistentFooterAlignment = _i10.AlignmentDirectional.centerEnd,

    /// optionalParameters: {Widget? drawer} , default:none
    _i4.Widget? drawer,

    /// optionalParameters: {void Function(bool)? onDrawerChanged} , default:none
    _i11.DrawerCallback? onDrawerChanged,

    /// optionalParameters: {Widget? endDrawer} , default:none
    _i4.Widget? endDrawer,

    /// optionalParameters: {void Function(bool)? onEndDrawerChanged} , default:none
    _i11.DrawerCallback? onEndDrawerChanged,

    /// optionalParameters: {Widget? bottomNavigationBar} , default:none
    _i4.Widget? bottomNavigationBar,

    /// optionalParameters: {Widget? bottomSheet} , default:none
    _i4.Widget? bottomSheet,

    /// optionalParameters: {Color? backgroundColor} , default:none
    _i5.Color? backgroundColor,

    /// optionalParameters: {bool? resizeToAvoidBottomInset} , default:none
    bool? resizeToAvoidBottomInset,

    /// optionalParameters: {bool primary = true} , default:processed=BooleanLiteralImpl
    bool primary = true,

    /// optionalParameters: {DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i12.DragStartBehavior drawerDragStartBehavior = _i13.DragStartBehavior.start,

    /// optionalParameters: {bool extendBody = false} , default:processed=BooleanLiteralImpl
    bool extendBody = false,

    /// optionalParameters: {bool extendBodyBehindAppBar = false} , default:processed=BooleanLiteralImpl
    bool extendBodyBehindAppBar = false,

    /// optionalParameters: {Color? drawerScrimColor} , default:none
    _i5.Color? drawerScrimColor,

    /// optionalParameters: {double? drawerEdgeDragWidth} , default:none
    double? drawerEdgeDragWidth,

    /// optionalParameters: {bool drawerEnableOpenDragGesture = true} , default:processed=BooleanLiteralImpl
    bool drawerEnableOpenDragGesture = true,

    /// optionalParameters: {bool endDrawerEnableOpenDragGesture = true} , default:processed=BooleanLiteralImpl
    bool endDrawerEnableOpenDragGesture = true,

    /// optionalParameters: {String? restorationId} , default:none
    String? restorationId,
  }) : super(
          key: key,
          appBar: appBar,
          body: body,
          floatingActionButton: floatingActionButton,
          floatingActionButtonLocation: floatingActionButtonLocation,
          floatingActionButtonAnimator: floatingActionButtonAnimator,
          persistentFooterButtons: persistentFooterButtons,
          persistentFooterAlignment: persistentFooterAlignment,
          drawer: drawer,
          onDrawerChanged: onDrawerChanged,
          endDrawer: endDrawer,
          onEndDrawerChanged: onEndDrawerChanged,
          bottomNavigationBar: bottomNavigationBar,
          bottomSheet: bottomSheet,
          backgroundColor: backgroundColor,
          resizeToAvoidBottomInset: resizeToAvoidBottomInset,
          primary: primary,
          drawerDragStartBehavior: drawerDragStartBehavior,
          extendBody: extendBody,
          extendBodyBehindAppBar: extendBodyBehindAppBar,
          drawerScrimColor: drawerScrimColor,
          drawerEdgeDragWidth: drawerEdgeDragWidth,
          drawerEnableOpenDragGesture: drawerEnableOpenDragGesture,
          endDrawerEnableOpenDragGesture: endDrawerEnableOpenDragGesture,
          restorationId: restorationId,
        ) {
    mateBuilderName = 'Scaffold';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Scaffold$Mate(
          key: p.get('key').build(),
          appBar: p.get('appBar').build(),
          body: p.get('body').build(),
          floatingActionButton: p.get('floatingActionButton').build(),
          floatingActionButtonLocation: p.get('floatingActionButtonLocation').build(),
          floatingActionButtonAnimator: p.get('floatingActionButtonAnimator').build(),
          persistentFooterButtons: p.get('persistentFooterButtons').build(),
          persistentFooterAlignment: p.get('persistentFooterAlignment').build(),
          drawer: p.get('drawer').build(),
          onDrawerChanged: p.get('onDrawerChanged').build(),
          endDrawer: p.get('endDrawer').build(),
          onEndDrawerChanged: p.get('onEndDrawerChanged').build(),
          bottomNavigationBar: p.get('bottomNavigationBar').build(),
          bottomSheet: p.get('bottomSheet').build(),
          backgroundColor: p.get('backgroundColor').build(),
          resizeToAvoidBottomInset: p.get('resizeToAvoidBottomInset').build(),
          primary: p.get('primary').build(),
          drawerDragStartBehavior: p.get('drawerDragStartBehavior').build(),
          extendBody: p.get('extendBody').build(),
          extendBodyBehindAppBar: p.get('extendBodyBehindAppBar').build(),
          drawerScrimColor: p.get('drawerScrimColor').build(),
          drawerEdgeDragWidth: p.get('drawerEdgeDragWidth').build(),
          drawerEnableOpenDragGesture: p.get('drawerEnableOpenDragGesture').build(),
          endDrawerEnableOpenDragGesture: p.get('endDrawerEnableOpenDragGesture').build(),
          restorationId: p.get('restorationId').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'appBar',
      appBar,
      isNamed: true,
    );
    mateUse(
      'body',
      body,
      isNamed: true,
    );
    mateUse(
      'floatingActionButton',
      floatingActionButton,
      isNamed: true,
    );
    mateUse(
      'floatingActionButtonLocation',
      floatingActionButtonLocation,
      isNamed: true,
    );
    mateUse(
      'floatingActionButtonAnimator',
      floatingActionButtonAnimator,
      isNamed: true,
    );
    mateUse(
      'persistentFooterButtons',
      persistentFooterButtons,
      isNamed: true,
    );
    mateUse(
      'persistentFooterAlignment',
      persistentFooterAlignment,
      isNamed: true,
      defaultValue: _i10.AlignmentDirectional.centerEnd,
    );
    mateUse(
      'drawer',
      drawer,
      isNamed: true,
    );
    mateUse(
      'onDrawerChanged',
      onDrawerChanged,
      isNamed: true,
    );
    mateUse(
      'endDrawer',
      endDrawer,
      isNamed: true,
    );
    mateUse(
      'onEndDrawerChanged',
      onEndDrawerChanged,
      isNamed: true,
    );
    mateUse(
      'bottomNavigationBar',
      bottomNavigationBar,
      isNamed: true,
    );
    mateUse(
      'bottomSheet',
      bottomSheet,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'resizeToAvoidBottomInset',
      resizeToAvoidBottomInset,
      isNamed: true,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'drawerDragStartBehavior',
      drawerDragStartBehavior,
      isNamed: true,
      defaultValue: _i13.DragStartBehavior.start,
    );
    mateUse(
      'extendBody',
      extendBody,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'extendBodyBehindAppBar',
      extendBodyBehindAppBar,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'drawerScrimColor',
      drawerScrimColor,
      isNamed: true,
    );
    mateUse(
      'drawerEdgeDragWidth',
      drawerEdgeDragWidth,
      isNamed: true,
    );
    mateUse(
      'drawerEnableOpenDragGesture',
      drawerEnableOpenDragGesture,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'endDrawerEnableOpenDragGesture',
      endDrawerEnableOpenDragGesture,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'restorationId',
      restorationId,
      isNamed: true,
    );
  }
}
