// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/slider.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class Slider extends StatefulWidget
class Slider$Mate extends Slider with Mate {
  /// Slider Slider({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  Slider$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required double value} , defaultValue:none
    required double value,

    /// optionalParameters: {double? secondaryTrackValue} , defaultValue:none
    double? secondaryTrackValue,

    /// optionalParameters: {required void Function(double)? onChanged} , defaultValue:none
    required ValueChanged<double>? onChanged,

    /// optionalParameters: {void Function(double)? onChangeStart} , defaultValue:none
    ValueChanged<double>? onChangeStart,

    /// optionalParameters: {void Function(double)? onChangeEnd} , defaultValue:none
    ValueChanged<double>? onChangeEnd,

    /// optionalParameters: {double min = 0.0} , defaultValue:Literal
    double min = 0.0,

    /// optionalParameters: {double max = 1.0} , defaultValue:Literal
    double max = 1.0,

    /// optionalParameters: {int? divisions} , defaultValue:none
    int? divisions,

    /// optionalParameters: {String? label} , defaultValue:none
    String? label,

    /// optionalParameters: {Color? activeColor} , defaultValue:none
    Color? activeColor,

    /// optionalParameters: {Color? inactiveColor} , defaultValue:none
    Color? inactiveColor,

    /// optionalParameters: {Color? secondaryActiveColor} , defaultValue:none
    Color? secondaryActiveColor,

    /// optionalParameters: {Color? thumbColor} , defaultValue:none
    Color? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , defaultValue:none
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {String Function(double)? semanticFormatterCallback} , defaultValue:none
    SemanticFormatterCallback? semanticFormatterCallback,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,
  }) : super(
          key: key,
          value: value,
          secondaryTrackValue: secondaryTrackValue,
          onChanged: onChanged,
          onChangeStart: onChangeStart,
          onChangeEnd: onChangeEnd,
          min: min,
          max: max,
          divisions: divisions,
          label: label,
          activeColor: activeColor,
          inactiveColor: inactiveColor,
          secondaryActiveColor: secondaryActiveColor,
          thumbColor: thumbColor,
          overlayColor: overlayColor,
          mouseCursor: mouseCursor,
          semanticFormatterCallback: semanticFormatterCallback,
          focusNode: focusNode,
          autofocus: autofocus,
        ) {
    mateCreateName = 'Slider';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Slider$Mate(
          key: p.get('key').build(),
          value: p.get('value').build(),
          secondaryTrackValue: p.get('secondaryTrackValue').build(),
          onChanged: p.get('onChanged').build(),
          onChangeStart: p.get('onChangeStart').build(),
          onChangeEnd: p.get('onChangeEnd').build(),
          min: p.get('min').build(),
          max: p.get('max').build(),
          divisions: p.get('divisions').build(),
          label: p.get('label').build(),
          activeColor: p.get('activeColor').build(),
          inactiveColor: p.get('inactiveColor').build(),
          secondaryActiveColor: p.get('secondaryActiveColor').build(),
          thumbColor: p.get('thumbColor').build(),
          overlayColor: p.get('overlayColor').build(),
          mouseCursor: p.get('mouseCursor').build(),
          semanticFormatterCallback: p.get('semanticFormatterCallback').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('value', value, isNamed: true);
    mateUse('secondaryTrackValue', secondaryTrackValue, isNamed: true);
    mateUse('onChanged', onChanged, isNamed: true);
    mateUse('onChangeStart', onChangeStart, isNamed: true);
    mateUse('onChangeEnd', onChangeEnd, isNamed: true);
    mateUse('min', min, isNamed: true);
    mateUse('max', max, isNamed: true);
    mateUse('divisions', divisions, isNamed: true);
    mateUse('label', label, isNamed: true);
    mateUse('activeColor', activeColor, isNamed: true);
    mateUse('inactiveColor', inactiveColor, isNamed: true);
    mateUse('secondaryActiveColor', secondaryActiveColor, isNamed: true);
    mateUse('thumbColor', thumbColor, isNamed: true);
    mateUse('overlayColor', overlayColor, isNamed: true);
    mateUse('mouseCursor', mouseCursor, isNamed: true);
    mateUse('semanticFormatterCallback', semanticFormatterCallback, isNamed: true);
    mateUse('focusNode', focusNode, isNamed: true);
    mateUse('autofocus', autofocus, isNamed: true);
  }

  /// Slider Slider.adaptive({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, MouseCursor? mouseCursor, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  Slider$Mate.adaptive({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required double value} , defaultValue:none
    required double value,

    /// optionalParameters: {double? secondaryTrackValue} , defaultValue:none
    double? secondaryTrackValue,

    /// optionalParameters: {required void Function(double)? onChanged} , defaultValue:none
    required ValueChanged<double>? onChanged,

    /// optionalParameters: {void Function(double)? onChangeStart} , defaultValue:none
    ValueChanged<double>? onChangeStart,

    /// optionalParameters: {void Function(double)? onChangeEnd} , defaultValue:none
    ValueChanged<double>? onChangeEnd,

    /// optionalParameters: {double min = 0.0} , defaultValue:Literal
    double min = 0.0,

    /// optionalParameters: {double max = 1.0} , defaultValue:Literal
    double max = 1.0,

    /// optionalParameters: {int? divisions} , defaultValue:none
    int? divisions,

    /// optionalParameters: {String? label} , defaultValue:none
    String? label,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {Color? activeColor} , defaultValue:none
    Color? activeColor,

    /// optionalParameters: {Color? inactiveColor} , defaultValue:none
    Color? inactiveColor,

    /// optionalParameters: {Color? secondaryActiveColor} , defaultValue:none
    Color? secondaryActiveColor,

    /// optionalParameters: {Color? thumbColor} , defaultValue:none
    Color? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , defaultValue:none
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {String Function(double)? semanticFormatterCallback} , defaultValue:none
    SemanticFormatterCallback? semanticFormatterCallback,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,
  }) : super.adaptive(
          key: key,
          value: value,
          secondaryTrackValue: secondaryTrackValue,
          onChanged: onChanged,
          onChangeStart: onChangeStart,
          onChangeEnd: onChangeEnd,
          min: min,
          max: max,
          divisions: divisions,
          label: label,
          mouseCursor: mouseCursor,
          activeColor: activeColor,
          inactiveColor: inactiveColor,
          secondaryActiveColor: secondaryActiveColor,
          thumbColor: thumbColor,
          overlayColor: overlayColor,
          semanticFormatterCallback: semanticFormatterCallback,
          focusNode: focusNode,
          autofocus: autofocus,
        ) {
    mateCreateName = 'Slider.adaptive';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Slider$Mate.adaptive(
          key: p.get('key').build(),
          value: p.get('value').build(),
          secondaryTrackValue: p.get('secondaryTrackValue').build(),
          onChanged: p.get('onChanged').build(),
          onChangeStart: p.get('onChangeStart').build(),
          onChangeEnd: p.get('onChangeEnd').build(),
          min: p.get('min').build(),
          max: p.get('max').build(),
          divisions: p.get('divisions').build(),
          label: p.get('label').build(),
          mouseCursor: p.get('mouseCursor').build(),
          activeColor: p.get('activeColor').build(),
          inactiveColor: p.get('inactiveColor').build(),
          secondaryActiveColor: p.get('secondaryActiveColor').build(),
          thumbColor: p.get('thumbColor').build(),
          overlayColor: p.get('overlayColor').build(),
          semanticFormatterCallback: p.get('semanticFormatterCallback').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('value', value, isNamed: true);
    mateUse('secondaryTrackValue', secondaryTrackValue, isNamed: true);
    mateUse('onChanged', onChanged, isNamed: true);
    mateUse('onChangeStart', onChangeStart, isNamed: true);
    mateUse('onChangeEnd', onChangeEnd, isNamed: true);
    mateUse('min', min, isNamed: true);
    mateUse('max', max, isNamed: true);
    mateUse('divisions', divisions, isNamed: true);
    mateUse('label', label, isNamed: true);
    mateUse('mouseCursor', mouseCursor, isNamed: true);
    mateUse('activeColor', activeColor, isNamed: true);
    mateUse('inactiveColor', inactiveColor, isNamed: true);
    mateUse('secondaryActiveColor', secondaryActiveColor, isNamed: true);
    mateUse('thumbColor', thumbColor, isNamed: true);
    mateUse('overlayColor', overlayColor, isNamed: true);
    mateUse('semanticFormatterCallback', semanticFormatterCallback, isNamed: true);
    mateUse('focusNode', focusNode, isNamed: true);
    mateUse('autofocus', autofocus, isNamed: true);
  }
}
