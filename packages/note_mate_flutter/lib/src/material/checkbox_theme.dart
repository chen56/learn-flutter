// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/checkbox_theme.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class CheckboxThemeData with Diagnosticable
class CheckboxThemeData$Mate extends CheckboxThemeData with Mate {
  /// CheckboxThemeData CheckboxThemeData({MaterialStateProperty<MouseCursor?>? mouseCursor, MaterialStateProperty<Color?>? fillColor, MaterialStateProperty<Color?>? checkColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, OutlinedBorder? shape, BorderSide? side})
  CheckboxThemeData$Mate({
    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , defaultValue:none
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , defaultValue:none
    MaterialStateProperty<Color?>? fillColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? checkColor} , defaultValue:none
    MaterialStateProperty<Color?>? checkColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , defaultValue:none
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , defaultValue:none
    double? splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , defaultValue:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {VisualDensity? visualDensity} , defaultValue:none
    VisualDensity? visualDensity,

    /// optionalParameters: {OutlinedBorder? shape} , defaultValue:none
    OutlinedBorder? shape,

    /// optionalParameters: {BorderSide? side} , defaultValue:none
    BorderSide? side,
  }) : super(
          mouseCursor: mouseCursor,
          fillColor: fillColor,
          checkColor: checkColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          visualDensity: visualDensity,
          shape: shape,
          side: side,
        ) {
    mateBuilder = (p) => CheckboxThemeData$Mate(
          mouseCursor: p.get('mouseCursor').build(),
          fillColor: p.get('fillColor').build(),
          checkColor: p.get('checkColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          visualDensity: p.get('visualDensity').build(),
          shape: p.get('shape').build(),
          side: p.get('side').build(),
        );
    mateDeclare('mouseCursor', mouseCursor);
    mateDeclare('fillColor', fillColor);
    mateDeclare('checkColor', checkColor);
    mateDeclare('overlayColor', overlayColor);
    mateDeclare('splashRadius', splashRadius);
    mateDeclare('materialTapTargetSize', materialTapTargetSize);
    mateDeclare('visualDensity', visualDensity);
    mateDeclare('shape', shape);
    mateDeclare('side', side);
  }
}

/// class CheckboxTheme extends InheritedWidget
class CheckboxTheme$Mate extends CheckboxTheme with Mate {
  /// CheckboxTheme CheckboxTheme({Key? key, required CheckboxThemeData data, required Widget child})
  CheckboxTheme$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required CheckboxThemeData data} , defaultValue:none
    required CheckboxThemeData data,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateBuilder = (p) => CheckboxTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    mateDeclare('key', key);
    mateDeclare('data', data);
    mateDeclare('child', child);
  }
}
