// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/navigation_rail.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/edge_insets.dart';

/// class NavigationRail extends StatefulWidget
class NavigationRail$Mate extends NavigationRail with Mate {
  /// NavigationRail NavigationRail({Key? key, Color? backgroundColor, bool extended = false, Widget? leading, Widget? trailing, required List<NavigationRailDestination> destinations, required int? selectedIndex, void Function(int)? onDestinationSelected, double? elevation, double? groupAlignment, NavigationRailLabelType? labelType, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? minWidth, double? minExtendedWidth, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape})
  NavigationRail$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {bool extended = false} , defaultValue:Literal
    bool extended = false,

    /// optionalParameters: {Widget? leading} , defaultValue:none
    Widget? leading,

    /// optionalParameters: {Widget? trailing} , defaultValue:none
    Widget? trailing,

    /// optionalParameters: {required List<NavigationRailDestination> destinations} , defaultValue:none
    required List<NavigationRailDestination> destinations,

    /// optionalParameters: {required int? selectedIndex} , defaultValue:none
    required int? selectedIndex,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , defaultValue:none
    ValueChanged<int>? onDestinationSelected,

    /// optionalParameters: {double? elevation} , defaultValue:none
    double? elevation,

    /// optionalParameters: {double? groupAlignment} , defaultValue:none
    double? groupAlignment,

    /// optionalParameters: {NavigationRailLabelType? labelType} , defaultValue:none
    NavigationRailLabelType? labelType,

    /// optionalParameters: {TextStyle? unselectedLabelTextStyle} , defaultValue:none
    TextStyle? unselectedLabelTextStyle,

    /// optionalParameters: {TextStyle? selectedLabelTextStyle} , defaultValue:none
    TextStyle? selectedLabelTextStyle,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , defaultValue:none
    IconThemeData? unselectedIconTheme,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , defaultValue:none
    IconThemeData? selectedIconTheme,

    /// optionalParameters: {double? minWidth} , defaultValue:none
    double? minWidth,

    /// optionalParameters: {double? minExtendedWidth} , defaultValue:none
    double? minExtendedWidth,

    /// optionalParameters: {bool? useIndicator} , defaultValue:none
    bool? useIndicator,

    /// optionalParameters: {Color? indicatorColor} , defaultValue:none
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , defaultValue:none
    ShapeBorder? indicatorShape,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          extended: extended,
          leading: leading,
          trailing: trailing,
          destinations: destinations,
          selectedIndex: selectedIndex,
          onDestinationSelected: onDestinationSelected,
          elevation: elevation,
          groupAlignment: groupAlignment,
          labelType: labelType,
          unselectedLabelTextStyle: unselectedLabelTextStyle,
          selectedLabelTextStyle: selectedLabelTextStyle,
          unselectedIconTheme: unselectedIconTheme,
          selectedIconTheme: selectedIconTheme,
          minWidth: minWidth,
          minExtendedWidth: minExtendedWidth,
          useIndicator: useIndicator,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
        ) {
    mateBuilder = (p) => NavigationRail$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          extended: p.get('extended').build(),
          leading: p.get('leading').build(),
          trailing: p.get('trailing').build(),
          destinations: p.get('destinations').build(),
          selectedIndex: p.get('selectedIndex').build(),
          onDestinationSelected: p.get('onDestinationSelected').build(),
          elevation: p.get('elevation').build(),
          groupAlignment: p.get('groupAlignment').build(),
          labelType: p.get('labelType').build(),
          unselectedLabelTextStyle: p.get('unselectedLabelTextStyle').build(),
          selectedLabelTextStyle: p.get('selectedLabelTextStyle').build(),
          unselectedIconTheme: p.get('unselectedIconTheme').build(),
          selectedIconTheme: p.get('selectedIconTheme').build(),
          minWidth: p.get('minWidth').build(),
          minExtendedWidth: p.get('minExtendedWidth').build(),
          useIndicator: p.get('useIndicator').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
        );
    mateUse('key', key);
    mateUse('backgroundColor', backgroundColor);
    mateUse('extended', extended);
    mateUse('leading', leading);
    mateUse('trailing', trailing);
    mateUse('destinations', destinations);
    mateUse('selectedIndex', selectedIndex);
    mateUse('onDestinationSelected', onDestinationSelected);
    mateUse('elevation', elevation);
    mateUse('groupAlignment', groupAlignment);
    mateUse('labelType', labelType);
    mateUse('unselectedLabelTextStyle', unselectedLabelTextStyle);
    mateUse('selectedLabelTextStyle', selectedLabelTextStyle);
    mateUse('unselectedIconTheme', unselectedIconTheme);
    mateUse('selectedIconTheme', selectedIconTheme);
    mateUse('minWidth', minWidth);
    mateUse('minExtendedWidth', minExtendedWidth);
    mateUse('useIndicator', useIndicator);
    mateUse('indicatorColor', indicatorColor);
    mateUse('indicatorShape', indicatorShape);
  }
}

/// class NavigationRailDestination
class NavigationRailDestination$Mate extends NavigationRailDestination
    with Mate {
  /// NavigationRailDestination NavigationRailDestination({required Widget icon, Widget? selectedIcon, Color? indicatorColor, ShapeBorder? indicatorShape, required Widget label, EdgeInsetsGeometry? padding})
  NavigationRailDestination$Mate({
    /// optionalParameters: {required Widget icon} , defaultValue:none
    required Widget icon,

    /// optionalParameters: {Widget? selectedIcon} , defaultValue:none
    Widget? selectedIcon,

    /// optionalParameters: {Color? indicatorColor} , defaultValue:none
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , defaultValue:none
    ShapeBorder? indicatorShape,

    /// optionalParameters: {required Widget label} , defaultValue:none
    required Widget label,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,
  }) : super(
          icon: icon,
          selectedIcon: selectedIcon,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          label: label,
          padding: padding,
        ) {
    mateBuilder = (p) => NavigationRailDestination$Mate(
          icon: p.get('icon').build(),
          selectedIcon: p.get('selectedIcon').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
          label: p.get('label').build(),
          padding: p.get('padding').build(),
        );
    mateUse('icon', icon);
    mateUse('selectedIcon', selectedIcon);
    mateUse('indicatorColor', indicatorColor);
    mateUse('indicatorShape', indicatorShape);
    mateUse('label', label);
    mateUse('padding', padding);
  }
}
