// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/navigation_rail.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/foundation/basic_types.dart' as _i6;
import 'package:flutter/src/painting/text_style.dart' as _i7;
import 'package:flutter/src/widgets/icon_theme_data.dart' as _i8;
import 'package:flutter/src/painting/borders.dart' as _i9;
import 'package:flutter/src/painting/edge_insets.dart' as _i10;

/// class NavigationRail extends StatefulWidget
class NavigationRail$Mate extends _i1.NavigationRail with _i2.Mate {
  /// NavigationRail NavigationRail({Key? key, Color? backgroundColor, bool extended = false, Widget? leading, Widget? trailing, required List<NavigationRailDestination> destinations, required int? selectedIndex, void Function(int)? onDestinationSelected, double? elevation, double? groupAlignment, NavigationRailLabelType? labelType, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? minWidth, double? minExtendedWidth, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape})
  NavigationRail$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Color? backgroundColor} , default:none
    _i4.Color? backgroundColor,

    /// optionalParameters: {bool extended = false} , default:processed=BooleanLiteralImpl
    bool extended = false,

    /// optionalParameters: {Widget? leading} , default:none
    _i5.Widget? leading,

    /// optionalParameters: {Widget? trailing} , default:none
    _i5.Widget? trailing,

    /// optionalParameters: {required List<NavigationRailDestination> destinations} , default:none
    required List<_i1.NavigationRailDestination> destinations,

    /// optionalParameters: {required int? selectedIndex} , default:none
    required int? selectedIndex,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , default:none
    _i6.ValueChanged<int>? onDestinationSelected,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {double? groupAlignment} , default:none
    double? groupAlignment,

    /// optionalParameters: {NavigationRailLabelType? labelType} , default:none
    _i1.NavigationRailLabelType? labelType,

    /// optionalParameters: {TextStyle? unselectedLabelTextStyle} , default:none
    _i7.TextStyle? unselectedLabelTextStyle,

    /// optionalParameters: {TextStyle? selectedLabelTextStyle} , default:none
    _i7.TextStyle? selectedLabelTextStyle,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , default:none
    _i8.IconThemeData? unselectedIconTheme,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , default:none
    _i8.IconThemeData? selectedIconTheme,

    /// optionalParameters: {double? minWidth} , default:none
    double? minWidth,

    /// optionalParameters: {double? minExtendedWidth} , default:none
    double? minExtendedWidth,

    /// optionalParameters: {bool? useIndicator} , default:none
    bool? useIndicator,

    /// optionalParameters: {Color? indicatorColor} , default:none
    _i4.Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , default:none
    _i9.ShapeBorder? indicatorShape,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          extended: extended,
          leading: leading,
          trailing: trailing,
          destinations: destinations,
          selectedIndex: selectedIndex,
          onDestinationSelected: onDestinationSelected,
          elevation: elevation,
          groupAlignment: groupAlignment,
          labelType: labelType,
          unselectedLabelTextStyle: unselectedLabelTextStyle,
          selectedLabelTextStyle: selectedLabelTextStyle,
          unselectedIconTheme: unselectedIconTheme,
          selectedIconTheme: selectedIconTheme,
          minWidth: minWidth,
          minExtendedWidth: minExtendedWidth,
          useIndicator: useIndicator,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
        ) {
    mateBuilderName = 'NavigationRail';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationRail$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          extended: p.get('extended').build(),
          leading: p.get('leading').build(),
          trailing: p.get('trailing').build(),
          destinations: p.get('destinations').build(),
          selectedIndex: p.get('selectedIndex').build(),
          onDestinationSelected: p.get('onDestinationSelected').build(),
          elevation: p.get('elevation').build(),
          groupAlignment: p.get('groupAlignment').build(),
          labelType: p.get('labelType').build(),
          unselectedLabelTextStyle: p.get('unselectedLabelTextStyle').build(),
          selectedLabelTextStyle: p.get('selectedLabelTextStyle').build(),
          unselectedIconTheme: p.get('unselectedIconTheme').build(),
          selectedIconTheme: p.get('selectedIconTheme').build(),
          minWidth: p.get('minWidth').build(),
          minExtendedWidth: p.get('minExtendedWidth').build(),
          useIndicator: p.get('useIndicator').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'extended',
      extended,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'leading',
      leading,
      isNamed: true,
    );
    mateUse(
      'trailing',
      trailing,
      isNamed: true,
    );
    mateUse(
      'destinations',
      destinations,
      isNamed: true,
    );
    mateUse(
      'selectedIndex',
      selectedIndex,
      isNamed: true,
    );
    mateUse(
      'onDestinationSelected',
      onDestinationSelected,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'groupAlignment',
      groupAlignment,
      isNamed: true,
    );
    mateUse(
      'labelType',
      labelType,
      isNamed: true,
    );
    mateUse(
      'unselectedLabelTextStyle',
      unselectedLabelTextStyle,
      isNamed: true,
    );
    mateUse(
      'selectedLabelTextStyle',
      selectedLabelTextStyle,
      isNamed: true,
    );
    mateUse(
      'unselectedIconTheme',
      unselectedIconTheme,
      isNamed: true,
    );
    mateUse(
      'selectedIconTheme',
      selectedIconTheme,
      isNamed: true,
    );
    mateUse(
      'minWidth',
      minWidth,
      isNamed: true,
    );
    mateUse(
      'minExtendedWidth',
      minExtendedWidth,
      isNamed: true,
    );
    mateUse(
      'useIndicator',
      useIndicator,
      isNamed: true,
    );
    mateUse(
      'indicatorColor',
      indicatorColor,
      isNamed: true,
    );
    mateUse(
      'indicatorShape',
      indicatorShape,
      isNamed: true,
    );
  }
}

/// class NavigationRailDestination
class NavigationRailDestination$Mate extends _i1.NavigationRailDestination with _i2.Mate {
  /// NavigationRailDestination NavigationRailDestination({required Widget icon, Widget? selectedIcon, Color? indicatorColor, ShapeBorder? indicatorShape, required Widget label, EdgeInsetsGeometry? padding})
  NavigationRailDestination$Mate({
    /// optionalParameters: {required Widget icon} , default:none
    required _i5.Widget icon,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    _i5.Widget? selectedIcon,

    /// optionalParameters: {Color? indicatorColor} , default:none
    _i4.Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , default:none
    _i9.ShapeBorder? indicatorShape,

    /// optionalParameters: {required Widget label} , default:none
    required _i5.Widget label,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i10.EdgeInsetsGeometry? padding,
  }) : super(
          icon: icon,
          selectedIcon: selectedIcon,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          label: label,
          padding: padding,
        ) {
    mateBuilderName = 'NavigationRailDestination';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationRailDestination$Mate(
          icon: p.get('icon').build(),
          selectedIcon: p.get('selectedIcon').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
          label: p.get('label').build(),
          padding: p.get('padding').build(),
        );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
    mateUse(
      'selectedIcon',
      selectedIcon,
      isNamed: true,
    );
    mateUse(
      'indicatorColor',
      indicatorColor,
      isNamed: true,
    );
    mateUse(
      'indicatorShape',
      indicatorShape,
      isNamed: true,
    );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
  }
}
