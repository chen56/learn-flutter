// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/switch.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/foundation/basic_types.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/image_provider.dart' as _i6;
import 'package:flutter/src/painting/image_stream.dart' as _i7;
import 'package:flutter/src/material/material_state.dart' as _i8;
import 'package:flutter/src/widgets/icon.dart' as _i9;
import 'package:flutter/src/material/theme_data.dart' as _i10;
import 'package:flutter/src/gestures/recognizer.dart' as _i11;
import 'package:flutter/gestures.dart' as _i12;
import 'package:flutter/src/services/mouse_cursor.dart' as _i13;
import 'package:flutter/src/widgets/focus_manager.dart' as _i14;

/// class Switch extends StatelessWidget
class Switch$Mate extends _i1.Switch with _i2.Mate {
  /// Switch Switch({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, MaterialTapTargetSize? materialTapTargetSize, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false})
  Switch$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required bool value} , default:none
    required bool value,

    /// optionalParameters: {required void Function(bool)? onChanged} , default:none
    required _i4.ValueChanged<bool>? onChanged,

    /// optionalParameters: {Color? activeColor} , default:none
    _i5.Color? activeColor,

    /// optionalParameters: {Color? activeTrackColor} , default:none
    _i5.Color? activeTrackColor,

    /// optionalParameters: {Color? inactiveThumbColor} , default:none
    _i5.Color? inactiveThumbColor,

    /// optionalParameters: {Color? inactiveTrackColor} , default:none
    _i5.Color? inactiveTrackColor,

    /// optionalParameters: {ImageProvider<Object>? activeThumbImage} , default:none
    _i6.ImageProvider<Object>? activeThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onActiveThumbImageError} , default:none
    _i7.ImageErrorListener? onActiveThumbImageError,

    /// optionalParameters: {ImageProvider<Object>? inactiveThumbImage} , default:none
    _i6.ImageProvider<Object>? inactiveThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onInactiveThumbImageError} , default:none
    _i7.ImageErrorListener? onInactiveThumbImageError,

    /// optionalParameters: {MaterialStateProperty<Color?>? thumbColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? trackColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackOutlineColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? trackOutlineColor,

    /// optionalParameters: {MaterialStateProperty<Icon?>? thumbIcon} , default:none
    _i8.MaterialStateProperty<_i9.Icon?>? thumbIcon,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    _i10.MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i11.DragStartBehavior dragStartBehavior = _i12.DragStartBehavior.start,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i13.MouseCursor? mouseCursor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i5.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i5.Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i14.FocusNode? focusNode,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i4.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          onActiveThumbImageError: onActiveThumbImageError,
          inactiveThumbImage: inactiveThumbImage,
          onInactiveThumbImageError: onInactiveThumbImageError,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackOutlineColor: trackOutlineColor,
          thumbIcon: thumbIcon,
          materialTapTargetSize: materialTapTargetSize,
          dragStartBehavior: dragStartBehavior,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
        ) {
    mateBuilderName = 'Switch';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Switch$Mate(
          key: p.get('key').build(),
          value: p.get('value').build(),
          onChanged: p.get('onChanged').build(),
          activeColor: p.get('activeColor').build(),
          activeTrackColor: p.get('activeTrackColor').build(),
          inactiveThumbColor: p.get('inactiveThumbColor').build(),
          inactiveTrackColor: p.get('inactiveTrackColor').build(),
          activeThumbImage: p.get('activeThumbImage').build(),
          onActiveThumbImageError: p.get('onActiveThumbImageError').build(),
          inactiveThumbImage: p.get('inactiveThumbImage').build(),
          onInactiveThumbImageError: p.get('onInactiveThumbImageError').build(),
          thumbColor: p.get('thumbColor').build(),
          trackColor: p.get('trackColor').build(),
          trackOutlineColor: p.get('trackOutlineColor').build(),
          thumbIcon: p.get('thumbIcon').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          focusNode: p.get('focusNode').build(),
          onFocusChange: p.get('onFocusChange').build(),
          autofocus: p.get('autofocus').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'activeColor',
      activeColor,
      isNamed: true,
    );
    mateUse(
      'activeTrackColor',
      activeTrackColor,
      isNamed: true,
    );
    mateUse(
      'inactiveThumbColor',
      inactiveThumbColor,
      isNamed: true,
    );
    mateUse(
      'inactiveTrackColor',
      inactiveTrackColor,
      isNamed: true,
    );
    mateUse(
      'activeThumbImage',
      activeThumbImage,
      isNamed: true,
    );
    mateUse(
      'onActiveThumbImageError',
      onActiveThumbImageError,
      isNamed: true,
    );
    mateUse(
      'inactiveThumbImage',
      inactiveThumbImage,
      isNamed: true,
    );
    mateUse(
      'onInactiveThumbImageError',
      onInactiveThumbImageError,
      isNamed: true,
    );
    mateUse(
      'thumbColor',
      thumbColor,
      isNamed: true,
    );
    mateUse(
      'trackColor',
      trackColor,
      isNamed: true,
    );
    mateUse(
      'trackOutlineColor',
      trackOutlineColor,
      isNamed: true,
    );
    mateUse(
      'thumbIcon',
      thumbIcon,
      isNamed: true,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i12.DragStartBehavior.start,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
  }

  /// Switch Switch.adaptive({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialTapTargetSize? materialTapTargetSize, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false, bool? applyCupertinoTheme})
  Switch$Mate.adaptive({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required bool value} , default:none
    required bool value,

    /// optionalParameters: {required void Function(bool)? onChanged} , default:none
    required _i4.ValueChanged<bool>? onChanged,

    /// optionalParameters: {Color? activeColor} , default:none
    _i5.Color? activeColor,

    /// optionalParameters: {Color? activeTrackColor} , default:none
    _i5.Color? activeTrackColor,

    /// optionalParameters: {Color? inactiveThumbColor} , default:none
    _i5.Color? inactiveThumbColor,

    /// optionalParameters: {Color? inactiveTrackColor} , default:none
    _i5.Color? inactiveTrackColor,

    /// optionalParameters: {ImageProvider<Object>? activeThumbImage} , default:none
    _i6.ImageProvider<Object>? activeThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onActiveThumbImageError} , default:none
    _i7.ImageErrorListener? onActiveThumbImageError,

    /// optionalParameters: {ImageProvider<Object>? inactiveThumbImage} , default:none
    _i6.ImageProvider<Object>? inactiveThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onInactiveThumbImageError} , default:none
    _i7.ImageErrorListener? onInactiveThumbImageError,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    _i10.MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {MaterialStateProperty<Color?>? thumbColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? trackColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackOutlineColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? trackOutlineColor,

    /// optionalParameters: {MaterialStateProperty<Icon?>? thumbIcon} , default:none
    _i8.MaterialStateProperty<_i9.Icon?>? thumbIcon,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i11.DragStartBehavior dragStartBehavior = _i12.DragStartBehavior.start,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i13.MouseCursor? mouseCursor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i5.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i5.Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    _i8.MaterialStateProperty<_i5.Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i14.FocusNode? focusNode,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i4.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {bool? applyCupertinoTheme} , default:none
    bool? applyCupertinoTheme,
  }) : super.adaptive(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          onActiveThumbImageError: onActiveThumbImageError,
          inactiveThumbImage: inactiveThumbImage,
          onInactiveThumbImageError: onInactiveThumbImageError,
          materialTapTargetSize: materialTapTargetSize,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackOutlineColor: trackOutlineColor,
          thumbIcon: thumbIcon,
          dragStartBehavior: dragStartBehavior,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          applyCupertinoTheme: applyCupertinoTheme,
        ) {
    mateBuilderName = 'Switch.adaptive';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Switch$Mate.adaptive(
          key: p.get('key').build(),
          value: p.get('value').build(),
          onChanged: p.get('onChanged').build(),
          activeColor: p.get('activeColor').build(),
          activeTrackColor: p.get('activeTrackColor').build(),
          inactiveThumbColor: p.get('inactiveThumbColor').build(),
          inactiveTrackColor: p.get('inactiveTrackColor').build(),
          activeThumbImage: p.get('activeThumbImage').build(),
          onActiveThumbImageError: p.get('onActiveThumbImageError').build(),
          inactiveThumbImage: p.get('inactiveThumbImage').build(),
          onInactiveThumbImageError: p.get('onInactiveThumbImageError').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          thumbColor: p.get('thumbColor').build(),
          trackColor: p.get('trackColor').build(),
          trackOutlineColor: p.get('trackOutlineColor').build(),
          thumbIcon: p.get('thumbIcon').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          focusNode: p.get('focusNode').build(),
          onFocusChange: p.get('onFocusChange').build(),
          autofocus: p.get('autofocus').build(),
          applyCupertinoTheme: p.get('applyCupertinoTheme').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'activeColor',
      activeColor,
      isNamed: true,
    );
    mateUse(
      'activeTrackColor',
      activeTrackColor,
      isNamed: true,
    );
    mateUse(
      'inactiveThumbColor',
      inactiveThumbColor,
      isNamed: true,
    );
    mateUse(
      'inactiveTrackColor',
      inactiveTrackColor,
      isNamed: true,
    );
    mateUse(
      'activeThumbImage',
      activeThumbImage,
      isNamed: true,
    );
    mateUse(
      'onActiveThumbImageError',
      onActiveThumbImageError,
      isNamed: true,
    );
    mateUse(
      'inactiveThumbImage',
      inactiveThumbImage,
      isNamed: true,
    );
    mateUse(
      'onInactiveThumbImageError',
      onInactiveThumbImageError,
      isNamed: true,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'thumbColor',
      thumbColor,
      isNamed: true,
    );
    mateUse(
      'trackColor',
      trackColor,
      isNamed: true,
    );
    mateUse(
      'trackOutlineColor',
      trackOutlineColor,
      isNamed: true,
    );
    mateUse(
      'thumbIcon',
      thumbIcon,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i12.DragStartBehavior.start,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'applyCupertinoTheme',
      applyCupertinoTheme,
      isNamed: true,
    );
  }
}
