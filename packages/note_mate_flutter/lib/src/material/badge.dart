// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/badge.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class Badge extends StatelessWidget
class Badge$Mate extends Badge with Mate {
  /// Badge Badge({Key? key, Color? backgroundColor, Color? textColor, double? smallSize, double? largeSize, TextStyle? textStyle, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, Offset? offset, Widget? label, bool isLabelVisible = true, Widget? child})
  Badge$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {Color? textColor} , defaultValue:none
    Color? textColor,

    /// optionalParameters: {double? smallSize} , defaultValue:none
    double? smallSize,

    /// optionalParameters: {double? largeSize} , defaultValue:none
    double? largeSize,

    /// optionalParameters: {TextStyle? textStyle} , defaultValue:none
    TextStyle? textStyle,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , defaultValue:none
    AlignmentGeometry? alignment,

    /// optionalParameters: {Offset? offset} , defaultValue:none
    Offset? offset,

    /// optionalParameters: {Widget? label} , defaultValue:none
    Widget? label,

    /// optionalParameters: {bool isLabelVisible = true} , defaultValue:Literal
    bool isLabelVisible = true,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          textColor: textColor,
          smallSize: smallSize,
          largeSize: largeSize,
          textStyle: textStyle,
          padding: padding,
          alignment: alignment,
          offset: offset,
          label: label,
          isLabelVisible: isLabelVisible,
          child: child,
        ) {
    mateBuilder = (p) => Badge$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          textColor: p.get('textColor').build(),
          smallSize: p.get('smallSize').build(),
          largeSize: p.get('largeSize').build(),
          textStyle: p.get('textStyle').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          offset: p.get('offset').build(),
          label: p.get('label').build(),
          isLabelVisible: p.get('isLabelVisible').build(),
          child: p.get('child').build(),
        );
    mateDeclare('key', key);
    mateDeclare('backgroundColor', backgroundColor);
    mateDeclare('textColor', textColor);
    mateDeclare('smallSize', smallSize);
    mateDeclare('largeSize', largeSize);
    mateDeclare('textStyle', textStyle);
    mateDeclare('padding', padding);
    mateDeclare('alignment', alignment);
    mateDeclare('offset', offset);
    mateDeclare('label', label);
    mateDeclare('isLabelVisible', isLabelVisible);
    mateDeclare('child', child);
  }

  /// Badge Badge.count({Key? key, Color? backgroundColor, Color? textColor, double? smallSize, double? largeSize, TextStyle? textStyle, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, Offset? offset, required int count, bool isLabelVisible = true, Widget? child})
  Badge$Mate.count({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {Color? textColor} , defaultValue:none
    Color? textColor,

    /// optionalParameters: {double? smallSize} , defaultValue:none
    double? smallSize,

    /// optionalParameters: {double? largeSize} , defaultValue:none
    double? largeSize,

    /// optionalParameters: {TextStyle? textStyle} , defaultValue:none
    TextStyle? textStyle,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , defaultValue:none
    AlignmentGeometry? alignment,

    /// optionalParameters: {Offset? offset} , defaultValue:none
    Offset? offset,

    /// optionalParameters: {required int count} , defaultValue:none
    required int count,

    /// optionalParameters: {bool isLabelVisible = true} , defaultValue:Literal
    bool isLabelVisible = true,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super.count(
          key: key,
          backgroundColor: backgroundColor,
          textColor: textColor,
          smallSize: smallSize,
          largeSize: largeSize,
          textStyle: textStyle,
          padding: padding,
          alignment: alignment,
          offset: offset,
          count: count,
          isLabelVisible: isLabelVisible,
          child: child,
        ) {
    mateBuilder = (p) => Badge$Mate.count(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          textColor: p.get('textColor').build(),
          smallSize: p.get('smallSize').build(),
          largeSize: p.get('largeSize').build(),
          textStyle: p.get('textStyle').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          offset: p.get('offset').build(),
          count: p.get('count').build(),
          isLabelVisible: p.get('isLabelVisible').build(),
          child: p.get('child').build(),
        );
    mateDeclare('key', key);
    mateDeclare('backgroundColor', backgroundColor);
    mateDeclare('textColor', textColor);
    mateDeclare('smallSize', smallSize);
    mateDeclare('largeSize', largeSize);
    mateDeclare('textStyle', textStyle);
    mateDeclare('padding', padding);
    mateDeclare('alignment', alignment);
    mateDeclare('offset', offset);
    mateDeclare('count', count);
    mateDeclare('isLabelVisible', isLabelVisible);
    mateDeclare('child', child);
  }
}
