// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/calendar_date_picker.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/material/date.dart';
import 'package:flutter/material.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/gestures.dart';

/// class CalendarDatePicker extends StatefulWidget
class CalendarDatePicker$Mate extends CalendarDatePicker with Mate {
  /// CalendarDatePicker CalendarDatePicker({Key? key, required DateTime initialDate, required DateTime firstDate, required DateTime lastDate, DateTime? currentDate, required void Function(DateTime) onDateChanged, void Function(DateTime)? onDisplayedMonthChanged, DatePickerMode initialCalendarMode = DatePickerMode.day, bool Function(DateTime)? selectableDayPredicate})
  CalendarDatePicker$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required DateTime initialDate} , default:none
    required DateTime initialDate,

    /// optionalParameters: {required DateTime firstDate} , default:none
    required DateTime firstDate,

    /// optionalParameters: {required DateTime lastDate} , default:none
    required DateTime lastDate,

    /// optionalParameters: {DateTime? currentDate} , default:none
    DateTime? currentDate,

    /// optionalParameters: {required void Function(DateTime) onDateChanged} , default:none
    required ValueChanged<DateTime> onDateChanged,

    /// optionalParameters: {void Function(DateTime)? onDisplayedMonthChanged} , default:none
    ValueChanged<DateTime>? onDisplayedMonthChanged,

    /// optionalParameters: {DatePickerMode initialCalendarMode = DatePickerMode.day} , default:processed=PrefixedIdentifierImpl
    DatePickerMode initialCalendarMode = DatePickerMode.day,

    /// optionalParameters: {bool Function(DateTime)? selectableDayPredicate} , default:none
    SelectableDayPredicate? selectableDayPredicate,
  }) : super(
          key: key,
          initialDate: initialDate,
          firstDate: firstDate,
          lastDate: lastDate,
          currentDate: currentDate,
          onDateChanged: onDateChanged,
          onDisplayedMonthChanged: onDisplayedMonthChanged,
          initialCalendarMode: initialCalendarMode,
          selectableDayPredicate: selectableDayPredicate,
        ) {
    mateCreateName = 'CalendarDatePicker';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => CalendarDatePicker$Mate(
          key: p.get('key').build(),
          initialDate: p.get('initialDate').build(),
          firstDate: p.get('firstDate').build(),
          lastDate: p.get('lastDate').build(),
          currentDate: p.get('currentDate').build(),
          onDateChanged: p.get('onDateChanged').build(),
          onDisplayedMonthChanged: p.get('onDisplayedMonthChanged').build(),
          initialCalendarMode: p.get('initialCalendarMode').build(),
          selectableDayPredicate: p.get('selectableDayPredicate').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'initialDate',
      initialDate,
      isNamed: true,
    );
    mateUse(
      'firstDate',
      firstDate,
      isNamed: true,
    );
    mateUse(
      'lastDate',
      lastDate,
      isNamed: true,
    );
    mateUse(
      'currentDate',
      currentDate,
      isNamed: true,
    );
    mateUse(
      'onDateChanged',
      onDateChanged,
      isNamed: true,
    );
    mateUse(
      'onDisplayedMonthChanged',
      onDisplayedMonthChanged,
      isNamed: true,
    );
    mateUse(
      'initialCalendarMode',
      initialCalendarMode,
      isNamed: true,
      defaultValue: DatePickerMode.day,
    );
    mateUse(
      'selectableDayPredicate',
      selectableDayPredicate,
      isNamed: true,
    );
  }
}

/// class YearPicker extends StatefulWidget
class YearPicker$Mate extends YearPicker with Mate {
  /// YearPicker YearPicker({Key? key, DateTime? currentDate, required DateTime firstDate, required DateTime lastDate, DateTime? initialDate, required DateTime selectedDate, required void Function(DateTime) onChanged, DragStartBehavior dragStartBehavior = DragStartBehavior.start})
  YearPicker$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {DateTime? currentDate} , default:none
    DateTime? currentDate,

    /// optionalParameters: {required DateTime firstDate} , default:none
    required DateTime firstDate,

    /// optionalParameters: {required DateTime lastDate} , default:none
    required DateTime lastDate,

    /// optionalParameters: {DateTime? initialDate} , default:none
    DateTime? initialDate,

    /// optionalParameters: {required DateTime selectedDate} , default:none
    required DateTime selectedDate,

    /// optionalParameters: {required void Function(DateTime) onChanged} , default:none
    required ValueChanged<DateTime> onChanged,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,
  }) : super(
          key: key,
          currentDate: currentDate,
          firstDate: firstDate,
          lastDate: lastDate,
          initialDate: initialDate,
          selectedDate: selectedDate,
          onChanged: onChanged,
          dragStartBehavior: dragStartBehavior,
        ) {
    mateCreateName = 'YearPicker';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => YearPicker$Mate(
          key: p.get('key').build(),
          currentDate: p.get('currentDate').build(),
          firstDate: p.get('firstDate').build(),
          lastDate: p.get('lastDate').build(),
          initialDate: p.get('initialDate').build(),
          selectedDate: p.get('selectedDate').build(),
          onChanged: p.get('onChanged').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'currentDate',
      currentDate,
      isNamed: true,
    );
    mateUse(
      'firstDate',
      firstDate,
      isNamed: true,
    );
    mateUse(
      'lastDate',
      lastDate,
      isNamed: true,
    );
    mateUse(
      'initialDate',
      initialDate,
      isNamed: true,
    );
    mateUse(
      'selectedDate',
      selectedDate,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: DragStartBehavior.start,
    );
  }
}
