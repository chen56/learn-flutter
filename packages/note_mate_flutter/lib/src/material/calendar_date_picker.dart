// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/calendar_date_picker.dart';import 'package:flutter/src/foundation/key.dart';import 'dart:core';import 'package:flutter/src/foundation/basic_types.dart';import 'package:flutter/src/material/date.dart';import 'package:flutter/src/gestures/recognizer.dart';import 'package:note/mate.dart' show Mate;/// class CalendarDatePicker extends StatefulWidget
class CalendarDatePicker$Mate extends CalendarDatePicker with Mate {/// CalendarDatePicker CalendarDatePicker({Key? key, required DateTime initialDate, required DateTime firstDate, required DateTime lastDate, DateTime? currentDate, required void Function(DateTime) onDateChanged, void Function(DateTime)? onDisplayedMonthChanged, DatePickerMode initialCalendarMode = DatePickerMode.day, bool Function(DateTime)? selectableDayPredicate})
CalendarDatePicker$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required DateTime initialDate} , hasDefaultValue:false, defaultValueCode:null
required DateTime initialDate, /// optionalParameters: {required DateTime firstDate} , hasDefaultValue:false, defaultValueCode:null
required DateTime firstDate, /// optionalParameters: {required DateTime lastDate} , hasDefaultValue:false, defaultValueCode:null
required DateTime lastDate, /// optionalParameters: {DateTime? currentDate} , hasDefaultValue:false, defaultValueCode:null
DateTime? currentDate, /// optionalParameters: {required void Function(DateTime) onDateChanged} , hasDefaultValue:false, defaultValueCode:null
required ValueChanged<DateTime> onDateChanged, /// optionalParameters: {void Function(DateTime)? onDisplayedMonthChanged} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<DateTime>? onDisplayedMonthChanged, /// optionalParameters: {DatePickerMode initialCalendarMode = DatePickerMode.day} , hasDefaultValue:true, defaultValueCode:DatePickerMode.day
required DatePickerMode initialCalendarMode, /// optionalParameters: {bool Function(DateTime)? selectableDayPredicate} , hasDefaultValue:false, defaultValueCode:null
SelectableDayPredicate? selectableDayPredicate, }) : super(key: key, initialDate: initialDate, firstDate: firstDate, lastDate: lastDate, currentDate: currentDate, onDateChanged: onDateChanged, onDisplayedMonthChanged: onDisplayedMonthChanged, initialCalendarMode: initialCalendarMode, selectableDayPredicate: selectableDayPredicate, ) { mateBuilder = (p) => CalendarDatePicker$Mate(key: p.get('key').build(), initialDate: p.get('initialDate').build(), firstDate: p.get('firstDate').build(), lastDate: p.get('lastDate').build(), currentDate: p.get('currentDate').build(), onDateChanged: p.get('onDateChanged').build(), onDisplayedMonthChanged: p.get('onDisplayedMonthChanged').build(), initialCalendarMode: p.get('initialCalendarMode').build(), selectableDayPredicate: p.get('selectableDayPredicate').build(), );
matePut('key', key);
matePut('initialDate', initialDate);
matePut('firstDate', firstDate);
matePut('lastDate', lastDate);
matePut('currentDate', currentDate);
matePut('onDateChanged', onDateChanged);
matePut('onDisplayedMonthChanged', onDisplayedMonthChanged);
matePut('initialCalendarMode', initialCalendarMode);
matePut('selectableDayPredicate', selectableDayPredicate); }

 }
/// class YearPicker extends StatefulWidget
class YearPicker$Mate extends YearPicker with Mate {/// YearPicker YearPicker({Key? key, DateTime? currentDate, required DateTime firstDate, required DateTime lastDate, DateTime? initialDate, required DateTime selectedDate, required void Function(DateTime) onChanged, DragStartBehavior dragStartBehavior = DragStartBehavior.start})
YearPicker$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {DateTime? currentDate} , hasDefaultValue:false, defaultValueCode:null
DateTime? currentDate, /// optionalParameters: {required DateTime firstDate} , hasDefaultValue:false, defaultValueCode:null
required DateTime firstDate, /// optionalParameters: {required DateTime lastDate} , hasDefaultValue:false, defaultValueCode:null
required DateTime lastDate, /// optionalParameters: {DateTime? initialDate} , hasDefaultValue:false, defaultValueCode:null
DateTime? initialDate, /// optionalParameters: {required DateTime selectedDate} , hasDefaultValue:false, defaultValueCode:null
required DateTime selectedDate, /// optionalParameters: {required void Function(DateTime) onChanged} , hasDefaultValue:false, defaultValueCode:null
required ValueChanged<DateTime> onChanged, /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
required DragStartBehavior dragStartBehavior, }) : super(key: key, currentDate: currentDate, firstDate: firstDate, lastDate: lastDate, initialDate: initialDate, selectedDate: selectedDate, onChanged: onChanged, dragStartBehavior: dragStartBehavior, ) { mateBuilder = (p) => YearPicker$Mate(key: p.get('key').build(), currentDate: p.get('currentDate').build(), firstDate: p.get('firstDate').build(), lastDate: p.get('lastDate').build(), initialDate: p.get('initialDate').build(), selectedDate: p.get('selectedDate').build(), onChanged: p.get('onChanged').build(), dragStartBehavior: p.get('dragStartBehavior').build(), );
matePut('key', key);
matePut('currentDate', currentDate);
matePut('firstDate', firstDate);
matePut('lastDate', lastDate);
matePut('initialDate', initialDate);
matePut('selectedDate', selectedDate);
matePut('onChanged', onChanged);
matePut('dragStartBehavior', dragStartBehavior); }

 }
