// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/ink_well.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/widgets/focus_manager.dart';

/// class InkResponse extends StatelessWidget
class InkResponse$Mate extends InkResponse with Mate {
  /// InkResponse InkResponse({Key? key, Widget? child, void Function()? onTap, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, bool containedInkWell = false, BoxShape highlightShape = BoxShape.circle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, bool enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkResponse$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , defaultValue:none
    GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , defaultValue:none
    GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTapCancel} , defaultValue:none
    GestureTapCallback? onTapCancel,

    /// optionalParameters: {void Function()? onDoubleTap} , defaultValue:none
    GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , defaultValue:none
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {void Function(bool)? onHover} , defaultValue:none
    ValueChanged<bool>? onHover,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool containedInkWell = false} , defaultValue:Literal
    bool containedInkWell = false,

    /// optionalParameters: {BoxShape highlightShape = BoxShape.circle} , defaultValue:unprocessed
    required BoxShape highlightShape,

    /// optionalParameters: {double? radius} , defaultValue:none
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , defaultValue:none
    BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , defaultValue:none
    ShapeBorder? customBorder,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , defaultValue:none
    Color? highlightColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , defaultValue:none
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {Color? splashColor} , defaultValue:none
    Color? splashColor,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , defaultValue:none
    InteractiveInkFeatureFactory? splashFactory,

    /// optionalParameters: {bool enableFeedback = true} , defaultValue:Literal
    bool enableFeedback = true,

    /// optionalParameters: {bool excludeFromSemantics = false} , defaultValue:Literal
    bool excludeFromSemantics = false,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool canRequestFocus = true} , defaultValue:Literal
    bool canRequestFocus = true,

    /// optionalParameters: {void Function(bool)? onFocusChange} , defaultValue:none
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {MaterialStatesController? statesController} , defaultValue:none
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          containedInkWell: containedInkWell,
          highlightShape: highlightShape,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateBuilder = (p) => InkResponse$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTap: p.get('onTap').build(),
          onTapDown: p.get('onTapDown').build(),
          onTapUp: p.get('onTapUp').build(),
          onTapCancel: p.get('onTapCancel').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onHighlightChanged: p.get('onHighlightChanged').build(),
          onHover: p.get('onHover').build(),
          mouseCursor: p.get('mouseCursor').build(),
          containedInkWell: p.get('containedInkWell').build(),
          highlightShape: p.get('highlightShape').build(),
          radius: p.get('radius').build(),
          borderRadius: p.get('borderRadius').build(),
          customBorder: p.get('customBorder').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashColor: p.get('splashColor').build(),
          splashFactory: p.get('splashFactory').build(),
          enableFeedback: p.get('enableFeedback').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          focusNode: p.get('focusNode').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          onFocusChange: p.get('onFocusChange').build(),
          autofocus: p.get('autofocus').build(),
          statesController: p.get('statesController').build(),
        );
    mateDeclare('key', key);
    mateDeclare('child', child);
    mateDeclare('onTap', onTap);
    mateDeclare('onTapDown', onTapDown);
    mateDeclare('onTapUp', onTapUp);
    mateDeclare('onTapCancel', onTapCancel);
    mateDeclare('onDoubleTap', onDoubleTap);
    mateDeclare('onLongPress', onLongPress);
    mateDeclare('onHighlightChanged', onHighlightChanged);
    mateDeclare('onHover', onHover);
    mateDeclare('mouseCursor', mouseCursor);
    mateDeclare('containedInkWell', containedInkWell);
    mateDeclare('highlightShape', highlightShape);
    mateDeclare('radius', radius);
    mateDeclare('borderRadius', borderRadius);
    mateDeclare('customBorder', customBorder);
    mateDeclare('focusColor', focusColor);
    mateDeclare('hoverColor', hoverColor);
    mateDeclare('highlightColor', highlightColor);
    mateDeclare('overlayColor', overlayColor);
    mateDeclare('splashColor', splashColor);
    mateDeclare('splashFactory', splashFactory);
    mateDeclare('enableFeedback', enableFeedback);
    mateDeclare('excludeFromSemantics', excludeFromSemantics);
    mateDeclare('focusNode', focusNode);
    mateDeclare('canRequestFocus', canRequestFocus);
    mateDeclare('onFocusChange', onFocusChange);
    mateDeclare('autofocus', autofocus);
    mateDeclare('statesController', statesController);
  }
}

/// class InkWell extends InkResponse
class InkWell$Mate extends InkWell with Mate {
  /// InkWell InkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, bool? enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkWell$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onDoubleTap} , defaultValue:none
    GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , defaultValue:none
    GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , defaultValue:none
    GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTapCancel} , defaultValue:none
    GestureTapCallback? onTapCancel,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , defaultValue:none
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {void Function(bool)? onHover} , defaultValue:none
    ValueChanged<bool>? onHover,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , defaultValue:none
    Color? highlightColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , defaultValue:none
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {Color? splashColor} , defaultValue:none
    Color? splashColor,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , defaultValue:none
    InteractiveInkFeatureFactory? splashFactory,

    /// optionalParameters: {double? radius} , defaultValue:none
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , defaultValue:none
    BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , defaultValue:none
    ShapeBorder? customBorder,

    /// optionalParameters: {bool? enableFeedback = true} , defaultValue:Literal
    bool? enableFeedback = true,

    /// optionalParameters: {bool excludeFromSemantics = false} , defaultValue:Literal
    bool excludeFromSemantics = false,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool canRequestFocus = true} , defaultValue:Literal
    bool canRequestFocus = true,

    /// optionalParameters: {void Function(bool)? onFocusChange} , defaultValue:none
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {MaterialStatesController? statesController} , defaultValue:none
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateBuilder = (p) => InkWell$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTap: p.get('onTap').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onTapDown: p.get('onTapDown').build(),
          onTapUp: p.get('onTapUp').build(),
          onTapCancel: p.get('onTapCancel').build(),
          onHighlightChanged: p.get('onHighlightChanged').build(),
          onHover: p.get('onHover').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashColor: p.get('splashColor').build(),
          splashFactory: p.get('splashFactory').build(),
          radius: p.get('radius').build(),
          borderRadius: p.get('borderRadius').build(),
          customBorder: p.get('customBorder').build(),
          enableFeedback: p.get('enableFeedback').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          focusNode: p.get('focusNode').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          onFocusChange: p.get('onFocusChange').build(),
          autofocus: p.get('autofocus').build(),
          statesController: p.get('statesController').build(),
        );
    mateDeclare('key', key);
    mateDeclare('child', child);
    mateDeclare('onTap', onTap);
    mateDeclare('onDoubleTap', onDoubleTap);
    mateDeclare('onLongPress', onLongPress);
    mateDeclare('onTapDown', onTapDown);
    mateDeclare('onTapUp', onTapUp);
    mateDeclare('onTapCancel', onTapCancel);
    mateDeclare('onHighlightChanged', onHighlightChanged);
    mateDeclare('onHover', onHover);
    mateDeclare('mouseCursor', mouseCursor);
    mateDeclare('focusColor', focusColor);
    mateDeclare('hoverColor', hoverColor);
    mateDeclare('highlightColor', highlightColor);
    mateDeclare('overlayColor', overlayColor);
    mateDeclare('splashColor', splashColor);
    mateDeclare('splashFactory', splashFactory);
    mateDeclare('radius', radius);
    mateDeclare('borderRadius', borderRadius);
    mateDeclare('customBorder', customBorder);
    mateDeclare('enableFeedback', enableFeedback);
    mateDeclare('excludeFromSemantics', excludeFromSemantics);
    mateDeclare('focusNode', focusNode);
    mateDeclare('canRequestFocus', canRequestFocus);
    mateDeclare('onFocusChange', onFocusChange);
    mateDeclare('autofocus', autofocus);
    mateDeclare('statesController', statesController);
  }
}
