// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/ink_well.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/gestures/tap.dart' as _i5;
import 'package:flutter/src/gestures/long_press.dart' as _i6;
import 'package:flutter/src/foundation/basic_types.dart' as _i7;
import 'package:flutter/src/services/mouse_cursor.dart' as _i8;
import 'package:flutter/src/painting/box_border.dart' as _i9;
import 'package:flutter/cupertino.dart' as _i10;
import 'package:flutter/src/painting/border_radius.dart' as _i11;
import 'package:flutter/src/painting/borders.dart' as _i12;
import 'dart:ui' as _i13;
import 'package:flutter/src/material/material_state.dart' as _i14;
import 'package:flutter/src/widgets/focus_manager.dart' as _i15;

/// class InkResponse extends StatelessWidget
class InkResponse$Mate extends _i1.InkResponse with _i2.Mate {
  /// InkResponse InkResponse({Key? key, Widget? child, void Function()? onTap, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function()? onDoubleTap, void Function()? onLongPress, void Function()? onSecondaryTap, void Function(TapUpDetails)? onSecondaryTapUp, void Function(TapDownDetails)? onSecondaryTapDown, void Function()? onSecondaryTapCancel, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, bool containedInkWell = false, BoxShape highlightShape = BoxShape.circle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, bool enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkResponse$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i4.Widget? child,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i5.GestureTapCallback? onTap,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , default:none
    _i5.GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , default:none
    _i5.GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTapCancel} , default:none
    _i5.GestureTapCallback? onTapCancel,

    /// optionalParameters: {void Function()? onDoubleTap} , default:none
    _i5.GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    _i6.GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function()? onSecondaryTap} , default:none
    _i5.GestureTapCallback? onSecondaryTap,

    /// optionalParameters: {void Function(TapUpDetails)? onSecondaryTapUp} , default:none
    _i5.GestureTapUpCallback? onSecondaryTapUp,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , default:none
    _i5.GestureTapDownCallback? onSecondaryTapDown,

    /// optionalParameters: {void Function()? onSecondaryTapCancel} , default:none
    _i5.GestureTapCallback? onSecondaryTapCancel,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , default:none
    _i7.ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {void Function(bool)? onHover} , default:none
    _i7.ValueChanged<bool>? onHover,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {bool containedInkWell = false} , default:processed=BooleanLiteralImpl
    bool containedInkWell = false,

    /// optionalParameters: {BoxShape highlightShape = BoxShape.circle} , default:processed=PrefixedIdentifierImpl
    _i9.BoxShape highlightShape = _i10.BoxShape.circle,

    /// optionalParameters: {double? radius} , default:none
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    _i11.BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , default:none
    _i12.ShapeBorder? customBorder,

    /// optionalParameters: {Color? focusColor} , default:none
    _i13.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i13.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i13.Color? highlightColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    _i14.MaterialStateProperty<_i13.Color?>? overlayColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i13.Color? splashColor,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , default:none
    _i1.InteractiveInkFeatureFactory? splashFactory,

    /// optionalParameters: {bool enableFeedback = true} , default:processed=BooleanLiteralImpl
    bool enableFeedback = true,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i15.FocusNode? focusNode,

    /// optionalParameters: {bool canRequestFocus = true} , default:processed=BooleanLiteralImpl
    bool canRequestFocus = true,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i7.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {MaterialStatesController? statesController} , default:none
    _i14.MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onSecondaryTap: onSecondaryTap,
          onSecondaryTapUp: onSecondaryTapUp,
          onSecondaryTapDown: onSecondaryTapDown,
          onSecondaryTapCancel: onSecondaryTapCancel,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          containedInkWell: containedInkWell,
          highlightShape: highlightShape,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateBuilderName = 'InkResponse';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InkResponse$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTap: p.get('onTap').build(),
          onTapDown: p.get('onTapDown').build(),
          onTapUp: p.get('onTapUp').build(),
          onTapCancel: p.get('onTapCancel').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapUp: p.get('onSecondaryTapUp').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSecondaryTapCancel: p.get('onSecondaryTapCancel').build(),
          onHighlightChanged: p.get('onHighlightChanged').build(),
          onHover: p.get('onHover').build(),
          mouseCursor: p.get('mouseCursor').build(),
          containedInkWell: p.get('containedInkWell').build(),
          highlightShape: p.get('highlightShape').build(),
          radius: p.get('radius').build(),
          borderRadius: p.get('borderRadius').build(),
          customBorder: p.get('customBorder').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashColor: p.get('splashColor').build(),
          splashFactory: p.get('splashFactory').build(),
          enableFeedback: p.get('enableFeedback').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          focusNode: p.get('focusNode').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          onFocusChange: p.get('onFocusChange').build(),
          autofocus: p.get('autofocus').build(),
          statesController: p.get('statesController').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'onTapDown',
      onTapDown,
      isNamed: true,
    );
    mateUse(
      'onTapUp',
      onTapUp,
      isNamed: true,
    );
    mateUse(
      'onTapCancel',
      onTapCancel,
      isNamed: true,
    );
    mateUse(
      'onDoubleTap',
      onDoubleTap,
      isNamed: true,
    );
    mateUse(
      'onLongPress',
      onLongPress,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTap',
      onSecondaryTap,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapUp',
      onSecondaryTapUp,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapDown',
      onSecondaryTapDown,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapCancel',
      onSecondaryTapCancel,
      isNamed: true,
    );
    mateUse(
      'onHighlightChanged',
      onHighlightChanged,
      isNamed: true,
    );
    mateUse(
      'onHover',
      onHover,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'containedInkWell',
      containedInkWell,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'highlightShape',
      highlightShape,
      isNamed: true,
      defaultValue: _i10.BoxShape.circle,
    );
    mateUse(
      'radius',
      radius,
      isNamed: true,
    );
    mateUse(
      'borderRadius',
      borderRadius,
      isNamed: true,
    );
    mateUse(
      'customBorder',
      customBorder,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'splashFactory',
      splashFactory,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'canRequestFocus',
      canRequestFocus,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'statesController',
      statesController,
      isNamed: true,
    );
  }
}

/// class InkWell extends InkResponse
class InkWell$Mate extends _i1.InkWell with _i2.Mate {
  /// InkWell InkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function()? onSecondaryTap, void Function(TapUpDetails)? onSecondaryTapUp, void Function(TapDownDetails)? onSecondaryTapDown, void Function()? onSecondaryTapCancel, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, bool? enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkWell$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i4.Widget? child,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i5.GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onDoubleTap} , default:none
    _i5.GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    _i6.GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , default:none
    _i5.GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , default:none
    _i5.GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTapCancel} , default:none
    _i5.GestureTapCallback? onTapCancel,

    /// optionalParameters: {void Function()? onSecondaryTap} , default:none
    _i5.GestureTapCallback? onSecondaryTap,

    /// optionalParameters: {void Function(TapUpDetails)? onSecondaryTapUp} , default:none
    _i5.GestureTapUpCallback? onSecondaryTapUp,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , default:none
    _i5.GestureTapDownCallback? onSecondaryTapDown,

    /// optionalParameters: {void Function()? onSecondaryTapCancel} , default:none
    _i5.GestureTapCallback? onSecondaryTapCancel,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , default:none
    _i7.ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {void Function(bool)? onHover} , default:none
    _i7.ValueChanged<bool>? onHover,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i13.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i13.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i13.Color? highlightColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    _i14.MaterialStateProperty<_i13.Color?>? overlayColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i13.Color? splashColor,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , default:none
    _i1.InteractiveInkFeatureFactory? splashFactory,

    /// optionalParameters: {double? radius} , default:none
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    _i11.BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , default:none
    _i12.ShapeBorder? customBorder,

    /// optionalParameters: {bool? enableFeedback = true} , default:processed=BooleanLiteralImpl
    bool? enableFeedback = true,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i15.FocusNode? focusNode,

    /// optionalParameters: {bool canRequestFocus = true} , default:processed=BooleanLiteralImpl
    bool canRequestFocus = true,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i7.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {MaterialStatesController? statesController} , default:none
    _i14.MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onSecondaryTap: onSecondaryTap,
          onSecondaryTapUp: onSecondaryTapUp,
          onSecondaryTapDown: onSecondaryTapDown,
          onSecondaryTapCancel: onSecondaryTapCancel,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateBuilderName = 'InkWell';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InkWell$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTap: p.get('onTap').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onTapDown: p.get('onTapDown').build(),
          onTapUp: p.get('onTapUp').build(),
          onTapCancel: p.get('onTapCancel').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapUp: p.get('onSecondaryTapUp').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSecondaryTapCancel: p.get('onSecondaryTapCancel').build(),
          onHighlightChanged: p.get('onHighlightChanged').build(),
          onHover: p.get('onHover').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashColor: p.get('splashColor').build(),
          splashFactory: p.get('splashFactory').build(),
          radius: p.get('radius').build(),
          borderRadius: p.get('borderRadius').build(),
          customBorder: p.get('customBorder').build(),
          enableFeedback: p.get('enableFeedback').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          focusNode: p.get('focusNode').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          onFocusChange: p.get('onFocusChange').build(),
          autofocus: p.get('autofocus').build(),
          statesController: p.get('statesController').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'onDoubleTap',
      onDoubleTap,
      isNamed: true,
    );
    mateUse(
      'onLongPress',
      onLongPress,
      isNamed: true,
    );
    mateUse(
      'onTapDown',
      onTapDown,
      isNamed: true,
    );
    mateUse(
      'onTapUp',
      onTapUp,
      isNamed: true,
    );
    mateUse(
      'onTapCancel',
      onTapCancel,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTap',
      onSecondaryTap,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapUp',
      onSecondaryTapUp,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapDown',
      onSecondaryTapDown,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapCancel',
      onSecondaryTapCancel,
      isNamed: true,
    );
    mateUse(
      'onHighlightChanged',
      onHighlightChanged,
      isNamed: true,
    );
    mateUse(
      'onHover',
      onHover,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'splashFactory',
      splashFactory,
      isNamed: true,
    );
    mateUse(
      'radius',
      radius,
      isNamed: true,
    );
    mateUse(
      'borderRadius',
      borderRadius,
      isNamed: true,
    );
    mateUse(
      'customBorder',
      customBorder,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'canRequestFocus',
      canRequestFocus,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'statesController',
      statesController,
      isNamed: true,
    );
  }
}
