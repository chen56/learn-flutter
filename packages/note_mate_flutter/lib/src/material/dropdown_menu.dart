// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/dropdown_menu.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/material/menu_style.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class DropdownMenuEntry<T>
class DropdownMenuEntry$Mate<T> extends DropdownMenuEntry<T> with Mate {
  /// DropdownMenuEntry<T> DropdownMenuEntry({required T value, required String label, Widget? leadingIcon, Widget? trailingIcon, bool enabled = true, ButtonStyle? style})
  DropdownMenuEntry$Mate({
    /// optionalParameters: {required T value} , defaultValue:none
    required T value,

    /// optionalParameters: {required String label} , defaultValue:none
    required String label,

    /// optionalParameters: {Widget? leadingIcon} , defaultValue:none
    Widget? leadingIcon,

    /// optionalParameters: {Widget? trailingIcon} , defaultValue:none
    Widget? trailingIcon,

    /// optionalParameters: {bool enabled = true} , defaultValue:Literal
    bool enabled = true,

    /// optionalParameters: {ButtonStyle? style} , defaultValue:none
    ButtonStyle? style,
  }) : super(
          value: value,
          label: label,
          leadingIcon: leadingIcon,
          trailingIcon: trailingIcon,
          enabled: enabled,
          style: style,
        ) {
    mateBuilder = (p) => DropdownMenuEntry$Mate<T>(
          value: p.get('value').build(),
          label: p.get('label').build(),
          leadingIcon: p.get('leadingIcon').build(),
          trailingIcon: p.get('trailingIcon').build(),
          enabled: p.get('enabled').build(),
          style: p.get('style').build(),
        );
    mateDeclare('value', value);
    mateDeclare('label', label);
    mateDeclare('leadingIcon', leadingIcon);
    mateDeclare('trailingIcon', trailingIcon);
    mateDeclare('enabled', enabled);
    mateDeclare('style', style);
  }
}

/// class DropdownMenu<T> extends StatefulWidget
class DropdownMenu$Mate<T> extends DropdownMenu<T> with Mate {
  /// DropdownMenu<T> DropdownMenu({Key? key, bool enabled = true, double? width, double? menuHeight, Widget? leadingIcon, Widget? trailingIcon, Widget? label, String? hintText, Widget? selectedTrailingIcon, bool enableFilter = false, bool enableSearch = true, TextStyle? textStyle, InputDecorationTheme? inputDecorationTheme, MenuStyle? menuStyle, TextEditingController? controller, T? initialSelection, void Function(T?)? onSelected, bool? requestFocusOnTap, required List<DropdownMenuEntry<T>> dropdownMenuEntries})
  DropdownMenu$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {bool enabled = true} , defaultValue:Literal
    bool enabled = true,

    /// optionalParameters: {double? width} , defaultValue:none
    double? width,

    /// optionalParameters: {double? menuHeight} , defaultValue:none
    double? menuHeight,

    /// optionalParameters: {Widget? leadingIcon} , defaultValue:none
    Widget? leadingIcon,

    /// optionalParameters: {Widget? trailingIcon} , defaultValue:none
    Widget? trailingIcon,

    /// optionalParameters: {Widget? label} , defaultValue:none
    Widget? label,

    /// optionalParameters: {String? hintText} , defaultValue:none
    String? hintText,

    /// optionalParameters: {Widget? selectedTrailingIcon} , defaultValue:none
    Widget? selectedTrailingIcon,

    /// optionalParameters: {bool enableFilter = false} , defaultValue:Literal
    bool enableFilter = false,

    /// optionalParameters: {bool enableSearch = true} , defaultValue:Literal
    bool enableSearch = true,

    /// optionalParameters: {TextStyle? textStyle} , defaultValue:none
    TextStyle? textStyle,

    /// optionalParameters: {InputDecorationTheme? inputDecorationTheme} , defaultValue:none
    InputDecorationTheme? inputDecorationTheme,

    /// optionalParameters: {MenuStyle? menuStyle} , defaultValue:none
    MenuStyle? menuStyle,

    /// optionalParameters: {TextEditingController? controller} , defaultValue:none
    TextEditingController? controller,

    /// optionalParameters: {T? initialSelection} , defaultValue:none
    T? initialSelection,

    /// optionalParameters: {void Function(T?)? onSelected} , defaultValue:none
    ValueChanged<T?>? onSelected,

    /// optionalParameters: {bool? requestFocusOnTap} , defaultValue:none
    bool? requestFocusOnTap,

    /// optionalParameters: {required List<DropdownMenuEntry<T>> dropdownMenuEntries} , defaultValue:none
    required List<DropdownMenuEntry<T>> dropdownMenuEntries,
  }) : super(
          key: key,
          enabled: enabled,
          width: width,
          menuHeight: menuHeight,
          leadingIcon: leadingIcon,
          trailingIcon: trailingIcon,
          label: label,
          hintText: hintText,
          selectedTrailingIcon: selectedTrailingIcon,
          enableFilter: enableFilter,
          enableSearch: enableSearch,
          textStyle: textStyle,
          inputDecorationTheme: inputDecorationTheme,
          menuStyle: menuStyle,
          controller: controller,
          initialSelection: initialSelection,
          onSelected: onSelected,
          requestFocusOnTap: requestFocusOnTap,
          dropdownMenuEntries: dropdownMenuEntries,
        ) {
    mateBuilder = (p) => DropdownMenu$Mate<T>(
          key: p.get('key').build(),
          enabled: p.get('enabled').build(),
          width: p.get('width').build(),
          menuHeight: p.get('menuHeight').build(),
          leadingIcon: p.get('leadingIcon').build(),
          trailingIcon: p.get('trailingIcon').build(),
          label: p.get('label').build(),
          hintText: p.get('hintText').build(),
          selectedTrailingIcon: p.get('selectedTrailingIcon').build(),
          enableFilter: p.get('enableFilter').build(),
          enableSearch: p.get('enableSearch').build(),
          textStyle: p.get('textStyle').build(),
          inputDecorationTheme: p.get('inputDecorationTheme').build(),
          menuStyle: p.get('menuStyle').build(),
          controller: p.get('controller').build(),
          initialSelection: p.get('initialSelection').build(),
          onSelected: p.get('onSelected').build(),
          requestFocusOnTap: p.get('requestFocusOnTap').build(),
          dropdownMenuEntries: p.get('dropdownMenuEntries').build(),
        );
    mateDeclare('key', key);
    mateDeclare('enabled', enabled);
    mateDeclare('width', width);
    mateDeclare('menuHeight', menuHeight);
    mateDeclare('leadingIcon', leadingIcon);
    mateDeclare('trailingIcon', trailingIcon);
    mateDeclare('label', label);
    mateDeclare('hintText', hintText);
    mateDeclare('selectedTrailingIcon', selectedTrailingIcon);
    mateDeclare('enableFilter', enableFilter);
    mateDeclare('enableSearch', enableSearch);
    mateDeclare('textStyle', textStyle);
    mateDeclare('inputDecorationTheme', inputDecorationTheme);
    mateDeclare('menuStyle', menuStyle);
    mateDeclare('controller', controller);
    mateDeclare('initialSelection', initialSelection);
    mateDeclare('onSelected', onSelected);
    mateDeclare('requestFocusOnTap', requestFocusOnTap);
    mateDeclare('dropdownMenuEntries', dropdownMenuEntries);
  }
}
