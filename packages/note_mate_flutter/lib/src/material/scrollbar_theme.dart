// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/scrollbar_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'dart:core';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ScrollbarThemeData with Diagnosticable
class ScrollbarThemeData$Mate extends ScrollbarThemeData with Mate<ScrollbarThemeData$Mate> {
  /// ScrollbarThemeData ScrollbarThemeData({MaterialStateProperty<bool?>? thumbVisibility, MaterialStateProperty<double?>? thickness, MaterialStateProperty<bool?>? trackVisibility, Radius? radius, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackBorderColor, double? crossAxisMargin, double? mainAxisMargin, double? minThumbLength, bool? interactive, bool? isAlwaysShown, bool? showTrackOnHover})
  ScrollbarThemeData$Mate({
    /// optionalParameters: {MaterialStateProperty<bool?>? thumbVisibility} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<bool?>? thumbVisibility,

    /// optionalParameters: {MaterialStateProperty<double?>? thickness} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<double?>? thickness,

    /// optionalParameters: {MaterialStateProperty<bool?>? trackVisibility} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<bool?>? trackVisibility,

    /// optionalParameters: {Radius? radius} , hasDefaultValue:false, defaultValueCode:null
    Radius? radius,

    /// optionalParameters: {MaterialStateProperty<Color?>? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackBorderColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackBorderColor,

    /// optionalParameters: {double? crossAxisMargin} , hasDefaultValue:false, defaultValueCode:null
    double? crossAxisMargin,

    /// optionalParameters: {double? mainAxisMargin} , hasDefaultValue:false, defaultValueCode:null
    double? mainAxisMargin,

    /// optionalParameters: {double? minThumbLength} , hasDefaultValue:false, defaultValueCode:null
    double? minThumbLength,

    /// optionalParameters: {bool? interactive} , hasDefaultValue:false, defaultValueCode:null
    bool? interactive,
  }) : super(
          thumbVisibility: thumbVisibility,
          thickness: thickness,
          trackVisibility: trackVisibility,
          radius: radius,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          crossAxisMargin: crossAxisMargin,
          mainAxisMargin: mainAxisMargin,
          minThumbLength: minThumbLength,
          interactive: interactive,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScrollbarThemeData$Mate(
        thumbVisibility: p.get('thumbVisibility').build(),
        thickness: p.get('thickness').build(),
        trackVisibility: p.get('trackVisibility').build(),
        radius: p.get('radius').build(),
        thumbColor: p.get('thumbColor').build(),
        trackColor: p.get('trackColor').build(),
        trackBorderColor: p.get('trackBorderColor').build(),
        crossAxisMargin: p.get('crossAxisMargin').build(),
        mainAxisMargin: p.get('mainAxisMargin').build(),
        minThumbLength: p.get('minThumbLength').build(),
        interactive: p.get('interactive').build(),
      ),
    );
    mateParams.put('thumbVisibility', thumbVisibility);
    mateParams.put('thickness', thickness);
    mateParams.put('trackVisibility', trackVisibility);
    mateParams.put('radius', radius);
    mateParams.put('thumbColor', thumbColor);
    mateParams.put('trackColor', trackColor);
    mateParams.put('trackBorderColor', trackBorderColor);
    mateParams.put('crossAxisMargin', crossAxisMargin);
    mateParams.put('mainAxisMargin', mainAxisMargin);
    mateParams.put('minThumbLength', minThumbLength);
    mateParams.put('interactive', interactive);
  }
}

/// class ScrollbarTheme extends InheritedTheme
class ScrollbarTheme$Mate extends ScrollbarTheme with WidgetMate<ScrollbarTheme$Mate> {
  /// ScrollbarTheme ScrollbarTheme({Key? key, required ScrollbarThemeData data, required Widget child})
  ScrollbarTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ScrollbarThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required ScrollbarThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScrollbarTheme$Mate(
        key: p.get('key').build(),
        data: p.get('data').build(),
        child: p.get('child').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('data', data);
    mateParams.put('child', child);
  }
}
