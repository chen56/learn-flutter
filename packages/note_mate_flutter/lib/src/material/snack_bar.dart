// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/snack_bar.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/snack_bar_theme.dart';
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/src/widgets/dismissible.dart';
import 'package:flutter/widgets.dart';

/// class SnackBarAction extends StatefulWidget
class SnackBarAction$Mate extends SnackBarAction with Mate {
  /// SnackBarAction SnackBarAction({Key? key, Color? textColor, Color? disabledTextColor, required String label, required void Function() onPressed})
  SnackBarAction$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Color? textColor} , default:none
    Color? textColor,

    /// optionalParameters: {Color? disabledTextColor} , default:none
    Color? disabledTextColor,

    /// optionalParameters: {required String label} , default:none
    required String label,

    /// optionalParameters: {required void Function() onPressed} , default:none
    required VoidCallback onPressed,
  }) : super(
          key: key,
          textColor: textColor,
          disabledTextColor: disabledTextColor,
          label: label,
          onPressed: onPressed,
        ) {
    mateCreateName = 'SnackBarAction';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SnackBarAction$Mate(
          key: p.get('key').build(),
          textColor: p.get('textColor').build(),
          disabledTextColor: p.get('disabledTextColor').build(),
          label: p.get('label').build(),
          onPressed: p.get('onPressed').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'textColor',
      textColor,
      isNamed: true,
    );
    mateUse(
      'disabledTextColor',
      disabledTextColor,
      isNamed: true,
    );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
  }
}

/// class SnackBar extends StatefulWidget
class SnackBar$Mate extends SnackBar with Mate {
  /// SnackBar SnackBar({Key? key, required Widget content, Color? backgroundColor, double? elevation, EdgeInsetsGeometry? margin, EdgeInsetsGeometry? padding, double? width, ShapeBorder? shape, SnackBarBehavior? behavior, SnackBarAction? action, double? actionOverflowThreshold, bool? showCloseIcon, Color? closeIconColor, Duration duration = _snackBarDisplayDuration, Animation<double>? animation, void Function()? onVisible, DismissDirection dismissDirection = DismissDirection.down, Clip clipBehavior = Clip.hardEdge})
  SnackBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget content} , default:none
    required Widget content,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , default:none
    EdgeInsetsGeometry? margin,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {SnackBarBehavior? behavior} , default:none
    SnackBarBehavior? behavior,

    /// optionalParameters: {SnackBarAction? action} , default:none
    SnackBarAction? action,

    /// optionalParameters: {double? actionOverflowThreshold} , default:none
    double? actionOverflowThreshold,

    /// optionalParameters: {bool? showCloseIcon} , default:none
    bool? showCloseIcon,

    /// optionalParameters: {Color? closeIconColor} , default:none
    Color? closeIconColor,

    /// optionalParameters: {Duration duration = _snackBarDisplayDuration} , default:unprocessed=SimpleIdentifierImpl
    required Duration duration,

    /// optionalParameters: {Animation<double>? animation} , default:none
    Animation<double>? animation,

    /// optionalParameters: {void Function()? onVisible} , default:none
    VoidCallback? onVisible,

    /// optionalParameters: {DismissDirection dismissDirection = DismissDirection.down} , default:processed=PrefixedIdentifierImpl
    DismissDirection dismissDirection = DismissDirection.down,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.hardEdge,
  }) : super(
          key: key,
          content: content,
          backgroundColor: backgroundColor,
          elevation: elevation,
          margin: margin,
          padding: padding,
          width: width,
          shape: shape,
          behavior: behavior,
          action: action,
          actionOverflowThreshold: actionOverflowThreshold,
          showCloseIcon: showCloseIcon,
          closeIconColor: closeIconColor,
          duration: duration,
          animation: animation,
          onVisible: onVisible,
          dismissDirection: dismissDirection,
          clipBehavior: clipBehavior,
        ) {
    mateCreateName = 'SnackBar';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SnackBar$Mate(
          key: p.get('key').build(),
          content: p.get('content').build(),
          backgroundColor: p.get('backgroundColor').build(),
          elevation: p.get('elevation').build(),
          margin: p.get('margin').build(),
          padding: p.get('padding').build(),
          width: p.get('width').build(),
          shape: p.get('shape').build(),
          behavior: p.get('behavior').build(),
          action: p.get('action').build(),
          actionOverflowThreshold: p.get('actionOverflowThreshold').build(),
          showCloseIcon: p.get('showCloseIcon').build(),
          closeIconColor: p.get('closeIconColor').build(),
          duration: p.get('duration').build(),
          animation: p.get('animation').build(),
          onVisible: p.get('onVisible').build(),
          dismissDirection: p.get('dismissDirection').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'content',
      content,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'margin',
      margin,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
    );
    mateUse(
      'action',
      action,
      isNamed: true,
    );
    mateUse(
      'actionOverflowThreshold',
      actionOverflowThreshold,
      isNamed: true,
    );
    mateUse(
      'showCloseIcon',
      showCloseIcon,
      isNamed: true,
    );
    mateUse(
      'closeIconColor',
      closeIconColor,
      isNamed: true,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'animation',
      animation,
      isNamed: true,
    );
    mateUse(
      'onVisible',
      onVisible,
      isNamed: true,
    );
    mateUse(
      'dismissDirection',
      dismissDirection,
      isNamed: true,
      defaultValue: DismissDirection.down,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.hardEdge,
    );
  }
}
