// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/menu_anchor.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/focus_manager.dart' as _i4;
import 'package:flutter/src/material/menu_style.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/animation.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i8;
import 'package:flutter/src/foundation/basic_types.dart' as _i9;
import 'package:flutter/src/widgets/platform_menu_bar.dart' as _i10;
import 'package:flutter/src/material/button_style.dart' as _i11;
import 'package:flutter/src/material/material_state.dart' as _i12;

/// class MenuAnchor extends StatefulWidget
class MenuAnchor$Mate extends _i1.MenuAnchor with _i2.Mate {
  /// MenuAnchor MenuAnchor({Key? key, MenuController? controller, FocusNode? childFocusNode, MenuStyle? style, Offset? alignmentOffset = Offset.zero, Clip clipBehavior = Clip.hardEdge, bool anchorTapClosesMenu = false, void Function()? onOpen, void Function()? onClose, bool crossAxisUnconstrained = true, required List<Widget> menuChildren, Widget Function(BuildContext, MenuController, Widget?)? builder, Widget? child})
  MenuAnchor$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {MenuController? controller} , default:none
    _i1.MenuController? controller,

    /// optionalParameters: {FocusNode? childFocusNode} , default:none
    _i4.FocusNode? childFocusNode,

    /// optionalParameters: {MenuStyle? style} , default:none
    _i5.MenuStyle? style,

    /// optionalParameters: {Offset? alignmentOffset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i6.Offset? alignmentOffset = _i7.Offset.zero,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.hardEdge,

    /// optionalParameters: {bool anchorTapClosesMenu = false} , default:processed=BooleanLiteralImpl
    bool anchorTapClosesMenu = false,

    /// optionalParameters: {void Function()? onOpen} , default:none
    _i6.VoidCallback? onOpen,

    /// optionalParameters: {void Function()? onClose} , default:none
    _i6.VoidCallback? onClose,

    /// optionalParameters: {bool crossAxisUnconstrained = true} , default:processed=BooleanLiteralImpl
    bool crossAxisUnconstrained = true,

    /// optionalParameters: {required List<Widget> menuChildren} , default:none
    required List<_i8.Widget> menuChildren,

    /// optionalParameters: {Widget Function(BuildContext, MenuController, Widget?)? builder} , default:none
    _i1.MenuAnchorChildBuilder? builder,

    /// optionalParameters: {Widget? child} , default:none
    _i8.Widget? child,
  }) : super(
          key: key,
          controller: controller,
          childFocusNode: childFocusNode,
          style: style,
          alignmentOffset: alignmentOffset,
          clipBehavior: clipBehavior,
          anchorTapClosesMenu: anchorTapClosesMenu,
          onOpen: onOpen,
          onClose: onClose,
          crossAxisUnconstrained: crossAxisUnconstrained,
          menuChildren: menuChildren,
          builder: builder,
          child: child,
        ) {
    mateBuilderName = 'MenuAnchor';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MenuAnchor$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          childFocusNode: p.get('childFocusNode').build(),
          style: p.get('style').build(),
          alignmentOffset: p.get('alignmentOffset').build(),
          clipBehavior: p.get('clipBehavior').build(),
          anchorTapClosesMenu: p.get('anchorTapClosesMenu').build(),
          onOpen: p.get('onOpen').build(),
          onClose: p.get('onClose').build(),
          crossAxisUnconstrained: p.get('crossAxisUnconstrained').build(),
          menuChildren: p.get('menuChildren').build(),
          builder: p.get('builder').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'childFocusNode',
      childFocusNode,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'alignmentOffset',
      alignmentOffset,
      isNamed: true,
      defaultValue: _i7.Offset.zero,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.hardEdge,
    );
    mateUse(
      'anchorTapClosesMenu',
      anchorTapClosesMenu,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'onOpen',
      onOpen,
      isNamed: true,
    );
    mateUse(
      'onClose',
      onClose,
      isNamed: true,
    );
    mateUse(
      'crossAxisUnconstrained',
      crossAxisUnconstrained,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'menuChildren',
      menuChildren,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class MenuBar extends StatelessWidget
class MenuBar$Mate extends _i1.MenuBar with _i2.Mate {
  /// MenuBar MenuBar({Key? key, MenuStyle? style, Clip clipBehavior = Clip.none, MenuController? controller, required List<Widget> children})
  MenuBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {MenuStyle? style} , default:none
    _i5.MenuStyle? style,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.none,

    /// optionalParameters: {MenuController? controller} , default:none
    _i1.MenuController? controller,

    /// optionalParameters: {required List<Widget> children} , default:none
    required List<_i8.Widget> children,
  }) : super(
          key: key,
          style: style,
          clipBehavior: clipBehavior,
          controller: controller,
          children: children,
        ) {
    mateBuilderName = 'MenuBar';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MenuBar$Mate(
          key: p.get('key').build(),
          style: p.get('style').build(),
          clipBehavior: p.get('clipBehavior').build(),
          controller: p.get('controller').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.none,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class MenuItemButton extends StatefulWidget
class MenuItemButton$Mate extends _i1.MenuItemButton with _i2.Mate {
  /// MenuItemButton MenuItemButton({Key? key, void Function()? onPressed, void Function(bool)? onHover, bool requestFocusOnHover = true, void Function(bool)? onFocusChange, FocusNode? focusNode, MenuSerializableShortcut? shortcut, ButtonStyle? style, MaterialStatesController? statesController, Clip clipBehavior = Clip.none, Widget? leadingIcon, Widget? trailingIcon, bool closeOnActivate = true, required Widget? child})
  MenuItemButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {void Function()? onPressed} , default:none
    _i6.VoidCallback? onPressed,

    /// optionalParameters: {void Function(bool)? onHover} , default:none
    _i9.ValueChanged<bool>? onHover,

    /// optionalParameters: {bool requestFocusOnHover = true} , default:processed=BooleanLiteralImpl
    bool requestFocusOnHover = true,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i9.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i4.FocusNode? focusNode,

    /// optionalParameters: {MenuSerializableShortcut? shortcut} , default:none
    _i10.MenuSerializableShortcut? shortcut,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {MaterialStatesController? statesController} , default:none
    _i12.MaterialStatesController? statesController,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.none,

    /// optionalParameters: {Widget? leadingIcon} , default:none
    _i8.Widget? leadingIcon,

    /// optionalParameters: {Widget? trailingIcon} , default:none
    _i8.Widget? trailingIcon,

    /// optionalParameters: {bool closeOnActivate = true} , default:processed=BooleanLiteralImpl
    bool closeOnActivate = true,

    /// optionalParameters: {required Widget? child} , default:none
    required _i8.Widget? child,
  }) : super(
          key: key,
          onPressed: onPressed,
          onHover: onHover,
          requestFocusOnHover: requestFocusOnHover,
          onFocusChange: onFocusChange,
          focusNode: focusNode,
          shortcut: shortcut,
          style: style,
          statesController: statesController,
          clipBehavior: clipBehavior,
          leadingIcon: leadingIcon,
          trailingIcon: trailingIcon,
          closeOnActivate: closeOnActivate,
          child: child,
        ) {
    mateBuilderName = 'MenuItemButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MenuItemButton$Mate(
          key: p.get('key').build(),
          onPressed: p.get('onPressed').build(),
          onHover: p.get('onHover').build(),
          requestFocusOnHover: p.get('requestFocusOnHover').build(),
          onFocusChange: p.get('onFocusChange').build(),
          focusNode: p.get('focusNode').build(),
          shortcut: p.get('shortcut').build(),
          style: p.get('style').build(),
          statesController: p.get('statesController').build(),
          clipBehavior: p.get('clipBehavior').build(),
          leadingIcon: p.get('leadingIcon').build(),
          trailingIcon: p.get('trailingIcon').build(),
          closeOnActivate: p.get('closeOnActivate').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'onHover',
      onHover,
      isNamed: true,
    );
    mateUse(
      'requestFocusOnHover',
      requestFocusOnHover,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'shortcut',
      shortcut,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'statesController',
      statesController,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.none,
    );
    mateUse(
      'leadingIcon',
      leadingIcon,
      isNamed: true,
    );
    mateUse(
      'trailingIcon',
      trailingIcon,
      isNamed: true,
    );
    mateUse(
      'closeOnActivate',
      closeOnActivate,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class CheckboxMenuButton extends StatelessWidget
class CheckboxMenuButton$Mate extends _i1.CheckboxMenuButton with _i2.Mate {
  /// CheckboxMenuButton CheckboxMenuButton({Key? key, required bool? value, bool tristate = false, bool isError = false, required void Function(bool?)? onChanged, void Function(bool)? onHover, void Function(bool)? onFocusChange, FocusNode? focusNode, MenuSerializableShortcut? shortcut, ButtonStyle? style, MaterialStatesController? statesController, Clip clipBehavior = Clip.none, Widget? trailingIcon, bool closeOnActivate = true, required Widget? child})
  CheckboxMenuButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required bool? value} , default:none
    required bool? value,

    /// optionalParameters: {bool tristate = false} , default:processed=BooleanLiteralImpl
    bool tristate = false,

    /// optionalParameters: {bool isError = false} , default:processed=BooleanLiteralImpl
    bool isError = false,

    /// optionalParameters: {required void Function(bool?)? onChanged} , default:none
    required _i9.ValueChanged<bool?>? onChanged,

    /// optionalParameters: {void Function(bool)? onHover} , default:none
    _i9.ValueChanged<bool>? onHover,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i9.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i4.FocusNode? focusNode,

    /// optionalParameters: {MenuSerializableShortcut? shortcut} , default:none
    _i10.MenuSerializableShortcut? shortcut,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {MaterialStatesController? statesController} , default:none
    _i12.MaterialStatesController? statesController,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.none,

    /// optionalParameters: {Widget? trailingIcon} , default:none
    _i8.Widget? trailingIcon,

    /// optionalParameters: {bool closeOnActivate = true} , default:processed=BooleanLiteralImpl
    bool closeOnActivate = true,

    /// optionalParameters: {required Widget? child} , default:none
    required _i8.Widget? child,
  }) : super(
          key: key,
          value: value,
          tristate: tristate,
          isError: isError,
          onChanged: onChanged,
          onHover: onHover,
          onFocusChange: onFocusChange,
          focusNode: focusNode,
          shortcut: shortcut,
          style: style,
          statesController: statesController,
          clipBehavior: clipBehavior,
          trailingIcon: trailingIcon,
          closeOnActivate: closeOnActivate,
          child: child,
        ) {
    mateBuilderName = 'CheckboxMenuButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => CheckboxMenuButton$Mate(
          key: p.get('key').build(),
          value: p.get('value').build(),
          tristate: p.get('tristate').build(),
          isError: p.get('isError').build(),
          onChanged: p.get('onChanged').build(),
          onHover: p.get('onHover').build(),
          onFocusChange: p.get('onFocusChange').build(),
          focusNode: p.get('focusNode').build(),
          shortcut: p.get('shortcut').build(),
          style: p.get('style').build(),
          statesController: p.get('statesController').build(),
          clipBehavior: p.get('clipBehavior').build(),
          trailingIcon: p.get('trailingIcon').build(),
          closeOnActivate: p.get('closeOnActivate').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'tristate',
      tristate,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'isError',
      isError,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'onHover',
      onHover,
      isNamed: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'shortcut',
      shortcut,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'statesController',
      statesController,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.none,
    );
    mateUse(
      'trailingIcon',
      trailingIcon,
      isNamed: true,
    );
    mateUse(
      'closeOnActivate',
      closeOnActivate,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class RadioMenuButton<T> extends StatelessWidget
class RadioMenuButton$Mate<T> extends _i1.RadioMenuButton<T> with _i2.Mate {
  /// RadioMenuButton<T> RadioMenuButton({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, bool toggleable = false, void Function(bool)? onHover, void Function(bool)? onFocusChange, FocusNode? focusNode, MenuSerializableShortcut? shortcut, ButtonStyle? style, MaterialStatesController? statesController, Clip clipBehavior = Clip.none, Widget? trailingIcon, bool closeOnActivate = true, required Widget? child})
  RadioMenuButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required T value} , default:none
    required T value,

    /// optionalParameters: {required T? groupValue} , default:none
    required T? groupValue,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required _i9.ValueChanged<T?>? onChanged,

    /// optionalParameters: {bool toggleable = false} , default:processed=BooleanLiteralImpl
    bool toggleable = false,

    /// optionalParameters: {void Function(bool)? onHover} , default:none
    _i9.ValueChanged<bool>? onHover,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i9.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i4.FocusNode? focusNode,

    /// optionalParameters: {MenuSerializableShortcut? shortcut} , default:none
    _i10.MenuSerializableShortcut? shortcut,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {MaterialStatesController? statesController} , default:none
    _i12.MaterialStatesController? statesController,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.none,

    /// optionalParameters: {Widget? trailingIcon} , default:none
    _i8.Widget? trailingIcon,

    /// optionalParameters: {bool closeOnActivate = true} , default:processed=BooleanLiteralImpl
    bool closeOnActivate = true,

    /// optionalParameters: {required Widget? child} , default:none
    required _i8.Widget? child,
  }) : super(
          key: key,
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
          toggleable: toggleable,
          onHover: onHover,
          onFocusChange: onFocusChange,
          focusNode: focusNode,
          shortcut: shortcut,
          style: style,
          statesController: statesController,
          clipBehavior: clipBehavior,
          trailingIcon: trailingIcon,
          closeOnActivate: closeOnActivate,
          child: child,
        ) {
    mateBuilderName = 'RadioMenuButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RadioMenuButton$Mate<T>(
          key: p.get('key').build(),
          value: p.get('value').build(),
          groupValue: p.get('groupValue').build(),
          onChanged: p.get('onChanged').build(),
          toggleable: p.get('toggleable').build(),
          onHover: p.get('onHover').build(),
          onFocusChange: p.get('onFocusChange').build(),
          focusNode: p.get('focusNode').build(),
          shortcut: p.get('shortcut').build(),
          style: p.get('style').build(),
          statesController: p.get('statesController').build(),
          clipBehavior: p.get('clipBehavior').build(),
          trailingIcon: p.get('trailingIcon').build(),
          closeOnActivate: p.get('closeOnActivate').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'groupValue',
      groupValue,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'toggleable',
      toggleable,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'onHover',
      onHover,
      isNamed: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'shortcut',
      shortcut,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'statesController',
      statesController,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.none,
    );
    mateUse(
      'trailingIcon',
      trailingIcon,
      isNamed: true,
    );
    mateUse(
      'closeOnActivate',
      closeOnActivate,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class SubmenuButton extends StatefulWidget
class SubmenuButton$Mate extends _i1.SubmenuButton with _i2.Mate {
  /// SubmenuButton SubmenuButton({Key? key, void Function(bool)? onHover, void Function(bool)? onFocusChange, void Function()? onOpen, void Function()? onClose, ButtonStyle? style, MenuStyle? menuStyle, Offset? alignmentOffset, Clip clipBehavior = Clip.hardEdge, FocusNode? focusNode, MaterialStatesController? statesController, Widget? leadingIcon, Widget? trailingIcon, required List<Widget> menuChildren, required Widget? child})
  SubmenuButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {void Function(bool)? onHover} , default:none
    _i9.ValueChanged<bool>? onHover,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    _i9.ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {void Function()? onOpen} , default:none
    _i6.VoidCallback? onOpen,

    /// optionalParameters: {void Function()? onClose} , default:none
    _i6.VoidCallback? onClose,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {MenuStyle? menuStyle} , default:none
    _i5.MenuStyle? menuStyle,

    /// optionalParameters: {Offset? alignmentOffset} , default:none
    _i6.Offset? alignmentOffset,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.hardEdge,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i4.FocusNode? focusNode,

    /// optionalParameters: {MaterialStatesController? statesController} , default:none
    _i12.MaterialStatesController? statesController,

    /// optionalParameters: {Widget? leadingIcon} , default:none
    _i8.Widget? leadingIcon,

    /// optionalParameters: {Widget? trailingIcon} , default:none
    _i8.Widget? trailingIcon,

    /// optionalParameters: {required List<Widget> menuChildren} , default:none
    required List<_i8.Widget> menuChildren,

    /// optionalParameters: {required Widget? child} , default:none
    required _i8.Widget? child,
  }) : super(
          key: key,
          onHover: onHover,
          onFocusChange: onFocusChange,
          onOpen: onOpen,
          onClose: onClose,
          style: style,
          menuStyle: menuStyle,
          alignmentOffset: alignmentOffset,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          statesController: statesController,
          leadingIcon: leadingIcon,
          trailingIcon: trailingIcon,
          menuChildren: menuChildren,
          child: child,
        ) {
    mateBuilderName = 'SubmenuButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SubmenuButton$Mate(
          key: p.get('key').build(),
          onHover: p.get('onHover').build(),
          onFocusChange: p.get('onFocusChange').build(),
          onOpen: p.get('onOpen').build(),
          onClose: p.get('onClose').build(),
          style: p.get('style').build(),
          menuStyle: p.get('menuStyle').build(),
          alignmentOffset: p.get('alignmentOffset').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          statesController: p.get('statesController').build(),
          leadingIcon: p.get('leadingIcon').build(),
          trailingIcon: p.get('trailingIcon').build(),
          menuChildren: p.get('menuChildren').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'onHover',
      onHover,
      isNamed: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'onOpen',
      onOpen,
      isNamed: true,
    );
    mateUse(
      'onClose',
      onClose,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'menuStyle',
      menuStyle,
      isNamed: true,
    );
    mateUse(
      'alignmentOffset',
      alignmentOffset,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.hardEdge,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'statesController',
      statesController,
      isNamed: true,
    );
    mateUse(
      'leadingIcon',
      leadingIcon,
      isNamed: true,
    );
    mateUse(
      'trailingIcon',
      trailingIcon,
      isNamed: true,
    );
    mateUse(
      'menuChildren',
      menuChildren,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class DismissMenuAction extends DismissAction
class DismissMenuAction$Mate extends _i1.DismissMenuAction with _i2.Mate {
  /// DismissMenuAction DismissMenuAction({required MenuController controller})
  DismissMenuAction$Mate(
      {
      /// optionalParameters: {required MenuController controller} , default:none
      required _i1.MenuController controller})
      : super(controller: controller) {
    mateBuilderName = 'DismissMenuAction';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DismissMenuAction$Mate(controller: p.get('controller').build());
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
  }
}

/// class MenuAcceleratorCallbackBinding extends InheritedWidget
class MenuAcceleratorCallbackBinding$Mate extends _i1.MenuAcceleratorCallbackBinding with _i2.Mate {
  /// MenuAcceleratorCallbackBinding MenuAcceleratorCallbackBinding({Key? key, void Function()? onInvoke, bool hasSubmenu = false, required Widget child})
  MenuAcceleratorCallbackBinding$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {void Function()? onInvoke} , default:none
    _i6.VoidCallback? onInvoke,

    /// optionalParameters: {bool hasSubmenu = false} , default:processed=BooleanLiteralImpl
    bool hasSubmenu = false,

    /// optionalParameters: {required Widget child} , default:none
    required _i8.Widget child,
  }) : super(
          key: key,
          onInvoke: onInvoke,
          hasSubmenu: hasSubmenu,
          child: child,
        ) {
    mateBuilderName = 'MenuAcceleratorCallbackBinding';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MenuAcceleratorCallbackBinding$Mate(
          key: p.get('key').build(),
          onInvoke: p.get('onInvoke').build(),
          hasSubmenu: p.get('hasSubmenu').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'onInvoke',
      onInvoke,
      isNamed: true,
    );
    mateUse(
      'hasSubmenu',
      hasSubmenu,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class MenuAcceleratorLabel extends StatefulWidget
class MenuAcceleratorLabel$Mate extends _i1.MenuAcceleratorLabel with _i2.Mate {
  /// MenuAcceleratorLabel MenuAcceleratorLabel(String label, {Key? key, Widget Function(BuildContext, String, int) builder = defaultLabelBuilder})
  MenuAcceleratorLabel$Mate(
    /// requiredParameters: String label
    String label, {
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget Function(BuildContext, String, int) builder = defaultLabelBuilder} , default:unprocessed=SimpleIdentifierImpl
    required _i1.MenuAcceleratorChildBuilder builder,
  }) : super(
          label,
          key: key,
          builder: builder,
        ) {
    mateBuilderName = 'MenuAcceleratorLabel';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MenuAcceleratorLabel$Mate(
          p.get('label').value,
          key: p.get('key').build(),
          builder: p.get('builder').build(),
        );
    mateUse(
      'label',
      label,
      isNamed: false,
    );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
  }
}
