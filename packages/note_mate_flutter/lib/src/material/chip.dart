// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/chip.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:flutter/src/painting/text_style.dart';import 'package:flutter/src/painting/edge_insets.dart';import 'dart:ui';import 'dart:core';import 'package:flutter/src/painting/borders.dart';import 'package:flutter/src/widgets/focus_manager.dart';import 'package:flutter/src/material/theme_data.dart';import 'package:flutter/src/widgets/icon_theme_data.dart';import 'package:flutter/src/material/chip_theme.dart';import 'package:flutter/src/foundation/basic_types.dart';import 'package:note/mate.dart' show Mate;/// class Chip extends StatelessWidget implements ChipAttributes, DeletableChipAttributes
class Chip$Mate extends Chip with Mate {/// Chip Chip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, bool useDeleteButtonTooltip = true})
Chip$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {Widget? avatar} , hasDefaultValue:false, defaultValueCode:null
Widget? avatar, /// optionalParameters: {required Widget label} , hasDefaultValue:false, defaultValueCode:null
required Widget label, /// optionalParameters: {TextStyle? labelStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? labelStyle, /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? labelPadding, /// optionalParameters: {Widget? deleteIcon} , hasDefaultValue:false, defaultValueCode:null
Widget? deleteIcon, /// optionalParameters: {void Function()? onDeleted} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onDeleted, /// optionalParameters: {Color? deleteIconColor} , hasDefaultValue:false, defaultValueCode:null
Color? deleteIconColor, /// optionalParameters: {String? deleteButtonTooltipMessage} , hasDefaultValue:false, defaultValueCode:null
String? deleteButtonTooltipMessage, /// optionalParameters: {BorderSide? side} , hasDefaultValue:false, defaultValueCode:null
BorderSide? side, /// optionalParameters: {OutlinedBorder? shape} , hasDefaultValue:false, defaultValueCode:null
OutlinedBorder? shape, /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
required Clip clipBehavior, /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
FocusNode? focusNode, /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
required bool autofocus, /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
Color? backgroundColor, /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? padding, /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
VisualDensity? visualDensity, /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
MaterialTapTargetSize? materialTapTargetSize, /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
double? elevation, /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
Color? shadowColor, /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
Color? surfaceTintColor, /// optionalParameters: {IconThemeData? iconTheme} , hasDefaultValue:false, defaultValueCode:null
IconThemeData? iconTheme, }) : super(key: key, avatar: avatar, label: label, labelStyle: labelStyle, labelPadding: labelPadding, deleteIcon: deleteIcon, onDeleted: onDeleted, deleteIconColor: deleteIconColor, deleteButtonTooltipMessage: deleteButtonTooltipMessage, side: side, shape: shape, clipBehavior: clipBehavior, focusNode: focusNode, autofocus: autofocus, backgroundColor: backgroundColor, padding: padding, visualDensity: visualDensity, materialTapTargetSize: materialTapTargetSize, elevation: elevation, shadowColor: shadowColor, surfaceTintColor: surfaceTintColor, iconTheme: iconTheme, ) { mateBuilder = (p) => Chip$Mate(key: p.get('key').build(), avatar: p.get('avatar').build(), label: p.get('label').build(), labelStyle: p.get('labelStyle').build(), labelPadding: p.get('labelPadding').build(), deleteIcon: p.get('deleteIcon').build(), onDeleted: p.get('onDeleted').build(), deleteIconColor: p.get('deleteIconColor').build(), deleteButtonTooltipMessage: p.get('deleteButtonTooltipMessage').build(), side: p.get('side').build(), shape: p.get('shape').build(), clipBehavior: p.get('clipBehavior').build(), focusNode: p.get('focusNode').build(), autofocus: p.get('autofocus').build(), backgroundColor: p.get('backgroundColor').build(), padding: p.get('padding').build(), visualDensity: p.get('visualDensity').build(), materialTapTargetSize: p.get('materialTapTargetSize').build(), elevation: p.get('elevation').build(), shadowColor: p.get('shadowColor').build(), surfaceTintColor: p.get('surfaceTintColor').build(), iconTheme: p.get('iconTheme').build(), );
matePut('key', key);
matePut('avatar', avatar);
matePut('label', label);
matePut('labelStyle', labelStyle);
matePut('labelPadding', labelPadding);
matePut('deleteIcon', deleteIcon);
matePut('onDeleted', onDeleted);
matePut('deleteIconColor', deleteIconColor);
matePut('deleteButtonTooltipMessage', deleteButtonTooltipMessage);
matePut('side', side);
matePut('shape', shape);
matePut('clipBehavior', clipBehavior);
matePut('focusNode', focusNode);
matePut('autofocus', autofocus);
matePut('backgroundColor', backgroundColor);
matePut('padding', padding);
matePut('visualDensity', visualDensity);
matePut('materialTapTargetSize', materialTapTargetSize);
matePut('elevation', elevation);
matePut('shadowColor', shadowColor);
matePut('surfaceTintColor', surfaceTintColor);
matePut('iconTheme', iconTheme); }

 }
/// class RawChip extends StatefulWidget implements ChipAttributes, DeletableChipAttributes, SelectableChipAttributes, CheckmarkableChipAttributes, DisabledChipAttributes, TappableChipAttributes
class RawChip$Mate extends RawChip with Mate {/// RawChip RawChip({Key? key, ChipThemeData? defaultProperties, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, void Function()? onPressed, void Function(bool)? onSelected, double? pressElevation, bool tapEnabled = true, bool selected = false, bool isEnabled = true, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark = true, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder(), bool useDeleteButtonTooltip = true})
RawChip$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {ChipThemeData? defaultProperties} , hasDefaultValue:false, defaultValueCode:null
ChipThemeData? defaultProperties, /// optionalParameters: {Widget? avatar} , hasDefaultValue:false, defaultValueCode:null
Widget? avatar, /// optionalParameters: {required Widget label} , hasDefaultValue:false, defaultValueCode:null
required Widget label, /// optionalParameters: {TextStyle? labelStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? labelStyle, /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? padding, /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
VisualDensity? visualDensity, /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? labelPadding, /// optionalParameters: {Widget? deleteIcon} , hasDefaultValue:false, defaultValueCode:null
Widget? deleteIcon, /// optionalParameters: {void Function()? onDeleted} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onDeleted, /// optionalParameters: {Color? deleteIconColor} , hasDefaultValue:false, defaultValueCode:null
Color? deleteIconColor, /// optionalParameters: {String? deleteButtonTooltipMessage} , hasDefaultValue:false, defaultValueCode:null
String? deleteButtonTooltipMessage, /// optionalParameters: {void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onPressed, /// optionalParameters: {void Function(bool)? onSelected} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool>? onSelected, /// optionalParameters: {double? pressElevation} , hasDefaultValue:false, defaultValueCode:null
double? pressElevation, /// optionalParameters: {bool tapEnabled = true} , hasDefaultValue:true, defaultValueCode:true
required bool tapEnabled, /// optionalParameters: {bool selected = false} , hasDefaultValue:true, defaultValueCode:false
required bool selected, /// optionalParameters: {bool isEnabled = true} , hasDefaultValue:true, defaultValueCode:true
required bool isEnabled, /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
Color? disabledColor, /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedColor, /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
String? tooltip, /// optionalParameters: {BorderSide? side} , hasDefaultValue:false, defaultValueCode:null
BorderSide? side, /// optionalParameters: {OutlinedBorder? shape} , hasDefaultValue:false, defaultValueCode:null
OutlinedBorder? shape, /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
required Clip clipBehavior, /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
FocusNode? focusNode, /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
required bool autofocus, /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
Color? backgroundColor, /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
MaterialTapTargetSize? materialTapTargetSize, /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
double? elevation, /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
Color? shadowColor, /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
Color? surfaceTintColor, /// optionalParameters: {IconThemeData? iconTheme} , hasDefaultValue:false, defaultValueCode:null
IconThemeData? iconTheme, /// optionalParameters: {Color? selectedShadowColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedShadowColor, /// optionalParameters: {bool? showCheckmark = true} , hasDefaultValue:true, defaultValueCode:true
bool? showCheckmark, /// optionalParameters: {Color? checkmarkColor} , hasDefaultValue:false, defaultValueCode:null
Color? checkmarkColor, /// optionalParameters: {ShapeBorder avatarBorder = const CircleBorder()} , hasDefaultValue:true, defaultValueCode:const CircleBorder()
required ShapeBorder avatarBorder, }) : super(key: key, defaultProperties: defaultProperties, avatar: avatar, label: label, labelStyle: labelStyle, padding: padding, visualDensity: visualDensity, labelPadding: labelPadding, deleteIcon: deleteIcon, onDeleted: onDeleted, deleteIconColor: deleteIconColor, deleteButtonTooltipMessage: deleteButtonTooltipMessage, onPressed: onPressed, onSelected: onSelected, pressElevation: pressElevation, tapEnabled: tapEnabled, selected: selected, isEnabled: isEnabled, disabledColor: disabledColor, selectedColor: selectedColor, tooltip: tooltip, side: side, shape: shape, clipBehavior: clipBehavior, focusNode: focusNode, autofocus: autofocus, backgroundColor: backgroundColor, materialTapTargetSize: materialTapTargetSize, elevation: elevation, shadowColor: shadowColor, surfaceTintColor: surfaceTintColor, iconTheme: iconTheme, selectedShadowColor: selectedShadowColor, showCheckmark: showCheckmark, checkmarkColor: checkmarkColor, avatarBorder: avatarBorder, ) { mateBuilder = (p) => RawChip$Mate(key: p.get('key').build(), defaultProperties: p.get('defaultProperties').build(), avatar: p.get('avatar').build(), label: p.get('label').build(), labelStyle: p.get('labelStyle').build(), padding: p.get('padding').build(), visualDensity: p.get('visualDensity').build(), labelPadding: p.get('labelPadding').build(), deleteIcon: p.get('deleteIcon').build(), onDeleted: p.get('onDeleted').build(), deleteIconColor: p.get('deleteIconColor').build(), deleteButtonTooltipMessage: p.get('deleteButtonTooltipMessage').build(), onPressed: p.get('onPressed').build(), onSelected: p.get('onSelected').build(), pressElevation: p.get('pressElevation').build(), tapEnabled: p.get('tapEnabled').build(), selected: p.get('selected').build(), isEnabled: p.get('isEnabled').build(), disabledColor: p.get('disabledColor').build(), selectedColor: p.get('selectedColor').build(), tooltip: p.get('tooltip').build(), side: p.get('side').build(), shape: p.get('shape').build(), clipBehavior: p.get('clipBehavior').build(), focusNode: p.get('focusNode').build(), autofocus: p.get('autofocus').build(), backgroundColor: p.get('backgroundColor').build(), materialTapTargetSize: p.get('materialTapTargetSize').build(), elevation: p.get('elevation').build(), shadowColor: p.get('shadowColor').build(), surfaceTintColor: p.get('surfaceTintColor').build(), iconTheme: p.get('iconTheme').build(), selectedShadowColor: p.get('selectedShadowColor').build(), showCheckmark: p.get('showCheckmark').build(), checkmarkColor: p.get('checkmarkColor').build(), avatarBorder: p.get('avatarBorder').build(), );
matePut('key', key);
matePut('defaultProperties', defaultProperties);
matePut('avatar', avatar);
matePut('label', label);
matePut('labelStyle', labelStyle);
matePut('padding', padding);
matePut('visualDensity', visualDensity);
matePut('labelPadding', labelPadding);
matePut('deleteIcon', deleteIcon);
matePut('onDeleted', onDeleted);
matePut('deleteIconColor', deleteIconColor);
matePut('deleteButtonTooltipMessage', deleteButtonTooltipMessage);
matePut('onPressed', onPressed);
matePut('onSelected', onSelected);
matePut('pressElevation', pressElevation);
matePut('tapEnabled', tapEnabled);
matePut('selected', selected);
matePut('isEnabled', isEnabled);
matePut('disabledColor', disabledColor);
matePut('selectedColor', selectedColor);
matePut('tooltip', tooltip);
matePut('side', side);
matePut('shape', shape);
matePut('clipBehavior', clipBehavior);
matePut('focusNode', focusNode);
matePut('autofocus', autofocus);
matePut('backgroundColor', backgroundColor);
matePut('materialTapTargetSize', materialTapTargetSize);
matePut('elevation', elevation);
matePut('shadowColor', shadowColor);
matePut('surfaceTintColor', surfaceTintColor);
matePut('iconTheme', iconTheme);
matePut('selectedShadowColor', selectedShadowColor);
matePut('showCheckmark', showCheckmark);
matePut('checkmarkColor', checkmarkColor);
matePut('avatarBorder', avatarBorder); }

 }
