// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/chip.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class Chip extends StatelessWidget implements ChipAttributes, DeletableChipAttributes
class Chip$Mate extends Chip with Mate {
  /// Chip Chip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, bool useDeleteButtonTooltip = true})
  Chip$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? avatar} , defaultValue:none
    Widget? avatar,

    /// optionalParameters: {required Widget label} , defaultValue:none
    required Widget label,

    /// optionalParameters: {TextStyle? labelStyle} , defaultValue:none
    TextStyle? labelStyle,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , defaultValue:none
    EdgeInsetsGeometry? labelPadding,

    /// optionalParameters: {Widget? deleteIcon} , defaultValue:none
    Widget? deleteIcon,

    /// optionalParameters: {void Function()? onDeleted} , defaultValue:none
    VoidCallback? onDeleted,

    /// optionalParameters: {Color? deleteIconColor} , defaultValue:none
    Color? deleteIconColor,

    /// optionalParameters: {String? deleteButtonTooltipMessage} , defaultValue:none
    String? deleteButtonTooltipMessage,

    /// optionalParameters: {BorderSide? side} , defaultValue:none
    BorderSide? side,

    /// optionalParameters: {OutlinedBorder? shape} , defaultValue:none
    OutlinedBorder? shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {VisualDensity? visualDensity} , defaultValue:none
    VisualDensity? visualDensity,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , defaultValue:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {double? elevation} , defaultValue:none
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , defaultValue:none
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , defaultValue:none
    Color? surfaceTintColor,

    /// optionalParameters: {IconThemeData? iconTheme} , defaultValue:none
    IconThemeData? iconTheme,
  }) : super(
          key: key,
          avatar: avatar,
          label: label,
          labelStyle: labelStyle,
          labelPadding: labelPadding,
          deleteIcon: deleteIcon,
          onDeleted: onDeleted,
          deleteIconColor: deleteIconColor,
          deleteButtonTooltipMessage: deleteButtonTooltipMessage,
          side: side,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          backgroundColor: backgroundColor,
          padding: padding,
          visualDensity: visualDensity,
          materialTapTargetSize: materialTapTargetSize,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          iconTheme: iconTheme,
        ) {
    mateBuilder = (p) => Chip$Mate(
          key: p.get('key').build(),
          avatar: p.get('avatar').build(),
          label: p.get('label').build(),
          labelStyle: p.get('labelStyle').build(),
          labelPadding: p.get('labelPadding').build(),
          deleteIcon: p.get('deleteIcon').build(),
          onDeleted: p.get('onDeleted').build(),
          deleteIconColor: p.get('deleteIconColor').build(),
          deleteButtonTooltipMessage:
              p.get('deleteButtonTooltipMessage').build(),
          side: p.get('side').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          backgroundColor: p.get('backgroundColor').build(),
          padding: p.get('padding').build(),
          visualDensity: p.get('visualDensity').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          iconTheme: p.get('iconTheme').build(),
        );
    mateUse('key', key);
    mateUse('avatar', avatar);
    mateUse('label', label);
    mateUse('labelStyle', labelStyle);
    mateUse('labelPadding', labelPadding);
    mateUse('deleteIcon', deleteIcon);
    mateUse('onDeleted', onDeleted);
    mateUse('deleteIconColor', deleteIconColor);
    mateUse('deleteButtonTooltipMessage', deleteButtonTooltipMessage);
    mateUse('side', side);
    mateUse('shape', shape);
    mateUse('clipBehavior', clipBehavior);
    mateUse('focusNode', focusNode);
    mateUse('autofocus', autofocus);
    mateUse('backgroundColor', backgroundColor);
    mateUse('padding', padding);
    mateUse('visualDensity', visualDensity);
    mateUse('materialTapTargetSize', materialTapTargetSize);
    mateUse('elevation', elevation);
    mateUse('shadowColor', shadowColor);
    mateUse('surfaceTintColor', surfaceTintColor);
    mateUse('iconTheme', iconTheme);
  }
}

/// class RawChip extends StatefulWidget implements ChipAttributes, DeletableChipAttributes, SelectableChipAttributes, CheckmarkableChipAttributes, DisabledChipAttributes, TappableChipAttributes
class RawChip$Mate extends RawChip with Mate {
  /// RawChip RawChip({Key? key, ChipThemeData? defaultProperties, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, EdgeInsetsGeometry? labelPadding, Widget? deleteIcon, void Function()? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, void Function()? onPressed, void Function(bool)? onSelected, double? pressElevation, bool tapEnabled = true, bool selected = false, bool isEnabled = true, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, Color? backgroundColor, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark = true, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder(), bool useDeleteButtonTooltip = true})
  RawChip$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {ChipThemeData? defaultProperties} , defaultValue:none
    ChipThemeData? defaultProperties,

    /// optionalParameters: {Widget? avatar} , defaultValue:none
    Widget? avatar,

    /// optionalParameters: {required Widget label} , defaultValue:none
    required Widget label,

    /// optionalParameters: {TextStyle? labelStyle} , defaultValue:none
    TextStyle? labelStyle,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {VisualDensity? visualDensity} , defaultValue:none
    VisualDensity? visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , defaultValue:none
    EdgeInsetsGeometry? labelPadding,

    /// optionalParameters: {Widget? deleteIcon} , defaultValue:none
    Widget? deleteIcon,

    /// optionalParameters: {void Function()? onDeleted} , defaultValue:none
    VoidCallback? onDeleted,

    /// optionalParameters: {Color? deleteIconColor} , defaultValue:none
    Color? deleteIconColor,

    /// optionalParameters: {String? deleteButtonTooltipMessage} , defaultValue:none
    String? deleteButtonTooltipMessage,

    /// optionalParameters: {void Function()? onPressed} , defaultValue:none
    VoidCallback? onPressed,

    /// optionalParameters: {void Function(bool)? onSelected} , defaultValue:none
    ValueChanged<bool>? onSelected,

    /// optionalParameters: {double? pressElevation} , defaultValue:none
    double? pressElevation,

    /// optionalParameters: {bool tapEnabled = true} , defaultValue:Literal
    bool tapEnabled = true,

    /// optionalParameters: {bool selected = false} , defaultValue:Literal
    bool selected = false,

    /// optionalParameters: {bool isEnabled = true} , defaultValue:Literal
    bool isEnabled = true,

    /// optionalParameters: {Color? disabledColor} , defaultValue:none
    Color? disabledColor,

    /// optionalParameters: {Color? selectedColor} , defaultValue:none
    Color? selectedColor,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {BorderSide? side} , defaultValue:none
    BorderSide? side,

    /// optionalParameters: {OutlinedBorder? shape} , defaultValue:none
    OutlinedBorder? shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , defaultValue:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {double? elevation} , defaultValue:none
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , defaultValue:none
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , defaultValue:none
    Color? surfaceTintColor,

    /// optionalParameters: {IconThemeData? iconTheme} , defaultValue:none
    IconThemeData? iconTheme,

    /// optionalParameters: {Color? selectedShadowColor} , defaultValue:none
    Color? selectedShadowColor,

    /// optionalParameters: {bool? showCheckmark = true} , defaultValue:Literal
    bool? showCheckmark = true,

    /// optionalParameters: {Color? checkmarkColor} , defaultValue:none
    Color? checkmarkColor,

    /// optionalParameters: {ShapeBorder avatarBorder = const CircleBorder()} , defaultValue:unprocessed
    required ShapeBorder avatarBorder,
  }) : super(
          key: key,
          defaultProperties: defaultProperties,
          avatar: avatar,
          label: label,
          labelStyle: labelStyle,
          padding: padding,
          visualDensity: visualDensity,
          labelPadding: labelPadding,
          deleteIcon: deleteIcon,
          onDeleted: onDeleted,
          deleteIconColor: deleteIconColor,
          deleteButtonTooltipMessage: deleteButtonTooltipMessage,
          onPressed: onPressed,
          onSelected: onSelected,
          pressElevation: pressElevation,
          tapEnabled: tapEnabled,
          selected: selected,
          isEnabled: isEnabled,
          disabledColor: disabledColor,
          selectedColor: selectedColor,
          tooltip: tooltip,
          side: side,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          backgroundColor: backgroundColor,
          materialTapTargetSize: materialTapTargetSize,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          iconTheme: iconTheme,
          selectedShadowColor: selectedShadowColor,
          showCheckmark: showCheckmark,
          checkmarkColor: checkmarkColor,
          avatarBorder: avatarBorder,
        ) {
    mateBuilder = (p) => RawChip$Mate(
          key: p.get('key').build(),
          defaultProperties: p.get('defaultProperties').build(),
          avatar: p.get('avatar').build(),
          label: p.get('label').build(),
          labelStyle: p.get('labelStyle').build(),
          padding: p.get('padding').build(),
          visualDensity: p.get('visualDensity').build(),
          labelPadding: p.get('labelPadding').build(),
          deleteIcon: p.get('deleteIcon').build(),
          onDeleted: p.get('onDeleted').build(),
          deleteIconColor: p.get('deleteIconColor').build(),
          deleteButtonTooltipMessage:
              p.get('deleteButtonTooltipMessage').build(),
          onPressed: p.get('onPressed').build(),
          onSelected: p.get('onSelected').build(),
          pressElevation: p.get('pressElevation').build(),
          tapEnabled: p.get('tapEnabled').build(),
          selected: p.get('selected').build(),
          isEnabled: p.get('isEnabled').build(),
          disabledColor: p.get('disabledColor').build(),
          selectedColor: p.get('selectedColor').build(),
          tooltip: p.get('tooltip').build(),
          side: p.get('side').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          backgroundColor: p.get('backgroundColor').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          iconTheme: p.get('iconTheme').build(),
          selectedShadowColor: p.get('selectedShadowColor').build(),
          showCheckmark: p.get('showCheckmark').build(),
          checkmarkColor: p.get('checkmarkColor').build(),
          avatarBorder: p.get('avatarBorder').build(),
        );
    mateUse('key', key);
    mateUse('defaultProperties', defaultProperties);
    mateUse('avatar', avatar);
    mateUse('label', label);
    mateUse('labelStyle', labelStyle);
    mateUse('padding', padding);
    mateUse('visualDensity', visualDensity);
    mateUse('labelPadding', labelPadding);
    mateUse('deleteIcon', deleteIcon);
    mateUse('onDeleted', onDeleted);
    mateUse('deleteIconColor', deleteIconColor);
    mateUse('deleteButtonTooltipMessage', deleteButtonTooltipMessage);
    mateUse('onPressed', onPressed);
    mateUse('onSelected', onSelected);
    mateUse('pressElevation', pressElevation);
    mateUse('tapEnabled', tapEnabled);
    mateUse('selected', selected);
    mateUse('isEnabled', isEnabled);
    mateUse('disabledColor', disabledColor);
    mateUse('selectedColor', selectedColor);
    mateUse('tooltip', tooltip);
    mateUse('side', side);
    mateUse('shape', shape);
    mateUse('clipBehavior', clipBehavior);
    mateUse('focusNode', focusNode);
    mateUse('autofocus', autofocus);
    mateUse('backgroundColor', backgroundColor);
    mateUse('materialTapTargetSize', materialTapTargetSize);
    mateUse('elevation', elevation);
    mateUse('shadowColor', shadowColor);
    mateUse('surfaceTintColor', surfaceTintColor);
    mateUse('iconTheme', iconTheme);
    mateUse('selectedShadowColor', selectedShadowColor);
    mateUse('showCheckmark', showCheckmark);
    mateUse('checkmarkColor', checkmarkColor);
    mateUse('avatarBorder', avatarBorder);
  }
}
