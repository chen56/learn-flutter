// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class FloatingActionButtonThemeData with Diagnosticable
class FloatingActionButtonThemeData$Mate extends FloatingActionButtonThemeData
    with Mate {
  /// FloatingActionButtonThemeData FloatingActionButtonThemeData({Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, double? elevation, double? focusElevation, double? hoverElevation, double? disabledElevation, double? highlightElevation, ShapeBorder? shape, bool? enableFeedback, double? iconSize, BoxConstraints? sizeConstraints, BoxConstraints? smallSizeConstraints, BoxConstraints? largeSizeConstraints, BoxConstraints? extendedSizeConstraints, double? extendedIconLabelSpacing, EdgeInsetsGeometry? extendedPadding, TextStyle? extendedTextStyle, MaterialStateProperty<MouseCursor?>? mouseCursor})
  FloatingActionButtonThemeData$Mate({
    /// optionalParameters: {Color? foregroundColor} , default:none
    Color? foregroundColor,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {Color? focusColor} , default:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , default:none
    Color? splashColor,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {double? focusElevation} , default:none
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , default:none
    double? hoverElevation,

    /// optionalParameters: {double? disabledElevation} , default:none
    double? disabledElevation,

    /// optionalParameters: {double? highlightElevation} , default:none
    double? highlightElevation,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {double? iconSize} , default:none
    double? iconSize,

    /// optionalParameters: {BoxConstraints? sizeConstraints} , default:none
    BoxConstraints? sizeConstraints,

    /// optionalParameters: {BoxConstraints? smallSizeConstraints} , default:none
    BoxConstraints? smallSizeConstraints,

    /// optionalParameters: {BoxConstraints? largeSizeConstraints} , default:none
    BoxConstraints? largeSizeConstraints,

    /// optionalParameters: {BoxConstraints? extendedSizeConstraints} , default:none
    BoxConstraints? extendedSizeConstraints,

    /// optionalParameters: {double? extendedIconLabelSpacing} , default:none
    double? extendedIconLabelSpacing,

    /// optionalParameters: {EdgeInsetsGeometry? extendedPadding} , default:none
    EdgeInsetsGeometry? extendedPadding,

    /// optionalParameters: {TextStyle? extendedTextStyle} , default:none
    TextStyle? extendedTextStyle,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          foregroundColor: foregroundColor,
          backgroundColor: backgroundColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          disabledElevation: disabledElevation,
          highlightElevation: highlightElevation,
          shape: shape,
          enableFeedback: enableFeedback,
          iconSize: iconSize,
          sizeConstraints: sizeConstraints,
          smallSizeConstraints: smallSizeConstraints,
          largeSizeConstraints: largeSizeConstraints,
          extendedSizeConstraints: extendedSizeConstraints,
          extendedIconLabelSpacing: extendedIconLabelSpacing,
          extendedPadding: extendedPadding,
          extendedTextStyle: extendedTextStyle,
          mouseCursor: mouseCursor,
        ) {
    mateBuilderName = 'FloatingActionButtonThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => FloatingActionButtonThemeData$Mate(
          foregroundColor: p.get('foregroundColor').build(),
          backgroundColor: p.get('backgroundColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          elevation: p.get('elevation').build(),
          focusElevation: p.get('focusElevation').build(),
          hoverElevation: p.get('hoverElevation').build(),
          disabledElevation: p.get('disabledElevation').build(),
          highlightElevation: p.get('highlightElevation').build(),
          shape: p.get('shape').build(),
          enableFeedback: p.get('enableFeedback').build(),
          iconSize: p.get('iconSize').build(),
          sizeConstraints: p.get('sizeConstraints').build(),
          smallSizeConstraints: p.get('smallSizeConstraints').build(),
          largeSizeConstraints: p.get('largeSizeConstraints').build(),
          extendedSizeConstraints: p.get('extendedSizeConstraints').build(),
          extendedIconLabelSpacing: p.get('extendedIconLabelSpacing').build(),
          extendedPadding: p.get('extendedPadding').build(),
          extendedTextStyle: p.get('extendedTextStyle').build(),
          mouseCursor: p.get('mouseCursor').build(),
        );
    mateUse(
      'foregroundColor',
      foregroundColor,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'focusElevation',
      focusElevation,
      isNamed: true,
    );
    mateUse(
      'hoverElevation',
      hoverElevation,
      isNamed: true,
    );
    mateUse(
      'disabledElevation',
      disabledElevation,
      isNamed: true,
    );
    mateUse(
      'highlightElevation',
      highlightElevation,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
    );
    mateUse(
      'sizeConstraints',
      sizeConstraints,
      isNamed: true,
    );
    mateUse(
      'smallSizeConstraints',
      smallSizeConstraints,
      isNamed: true,
    );
    mateUse(
      'largeSizeConstraints',
      largeSizeConstraints,
      isNamed: true,
    );
    mateUse(
      'extendedSizeConstraints',
      extendedSizeConstraints,
      isNamed: true,
    );
    mateUse(
      'extendedIconLabelSpacing',
      extendedIconLabelSpacing,
      isNamed: true,
    );
    mateUse(
      'extendedPadding',
      extendedPadding,
      isNamed: true,
    );
    mateUse(
      'extendedTextStyle',
      extendedTextStyle,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
  }
}
