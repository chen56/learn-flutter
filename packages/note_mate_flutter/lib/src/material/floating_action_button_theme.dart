// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:note/mate.dart';

/// class FloatingActionButtonThemeData with Diagnosticable
class FloatingActionButtonThemeData$Mate extends FloatingActionButtonThemeData
    with Mate<FloatingActionButtonThemeData$Mate> {
  /// FloatingActionButtonThemeData FloatingActionButtonThemeData({Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, double? elevation, double? focusElevation, double? hoverElevation, double? disabledElevation, double? highlightElevation, ShapeBorder? shape, bool? enableFeedback, double? iconSize, BoxConstraints? sizeConstraints, BoxConstraints? smallSizeConstraints, BoxConstraints? largeSizeConstraints, BoxConstraints? extendedSizeConstraints, double? extendedIconLabelSpacing, EdgeInsetsGeometry? extendedPadding, TextStyle? extendedTextStyle, MaterialStateProperty<MouseCursor?>? mouseCursor})
  FloatingActionButtonThemeData$Mate({
    /// optionalParameters: {Color? foregroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? foregroundColor,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? focusElevation} , hasDefaultValue:false, defaultValueCode:null
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , hasDefaultValue:false, defaultValueCode:null
    double? hoverElevation,

    /// optionalParameters: {double? disabledElevation} , hasDefaultValue:false, defaultValueCode:null
    double? disabledElevation,

    /// optionalParameters: {double? highlightElevation} , hasDefaultValue:false, defaultValueCode:null
    double? highlightElevation,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {double? iconSize} , hasDefaultValue:false, defaultValueCode:null
    double? iconSize,

    /// optionalParameters: {BoxConstraints? sizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? sizeConstraints,

    /// optionalParameters: {BoxConstraints? smallSizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? smallSizeConstraints,

    /// optionalParameters: {BoxConstraints? largeSizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? largeSizeConstraints,

    /// optionalParameters: {BoxConstraints? extendedSizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? extendedSizeConstraints,

    /// optionalParameters: {double? extendedIconLabelSpacing} , hasDefaultValue:false, defaultValueCode:null
    double? extendedIconLabelSpacing,

    /// optionalParameters: {EdgeInsetsGeometry? extendedPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? extendedPadding,

    /// optionalParameters: {TextStyle? extendedTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? extendedTextStyle,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          foregroundColor: foregroundColor,
          backgroundColor: backgroundColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          disabledElevation: disabledElevation,
          highlightElevation: highlightElevation,
          shape: shape,
          enableFeedback: enableFeedback,
          iconSize: iconSize,
          sizeConstraints: sizeConstraints,
          smallSizeConstraints: smallSizeConstraints,
          largeSizeConstraints: largeSizeConstraints,
          extendedSizeConstraints: extendedSizeConstraints,
          extendedIconLabelSpacing: extendedIconLabelSpacing,
          extendedPadding: extendedPadding,
          extendedTextStyle: extendedTextStyle,
          mouseCursor: mouseCursor,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FloatingActionButtonThemeData$Mate(
        foregroundColor: p.get('foregroundColor').build(),
        backgroundColor: p.get('backgroundColor').build(),
        focusColor: p.get('focusColor').build(),
        hoverColor: p.get('hoverColor').build(),
        splashColor: p.get('splashColor').build(),
        elevation: p.get('elevation').build(),
        focusElevation: p.get('focusElevation').build(),
        hoverElevation: p.get('hoverElevation').build(),
        disabledElevation: p.get('disabledElevation').build(),
        highlightElevation: p.get('highlightElevation').build(),
        shape: p.get('shape').build(),
        enableFeedback: p.get('enableFeedback').build(),
        iconSize: p.get('iconSize').build(),
        sizeConstraints: p.get('sizeConstraints').build(),
        smallSizeConstraints: p.get('smallSizeConstraints').build(),
        largeSizeConstraints: p.get('largeSizeConstraints').build(),
        extendedSizeConstraints: p.get('extendedSizeConstraints').build(),
        extendedIconLabelSpacing: p.get('extendedIconLabelSpacing').build(),
        extendedPadding: p.get('extendedPadding').build(),
        extendedTextStyle: p.get('extendedTextStyle').build(),
        mouseCursor: p.get('mouseCursor').build(),
      ),
    );
    mateParams.put('foregroundColor', foregroundColor);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('focusColor', focusColor);
    mateParams.put('hoverColor', hoverColor);
    mateParams.put('splashColor', splashColor);
    mateParams.put('elevation', elevation);
    mateParams.put('focusElevation', focusElevation);
    mateParams.put('hoverElevation', hoverElevation);
    mateParams.put('disabledElevation', disabledElevation);
    mateParams.put('highlightElevation', highlightElevation);
    mateParams.put('shape', shape);
    mateParams.put('enableFeedback', enableFeedback);
    mateParams.put('iconSize', iconSize);
    mateParams.put('sizeConstraints', sizeConstraints);
    mateParams.put('smallSizeConstraints', smallSizeConstraints);
    mateParams.put('largeSizeConstraints', largeSizeConstraints);
    mateParams.put('extendedSizeConstraints', extendedSizeConstraints);
    mateParams.put('extendedIconLabelSpacing', extendedIconLabelSpacing);
    mateParams.put('extendedPadding', extendedPadding);
    mateParams.put('extendedTextStyle', extendedTextStyle);
    mateParams.put('mouseCursor', mouseCursor);
  }
}
