// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/selectable_text.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/src/painting/text_span.dart';

/// class SelectableText extends StatefulWidget
class SelectableText$Mate extends SelectableText with Mate {
  /// SelectableText SelectableText(String data, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate(
    /// requiredParameters: String data
    String data, {
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {TextStyle? style} , defaultValue:none
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , defaultValue:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , defaultValue:none
    TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {double? textScaleFactor} , defaultValue:none
    double? textScaleFactor,

    /// optionalParameters: {bool showCursor = false} , defaultValue:Literal
    bool showCursor = false,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {int? minLines} , defaultValue:none
    int? minLines,

    /// optionalParameters: {int? maxLines} , defaultValue:none
    int? maxLines,

    /// optionalParameters: {double cursorWidth = 2.0} , defaultValue:Literal
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , defaultValue:none
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , defaultValue:none
    Radius? cursorRadius,

    /// optionalParameters: {Color? cursorColor} , defaultValue:none
    Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , defaultValue:unprocessed
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , defaultValue:unprocessed
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {bool enableInteractiveSelection = true} , defaultValue:Literal
    bool enableInteractiveSelection = true,

    /// optionalParameters: {TextSelectionControls? selectionControls} , defaultValue:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , defaultValue:none
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {String? semanticsLabel} , defaultValue:none
    String? semanticsLabel,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , defaultValue:none
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , defaultValue:none
    TextWidthBasis? textWidthBasis,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , defaultValue:none
    SelectionChangedCallback? onSelectionChanged,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , defaultValue:unprocessed
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , defaultValue:none
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super(
          data,
          key: key,
          focusNode: focusNode,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          showCursor: showCursor,
          autofocus: autofocus,
          minLines: minLines,
          maxLines: maxLines,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollPhysics: scrollPhysics,
          semanticsLabel: semanticsLabel,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          onSelectionChanged: onSelectionChanged,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateCreateName = 'SelectableText';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SelectableText$Mate(
          p.get('data').value,
          key: p.get('key').build(),
          focusNode: p.get('focusNode').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          minLines: p.get('minLines').build(),
          maxLines: p.get('maxLines').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse('data', data);
    mateUse('key', key);
    mateUse('focusNode', focusNode);
    mateUse('style', style);
    mateUse('strutStyle', strutStyle);
    mateUse('textAlign', textAlign);
    mateUse('textDirection', textDirection);
    mateUse('textScaleFactor', textScaleFactor);
    mateUse('showCursor', showCursor);
    mateUse('autofocus', autofocus);
    mateUse('minLines', minLines);
    mateUse('maxLines', maxLines);
    mateUse('cursorWidth', cursorWidth);
    mateUse('cursorHeight', cursorHeight);
    mateUse('cursorRadius', cursorRadius);
    mateUse('cursorColor', cursorColor);
    mateUse('selectionHeightStyle', selectionHeightStyle);
    mateUse('selectionWidthStyle', selectionWidthStyle);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('enableInteractiveSelection', enableInteractiveSelection);
    mateUse('selectionControls', selectionControls);
    mateUse('onTap', onTap);
    mateUse('scrollPhysics', scrollPhysics);
    mateUse('semanticsLabel', semanticsLabel);
    mateUse('textHeightBehavior', textHeightBehavior);
    mateUse('textWidthBasis', textWidthBasis);
    mateUse('onSelectionChanged', onSelectionChanged);
    mateUse('contextMenuBuilder', contextMenuBuilder);
    mateUse('magnifierConfiguration', magnifierConfiguration);
  }

  /// SelectableText SelectableText.rich(TextSpan textSpan, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate.rich(
    /// requiredParameters: TextSpan textSpan
    TextSpan textSpan, {
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {TextStyle? style} , defaultValue:none
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , defaultValue:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , defaultValue:none
    TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {double? textScaleFactor} , defaultValue:none
    double? textScaleFactor,

    /// optionalParameters: {bool showCursor = false} , defaultValue:Literal
    bool showCursor = false,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {int? minLines} , defaultValue:none
    int? minLines,

    /// optionalParameters: {int? maxLines} , defaultValue:none
    int? maxLines,

    /// optionalParameters: {double cursorWidth = 2.0} , defaultValue:Literal
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , defaultValue:none
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , defaultValue:none
    Radius? cursorRadius,

    /// optionalParameters: {Color? cursorColor} , defaultValue:none
    Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , defaultValue:unprocessed
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , defaultValue:unprocessed
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {bool enableInteractiveSelection = true} , defaultValue:Literal
    bool enableInteractiveSelection = true,

    /// optionalParameters: {TextSelectionControls? selectionControls} , defaultValue:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , defaultValue:none
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {String? semanticsLabel} , defaultValue:none
    String? semanticsLabel,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , defaultValue:none
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , defaultValue:none
    TextWidthBasis? textWidthBasis,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , defaultValue:none
    SelectionChangedCallback? onSelectionChanged,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , defaultValue:unprocessed
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , defaultValue:none
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super.rich(
          textSpan,
          key: key,
          focusNode: focusNode,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          showCursor: showCursor,
          autofocus: autofocus,
          minLines: minLines,
          maxLines: maxLines,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollPhysics: scrollPhysics,
          semanticsLabel: semanticsLabel,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          onSelectionChanged: onSelectionChanged,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateCreateName = 'SelectableText.rich';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SelectableText$Mate.rich(
          p.get('textSpan').value,
          key: p.get('key').build(),
          focusNode: p.get('focusNode').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          minLines: p.get('minLines').build(),
          maxLines: p.get('maxLines').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse('textSpan', textSpan);
    mateUse('key', key);
    mateUse('focusNode', focusNode);
    mateUse('style', style);
    mateUse('strutStyle', strutStyle);
    mateUse('textAlign', textAlign);
    mateUse('textDirection', textDirection);
    mateUse('textScaleFactor', textScaleFactor);
    mateUse('showCursor', showCursor);
    mateUse('autofocus', autofocus);
    mateUse('minLines', minLines);
    mateUse('maxLines', maxLines);
    mateUse('cursorWidth', cursorWidth);
    mateUse('cursorHeight', cursorHeight);
    mateUse('cursorRadius', cursorRadius);
    mateUse('cursorColor', cursorColor);
    mateUse('selectionHeightStyle', selectionHeightStyle);
    mateUse('selectionWidthStyle', selectionWidthStyle);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('enableInteractiveSelection', enableInteractiveSelection);
    mateUse('selectionControls', selectionControls);
    mateUse('onTap', onTap);
    mateUse('scrollPhysics', scrollPhysics);
    mateUse('semanticsLabel', semanticsLabel);
    mateUse('textHeightBehavior', textHeightBehavior);
    mateUse('textWidthBasis', textWidthBasis);
    mateUse('onSelectionChanged', onSelectionChanged);
    mateUse('contextMenuBuilder', contextMenuBuilder);
    mateUse('magnifierConfiguration', magnifierConfiguration);
  }
}
