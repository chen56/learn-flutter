// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/selectable_text.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/focus_manager.dart' as _i4;
import 'package:flutter/src/painting/text_style.dart' as _i5;
import 'package:flutter/src/painting/strut_style.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/gestures/recognizer.dart' as _i8;
import 'package:flutter/gestures.dart' as _i9;
import 'package:flutter/src/widgets/text_selection.dart' as _i10;
import 'package:flutter/src/gestures/tap.dart' as _i11;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i12;
import 'package:flutter/src/painting/text_painter.dart' as _i13;
import 'package:flutter/src/widgets/editable_text.dart' as _i14;
import 'package:flutter/src/widgets/magnifier.dart' as _i15;
import 'package:flutter/src/painting/text_span.dart' as _i16;

/// class SelectableText extends StatefulWidget
class SelectableText$Mate extends _i1.SelectableText with _i2.Mate {
  /// SelectableText SelectableText(String data, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate(
    /// requiredParameters: String data
    String data, {
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i4.FocusNode? focusNode,

    /// optionalParameters: {TextStyle? style} , default:none
    _i5.TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    _i6.StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    _i7.TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i7.TextDirection? textDirection,

    /// optionalParameters: {double? textScaleFactor} , default:none
    double? textScaleFactor,

    /// optionalParameters: {bool showCursor = false} , default:processed=BooleanLiteralImpl
    bool showCursor = false,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {int? minLines} , default:none
    int? minLines,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , default:none
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , default:none
    _i7.Radius? cursorRadius,

    /// optionalParameters: {Color? cursorColor} , default:none
    _i7.Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    required _i7.BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    required _i7.BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i8.DragStartBehavior dragStartBehavior = _i9.DragStartBehavior.start,

    /// optionalParameters: {bool enableInteractiveSelection = true} , default:processed=BooleanLiteralImpl
    bool enableInteractiveSelection = true,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    _i10.TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i11.GestureTapCallback? onTap,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    _i12.ScrollPhysics? scrollPhysics,

    /// optionalParameters: {String? semanticsLabel} , default:none
    String? semanticsLabel,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    _i7.TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    _i13.TextWidthBasis? textWidthBasis,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , default:none
    _i14.SelectionChangedCallback? onSelectionChanged,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , default:unprocessed=SimpleIdentifierImpl
    required _i14.EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , default:none
    _i15.TextMagnifierConfiguration? magnifierConfiguration,
  }) : super(
          data,
          key: key,
          focusNode: focusNode,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          showCursor: showCursor,
          autofocus: autofocus,
          minLines: minLines,
          maxLines: maxLines,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollPhysics: scrollPhysics,
          semanticsLabel: semanticsLabel,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          onSelectionChanged: onSelectionChanged,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilderName = 'SelectableText';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SelectableText$Mate(
          p.get('data').value,
          key: p.get('key').build(),
          focusNode: p.get('focusNode').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          minLines: p.get('minLines').build(),
          maxLines: p.get('maxLines').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse(
      'data',
      data,
      isNamed: false,
    );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'strutStyle',
      strutStyle,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'textScaleFactor',
      textScaleFactor,
      isNamed: true,
    );
    mateUse(
      'showCursor',
      showCursor,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'minLines',
      minLines,
      isNamed: true,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
    mateUse(
      'cursorWidth',
      cursorWidth,
      isNamed: true,
      defaultValue: 2.0,
    );
    mateUse(
      'cursorHeight',
      cursorHeight,
      isNamed: true,
    );
    mateUse(
      'cursorRadius',
      cursorRadius,
      isNamed: true,
    );
    mateUse(
      'cursorColor',
      cursorColor,
      isNamed: true,
    );
    mateUse(
      'selectionHeightStyle',
      selectionHeightStyle,
      isNamed: true,
    );
    mateUse(
      'selectionWidthStyle',
      selectionWidthStyle,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i9.DragStartBehavior.start,
    );
    mateUse(
      'enableInteractiveSelection',
      enableInteractiveSelection,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'selectionControls',
      selectionControls,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'scrollPhysics',
      scrollPhysics,
      isNamed: true,
    );
    mateUse(
      'semanticsLabel',
      semanticsLabel,
      isNamed: true,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
    );
    mateUse(
      'onSelectionChanged',
      onSelectionChanged,
      isNamed: true,
    );
    mateUse(
      'contextMenuBuilder',
      contextMenuBuilder,
      isNamed: true,
    );
    mateUse(
      'magnifierConfiguration',
      magnifierConfiguration,
      isNamed: true,
    );
  }

  /// SelectableText SelectableText.rich(TextSpan textSpan, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate.rich(
    /// requiredParameters: TextSpan textSpan
    _i16.TextSpan textSpan, {
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i4.FocusNode? focusNode,

    /// optionalParameters: {TextStyle? style} , default:none
    _i5.TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    _i6.StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    _i7.TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i7.TextDirection? textDirection,

    /// optionalParameters: {double? textScaleFactor} , default:none
    double? textScaleFactor,

    /// optionalParameters: {bool showCursor = false} , default:processed=BooleanLiteralImpl
    bool showCursor = false,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {int? minLines} , default:none
    int? minLines,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , default:none
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , default:none
    _i7.Radius? cursorRadius,

    /// optionalParameters: {Color? cursorColor} , default:none
    _i7.Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    required _i7.BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    required _i7.BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i8.DragStartBehavior dragStartBehavior = _i9.DragStartBehavior.start,

    /// optionalParameters: {bool enableInteractiveSelection = true} , default:processed=BooleanLiteralImpl
    bool enableInteractiveSelection = true,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    _i10.TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i11.GestureTapCallback? onTap,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    _i12.ScrollPhysics? scrollPhysics,

    /// optionalParameters: {String? semanticsLabel} , default:none
    String? semanticsLabel,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    _i7.TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    _i13.TextWidthBasis? textWidthBasis,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , default:none
    _i14.SelectionChangedCallback? onSelectionChanged,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , default:unprocessed=SimpleIdentifierImpl
    required _i14.EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , default:none
    _i15.TextMagnifierConfiguration? magnifierConfiguration,
  }) : super.rich(
          textSpan,
          key: key,
          focusNode: focusNode,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          showCursor: showCursor,
          autofocus: autofocus,
          minLines: minLines,
          maxLines: maxLines,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollPhysics: scrollPhysics,
          semanticsLabel: semanticsLabel,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          onSelectionChanged: onSelectionChanged,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilderName = 'SelectableText.rich';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SelectableText$Mate.rich(
          p.get('textSpan').value,
          key: p.get('key').build(),
          focusNode: p.get('focusNode').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          minLines: p.get('minLines').build(),
          maxLines: p.get('maxLines').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse(
      'textSpan',
      textSpan,
      isNamed: false,
    );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'strutStyle',
      strutStyle,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'textScaleFactor',
      textScaleFactor,
      isNamed: true,
    );
    mateUse(
      'showCursor',
      showCursor,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'minLines',
      minLines,
      isNamed: true,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
    mateUse(
      'cursorWidth',
      cursorWidth,
      isNamed: true,
      defaultValue: 2.0,
    );
    mateUse(
      'cursorHeight',
      cursorHeight,
      isNamed: true,
    );
    mateUse(
      'cursorRadius',
      cursorRadius,
      isNamed: true,
    );
    mateUse(
      'cursorColor',
      cursorColor,
      isNamed: true,
    );
    mateUse(
      'selectionHeightStyle',
      selectionHeightStyle,
      isNamed: true,
    );
    mateUse(
      'selectionWidthStyle',
      selectionWidthStyle,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i9.DragStartBehavior.start,
    );
    mateUse(
      'enableInteractiveSelection',
      enableInteractiveSelection,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'selectionControls',
      selectionControls,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'scrollPhysics',
      scrollPhysics,
      isNamed: true,
    );
    mateUse(
      'semanticsLabel',
      semanticsLabel,
      isNamed: true,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
    );
    mateUse(
      'onSelectionChanged',
      onSelectionChanged,
      isNamed: true,
    );
    mateUse(
      'contextMenuBuilder',
      contextMenuBuilder,
      isNamed: true,
    );
    mateUse(
      'magnifierConfiguration',
      magnifierConfiguration,
      isNamed: true,
    );
  }
}
