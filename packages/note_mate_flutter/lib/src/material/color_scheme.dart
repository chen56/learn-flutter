// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/color_scheme.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/material.dart' as _i4;

/// class ColorScheme with Diagnosticable
class ColorScheme$Mate extends _i1.ColorScheme with _i2.Mate {
  /// ColorScheme ColorScheme({required Brightness brightness, required Color primary, required Color onPrimary, Color? primaryContainer, Color? onPrimaryContainer, required Color secondary, required Color onSecondary, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, required Color error, required Color onError, Color? errorContainer, Color? onErrorContainer, required Color background, required Color onBackground, required Color surface, required Color onSurface, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant, Color? secondaryVariant})
  ColorScheme$Mate({
    /// optionalParameters: {required Brightness brightness} , default:none
    required _i3.Brightness brightness,

    /// optionalParameters: {required Color primary} , default:none
    required _i3.Color primary,

    /// optionalParameters: {required Color onPrimary} , default:none
    required _i3.Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , default:none
    _i3.Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    _i3.Color? onPrimaryContainer,

    /// optionalParameters: {required Color secondary} , default:none
    required _i3.Color secondary,

    /// optionalParameters: {required Color onSecondary} , default:none
    required _i3.Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    _i3.Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    _i3.Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    _i3.Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    _i3.Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    _i3.Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    _i3.Color? onTertiaryContainer,

    /// optionalParameters: {required Color error} , default:none
    required _i3.Color error,

    /// optionalParameters: {required Color onError} , default:none
    required _i3.Color onError,

    /// optionalParameters: {Color? errorContainer} , default:none
    _i3.Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    _i3.Color? onErrorContainer,

    /// optionalParameters: {required Color background} , default:none
    required _i3.Color background,

    /// optionalParameters: {required Color onBackground} , default:none
    required _i3.Color onBackground,

    /// optionalParameters: {required Color surface} , default:none
    required _i3.Color surface,

    /// optionalParameters: {required Color onSurface} , default:none
    required _i3.Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    _i3.Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    _i3.Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    _i3.Color? outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    _i3.Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    _i3.Color? shadow,

    /// optionalParameters: {Color? scrim} , default:none
    _i3.Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    _i3.Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    _i3.Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    _i3.Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    _i3.Color? surfaceTint,
  }) : super(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilderName = 'ColorScheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse(
      'brightness',
      brightness,
      isNamed: true,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
    );
    mateUse(
      'onPrimary',
      onPrimary,
      isNamed: true,
    );
    mateUse(
      'primaryContainer',
      primaryContainer,
      isNamed: true,
    );
    mateUse(
      'onPrimaryContainer',
      onPrimaryContainer,
      isNamed: true,
    );
    mateUse(
      'secondary',
      secondary,
      isNamed: true,
    );
    mateUse(
      'onSecondary',
      onSecondary,
      isNamed: true,
    );
    mateUse(
      'secondaryContainer',
      secondaryContainer,
      isNamed: true,
    );
    mateUse(
      'onSecondaryContainer',
      onSecondaryContainer,
      isNamed: true,
    );
    mateUse(
      'tertiary',
      tertiary,
      isNamed: true,
    );
    mateUse(
      'onTertiary',
      onTertiary,
      isNamed: true,
    );
    mateUse(
      'tertiaryContainer',
      tertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'onTertiaryContainer',
      onTertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'error',
      error,
      isNamed: true,
    );
    mateUse(
      'onError',
      onError,
      isNamed: true,
    );
    mateUse(
      'errorContainer',
      errorContainer,
      isNamed: true,
    );
    mateUse(
      'onErrorContainer',
      onErrorContainer,
      isNamed: true,
    );
    mateUse(
      'background',
      background,
      isNamed: true,
    );
    mateUse(
      'onBackground',
      onBackground,
      isNamed: true,
    );
    mateUse(
      'surface',
      surface,
      isNamed: true,
    );
    mateUse(
      'onSurface',
      onSurface,
      isNamed: true,
    );
    mateUse(
      'surfaceVariant',
      surfaceVariant,
      isNamed: true,
    );
    mateUse(
      'onSurfaceVariant',
      onSurfaceVariant,
      isNamed: true,
    );
    mateUse(
      'outline',
      outline,
      isNamed: true,
    );
    mateUse(
      'outlineVariant',
      outlineVariant,
      isNamed: true,
    );
    mateUse(
      'shadow',
      shadow,
      isNamed: true,
    );
    mateUse(
      'scrim',
      scrim,
      isNamed: true,
    );
    mateUse(
      'inverseSurface',
      inverseSurface,
      isNamed: true,
    );
    mateUse(
      'onInverseSurface',
      onInverseSurface,
      isNamed: true,
    );
    mateUse(
      'inversePrimary',
      inversePrimary,
      isNamed: true,
    );
    mateUse(
      'surfaceTint',
      surfaceTint,
      isNamed: true,
    );
  }

  /// ColorScheme ColorScheme.light({Brightness brightness = Brightness.light, Color primary = const Color(0xff6200ee), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffb00020), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700b3), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.light({
    /// optionalParameters: {Brightness brightness = Brightness.light} , default:processed=PrefixedIdentifierImpl
    _i3.Brightness brightness = _i3.Brightness.light,

    /// optionalParameters: {Color primary = const Color(0xff6200ee)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onPrimary = _i4.Colors.white,

    /// optionalParameters: {Color? primaryContainer} , default:none
    _i3.Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    _i3.Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSecondary = _i4.Colors.black,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    _i3.Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    _i3.Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    _i3.Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    _i3.Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    _i3.Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    _i3.Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffb00020)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color error,

    /// optionalParameters: {Color onError = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onError = _i4.Colors.white,

    /// optionalParameters: {Color? errorContainer} , default:none
    _i3.Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    _i3.Color? onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color background = _i4.Colors.white,

    /// optionalParameters: {Color onBackground = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onBackground = _i4.Colors.black,

    /// optionalParameters: {Color surface = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color surface = _i4.Colors.white,

    /// optionalParameters: {Color onSurface = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSurface = _i4.Colors.black,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    _i3.Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    _i3.Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    _i3.Color? outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    _i3.Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    _i3.Color? shadow,

    /// optionalParameters: {Color? scrim} , default:none
    _i3.Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    _i3.Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    _i3.Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    _i3.Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    _i3.Color? surfaceTint,
  }) : super.light(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilderName = 'ColorScheme.light';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.light(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse(
      'brightness',
      brightness,
      isNamed: true,
      defaultValue: _i3.Brightness.light,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
    );
    mateUse(
      'onPrimary',
      onPrimary,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'primaryContainer',
      primaryContainer,
      isNamed: true,
    );
    mateUse(
      'onPrimaryContainer',
      onPrimaryContainer,
      isNamed: true,
    );
    mateUse(
      'secondary',
      secondary,
      isNamed: true,
    );
    mateUse(
      'onSecondary',
      onSecondary,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'secondaryContainer',
      secondaryContainer,
      isNamed: true,
    );
    mateUse(
      'onSecondaryContainer',
      onSecondaryContainer,
      isNamed: true,
    );
    mateUse(
      'tertiary',
      tertiary,
      isNamed: true,
    );
    mateUse(
      'onTertiary',
      onTertiary,
      isNamed: true,
    );
    mateUse(
      'tertiaryContainer',
      tertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'onTertiaryContainer',
      onTertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'error',
      error,
      isNamed: true,
    );
    mateUse(
      'onError',
      onError,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'errorContainer',
      errorContainer,
      isNamed: true,
    );
    mateUse(
      'onErrorContainer',
      onErrorContainer,
      isNamed: true,
    );
    mateUse(
      'background',
      background,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'onBackground',
      onBackground,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'surface',
      surface,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'onSurface',
      onSurface,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'surfaceVariant',
      surfaceVariant,
      isNamed: true,
    );
    mateUse(
      'onSurfaceVariant',
      onSurfaceVariant,
      isNamed: true,
    );
    mateUse(
      'outline',
      outline,
      isNamed: true,
    );
    mateUse(
      'outlineVariant',
      outlineVariant,
      isNamed: true,
    );
    mateUse(
      'shadow',
      shadow,
      isNamed: true,
    );
    mateUse(
      'scrim',
      scrim,
      isNamed: true,
    );
    mateUse(
      'inverseSurface',
      inverseSurface,
      isNamed: true,
    );
    mateUse(
      'onInverseSurface',
      onInverseSurface,
      isNamed: true,
    );
    mateUse(
      'inversePrimary',
      inversePrimary,
      isNamed: true,
    );
    mateUse(
      'surfaceTint',
      surfaceTint,
      isNamed: true,
    );
  }

  /// ColorScheme ColorScheme.dark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffbb86fc), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffcf6679), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700B3), Color? secondaryVariant = const Color(0xff03dac6)})
  ColorScheme$Mate.dark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , default:processed=PrefixedIdentifierImpl
    _i3.Brightness brightness = _i3.Brightness.dark,

    /// optionalParameters: {Color primary = const Color(0xffbb86fc)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onPrimary = _i4.Colors.black,

    /// optionalParameters: {Color? primaryContainer} , default:none
    _i3.Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    _i3.Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSecondary = _i4.Colors.black,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    _i3.Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    _i3.Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    _i3.Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    _i3.Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    _i3.Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    _i3.Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffcf6679)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color error,

    /// optionalParameters: {Color onError = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onError = _i4.Colors.black,

    /// optionalParameters: {Color? errorContainer} , default:none
    _i3.Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    _i3.Color? onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color background,

    /// optionalParameters: {Color onBackground = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onBackground = _i4.Colors.white,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color surface,

    /// optionalParameters: {Color onSurface = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSurface = _i4.Colors.white,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    _i3.Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    _i3.Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    _i3.Color? outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    _i3.Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    _i3.Color? shadow,

    /// optionalParameters: {Color? scrim} , default:none
    _i3.Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    _i3.Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    _i3.Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    _i3.Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    _i3.Color? surfaceTint,
  }) : super.dark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilderName = 'ColorScheme.dark';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.dark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse(
      'brightness',
      brightness,
      isNamed: true,
      defaultValue: _i3.Brightness.dark,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
    );
    mateUse(
      'onPrimary',
      onPrimary,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'primaryContainer',
      primaryContainer,
      isNamed: true,
    );
    mateUse(
      'onPrimaryContainer',
      onPrimaryContainer,
      isNamed: true,
    );
    mateUse(
      'secondary',
      secondary,
      isNamed: true,
    );
    mateUse(
      'onSecondary',
      onSecondary,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'secondaryContainer',
      secondaryContainer,
      isNamed: true,
    );
    mateUse(
      'onSecondaryContainer',
      onSecondaryContainer,
      isNamed: true,
    );
    mateUse(
      'tertiary',
      tertiary,
      isNamed: true,
    );
    mateUse(
      'onTertiary',
      onTertiary,
      isNamed: true,
    );
    mateUse(
      'tertiaryContainer',
      tertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'onTertiaryContainer',
      onTertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'error',
      error,
      isNamed: true,
    );
    mateUse(
      'onError',
      onError,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'errorContainer',
      errorContainer,
      isNamed: true,
    );
    mateUse(
      'onErrorContainer',
      onErrorContainer,
      isNamed: true,
    );
    mateUse(
      'background',
      background,
      isNamed: true,
    );
    mateUse(
      'onBackground',
      onBackground,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'surface',
      surface,
      isNamed: true,
    );
    mateUse(
      'onSurface',
      onSurface,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'surfaceVariant',
      surfaceVariant,
      isNamed: true,
    );
    mateUse(
      'onSurfaceVariant',
      onSurfaceVariant,
      isNamed: true,
    );
    mateUse(
      'outline',
      outline,
      isNamed: true,
    );
    mateUse(
      'outlineVariant',
      outlineVariant,
      isNamed: true,
    );
    mateUse(
      'shadow',
      shadow,
      isNamed: true,
    );
    mateUse(
      'scrim',
      scrim,
      isNamed: true,
    );
    mateUse(
      'inverseSurface',
      inverseSurface,
      isNamed: true,
    );
    mateUse(
      'onInverseSurface',
      onInverseSurface,
      isNamed: true,
    );
    mateUse(
      'inversePrimary',
      inversePrimary,
      isNamed: true,
    );
    mateUse(
      'surfaceTint',
      surfaceTint,
      isNamed: true,
    );
  }

  /// ColorScheme ColorScheme.highContrastLight({Brightness brightness = Brightness.light, Color primary = const Color(0xff0000ba), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff790000), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff000088), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.highContrastLight({
    /// optionalParameters: {Brightness brightness = Brightness.light} , default:processed=PrefixedIdentifierImpl
    _i3.Brightness brightness = _i3.Brightness.light,

    /// optionalParameters: {Color primary = const Color(0xff0000ba)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onPrimary = _i4.Colors.white,

    /// optionalParameters: {Color? primaryContainer} , default:none
    _i3.Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    _i3.Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSecondary = _i4.Colors.black,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    _i3.Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    _i3.Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    _i3.Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    _i3.Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    _i3.Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    _i3.Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff790000)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color error,

    /// optionalParameters: {Color onError = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onError = _i4.Colors.white,

    /// optionalParameters: {Color? errorContainer} , default:none
    _i3.Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    _i3.Color? onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color background = _i4.Colors.white,

    /// optionalParameters: {Color onBackground = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onBackground = _i4.Colors.black,

    /// optionalParameters: {Color surface = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color surface = _i4.Colors.white,

    /// optionalParameters: {Color onSurface = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSurface = _i4.Colors.black,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    _i3.Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    _i3.Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    _i3.Color? outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    _i3.Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    _i3.Color? shadow,

    /// optionalParameters: {Color? scrim} , default:none
    _i3.Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    _i3.Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    _i3.Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    _i3.Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    _i3.Color? surfaceTint,
  }) : super.highContrastLight(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilderName = 'ColorScheme.highContrastLight';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.highContrastLight(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse(
      'brightness',
      brightness,
      isNamed: true,
      defaultValue: _i3.Brightness.light,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
    );
    mateUse(
      'onPrimary',
      onPrimary,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'primaryContainer',
      primaryContainer,
      isNamed: true,
    );
    mateUse(
      'onPrimaryContainer',
      onPrimaryContainer,
      isNamed: true,
    );
    mateUse(
      'secondary',
      secondary,
      isNamed: true,
    );
    mateUse(
      'onSecondary',
      onSecondary,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'secondaryContainer',
      secondaryContainer,
      isNamed: true,
    );
    mateUse(
      'onSecondaryContainer',
      onSecondaryContainer,
      isNamed: true,
    );
    mateUse(
      'tertiary',
      tertiary,
      isNamed: true,
    );
    mateUse(
      'onTertiary',
      onTertiary,
      isNamed: true,
    );
    mateUse(
      'tertiaryContainer',
      tertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'onTertiaryContainer',
      onTertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'error',
      error,
      isNamed: true,
    );
    mateUse(
      'onError',
      onError,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'errorContainer',
      errorContainer,
      isNamed: true,
    );
    mateUse(
      'onErrorContainer',
      onErrorContainer,
      isNamed: true,
    );
    mateUse(
      'background',
      background,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'onBackground',
      onBackground,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'surface',
      surface,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'onSurface',
      onSurface,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'surfaceVariant',
      surfaceVariant,
      isNamed: true,
    );
    mateUse(
      'onSurfaceVariant',
      onSurfaceVariant,
      isNamed: true,
    );
    mateUse(
      'outline',
      outline,
      isNamed: true,
    );
    mateUse(
      'outlineVariant',
      outlineVariant,
      isNamed: true,
    );
    mateUse(
      'shadow',
      shadow,
      isNamed: true,
    );
    mateUse(
      'scrim',
      scrim,
      isNamed: true,
    );
    mateUse(
      'inverseSurface',
      inverseSurface,
      isNamed: true,
    );
    mateUse(
      'onInverseSurface',
      onInverseSurface,
      isNamed: true,
    );
    mateUse(
      'inversePrimary',
      inversePrimary,
      isNamed: true,
    );
    mateUse(
      'surfaceTint',
      surfaceTint,
      isNamed: true,
    );
  }

  /// ColorScheme ColorScheme.highContrastDark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffefb7ff), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff9b374d), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xffbe9eff), Color? secondaryVariant = const Color(0xff66fff9)})
  ColorScheme$Mate.highContrastDark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , default:processed=PrefixedIdentifierImpl
    _i3.Brightness brightness = _i3.Brightness.dark,

    /// optionalParameters: {Color primary = const Color(0xffefb7ff)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onPrimary = _i4.Colors.black,

    /// optionalParameters: {Color? primaryContainer} , default:none
    _i3.Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    _i3.Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSecondary = _i4.Colors.black,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    _i3.Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    _i3.Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    _i3.Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    _i3.Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    _i3.Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    _i3.Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff9b374d)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color error,

    /// optionalParameters: {Color onError = Colors.black} , default:processed=PrefixedIdentifierImpl
    _i3.Color onError = _i4.Colors.black,

    /// optionalParameters: {Color? errorContainer} , default:none
    _i3.Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    _i3.Color? onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color background,

    /// optionalParameters: {Color onBackground = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onBackground = _i4.Colors.white,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i3.Color surface,

    /// optionalParameters: {Color onSurface = Colors.white} , default:processed=PrefixedIdentifierImpl
    _i3.Color onSurface = _i4.Colors.white,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    _i3.Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    _i3.Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    _i3.Color? outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    _i3.Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    _i3.Color? shadow,

    /// optionalParameters: {Color? scrim} , default:none
    _i3.Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    _i3.Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    _i3.Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    _i3.Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    _i3.Color? surfaceTint,
  }) : super.highContrastDark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilderName = 'ColorScheme.highContrastDark';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.highContrastDark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse(
      'brightness',
      brightness,
      isNamed: true,
      defaultValue: _i3.Brightness.dark,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
    );
    mateUse(
      'onPrimary',
      onPrimary,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'primaryContainer',
      primaryContainer,
      isNamed: true,
    );
    mateUse(
      'onPrimaryContainer',
      onPrimaryContainer,
      isNamed: true,
    );
    mateUse(
      'secondary',
      secondary,
      isNamed: true,
    );
    mateUse(
      'onSecondary',
      onSecondary,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'secondaryContainer',
      secondaryContainer,
      isNamed: true,
    );
    mateUse(
      'onSecondaryContainer',
      onSecondaryContainer,
      isNamed: true,
    );
    mateUse(
      'tertiary',
      tertiary,
      isNamed: true,
    );
    mateUse(
      'onTertiary',
      onTertiary,
      isNamed: true,
    );
    mateUse(
      'tertiaryContainer',
      tertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'onTertiaryContainer',
      onTertiaryContainer,
      isNamed: true,
    );
    mateUse(
      'error',
      error,
      isNamed: true,
    );
    mateUse(
      'onError',
      onError,
      isNamed: true,
      defaultValue: _i4.Colors.black,
    );
    mateUse(
      'errorContainer',
      errorContainer,
      isNamed: true,
    );
    mateUse(
      'onErrorContainer',
      onErrorContainer,
      isNamed: true,
    );
    mateUse(
      'background',
      background,
      isNamed: true,
    );
    mateUse(
      'onBackground',
      onBackground,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'surface',
      surface,
      isNamed: true,
    );
    mateUse(
      'onSurface',
      onSurface,
      isNamed: true,
      defaultValue: _i4.Colors.white,
    );
    mateUse(
      'surfaceVariant',
      surfaceVariant,
      isNamed: true,
    );
    mateUse(
      'onSurfaceVariant',
      onSurfaceVariant,
      isNamed: true,
    );
    mateUse(
      'outline',
      outline,
      isNamed: true,
    );
    mateUse(
      'outlineVariant',
      outlineVariant,
      isNamed: true,
    );
    mateUse(
      'shadow',
      shadow,
      isNamed: true,
    );
    mateUse(
      'scrim',
      scrim,
      isNamed: true,
    );
    mateUse(
      'inverseSurface',
      inverseSurface,
      isNamed: true,
    );
    mateUse(
      'onInverseSurface',
      onInverseSurface,
      isNamed: true,
    );
    mateUse(
      'inversePrimary',
      inversePrimary,
      isNamed: true,
    );
    mateUse(
      'surfaceTint',
      surfaceTint,
      isNamed: true,
    );
  }
}
