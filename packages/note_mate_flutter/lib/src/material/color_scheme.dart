// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/color_scheme.dart';
import 'package:note/mate.dart';
import 'dart:ui';

/// class ColorScheme with Diagnosticable
class ColorScheme$Mate extends ColorScheme with Mate {
  /// ColorScheme ColorScheme({required Brightness brightness, required Color primary, required Color onPrimary, Color? primaryContainer, Color? onPrimaryContainer, required Color secondary, required Color onSecondary, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, required Color error, required Color onError, Color? errorContainer, Color? onErrorContainer, required Color background, required Color onBackground, required Color surface, required Color onSurface, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant, Color? secondaryVariant})
  ColorScheme$Mate({
    /// optionalParameters: {required Brightness brightness} , defaultValue:none
    required Brightness brightness,

    /// optionalParameters: {required Color primary} , defaultValue:none
    required Color primary,

    /// optionalParameters: {required Color onPrimary} , defaultValue:none
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , defaultValue:none
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , defaultValue:none
    Color? onPrimaryContainer,

    /// optionalParameters: {required Color secondary} , defaultValue:none
    required Color secondary,

    /// optionalParameters: {required Color onSecondary} , defaultValue:none
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , defaultValue:none
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , defaultValue:none
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , defaultValue:none
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , defaultValue:none
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , defaultValue:none
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , defaultValue:none
    Color? onTertiaryContainer,

    /// optionalParameters: {required Color error} , defaultValue:none
    required Color error,

    /// optionalParameters: {required Color onError} , defaultValue:none
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , defaultValue:none
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , defaultValue:none
    Color? onErrorContainer,

    /// optionalParameters: {required Color background} , defaultValue:none
    required Color background,

    /// optionalParameters: {required Color onBackground} , defaultValue:none
    required Color onBackground,

    /// optionalParameters: {required Color surface} , defaultValue:none
    required Color surface,

    /// optionalParameters: {required Color onSurface} , defaultValue:none
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , defaultValue:none
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , defaultValue:none
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , defaultValue:none
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , defaultValue:none
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , defaultValue:none
    Color? shadow,

    /// optionalParameters: {Color? scrim} , defaultValue:none
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , defaultValue:none
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , defaultValue:none
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , defaultValue:none
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , defaultValue:none
    Color? surfaceTint,
  }) : super(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateCreateName = 'ColorScheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse('brightness', brightness);
    mateUse('primary', primary);
    mateUse('onPrimary', onPrimary);
    mateUse('primaryContainer', primaryContainer);
    mateUse('onPrimaryContainer', onPrimaryContainer);
    mateUse('secondary', secondary);
    mateUse('onSecondary', onSecondary);
    mateUse('secondaryContainer', secondaryContainer);
    mateUse('onSecondaryContainer', onSecondaryContainer);
    mateUse('tertiary', tertiary);
    mateUse('onTertiary', onTertiary);
    mateUse('tertiaryContainer', tertiaryContainer);
    mateUse('onTertiaryContainer', onTertiaryContainer);
    mateUse('error', error);
    mateUse('onError', onError);
    mateUse('errorContainer', errorContainer);
    mateUse('onErrorContainer', onErrorContainer);
    mateUse('background', background);
    mateUse('onBackground', onBackground);
    mateUse('surface', surface);
    mateUse('onSurface', onSurface);
    mateUse('surfaceVariant', surfaceVariant);
    mateUse('onSurfaceVariant', onSurfaceVariant);
    mateUse('outline', outline);
    mateUse('outlineVariant', outlineVariant);
    mateUse('shadow', shadow);
    mateUse('scrim', scrim);
    mateUse('inverseSurface', inverseSurface);
    mateUse('onInverseSurface', onInverseSurface);
    mateUse('inversePrimary', inversePrimary);
    mateUse('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.light({Brightness brightness = Brightness.light, Color primary = const Color(0xff6200ee), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffb00020), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700b3), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.light({
    /// optionalParameters: {Brightness brightness = Brightness.light} , defaultValue:unprocessed
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xff6200ee)} , defaultValue:unprocessed
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , defaultValue:unprocessed
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , defaultValue:none
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , defaultValue:none
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , defaultValue:unprocessed
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , defaultValue:unprocessed
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , defaultValue:none
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , defaultValue:none
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , defaultValue:none
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , defaultValue:none
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , defaultValue:none
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , defaultValue:none
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffb00020)} , defaultValue:unprocessed
    required Color error,

    /// optionalParameters: {Color onError = Colors.white} , defaultValue:unprocessed
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , defaultValue:none
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , defaultValue:none
    Color? onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , defaultValue:unprocessed
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.black} , defaultValue:unprocessed
    required Color onBackground,

    /// optionalParameters: {Color surface = Colors.white} , defaultValue:unprocessed
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.black} , defaultValue:unprocessed
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , defaultValue:none
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , defaultValue:none
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , defaultValue:none
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , defaultValue:none
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , defaultValue:none
    Color? shadow,

    /// optionalParameters: {Color? scrim} , defaultValue:none
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , defaultValue:none
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , defaultValue:none
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , defaultValue:none
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , defaultValue:none
    Color? surfaceTint,
  }) : super.light(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateCreateName = 'ColorScheme.light';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.light(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse('brightness', brightness);
    mateUse('primary', primary);
    mateUse('onPrimary', onPrimary);
    mateUse('primaryContainer', primaryContainer);
    mateUse('onPrimaryContainer', onPrimaryContainer);
    mateUse('secondary', secondary);
    mateUse('onSecondary', onSecondary);
    mateUse('secondaryContainer', secondaryContainer);
    mateUse('onSecondaryContainer', onSecondaryContainer);
    mateUse('tertiary', tertiary);
    mateUse('onTertiary', onTertiary);
    mateUse('tertiaryContainer', tertiaryContainer);
    mateUse('onTertiaryContainer', onTertiaryContainer);
    mateUse('error', error);
    mateUse('onError', onError);
    mateUse('errorContainer', errorContainer);
    mateUse('onErrorContainer', onErrorContainer);
    mateUse('background', background);
    mateUse('onBackground', onBackground);
    mateUse('surface', surface);
    mateUse('onSurface', onSurface);
    mateUse('surfaceVariant', surfaceVariant);
    mateUse('onSurfaceVariant', onSurfaceVariant);
    mateUse('outline', outline);
    mateUse('outlineVariant', outlineVariant);
    mateUse('shadow', shadow);
    mateUse('scrim', scrim);
    mateUse('inverseSurface', inverseSurface);
    mateUse('onInverseSurface', onInverseSurface);
    mateUse('inversePrimary', inversePrimary);
    mateUse('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.dark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffbb86fc), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffcf6679), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700B3), Color? secondaryVariant = const Color(0xff03dac6)})
  ColorScheme$Mate.dark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , defaultValue:unprocessed
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xffbb86fc)} , defaultValue:unprocessed
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , defaultValue:unprocessed
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , defaultValue:none
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , defaultValue:none
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , defaultValue:unprocessed
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , defaultValue:unprocessed
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , defaultValue:none
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , defaultValue:none
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , defaultValue:none
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , defaultValue:none
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , defaultValue:none
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , defaultValue:none
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffcf6679)} , defaultValue:unprocessed
    required Color error,

    /// optionalParameters: {Color onError = Colors.black} , defaultValue:unprocessed
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , defaultValue:none
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , defaultValue:none
    Color? onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , defaultValue:unprocessed
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.white} , defaultValue:unprocessed
    required Color onBackground,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , defaultValue:unprocessed
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.white} , defaultValue:unprocessed
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , defaultValue:none
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , defaultValue:none
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , defaultValue:none
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , defaultValue:none
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , defaultValue:none
    Color? shadow,

    /// optionalParameters: {Color? scrim} , defaultValue:none
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , defaultValue:none
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , defaultValue:none
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , defaultValue:none
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , defaultValue:none
    Color? surfaceTint,
  }) : super.dark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateCreateName = 'ColorScheme.dark';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.dark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse('brightness', brightness);
    mateUse('primary', primary);
    mateUse('onPrimary', onPrimary);
    mateUse('primaryContainer', primaryContainer);
    mateUse('onPrimaryContainer', onPrimaryContainer);
    mateUse('secondary', secondary);
    mateUse('onSecondary', onSecondary);
    mateUse('secondaryContainer', secondaryContainer);
    mateUse('onSecondaryContainer', onSecondaryContainer);
    mateUse('tertiary', tertiary);
    mateUse('onTertiary', onTertiary);
    mateUse('tertiaryContainer', tertiaryContainer);
    mateUse('onTertiaryContainer', onTertiaryContainer);
    mateUse('error', error);
    mateUse('onError', onError);
    mateUse('errorContainer', errorContainer);
    mateUse('onErrorContainer', onErrorContainer);
    mateUse('background', background);
    mateUse('onBackground', onBackground);
    mateUse('surface', surface);
    mateUse('onSurface', onSurface);
    mateUse('surfaceVariant', surfaceVariant);
    mateUse('onSurfaceVariant', onSurfaceVariant);
    mateUse('outline', outline);
    mateUse('outlineVariant', outlineVariant);
    mateUse('shadow', shadow);
    mateUse('scrim', scrim);
    mateUse('inverseSurface', inverseSurface);
    mateUse('onInverseSurface', onInverseSurface);
    mateUse('inversePrimary', inversePrimary);
    mateUse('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.highContrastLight({Brightness brightness = Brightness.light, Color primary = const Color(0xff0000ba), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff790000), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff000088), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.highContrastLight({
    /// optionalParameters: {Brightness brightness = Brightness.light} , defaultValue:unprocessed
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xff0000ba)} , defaultValue:unprocessed
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , defaultValue:unprocessed
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , defaultValue:none
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , defaultValue:none
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , defaultValue:unprocessed
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , defaultValue:unprocessed
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , defaultValue:none
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , defaultValue:none
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , defaultValue:none
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , defaultValue:none
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , defaultValue:none
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , defaultValue:none
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff790000)} , defaultValue:unprocessed
    required Color error,

    /// optionalParameters: {Color onError = Colors.white} , defaultValue:unprocessed
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , defaultValue:none
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , defaultValue:none
    Color? onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , defaultValue:unprocessed
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.black} , defaultValue:unprocessed
    required Color onBackground,

    /// optionalParameters: {Color surface = Colors.white} , defaultValue:unprocessed
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.black} , defaultValue:unprocessed
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , defaultValue:none
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , defaultValue:none
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , defaultValue:none
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , defaultValue:none
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , defaultValue:none
    Color? shadow,

    /// optionalParameters: {Color? scrim} , defaultValue:none
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , defaultValue:none
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , defaultValue:none
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , defaultValue:none
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , defaultValue:none
    Color? surfaceTint,
  }) : super.highContrastLight(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateCreateName = 'ColorScheme.highContrastLight';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.highContrastLight(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse('brightness', brightness);
    mateUse('primary', primary);
    mateUse('onPrimary', onPrimary);
    mateUse('primaryContainer', primaryContainer);
    mateUse('onPrimaryContainer', onPrimaryContainer);
    mateUse('secondary', secondary);
    mateUse('onSecondary', onSecondary);
    mateUse('secondaryContainer', secondaryContainer);
    mateUse('onSecondaryContainer', onSecondaryContainer);
    mateUse('tertiary', tertiary);
    mateUse('onTertiary', onTertiary);
    mateUse('tertiaryContainer', tertiaryContainer);
    mateUse('onTertiaryContainer', onTertiaryContainer);
    mateUse('error', error);
    mateUse('onError', onError);
    mateUse('errorContainer', errorContainer);
    mateUse('onErrorContainer', onErrorContainer);
    mateUse('background', background);
    mateUse('onBackground', onBackground);
    mateUse('surface', surface);
    mateUse('onSurface', onSurface);
    mateUse('surfaceVariant', surfaceVariant);
    mateUse('onSurfaceVariant', onSurfaceVariant);
    mateUse('outline', outline);
    mateUse('outlineVariant', outlineVariant);
    mateUse('shadow', shadow);
    mateUse('scrim', scrim);
    mateUse('inverseSurface', inverseSurface);
    mateUse('onInverseSurface', onInverseSurface);
    mateUse('inversePrimary', inversePrimary);
    mateUse('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.highContrastDark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffefb7ff), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff9b374d), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xffbe9eff), Color? secondaryVariant = const Color(0xff66fff9)})
  ColorScheme$Mate.highContrastDark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , defaultValue:unprocessed
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xffefb7ff)} , defaultValue:unprocessed
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , defaultValue:unprocessed
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , defaultValue:none
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , defaultValue:none
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , defaultValue:unprocessed
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , defaultValue:unprocessed
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , defaultValue:none
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , defaultValue:none
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , defaultValue:none
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , defaultValue:none
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , defaultValue:none
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , defaultValue:none
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff9b374d)} , defaultValue:unprocessed
    required Color error,

    /// optionalParameters: {Color onError = Colors.black} , defaultValue:unprocessed
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , defaultValue:none
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , defaultValue:none
    Color? onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , defaultValue:unprocessed
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.white} , defaultValue:unprocessed
    required Color onBackground,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , defaultValue:unprocessed
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.white} , defaultValue:unprocessed
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , defaultValue:none
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , defaultValue:none
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , defaultValue:none
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , defaultValue:none
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , defaultValue:none
    Color? shadow,

    /// optionalParameters: {Color? scrim} , defaultValue:none
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , defaultValue:none
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , defaultValue:none
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , defaultValue:none
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , defaultValue:none
    Color? surfaceTint,
  }) : super.highContrastDark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateCreateName = 'ColorScheme.highContrastDark';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.highContrastDark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    mateUse('brightness', brightness);
    mateUse('primary', primary);
    mateUse('onPrimary', onPrimary);
    mateUse('primaryContainer', primaryContainer);
    mateUse('onPrimaryContainer', onPrimaryContainer);
    mateUse('secondary', secondary);
    mateUse('onSecondary', onSecondary);
    mateUse('secondaryContainer', secondaryContainer);
    mateUse('onSecondaryContainer', onSecondaryContainer);
    mateUse('tertiary', tertiary);
    mateUse('onTertiary', onTertiary);
    mateUse('tertiaryContainer', tertiaryContainer);
    mateUse('onTertiaryContainer', onTertiaryContainer);
    mateUse('error', error);
    mateUse('onError', onError);
    mateUse('errorContainer', errorContainer);
    mateUse('onErrorContainer', onErrorContainer);
    mateUse('background', background);
    mateUse('onBackground', onBackground);
    mateUse('surface', surface);
    mateUse('onSurface', onSurface);
    mateUse('surfaceVariant', surfaceVariant);
    mateUse('onSurfaceVariant', onSurfaceVariant);
    mateUse('outline', outline);
    mateUse('outlineVariant', outlineVariant);
    mateUse('shadow', shadow);
    mateUse('scrim', scrim);
    mateUse('inverseSurface', inverseSurface);
    mateUse('onInverseSurface', onInverseSurface);
    mateUse('inversePrimary', inversePrimary);
    mateUse('surfaceTint', surfaceTint);
  }
}
