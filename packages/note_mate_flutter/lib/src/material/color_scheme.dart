// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/color_scheme.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;

/// class ColorScheme with Diagnosticable
class ColorScheme$Mate extends _i1.ColorScheme with _i2.Mate {
  /// ColorScheme ColorScheme({required Brightness brightness, required Color primary, required Color onPrimary, Color? primaryContainer, Color? onPrimaryContainer, required Color secondary, required Color onSecondary, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, required Color error, required Color onError, Color? errorContainer, Color? onErrorContainer, required Color background, required Color onBackground, required Color surface, required Color onSurface, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant, Color? secondaryVariant})
  ColorScheme$Mate({
    /// optionalParameters: {required Brightness brightness} , default:none
    required super.brightness,

    /// optionalParameters: {required Color primary} , default:none
    required super.primary,

    /// optionalParameters: {required Color onPrimary} , default:none
    required super.onPrimary,

    /// optionalParameters: {Color? primaryContainer} , default:none
    super.primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    super.onPrimaryContainer,

    /// optionalParameters: {required Color secondary} , default:none
    required super.secondary,

    /// optionalParameters: {required Color onSecondary} , default:none
    required super.onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    super.secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    super.onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    super.tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    super.onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    super.tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    super.onTertiaryContainer,

    /// optionalParameters: {required Color error} , default:none
    required super.error,

    /// optionalParameters: {required Color onError} , default:none
    required super.onError,

    /// optionalParameters: {Color? errorContainer} , default:none
    super.errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    super.onErrorContainer,

    /// optionalParameters: {required Color background} , default:none
    required super.background,

    /// optionalParameters: {required Color onBackground} , default:none
    required super.onBackground,

    /// optionalParameters: {required Color surface} , default:none
    required super.surface,

    /// optionalParameters: {required Color onSurface} , default:none
    required super.onSurface,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    super.surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    super.onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    super.outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    super.outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    super.shadow,

    /// optionalParameters: {Color? scrim} , default:none
    super.scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    super.inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    super.onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    super.inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    super.surfaceTint,
  })  : mateParams = {
          'brightness': _i2.BuilderArg<_i3.Brightness>(
            name: 'brightness',
            init: brightness,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<_i3.Color>(
            name: 'primary',
            init: primary,
            isNamed: true,
          ),
          'onPrimary': _i2.BuilderArg<_i3.Color>(
            name: 'onPrimary',
            init: onPrimary,
            isNamed: true,
          ),
          'primaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'primaryContainer',
            init: primaryContainer,
            isNamed: true,
          ),
          'onPrimaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onPrimaryContainer',
            init: onPrimaryContainer,
            isNamed: true,
          ),
          'secondary': _i2.BuilderArg<_i3.Color>(
            name: 'secondary',
            init: secondary,
            isNamed: true,
          ),
          'onSecondary': _i2.BuilderArg<_i3.Color>(
            name: 'onSecondary',
            init: onSecondary,
            isNamed: true,
          ),
          'secondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'secondaryContainer',
            init: secondaryContainer,
            isNamed: true,
          ),
          'onSecondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onSecondaryContainer',
            init: onSecondaryContainer,
            isNamed: true,
          ),
          'tertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiary',
            init: tertiary,
            isNamed: true,
          ),
          'onTertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiary',
            init: onTertiary,
            isNamed: true,
          ),
          'tertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiaryContainer',
            init: tertiaryContainer,
            isNamed: true,
          ),
          'onTertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiaryContainer',
            init: onTertiaryContainer,
            isNamed: true,
          ),
          'error': _i2.BuilderArg<_i3.Color>(
            name: 'error',
            init: error,
            isNamed: true,
          ),
          'onError': _i2.BuilderArg<_i3.Color>(
            name: 'onError',
            init: onError,
            isNamed: true,
          ),
          'errorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'errorContainer',
            init: errorContainer,
            isNamed: true,
          ),
          'onErrorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onErrorContainer',
            init: onErrorContainer,
            isNamed: true,
          ),
          'background': _i2.BuilderArg<_i3.Color>(
            name: 'background',
            init: background,
            isNamed: true,
          ),
          'onBackground': _i2.BuilderArg<_i3.Color>(
            name: 'onBackground',
            init: onBackground,
            isNamed: true,
          ),
          'surface': _i2.BuilderArg<_i3.Color>(
            name: 'surface',
            init: surface,
            isNamed: true,
          ),
          'onSurface': _i2.BuilderArg<_i3.Color>(
            name: 'onSurface',
            init: onSurface,
            isNamed: true,
          ),
          'surfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceVariant',
            init: surfaceVariant,
            isNamed: true,
          ),
          'onSurfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'onSurfaceVariant',
            init: onSurfaceVariant,
            isNamed: true,
          ),
          'outline': _i2.BuilderArg<_i3.Color?>(
            name: 'outline',
            init: outline,
            isNamed: true,
          ),
          'outlineVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'outlineVariant',
            init: outlineVariant,
            isNamed: true,
          ),
          'shadow': _i2.BuilderArg<_i3.Color?>(
            name: 'shadow',
            init: shadow,
            isNamed: true,
          ),
          'scrim': _i2.BuilderArg<_i3.Color?>(
            name: 'scrim',
            init: scrim,
            isNamed: true,
          ),
          'inverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'inverseSurface',
            init: inverseSurface,
            isNamed: true,
          ),
          'onInverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'onInverseSurface',
            init: onInverseSurface,
            isNamed: true,
          ),
          'inversePrimary': _i2.BuilderArg<_i3.Color?>(
            name: 'inversePrimary',
            init: inversePrimary,
            isNamed: true,
          ),
          'surfaceTint': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceTint',
            init: surfaceTint,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ColorScheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
  }

  /// ColorScheme ColorScheme.light({Brightness brightness = Brightness.light, Color primary = const Color(0xff6200ee), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffb00020), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700b3), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.light({
    /// optionalParameters: {Brightness brightness = Brightness.light} , default:unprocessed=PrefixedIdentifierImpl
    super.brightness,

    /// optionalParameters: {Color primary = const Color(0xff6200ee)} , default:unprocessed=InstanceCreationExpressionImpl
    super.primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onPrimary,

    /// optionalParameters: {Color? primaryContainer} , default:none
    super.primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    super.onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , default:unprocessed=InstanceCreationExpressionImpl
    super.secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    super.secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    super.onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    super.tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    super.onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    super.tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    super.onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffb00020)} , default:unprocessed=InstanceCreationExpressionImpl
    super.error,

    /// optionalParameters: {Color onError = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onError,

    /// optionalParameters: {Color? errorContainer} , default:none
    super.errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    super.onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.background,

    /// optionalParameters: {Color onBackground = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onBackground,

    /// optionalParameters: {Color surface = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.surface,

    /// optionalParameters: {Color onSurface = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onSurface,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    super.surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    super.onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    super.outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    super.outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    super.shadow,

    /// optionalParameters: {Color? scrim} , default:none
    super.scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    super.inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    super.onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    super.inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    super.surfaceTint,
  })  : mateParams = {
          'brightness': _i2.BuilderArg<_i3.Brightness>(
            name: 'brightness',
            init: brightness,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<_i3.Color>(
            name: 'primary',
            init: primary,
            isNamed: true,
          ),
          'onPrimary': _i2.BuilderArg<_i3.Color>(
            name: 'onPrimary',
            init: onPrimary,
            isNamed: true,
          ),
          'primaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'primaryContainer',
            init: primaryContainer,
            isNamed: true,
          ),
          'onPrimaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onPrimaryContainer',
            init: onPrimaryContainer,
            isNamed: true,
          ),
          'secondary': _i2.BuilderArg<_i3.Color>(
            name: 'secondary',
            init: secondary,
            isNamed: true,
          ),
          'onSecondary': _i2.BuilderArg<_i3.Color>(
            name: 'onSecondary',
            init: onSecondary,
            isNamed: true,
          ),
          'secondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'secondaryContainer',
            init: secondaryContainer,
            isNamed: true,
          ),
          'onSecondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onSecondaryContainer',
            init: onSecondaryContainer,
            isNamed: true,
          ),
          'tertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiary',
            init: tertiary,
            isNamed: true,
          ),
          'onTertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiary',
            init: onTertiary,
            isNamed: true,
          ),
          'tertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiaryContainer',
            init: tertiaryContainer,
            isNamed: true,
          ),
          'onTertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiaryContainer',
            init: onTertiaryContainer,
            isNamed: true,
          ),
          'error': _i2.BuilderArg<_i3.Color>(
            name: 'error',
            init: error,
            isNamed: true,
          ),
          'onError': _i2.BuilderArg<_i3.Color>(
            name: 'onError',
            init: onError,
            isNamed: true,
          ),
          'errorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'errorContainer',
            init: errorContainer,
            isNamed: true,
          ),
          'onErrorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onErrorContainer',
            init: onErrorContainer,
            isNamed: true,
          ),
          'background': _i2.BuilderArg<_i3.Color>(
            name: 'background',
            init: background,
            isNamed: true,
          ),
          'onBackground': _i2.BuilderArg<_i3.Color>(
            name: 'onBackground',
            init: onBackground,
            isNamed: true,
          ),
          'surface': _i2.BuilderArg<_i3.Color>(
            name: 'surface',
            init: surface,
            isNamed: true,
          ),
          'onSurface': _i2.BuilderArg<_i3.Color>(
            name: 'onSurface',
            init: onSurface,
            isNamed: true,
          ),
          'surfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceVariant',
            init: surfaceVariant,
            isNamed: true,
          ),
          'onSurfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'onSurfaceVariant',
            init: onSurfaceVariant,
            isNamed: true,
          ),
          'outline': _i2.BuilderArg<_i3.Color?>(
            name: 'outline',
            init: outline,
            isNamed: true,
          ),
          'outlineVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'outlineVariant',
            init: outlineVariant,
            isNamed: true,
          ),
          'shadow': _i2.BuilderArg<_i3.Color?>(
            name: 'shadow',
            init: shadow,
            isNamed: true,
          ),
          'scrim': _i2.BuilderArg<_i3.Color?>(
            name: 'scrim',
            init: scrim,
            isNamed: true,
          ),
          'inverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'inverseSurface',
            init: inverseSurface,
            isNamed: true,
          ),
          'onInverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'onInverseSurface',
            init: onInverseSurface,
            isNamed: true,
          ),
          'inversePrimary': _i2.BuilderArg<_i3.Color?>(
            name: 'inversePrimary',
            init: inversePrimary,
            isNamed: true,
          ),
          'surfaceTint': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceTint',
            init: surfaceTint,
            isNamed: true,
          ),
        },
        super.light() {
    mateBuilderName = 'ColorScheme.light';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.light(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
  }

  /// ColorScheme ColorScheme.dark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffbb86fc), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffcf6679), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700B3), Color? secondaryVariant = const Color(0xff03dac6)})
  ColorScheme$Mate.dark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , default:unprocessed=PrefixedIdentifierImpl
    super.brightness,

    /// optionalParameters: {Color primary = const Color(0xffbb86fc)} , default:unprocessed=InstanceCreationExpressionImpl
    super.primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onPrimary,

    /// optionalParameters: {Color? primaryContainer} , default:none
    super.primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    super.onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , default:unprocessed=InstanceCreationExpressionImpl
    super.secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    super.secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    super.onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    super.tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    super.onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    super.tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    super.onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffcf6679)} , default:unprocessed=InstanceCreationExpressionImpl
    super.error,

    /// optionalParameters: {Color onError = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onError,

    /// optionalParameters: {Color? errorContainer} , default:none
    super.errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    super.onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    super.background,

    /// optionalParameters: {Color onBackground = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onBackground,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    super.surface,

    /// optionalParameters: {Color onSurface = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onSurface,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    super.surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    super.onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    super.outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    super.outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    super.shadow,

    /// optionalParameters: {Color? scrim} , default:none
    super.scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    super.inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    super.onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    super.inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    super.surfaceTint,
  })  : mateParams = {
          'brightness': _i2.BuilderArg<_i3.Brightness>(
            name: 'brightness',
            init: brightness,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<_i3.Color>(
            name: 'primary',
            init: primary,
            isNamed: true,
          ),
          'onPrimary': _i2.BuilderArg<_i3.Color>(
            name: 'onPrimary',
            init: onPrimary,
            isNamed: true,
          ),
          'primaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'primaryContainer',
            init: primaryContainer,
            isNamed: true,
          ),
          'onPrimaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onPrimaryContainer',
            init: onPrimaryContainer,
            isNamed: true,
          ),
          'secondary': _i2.BuilderArg<_i3.Color>(
            name: 'secondary',
            init: secondary,
            isNamed: true,
          ),
          'onSecondary': _i2.BuilderArg<_i3.Color>(
            name: 'onSecondary',
            init: onSecondary,
            isNamed: true,
          ),
          'secondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'secondaryContainer',
            init: secondaryContainer,
            isNamed: true,
          ),
          'onSecondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onSecondaryContainer',
            init: onSecondaryContainer,
            isNamed: true,
          ),
          'tertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiary',
            init: tertiary,
            isNamed: true,
          ),
          'onTertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiary',
            init: onTertiary,
            isNamed: true,
          ),
          'tertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiaryContainer',
            init: tertiaryContainer,
            isNamed: true,
          ),
          'onTertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiaryContainer',
            init: onTertiaryContainer,
            isNamed: true,
          ),
          'error': _i2.BuilderArg<_i3.Color>(
            name: 'error',
            init: error,
            isNamed: true,
          ),
          'onError': _i2.BuilderArg<_i3.Color>(
            name: 'onError',
            init: onError,
            isNamed: true,
          ),
          'errorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'errorContainer',
            init: errorContainer,
            isNamed: true,
          ),
          'onErrorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onErrorContainer',
            init: onErrorContainer,
            isNamed: true,
          ),
          'background': _i2.BuilderArg<_i3.Color>(
            name: 'background',
            init: background,
            isNamed: true,
          ),
          'onBackground': _i2.BuilderArg<_i3.Color>(
            name: 'onBackground',
            init: onBackground,
            isNamed: true,
          ),
          'surface': _i2.BuilderArg<_i3.Color>(
            name: 'surface',
            init: surface,
            isNamed: true,
          ),
          'onSurface': _i2.BuilderArg<_i3.Color>(
            name: 'onSurface',
            init: onSurface,
            isNamed: true,
          ),
          'surfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceVariant',
            init: surfaceVariant,
            isNamed: true,
          ),
          'onSurfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'onSurfaceVariant',
            init: onSurfaceVariant,
            isNamed: true,
          ),
          'outline': _i2.BuilderArg<_i3.Color?>(
            name: 'outline',
            init: outline,
            isNamed: true,
          ),
          'outlineVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'outlineVariant',
            init: outlineVariant,
            isNamed: true,
          ),
          'shadow': _i2.BuilderArg<_i3.Color?>(
            name: 'shadow',
            init: shadow,
            isNamed: true,
          ),
          'scrim': _i2.BuilderArg<_i3.Color?>(
            name: 'scrim',
            init: scrim,
            isNamed: true,
          ),
          'inverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'inverseSurface',
            init: inverseSurface,
            isNamed: true,
          ),
          'onInverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'onInverseSurface',
            init: onInverseSurface,
            isNamed: true,
          ),
          'inversePrimary': _i2.BuilderArg<_i3.Color?>(
            name: 'inversePrimary',
            init: inversePrimary,
            isNamed: true,
          ),
          'surfaceTint': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceTint',
            init: surfaceTint,
            isNamed: true,
          ),
        },
        super.dark() {
    mateBuilderName = 'ColorScheme.dark';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.dark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
  }

  /// ColorScheme ColorScheme.highContrastLight({Brightness brightness = Brightness.light, Color primary = const Color(0xff0000ba), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff790000), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff000088), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.highContrastLight({
    /// optionalParameters: {Brightness brightness = Brightness.light} , default:unprocessed=PrefixedIdentifierImpl
    super.brightness,

    /// optionalParameters: {Color primary = const Color(0xff0000ba)} , default:unprocessed=InstanceCreationExpressionImpl
    super.primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onPrimary,

    /// optionalParameters: {Color? primaryContainer} , default:none
    super.primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    super.onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , default:unprocessed=InstanceCreationExpressionImpl
    super.secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    super.secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    super.onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    super.tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    super.onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    super.tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    super.onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff790000)} , default:unprocessed=InstanceCreationExpressionImpl
    super.error,

    /// optionalParameters: {Color onError = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onError,

    /// optionalParameters: {Color? errorContainer} , default:none
    super.errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    super.onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.background,

    /// optionalParameters: {Color onBackground = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onBackground,

    /// optionalParameters: {Color surface = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.surface,

    /// optionalParameters: {Color onSurface = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onSurface,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    super.surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    super.onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    super.outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    super.outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    super.shadow,

    /// optionalParameters: {Color? scrim} , default:none
    super.scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    super.inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    super.onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    super.inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    super.surfaceTint,
  })  : mateParams = {
          'brightness': _i2.BuilderArg<_i3.Brightness>(
            name: 'brightness',
            init: brightness,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<_i3.Color>(
            name: 'primary',
            init: primary,
            isNamed: true,
          ),
          'onPrimary': _i2.BuilderArg<_i3.Color>(
            name: 'onPrimary',
            init: onPrimary,
            isNamed: true,
          ),
          'primaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'primaryContainer',
            init: primaryContainer,
            isNamed: true,
          ),
          'onPrimaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onPrimaryContainer',
            init: onPrimaryContainer,
            isNamed: true,
          ),
          'secondary': _i2.BuilderArg<_i3.Color>(
            name: 'secondary',
            init: secondary,
            isNamed: true,
          ),
          'onSecondary': _i2.BuilderArg<_i3.Color>(
            name: 'onSecondary',
            init: onSecondary,
            isNamed: true,
          ),
          'secondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'secondaryContainer',
            init: secondaryContainer,
            isNamed: true,
          ),
          'onSecondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onSecondaryContainer',
            init: onSecondaryContainer,
            isNamed: true,
          ),
          'tertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiary',
            init: tertiary,
            isNamed: true,
          ),
          'onTertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiary',
            init: onTertiary,
            isNamed: true,
          ),
          'tertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiaryContainer',
            init: tertiaryContainer,
            isNamed: true,
          ),
          'onTertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiaryContainer',
            init: onTertiaryContainer,
            isNamed: true,
          ),
          'error': _i2.BuilderArg<_i3.Color>(
            name: 'error',
            init: error,
            isNamed: true,
          ),
          'onError': _i2.BuilderArg<_i3.Color>(
            name: 'onError',
            init: onError,
            isNamed: true,
          ),
          'errorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'errorContainer',
            init: errorContainer,
            isNamed: true,
          ),
          'onErrorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onErrorContainer',
            init: onErrorContainer,
            isNamed: true,
          ),
          'background': _i2.BuilderArg<_i3.Color>(
            name: 'background',
            init: background,
            isNamed: true,
          ),
          'onBackground': _i2.BuilderArg<_i3.Color>(
            name: 'onBackground',
            init: onBackground,
            isNamed: true,
          ),
          'surface': _i2.BuilderArg<_i3.Color>(
            name: 'surface',
            init: surface,
            isNamed: true,
          ),
          'onSurface': _i2.BuilderArg<_i3.Color>(
            name: 'onSurface',
            init: onSurface,
            isNamed: true,
          ),
          'surfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceVariant',
            init: surfaceVariant,
            isNamed: true,
          ),
          'onSurfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'onSurfaceVariant',
            init: onSurfaceVariant,
            isNamed: true,
          ),
          'outline': _i2.BuilderArg<_i3.Color?>(
            name: 'outline',
            init: outline,
            isNamed: true,
          ),
          'outlineVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'outlineVariant',
            init: outlineVariant,
            isNamed: true,
          ),
          'shadow': _i2.BuilderArg<_i3.Color?>(
            name: 'shadow',
            init: shadow,
            isNamed: true,
          ),
          'scrim': _i2.BuilderArg<_i3.Color?>(
            name: 'scrim',
            init: scrim,
            isNamed: true,
          ),
          'inverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'inverseSurface',
            init: inverseSurface,
            isNamed: true,
          ),
          'onInverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'onInverseSurface',
            init: onInverseSurface,
            isNamed: true,
          ),
          'inversePrimary': _i2.BuilderArg<_i3.Color?>(
            name: 'inversePrimary',
            init: inversePrimary,
            isNamed: true,
          ),
          'surfaceTint': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceTint',
            init: surfaceTint,
            isNamed: true,
          ),
        },
        super.highContrastLight() {
    mateBuilderName = 'ColorScheme.highContrastLight';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.highContrastLight(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
  }

  /// ColorScheme ColorScheme.highContrastDark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffefb7ff), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff9b374d), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xffbe9eff), Color? secondaryVariant = const Color(0xff66fff9)})
  ColorScheme$Mate.highContrastDark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , default:unprocessed=PrefixedIdentifierImpl
    super.brightness,

    /// optionalParameters: {Color primary = const Color(0xffefb7ff)} , default:unprocessed=InstanceCreationExpressionImpl
    super.primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onPrimary,

    /// optionalParameters: {Color? primaryContainer} , default:none
    super.primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , default:none
    super.onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , default:unprocessed=InstanceCreationExpressionImpl
    super.secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , default:none
    super.secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , default:none
    super.onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , default:none
    super.tertiary,

    /// optionalParameters: {Color? onTertiary} , default:none
    super.onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , default:none
    super.tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , default:none
    super.onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff9b374d)} , default:unprocessed=InstanceCreationExpressionImpl
    super.error,

    /// optionalParameters: {Color onError = Colors.black} , default:unprocessed=PrefixedIdentifierImpl
    super.onError,

    /// optionalParameters: {Color? errorContainer} , default:none
    super.errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , default:none
    super.onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    super.background,

    /// optionalParameters: {Color onBackground = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onBackground,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , default:unprocessed=InstanceCreationExpressionImpl
    super.surface,

    /// optionalParameters: {Color onSurface = Colors.white} , default:unprocessed=PrefixedIdentifierImpl
    super.onSurface,

    /// optionalParameters: {Color? surfaceVariant} , default:none
    super.surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , default:none
    super.onSurfaceVariant,

    /// optionalParameters: {Color? outline} , default:none
    super.outline,

    /// optionalParameters: {Color? outlineVariant} , default:none
    super.outlineVariant,

    /// optionalParameters: {Color? shadow} , default:none
    super.shadow,

    /// optionalParameters: {Color? scrim} , default:none
    super.scrim,

    /// optionalParameters: {Color? inverseSurface} , default:none
    super.inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , default:none
    super.onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , default:none
    super.inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , default:none
    super.surfaceTint,
  })  : mateParams = {
          'brightness': _i2.BuilderArg<_i3.Brightness>(
            name: 'brightness',
            init: brightness,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<_i3.Color>(
            name: 'primary',
            init: primary,
            isNamed: true,
          ),
          'onPrimary': _i2.BuilderArg<_i3.Color>(
            name: 'onPrimary',
            init: onPrimary,
            isNamed: true,
          ),
          'primaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'primaryContainer',
            init: primaryContainer,
            isNamed: true,
          ),
          'onPrimaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onPrimaryContainer',
            init: onPrimaryContainer,
            isNamed: true,
          ),
          'secondary': _i2.BuilderArg<_i3.Color>(
            name: 'secondary',
            init: secondary,
            isNamed: true,
          ),
          'onSecondary': _i2.BuilderArg<_i3.Color>(
            name: 'onSecondary',
            init: onSecondary,
            isNamed: true,
          ),
          'secondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'secondaryContainer',
            init: secondaryContainer,
            isNamed: true,
          ),
          'onSecondaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onSecondaryContainer',
            init: onSecondaryContainer,
            isNamed: true,
          ),
          'tertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiary',
            init: tertiary,
            isNamed: true,
          ),
          'onTertiary': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiary',
            init: onTertiary,
            isNamed: true,
          ),
          'tertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'tertiaryContainer',
            init: tertiaryContainer,
            isNamed: true,
          ),
          'onTertiaryContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onTertiaryContainer',
            init: onTertiaryContainer,
            isNamed: true,
          ),
          'error': _i2.BuilderArg<_i3.Color>(
            name: 'error',
            init: error,
            isNamed: true,
          ),
          'onError': _i2.BuilderArg<_i3.Color>(
            name: 'onError',
            init: onError,
            isNamed: true,
          ),
          'errorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'errorContainer',
            init: errorContainer,
            isNamed: true,
          ),
          'onErrorContainer': _i2.BuilderArg<_i3.Color?>(
            name: 'onErrorContainer',
            init: onErrorContainer,
            isNamed: true,
          ),
          'background': _i2.BuilderArg<_i3.Color>(
            name: 'background',
            init: background,
            isNamed: true,
          ),
          'onBackground': _i2.BuilderArg<_i3.Color>(
            name: 'onBackground',
            init: onBackground,
            isNamed: true,
          ),
          'surface': _i2.BuilderArg<_i3.Color>(
            name: 'surface',
            init: surface,
            isNamed: true,
          ),
          'onSurface': _i2.BuilderArg<_i3.Color>(
            name: 'onSurface',
            init: onSurface,
            isNamed: true,
          ),
          'surfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceVariant',
            init: surfaceVariant,
            isNamed: true,
          ),
          'onSurfaceVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'onSurfaceVariant',
            init: onSurfaceVariant,
            isNamed: true,
          ),
          'outline': _i2.BuilderArg<_i3.Color?>(
            name: 'outline',
            init: outline,
            isNamed: true,
          ),
          'outlineVariant': _i2.BuilderArg<_i3.Color?>(
            name: 'outlineVariant',
            init: outlineVariant,
            isNamed: true,
          ),
          'shadow': _i2.BuilderArg<_i3.Color?>(
            name: 'shadow',
            init: shadow,
            isNamed: true,
          ),
          'scrim': _i2.BuilderArg<_i3.Color?>(
            name: 'scrim',
            init: scrim,
            isNamed: true,
          ),
          'inverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'inverseSurface',
            init: inverseSurface,
            isNamed: true,
          ),
          'onInverseSurface': _i2.BuilderArg<_i3.Color?>(
            name: 'onInverseSurface',
            init: onInverseSurface,
            isNamed: true,
          ),
          'inversePrimary': _i2.BuilderArg<_i3.Color?>(
            name: 'inversePrimary',
            init: inversePrimary,
            isNamed: true,
          ),
          'surfaceTint': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceTint',
            init: surfaceTint,
            isNamed: true,
          ),
        },
        super.highContrastDark() {
    mateBuilderName = 'ColorScheme.highContrastDark';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ColorScheme$Mate.highContrastDark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
