// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/color_scheme.dart';
import 'package:note/mate.dart';
import 'dart:ui';

/// class ColorScheme with Diagnosticable
class ColorScheme$Mate extends ColorScheme with Mate {
  /// ColorScheme ColorScheme({required Brightness brightness, required Color primary, required Color onPrimary, Color? primaryContainer, Color? onPrimaryContainer, required Color secondary, required Color onSecondary, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, required Color error, required Color onError, Color? errorContainer, Color? onErrorContainer, required Color background, required Color onBackground, required Color surface, required Color onSurface, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant, Color? secondaryVariant})
  ColorScheme$Mate({
    /// optionalParameters: {required Brightness brightness} , hasDefaultValue:false, defaultValueCode:null
    required Brightness brightness,

    /// optionalParameters: {required Color primary} , hasDefaultValue:false, defaultValueCode:null
    required Color primary,

    /// optionalParameters: {required Color onPrimary} , hasDefaultValue:false, defaultValueCode:null
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onPrimaryContainer,

    /// optionalParameters: {required Color secondary} , hasDefaultValue:false, defaultValueCode:null
    required Color secondary,

    /// optionalParameters: {required Color onSecondary} , hasDefaultValue:false, defaultValueCode:null
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiaryContainer,

    /// optionalParameters: {required Color error} , hasDefaultValue:false, defaultValueCode:null
    required Color error,

    /// optionalParameters: {required Color onError} , hasDefaultValue:false, defaultValueCode:null
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onErrorContainer,

    /// optionalParameters: {required Color background} , hasDefaultValue:false, defaultValueCode:null
    required Color background,

    /// optionalParameters: {required Color onBackground} , hasDefaultValue:false, defaultValueCode:null
    required Color onBackground,

    /// optionalParameters: {required Color surface} , hasDefaultValue:false, defaultValueCode:null
    required Color surface,

    /// optionalParameters: {required Color onSurface} , hasDefaultValue:false, defaultValueCode:null
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , hasDefaultValue:false, defaultValueCode:null
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , hasDefaultValue:false, defaultValueCode:null
    Color? shadow,

    /// optionalParameters: {Color? scrim} , hasDefaultValue:false, defaultValueCode:null
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , hasDefaultValue:false, defaultValueCode:null
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTint,
  }) : super(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilder = (p) => ColorScheme$Mate(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    matePut('brightness', brightness);
    matePut('primary', primary);
    matePut('onPrimary', onPrimary);
    matePut('primaryContainer', primaryContainer);
    matePut('onPrimaryContainer', onPrimaryContainer);
    matePut('secondary', secondary);
    matePut('onSecondary', onSecondary);
    matePut('secondaryContainer', secondaryContainer);
    matePut('onSecondaryContainer', onSecondaryContainer);
    matePut('tertiary', tertiary);
    matePut('onTertiary', onTertiary);
    matePut('tertiaryContainer', tertiaryContainer);
    matePut('onTertiaryContainer', onTertiaryContainer);
    matePut('error', error);
    matePut('onError', onError);
    matePut('errorContainer', errorContainer);
    matePut('onErrorContainer', onErrorContainer);
    matePut('background', background);
    matePut('onBackground', onBackground);
    matePut('surface', surface);
    matePut('onSurface', onSurface);
    matePut('surfaceVariant', surfaceVariant);
    matePut('onSurfaceVariant', onSurfaceVariant);
    matePut('outline', outline);
    matePut('outlineVariant', outlineVariant);
    matePut('shadow', shadow);
    matePut('scrim', scrim);
    matePut('inverseSurface', inverseSurface);
    matePut('onInverseSurface', onInverseSurface);
    matePut('inversePrimary', inversePrimary);
    matePut('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.light({Brightness brightness = Brightness.light, Color primary = const Color(0xff6200ee), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffb00020), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700b3), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.light({
    /// optionalParameters: {Brightness brightness = Brightness.light} , hasDefaultValue:true, defaultValueCode:Brightness.light
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xff6200ee)} , hasDefaultValue:true, defaultValueCode:const Color(0xff6200ee)
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , hasDefaultValue:true, defaultValueCode:const Color(0xff03dac6)
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffb00020)} , hasDefaultValue:true, defaultValueCode:const Color(0xffb00020)
    required Color error,

    /// optionalParameters: {Color onError = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onBackground,

    /// optionalParameters: {Color surface = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , hasDefaultValue:false, defaultValueCode:null
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , hasDefaultValue:false, defaultValueCode:null
    Color? shadow,

    /// optionalParameters: {Color? scrim} , hasDefaultValue:false, defaultValueCode:null
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , hasDefaultValue:false, defaultValueCode:null
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTint,
  }) : super.light(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilder = (p) => ColorScheme$Mate.light(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    matePut('brightness', brightness);
    matePut('primary', primary);
    matePut('onPrimary', onPrimary);
    matePut('primaryContainer', primaryContainer);
    matePut('onPrimaryContainer', onPrimaryContainer);
    matePut('secondary', secondary);
    matePut('onSecondary', onSecondary);
    matePut('secondaryContainer', secondaryContainer);
    matePut('onSecondaryContainer', onSecondaryContainer);
    matePut('tertiary', tertiary);
    matePut('onTertiary', onTertiary);
    matePut('tertiaryContainer', tertiaryContainer);
    matePut('onTertiaryContainer', onTertiaryContainer);
    matePut('error', error);
    matePut('onError', onError);
    matePut('errorContainer', errorContainer);
    matePut('onErrorContainer', onErrorContainer);
    matePut('background', background);
    matePut('onBackground', onBackground);
    matePut('surface', surface);
    matePut('onSurface', onSurface);
    matePut('surfaceVariant', surfaceVariant);
    matePut('onSurfaceVariant', onSurfaceVariant);
    matePut('outline', outline);
    matePut('outlineVariant', outlineVariant);
    matePut('shadow', shadow);
    matePut('scrim', scrim);
    matePut('inverseSurface', inverseSurface);
    matePut('onInverseSurface', onInverseSurface);
    matePut('inversePrimary', inversePrimary);
    matePut('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.dark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffbb86fc), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff03dac6), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xffcf6679), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff3700B3), Color? secondaryVariant = const Color(0xff03dac6)})
  ColorScheme$Mate.dark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , hasDefaultValue:true, defaultValueCode:Brightness.dark
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xffbb86fc)} , hasDefaultValue:true, defaultValueCode:const Color(0xffbb86fc)
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff03dac6)} , hasDefaultValue:true, defaultValueCode:const Color(0xff03dac6)
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xffcf6679)} , hasDefaultValue:true, defaultValueCode:const Color(0xffcf6679)
    required Color error,

    /// optionalParameters: {Color onError = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , hasDefaultValue:true, defaultValueCode:const Color(0xff121212)
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onBackground,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , hasDefaultValue:true, defaultValueCode:const Color(0xff121212)
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , hasDefaultValue:false, defaultValueCode:null
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , hasDefaultValue:false, defaultValueCode:null
    Color? shadow,

    /// optionalParameters: {Color? scrim} , hasDefaultValue:false, defaultValueCode:null
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , hasDefaultValue:false, defaultValueCode:null
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTint,
  }) : super.dark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilder = (p) => ColorScheme$Mate.dark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    matePut('brightness', brightness);
    matePut('primary', primary);
    matePut('onPrimary', onPrimary);
    matePut('primaryContainer', primaryContainer);
    matePut('onPrimaryContainer', onPrimaryContainer);
    matePut('secondary', secondary);
    matePut('onSecondary', onSecondary);
    matePut('secondaryContainer', secondaryContainer);
    matePut('onSecondaryContainer', onSecondaryContainer);
    matePut('tertiary', tertiary);
    matePut('onTertiary', onTertiary);
    matePut('tertiaryContainer', tertiaryContainer);
    matePut('onTertiaryContainer', onTertiaryContainer);
    matePut('error', error);
    matePut('onError', onError);
    matePut('errorContainer', errorContainer);
    matePut('onErrorContainer', onErrorContainer);
    matePut('background', background);
    matePut('onBackground', onBackground);
    matePut('surface', surface);
    matePut('onSurface', onSurface);
    matePut('surfaceVariant', surfaceVariant);
    matePut('onSurfaceVariant', onSurfaceVariant);
    matePut('outline', outline);
    matePut('outlineVariant', outlineVariant);
    matePut('shadow', shadow);
    matePut('scrim', scrim);
    matePut('inverseSurface', inverseSurface);
    matePut('onInverseSurface', onInverseSurface);
    matePut('inversePrimary', inversePrimary);
    matePut('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.highContrastLight({Brightness brightness = Brightness.light, Color primary = const Color(0xff0000ba), Color onPrimary = Colors.white, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff790000), Color onError = Colors.white, Color? errorContainer, Color? onErrorContainer, Color background = Colors.white, Color onBackground = Colors.black, Color surface = Colors.white, Color onSurface = Colors.black, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xff000088), Color? secondaryVariant = const Color(0xff018786)})
  ColorScheme$Mate.highContrastLight({
    /// optionalParameters: {Brightness brightness = Brightness.light} , hasDefaultValue:true, defaultValueCode:Brightness.light
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xff0000ba)} , hasDefaultValue:true, defaultValueCode:const Color(0xff0000ba)
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , hasDefaultValue:true, defaultValueCode:const Color(0xff66fff9)
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff790000)} , hasDefaultValue:true, defaultValueCode:const Color(0xff790000)
    required Color error,

    /// optionalParameters: {Color onError = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onErrorContainer,

    /// optionalParameters: {Color background = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onBackground,

    /// optionalParameters: {Color surface = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , hasDefaultValue:false, defaultValueCode:null
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , hasDefaultValue:false, defaultValueCode:null
    Color? shadow,

    /// optionalParameters: {Color? scrim} , hasDefaultValue:false, defaultValueCode:null
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , hasDefaultValue:false, defaultValueCode:null
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTint,
  }) : super.highContrastLight(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilder = (p) => ColorScheme$Mate.highContrastLight(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    matePut('brightness', brightness);
    matePut('primary', primary);
    matePut('onPrimary', onPrimary);
    matePut('primaryContainer', primaryContainer);
    matePut('onPrimaryContainer', onPrimaryContainer);
    matePut('secondary', secondary);
    matePut('onSecondary', onSecondary);
    matePut('secondaryContainer', secondaryContainer);
    matePut('onSecondaryContainer', onSecondaryContainer);
    matePut('tertiary', tertiary);
    matePut('onTertiary', onTertiary);
    matePut('tertiaryContainer', tertiaryContainer);
    matePut('onTertiaryContainer', onTertiaryContainer);
    matePut('error', error);
    matePut('onError', onError);
    matePut('errorContainer', errorContainer);
    matePut('onErrorContainer', onErrorContainer);
    matePut('background', background);
    matePut('onBackground', onBackground);
    matePut('surface', surface);
    matePut('onSurface', onSurface);
    matePut('surfaceVariant', surfaceVariant);
    matePut('onSurfaceVariant', onSurfaceVariant);
    matePut('outline', outline);
    matePut('outlineVariant', outlineVariant);
    matePut('shadow', shadow);
    matePut('scrim', scrim);
    matePut('inverseSurface', inverseSurface);
    matePut('onInverseSurface', onInverseSurface);
    matePut('inversePrimary', inversePrimary);
    matePut('surfaceTint', surfaceTint);
  }

  /// ColorScheme ColorScheme.highContrastDark({Brightness brightness = Brightness.dark, Color primary = const Color(0xffefb7ff), Color onPrimary = Colors.black, Color? primaryContainer, Color? onPrimaryContainer, Color secondary = const Color(0xff66fff9), Color onSecondary = Colors.black, Color? secondaryContainer, Color? onSecondaryContainer, Color? tertiary, Color? onTertiary, Color? tertiaryContainer, Color? onTertiaryContainer, Color error = const Color(0xff9b374d), Color onError = Colors.black, Color? errorContainer, Color? onErrorContainer, Color background = const Color(0xff121212), Color onBackground = Colors.white, Color surface = const Color(0xff121212), Color onSurface = Colors.white, Color? surfaceVariant, Color? onSurfaceVariant, Color? outline, Color? outlineVariant, Color? shadow, Color? scrim, Color? inverseSurface, Color? onInverseSurface, Color? inversePrimary, Color? surfaceTint, Color? primaryVariant = const Color(0xffbe9eff), Color? secondaryVariant = const Color(0xff66fff9)})
  ColorScheme$Mate.highContrastDark({
    /// optionalParameters: {Brightness brightness = Brightness.dark} , hasDefaultValue:true, defaultValueCode:Brightness.dark
    required Brightness brightness,

    /// optionalParameters: {Color primary = const Color(0xffefb7ff)} , hasDefaultValue:true, defaultValueCode:const Color(0xffefb7ff)
    required Color primary,

    /// optionalParameters: {Color onPrimary = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onPrimary,

    /// optionalParameters: {Color? primaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? primaryContainer,

    /// optionalParameters: {Color? onPrimaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onPrimaryContainer,

    /// optionalParameters: {Color secondary = const Color(0xff66fff9)} , hasDefaultValue:true, defaultValueCode:const Color(0xff66fff9)
    required Color secondary,

    /// optionalParameters: {Color onSecondary = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onSecondary,

    /// optionalParameters: {Color? secondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? secondaryContainer,

    /// optionalParameters: {Color? onSecondaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onSecondaryContainer,

    /// optionalParameters: {Color? tertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiary,

    /// optionalParameters: {Color? onTertiary} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiary,

    /// optionalParameters: {Color? tertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? tertiaryContainer,

    /// optionalParameters: {Color? onTertiaryContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onTertiaryContainer,

    /// optionalParameters: {Color error = const Color(0xff9b374d)} , hasDefaultValue:true, defaultValueCode:const Color(0xff9b374d)
    required Color error,

    /// optionalParameters: {Color onError = Colors.black} , hasDefaultValue:true, defaultValueCode:Colors.black
    required Color onError,

    /// optionalParameters: {Color? errorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? errorContainer,

    /// optionalParameters: {Color? onErrorContainer} , hasDefaultValue:false, defaultValueCode:null
    Color? onErrorContainer,

    /// optionalParameters: {Color background = const Color(0xff121212)} , hasDefaultValue:true, defaultValueCode:const Color(0xff121212)
    required Color background,

    /// optionalParameters: {Color onBackground = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onBackground,

    /// optionalParameters: {Color surface = const Color(0xff121212)} , hasDefaultValue:true, defaultValueCode:const Color(0xff121212)
    required Color surface,

    /// optionalParameters: {Color onSurface = Colors.white} , hasDefaultValue:true, defaultValueCode:Colors.white
    required Color onSurface,

    /// optionalParameters: {Color? surfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceVariant,

    /// optionalParameters: {Color? onSurfaceVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? onSurfaceVariant,

    /// optionalParameters: {Color? outline} , hasDefaultValue:false, defaultValueCode:null
    Color? outline,

    /// optionalParameters: {Color? outlineVariant} , hasDefaultValue:false, defaultValueCode:null
    Color? outlineVariant,

    /// optionalParameters: {Color? shadow} , hasDefaultValue:false, defaultValueCode:null
    Color? shadow,

    /// optionalParameters: {Color? scrim} , hasDefaultValue:false, defaultValueCode:null
    Color? scrim,

    /// optionalParameters: {Color? inverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? inverseSurface,

    /// optionalParameters: {Color? onInverseSurface} , hasDefaultValue:false, defaultValueCode:null
    Color? onInverseSurface,

    /// optionalParameters: {Color? inversePrimary} , hasDefaultValue:false, defaultValueCode:null
    Color? inversePrimary,

    /// optionalParameters: {Color? surfaceTint} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTint,
  }) : super.highContrastDark(
          brightness: brightness,
          primary: primary,
          onPrimary: onPrimary,
          primaryContainer: primaryContainer,
          onPrimaryContainer: onPrimaryContainer,
          secondary: secondary,
          onSecondary: onSecondary,
          secondaryContainer: secondaryContainer,
          onSecondaryContainer: onSecondaryContainer,
          tertiary: tertiary,
          onTertiary: onTertiary,
          tertiaryContainer: tertiaryContainer,
          onTertiaryContainer: onTertiaryContainer,
          error: error,
          onError: onError,
          errorContainer: errorContainer,
          onErrorContainer: onErrorContainer,
          background: background,
          onBackground: onBackground,
          surface: surface,
          onSurface: onSurface,
          surfaceVariant: surfaceVariant,
          onSurfaceVariant: onSurfaceVariant,
          outline: outline,
          outlineVariant: outlineVariant,
          shadow: shadow,
          scrim: scrim,
          inverseSurface: inverseSurface,
          onInverseSurface: onInverseSurface,
          inversePrimary: inversePrimary,
          surfaceTint: surfaceTint,
        ) {
    mateBuilder = (p) => ColorScheme$Mate.highContrastDark(
          brightness: p.get('brightness').build(),
          primary: p.get('primary').build(),
          onPrimary: p.get('onPrimary').build(),
          primaryContainer: p.get('primaryContainer').build(),
          onPrimaryContainer: p.get('onPrimaryContainer').build(),
          secondary: p.get('secondary').build(),
          onSecondary: p.get('onSecondary').build(),
          secondaryContainer: p.get('secondaryContainer').build(),
          onSecondaryContainer: p.get('onSecondaryContainer').build(),
          tertiary: p.get('tertiary').build(),
          onTertiary: p.get('onTertiary').build(),
          tertiaryContainer: p.get('tertiaryContainer').build(),
          onTertiaryContainer: p.get('onTertiaryContainer').build(),
          error: p.get('error').build(),
          onError: p.get('onError').build(),
          errorContainer: p.get('errorContainer').build(),
          onErrorContainer: p.get('onErrorContainer').build(),
          background: p.get('background').build(),
          onBackground: p.get('onBackground').build(),
          surface: p.get('surface').build(),
          onSurface: p.get('onSurface').build(),
          surfaceVariant: p.get('surfaceVariant').build(),
          onSurfaceVariant: p.get('onSurfaceVariant').build(),
          outline: p.get('outline').build(),
          outlineVariant: p.get('outlineVariant').build(),
          shadow: p.get('shadow').build(),
          scrim: p.get('scrim').build(),
          inverseSurface: p.get('inverseSurface').build(),
          onInverseSurface: p.get('onInverseSurface').build(),
          inversePrimary: p.get('inversePrimary').build(),
          surfaceTint: p.get('surfaceTint').build(),
        );
    matePut('brightness', brightness);
    matePut('primary', primary);
    matePut('onPrimary', onPrimary);
    matePut('primaryContainer', primaryContainer);
    matePut('onPrimaryContainer', onPrimaryContainer);
    matePut('secondary', secondary);
    matePut('onSecondary', onSecondary);
    matePut('secondaryContainer', secondaryContainer);
    matePut('onSecondaryContainer', onSecondaryContainer);
    matePut('tertiary', tertiary);
    matePut('onTertiary', onTertiary);
    matePut('tertiaryContainer', tertiaryContainer);
    matePut('onTertiaryContainer', onTertiaryContainer);
    matePut('error', error);
    matePut('onError', onError);
    matePut('errorContainer', errorContainer);
    matePut('onErrorContainer', onErrorContainer);
    matePut('background', background);
    matePut('onBackground', onBackground);
    matePut('surface', surface);
    matePut('onSurface', onSurface);
    matePut('surfaceVariant', surfaceVariant);
    matePut('onSurfaceVariant', onSurfaceVariant);
    matePut('outline', outline);
    matePut('outlineVariant', outlineVariant);
    matePut('shadow', shadow);
    matePut('scrim', scrim);
    matePut('inverseSurface', inverseSurface);
    matePut('onInverseSurface', onInverseSurface);
    matePut('inversePrimary', inversePrimary);
    matePut('surfaceTint', surfaceTint);
  }
}
