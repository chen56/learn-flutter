// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/circle_avatar.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'dart:ui';import 'package:flutter/src/painting/image_provider.dart';import 'dart:core';import 'package:flutter/src/painting/image_stream.dart';import 'package:note/mate.dart' show Mate;/// class CircleAvatar extends StatelessWidget
class CircleAvatar$Mate extends CircleAvatar with Mate {/// CircleAvatar CircleAvatar({Key? key, Widget? child, Color? backgroundColor, ImageProvider<Object>? backgroundImage, ImageProvider<Object>? foregroundImage, void Function(Object, StackTrace?)? onBackgroundImageError, void Function(Object, StackTrace?)? onForegroundImageError, Color? foregroundColor, double? radius, double? minRadius, double? maxRadius})
CircleAvatar$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
Widget? child, /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
Color? backgroundColor, /// optionalParameters: {ImageProvider<Object>? backgroundImage} , hasDefaultValue:false, defaultValueCode:null
ImageProvider<Object>? backgroundImage, /// optionalParameters: {ImageProvider<Object>? foregroundImage} , hasDefaultValue:false, defaultValueCode:null
ImageProvider<Object>? foregroundImage, /// optionalParameters: {void Function(Object, StackTrace?)? onBackgroundImageError} , hasDefaultValue:false, defaultValueCode:null
ImageErrorListener? onBackgroundImageError, /// optionalParameters: {void Function(Object, StackTrace?)? onForegroundImageError} , hasDefaultValue:false, defaultValueCode:null
ImageErrorListener? onForegroundImageError, /// optionalParameters: {Color? foregroundColor} , hasDefaultValue:false, defaultValueCode:null
Color? foregroundColor, /// optionalParameters: {double? radius} , hasDefaultValue:false, defaultValueCode:null
double? radius, /// optionalParameters: {double? minRadius} , hasDefaultValue:false, defaultValueCode:null
double? minRadius, /// optionalParameters: {double? maxRadius} , hasDefaultValue:false, defaultValueCode:null
double? maxRadius, }) : super(key: key, child: child, backgroundColor: backgroundColor, backgroundImage: backgroundImage, foregroundImage: foregroundImage, onBackgroundImageError: onBackgroundImageError, onForegroundImageError: onForegroundImageError, foregroundColor: foregroundColor, radius: radius, minRadius: minRadius, maxRadius: maxRadius, ) { mateBuilder = (p) => CircleAvatar$Mate(key: p.get('key').build(), child: p.get('child').build(), backgroundColor: p.get('backgroundColor').build(), backgroundImage: p.get('backgroundImage').build(), foregroundImage: p.get('foregroundImage').build(), onBackgroundImageError: p.get('onBackgroundImageError').build(), onForegroundImageError: p.get('onForegroundImageError').build(), foregroundColor: p.get('foregroundColor').build(), radius: p.get('radius').build(), minRadius: p.get('minRadius').build(), maxRadius: p.get('maxRadius').build(), );
matePut('key', key);
matePut('child', child);
matePut('backgroundColor', backgroundColor);
matePut('backgroundImage', backgroundImage);
matePut('foregroundImage', foregroundImage);
matePut('onBackgroundImageError', onBackgroundImageError);
matePut('onForegroundImageError', onForegroundImageError);
matePut('foregroundColor', foregroundColor);
matePut('radius', radius);
matePut('minRadius', minRadius);
matePut('maxRadius', maxRadius); }

 }
