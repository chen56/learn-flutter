// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/drawer.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/painting/borders.dart' as _i5;
import 'package:flutter/src/widgets/framework.dart' as _i6;
import 'package:flutter/src/gestures/recognizer.dart' as _i7;
import 'package:flutter/gestures.dart' as _i8;

/// class Drawer extends StatelessWidget
class Drawer$Mate extends _i1.Drawer with _i2.Mate {
  /// Drawer Drawer({Key? key, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, double? width, Widget? child, String? semanticLabel, Clip? clipBehavior})
  Drawer$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Color? backgroundColor} , default:none
    _i4.Color? backgroundColor,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , default:none
    _i4.Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    _i4.Color? surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    _i5.ShapeBorder? shape,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {Widget? child} , default:none
    _i6.Widget? child,

    /// optionalParameters: {String? semanticLabel} , default:none
    String? semanticLabel,

    /// optionalParameters: {Clip? clipBehavior} , default:none
    _i4.Clip? clipBehavior,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          width: width,
          child: child,
          semanticLabel: semanticLabel,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'Drawer';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Drawer$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          shape: p.get('shape').build(),
          width: p.get('width').build(),
          child: p.get('child').build(),
          semanticLabel: p.get('semanticLabel').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'shadowColor',
      shadowColor,
      isNamed: true,
    );
    mateUse(
      'surfaceTintColor',
      surfaceTintColor,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'semanticLabel',
      semanticLabel,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
    );
  }
}

/// class DrawerController extends StatefulWidget
class DrawerController$Mate extends _i1.DrawerController with _i2.Mate {
  /// DrawerController DrawerController({GlobalKey<State<StatefulWidget>>? key, required Widget child, required DrawerAlignment alignment, bool isDrawerOpen = false, void Function(bool)? drawerCallback, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Color? scrimColor, double? edgeDragWidth, bool enableOpenDragGesture = true})
  DrawerController$Mate({
    /// optionalParameters: {GlobalKey<State<StatefulWidget>>? key} , default:none
    _i6.GlobalKey<_i6.State<_i6.StatefulWidget>>? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i6.Widget child,

    /// optionalParameters: {required DrawerAlignment alignment} , default:none
    required _i1.DrawerAlignment alignment,

    /// optionalParameters: {bool isDrawerOpen = false} , default:processed=BooleanLiteralImpl
    bool isDrawerOpen = false,

    /// optionalParameters: {void Function(bool)? drawerCallback} , default:none
    _i1.DrawerCallback? drawerCallback,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i7.DragStartBehavior dragStartBehavior = _i8.DragStartBehavior.start,

    /// optionalParameters: {Color? scrimColor} , default:none
    _i4.Color? scrimColor,

    /// optionalParameters: {double? edgeDragWidth} , default:none
    double? edgeDragWidth,

    /// optionalParameters: {bool enableOpenDragGesture = true} , default:processed=BooleanLiteralImpl
    bool enableOpenDragGesture = true,
  }) : super(
          key: key,
          child: child,
          alignment: alignment,
          isDrawerOpen: isDrawerOpen,
          drawerCallback: drawerCallback,
          dragStartBehavior: dragStartBehavior,
          scrimColor: scrimColor,
          edgeDragWidth: edgeDragWidth,
          enableOpenDragGesture: enableOpenDragGesture,
        ) {
    mateBuilderName = 'DrawerController';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DrawerController$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          alignment: p.get('alignment').build(),
          isDrawerOpen: p.get('isDrawerOpen').build(),
          drawerCallback: p.get('drawerCallback').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          scrimColor: p.get('scrimColor').build(),
          edgeDragWidth: p.get('edgeDragWidth').build(),
          enableOpenDragGesture: p.get('enableOpenDragGesture').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'isDrawerOpen',
      isDrawerOpen,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'drawerCallback',
      drawerCallback,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i8.DragStartBehavior.start,
    );
    mateUse(
      'scrimColor',
      scrimColor,
      isNamed: true,
    );
    mateUse(
      'edgeDragWidth',
      edgeDragWidth,
      isNamed: true,
    );
    mateUse(
      'enableOpenDragGesture',
      enableOpenDragGesture,
      isNamed: true,
      defaultValue: true,
    );
  }
}
