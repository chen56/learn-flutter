// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/drawer.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class Drawer extends StatelessWidget
class Drawer$Mate extends Drawer with Mate {
  /// Drawer Drawer({Key? key, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, double? width, Widget? child, String? semanticLabel})
  Drawer$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , defaultValue:none
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , defaultValue:none
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , defaultValue:none
    Color? surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , defaultValue:none
    ShapeBorder? shape,

    /// optionalParameters: {double? width} , defaultValue:none
    double? width,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {String? semanticLabel} , defaultValue:none
    String? semanticLabel,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          width: width,
          child: child,
          semanticLabel: semanticLabel,
        ) {
    mateBuilder = (p) => Drawer$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          shape: p.get('shape').build(),
          width: p.get('width').build(),
          child: p.get('child').build(),
          semanticLabel: p.get('semanticLabel').build(),
        );
    mateDeclare('key', key);
    mateDeclare('backgroundColor', backgroundColor);
    mateDeclare('elevation', elevation);
    mateDeclare('shadowColor', shadowColor);
    mateDeclare('surfaceTintColor', surfaceTintColor);
    mateDeclare('shape', shape);
    mateDeclare('width', width);
    mateDeclare('child', child);
    mateDeclare('semanticLabel', semanticLabel);
  }
}

/// class DrawerController extends StatefulWidget
class DrawerController$Mate extends DrawerController with Mate {
  /// DrawerController DrawerController({GlobalKey<State<StatefulWidget>>? key, required Widget child, required DrawerAlignment alignment, bool isDrawerOpen = false, void Function(bool)? drawerCallback, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Color? scrimColor, double? edgeDragWidth, bool enableOpenDragGesture = true})
  DrawerController$Mate({
    /// optionalParameters: {GlobalKey<State<StatefulWidget>>? key} , defaultValue:none
    GlobalKey<State<StatefulWidget>>? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {required DrawerAlignment alignment} , defaultValue:none
    required DrawerAlignment alignment,

    /// optionalParameters: {bool isDrawerOpen = false} , defaultValue:Literal
    bool isDrawerOpen = false,

    /// optionalParameters: {void Function(bool)? drawerCallback} , defaultValue:none
    DrawerCallback? drawerCallback,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {Color? scrimColor} , defaultValue:none
    Color? scrimColor,

    /// optionalParameters: {double? edgeDragWidth} , defaultValue:none
    double? edgeDragWidth,

    /// optionalParameters: {bool enableOpenDragGesture = true} , defaultValue:Literal
    bool enableOpenDragGesture = true,
  }) : super(
          key: key,
          child: child,
          alignment: alignment,
          isDrawerOpen: isDrawerOpen,
          drawerCallback: drawerCallback,
          dragStartBehavior: dragStartBehavior,
          scrimColor: scrimColor,
          edgeDragWidth: edgeDragWidth,
          enableOpenDragGesture: enableOpenDragGesture,
        ) {
    mateBuilder = (p) => DrawerController$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          alignment: p.get('alignment').build(),
          isDrawerOpen: p.get('isDrawerOpen').build(),
          drawerCallback: p.get('drawerCallback').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          scrimColor: p.get('scrimColor').build(),
          edgeDragWidth: p.get('edgeDragWidth').build(),
          enableOpenDragGesture: p.get('enableOpenDragGesture').build(),
        );
    mateDeclare('key', key);
    mateDeclare('child', child);
    mateDeclare('alignment', alignment);
    mateDeclare('isDrawerOpen', isDrawerOpen);
    mateDeclare('drawerCallback', drawerCallback);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('scrimColor', scrimColor);
    mateDeclare('edgeDragWidth', edgeDragWidth);
    mateDeclare('enableOpenDragGesture', enableOpenDragGesture);
  }
}
