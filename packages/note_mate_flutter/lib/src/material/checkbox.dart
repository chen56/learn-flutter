// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/checkbox.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/borders.dart';

/// class Checkbox extends StatefulWidget
class Checkbox$Mate extends Checkbox with Mate {
  /// Checkbox Checkbox({Key? key, required bool? value, bool tristate = false, required void Function(bool?)? onChanged, MouseCursor? mouseCursor, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? checkColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false, OutlinedBorder? shape, BorderSide? side, bool isError = false})
  Checkbox$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required bool? value} , hasDefaultValue:false, defaultValueCode:null
    required bool? value,

    /// optionalParameters: {bool tristate = false} , hasDefaultValue:true, defaultValueCode:false
    required bool tristate,

    /// optionalParameters: {required void Function(bool?)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<bool?>? onChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? fillColor,

    /// optionalParameters: {Color? checkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? checkColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
    double? splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {OutlinedBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    OutlinedBorder? shape,

    /// optionalParameters: {BorderSide? side} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? side,

    /// optionalParameters: {bool isError = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isError,
  }) : super(
          key: key,
          value: value,
          tristate: tristate,
          onChanged: onChanged,
          mouseCursor: mouseCursor,
          activeColor: activeColor,
          fillColor: fillColor,
          checkColor: checkColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          visualDensity: visualDensity,
          focusNode: focusNode,
          autofocus: autofocus,
          shape: shape,
          side: side,
          isError: isError,
        ) {
    mateBuilder = (p) => Checkbox$Mate(
          key: p.get('key').build(),
          value: p.get('value').build(),
          tristate: p.get('tristate').build(),
          onChanged: p.get('onChanged').build(),
          mouseCursor: p.get('mouseCursor').build(),
          activeColor: p.get('activeColor').build(),
          fillColor: p.get('fillColor').build(),
          checkColor: p.get('checkColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          visualDensity: p.get('visualDensity').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          shape: p.get('shape').build(),
          side: p.get('side').build(),
          isError: p.get('isError').build(),
        );
    matePut('key', key);
    matePut('value', value);
    matePut('tristate', tristate);
    matePut('onChanged', onChanged);
    matePut('mouseCursor', mouseCursor);
    matePut('activeColor', activeColor);
    matePut('fillColor', fillColor);
    matePut('checkColor', checkColor);
    matePut('focusColor', focusColor);
    matePut('hoverColor', hoverColor);
    matePut('overlayColor', overlayColor);
    matePut('splashRadius', splashRadius);
    matePut('materialTapTargetSize', materialTapTargetSize);
    matePut('visualDensity', visualDensity);
    matePut('focusNode', focusNode);
    matePut('autofocus', autofocus);
    matePut('shape', shape);
    matePut('side', side);
    matePut('isError', isError);
  }
}
