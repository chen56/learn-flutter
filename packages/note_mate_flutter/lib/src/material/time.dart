// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/time.dart' as _i1;
import 'package:note/mate.dart' as _i2;

/// class TimeOfDay
class TimeOfDay$Mate extends _i1.TimeOfDay with _i2.Mate {
  /// TimeOfDay TimeOfDay({required int hour, required int minute})
  TimeOfDay$Mate({
    /// optionalParameters: {required int hour} , default:none
    required int hour,

    /// optionalParameters: {required int minute} , default:none
    required int minute,
  }) : super(
          hour: hour,
          minute: minute,
        ) {
    mateBuilderName = 'TimeOfDay';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TimeOfDay$Mate(
          hour: p.get('hour').build(),
          minute: p.get('minute').build(),
        );
    mateUse(
      'hour',
      hour,
      isNamed: true,
    );
    mateUse(
      'minute',
      minute,
      isNamed: true,
    );
  }

  /// TimeOfDay TimeOfDay.fromDateTime(DateTime time)
  TimeOfDay$Mate.fromDateTime(

      /// requiredParameters: DateTime time
      DateTime time)
      : super.fromDateTime(time) {
    mateBuilderName = 'TimeOfDay.fromDateTime';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TimeOfDay$Mate.fromDateTime(p.get('time').value);
    mateUse(
      'time',
      time,
      isNamed: false,
    );
  }
}

/// class RestorableTimeOfDay extends RestorableValue<TimeOfDay>
class RestorableTimeOfDay$Mate extends _i1.RestorableTimeOfDay with _i2.Mate {
  /// RestorableTimeOfDay RestorableTimeOfDay(TimeOfDay defaultValue)
  RestorableTimeOfDay$Mate(

      /// requiredParameters: TimeOfDay defaultValue
      _i1.TimeOfDay defaultValue)
      : super(defaultValue) {
    mateBuilderName = 'RestorableTimeOfDay';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RestorableTimeOfDay$Mate(p.get('defaultValue').value);
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: false,
    );
  }
}
