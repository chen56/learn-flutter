// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/floating_action_button.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/text_style.dart';

/// class FloatingActionButton extends StatelessWidget
class FloatingActionButton$Mate extends FloatingActionButton with Mate {
  /// FloatingActionButton FloatingActionButton({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor, bool mini = false, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool isExtended = false, bool? enableFeedback})
  FloatingActionButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {Color? foregroundColor} , default:none
    Color? foregroundColor,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {Color? focusColor} , default:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , default:none
    Color? splashColor,

    /// optionalParameters: {Object? heroTag = const _DefaultHeroTag()} , default:unprocessed=InstanceCreationExpressionImpl
    required Object? heroTag,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {double? focusElevation} , default:none
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , default:none
    double? hoverElevation,

    /// optionalParameters: {double? highlightElevation} , default:none
    double? highlightElevation,

    /// optionalParameters: {double? disabledElevation} , default:none
    double? disabledElevation,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool mini = false} , default:processed=BooleanLiteralImpl
    bool mini = false,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.none,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {bool isExtended = false} , default:processed=BooleanLiteralImpl
    bool isExtended = false,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,
  }) : super(
          key: key,
          child: child,
          tooltip: tooltip,
          foregroundColor: foregroundColor,
          backgroundColor: backgroundColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          heroTag: heroTag,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          highlightElevation: highlightElevation,
          disabledElevation: disabledElevation,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          mini: mini,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          materialTapTargetSize: materialTapTargetSize,
          isExtended: isExtended,
          enableFeedback: enableFeedback,
        ) {
    mateBuilderName = 'FloatingActionButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => FloatingActionButton$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          tooltip: p.get('tooltip').build(),
          foregroundColor: p.get('foregroundColor').build(),
          backgroundColor: p.get('backgroundColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          heroTag: p.get('heroTag').build(),
          elevation: p.get('elevation').build(),
          focusElevation: p.get('focusElevation').build(),
          hoverElevation: p.get('hoverElevation').build(),
          highlightElevation: p.get('highlightElevation').build(),
          disabledElevation: p.get('disabledElevation').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          mini: p.get('mini').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          isExtended: p.get('isExtended').build(),
          enableFeedback: p.get('enableFeedback').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'foregroundColor',
      foregroundColor,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'heroTag',
      heroTag,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'focusElevation',
      focusElevation,
      isNamed: true,
    );
    mateUse(
      'hoverElevation',
      hoverElevation,
      isNamed: true,
    );
    mateUse(
      'highlightElevation',
      highlightElevation,
      isNamed: true,
    );
    mateUse(
      'disabledElevation',
      disabledElevation,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'mini',
      mini,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.none,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'isExtended',
      isExtended,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
  }

  /// FloatingActionButton FloatingActionButton.small({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool? enableFeedback})
  FloatingActionButton$Mate.small({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {Color? foregroundColor} , default:none
    Color? foregroundColor,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {Color? focusColor} , default:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , default:none
    Color? splashColor,

    /// optionalParameters: {Object? heroTag = const _DefaultHeroTag()} , default:unprocessed=InstanceCreationExpressionImpl
    required Object? heroTag,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {double? focusElevation} , default:none
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , default:none
    double? hoverElevation,

    /// optionalParameters: {double? highlightElevation} , default:none
    double? highlightElevation,

    /// optionalParameters: {double? disabledElevation} , default:none
    double? disabledElevation,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.none,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,
  }) : super.small(
          key: key,
          child: child,
          tooltip: tooltip,
          foregroundColor: foregroundColor,
          backgroundColor: backgroundColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          heroTag: heroTag,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          highlightElevation: highlightElevation,
          disabledElevation: disabledElevation,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          materialTapTargetSize: materialTapTargetSize,
          enableFeedback: enableFeedback,
        ) {
    mateBuilderName = 'FloatingActionButton.small';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => FloatingActionButton$Mate.small(
          key: p.get('key').build(),
          child: p.get('child').build(),
          tooltip: p.get('tooltip').build(),
          foregroundColor: p.get('foregroundColor').build(),
          backgroundColor: p.get('backgroundColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          heroTag: p.get('heroTag').build(),
          elevation: p.get('elevation').build(),
          focusElevation: p.get('focusElevation').build(),
          hoverElevation: p.get('hoverElevation').build(),
          highlightElevation: p.get('highlightElevation').build(),
          disabledElevation: p.get('disabledElevation').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          enableFeedback: p.get('enableFeedback').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'foregroundColor',
      foregroundColor,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'heroTag',
      heroTag,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'focusElevation',
      focusElevation,
      isNamed: true,
    );
    mateUse(
      'hoverElevation',
      hoverElevation,
      isNamed: true,
    );
    mateUse(
      'highlightElevation',
      highlightElevation,
      isNamed: true,
    );
    mateUse(
      'disabledElevation',
      disabledElevation,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.none,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
  }

  /// FloatingActionButton FloatingActionButton.large({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool? enableFeedback})
  FloatingActionButton$Mate.large({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {Color? foregroundColor} , default:none
    Color? foregroundColor,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {Color? focusColor} , default:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , default:none
    Color? splashColor,

    /// optionalParameters: {Object? heroTag = const _DefaultHeroTag()} , default:unprocessed=InstanceCreationExpressionImpl
    required Object? heroTag,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {double? focusElevation} , default:none
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , default:none
    double? hoverElevation,

    /// optionalParameters: {double? highlightElevation} , default:none
    double? highlightElevation,

    /// optionalParameters: {double? disabledElevation} , default:none
    double? disabledElevation,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.none,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,
  }) : super.large(
          key: key,
          child: child,
          tooltip: tooltip,
          foregroundColor: foregroundColor,
          backgroundColor: backgroundColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          heroTag: heroTag,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          highlightElevation: highlightElevation,
          disabledElevation: disabledElevation,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          shape: shape,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          materialTapTargetSize: materialTapTargetSize,
          enableFeedback: enableFeedback,
        ) {
    mateBuilderName = 'FloatingActionButton.large';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => FloatingActionButton$Mate.large(
          key: p.get('key').build(),
          child: p.get('child').build(),
          tooltip: p.get('tooltip').build(),
          foregroundColor: p.get('foregroundColor').build(),
          backgroundColor: p.get('backgroundColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          heroTag: p.get('heroTag').build(),
          elevation: p.get('elevation').build(),
          focusElevation: p.get('focusElevation').build(),
          hoverElevation: p.get('hoverElevation').build(),
          highlightElevation: p.get('highlightElevation').build(),
          disabledElevation: p.get('disabledElevation').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          enableFeedback: p.get('enableFeedback').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'foregroundColor',
      foregroundColor,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'heroTag',
      heroTag,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'focusElevation',
      focusElevation,
      isNamed: true,
    );
    mateUse(
      'hoverElevation',
      hoverElevation,
      isNamed: true,
    );
    mateUse(
      'highlightElevation',
      highlightElevation,
      isNamed: true,
    );
    mateUse(
      'disabledElevation',
      disabledElevation,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.none,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
  }

  /// FloatingActionButton FloatingActionButton.extended({Key? key, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, Color? splashColor, double? highlightElevation, double? disabledElevation, required void Function()? onPressed, MouseCursor? mouseCursor = SystemMouseCursors.click, ShapeBorder? shape, bool isExtended = true, MaterialTapTargetSize? materialTapTargetSize, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, double? extendedIconLabelSpacing, EdgeInsetsGeometry? extendedPadding, TextStyle? extendedTextStyle, Widget? icon, required Widget label, bool? enableFeedback})
  FloatingActionButton$Mate.extended({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {Color? foregroundColor} , default:none
    Color? foregroundColor,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {Color? focusColor} , default:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    Color? hoverColor,

    /// optionalParameters: {Object? heroTag = const _DefaultHeroTag()} , default:unprocessed=InstanceCreationExpressionImpl
    required Object? heroTag,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {double? focusElevation} , default:none
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , default:none
    double? hoverElevation,

    /// optionalParameters: {Color? splashColor} , default:none
    Color? splashColor,

    /// optionalParameters: {double? highlightElevation} , default:none
    double? highlightElevation,

    /// optionalParameters: {double? disabledElevation} , default:none
    double? disabledElevation,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor = SystemMouseCursors.click} , default:processed=PrefixedIdentifierImpl
    MouseCursor? mouseCursor = SystemMouseCursors.click,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {bool isExtended = true} , default:processed=BooleanLiteralImpl
    bool isExtended = true,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.none,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {double? extendedIconLabelSpacing} , default:none
    double? extendedIconLabelSpacing,

    /// optionalParameters: {EdgeInsetsGeometry? extendedPadding} , default:none
    EdgeInsetsGeometry? extendedPadding,

    /// optionalParameters: {TextStyle? extendedTextStyle} , default:none
    TextStyle? extendedTextStyle,

    /// optionalParameters: {Widget? icon} , default:none
    Widget? icon,

    /// optionalParameters: {required Widget label} , default:none
    required Widget label,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,
  }) : super.extended(
          key: key,
          tooltip: tooltip,
          foregroundColor: foregroundColor,
          backgroundColor: backgroundColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          heroTag: heroTag,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          splashColor: splashColor,
          highlightElevation: highlightElevation,
          disabledElevation: disabledElevation,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          shape: shape,
          isExtended: isExtended,
          materialTapTargetSize: materialTapTargetSize,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          extendedIconLabelSpacing: extendedIconLabelSpacing,
          extendedPadding: extendedPadding,
          extendedTextStyle: extendedTextStyle,
          icon: icon,
          label: label,
          enableFeedback: enableFeedback,
        ) {
    mateBuilderName = 'FloatingActionButton.extended';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => FloatingActionButton$Mate.extended(
          key: p.get('key').build(),
          tooltip: p.get('tooltip').build(),
          foregroundColor: p.get('foregroundColor').build(),
          backgroundColor: p.get('backgroundColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          heroTag: p.get('heroTag').build(),
          elevation: p.get('elevation').build(),
          focusElevation: p.get('focusElevation').build(),
          hoverElevation: p.get('hoverElevation').build(),
          splashColor: p.get('splashColor').build(),
          highlightElevation: p.get('highlightElevation').build(),
          disabledElevation: p.get('disabledElevation').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          shape: p.get('shape').build(),
          isExtended: p.get('isExtended').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          clipBehavior: p.get('clipBehavior').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          extendedIconLabelSpacing: p.get('extendedIconLabelSpacing').build(),
          extendedPadding: p.get('extendedPadding').build(),
          extendedTextStyle: p.get('extendedTextStyle').build(),
          icon: p.get('icon').build(),
          label: p.get('label').build(),
          enableFeedback: p.get('enableFeedback').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'foregroundColor',
      foregroundColor,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'heroTag',
      heroTag,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'focusElevation',
      focusElevation,
      isNamed: true,
    );
    mateUse(
      'hoverElevation',
      hoverElevation,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'highlightElevation',
      highlightElevation,
      isNamed: true,
    );
    mateUse(
      'disabledElevation',
      disabledElevation,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
      defaultValue: SystemMouseCursors.click,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'isExtended',
      isExtended,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.none,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'extendedIconLabelSpacing',
      extendedIconLabelSpacing,
      isNamed: true,
    );
    mateUse(
      'extendedPadding',
      extendedPadding,
      isNamed: true,
    );
    mateUse(
      'extendedTextStyle',
      extendedTextStyle,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
  }
}
