// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/stepper.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/material.dart' as _i5;
import 'package:flutter/src/foundation/key.dart' as _i6;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i7;
import 'package:flutter/src/foundation/basic_types.dart' as _i8;
import 'package:flutter/src/painting/edge_insets.dart' as _i9;

/// class ControlsDetails
class ControlsDetails$Mate extends _i1.ControlsDetails with _i2.Mate {
  /// ControlsDetails ControlsDetails({required int currentStep, required int stepIndex, void Function()? onStepCancel, void Function()? onStepContinue})
  ControlsDetails$Mate({
    /// optionalParameters: {required int currentStep} , default:none
    required int currentStep,

    /// optionalParameters: {required int stepIndex} , default:none
    required int stepIndex,

    /// optionalParameters: {void Function()? onStepCancel} , default:none
    _i3.VoidCallback? onStepCancel,

    /// optionalParameters: {void Function()? onStepContinue} , default:none
    _i3.VoidCallback? onStepContinue,
  }) : super(
          currentStep: currentStep,
          stepIndex: stepIndex,
          onStepCancel: onStepCancel,
          onStepContinue: onStepContinue,
        ) {
    mateBuilderName = 'ControlsDetails';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ControlsDetails$Mate(
          currentStep: p.get('currentStep').build(),
          stepIndex: p.get('stepIndex').build(),
          onStepCancel: p.get('onStepCancel').build(),
          onStepContinue: p.get('onStepContinue').build(),
        );
    mateUse(
      'currentStep',
      currentStep,
      isNamed: true,
    );
    mateUse(
      'stepIndex',
      stepIndex,
      isNamed: true,
    );
    mateUse(
      'onStepCancel',
      onStepCancel,
      isNamed: true,
    );
    mateUse(
      'onStepContinue',
      onStepContinue,
      isNamed: true,
    );
  }
}

/// class Step
class Step$Mate extends _i1.Step with _i2.Mate {
  /// Step Step({required Widget title, Widget? subtitle, required Widget content, StepState state = StepState.indexed, bool isActive = false, Widget? label})
  Step$Mate({
    /// optionalParameters: {required Widget title} , default:none
    required _i4.Widget title,

    /// optionalParameters: {Widget? subtitle} , default:none
    _i4.Widget? subtitle,

    /// optionalParameters: {required Widget content} , default:none
    required _i4.Widget content,

    /// optionalParameters: {StepState state = StepState.indexed} , default:processed=PrefixedIdentifierImpl
    _i1.StepState state = _i5.StepState.indexed,

    /// optionalParameters: {bool isActive = false} , default:processed=BooleanLiteralImpl
    bool isActive = false,

    /// optionalParameters: {Widget? label} , default:none
    _i4.Widget? label,
  }) : super(
          title: title,
          subtitle: subtitle,
          content: content,
          state: state,
          isActive: isActive,
          label: label,
        ) {
    mateBuilderName = 'Step';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Step$Mate(
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          content: p.get('content').build(),
          state: p.get('state').build(),
          isActive: p.get('isActive').build(),
          label: p.get('label').build(),
        );
    mateUse(
      'title',
      title,
      isNamed: true,
    );
    mateUse(
      'subtitle',
      subtitle,
      isNamed: true,
    );
    mateUse(
      'content',
      content,
      isNamed: true,
    );
    mateUse(
      'state',
      state,
      isNamed: true,
      defaultValue: _i5.StepState.indexed,
    );
    mateUse(
      'isActive',
      isActive,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
  }
}

/// class Stepper extends StatefulWidget
class Stepper$Mate extends _i1.Stepper with _i2.Mate {
  /// Stepper Stepper({Key? key, required List<Step> steps, ScrollPhysics? physics, StepperType type = StepperType.vertical, int currentStep = 0, void Function(int)? onStepTapped, void Function()? onStepContinue, void Function()? onStepCancel, Widget Function(BuildContext, ControlsDetails)? controlsBuilder, double? elevation, EdgeInsetsGeometry? margin, Widget? Function(int, StepState)? stepIconBuilder})
  Stepper$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i6.Key? key,

    /// optionalParameters: {required List<Step> steps} , default:none
    required List<_i1.Step> steps,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    _i7.ScrollPhysics? physics,

    /// optionalParameters: {StepperType type = StepperType.vertical} , default:processed=PrefixedIdentifierImpl
    _i1.StepperType type = _i5.StepperType.vertical,

    /// optionalParameters: {int currentStep = 0} , default:processed=IntegerLiteralImpl
    int currentStep = 0,

    /// optionalParameters: {void Function(int)? onStepTapped} , default:none
    _i8.ValueChanged<int>? onStepTapped,

    /// optionalParameters: {void Function()? onStepContinue} , default:none
    _i3.VoidCallback? onStepContinue,

    /// optionalParameters: {void Function()? onStepCancel} , default:none
    _i3.VoidCallback? onStepCancel,

    /// optionalParameters: {Widget Function(BuildContext, ControlsDetails)? controlsBuilder} , default:none
    _i1.ControlsWidgetBuilder? controlsBuilder,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , default:none
    _i9.EdgeInsetsGeometry? margin,

    /// optionalParameters: {Widget? Function(int, StepState)? stepIconBuilder} , default:none
    _i1.StepIconBuilder? stepIconBuilder,
  }) : super(
          key: key,
          steps: steps,
          physics: physics,
          type: type,
          currentStep: currentStep,
          onStepTapped: onStepTapped,
          onStepContinue: onStepContinue,
          onStepCancel: onStepCancel,
          controlsBuilder: controlsBuilder,
          elevation: elevation,
          margin: margin,
          stepIconBuilder: stepIconBuilder,
        ) {
    mateBuilderName = 'Stepper';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Stepper$Mate(
          key: p.get('key').build(),
          steps: p.get('steps').build(),
          physics: p.get('physics').build(),
          type: p.get('type').build(),
          currentStep: p.get('currentStep').build(),
          onStepTapped: p.get('onStepTapped').build(),
          onStepContinue: p.get('onStepContinue').build(),
          onStepCancel: p.get('onStepCancel').build(),
          controlsBuilder: p.get('controlsBuilder').build(),
          elevation: p.get('elevation').build(),
          margin: p.get('margin').build(),
          stepIconBuilder: p.get('stepIconBuilder').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'steps',
      steps,
      isNamed: true,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'type',
      type,
      isNamed: true,
      defaultValue: _i5.StepperType.vertical,
    );
    mateUse(
      'currentStep',
      currentStep,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'onStepTapped',
      onStepTapped,
      isNamed: true,
    );
    mateUse(
      'onStepContinue',
      onStepContinue,
      isNamed: true,
    );
    mateUse(
      'onStepCancel',
      onStepCancel,
      isNamed: true,
    );
    mateUse(
      'controlsBuilder',
      controlsBuilder,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'margin',
      margin,
      isNamed: true,
    );
    mateUse(
      'stepIconBuilder',
      stepIconBuilder,
      isNamed: true,
    );
  }
}
