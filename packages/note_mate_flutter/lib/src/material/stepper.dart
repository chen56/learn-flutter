// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/stepper.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/painting/edge_insets.dart';

/// class ControlsDetails
class ControlsDetails$Mate extends ControlsDetails with Mate {
  /// ControlsDetails ControlsDetails({required int currentStep, required int stepIndex, void Function()? onStepCancel, void Function()? onStepContinue})
  ControlsDetails$Mate({
    /// optionalParameters: {required int currentStep} , defaultValue:none
    required int currentStep,

    /// optionalParameters: {required int stepIndex} , defaultValue:none
    required int stepIndex,

    /// optionalParameters: {void Function()? onStepCancel} , defaultValue:none
    VoidCallback? onStepCancel,

    /// optionalParameters: {void Function()? onStepContinue} , defaultValue:none
    VoidCallback? onStepContinue,
  }) : super(
          currentStep: currentStep,
          stepIndex: stepIndex,
          onStepCancel: onStepCancel,
          onStepContinue: onStepContinue,
        ) {
    mateBuilder = (p) => ControlsDetails$Mate(
          currentStep: p.get('currentStep').build(),
          stepIndex: p.get('stepIndex').build(),
          onStepCancel: p.get('onStepCancel').build(),
          onStepContinue: p.get('onStepContinue').build(),
        );
    mateUse('currentStep', currentStep);
    mateUse('stepIndex', stepIndex);
    mateUse('onStepCancel', onStepCancel);
    mateUse('onStepContinue', onStepContinue);
  }
}

/// class Step
class Step$Mate extends Step with Mate {
  /// Step Step({required Widget title, Widget? subtitle, required Widget content, StepState state = StepState.indexed, bool isActive = false, Widget? label})
  Step$Mate({
    /// optionalParameters: {required Widget title} , defaultValue:none
    required Widget title,

    /// optionalParameters: {Widget? subtitle} , defaultValue:none
    Widget? subtitle,

    /// optionalParameters: {required Widget content} , defaultValue:none
    required Widget content,

    /// optionalParameters: {StepState state = StepState.indexed} , defaultValue:unprocessed
    required StepState state,

    /// optionalParameters: {bool isActive = false} , defaultValue:Literal
    bool isActive = false,

    /// optionalParameters: {Widget? label} , defaultValue:none
    Widget? label,
  }) : super(
          title: title,
          subtitle: subtitle,
          content: content,
          state: state,
          isActive: isActive,
          label: label,
        ) {
    mateBuilder = (p) => Step$Mate(
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          content: p.get('content').build(),
          state: p.get('state').build(),
          isActive: p.get('isActive').build(),
          label: p.get('label').build(),
        );
    mateUse('title', title);
    mateUse('subtitle', subtitle);
    mateUse('content', content);
    mateUse('state', state);
    mateUse('isActive', isActive);
    mateUse('label', label);
  }
}

/// class Stepper extends StatefulWidget
class Stepper$Mate extends Stepper with Mate {
  /// Stepper Stepper({Key? key, required List<Step> steps, ScrollPhysics? physics, StepperType type = StepperType.vertical, int currentStep = 0, void Function(int)? onStepTapped, void Function()? onStepContinue, void Function()? onStepCancel, Widget Function(BuildContext, ControlsDetails)? controlsBuilder, double? elevation, EdgeInsetsGeometry? margin})
  Stepper$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<Step> steps} , defaultValue:none
    required List<Step> steps,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {StepperType type = StepperType.vertical} , defaultValue:unprocessed
    required StepperType type,

    /// optionalParameters: {int currentStep = 0} , defaultValue:Literal
    int currentStep = 0,

    /// optionalParameters: {void Function(int)? onStepTapped} , defaultValue:none
    ValueChanged<int>? onStepTapped,

    /// optionalParameters: {void Function()? onStepContinue} , defaultValue:none
    VoidCallback? onStepContinue,

    /// optionalParameters: {void Function()? onStepCancel} , defaultValue:none
    VoidCallback? onStepCancel,

    /// optionalParameters: {Widget Function(BuildContext, ControlsDetails)? controlsBuilder} , defaultValue:none
    ControlsWidgetBuilder? controlsBuilder,

    /// optionalParameters: {double? elevation} , defaultValue:none
    double? elevation,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , defaultValue:none
    EdgeInsetsGeometry? margin,
  }) : super(
          key: key,
          steps: steps,
          physics: physics,
          type: type,
          currentStep: currentStep,
          onStepTapped: onStepTapped,
          onStepContinue: onStepContinue,
          onStepCancel: onStepCancel,
          controlsBuilder: controlsBuilder,
          elevation: elevation,
          margin: margin,
        ) {
    mateBuilder = (p) => Stepper$Mate(
          key: p.get('key').build(),
          steps: p.get('steps').build(),
          physics: p.get('physics').build(),
          type: p.get('type').build(),
          currentStep: p.get('currentStep').build(),
          onStepTapped: p.get('onStepTapped').build(),
          onStepContinue: p.get('onStepContinue').build(),
          onStepCancel: p.get('onStepCancel').build(),
          controlsBuilder: p.get('controlsBuilder').build(),
          elevation: p.get('elevation').build(),
          margin: p.get('margin').build(),
        );
    mateUse('key', key);
    mateUse('steps', steps);
    mateUse('physics', physics);
    mateUse('type', type);
    mateUse('currentStep', currentStep);
    mateUse('onStepTapped', onStepTapped);
    mateUse('onStepContinue', onStepContinue);
    mateUse('onStepCancel', onStepCancel);
    mateUse('controlsBuilder', controlsBuilder);
    mateUse('elevation', elevation);
    mateUse('margin', margin);
  }
}
