// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/date_picker_theme.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class DatePickerThemeData with Diagnosticable
class DatePickerThemeData$Mate extends DatePickerThemeData with Mate {
  /// DatePickerThemeData DatePickerThemeData({Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? headerBackgroundColor, Color? headerForegroundColor, TextStyle? headerHeadlineStyle, TextStyle? headerHelpStyle, TextStyle? weekdayStyle, TextStyle? dayStyle, MaterialStateProperty<Color?>? dayForegroundColor, MaterialStateProperty<Color?>? dayBackgroundColor, MaterialStateProperty<Color?>? dayOverlayColor, MaterialStateProperty<Color?>? todayForegroundColor, MaterialStateProperty<Color?>? todayBackgroundColor, BorderSide? todayBorder, TextStyle? yearStyle, MaterialStateProperty<Color?>? yearForegroundColor, MaterialStateProperty<Color?>? yearBackgroundColor, MaterialStateProperty<Color?>? yearOverlayColor, Color? rangePickerBackgroundColor, double? rangePickerElevation, Color? rangePickerShadowColor, Color? rangePickerSurfaceTintColor, ShapeBorder? rangePickerShape, Color? rangePickerHeaderBackgroundColor, Color? rangePickerHeaderForegroundColor, TextStyle? rangePickerHeaderHeadlineStyle, TextStyle? rangePickerHeaderHelpStyle, Color? rangeSelectionBackgroundColor, MaterialStateProperty<Color?>? rangeSelectionOverlayColor})
  DatePickerThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {Color? headerBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? headerBackgroundColor,

    /// optionalParameters: {Color? headerForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? headerForegroundColor,

    /// optionalParameters: {TextStyle? headerHeadlineStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? headerHeadlineStyle,

    /// optionalParameters: {TextStyle? headerHelpStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? headerHelpStyle,

    /// optionalParameters: {TextStyle? weekdayStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? weekdayStyle,

    /// optionalParameters: {TextStyle? dayStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? dayStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? dayForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? dayBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayOverlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? dayOverlayColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? todayForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? todayForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? todayBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? todayBackgroundColor,

    /// optionalParameters: {BorderSide? todayBorder} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? todayBorder,

    /// optionalParameters: {TextStyle? yearStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? yearStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? yearForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? yearBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearOverlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? yearOverlayColor,

    /// optionalParameters: {Color? rangePickerBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerBackgroundColor,

    /// optionalParameters: {double? rangePickerElevation} , hasDefaultValue:false, defaultValueCode:null
    double? rangePickerElevation,

    /// optionalParameters: {Color? rangePickerShadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerShadowColor,

    /// optionalParameters: {Color? rangePickerSurfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerSurfaceTintColor,

    /// optionalParameters: {ShapeBorder? rangePickerShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? rangePickerShape,

    /// optionalParameters: {Color? rangePickerHeaderBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerHeaderBackgroundColor,

    /// optionalParameters: {Color? rangePickerHeaderForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerHeaderForegroundColor,

    /// optionalParameters: {TextStyle? rangePickerHeaderHeadlineStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? rangePickerHeaderHeadlineStyle,

    /// optionalParameters: {TextStyle? rangePickerHeaderHelpStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? rangePickerHeaderHelpStyle,

    /// optionalParameters: {Color? rangeSelectionBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangeSelectionBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? rangeSelectionOverlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? rangeSelectionOverlayColor,
  }) : super(
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          headerBackgroundColor: headerBackgroundColor,
          headerForegroundColor: headerForegroundColor,
          headerHeadlineStyle: headerHeadlineStyle,
          headerHelpStyle: headerHelpStyle,
          weekdayStyle: weekdayStyle,
          dayStyle: dayStyle,
          dayForegroundColor: dayForegroundColor,
          dayBackgroundColor: dayBackgroundColor,
          dayOverlayColor: dayOverlayColor,
          todayForegroundColor: todayForegroundColor,
          todayBackgroundColor: todayBackgroundColor,
          todayBorder: todayBorder,
          yearStyle: yearStyle,
          yearForegroundColor: yearForegroundColor,
          yearBackgroundColor: yearBackgroundColor,
          yearOverlayColor: yearOverlayColor,
          rangePickerBackgroundColor: rangePickerBackgroundColor,
          rangePickerElevation: rangePickerElevation,
          rangePickerShadowColor: rangePickerShadowColor,
          rangePickerSurfaceTintColor: rangePickerSurfaceTintColor,
          rangePickerShape: rangePickerShape,
          rangePickerHeaderBackgroundColor: rangePickerHeaderBackgroundColor,
          rangePickerHeaderForegroundColor: rangePickerHeaderForegroundColor,
          rangePickerHeaderHeadlineStyle: rangePickerHeaderHeadlineStyle,
          rangePickerHeaderHelpStyle: rangePickerHeaderHelpStyle,
          rangeSelectionBackgroundColor: rangeSelectionBackgroundColor,
          rangeSelectionOverlayColor: rangeSelectionOverlayColor,
        ) {
    mateBuilder = (p) => DatePickerThemeData$Mate(
          backgroundColor: p.get('backgroundColor').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          shape: p.get('shape').build(),
          headerBackgroundColor: p.get('headerBackgroundColor').build(),
          headerForegroundColor: p.get('headerForegroundColor').build(),
          headerHeadlineStyle: p.get('headerHeadlineStyle').build(),
          headerHelpStyle: p.get('headerHelpStyle').build(),
          weekdayStyle: p.get('weekdayStyle').build(),
          dayStyle: p.get('dayStyle').build(),
          dayForegroundColor: p.get('dayForegroundColor').build(),
          dayBackgroundColor: p.get('dayBackgroundColor').build(),
          dayOverlayColor: p.get('dayOverlayColor').build(),
          todayForegroundColor: p.get('todayForegroundColor').build(),
          todayBackgroundColor: p.get('todayBackgroundColor').build(),
          todayBorder: p.get('todayBorder').build(),
          yearStyle: p.get('yearStyle').build(),
          yearForegroundColor: p.get('yearForegroundColor').build(),
          yearBackgroundColor: p.get('yearBackgroundColor').build(),
          yearOverlayColor: p.get('yearOverlayColor').build(),
          rangePickerBackgroundColor: p.get('rangePickerBackgroundColor').build(),
          rangePickerElevation: p.get('rangePickerElevation').build(),
          rangePickerShadowColor: p.get('rangePickerShadowColor').build(),
          rangePickerSurfaceTintColor: p.get('rangePickerSurfaceTintColor').build(),
          rangePickerShape: p.get('rangePickerShape').build(),
          rangePickerHeaderBackgroundColor: p.get('rangePickerHeaderBackgroundColor').build(),
          rangePickerHeaderForegroundColor: p.get('rangePickerHeaderForegroundColor').build(),
          rangePickerHeaderHeadlineStyle: p.get('rangePickerHeaderHeadlineStyle').build(),
          rangePickerHeaderHelpStyle: p.get('rangePickerHeaderHelpStyle').build(),
          rangeSelectionBackgroundColor: p.get('rangeSelectionBackgroundColor').build(),
          rangeSelectionOverlayColor: p.get('rangeSelectionOverlayColor').build(),
        );
    matePut('backgroundColor', backgroundColor);
    matePut('elevation', elevation);
    matePut('shadowColor', shadowColor);
    matePut('surfaceTintColor', surfaceTintColor);
    matePut('shape', shape);
    matePut('headerBackgroundColor', headerBackgroundColor);
    matePut('headerForegroundColor', headerForegroundColor);
    matePut('headerHeadlineStyle', headerHeadlineStyle);
    matePut('headerHelpStyle', headerHelpStyle);
    matePut('weekdayStyle', weekdayStyle);
    matePut('dayStyle', dayStyle);
    matePut('dayForegroundColor', dayForegroundColor);
    matePut('dayBackgroundColor', dayBackgroundColor);
    matePut('dayOverlayColor', dayOverlayColor);
    matePut('todayForegroundColor', todayForegroundColor);
    matePut('todayBackgroundColor', todayBackgroundColor);
    matePut('todayBorder', todayBorder);
    matePut('yearStyle', yearStyle);
    matePut('yearForegroundColor', yearForegroundColor);
    matePut('yearBackgroundColor', yearBackgroundColor);
    matePut('yearOverlayColor', yearOverlayColor);
    matePut('rangePickerBackgroundColor', rangePickerBackgroundColor);
    matePut('rangePickerElevation', rangePickerElevation);
    matePut('rangePickerShadowColor', rangePickerShadowColor);
    matePut('rangePickerSurfaceTintColor', rangePickerSurfaceTintColor);
    matePut('rangePickerShape', rangePickerShape);
    matePut('rangePickerHeaderBackgroundColor', rangePickerHeaderBackgroundColor);
    matePut('rangePickerHeaderForegroundColor', rangePickerHeaderForegroundColor);
    matePut('rangePickerHeaderHeadlineStyle', rangePickerHeaderHeadlineStyle);
    matePut('rangePickerHeaderHelpStyle', rangePickerHeaderHelpStyle);
    matePut('rangeSelectionBackgroundColor', rangeSelectionBackgroundColor);
    matePut('rangeSelectionOverlayColor', rangeSelectionOverlayColor);
  }
}

/// class DatePickerTheme extends InheritedTheme
class DatePickerTheme$Mate extends DatePickerTheme with Mate {
  /// DatePickerTheme DatePickerTheme({Key? key, required DatePickerThemeData data, required Widget child})
  DatePickerTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required DatePickerThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required DatePickerThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateBuilder = (p) => DatePickerTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    matePut('key', key);
    matePut('data', data);
    matePut('child', child);
  }
}
