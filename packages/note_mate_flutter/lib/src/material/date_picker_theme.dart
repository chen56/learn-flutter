// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/date_picker_theme.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/painting/borders.dart' as _i4;
import 'package:flutter/src/painting/text_style.dart' as _i5;
import 'package:flutter/src/material/material_state.dart' as _i6;
import 'package:flutter/src/foundation/key.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i8;

/// class DatePickerThemeData with Diagnosticable
class DatePickerThemeData$Mate extends _i1.DatePickerThemeData with _i2.Mate {
  /// DatePickerThemeData DatePickerThemeData({Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? headerBackgroundColor, Color? headerForegroundColor, TextStyle? headerHeadlineStyle, TextStyle? headerHelpStyle, TextStyle? weekdayStyle, TextStyle? dayStyle, MaterialStateProperty<Color?>? dayForegroundColor, MaterialStateProperty<Color?>? dayBackgroundColor, MaterialStateProperty<Color?>? dayOverlayColor, MaterialStateProperty<Color?>? todayForegroundColor, MaterialStateProperty<Color?>? todayBackgroundColor, BorderSide? todayBorder, TextStyle? yearStyle, MaterialStateProperty<Color?>? yearForegroundColor, MaterialStateProperty<Color?>? yearBackgroundColor, MaterialStateProperty<Color?>? yearOverlayColor, Color? rangePickerBackgroundColor, double? rangePickerElevation, Color? rangePickerShadowColor, Color? rangePickerSurfaceTintColor, ShapeBorder? rangePickerShape, Color? rangePickerHeaderBackgroundColor, Color? rangePickerHeaderForegroundColor, TextStyle? rangePickerHeaderHeadlineStyle, TextStyle? rangePickerHeaderHelpStyle, Color? rangeSelectionBackgroundColor, MaterialStateProperty<Color?>? rangeSelectionOverlayColor})
  DatePickerThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {Color? shadowColor} , default:none
    super.shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    super.surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {Color? headerBackgroundColor} , default:none
    super.headerBackgroundColor,

    /// optionalParameters: {Color? headerForegroundColor} , default:none
    super.headerForegroundColor,

    /// optionalParameters: {TextStyle? headerHeadlineStyle} , default:none
    super.headerHeadlineStyle,

    /// optionalParameters: {TextStyle? headerHelpStyle} , default:none
    super.headerHelpStyle,

    /// optionalParameters: {TextStyle? weekdayStyle} , default:none
    super.weekdayStyle,

    /// optionalParameters: {TextStyle? dayStyle} , default:none
    super.dayStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayForegroundColor} , default:none
    super.dayForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayBackgroundColor} , default:none
    super.dayBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayOverlayColor} , default:none
    super.dayOverlayColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? todayForegroundColor} , default:none
    super.todayForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? todayBackgroundColor} , default:none
    super.todayBackgroundColor,

    /// optionalParameters: {BorderSide? todayBorder} , default:none
    super.todayBorder,

    /// optionalParameters: {TextStyle? yearStyle} , default:none
    super.yearStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearForegroundColor} , default:none
    super.yearForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearBackgroundColor} , default:none
    super.yearBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearOverlayColor} , default:none
    super.yearOverlayColor,

    /// optionalParameters: {Color? rangePickerBackgroundColor} , default:none
    super.rangePickerBackgroundColor,

    /// optionalParameters: {double? rangePickerElevation} , default:none
    super.rangePickerElevation,

    /// optionalParameters: {Color? rangePickerShadowColor} , default:none
    super.rangePickerShadowColor,

    /// optionalParameters: {Color? rangePickerSurfaceTintColor} , default:none
    super.rangePickerSurfaceTintColor,

    /// optionalParameters: {ShapeBorder? rangePickerShape} , default:none
    super.rangePickerShape,

    /// optionalParameters: {Color? rangePickerHeaderBackgroundColor} , default:none
    super.rangePickerHeaderBackgroundColor,

    /// optionalParameters: {Color? rangePickerHeaderForegroundColor} , default:none
    super.rangePickerHeaderForegroundColor,

    /// optionalParameters: {TextStyle? rangePickerHeaderHeadlineStyle} , default:none
    super.rangePickerHeaderHeadlineStyle,

    /// optionalParameters: {TextStyle? rangePickerHeaderHelpStyle} , default:none
    super.rangePickerHeaderHelpStyle,

    /// optionalParameters: {Color? rangeSelectionBackgroundColor} , default:none
    super.rangeSelectionBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? rangeSelectionOverlayColor} , default:none
    super.rangeSelectionOverlayColor,
  })  : mateParams = {
          'backgroundColor': _i2.BuilderArg<_i3.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i3.Color?>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'surfaceTintColor': _i2.BuilderArg<_i3.Color?>(
            name: 'surfaceTintColor',
            init: surfaceTintColor,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i4.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'headerBackgroundColor': _i2.BuilderArg<_i3.Color?>(
            name: 'headerBackgroundColor',
            init: headerBackgroundColor,
            isNamed: true,
          ),
          'headerForegroundColor': _i2.BuilderArg<_i3.Color?>(
            name: 'headerForegroundColor',
            init: headerForegroundColor,
            isNamed: true,
          ),
          'headerHeadlineStyle': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'headerHeadlineStyle',
            init: headerHeadlineStyle,
            isNamed: true,
          ),
          'headerHelpStyle': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'headerHelpStyle',
            init: headerHelpStyle,
            isNamed: true,
          ),
          'weekdayStyle': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'weekdayStyle',
            init: weekdayStyle,
            isNamed: true,
          ),
          'dayStyle': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'dayStyle',
            init: dayStyle,
            isNamed: true,
          ),
          'dayForegroundColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'dayForegroundColor',
            init: dayForegroundColor,
            isNamed: true,
          ),
          'dayBackgroundColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'dayBackgroundColor',
            init: dayBackgroundColor,
            isNamed: true,
          ),
          'dayOverlayColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'dayOverlayColor',
            init: dayOverlayColor,
            isNamed: true,
          ),
          'todayForegroundColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'todayForegroundColor',
            init: todayForegroundColor,
            isNamed: true,
          ),
          'todayBackgroundColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'todayBackgroundColor',
            init: todayBackgroundColor,
            isNamed: true,
          ),
          'todayBorder': _i2.BuilderArg<_i4.BorderSide?>(
            name: 'todayBorder',
            init: todayBorder,
            isNamed: true,
          ),
          'yearStyle': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'yearStyle',
            init: yearStyle,
            isNamed: true,
          ),
          'yearForegroundColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'yearForegroundColor',
            init: yearForegroundColor,
            isNamed: true,
          ),
          'yearBackgroundColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'yearBackgroundColor',
            init: yearBackgroundColor,
            isNamed: true,
          ),
          'yearOverlayColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'yearOverlayColor',
            init: yearOverlayColor,
            isNamed: true,
          ),
          'rangePickerBackgroundColor': _i2.BuilderArg<_i3.Color?>(
            name: 'rangePickerBackgroundColor',
            init: rangePickerBackgroundColor,
            isNamed: true,
          ),
          'rangePickerElevation': _i2.BuilderArg<double?>(
            name: 'rangePickerElevation',
            init: rangePickerElevation,
            isNamed: true,
          ),
          'rangePickerShadowColor': _i2.BuilderArg<_i3.Color?>(
            name: 'rangePickerShadowColor',
            init: rangePickerShadowColor,
            isNamed: true,
          ),
          'rangePickerSurfaceTintColor': _i2.BuilderArg<_i3.Color?>(
            name: 'rangePickerSurfaceTintColor',
            init: rangePickerSurfaceTintColor,
            isNamed: true,
          ),
          'rangePickerShape': _i2.BuilderArg<_i4.ShapeBorder?>(
            name: 'rangePickerShape',
            init: rangePickerShape,
            isNamed: true,
          ),
          'rangePickerHeaderBackgroundColor': _i2.BuilderArg<_i3.Color?>(
            name: 'rangePickerHeaderBackgroundColor',
            init: rangePickerHeaderBackgroundColor,
            isNamed: true,
          ),
          'rangePickerHeaderForegroundColor': _i2.BuilderArg<_i3.Color?>(
            name: 'rangePickerHeaderForegroundColor',
            init: rangePickerHeaderForegroundColor,
            isNamed: true,
          ),
          'rangePickerHeaderHeadlineStyle': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'rangePickerHeaderHeadlineStyle',
            init: rangePickerHeaderHeadlineStyle,
            isNamed: true,
          ),
          'rangePickerHeaderHelpStyle': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'rangePickerHeaderHelpStyle',
            init: rangePickerHeaderHelpStyle,
            isNamed: true,
          ),
          'rangeSelectionBackgroundColor': _i2.BuilderArg<_i3.Color?>(
            name: 'rangeSelectionBackgroundColor',
            init: rangeSelectionBackgroundColor,
            isNamed: true,
          ),
          'rangeSelectionOverlayColor': _i2.BuilderArg<_i6.MaterialStateProperty<_i3.Color?>?>(
            name: 'rangeSelectionOverlayColor',
            init: rangeSelectionOverlayColor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DatePickerThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DatePickerThemeData$Mate(
          backgroundColor: p.get('backgroundColor').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          shape: p.get('shape').build(),
          headerBackgroundColor: p.get('headerBackgroundColor').build(),
          headerForegroundColor: p.get('headerForegroundColor').build(),
          headerHeadlineStyle: p.get('headerHeadlineStyle').build(),
          headerHelpStyle: p.get('headerHelpStyle').build(),
          weekdayStyle: p.get('weekdayStyle').build(),
          dayStyle: p.get('dayStyle').build(),
          dayForegroundColor: p.get('dayForegroundColor').build(),
          dayBackgroundColor: p.get('dayBackgroundColor').build(),
          dayOverlayColor: p.get('dayOverlayColor').build(),
          todayForegroundColor: p.get('todayForegroundColor').build(),
          todayBackgroundColor: p.get('todayBackgroundColor').build(),
          todayBorder: p.get('todayBorder').build(),
          yearStyle: p.get('yearStyle').build(),
          yearForegroundColor: p.get('yearForegroundColor').build(),
          yearBackgroundColor: p.get('yearBackgroundColor').build(),
          yearOverlayColor: p.get('yearOverlayColor').build(),
          rangePickerBackgroundColor: p.get('rangePickerBackgroundColor').build(),
          rangePickerElevation: p.get('rangePickerElevation').build(),
          rangePickerShadowColor: p.get('rangePickerShadowColor').build(),
          rangePickerSurfaceTintColor: p.get('rangePickerSurfaceTintColor').build(),
          rangePickerShape: p.get('rangePickerShape').build(),
          rangePickerHeaderBackgroundColor: p.get('rangePickerHeaderBackgroundColor').build(),
          rangePickerHeaderForegroundColor: p.get('rangePickerHeaderForegroundColor').build(),
          rangePickerHeaderHeadlineStyle: p.get('rangePickerHeaderHeadlineStyle').build(),
          rangePickerHeaderHelpStyle: p.get('rangePickerHeaderHelpStyle').build(),
          rangeSelectionBackgroundColor: p.get('rangeSelectionBackgroundColor').build(),
          rangeSelectionOverlayColor: p.get('rangeSelectionOverlayColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DatePickerTheme extends InheritedTheme
class DatePickerTheme$Mate extends _i1.DatePickerTheme with _i2.Mate {
  /// DatePickerTheme DatePickerTheme({Key? key, required DatePickerThemeData data, required Widget child})
  DatePickerTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required DatePickerThemeData data} , default:none
    required super.data,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i7.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<_i1.DatePickerThemeData>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i8.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DatePickerTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DatePickerTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
