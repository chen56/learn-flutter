// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/list_tile_theme.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/painting/borders.dart' as _i3;
import 'package:flutter/src/material/list_tile.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/text_style.dart' as _i6;
import 'package:flutter/src/painting/edge_insets.dart' as _i7;
import 'package:flutter/src/material/material_state.dart' as _i8;
import 'package:flutter/src/services/mouse_cursor.dart' as _i9;
import 'package:flutter/src/material/theme_data.dart' as _i10;
import 'package:flutter/src/foundation/key.dart' as _i11;
import 'package:flutter/src/widgets/framework.dart' as _i12;

/// class ListTileThemeData with Diagnosticable
class ListTileThemeData$Mate extends _i1.ListTileThemeData with _i2.Mate {
  /// ListTileThemeData ListTileThemeData({bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity, ListTileTitleAlignment? titleAlignment})
  ListTileThemeData$Mate({
    /// optionalParameters: {bool? dense} , default:none
    super.dense,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {ListTileStyle? style} , default:none
    super.style,

    /// optionalParameters: {Color? selectedColor} , default:none
    super.selectedColor,

    /// optionalParameters: {Color? iconColor} , default:none
    super.iconColor,

    /// optionalParameters: {Color? textColor} , default:none
    super.textColor,

    /// optionalParameters: {TextStyle? titleTextStyle} , default:none
    super.titleTextStyle,

    /// optionalParameters: {TextStyle? subtitleTextStyle} , default:none
    super.subtitleTextStyle,

    /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , default:none
    super.leadingAndTrailingTextStyle,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    super.contentPadding,

    /// optionalParameters: {Color? tileColor} , default:none
    super.tileColor,

    /// optionalParameters: {Color? selectedTileColor} , default:none
    super.selectedTileColor,

    /// optionalParameters: {double? horizontalTitleGap} , default:none
    super.horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , default:none
    super.minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , default:none
    super.minLeadingWidth,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    super.visualDensity,

    /// optionalParameters: {ListTileTitleAlignment? titleAlignment} , default:none
    super.titleAlignment,
  })  : mateParams = {
          'dense': _i2.BuilderArg<bool?>(
            name: 'dense',
            init: dense,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i3.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i4.ListTileStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'selectedColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedColor',
            init: selectedColor,
            isNamed: true,
          ),
          'iconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'iconColor',
            init: iconColor,
            isNamed: true,
          ),
          'textColor': _i2.BuilderArg<_i5.Color?>(
            name: 'textColor',
            init: textColor,
            isNamed: true,
          ),
          'titleTextStyle': _i2.BuilderArg<_i6.TextStyle?>(
            name: 'titleTextStyle',
            init: titleTextStyle,
            isNamed: true,
          ),
          'subtitleTextStyle': _i2.BuilderArg<_i6.TextStyle?>(
            name: 'subtitleTextStyle',
            init: subtitleTextStyle,
            isNamed: true,
          ),
          'leadingAndTrailingTextStyle': _i2.BuilderArg<_i6.TextStyle?>(
            name: 'leadingAndTrailingTextStyle',
            init: leadingAndTrailingTextStyle,
            isNamed: true,
          ),
          'contentPadding': _i2.BuilderArg<_i7.EdgeInsetsGeometry?>(
            name: 'contentPadding',
            init: contentPadding,
            isNamed: true,
          ),
          'tileColor': _i2.BuilderArg<_i5.Color?>(
            name: 'tileColor',
            init: tileColor,
            isNamed: true,
          ),
          'selectedTileColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedTileColor',
            init: selectedTileColor,
            isNamed: true,
          ),
          'horizontalTitleGap': _i2.BuilderArg<double?>(
            name: 'horizontalTitleGap',
            init: horizontalTitleGap,
            isNamed: true,
          ),
          'minVerticalPadding': _i2.BuilderArg<double?>(
            name: 'minVerticalPadding',
            init: minVerticalPadding,
            isNamed: true,
          ),
          'minLeadingWidth': _i2.BuilderArg<double?>(
            name: 'minLeadingWidth',
            init: minLeadingWidth,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MaterialStateProperty<_i9.MouseCursor?>?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'visualDensity': _i2.BuilderArg<_i10.VisualDensity?>(
            name: 'visualDensity',
            init: visualDensity,
            isNamed: true,
          ),
          'titleAlignment': _i2.BuilderArg<_i4.ListTileTitleAlignment?>(
            name: 'titleAlignment',
            init: titleAlignment,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ListTileThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ListTileThemeData$Mate(
          dense: p.get('dense').build(),
          shape: p.get('shape').build(),
          style: p.get('style').build(),
          selectedColor: p.get('selectedColor').build(),
          iconColor: p.get('iconColor').build(),
          textColor: p.get('textColor').build(),
          titleTextStyle: p.get('titleTextStyle').build(),
          subtitleTextStyle: p.get('subtitleTextStyle').build(),
          leadingAndTrailingTextStyle: p.get('leadingAndTrailingTextStyle').build(),
          contentPadding: p.get('contentPadding').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          horizontalTitleGap: p.get('horizontalTitleGap').build(),
          minVerticalPadding: p.get('minVerticalPadding').build(),
          minLeadingWidth: p.get('minLeadingWidth').build(),
          enableFeedback: p.get('enableFeedback').build(),
          mouseCursor: p.get('mouseCursor').build(),
          visualDensity: p.get('visualDensity').build(),
          titleAlignment: p.get('titleAlignment').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ListTileTheme extends InheritedTheme
class ListTileTheme$Mate extends _i1.ListTileTheme with _i2.Mate {
  /// ListTileTheme ListTileTheme({Key? key, ListTileThemeData? data, bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, required Widget child})
  ListTileTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {ListTileThemeData? data} , default:none
    super.data,

    /// optionalParameters: {bool? dense} , default:none
    super.dense,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {ListTileStyle? style} , default:none
    super.style,

    /// optionalParameters: {Color? selectedColor} , default:none
    super.selectedColor,

    /// optionalParameters: {Color? iconColor} , default:none
    super.iconColor,

    /// optionalParameters: {Color? textColor} , default:none
    super.textColor,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    super.contentPadding,

    /// optionalParameters: {Color? tileColor} , default:none
    super.tileColor,

    /// optionalParameters: {Color? selectedTileColor} , default:none
    super.selectedTileColor,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {double? horizontalTitleGap} , default:none
    super.horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , default:none
    super.minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , default:none
    super.minLeadingWidth,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i11.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<_i1.ListTileThemeData?>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'dense': _i2.BuilderArg<bool?>(
            name: 'dense',
            init: dense,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i3.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i4.ListTileStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'selectedColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedColor',
            init: selectedColor,
            isNamed: true,
          ),
          'iconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'iconColor',
            init: iconColor,
            isNamed: true,
          ),
          'textColor': _i2.BuilderArg<_i5.Color?>(
            name: 'textColor',
            init: textColor,
            isNamed: true,
          ),
          'contentPadding': _i2.BuilderArg<_i7.EdgeInsetsGeometry?>(
            name: 'contentPadding',
            init: contentPadding,
            isNamed: true,
          ),
          'tileColor': _i2.BuilderArg<_i5.Color?>(
            name: 'tileColor',
            init: tileColor,
            isNamed: true,
          ),
          'selectedTileColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedTileColor',
            init: selectedTileColor,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MaterialStateProperty<_i9.MouseCursor?>?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'horizontalTitleGap': _i2.BuilderArg<double?>(
            name: 'horizontalTitleGap',
            init: horizontalTitleGap,
            isNamed: true,
          ),
          'minVerticalPadding': _i2.BuilderArg<double?>(
            name: 'minVerticalPadding',
            init: minVerticalPadding,
            isNamed: true,
          ),
          'minLeadingWidth': _i2.BuilderArg<double?>(
            name: 'minLeadingWidth',
            init: minLeadingWidth,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i12.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ListTileTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ListTileTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          dense: p.get('dense').build(),
          shape: p.get('shape').build(),
          style: p.get('style').build(),
          selectedColor: p.get('selectedColor').build(),
          iconColor: p.get('iconColor').build(),
          textColor: p.get('textColor').build(),
          contentPadding: p.get('contentPadding').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          mouseCursor: p.get('mouseCursor').build(),
          horizontalTitleGap: p.get('horizontalTitleGap').build(),
          minVerticalPadding: p.get('minVerticalPadding').build(),
          minLeadingWidth: p.get('minLeadingWidth').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
