// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/list_tile_theme.dart';import 'dart:core';import 'package:flutter/src/painting/borders.dart';import 'package:flutter/src/material/list_tile.dart';import 'dart:ui';import 'package:flutter/src/painting/text_style.dart';import 'package:flutter/src/painting/edge_insets.dart';import 'package:flutter/src/material/material_state.dart';import 'package:flutter/src/services/mouse_cursor.dart';import 'package:flutter/src/material/theme_data.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:note/mate.dart' show Mate;/// class ListTileThemeData with Diagnosticable
class ListTileThemeData$Mate extends ListTileThemeData with Mate {/// ListTileThemeData ListTileThemeData({bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity, ListTileTitleAlignment? titleAlignment})
ListTileThemeData$Mate({/// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
bool? dense, /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
ShapeBorder? shape, /// optionalParameters: {ListTileStyle? style} , hasDefaultValue:false, defaultValueCode:null
ListTileStyle? style, /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedColor, /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
Color? iconColor, /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
Color? textColor, /// optionalParameters: {TextStyle? titleTextStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? titleTextStyle, /// optionalParameters: {TextStyle? subtitleTextStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? subtitleTextStyle, /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? leadingAndTrailingTextStyle, /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? contentPadding, /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
Color? tileColor, /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedTileColor, /// optionalParameters: {double? horizontalTitleGap} , hasDefaultValue:false, defaultValueCode:null
double? horizontalTitleGap, /// optionalParameters: {double? minVerticalPadding} , hasDefaultValue:false, defaultValueCode:null
double? minVerticalPadding, /// optionalParameters: {double? minLeadingWidth} , hasDefaultValue:false, defaultValueCode:null
double? minLeadingWidth, /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
bool? enableFeedback, /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<MouseCursor?>? mouseCursor, /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
VisualDensity? visualDensity, /// optionalParameters: {ListTileTitleAlignment? titleAlignment} , hasDefaultValue:false, defaultValueCode:null
ListTileTitleAlignment? titleAlignment, }) : super(dense: dense, shape: shape, style: style, selectedColor: selectedColor, iconColor: iconColor, textColor: textColor, titleTextStyle: titleTextStyle, subtitleTextStyle: subtitleTextStyle, leadingAndTrailingTextStyle: leadingAndTrailingTextStyle, contentPadding: contentPadding, tileColor: tileColor, selectedTileColor: selectedTileColor, horizontalTitleGap: horizontalTitleGap, minVerticalPadding: minVerticalPadding, minLeadingWidth: minLeadingWidth, enableFeedback: enableFeedback, mouseCursor: mouseCursor, visualDensity: visualDensity, titleAlignment: titleAlignment, ) { mateBuilder = (p) => ListTileThemeData$Mate(dense: p.get('dense').build(), shape: p.get('shape').build(), style: p.get('style').build(), selectedColor: p.get('selectedColor').build(), iconColor: p.get('iconColor').build(), textColor: p.get('textColor').build(), titleTextStyle: p.get('titleTextStyle').build(), subtitleTextStyle: p.get('subtitleTextStyle').build(), leadingAndTrailingTextStyle: p.get('leadingAndTrailingTextStyle').build(), contentPadding: p.get('contentPadding').build(), tileColor: p.get('tileColor').build(), selectedTileColor: p.get('selectedTileColor').build(), horizontalTitleGap: p.get('horizontalTitleGap').build(), minVerticalPadding: p.get('minVerticalPadding').build(), minLeadingWidth: p.get('minLeadingWidth').build(), enableFeedback: p.get('enableFeedback').build(), mouseCursor: p.get('mouseCursor').build(), visualDensity: p.get('visualDensity').build(), titleAlignment: p.get('titleAlignment').build(), );
matePut('dense', dense);
matePut('shape', shape);
matePut('style', style);
matePut('selectedColor', selectedColor);
matePut('iconColor', iconColor);
matePut('textColor', textColor);
matePut('titleTextStyle', titleTextStyle);
matePut('subtitleTextStyle', subtitleTextStyle);
matePut('leadingAndTrailingTextStyle', leadingAndTrailingTextStyle);
matePut('contentPadding', contentPadding);
matePut('tileColor', tileColor);
matePut('selectedTileColor', selectedTileColor);
matePut('horizontalTitleGap', horizontalTitleGap);
matePut('minVerticalPadding', minVerticalPadding);
matePut('minLeadingWidth', minLeadingWidth);
matePut('enableFeedback', enableFeedback);
matePut('mouseCursor', mouseCursor);
matePut('visualDensity', visualDensity);
matePut('titleAlignment', titleAlignment); }

 }
/// class ListTileTheme extends InheritedTheme
class ListTileTheme$Mate extends ListTileTheme with Mate {/// ListTileTheme ListTileTheme({Key? key, ListTileThemeData? data, bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, required Widget child})
ListTileTheme$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {ListTileThemeData? data} , hasDefaultValue:false, defaultValueCode:null
ListTileThemeData? data, /// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
bool? dense, /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
ShapeBorder? shape, /// optionalParameters: {ListTileStyle? style} , hasDefaultValue:false, defaultValueCode:null
ListTileStyle? style, /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedColor, /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
Color? iconColor, /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
Color? textColor, /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? contentPadding, /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
Color? tileColor, /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedTileColor, /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
bool? enableFeedback, /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<MouseCursor?>? mouseCursor, /// optionalParameters: {double? horizontalTitleGap} , hasDefaultValue:false, defaultValueCode:null
double? horizontalTitleGap, /// optionalParameters: {double? minVerticalPadding} , hasDefaultValue:false, defaultValueCode:null
double? minVerticalPadding, /// optionalParameters: {double? minLeadingWidth} , hasDefaultValue:false, defaultValueCode:null
double? minLeadingWidth, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, data: data, dense: dense, shape: shape, style: style, selectedColor: selectedColor, iconColor: iconColor, textColor: textColor, contentPadding: contentPadding, tileColor: tileColor, selectedTileColor: selectedTileColor, enableFeedback: enableFeedback, mouseCursor: mouseCursor, horizontalTitleGap: horizontalTitleGap, minVerticalPadding: minVerticalPadding, minLeadingWidth: minLeadingWidth, child: child, ) { mateBuilder = (p) => ListTileTheme$Mate(key: p.get('key').build(), data: p.get('data').build(), dense: p.get('dense').build(), shape: p.get('shape').build(), style: p.get('style').build(), selectedColor: p.get('selectedColor').build(), iconColor: p.get('iconColor').build(), textColor: p.get('textColor').build(), contentPadding: p.get('contentPadding').build(), tileColor: p.get('tileColor').build(), selectedTileColor: p.get('selectedTileColor').build(), enableFeedback: p.get('enableFeedback').build(), mouseCursor: p.get('mouseCursor').build(), horizontalTitleGap: p.get('horizontalTitleGap').build(), minVerticalPadding: p.get('minVerticalPadding').build(), minLeadingWidth: p.get('minLeadingWidth').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('data', data);
matePut('dense', dense);
matePut('shape', shape);
matePut('style', style);
matePut('selectedColor', selectedColor);
matePut('iconColor', iconColor);
matePut('textColor', textColor);
matePut('contentPadding', contentPadding);
matePut('tileColor', tileColor);
matePut('selectedTileColor', selectedTileColor);
matePut('enableFeedback', enableFeedback);
matePut('mouseCursor', mouseCursor);
matePut('horizontalTitleGap', horizontalTitleGap);
matePut('minVerticalPadding', minVerticalPadding);
matePut('minLeadingWidth', minLeadingWidth);
matePut('child', child); }

 }
