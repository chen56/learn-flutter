// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/list_tile_theme.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ListTileThemeData with Diagnosticable
class ListTileThemeData$Mate extends ListTileThemeData with Mate {
  /// ListTileThemeData ListTileThemeData({bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity, ListTileTitleAlignment? titleAlignment})
  ListTileThemeData$Mate({
    /// optionalParameters: {bool? dense} , default:none
    bool? dense,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , default:none
    ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , default:none
    Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , default:none
    Color? iconColor,

    /// optionalParameters: {Color? textColor} , default:none
    Color? textColor,

    /// optionalParameters: {TextStyle? titleTextStyle} , default:none
    TextStyle? titleTextStyle,

    /// optionalParameters: {TextStyle? subtitleTextStyle} , default:none
    TextStyle? subtitleTextStyle,

    /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , default:none
    TextStyle? leadingAndTrailingTextStyle,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {Color? tileColor} , default:none
    Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , default:none
    Color? selectedTileColor,

    /// optionalParameters: {double? horizontalTitleGap} , default:none
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , default:none
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , default:none
    double? minLeadingWidth,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    VisualDensity? visualDensity,

    /// optionalParameters: {ListTileTitleAlignment? titleAlignment} , default:none
    ListTileTitleAlignment? titleAlignment,
  }) : super(
          dense: dense,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          titleTextStyle: titleTextStyle,
          subtitleTextStyle: subtitleTextStyle,
          leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
          contentPadding: contentPadding,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          enableFeedback: enableFeedback,
          mouseCursor: mouseCursor,
          visualDensity: visualDensity,
          titleAlignment: titleAlignment,
        ) {
    mateCreateName = 'ListTileThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ListTileThemeData$Mate(
          dense: p.get('dense').build(),
          shape: p.get('shape').build(),
          style: p.get('style').build(),
          selectedColor: p.get('selectedColor').build(),
          iconColor: p.get('iconColor').build(),
          textColor: p.get('textColor').build(),
          titleTextStyle: p.get('titleTextStyle').build(),
          subtitleTextStyle: p.get('subtitleTextStyle').build(),
          leadingAndTrailingTextStyle: p.get('leadingAndTrailingTextStyle').build(),
          contentPadding: p.get('contentPadding').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          horizontalTitleGap: p.get('horizontalTitleGap').build(),
          minVerticalPadding: p.get('minVerticalPadding').build(),
          minLeadingWidth: p.get('minLeadingWidth').build(),
          enableFeedback: p.get('enableFeedback').build(),
          mouseCursor: p.get('mouseCursor').build(),
          visualDensity: p.get('visualDensity').build(),
          titleAlignment: p.get('titleAlignment').build(),
        );
    mateUse(
      'dense',
      dense,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'selectedColor',
      selectedColor,
      isNamed: true,
    );
    mateUse(
      'iconColor',
      iconColor,
      isNamed: true,
    );
    mateUse(
      'textColor',
      textColor,
      isNamed: true,
    );
    mateUse(
      'titleTextStyle',
      titleTextStyle,
      isNamed: true,
    );
    mateUse(
      'subtitleTextStyle',
      subtitleTextStyle,
      isNamed: true,
    );
    mateUse(
      'leadingAndTrailingTextStyle',
      leadingAndTrailingTextStyle,
      isNamed: true,
    );
    mateUse(
      'contentPadding',
      contentPadding,
      isNamed: true,
    );
    mateUse(
      'tileColor',
      tileColor,
      isNamed: true,
    );
    mateUse(
      'selectedTileColor',
      selectedTileColor,
      isNamed: true,
    );
    mateUse(
      'horizontalTitleGap',
      horizontalTitleGap,
      isNamed: true,
    );
    mateUse(
      'minVerticalPadding',
      minVerticalPadding,
      isNamed: true,
    );
    mateUse(
      'minLeadingWidth',
      minLeadingWidth,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'titleAlignment',
      titleAlignment,
      isNamed: true,
    );
  }
}

/// class ListTileTheme extends InheritedTheme
class ListTileTheme$Mate extends ListTileTheme with Mate {
  /// ListTileTheme ListTileTheme({Key? key, ListTileThemeData? data, bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, required Widget child})
  ListTileTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {ListTileThemeData? data} , default:none
    ListTileThemeData? data,

    /// optionalParameters: {bool? dense} , default:none
    bool? dense,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , default:none
    ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , default:none
    Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , default:none
    Color? iconColor,

    /// optionalParameters: {Color? textColor} , default:none
    Color? textColor,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {Color? tileColor} , default:none
    Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , default:none
    Color? selectedTileColor,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {double? horizontalTitleGap} , default:none
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , default:none
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , default:none
    double? minLeadingWidth,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          data: data,
          dense: dense,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          contentPadding: contentPadding,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          enableFeedback: enableFeedback,
          mouseCursor: mouseCursor,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          child: child,
        ) {
    mateCreateName = 'ListTileTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ListTileTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          dense: p.get('dense').build(),
          shape: p.get('shape').build(),
          style: p.get('style').build(),
          selectedColor: p.get('selectedColor').build(),
          iconColor: p.get('iconColor').build(),
          textColor: p.get('textColor').build(),
          contentPadding: p.get('contentPadding').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          mouseCursor: p.get('mouseCursor').build(),
          horizontalTitleGap: p.get('horizontalTitleGap').build(),
          minVerticalPadding: p.get('minVerticalPadding').build(),
          minLeadingWidth: p.get('minLeadingWidth').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'data',
      data,
      isNamed: true,
    );
    mateUse(
      'dense',
      dense,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'selectedColor',
      selectedColor,
      isNamed: true,
    );
    mateUse(
      'iconColor',
      iconColor,
      isNamed: true,
    );
    mateUse(
      'textColor',
      textColor,
      isNamed: true,
    );
    mateUse(
      'contentPadding',
      contentPadding,
      isNamed: true,
    );
    mateUse(
      'tileColor',
      tileColor,
      isNamed: true,
    );
    mateUse(
      'selectedTileColor',
      selectedTileColor,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'horizontalTitleGap',
      horizontalTitleGap,
      isNamed: true,
    );
    mateUse(
      'minVerticalPadding',
      minVerticalPadding,
      isNamed: true,
    );
    mateUse(
      'minLeadingWidth',
      minLeadingWidth,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
