// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/autocomplete.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/autocomplete.dart' as _i4;
import 'package:flutter/cupertino.dart' as _i5;
import 'package:flutter/src/services/text_input.dart' as _i6;

/// class Autocomplete<T extends Object> extends StatelessWidget
class Autocomplete$Mate<T extends Object> extends _i1.Autocomplete<T> with _i2.Mate {
  /// Autocomplete<T> Autocomplete({Key? key, required FutureOr<Iterable<T>> Function(TextEditingValue) optionsBuilder, String Function(T) displayStringForOption = RawAutocomplete.defaultStringForOption, Widget Function(BuildContext, TextEditingController, FocusNode, void Function()) fieldViewBuilder = _defaultFieldViewBuilder, void Function(T)? onSelected, double optionsMaxHeight = 200.0, Widget Function(BuildContext, void Function(T), Iterable<T>)? optionsViewBuilder, TextEditingValue? initialValue})
  Autocomplete$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required FutureOr<Iterable<T>> Function(TextEditingValue) optionsBuilder} , default:none
    required _i4.AutocompleteOptionsBuilder<T> optionsBuilder,

    /// optionalParameters: {String Function(T) displayStringForOption = RawAutocomplete.defaultStringForOption} , default:processed=PrefixedIdentifierImpl
    _i4.AutocompleteOptionToString<T> displayStringForOption = _i5.RawAutocomplete.defaultStringForOption,

    /// optionalParameters: {Widget Function(BuildContext, TextEditingController, FocusNode, void Function()) fieldViewBuilder = _defaultFieldViewBuilder} , default:unprocessed=SimpleIdentifierImpl
    required _i4.AutocompleteFieldViewBuilder fieldViewBuilder,

    /// optionalParameters: {void Function(T)? onSelected} , default:none
    _i4.AutocompleteOnSelected<T>? onSelected,

    /// optionalParameters: {double optionsMaxHeight = 200.0} , default:processed=DoubleLiteralImpl
    double optionsMaxHeight = 200.0,

    /// optionalParameters: {Widget Function(BuildContext, void Function(T), Iterable<T>)? optionsViewBuilder} , default:none
    _i4.AutocompleteOptionsViewBuilder<T>? optionsViewBuilder,

    /// optionalParameters: {TextEditingValue? initialValue} , default:none
    _i6.TextEditingValue? initialValue,
  }) : super(
          key: key,
          optionsBuilder: optionsBuilder,
          displayStringForOption: displayStringForOption,
          fieldViewBuilder: fieldViewBuilder,
          onSelected: onSelected,
          optionsMaxHeight: optionsMaxHeight,
          optionsViewBuilder: optionsViewBuilder,
          initialValue: initialValue,
        ) {
    mateBuilderName = 'Autocomplete';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Autocomplete$Mate<T>(
          key: p.get('key').build(),
          optionsBuilder: p.get('optionsBuilder').build(),
          displayStringForOption: p.get('displayStringForOption').build(),
          fieldViewBuilder: p.get('fieldViewBuilder').build(),
          onSelected: p.get('onSelected').build(),
          optionsMaxHeight: p.get('optionsMaxHeight').build(),
          optionsViewBuilder: p.get('optionsViewBuilder').build(),
          initialValue: p.get('initialValue').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'optionsBuilder',
      optionsBuilder,
      isNamed: true,
    );
    mateUse(
      'displayStringForOption',
      displayStringForOption,
      isNamed: true,
      defaultValue: _i5.RawAutocomplete.defaultStringForOption,
    );
    mateUse(
      'fieldViewBuilder',
      fieldViewBuilder,
      isNamed: true,
    );
    mateUse(
      'onSelected',
      onSelected,
      isNamed: true,
    );
    mateUse(
      'optionsMaxHeight',
      optionsMaxHeight,
      isNamed: true,
      defaultValue: 200.0,
    );
    mateUse(
      'optionsViewBuilder',
      optionsViewBuilder,
      isNamed: true,
    );
    mateUse(
      'initialValue',
      initialValue,
      isNamed: true,
    );
  }
}
