// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/tabs.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/material/tab_controller.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/cupertino.dart' as _i8;
import 'package:flutter/src/painting/decoration.dart' as _i9;
import 'package:flutter/src/painting/text_style.dart' as _i10;
import 'package:flutter/src/gestures/recognizer.dart' as _i11;
import 'package:flutter/gestures.dart' as _i12;
import 'package:flutter/src/material/material_state.dart' as _i13;
import 'package:flutter/src/services/mouse_cursor.dart' as _i14;
import 'package:flutter/src/foundation/basic_types.dart' as _i15;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i16;
import 'package:flutter/src/material/ink_well.dart' as _i17;
import 'package:flutter/src/painting/border_radius.dart' as _i18;
import 'package:flutter/src/painting/borders.dart' as _i19;

/// class Tab extends StatelessWidget implements PreferredSizeWidget
class Tab$Mate extends _i1.Tab with _i2.Mate {
  /// Tab Tab({Key? key, String? text, Widget? icon, EdgeInsetsGeometry iconMargin = const EdgeInsets.only(bottom: 10.0), double? height, Widget? child})
  Tab$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {String? text} , default:none
    super.text,

    /// optionalParameters: {Widget? icon} , default:none
    super.icon,

    /// optionalParameters: {EdgeInsetsGeometry iconMargin = const EdgeInsets.only(bottom: 10.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.iconMargin,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'text': _i2.BuilderArg<String?>(
            name: 'text',
            init: text,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i4.Widget?>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'iconMargin': _i2.BuilderArg<_i5.EdgeInsetsGeometry>(
            name: 'iconMargin',
            init: iconMargin,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Tab';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Tab$Mate(
          key: p.get('key').build(),
          text: p.get('text').build(),
          icon: p.get('icon').build(),
          iconMargin: p.get('iconMargin').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TabBar extends StatefulWidget implements PreferredSizeWidget
class TabBar$Mate extends _i1.TabBar with _i2.Mate {
  /// TabBar TabBar({Key? key, required List<Widget> tabs, TabController? controller, bool isScrollable = false, EdgeInsetsGeometry? padding, Color? indicatorColor, bool automaticIndicatorColorAdjustment = true, double indicatorWeight = 2.0, EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero, Decoration? indicator, TabBarIndicatorSize? indicatorSize, Color? dividerColor, Color? labelColor, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Color? unselectedLabelColor, TextStyle? unselectedLabelStyle, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, bool? enableFeedback, void Function(int)? onTap, ScrollPhysics? physics, InteractiveInkFeatureFactory? splashFactory, BorderRadius? splashBorderRadius})
  TabBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget> tabs} , default:none
    required super.tabs,

    /// optionalParameters: {TabController? controller} , default:none
    super.controller,

    /// optionalParameters: {bool isScrollable = false} , default:processed=BooleanLiteralImpl
    super.isScrollable,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {Color? indicatorColor} , default:none
    super.indicatorColor,

    /// optionalParameters: {bool automaticIndicatorColorAdjustment = true} , default:processed=BooleanLiteralImpl
    super.automaticIndicatorColorAdjustment,

    /// optionalParameters: {double indicatorWeight = 2.0} , default:processed=DoubleLiteralImpl
    super.indicatorWeight,

    /// optionalParameters: {EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero} , default:processed=PrefixedIdentifierImpl
    super.indicatorPadding,

    /// optionalParameters: {Decoration? indicator} , default:none
    super.indicator,

    /// optionalParameters: {TabBarIndicatorSize? indicatorSize} , default:none
    super.indicatorSize,

    /// optionalParameters: {Color? dividerColor} , default:none
    super.dividerColor,

    /// optionalParameters: {Color? labelColor} , default:none
    super.labelColor,

    /// optionalParameters: {TextStyle? labelStyle} , default:none
    super.labelStyle,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , default:none
    super.labelPadding,

    /// optionalParameters: {Color? unselectedLabelColor} , default:none
    super.unselectedLabelColor,

    /// optionalParameters: {TextStyle? unselectedLabelStyle} , default:none
    super.unselectedLabelStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    super.overlayColor,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {void Function(int)? onTap} , default:none
    super.onTap,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    super.physics,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , default:none
    super.splashFactory,

    /// optionalParameters: {BorderRadius? splashBorderRadius} , default:none
    super.splashBorderRadius,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'tabs': _i2.BuilderArg<List<_i4.Widget>>(
            name: 'tabs',
            init: tabs,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i6.TabController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'isScrollable': _i2.BuilderArg<bool>(
            name: 'isScrollable',
            init: isScrollable,
            isNamed: true,
            defaultValue: false,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'indicatorColor': _i2.BuilderArg<_i7.Color?>(
            name: 'indicatorColor',
            init: indicatorColor,
            isNamed: true,
          ),
          'automaticIndicatorColorAdjustment': _i2.BuilderArg<bool>(
            name: 'automaticIndicatorColorAdjustment',
            init: automaticIndicatorColorAdjustment,
            isNamed: true,
            defaultValue: true,
          ),
          'indicatorWeight': _i2.BuilderArg<double>(
            name: 'indicatorWeight',
            init: indicatorWeight,
            isNamed: true,
            defaultValue: 2.0,
          ),
          'indicatorPadding': _i2.BuilderArg<_i5.EdgeInsetsGeometry>(
            name: 'indicatorPadding',
            init: indicatorPadding,
            isNamed: true,
            defaultValue: _i8.EdgeInsets.zero,
          ),
          'indicator': _i2.BuilderArg<_i9.Decoration?>(
            name: 'indicator',
            init: indicator,
            isNamed: true,
          ),
          'indicatorSize': _i2.BuilderArg<_i1.TabBarIndicatorSize?>(
            name: 'indicatorSize',
            init: indicatorSize,
            isNamed: true,
          ),
          'dividerColor': _i2.BuilderArg<_i7.Color?>(
            name: 'dividerColor',
            init: dividerColor,
            isNamed: true,
          ),
          'labelColor': _i2.BuilderArg<_i7.Color?>(
            name: 'labelColor',
            init: labelColor,
            isNamed: true,
          ),
          'labelStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'labelStyle',
            init: labelStyle,
            isNamed: true,
          ),
          'labelPadding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'labelPadding',
            init: labelPadding,
            isNamed: true,
          ),
          'unselectedLabelColor': _i2.BuilderArg<_i7.Color?>(
            name: 'unselectedLabelColor',
            init: unselectedLabelColor,
            isNamed: true,
          ),
          'unselectedLabelStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'unselectedLabelStyle',
            init: unselectedLabelStyle,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i11.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i12.DragStartBehavior.start,
          ),
          'overlayColor': _i2.BuilderArg<_i13.MaterialStateProperty<_i7.Color?>?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i14.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i15.ValueChanged<int>?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'physics': _i2.BuilderArg<_i16.ScrollPhysics?>(
            name: 'physics',
            init: physics,
            isNamed: true,
          ),
          'splashFactory': _i2.BuilderArg<_i17.InteractiveInkFeatureFactory?>(
            name: 'splashFactory',
            init: splashFactory,
            isNamed: true,
          ),
          'splashBorderRadius': _i2.BuilderArg<_i18.BorderRadius?>(
            name: 'splashBorderRadius',
            init: splashBorderRadius,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TabBar';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabBar$Mate(
          key: p.get('key').build(),
          tabs: p.get('tabs').build(),
          controller: p.get('controller').build(),
          isScrollable: p.get('isScrollable').build(),
          padding: p.get('padding').build(),
          indicatorColor: p.get('indicatorColor').build(),
          automaticIndicatorColorAdjustment: p.get('automaticIndicatorColorAdjustment').build(),
          indicatorWeight: p.get('indicatorWeight').build(),
          indicatorPadding: p.get('indicatorPadding').build(),
          indicator: p.get('indicator').build(),
          indicatorSize: p.get('indicatorSize').build(),
          dividerColor: p.get('dividerColor').build(),
          labelColor: p.get('labelColor').build(),
          labelStyle: p.get('labelStyle').build(),
          labelPadding: p.get('labelPadding').build(),
          unselectedLabelColor: p.get('unselectedLabelColor').build(),
          unselectedLabelStyle: p.get('unselectedLabelStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          overlayColor: p.get('overlayColor').build(),
          mouseCursor: p.get('mouseCursor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          onTap: p.get('onTap').build(),
          physics: p.get('physics').build(),
          splashFactory: p.get('splashFactory').build(),
          splashBorderRadius: p.get('splashBorderRadius').build(),
        );
  }

  /// TabBar TabBar.secondary({Key? key, required List<Widget> tabs, TabController? controller, bool isScrollable = false, EdgeInsetsGeometry? padding, Color? indicatorColor, bool automaticIndicatorColorAdjustment = true, double indicatorWeight = 2.0, EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero, Decoration? indicator, TabBarIndicatorSize? indicatorSize, Color? dividerColor, Color? labelColor, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Color? unselectedLabelColor, TextStyle? unselectedLabelStyle, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, bool? enableFeedback, void Function(int)? onTap, ScrollPhysics? physics, InteractiveInkFeatureFactory? splashFactory, BorderRadius? splashBorderRadius})
  TabBar$Mate.secondary({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget> tabs} , default:none
    required super.tabs,

    /// optionalParameters: {TabController? controller} , default:none
    super.controller,

    /// optionalParameters: {bool isScrollable = false} , default:processed=BooleanLiteralImpl
    super.isScrollable,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {Color? indicatorColor} , default:none
    super.indicatorColor,

    /// optionalParameters: {bool automaticIndicatorColorAdjustment = true} , default:processed=BooleanLiteralImpl
    super.automaticIndicatorColorAdjustment,

    /// optionalParameters: {double indicatorWeight = 2.0} , default:processed=DoubleLiteralImpl
    super.indicatorWeight,

    /// optionalParameters: {EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero} , default:processed=PrefixedIdentifierImpl
    super.indicatorPadding,

    /// optionalParameters: {Decoration? indicator} , default:none
    super.indicator,

    /// optionalParameters: {TabBarIndicatorSize? indicatorSize} , default:none
    super.indicatorSize,

    /// optionalParameters: {Color? dividerColor} , default:none
    super.dividerColor,

    /// optionalParameters: {Color? labelColor} , default:none
    super.labelColor,

    /// optionalParameters: {TextStyle? labelStyle} , default:none
    super.labelStyle,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , default:none
    super.labelPadding,

    /// optionalParameters: {Color? unselectedLabelColor} , default:none
    super.unselectedLabelColor,

    /// optionalParameters: {TextStyle? unselectedLabelStyle} , default:none
    super.unselectedLabelStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    super.overlayColor,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {void Function(int)? onTap} , default:none
    super.onTap,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    super.physics,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , default:none
    super.splashFactory,

    /// optionalParameters: {BorderRadius? splashBorderRadius} , default:none
    super.splashBorderRadius,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'tabs': _i2.BuilderArg<List<_i4.Widget>>(
            name: 'tabs',
            init: tabs,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i6.TabController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'isScrollable': _i2.BuilderArg<bool>(
            name: 'isScrollable',
            init: isScrollable,
            isNamed: true,
            defaultValue: false,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'indicatorColor': _i2.BuilderArg<_i7.Color?>(
            name: 'indicatorColor',
            init: indicatorColor,
            isNamed: true,
          ),
          'automaticIndicatorColorAdjustment': _i2.BuilderArg<bool>(
            name: 'automaticIndicatorColorAdjustment',
            init: automaticIndicatorColorAdjustment,
            isNamed: true,
            defaultValue: true,
          ),
          'indicatorWeight': _i2.BuilderArg<double>(
            name: 'indicatorWeight',
            init: indicatorWeight,
            isNamed: true,
            defaultValue: 2.0,
          ),
          'indicatorPadding': _i2.BuilderArg<_i5.EdgeInsetsGeometry>(
            name: 'indicatorPadding',
            init: indicatorPadding,
            isNamed: true,
            defaultValue: _i8.EdgeInsets.zero,
          ),
          'indicator': _i2.BuilderArg<_i9.Decoration?>(
            name: 'indicator',
            init: indicator,
            isNamed: true,
          ),
          'indicatorSize': _i2.BuilderArg<_i1.TabBarIndicatorSize?>(
            name: 'indicatorSize',
            init: indicatorSize,
            isNamed: true,
          ),
          'dividerColor': _i2.BuilderArg<_i7.Color?>(
            name: 'dividerColor',
            init: dividerColor,
            isNamed: true,
          ),
          'labelColor': _i2.BuilderArg<_i7.Color?>(
            name: 'labelColor',
            init: labelColor,
            isNamed: true,
          ),
          'labelStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'labelStyle',
            init: labelStyle,
            isNamed: true,
          ),
          'labelPadding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'labelPadding',
            init: labelPadding,
            isNamed: true,
          ),
          'unselectedLabelColor': _i2.BuilderArg<_i7.Color?>(
            name: 'unselectedLabelColor',
            init: unselectedLabelColor,
            isNamed: true,
          ),
          'unselectedLabelStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'unselectedLabelStyle',
            init: unselectedLabelStyle,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i11.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i12.DragStartBehavior.start,
          ),
          'overlayColor': _i2.BuilderArg<_i13.MaterialStateProperty<_i7.Color?>?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i14.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i15.ValueChanged<int>?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'physics': _i2.BuilderArg<_i16.ScrollPhysics?>(
            name: 'physics',
            init: physics,
            isNamed: true,
          ),
          'splashFactory': _i2.BuilderArg<_i17.InteractiveInkFeatureFactory?>(
            name: 'splashFactory',
            init: splashFactory,
            isNamed: true,
          ),
          'splashBorderRadius': _i2.BuilderArg<_i18.BorderRadius?>(
            name: 'splashBorderRadius',
            init: splashBorderRadius,
            isNamed: true,
          ),
        },
        super.secondary() {
    mateBuilderName = 'TabBar.secondary';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabBar$Mate.secondary(
          key: p.get('key').build(),
          tabs: p.get('tabs').build(),
          controller: p.get('controller').build(),
          isScrollable: p.get('isScrollable').build(),
          padding: p.get('padding').build(),
          indicatorColor: p.get('indicatorColor').build(),
          automaticIndicatorColorAdjustment: p.get('automaticIndicatorColorAdjustment').build(),
          indicatorWeight: p.get('indicatorWeight').build(),
          indicatorPadding: p.get('indicatorPadding').build(),
          indicator: p.get('indicator').build(),
          indicatorSize: p.get('indicatorSize').build(),
          dividerColor: p.get('dividerColor').build(),
          labelColor: p.get('labelColor').build(),
          labelStyle: p.get('labelStyle').build(),
          labelPadding: p.get('labelPadding').build(),
          unselectedLabelColor: p.get('unselectedLabelColor').build(),
          unselectedLabelStyle: p.get('unselectedLabelStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          overlayColor: p.get('overlayColor').build(),
          mouseCursor: p.get('mouseCursor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          onTap: p.get('onTap').build(),
          physics: p.get('physics').build(),
          splashFactory: p.get('splashFactory').build(),
          splashBorderRadius: p.get('splashBorderRadius').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TabBarView extends StatefulWidget
class TabBarView$Mate extends _i1.TabBarView with _i2.Mate {
  /// TabBarView TabBarView({Key? key, required List<Widget> children, TabController? controller, ScrollPhysics? physics, DragStartBehavior dragStartBehavior = DragStartBehavior.start, double viewportFraction = 1.0, Clip clipBehavior = Clip.hardEdge})
  TabBarView$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget> children} , default:none
    required super.children,

    /// optionalParameters: {TabController? controller} , default:none
    super.controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    super.physics,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {double viewportFraction = 1.0} , default:processed=DoubleLiteralImpl
    super.viewportFraction,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i4.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i6.TabController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'physics': _i2.BuilderArg<_i16.ScrollPhysics?>(
            name: 'physics',
            init: physics,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i11.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i12.DragStartBehavior.start,
          ),
          'viewportFraction': _i2.BuilderArg<double>(
            name: 'viewportFraction',
            init: viewportFraction,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'clipBehavior': _i2.BuilderArg<_i7.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i7.Clip.hardEdge,
          ),
        },
        super() {
    mateBuilderName = 'TabBarView';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabBarView$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          viewportFraction: p.get('viewportFraction').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TabPageSelectorIndicator extends StatelessWidget
class TabPageSelectorIndicator$Mate extends _i1.TabPageSelectorIndicator with _i2.Mate {
  /// TabPageSelectorIndicator TabPageSelectorIndicator({Key? key, required Color backgroundColor, required Color borderColor, required double size, BorderStyle borderStyle = BorderStyle.solid})
  TabPageSelectorIndicator$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Color backgroundColor} , default:none
    required super.backgroundColor,

    /// optionalParameters: {required Color borderColor} , default:none
    required super.borderColor,

    /// optionalParameters: {required double size} , default:none
    required super.size,

    /// optionalParameters: {BorderStyle borderStyle = BorderStyle.solid} , default:processed=PrefixedIdentifierImpl
    super.borderStyle,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i7.Color>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'borderColor': _i2.BuilderArg<_i7.Color>(
            name: 'borderColor',
            init: borderColor,
            isNamed: true,
          ),
          'size': _i2.BuilderArg<double>(
            name: 'size',
            init: size,
            isNamed: true,
          ),
          'borderStyle': _i2.BuilderArg<_i19.BorderStyle>(
            name: 'borderStyle',
            init: borderStyle,
            isNamed: true,
            defaultValue: _i8.BorderStyle.solid,
          ),
        },
        super() {
    mateBuilderName = 'TabPageSelectorIndicator';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabPageSelectorIndicator$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          borderColor: p.get('borderColor').build(),
          size: p.get('size').build(),
          borderStyle: p.get('borderStyle').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TabPageSelector extends StatelessWidget
class TabPageSelector$Mate extends _i1.TabPageSelector with _i2.Mate {
  /// TabPageSelector TabPageSelector({Key? key, TabController? controller, double indicatorSize = 12.0, Color? color, Color? selectedColor, BorderStyle? borderStyle})
  TabPageSelector$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {TabController? controller} , default:none
    super.controller,

    /// optionalParameters: {double indicatorSize = 12.0} , default:processed=DoubleLiteralImpl
    super.indicatorSize,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? selectedColor} , default:none
    super.selectedColor,

    /// optionalParameters: {BorderStyle? borderStyle} , default:none
    super.borderStyle,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i6.TabController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'indicatorSize': _i2.BuilderArg<double>(
            name: 'indicatorSize',
            init: indicatorSize,
            isNamed: true,
            defaultValue: 12.0,
          ),
          'color': _i2.BuilderArg<_i7.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'selectedColor': _i2.BuilderArg<_i7.Color?>(
            name: 'selectedColor',
            init: selectedColor,
            isNamed: true,
          ),
          'borderStyle': _i2.BuilderArg<_i19.BorderStyle?>(
            name: 'borderStyle',
            init: borderStyle,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TabPageSelector';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabPageSelector$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          indicatorSize: p.get('indicatorSize').build(),
          color: p.get('color').build(),
          selectedColor: p.get('selectedColor').build(),
          borderStyle: p.get('borderStyle').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
