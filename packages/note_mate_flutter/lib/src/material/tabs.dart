// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/tabs.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/tab_controller.dart';
import 'dart:ui';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';

/// class Tab extends StatelessWidget implements PreferredSizeWidget
class Tab$Mate extends Tab with Mate {
  /// Tab Tab({Key? key, String? text, Widget? icon, EdgeInsetsGeometry iconMargin = const EdgeInsets.only(bottom: 10.0), double? height, Widget? child})
  Tab$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {String? text} , defaultValue:none
    String? text,

    /// optionalParameters: {Widget? icon} , defaultValue:none
    Widget? icon,

    /// optionalParameters: {EdgeInsetsGeometry iconMargin = const EdgeInsets.only(bottom: 10.0)} , defaultValue:unprocessed
    required EdgeInsetsGeometry iconMargin,

    /// optionalParameters: {double? height} , defaultValue:none
    double? height,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          text: text,
          icon: icon,
          iconMargin: iconMargin,
          height: height,
          child: child,
        ) {
    mateCreateName = 'Tab';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Tab$Mate(
          key: p.get('key').build(),
          text: p.get('text').build(),
          icon: p.get('icon').build(),
          iconMargin: p.get('iconMargin').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('text', text);
    mateUse('icon', icon);
    mateUse('iconMargin', iconMargin);
    mateUse('height', height);
    mateUse('child', child);
  }
}

/// class TabBar extends StatefulWidget implements PreferredSizeWidget
class TabBar$Mate extends TabBar with Mate {
  /// TabBar TabBar({Key? key, required List<Widget> tabs, TabController? controller, bool isScrollable = false, EdgeInsetsGeometry? padding, Color? indicatorColor, bool automaticIndicatorColorAdjustment = true, double indicatorWeight = 2.0, EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero, Decoration? indicator, TabBarIndicatorSize? indicatorSize, Color? dividerColor, Color? labelColor, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, Color? unselectedLabelColor, TextStyle? unselectedLabelStyle, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, bool? enableFeedback, void Function(int)? onTap, ScrollPhysics? physics, InteractiveInkFeatureFactory? splashFactory, BorderRadius? splashBorderRadius})
  TabBar$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<Widget> tabs} , defaultValue:none
    required List<Widget> tabs,

    /// optionalParameters: {TabController? controller} , defaultValue:none
    TabController? controller,

    /// optionalParameters: {bool isScrollable = false} , defaultValue:Literal
    bool isScrollable = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color? indicatorColor} , defaultValue:none
    Color? indicatorColor,

    /// optionalParameters: {bool automaticIndicatorColorAdjustment = true} , defaultValue:Literal
    bool automaticIndicatorColorAdjustment = true,

    /// optionalParameters: {double indicatorWeight = 2.0} , defaultValue:Literal
    double indicatorWeight = 2.0,

    /// optionalParameters: {EdgeInsetsGeometry indicatorPadding = EdgeInsets.zero} , defaultValue:unprocessed
    required EdgeInsetsGeometry indicatorPadding,

    /// optionalParameters: {Decoration? indicator} , defaultValue:none
    Decoration? indicator,

    /// optionalParameters: {TabBarIndicatorSize? indicatorSize} , defaultValue:none
    TabBarIndicatorSize? indicatorSize,

    /// optionalParameters: {Color? dividerColor} , defaultValue:none
    Color? dividerColor,

    /// optionalParameters: {Color? labelColor} , defaultValue:none
    Color? labelColor,

    /// optionalParameters: {TextStyle? labelStyle} , defaultValue:none
    TextStyle? labelStyle,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , defaultValue:none
    EdgeInsetsGeometry? labelPadding,

    /// optionalParameters: {Color? unselectedLabelColor} , defaultValue:none
    Color? unselectedLabelColor,

    /// optionalParameters: {TextStyle? unselectedLabelStyle} , defaultValue:none
    TextStyle? unselectedLabelStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , defaultValue:none
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool? enableFeedback} , defaultValue:none
    bool? enableFeedback,

    /// optionalParameters: {void Function(int)? onTap} , defaultValue:none
    ValueChanged<int>? onTap,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , defaultValue:none
    InteractiveInkFeatureFactory? splashFactory,

    /// optionalParameters: {BorderRadius? splashBorderRadius} , defaultValue:none
    BorderRadius? splashBorderRadius,
  }) : super(
          key: key,
          tabs: tabs,
          controller: controller,
          isScrollable: isScrollable,
          padding: padding,
          indicatorColor: indicatorColor,
          automaticIndicatorColorAdjustment: automaticIndicatorColorAdjustment,
          indicatorWeight: indicatorWeight,
          indicatorPadding: indicatorPadding,
          indicator: indicator,
          indicatorSize: indicatorSize,
          dividerColor: dividerColor,
          labelColor: labelColor,
          labelStyle: labelStyle,
          labelPadding: labelPadding,
          unselectedLabelColor: unselectedLabelColor,
          unselectedLabelStyle: unselectedLabelStyle,
          dragStartBehavior: dragStartBehavior,
          overlayColor: overlayColor,
          mouseCursor: mouseCursor,
          enableFeedback: enableFeedback,
          onTap: onTap,
          physics: physics,
          splashFactory: splashFactory,
          splashBorderRadius: splashBorderRadius,
        ) {
    mateCreateName = 'TabBar';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabBar$Mate(
          key: p.get('key').build(),
          tabs: p.get('tabs').build(),
          controller: p.get('controller').build(),
          isScrollable: p.get('isScrollable').build(),
          padding: p.get('padding').build(),
          indicatorColor: p.get('indicatorColor').build(),
          automaticIndicatorColorAdjustment: p.get('automaticIndicatorColorAdjustment').build(),
          indicatorWeight: p.get('indicatorWeight').build(),
          indicatorPadding: p.get('indicatorPadding').build(),
          indicator: p.get('indicator').build(),
          indicatorSize: p.get('indicatorSize').build(),
          dividerColor: p.get('dividerColor').build(),
          labelColor: p.get('labelColor').build(),
          labelStyle: p.get('labelStyle').build(),
          labelPadding: p.get('labelPadding').build(),
          unselectedLabelColor: p.get('unselectedLabelColor').build(),
          unselectedLabelStyle: p.get('unselectedLabelStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          overlayColor: p.get('overlayColor').build(),
          mouseCursor: p.get('mouseCursor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          onTap: p.get('onTap').build(),
          physics: p.get('physics').build(),
          splashFactory: p.get('splashFactory').build(),
          splashBorderRadius: p.get('splashBorderRadius').build(),
        );
    mateUse('key', key);
    mateUse('tabs', tabs);
    mateUse('controller', controller);
    mateUse('isScrollable', isScrollable);
    mateUse('padding', padding);
    mateUse('indicatorColor', indicatorColor);
    mateUse('automaticIndicatorColorAdjustment', automaticIndicatorColorAdjustment);
    mateUse('indicatorWeight', indicatorWeight);
    mateUse('indicatorPadding', indicatorPadding);
    mateUse('indicator', indicator);
    mateUse('indicatorSize', indicatorSize);
    mateUse('dividerColor', dividerColor);
    mateUse('labelColor', labelColor);
    mateUse('labelStyle', labelStyle);
    mateUse('labelPadding', labelPadding);
    mateUse('unselectedLabelColor', unselectedLabelColor);
    mateUse('unselectedLabelStyle', unselectedLabelStyle);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('overlayColor', overlayColor);
    mateUse('mouseCursor', mouseCursor);
    mateUse('enableFeedback', enableFeedback);
    mateUse('onTap', onTap);
    mateUse('physics', physics);
    mateUse('splashFactory', splashFactory);
    mateUse('splashBorderRadius', splashBorderRadius);
  }
}

/// class TabBarView extends StatefulWidget
class TabBarView$Mate extends TabBarView with Mate {
  /// TabBarView TabBarView({Key? key, required List<Widget> children, TabController? controller, ScrollPhysics? physics, DragStartBehavior dragStartBehavior = DragStartBehavior.start, double viewportFraction = 1.0, Clip clipBehavior = Clip.hardEdge})
  TabBarView$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<Widget> children} , defaultValue:none
    required List<Widget> children,

    /// optionalParameters: {TabController? controller} , defaultValue:none
    TabController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {double viewportFraction = 1.0} , defaultValue:Literal
    double viewportFraction = 1.0,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super(
          key: key,
          children: children,
          controller: controller,
          physics: physics,
          dragStartBehavior: dragStartBehavior,
          viewportFraction: viewportFraction,
          clipBehavior: clipBehavior,
        ) {
    mateCreateName = 'TabBarView';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabBarView$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          viewportFraction: p.get('viewportFraction').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse('key', key);
    mateUse('children', children);
    mateUse('controller', controller);
    mateUse('physics', physics);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('viewportFraction', viewportFraction);
    mateUse('clipBehavior', clipBehavior);
  }
}

/// class TabPageSelectorIndicator extends StatelessWidget
class TabPageSelectorIndicator$Mate extends TabPageSelectorIndicator with Mate {
  /// TabPageSelectorIndicator TabPageSelectorIndicator({Key? key, required Color backgroundColor, required Color borderColor, required double size, BorderStyle borderStyle = BorderStyle.solid})
  TabPageSelectorIndicator$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Color backgroundColor} , defaultValue:none
    required Color backgroundColor,

    /// optionalParameters: {required Color borderColor} , defaultValue:none
    required Color borderColor,

    /// optionalParameters: {required double size} , defaultValue:none
    required double size,

    /// optionalParameters: {BorderStyle borderStyle = BorderStyle.solid} , defaultValue:unprocessed
    required BorderStyle borderStyle,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          borderColor: borderColor,
          size: size,
          borderStyle: borderStyle,
        ) {
    mateCreateName = 'TabPageSelectorIndicator';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabPageSelectorIndicator$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          borderColor: p.get('borderColor').build(),
          size: p.get('size').build(),
          borderStyle: p.get('borderStyle').build(),
        );
    mateUse('key', key);
    mateUse('backgroundColor', backgroundColor);
    mateUse('borderColor', borderColor);
    mateUse('size', size);
    mateUse('borderStyle', borderStyle);
  }
}

/// class TabPageSelector extends StatelessWidget
class TabPageSelector$Mate extends TabPageSelector with Mate {
  /// TabPageSelector TabPageSelector({Key? key, TabController? controller, double indicatorSize = 12.0, Color? color, Color? selectedColor, BorderStyle? borderStyle})
  TabPageSelector$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {TabController? controller} , defaultValue:none
    TabController? controller,

    /// optionalParameters: {double indicatorSize = 12.0} , defaultValue:Literal
    double indicatorSize = 12.0,

    /// optionalParameters: {Color? color} , defaultValue:none
    Color? color,

    /// optionalParameters: {Color? selectedColor} , defaultValue:none
    Color? selectedColor,

    /// optionalParameters: {BorderStyle? borderStyle} , defaultValue:none
    BorderStyle? borderStyle,
  }) : super(
          key: key,
          controller: controller,
          indicatorSize: indicatorSize,
          color: color,
          selectedColor: selectedColor,
          borderStyle: borderStyle,
        ) {
    mateCreateName = 'TabPageSelector';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TabPageSelector$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          indicatorSize: p.get('indicatorSize').build(),
          color: p.get('color').build(),
          selectedColor: p.get('selectedColor').build(),
          borderStyle: p.get('borderStyle').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('indicatorSize', indicatorSize);
    mateUse('color', color);
    mateUse('selectedColor', selectedColor);
    mateUse('borderStyle', borderStyle);
  }
}
