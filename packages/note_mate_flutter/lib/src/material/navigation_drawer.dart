// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/navigation_drawer.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:note/mate.dart';

/// class NavigationDrawer extends StatelessWidget
class NavigationDrawer$Mate extends NavigationDrawer with Mate<NavigationDrawer$Mate> {
  /// NavigationDrawer NavigationDrawer({Key? key, required List<Widget> children, Color? backgroundColor, Color? shadowColor, Color? surfaceTintColor, double? elevation, Color? indicatorColor, ShapeBorder? indicatorShape, void Function(int)? onDestinationSelected, int? selectedIndex = 0})
  NavigationDrawer$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<Widget> children} , hasDefaultValue:false, defaultValueCode:null
    required List<Widget> children,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<int>? onDestinationSelected,

    /// optionalParameters: {int? selectedIndex = 0} , hasDefaultValue:true, defaultValueCode:0
    int? selectedIndex,
  }) : super(
          key: key,
          children: children,
          backgroundColor: backgroundColor,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          elevation: elevation,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          onDestinationSelected: onDestinationSelected,
          selectedIndex: selectedIndex,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationDrawer$Mate(
        key: p.get('key').build(),
        children: p.get('children').build(),
        backgroundColor: p.get('backgroundColor').build(),
        shadowColor: p.get('shadowColor').build(),
        surfaceTintColor: p.get('surfaceTintColor').build(),
        elevation: p.get('elevation').build(),
        indicatorColor: p.get('indicatorColor').build(),
        indicatorShape: p.get('indicatorShape').build(),
        onDestinationSelected: p.get('onDestinationSelected').build(),
        selectedIndex: p.get('selectedIndex').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.putList('children', children);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('shadowColor', shadowColor);
    mateParams.put('surfaceTintColor', surfaceTintColor);
    mateParams.put('elevation', elevation);
    mateParams.put('indicatorColor', indicatorColor);
    mateParams.put('indicatorShape', indicatorShape);
    mateParams.put('onDestinationSelected', onDestinationSelected);
    mateParams.put('selectedIndex', selectedIndex);
  }
}

/// class NavigationDrawerDestination extends StatelessWidget
class NavigationDrawerDestination$Mate extends NavigationDrawerDestination with Mate<NavigationDrawerDestination$Mate> {
  /// NavigationDrawerDestination NavigationDrawerDestination({Key? key, Color? backgroundColor, required Widget icon, Widget? selectedIcon, required Widget label})
  NavigationDrawerDestination$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {required Widget icon} , hasDefaultValue:false, defaultValueCode:null
    required Widget icon,

    /// optionalParameters: {Widget? selectedIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? selectedIcon,

    /// optionalParameters: {required Widget label} , hasDefaultValue:false, defaultValueCode:null
    required Widget label,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          icon: icon,
          selectedIcon: selectedIcon,
          label: label,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationDrawerDestination$Mate(
        key: p.get('key').build(),
        backgroundColor: p.get('backgroundColor').build(),
        icon: p.get('icon').build(),
        selectedIcon: p.get('selectedIcon').build(),
        label: p.get('label').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('icon', icon);
    mateParams.put('selectedIcon', selectedIcon);
    mateParams.put('label', label);
  }
}
