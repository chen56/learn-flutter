// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/radio_list_tile.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/foundation/basic_types.dart';import 'package:flutter/src/services/mouse_cursor.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/material/material_state.dart';import 'package:flutter/src/material/theme_data.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:flutter/src/material/list_tile.dart';import 'package:flutter/src/painting/edge_insets.dart';import 'package:flutter/src/painting/borders.dart';import 'package:flutter/src/widgets/focus_manager.dart';import 'package:note/mate.dart' show Mate;/// class RadioListTile<T> extends StatelessWidget
class RadioListTile$Mate<T> extends RadioListTile<T> with Mate {/// RadioListTile<T> RadioListTile({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, bool autofocus = false, EdgeInsetsGeometry? contentPadding, ShapeBorder? shape, Color? tileColor, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback})
RadioListTile$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required T value} , hasDefaultValue:false, defaultValueCode:null
required T value, /// optionalParameters: {required T? groupValue} , hasDefaultValue:false, defaultValueCode:null
required T? groupValue, /// optionalParameters: {required void Function(T?)? onChanged} , hasDefaultValue:false, defaultValueCode:null
required ValueChanged<T?>? onChanged, /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
MouseCursor? mouseCursor, /// optionalParameters: {bool toggleable = false} , hasDefaultValue:true, defaultValueCode:false
required bool toggleable, /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
Color? activeColor, /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? fillColor, /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
Color? hoverColor, /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? overlayColor, /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
double? splashRadius, /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
MaterialTapTargetSize? materialTapTargetSize, /// optionalParameters: {Widget? title} , hasDefaultValue:false, defaultValueCode:null
Widget? title, /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
Widget? subtitle, /// optionalParameters: {bool isThreeLine = false} , hasDefaultValue:true, defaultValueCode:false
required bool isThreeLine, /// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
bool? dense, /// optionalParameters: {Widget? secondary} , hasDefaultValue:false, defaultValueCode:null
Widget? secondary, /// optionalParameters: {bool selected = false} , hasDefaultValue:true, defaultValueCode:false
required bool selected, /// optionalParameters: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform} , hasDefaultValue:true, defaultValueCode:ListTileControlAffinity.platform
required ListTileControlAffinity controlAffinity, /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
required bool autofocus, /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
EdgeInsetsGeometry? contentPadding, /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
ShapeBorder? shape, /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
Color? tileColor, /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedTileColor, /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
VisualDensity? visualDensity, /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
FocusNode? focusNode, /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool>? onFocusChange, /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
bool? enableFeedback, }) : super(key: key, value: value, groupValue: groupValue, onChanged: onChanged, mouseCursor: mouseCursor, toggleable: toggleable, activeColor: activeColor, fillColor: fillColor, hoverColor: hoverColor, overlayColor: overlayColor, splashRadius: splashRadius, materialTapTargetSize: materialTapTargetSize, title: title, subtitle: subtitle, isThreeLine: isThreeLine, dense: dense, secondary: secondary, selected: selected, controlAffinity: controlAffinity, autofocus: autofocus, contentPadding: contentPadding, shape: shape, tileColor: tileColor, selectedTileColor: selectedTileColor, visualDensity: visualDensity, focusNode: focusNode, onFocusChange: onFocusChange, enableFeedback: enableFeedback, ) { mateBuilder = (p) => RadioListTile$Mate<T>(key: p.get('key').build(), value: p.get('value').build(), groupValue: p.get('groupValue').build(), onChanged: p.get('onChanged').build(), mouseCursor: p.get('mouseCursor').build(), toggleable: p.get('toggleable').build(), activeColor: p.get('activeColor').build(), fillColor: p.get('fillColor').build(), hoverColor: p.get('hoverColor').build(), overlayColor: p.get('overlayColor').build(), splashRadius: p.get('splashRadius').build(), materialTapTargetSize: p.get('materialTapTargetSize').build(), title: p.get('title').build(), subtitle: p.get('subtitle').build(), isThreeLine: p.get('isThreeLine').build(), dense: p.get('dense').build(), secondary: p.get('secondary').build(), selected: p.get('selected').build(), controlAffinity: p.get('controlAffinity').build(), autofocus: p.get('autofocus').build(), contentPadding: p.get('contentPadding').build(), shape: p.get('shape').build(), tileColor: p.get('tileColor').build(), selectedTileColor: p.get('selectedTileColor').build(), visualDensity: p.get('visualDensity').build(), focusNode: p.get('focusNode').build(), onFocusChange: p.get('onFocusChange').build(), enableFeedback: p.get('enableFeedback').build(), );
matePut('key', key);
matePut('value', value);
matePut('groupValue', groupValue);
matePut('onChanged', onChanged);
matePut('mouseCursor', mouseCursor);
matePut('toggleable', toggleable);
matePut('activeColor', activeColor);
matePut('fillColor', fillColor);
matePut('hoverColor', hoverColor);
matePut('overlayColor', overlayColor);
matePut('splashRadius', splashRadius);
matePut('materialTapTargetSize', materialTapTargetSize);
matePut('title', title);
matePut('subtitle', subtitle);
matePut('isThreeLine', isThreeLine);
matePut('dense', dense);
matePut('secondary', secondary);
matePut('selected', selected);
matePut('controlAffinity', controlAffinity);
matePut('autofocus', autofocus);
matePut('contentPadding', contentPadding);
matePut('shape', shape);
matePut('tileColor', tileColor);
matePut('selectedTileColor', selectedTileColor);
matePut('visualDensity', visualDensity);
matePut('focusNode', focusNode);
matePut('onFocusChange', onFocusChange);
matePut('enableFeedback', enableFeedback); }

 }
