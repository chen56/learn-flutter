// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/range_slider.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class RangeSlider extends StatefulWidget
class RangeSlider$Mate extends RangeSlider with Mate {
  /// RangeSlider RangeSlider({Key? key, required RangeValues values, required void Function(RangeValues)? onChanged, void Function(RangeValues)? onChangeStart, void Function(RangeValues)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, RangeLabels? labels, Color? activeColor, Color? inactiveColor, MaterialStateProperty<Color?>? overlayColor, MaterialStateProperty<MouseCursor?>? mouseCursor, String Function(double)? semanticFormatterCallback})
  RangeSlider$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required RangeValues values} , default:none
    required RangeValues values,

    /// optionalParameters: {required void Function(RangeValues)? onChanged} , default:none
    required ValueChanged<RangeValues>? onChanged,

    /// optionalParameters: {void Function(RangeValues)? onChangeStart} , default:none
    ValueChanged<RangeValues>? onChangeStart,

    /// optionalParameters: {void Function(RangeValues)? onChangeEnd} , default:none
    ValueChanged<RangeValues>? onChangeEnd,

    /// optionalParameters: {double min = 0.0} , default:processed=DoubleLiteralImpl
    double min = 0.0,

    /// optionalParameters: {double max = 1.0} , default:processed=DoubleLiteralImpl
    double max = 1.0,

    /// optionalParameters: {int? divisions} , default:none
    int? divisions,

    /// optionalParameters: {RangeLabels? labels} , default:none
    RangeLabels? labels,

    /// optionalParameters: {Color? activeColor} , default:none
    Color? activeColor,

    /// optionalParameters: {Color? inactiveColor} , default:none
    Color? inactiveColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {String Function(double)? semanticFormatterCallback} , default:none
    SemanticFormatterCallback? semanticFormatterCallback,
  }) : super(
          key: key,
          values: values,
          onChanged: onChanged,
          onChangeStart: onChangeStart,
          onChangeEnd: onChangeEnd,
          min: min,
          max: max,
          divisions: divisions,
          labels: labels,
          activeColor: activeColor,
          inactiveColor: inactiveColor,
          overlayColor: overlayColor,
          mouseCursor: mouseCursor,
          semanticFormatterCallback: semanticFormatterCallback,
        ) {
    mateBuilderName = 'RangeSlider';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RangeSlider$Mate(
          key: p.get('key').build(),
          values: p.get('values').build(),
          onChanged: p.get('onChanged').build(),
          onChangeStart: p.get('onChangeStart').build(),
          onChangeEnd: p.get('onChangeEnd').build(),
          min: p.get('min').build(),
          max: p.get('max').build(),
          divisions: p.get('divisions').build(),
          labels: p.get('labels').build(),
          activeColor: p.get('activeColor').build(),
          inactiveColor: p.get('inactiveColor').build(),
          overlayColor: p.get('overlayColor').build(),
          mouseCursor: p.get('mouseCursor').build(),
          semanticFormatterCallback: p.get('semanticFormatterCallback').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'values',
      values,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'onChangeStart',
      onChangeStart,
      isNamed: true,
    );
    mateUse(
      'onChangeEnd',
      onChangeEnd,
      isNamed: true,
    );
    mateUse(
      'min',
      min,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'max',
      max,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'divisions',
      divisions,
      isNamed: true,
    );
    mateUse(
      'labels',
      labels,
      isNamed: true,
    );
    mateUse(
      'activeColor',
      activeColor,
      isNamed: true,
    );
    mateUse(
      'inactiveColor',
      inactiveColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'semanticFormatterCallback',
      semanticFormatterCallback,
      isNamed: true,
    );
  }
}
