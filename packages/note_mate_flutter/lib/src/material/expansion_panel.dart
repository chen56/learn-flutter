// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/expansion_panel.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/foundation/key.dart' as _i5;
import 'package:flutter/src/painting/edge_insets.dart' as _i6;

/// class ExpansionPanel
class ExpansionPanel$Mate extends _i1.ExpansionPanel with _i2.Mate {
  /// ExpansionPanel ExpansionPanel({required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool isExpanded = false, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanel$Mate({
    /// optionalParameters: {required Widget Function(BuildContext, bool) headerBuilder} , default:none
    required _i1.ExpansionPanelHeaderBuilder headerBuilder,

    /// optionalParameters: {required Widget body} , default:none
    required _i3.Widget body,

    /// optionalParameters: {bool isExpanded = false} , default:processed=BooleanLiteralImpl
    bool isExpanded = false,

    /// optionalParameters: {bool canTapOnHeader = false} , default:processed=BooleanLiteralImpl
    bool canTapOnHeader = false,

    /// optionalParameters: {Color? backgroundColor} , default:none
    _i4.Color? backgroundColor,
  }) : super(
          headerBuilder: headerBuilder,
          body: body,
          isExpanded: isExpanded,
          canTapOnHeader: canTapOnHeader,
          backgroundColor: backgroundColor,
        ) {
    mateBuilderName = 'ExpansionPanel';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ExpansionPanel$Mate(
          headerBuilder: p.get('headerBuilder').build(),
          body: p.get('body').build(),
          isExpanded: p.get('isExpanded').build(),
          canTapOnHeader: p.get('canTapOnHeader').build(),
          backgroundColor: p.get('backgroundColor').build(),
        );
    mateUse(
      'headerBuilder',
      headerBuilder,
      isNamed: true,
    );
    mateUse(
      'body',
      body,
      isNamed: true,
    );
    mateUse(
      'isExpanded',
      isExpanded,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'canTapOnHeader',
      canTapOnHeader,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
  }
}

/// class ExpansionPanelRadio extends ExpansionPanel
class ExpansionPanelRadio$Mate extends _i1.ExpansionPanelRadio with _i2.Mate {
  /// ExpansionPanelRadio ExpansionPanelRadio({required Object value, required Widget Function(BuildContext, bool) headerBuilder, required Widget body, bool canTapOnHeader = false, Color? backgroundColor})
  ExpansionPanelRadio$Mate({
    /// optionalParameters: {required Object value} , default:none
    required Object value,

    /// optionalParameters: {required Widget Function(BuildContext, bool) headerBuilder} , default:none
    required _i1.ExpansionPanelHeaderBuilder headerBuilder,

    /// optionalParameters: {required Widget body} , default:none
    required _i3.Widget body,

    /// optionalParameters: {bool canTapOnHeader = false} , default:processed=BooleanLiteralImpl
    bool canTapOnHeader = false,

    /// optionalParameters: {Color? backgroundColor} , default:none
    _i4.Color? backgroundColor,
  }) : super(
          value: value,
          headerBuilder: headerBuilder,
          body: body,
          canTapOnHeader: canTapOnHeader,
          backgroundColor: backgroundColor,
        ) {
    mateBuilderName = 'ExpansionPanelRadio';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ExpansionPanelRadio$Mate(
          value: p.get('value').build(),
          headerBuilder: p.get('headerBuilder').build(),
          body: p.get('body').build(),
          canTapOnHeader: p.get('canTapOnHeader').build(),
          backgroundColor: p.get('backgroundColor').build(),
        );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'headerBuilder',
      headerBuilder,
      isNamed: true,
    );
    mateUse(
      'body',
      body,
      isNamed: true,
    );
    mateUse(
      'canTapOnHeader',
      canTapOnHeader,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
  }
}

/// class ExpansionPanelList extends StatefulWidget
class ExpansionPanelList$Mate extends _i1.ExpansionPanelList with _i2.Mate {
  /// ExpansionPanelList ExpansionPanelList({Key? key, List<ExpansionPanel> children = const <ExpansionPanel>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelList$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i5.Key? key,

    /// optionalParameters: {List<ExpansionPanel> children = const <ExpansionPanel>[]} , default:unprocessed=ListLiteralImpl
    required List<_i1.ExpansionPanel> children,

    /// optionalParameters: {void Function(int, bool)? expansionCallback} , default:none
    _i1.ExpansionPanelCallback? expansionCallback,

    /// optionalParameters: {Duration animationDuration = kThemeAnimationDuration} , default:unprocessed=SimpleIdentifierImpl
    required Duration animationDuration,

    /// optionalParameters: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding} , default:unprocessed=SimpleIdentifierImpl
    required _i6.EdgeInsets expandedHeaderPadding,

    /// optionalParameters: {Color? dividerColor} , default:none
    _i4.Color? dividerColor,

    /// optionalParameters: {double elevation = 2} , default:processed=IntegerLiteralImpl
    double elevation = 2,

    /// optionalParameters: {Color? expandIconColor} , default:none
    _i4.Color? expandIconColor,
  }) : super(
          key: key,
          children: children,
          expansionCallback: expansionCallback,
          animationDuration: animationDuration,
          expandedHeaderPadding: expandedHeaderPadding,
          dividerColor: dividerColor,
          elevation: elevation,
          expandIconColor: expandIconColor,
        ) {
    mateBuilderName = 'ExpansionPanelList';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ExpansionPanelList$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          expansionCallback: p.get('expansionCallback').build(),
          animationDuration: p.get('animationDuration').build(),
          expandedHeaderPadding: p.get('expandedHeaderPadding').build(),
          dividerColor: p.get('dividerColor').build(),
          elevation: p.get('elevation').build(),
          expandIconColor: p.get('expandIconColor').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'expansionCallback',
      expansionCallback,
      isNamed: true,
    );
    mateUse(
      'animationDuration',
      animationDuration,
      isNamed: true,
    );
    mateUse(
      'expandedHeaderPadding',
      expandedHeaderPadding,
      isNamed: true,
    );
    mateUse(
      'dividerColor',
      dividerColor,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 2,
    );
    mateUse(
      'expandIconColor',
      expandIconColor,
      isNamed: true,
    );
  }

  /// ExpansionPanelList ExpansionPanelList.radio({Key? key, List<ExpansionPanel> children = const <ExpansionPanelRadio>[], void Function(int, bool)? expansionCallback, Duration animationDuration = kThemeAnimationDuration, Object? initialOpenPanelValue, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor})
  ExpansionPanelList$Mate.radio({
    /// optionalParameters: {Key? key} , default:none
    _i5.Key? key,

    /// optionalParameters: {List<ExpansionPanel> children = const <ExpansionPanelRadio>[]} , default:unprocessed=ListLiteralImpl
    required List<_i1.ExpansionPanel> children,

    /// optionalParameters: {void Function(int, bool)? expansionCallback} , default:none
    _i1.ExpansionPanelCallback? expansionCallback,

    /// optionalParameters: {Duration animationDuration = kThemeAnimationDuration} , default:unprocessed=SimpleIdentifierImpl
    required Duration animationDuration,

    /// optionalParameters: {Object? initialOpenPanelValue} , default:none
    Object? initialOpenPanelValue,

    /// optionalParameters: {EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding} , default:unprocessed=SimpleIdentifierImpl
    required _i6.EdgeInsets expandedHeaderPadding,

    /// optionalParameters: {Color? dividerColor} , default:none
    _i4.Color? dividerColor,

    /// optionalParameters: {double elevation = 2} , default:processed=IntegerLiteralImpl
    double elevation = 2,

    /// optionalParameters: {Color? expandIconColor} , default:none
    _i4.Color? expandIconColor,
  }) : super.radio(
          key: key,
          children: children,
          expansionCallback: expansionCallback,
          animationDuration: animationDuration,
          initialOpenPanelValue: initialOpenPanelValue,
          expandedHeaderPadding: expandedHeaderPadding,
          dividerColor: dividerColor,
          elevation: elevation,
          expandIconColor: expandIconColor,
        ) {
    mateBuilderName = 'ExpansionPanelList.radio';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ExpansionPanelList$Mate.radio(
          key: p.get('key').build(),
          children: p.get('children').build(),
          expansionCallback: p.get('expansionCallback').build(),
          animationDuration: p.get('animationDuration').build(),
          initialOpenPanelValue: p.get('initialOpenPanelValue').build(),
          expandedHeaderPadding: p.get('expandedHeaderPadding').build(),
          dividerColor: p.get('dividerColor').build(),
          elevation: p.get('elevation').build(),
          expandIconColor: p.get('expandIconColor').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'expansionCallback',
      expansionCallback,
      isNamed: true,
    );
    mateUse(
      'animationDuration',
      animationDuration,
      isNamed: true,
    );
    mateUse(
      'initialOpenPanelValue',
      initialOpenPanelValue,
      isNamed: true,
    );
    mateUse(
      'expandedHeaderPadding',
      expandedHeaderPadding,
      isNamed: true,
    );
    mateUse(
      'dividerColor',
      dividerColor,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 2,
    );
    mateUse(
      'expandIconColor',
      expandIconColor,
      isNamed: true,
    );
  }
}
