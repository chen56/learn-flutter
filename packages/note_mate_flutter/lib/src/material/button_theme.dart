// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/button_theme.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/painting/borders.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/material/color_scheme.dart' as _i8;
import 'package:flutter/src/material/theme_data.dart' as _i9;
import 'package:flutter/src/widgets/framework.dart' as _i10;

/// class ButtonTheme extends InheritedTheme
class ButtonTheme$Mate extends _i1.ButtonTheme with _i2.Mate {
  /// ButtonTheme ButtonTheme({Key? key, ButtonTextTheme textTheme = ButtonTextTheme.normal, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize, required Widget child})
  ButtonTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , default:processed=PrefixedIdentifierImpl
    _i1.ButtonTextTheme textTheme = _i4.ButtonTextTheme.normal,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , default:processed=PrefixedIdentifierImpl
    _i1.ButtonBarLayoutBehavior layoutBehavior = _i4.ButtonBarLayoutBehavior.padded,

    /// optionalParameters: {double minWidth = 88.0} , default:processed=DoubleLiteralImpl
    double minWidth = 88.0,

    /// optionalParameters: {double height = 36.0} , default:processed=DoubleLiteralImpl
    double height = 36.0,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i5.EdgeInsetsGeometry? padding,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    _i6.ShapeBorder? shape,

    /// optionalParameters: {bool alignedDropdown = false} , default:processed=BooleanLiteralImpl
    bool alignedDropdown = false,

    /// optionalParameters: {Color? buttonColor} , default:none
    _i7.Color? buttonColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    _i7.Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i7.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i7.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i7.Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i7.Color? splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , default:none
    _i8.ColorScheme? colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    _i9.MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {required Widget child} , default:none
    required _i10.Widget child,
  }) : super(
          key: key,
          textTheme: textTheme,
          layoutBehavior: layoutBehavior,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
          child: child,
        ) {
    mateBuilderName = 'ButtonTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonTheme$Mate(
          key: p.get('key').build(),
          textTheme: p.get('textTheme').build(),
          layoutBehavior: p.get('layoutBehavior').build(),
          minWidth: p.get('minWidth').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          shape: p.get('shape').build(),
          alignedDropdown: p.get('alignedDropdown').build(),
          buttonColor: p.get('buttonColor').build(),
          disabledColor: p.get('disabledColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          colorScheme: p.get('colorScheme').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'textTheme',
      textTheme,
      isNamed: true,
      defaultValue: _i4.ButtonTextTheme.normal,
    );
    mateUse(
      'layoutBehavior',
      layoutBehavior,
      isNamed: true,
      defaultValue: _i4.ButtonBarLayoutBehavior.padded,
    );
    mateUse(
      'minWidth',
      minWidth,
      isNamed: true,
      defaultValue: 88.0,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
      defaultValue: 36.0,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'alignedDropdown',
      alignedDropdown,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'buttonColor',
      buttonColor,
      isNamed: true,
    );
    mateUse(
      'disabledColor',
      disabledColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'colorScheme',
      colorScheme,
      isNamed: true,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// ButtonTheme ButtonTheme.fromButtonThemeData({Key? key, required ButtonThemeData data, required Widget child})
  ButtonTheme$Mate.fromButtonThemeData({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required ButtonThemeData data} , default:none
    required _i1.ButtonThemeData data,

    /// optionalParameters: {required Widget child} , default:none
    required _i10.Widget child,
  }) : super.fromButtonThemeData(
          key: key,
          data: data,
          child: child,
        ) {
    mateBuilderName = 'ButtonTheme.fromButtonThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonTheme$Mate.fromButtonThemeData(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'data',
      data,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ButtonThemeData with Diagnosticable
class ButtonThemeData$Mate extends _i1.ButtonThemeData with _i2.Mate {
  /// ButtonThemeData ButtonThemeData({ButtonTextTheme textTheme = ButtonTextTheme.normal, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize})
  ButtonThemeData$Mate({
    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , default:processed=PrefixedIdentifierImpl
    _i1.ButtonTextTheme textTheme = _i4.ButtonTextTheme.normal,

    /// optionalParameters: {double minWidth = 88.0} , default:processed=DoubleLiteralImpl
    double minWidth = 88.0,

    /// optionalParameters: {double height = 36.0} , default:processed=DoubleLiteralImpl
    double height = 36.0,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i5.EdgeInsetsGeometry? padding,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    _i6.ShapeBorder? shape,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , default:processed=PrefixedIdentifierImpl
    _i1.ButtonBarLayoutBehavior layoutBehavior = _i4.ButtonBarLayoutBehavior.padded,

    /// optionalParameters: {bool alignedDropdown = false} , default:processed=BooleanLiteralImpl
    bool alignedDropdown = false,

    /// optionalParameters: {Color? buttonColor} , default:none
    _i7.Color? buttonColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    _i7.Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i7.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i7.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i7.Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i7.Color? splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , default:none
    _i8.ColorScheme? colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    _i9.MaterialTapTargetSize? materialTapTargetSize,
  }) : super(
          textTheme: textTheme,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          layoutBehavior: layoutBehavior,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
        ) {
    mateBuilderName = 'ButtonThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonThemeData$Mate(
          textTheme: p.get('textTheme').build(),
          minWidth: p.get('minWidth').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          shape: p.get('shape').build(),
          layoutBehavior: p.get('layoutBehavior').build(),
          alignedDropdown: p.get('alignedDropdown').build(),
          buttonColor: p.get('buttonColor').build(),
          disabledColor: p.get('disabledColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          colorScheme: p.get('colorScheme').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
        );
    mateUse(
      'textTheme',
      textTheme,
      isNamed: true,
      defaultValue: _i4.ButtonTextTheme.normal,
    );
    mateUse(
      'minWidth',
      minWidth,
      isNamed: true,
      defaultValue: 88.0,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
      defaultValue: 36.0,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'layoutBehavior',
      layoutBehavior,
      isNamed: true,
      defaultValue: _i4.ButtonBarLayoutBehavior.padded,
    );
    mateUse(
      'alignedDropdown',
      alignedDropdown,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'buttonColor',
      buttonColor,
      isNamed: true,
    );
    mateUse(
      'disabledColor',
      disabledColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'colorScheme',
      colorScheme,
      isNamed: true,
    );
    mateUse(
      'materialTapTargetSize',
      materialTapTargetSize,
      isNamed: true,
    );
  }
}
