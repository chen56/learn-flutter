// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/button_theme.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ButtonTheme extends InheritedTheme
class ButtonTheme$Mate extends ButtonTheme with Mate {
  /// ButtonTheme ButtonTheme({Key? key, ButtonTextTheme textTheme = ButtonTextTheme.normal, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize, required Widget child})
  ButtonTheme$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , defaultValue:unprocessed
    required ButtonTextTheme textTheme,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , defaultValue:unprocessed
    required ButtonBarLayoutBehavior layoutBehavior,

    /// optionalParameters: {double minWidth = 88.0} , defaultValue:Literal
    double minWidth = 88.0,

    /// optionalParameters: {double height = 36.0} , defaultValue:Literal
    double height = 36.0,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {ShapeBorder? shape} , defaultValue:none
    ShapeBorder? shape,

    /// optionalParameters: {bool alignedDropdown = false} , defaultValue:Literal
    bool alignedDropdown = false,

    /// optionalParameters: {Color? buttonColor} , defaultValue:none
    Color? buttonColor,

    /// optionalParameters: {Color? disabledColor} , defaultValue:none
    Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , defaultValue:none
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , defaultValue:none
    Color? splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , defaultValue:none
    ColorScheme? colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , defaultValue:none
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          textTheme: textTheme,
          layoutBehavior: layoutBehavior,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
          child: child,
        ) {
    mateCreateName = 'ButtonTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonTheme$Mate(
          key: p.get('key').build(),
          textTheme: p.get('textTheme').build(),
          layoutBehavior: p.get('layoutBehavior').build(),
          minWidth: p.get('minWidth').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          shape: p.get('shape').build(),
          alignedDropdown: p.get('alignedDropdown').build(),
          buttonColor: p.get('buttonColor').build(),
          disabledColor: p.get('disabledColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          colorScheme: p.get('colorScheme').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('textTheme', textTheme);
    mateUse('layoutBehavior', layoutBehavior);
    mateUse('minWidth', minWidth);
    mateUse('height', height);
    mateUse('padding', padding);
    mateUse('shape', shape);
    mateUse('alignedDropdown', alignedDropdown);
    mateUse('buttonColor', buttonColor);
    mateUse('disabledColor', disabledColor);
    mateUse('focusColor', focusColor);
    mateUse('hoverColor', hoverColor);
    mateUse('highlightColor', highlightColor);
    mateUse('splashColor', splashColor);
    mateUse('colorScheme', colorScheme);
    mateUse('materialTapTargetSize', materialTapTargetSize);
    mateUse('child', child);
  }

  /// ButtonTheme ButtonTheme.fromButtonThemeData({Key? key, required ButtonThemeData data, required Widget child})
  ButtonTheme$Mate.fromButtonThemeData({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required ButtonThemeData data} , defaultValue:none
    required ButtonThemeData data,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super.fromButtonThemeData(
          key: key,
          data: data,
          child: child,
        ) {
    mateCreateName = 'ButtonTheme.fromButtonThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonTheme$Mate.fromButtonThemeData(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('data', data);
    mateUse('child', child);
  }
}

/// class ButtonThemeData with Diagnosticable
class ButtonThemeData$Mate extends ButtonThemeData with Mate {
  /// ButtonThemeData ButtonThemeData({ButtonTextTheme textTheme = ButtonTextTheme.normal, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize})
  ButtonThemeData$Mate({
    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , defaultValue:unprocessed
    required ButtonTextTheme textTheme,

    /// optionalParameters: {double minWidth = 88.0} , defaultValue:Literal
    double minWidth = 88.0,

    /// optionalParameters: {double height = 36.0} , defaultValue:Literal
    double height = 36.0,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {ShapeBorder? shape} , defaultValue:none
    ShapeBorder? shape,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , defaultValue:unprocessed
    required ButtonBarLayoutBehavior layoutBehavior,

    /// optionalParameters: {bool alignedDropdown = false} , defaultValue:Literal
    bool alignedDropdown = false,

    /// optionalParameters: {Color? buttonColor} , defaultValue:none
    Color? buttonColor,

    /// optionalParameters: {Color? disabledColor} , defaultValue:none
    Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , defaultValue:none
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , defaultValue:none
    Color? splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , defaultValue:none
    ColorScheme? colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , defaultValue:none
    MaterialTapTargetSize? materialTapTargetSize,
  }) : super(
          textTheme: textTheme,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          layoutBehavior: layoutBehavior,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
        ) {
    mateCreateName = 'ButtonThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonThemeData$Mate(
          textTheme: p.get('textTheme').build(),
          minWidth: p.get('minWidth').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          shape: p.get('shape').build(),
          layoutBehavior: p.get('layoutBehavior').build(),
          alignedDropdown: p.get('alignedDropdown').build(),
          buttonColor: p.get('buttonColor').build(),
          disabledColor: p.get('disabledColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          colorScheme: p.get('colorScheme').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
        );
    mateUse('textTheme', textTheme);
    mateUse('minWidth', minWidth);
    mateUse('height', height);
    mateUse('padding', padding);
    mateUse('shape', shape);
    mateUse('layoutBehavior', layoutBehavior);
    mateUse('alignedDropdown', alignedDropdown);
    mateUse('buttonColor', buttonColor);
    mateUse('disabledColor', disabledColor);
    mateUse('focusColor', focusColor);
    mateUse('hoverColor', hoverColor);
    mateUse('highlightColor', highlightColor);
    mateUse('splashColor', splashColor);
    mateUse('colorScheme', colorScheme);
    mateUse('materialTapTargetSize', materialTapTargetSize);
  }
}
