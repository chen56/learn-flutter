// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/toggle_buttons_theme.dart';import 'package:flutter/src/painting/text_style.dart';import 'package:flutter/src/rendering/box.dart';import 'dart:ui';import 'package:flutter/src/painting/border_radius.dart';import 'dart:core';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:note/mate.dart' show Mate;/// class ToggleButtonsThemeData with Diagnosticable
class ToggleButtonsThemeData$Mate extends ToggleButtonsThemeData with Mate {/// ToggleButtonsThemeData ToggleButtonsThemeData({TextStyle? textStyle, BoxConstraints? constraints, Color? color, Color? selectedColor, Color? disabledColor, Color? fillColor, Color? focusColor, Color? highlightColor, Color? hoverColor, Color? splashColor, Color? borderColor, Color? selectedBorderColor, Color? disabledBorderColor, BorderRadius? borderRadius, double? borderWidth})
ToggleButtonsThemeData$Mate({/// optionalParameters: {TextStyle? textStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? textStyle, /// optionalParameters: {BoxConstraints? constraints} , hasDefaultValue:false, defaultValueCode:null
BoxConstraints? constraints, /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
Color? color, /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedColor, /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
Color? disabledColor, /// optionalParameters: {Color? fillColor} , hasDefaultValue:false, defaultValueCode:null
Color? fillColor, /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
Color? focusColor, /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
Color? highlightColor, /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
Color? hoverColor, /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
Color? splashColor, /// optionalParameters: {Color? borderColor} , hasDefaultValue:false, defaultValueCode:null
Color? borderColor, /// optionalParameters: {Color? selectedBorderColor} , hasDefaultValue:false, defaultValueCode:null
Color? selectedBorderColor, /// optionalParameters: {Color? disabledBorderColor} , hasDefaultValue:false, defaultValueCode:null
Color? disabledBorderColor, /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
BorderRadius? borderRadius, /// optionalParameters: {double? borderWidth} , hasDefaultValue:false, defaultValueCode:null
double? borderWidth, }) : super(textStyle: textStyle, constraints: constraints, color: color, selectedColor: selectedColor, disabledColor: disabledColor, fillColor: fillColor, focusColor: focusColor, highlightColor: highlightColor, hoverColor: hoverColor, splashColor: splashColor, borderColor: borderColor, selectedBorderColor: selectedBorderColor, disabledBorderColor: disabledBorderColor, borderRadius: borderRadius, borderWidth: borderWidth, ) { mateBuilder = (p) => ToggleButtonsThemeData$Mate(textStyle: p.get('textStyle').build(), constraints: p.get('constraints').build(), color: p.get('color').build(), selectedColor: p.get('selectedColor').build(), disabledColor: p.get('disabledColor').build(), fillColor: p.get('fillColor').build(), focusColor: p.get('focusColor').build(), highlightColor: p.get('highlightColor').build(), hoverColor: p.get('hoverColor').build(), splashColor: p.get('splashColor').build(), borderColor: p.get('borderColor').build(), selectedBorderColor: p.get('selectedBorderColor').build(), disabledBorderColor: p.get('disabledBorderColor').build(), borderRadius: p.get('borderRadius').build(), borderWidth: p.get('borderWidth').build(), );
matePut('textStyle', textStyle);
matePut('constraints', constraints);
matePut('color', color);
matePut('selectedColor', selectedColor);
matePut('disabledColor', disabledColor);
matePut('fillColor', fillColor);
matePut('focusColor', focusColor);
matePut('highlightColor', highlightColor);
matePut('hoverColor', hoverColor);
matePut('splashColor', splashColor);
matePut('borderColor', borderColor);
matePut('selectedBorderColor', selectedBorderColor);
matePut('disabledBorderColor', disabledBorderColor);
matePut('borderRadius', borderRadius);
matePut('borderWidth', borderWidth); }

 }
/// class ToggleButtonsTheme extends InheritedTheme
class ToggleButtonsTheme$Mate extends ToggleButtonsTheme with Mate {/// ToggleButtonsTheme ToggleButtonsTheme({Key? key, required ToggleButtonsThemeData data, required Widget child})
ToggleButtonsTheme$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required ToggleButtonsThemeData data} , hasDefaultValue:false, defaultValueCode:null
required ToggleButtonsThemeData data, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, data: data, child: child, ) { mateBuilder = (p) => ToggleButtonsTheme$Mate(key: p.get('key').build(), data: p.get('data').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('data', data);
matePut('child', child); }

 }
