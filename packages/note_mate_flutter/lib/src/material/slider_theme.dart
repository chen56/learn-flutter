// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/slider_theme.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class SliderTheme extends InheritedTheme
class SliderTheme$Mate extends SliderTheme with Mate {
  /// SliderTheme SliderTheme({Key? key, required SliderThemeData data, required Widget child})
  SliderTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliderThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required SliderThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateBuilder = (p) => SliderTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    matePut('key', key);
    matePut('data', data);
    matePut('child', child);
  }
}

/// class SliderThemeData with Diagnosticable
class SliderThemeData$Mate extends SliderThemeData with Mate {
  /// SliderThemeData SliderThemeData({double? trackHeight, Color? activeTrackColor, Color? inactiveTrackColor, Color? secondaryActiveTrackColor, Color? disabledActiveTrackColor, Color? disabledInactiveTrackColor, Color? disabledSecondaryActiveTrackColor, Color? activeTickMarkColor, Color? inactiveTickMarkColor, Color? disabledActiveTickMarkColor, Color? disabledInactiveTickMarkColor, Color? thumbColor, Color? overlappingShapeStrokeColor, Color? disabledThumbColor, Color? overlayColor, Color? valueIndicatorColor, SliderComponentShape? overlayShape, SliderTickMarkShape? tickMarkShape, SliderComponentShape? thumbShape, SliderTrackShape? trackShape, SliderComponentShape? valueIndicatorShape, RangeSliderTickMarkShape? rangeTickMarkShape, RangeSliderThumbShape? rangeThumbShape, RangeSliderTrackShape? rangeTrackShape, RangeSliderValueIndicatorShape? rangeValueIndicatorShape, ShowValueIndicator? showValueIndicator, TextStyle? valueIndicatorTextStyle, double? minThumbSeparation, Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector, MaterialStateProperty<MouseCursor?>? mouseCursor})
  SliderThemeData$Mate({
    /// optionalParameters: {double? trackHeight} , hasDefaultValue:false, defaultValueCode:null
    double? trackHeight,

    /// optionalParameters: {Color? activeTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeTrackColor,

    /// optionalParameters: {Color? inactiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveTrackColor,

    /// optionalParameters: {Color? secondaryActiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? secondaryActiveTrackColor,

    /// optionalParameters: {Color? disabledActiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledActiveTrackColor,

    /// optionalParameters: {Color? disabledInactiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledInactiveTrackColor,

    /// optionalParameters: {Color? disabledSecondaryActiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledSecondaryActiveTrackColor,

    /// optionalParameters: {Color? activeTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeTickMarkColor,

    /// optionalParameters: {Color? inactiveTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveTickMarkColor,

    /// optionalParameters: {Color? disabledActiveTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledActiveTickMarkColor,

    /// optionalParameters: {Color? disabledInactiveTickMarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledInactiveTickMarkColor,

    /// optionalParameters: {Color? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    Color? thumbColor,

    /// optionalParameters: {Color? overlappingShapeStrokeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? overlappingShapeStrokeColor,

    /// optionalParameters: {Color? disabledThumbColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledThumbColor,

    /// optionalParameters: {Color? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    Color? overlayColor,

    /// optionalParameters: {Color? valueIndicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? valueIndicatorColor,

    /// optionalParameters: {SliderComponentShape? overlayShape} , hasDefaultValue:false, defaultValueCode:null
    SliderComponentShape? overlayShape,

    /// optionalParameters: {SliderTickMarkShape? tickMarkShape} , hasDefaultValue:false, defaultValueCode:null
    SliderTickMarkShape? tickMarkShape,

    /// optionalParameters: {SliderComponentShape? thumbShape} , hasDefaultValue:false, defaultValueCode:null
    SliderComponentShape? thumbShape,

    /// optionalParameters: {SliderTrackShape? trackShape} , hasDefaultValue:false, defaultValueCode:null
    SliderTrackShape? trackShape,

    /// optionalParameters: {SliderComponentShape? valueIndicatorShape} , hasDefaultValue:false, defaultValueCode:null
    SliderComponentShape? valueIndicatorShape,

    /// optionalParameters: {RangeSliderTickMarkShape? rangeTickMarkShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderTickMarkShape? rangeTickMarkShape,

    /// optionalParameters: {RangeSliderThumbShape? rangeThumbShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderThumbShape? rangeThumbShape,

    /// optionalParameters: {RangeSliderTrackShape? rangeTrackShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderTrackShape? rangeTrackShape,

    /// optionalParameters: {RangeSliderValueIndicatorShape? rangeValueIndicatorShape} , hasDefaultValue:false, defaultValueCode:null
    RangeSliderValueIndicatorShape? rangeValueIndicatorShape,

    /// optionalParameters: {ShowValueIndicator? showValueIndicator} , hasDefaultValue:false, defaultValueCode:null
    ShowValueIndicator? showValueIndicator,

    /// optionalParameters: {TextStyle? valueIndicatorTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? valueIndicatorTextStyle,

    /// optionalParameters: {double? minThumbSeparation} , hasDefaultValue:false, defaultValueCode:null
    double? minThumbSeparation,

    /// optionalParameters: {Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector} , hasDefaultValue:false, defaultValueCode:null
    RangeThumbSelector? thumbSelector,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          trackHeight: trackHeight,
          activeTrackColor: activeTrackColor,
          inactiveTrackColor: inactiveTrackColor,
          secondaryActiveTrackColor: secondaryActiveTrackColor,
          disabledActiveTrackColor: disabledActiveTrackColor,
          disabledInactiveTrackColor: disabledInactiveTrackColor,
          disabledSecondaryActiveTrackColor: disabledSecondaryActiveTrackColor,
          activeTickMarkColor: activeTickMarkColor,
          inactiveTickMarkColor: inactiveTickMarkColor,
          disabledActiveTickMarkColor: disabledActiveTickMarkColor,
          disabledInactiveTickMarkColor: disabledInactiveTickMarkColor,
          thumbColor: thumbColor,
          overlappingShapeStrokeColor: overlappingShapeStrokeColor,
          disabledThumbColor: disabledThumbColor,
          overlayColor: overlayColor,
          valueIndicatorColor: valueIndicatorColor,
          overlayShape: overlayShape,
          tickMarkShape: tickMarkShape,
          thumbShape: thumbShape,
          trackShape: trackShape,
          valueIndicatorShape: valueIndicatorShape,
          rangeTickMarkShape: rangeTickMarkShape,
          rangeThumbShape: rangeThumbShape,
          rangeTrackShape: rangeTrackShape,
          rangeValueIndicatorShape: rangeValueIndicatorShape,
          showValueIndicator: showValueIndicator,
          valueIndicatorTextStyle: valueIndicatorTextStyle,
          minThumbSeparation: minThumbSeparation,
          thumbSelector: thumbSelector,
          mouseCursor: mouseCursor,
        ) {
    mateBuilder = (p) => SliderThemeData$Mate(
          trackHeight: p.get('trackHeight').build(),
          activeTrackColor: p.get('activeTrackColor').build(),
          inactiveTrackColor: p.get('inactiveTrackColor').build(),
          secondaryActiveTrackColor: p.get('secondaryActiveTrackColor').build(),
          disabledActiveTrackColor: p.get('disabledActiveTrackColor').build(),
          disabledInactiveTrackColor: p.get('disabledInactiveTrackColor').build(),
          disabledSecondaryActiveTrackColor: p.get('disabledSecondaryActiveTrackColor').build(),
          activeTickMarkColor: p.get('activeTickMarkColor').build(),
          inactiveTickMarkColor: p.get('inactiveTickMarkColor').build(),
          disabledActiveTickMarkColor: p.get('disabledActiveTickMarkColor').build(),
          disabledInactiveTickMarkColor: p.get('disabledInactiveTickMarkColor').build(),
          thumbColor: p.get('thumbColor').build(),
          overlappingShapeStrokeColor: p.get('overlappingShapeStrokeColor').build(),
          disabledThumbColor: p.get('disabledThumbColor').build(),
          overlayColor: p.get('overlayColor').build(),
          valueIndicatorColor: p.get('valueIndicatorColor').build(),
          overlayShape: p.get('overlayShape').build(),
          tickMarkShape: p.get('tickMarkShape').build(),
          thumbShape: p.get('thumbShape').build(),
          trackShape: p.get('trackShape').build(),
          valueIndicatorShape: p.get('valueIndicatorShape').build(),
          rangeTickMarkShape: p.get('rangeTickMarkShape').build(),
          rangeThumbShape: p.get('rangeThumbShape').build(),
          rangeTrackShape: p.get('rangeTrackShape').build(),
          rangeValueIndicatorShape: p.get('rangeValueIndicatorShape').build(),
          showValueIndicator: p.get('showValueIndicator').build(),
          valueIndicatorTextStyle: p.get('valueIndicatorTextStyle').build(),
          minThumbSeparation: p.get('minThumbSeparation').build(),
          thumbSelector: p.get('thumbSelector').build(),
          mouseCursor: p.get('mouseCursor').build(),
        );
    matePut('trackHeight', trackHeight);
    matePut('activeTrackColor', activeTrackColor);
    matePut('inactiveTrackColor', inactiveTrackColor);
    matePut('secondaryActiveTrackColor', secondaryActiveTrackColor);
    matePut('disabledActiveTrackColor', disabledActiveTrackColor);
    matePut('disabledInactiveTrackColor', disabledInactiveTrackColor);
    matePut('disabledSecondaryActiveTrackColor', disabledSecondaryActiveTrackColor);
    matePut('activeTickMarkColor', activeTickMarkColor);
    matePut('inactiveTickMarkColor', inactiveTickMarkColor);
    matePut('disabledActiveTickMarkColor', disabledActiveTickMarkColor);
    matePut('disabledInactiveTickMarkColor', disabledInactiveTickMarkColor);
    matePut('thumbColor', thumbColor);
    matePut('overlappingShapeStrokeColor', overlappingShapeStrokeColor);
    matePut('disabledThumbColor', disabledThumbColor);
    matePut('overlayColor', overlayColor);
    matePut('valueIndicatorColor', valueIndicatorColor);
    matePut('overlayShape', overlayShape);
    matePut('tickMarkShape', tickMarkShape);
    matePut('thumbShape', thumbShape);
    matePut('trackShape', trackShape);
    matePut('valueIndicatorShape', valueIndicatorShape);
    matePut('rangeTickMarkShape', rangeTickMarkShape);
    matePut('rangeThumbShape', rangeThumbShape);
    matePut('rangeTrackShape', rangeTrackShape);
    matePut('rangeValueIndicatorShape', rangeValueIndicatorShape);
    matePut('showValueIndicator', showValueIndicator);
    matePut('valueIndicatorTextStyle', valueIndicatorTextStyle);
    matePut('minThumbSeparation', minThumbSeparation);
    matePut('thumbSelector', thumbSelector);
    matePut('mouseCursor', mouseCursor);
  }
}

/// class RoundSliderTickMarkShape extends SliderTickMarkShape
class RoundSliderTickMarkShape$Mate extends RoundSliderTickMarkShape with Mate {
  /// RoundSliderTickMarkShape RoundSliderTickMarkShape({double? tickMarkRadius})
  RoundSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , hasDefaultValue:false, defaultValueCode:null
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {
    mateBuilder = (p) => RoundSliderTickMarkShape$Mate(tickMarkRadius: p.get('tickMarkRadius').build());
    matePut('tickMarkRadius', tickMarkRadius);
  }
}

/// class RoundRangeSliderTickMarkShape extends RangeSliderTickMarkShape
class RoundRangeSliderTickMarkShape$Mate extends RoundRangeSliderTickMarkShape with Mate {
  /// RoundRangeSliderTickMarkShape RoundRangeSliderTickMarkShape({double? tickMarkRadius})
  RoundRangeSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , hasDefaultValue:false, defaultValueCode:null
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {
    mateBuilder = (p) => RoundRangeSliderTickMarkShape$Mate(tickMarkRadius: p.get('tickMarkRadius').build());
    matePut('tickMarkRadius', tickMarkRadius);
  }
}

/// class RoundSliderThumbShape extends SliderComponentShape
class RoundSliderThumbShape$Mate extends RoundSliderThumbShape with Mate {
  /// RoundSliderThumbShape RoundSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , hasDefaultValue:true, defaultValueCode:10.0
    required double enabledThumbRadius,

    /// optionalParameters: {double? disabledThumbRadius} , hasDefaultValue:false, defaultValueCode:null
    double? disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double elevation,

    /// optionalParameters: {double pressedElevation = 6.0} , hasDefaultValue:true, defaultValueCode:6.0
    required double pressedElevation,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {
    mateBuilder = (p) => RoundSliderThumbShape$Mate(
          enabledThumbRadius: p.get('enabledThumbRadius').build(),
          disabledThumbRadius: p.get('disabledThumbRadius').build(),
          elevation: p.get('elevation').build(),
          pressedElevation: p.get('pressedElevation').build(),
        );
    matePut('enabledThumbRadius', enabledThumbRadius);
    matePut('disabledThumbRadius', disabledThumbRadius);
    matePut('elevation', elevation);
    matePut('pressedElevation', pressedElevation);
  }
}

/// class RoundRangeSliderThumbShape extends RangeSliderThumbShape
class RoundRangeSliderThumbShape$Mate extends RoundRangeSliderThumbShape with Mate {
  /// RoundRangeSliderThumbShape RoundRangeSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundRangeSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , hasDefaultValue:true, defaultValueCode:10.0
    required double enabledThumbRadius,

    /// optionalParameters: {double? disabledThumbRadius} , hasDefaultValue:false, defaultValueCode:null
    double? disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double elevation,

    /// optionalParameters: {double pressedElevation = 6.0} , hasDefaultValue:true, defaultValueCode:6.0
    required double pressedElevation,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {
    mateBuilder = (p) => RoundRangeSliderThumbShape$Mate(
          enabledThumbRadius: p.get('enabledThumbRadius').build(),
          disabledThumbRadius: p.get('disabledThumbRadius').build(),
          elevation: p.get('elevation').build(),
          pressedElevation: p.get('pressedElevation').build(),
        );
    matePut('enabledThumbRadius', enabledThumbRadius);
    matePut('disabledThumbRadius', disabledThumbRadius);
    matePut('elevation', elevation);
    matePut('pressedElevation', pressedElevation);
  }
}

/// class RoundSliderOverlayShape extends SliderComponentShape
class RoundSliderOverlayShape$Mate extends RoundSliderOverlayShape with Mate {
  /// RoundSliderOverlayShape RoundSliderOverlayShape({double overlayRadius = 24.0})
  RoundSliderOverlayShape$Mate(
      {
      /// optionalParameters: {double overlayRadius = 24.0} , hasDefaultValue:true, defaultValueCode:24.0
      required double overlayRadius})
      : super(overlayRadius: overlayRadius) {
    mateBuilder = (p) => RoundSliderOverlayShape$Mate(overlayRadius: p.get('overlayRadius').build());
    matePut('overlayRadius', overlayRadius);
  }
}

/// class RangeValues
class RangeValues$Mate extends RangeValues with Mate {
  /// RangeValues RangeValues(double start, double end)
  RangeValues$Mate(
    /// requiredParameters: double start
    double start,

    /// requiredParameters: double end
    double end,
  ) : super(
          start,
          end,
        ) {
    mateBuilder = (p) => RangeValues$Mate(
          p.get('start').value,
          p.get('end').value,
        );
    matePut('start', start);
    matePut('end', end);
  }
}

/// class RangeLabels
class RangeLabels$Mate extends RangeLabels with Mate {
  /// RangeLabels RangeLabels(String start, String end)
  RangeLabels$Mate(
    /// requiredParameters: String start
    String start,

    /// requiredParameters: String end
    String end,
  ) : super(
          start,
          end,
        ) {
    mateBuilder = (p) => RangeLabels$Mate(
          p.get('start').value,
          p.get('end').value,
        );
    matePut('start', start);
    matePut('end', end);
  }
}
