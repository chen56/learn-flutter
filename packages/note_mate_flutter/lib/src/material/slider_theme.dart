// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/slider_theme.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';

/// class SliderTheme extends InheritedTheme
class SliderTheme$Mate extends SliderTheme with Mate {
  /// SliderTheme SliderTheme({Key? key, required SliderThemeData data, required Widget child})
  SliderTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required SliderThemeData data} , default:none
    required SliderThemeData data,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateCreateName = 'SliderTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliderTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'data',
      data,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class SliderThemeData with Diagnosticable
class SliderThemeData$Mate extends SliderThemeData with Mate {
  /// SliderThemeData SliderThemeData({double? trackHeight, Color? activeTrackColor, Color? inactiveTrackColor, Color? secondaryActiveTrackColor, Color? disabledActiveTrackColor, Color? disabledInactiveTrackColor, Color? disabledSecondaryActiveTrackColor, Color? activeTickMarkColor, Color? inactiveTickMarkColor, Color? disabledActiveTickMarkColor, Color? disabledInactiveTickMarkColor, Color? thumbColor, Color? overlappingShapeStrokeColor, Color? disabledThumbColor, Color? overlayColor, Color? valueIndicatorColor, SliderComponentShape? overlayShape, SliderTickMarkShape? tickMarkShape, SliderComponentShape? thumbShape, SliderTrackShape? trackShape, SliderComponentShape? valueIndicatorShape, RangeSliderTickMarkShape? rangeTickMarkShape, RangeSliderThumbShape? rangeThumbShape, RangeSliderTrackShape? rangeTrackShape, RangeSliderValueIndicatorShape? rangeValueIndicatorShape, ShowValueIndicator? showValueIndicator, TextStyle? valueIndicatorTextStyle, double? minThumbSeparation, Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector, MaterialStateProperty<MouseCursor?>? mouseCursor})
  SliderThemeData$Mate({
    /// optionalParameters: {double? trackHeight} , default:none
    double? trackHeight,

    /// optionalParameters: {Color? activeTrackColor} , default:none
    Color? activeTrackColor,

    /// optionalParameters: {Color? inactiveTrackColor} , default:none
    Color? inactiveTrackColor,

    /// optionalParameters: {Color? secondaryActiveTrackColor} , default:none
    Color? secondaryActiveTrackColor,

    /// optionalParameters: {Color? disabledActiveTrackColor} , default:none
    Color? disabledActiveTrackColor,

    /// optionalParameters: {Color? disabledInactiveTrackColor} , default:none
    Color? disabledInactiveTrackColor,

    /// optionalParameters: {Color? disabledSecondaryActiveTrackColor} , default:none
    Color? disabledSecondaryActiveTrackColor,

    /// optionalParameters: {Color? activeTickMarkColor} , default:none
    Color? activeTickMarkColor,

    /// optionalParameters: {Color? inactiveTickMarkColor} , default:none
    Color? inactiveTickMarkColor,

    /// optionalParameters: {Color? disabledActiveTickMarkColor} , default:none
    Color? disabledActiveTickMarkColor,

    /// optionalParameters: {Color? disabledInactiveTickMarkColor} , default:none
    Color? disabledInactiveTickMarkColor,

    /// optionalParameters: {Color? thumbColor} , default:none
    Color? thumbColor,

    /// optionalParameters: {Color? overlappingShapeStrokeColor} , default:none
    Color? overlappingShapeStrokeColor,

    /// optionalParameters: {Color? disabledThumbColor} , default:none
    Color? disabledThumbColor,

    /// optionalParameters: {Color? overlayColor} , default:none
    Color? overlayColor,

    /// optionalParameters: {Color? valueIndicatorColor} , default:none
    Color? valueIndicatorColor,

    /// optionalParameters: {SliderComponentShape? overlayShape} , default:none
    SliderComponentShape? overlayShape,

    /// optionalParameters: {SliderTickMarkShape? tickMarkShape} , default:none
    SliderTickMarkShape? tickMarkShape,

    /// optionalParameters: {SliderComponentShape? thumbShape} , default:none
    SliderComponentShape? thumbShape,

    /// optionalParameters: {SliderTrackShape? trackShape} , default:none
    SliderTrackShape? trackShape,

    /// optionalParameters: {SliderComponentShape? valueIndicatorShape} , default:none
    SliderComponentShape? valueIndicatorShape,

    /// optionalParameters: {RangeSliderTickMarkShape? rangeTickMarkShape} , default:none
    RangeSliderTickMarkShape? rangeTickMarkShape,

    /// optionalParameters: {RangeSliderThumbShape? rangeThumbShape} , default:none
    RangeSliderThumbShape? rangeThumbShape,

    /// optionalParameters: {RangeSliderTrackShape? rangeTrackShape} , default:none
    RangeSliderTrackShape? rangeTrackShape,

    /// optionalParameters: {RangeSliderValueIndicatorShape? rangeValueIndicatorShape} , default:none
    RangeSliderValueIndicatorShape? rangeValueIndicatorShape,

    /// optionalParameters: {ShowValueIndicator? showValueIndicator} , default:none
    ShowValueIndicator? showValueIndicator,

    /// optionalParameters: {TextStyle? valueIndicatorTextStyle} , default:none
    TextStyle? valueIndicatorTextStyle,

    /// optionalParameters: {double? minThumbSeparation} , default:none
    double? minThumbSeparation,

    /// optionalParameters: {Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector} , default:none
    RangeThumbSelector? thumbSelector,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          trackHeight: trackHeight,
          activeTrackColor: activeTrackColor,
          inactiveTrackColor: inactiveTrackColor,
          secondaryActiveTrackColor: secondaryActiveTrackColor,
          disabledActiveTrackColor: disabledActiveTrackColor,
          disabledInactiveTrackColor: disabledInactiveTrackColor,
          disabledSecondaryActiveTrackColor: disabledSecondaryActiveTrackColor,
          activeTickMarkColor: activeTickMarkColor,
          inactiveTickMarkColor: inactiveTickMarkColor,
          disabledActiveTickMarkColor: disabledActiveTickMarkColor,
          disabledInactiveTickMarkColor: disabledInactiveTickMarkColor,
          thumbColor: thumbColor,
          overlappingShapeStrokeColor: overlappingShapeStrokeColor,
          disabledThumbColor: disabledThumbColor,
          overlayColor: overlayColor,
          valueIndicatorColor: valueIndicatorColor,
          overlayShape: overlayShape,
          tickMarkShape: tickMarkShape,
          thumbShape: thumbShape,
          trackShape: trackShape,
          valueIndicatorShape: valueIndicatorShape,
          rangeTickMarkShape: rangeTickMarkShape,
          rangeThumbShape: rangeThumbShape,
          rangeTrackShape: rangeTrackShape,
          rangeValueIndicatorShape: rangeValueIndicatorShape,
          showValueIndicator: showValueIndicator,
          valueIndicatorTextStyle: valueIndicatorTextStyle,
          minThumbSeparation: minThumbSeparation,
          thumbSelector: thumbSelector,
          mouseCursor: mouseCursor,
        ) {
    mateCreateName = 'SliderThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliderThemeData$Mate(
          trackHeight: p.get('trackHeight').build(),
          activeTrackColor: p.get('activeTrackColor').build(),
          inactiveTrackColor: p.get('inactiveTrackColor').build(),
          secondaryActiveTrackColor: p.get('secondaryActiveTrackColor').build(),
          disabledActiveTrackColor: p.get('disabledActiveTrackColor').build(),
          disabledInactiveTrackColor: p.get('disabledInactiveTrackColor').build(),
          disabledSecondaryActiveTrackColor: p.get('disabledSecondaryActiveTrackColor').build(),
          activeTickMarkColor: p.get('activeTickMarkColor').build(),
          inactiveTickMarkColor: p.get('inactiveTickMarkColor').build(),
          disabledActiveTickMarkColor: p.get('disabledActiveTickMarkColor').build(),
          disabledInactiveTickMarkColor: p.get('disabledInactiveTickMarkColor').build(),
          thumbColor: p.get('thumbColor').build(),
          overlappingShapeStrokeColor: p.get('overlappingShapeStrokeColor').build(),
          disabledThumbColor: p.get('disabledThumbColor').build(),
          overlayColor: p.get('overlayColor').build(),
          valueIndicatorColor: p.get('valueIndicatorColor').build(),
          overlayShape: p.get('overlayShape').build(),
          tickMarkShape: p.get('tickMarkShape').build(),
          thumbShape: p.get('thumbShape').build(),
          trackShape: p.get('trackShape').build(),
          valueIndicatorShape: p.get('valueIndicatorShape').build(),
          rangeTickMarkShape: p.get('rangeTickMarkShape').build(),
          rangeThumbShape: p.get('rangeThumbShape').build(),
          rangeTrackShape: p.get('rangeTrackShape').build(),
          rangeValueIndicatorShape: p.get('rangeValueIndicatorShape').build(),
          showValueIndicator: p.get('showValueIndicator').build(),
          valueIndicatorTextStyle: p.get('valueIndicatorTextStyle').build(),
          minThumbSeparation: p.get('minThumbSeparation').build(),
          thumbSelector: p.get('thumbSelector').build(),
          mouseCursor: p.get('mouseCursor').build(),
        );
    mateUse(
      'trackHeight',
      trackHeight,
      isNamed: true,
    );
    mateUse(
      'activeTrackColor',
      activeTrackColor,
      isNamed: true,
    );
    mateUse(
      'inactiveTrackColor',
      inactiveTrackColor,
      isNamed: true,
    );
    mateUse(
      'secondaryActiveTrackColor',
      secondaryActiveTrackColor,
      isNamed: true,
    );
    mateUse(
      'disabledActiveTrackColor',
      disabledActiveTrackColor,
      isNamed: true,
    );
    mateUse(
      'disabledInactiveTrackColor',
      disabledInactiveTrackColor,
      isNamed: true,
    );
    mateUse(
      'disabledSecondaryActiveTrackColor',
      disabledSecondaryActiveTrackColor,
      isNamed: true,
    );
    mateUse(
      'activeTickMarkColor',
      activeTickMarkColor,
      isNamed: true,
    );
    mateUse(
      'inactiveTickMarkColor',
      inactiveTickMarkColor,
      isNamed: true,
    );
    mateUse(
      'disabledActiveTickMarkColor',
      disabledActiveTickMarkColor,
      isNamed: true,
    );
    mateUse(
      'disabledInactiveTickMarkColor',
      disabledInactiveTickMarkColor,
      isNamed: true,
    );
    mateUse(
      'thumbColor',
      thumbColor,
      isNamed: true,
    );
    mateUse(
      'overlappingShapeStrokeColor',
      overlappingShapeStrokeColor,
      isNamed: true,
    );
    mateUse(
      'disabledThumbColor',
      disabledThumbColor,
      isNamed: true,
    );
    mateUse(
      'overlayColor',
      overlayColor,
      isNamed: true,
    );
    mateUse(
      'valueIndicatorColor',
      valueIndicatorColor,
      isNamed: true,
    );
    mateUse(
      'overlayShape',
      overlayShape,
      isNamed: true,
    );
    mateUse(
      'tickMarkShape',
      tickMarkShape,
      isNamed: true,
    );
    mateUse(
      'thumbShape',
      thumbShape,
      isNamed: true,
    );
    mateUse(
      'trackShape',
      trackShape,
      isNamed: true,
    );
    mateUse(
      'valueIndicatorShape',
      valueIndicatorShape,
      isNamed: true,
    );
    mateUse(
      'rangeTickMarkShape',
      rangeTickMarkShape,
      isNamed: true,
    );
    mateUse(
      'rangeThumbShape',
      rangeThumbShape,
      isNamed: true,
    );
    mateUse(
      'rangeTrackShape',
      rangeTrackShape,
      isNamed: true,
    );
    mateUse(
      'rangeValueIndicatorShape',
      rangeValueIndicatorShape,
      isNamed: true,
    );
    mateUse(
      'showValueIndicator',
      showValueIndicator,
      isNamed: true,
    );
    mateUse(
      'valueIndicatorTextStyle',
      valueIndicatorTextStyle,
      isNamed: true,
    );
    mateUse(
      'minThumbSeparation',
      minThumbSeparation,
      isNamed: true,
    );
    mateUse(
      'thumbSelector',
      thumbSelector,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
  }
}

/// class RoundSliderTickMarkShape extends SliderTickMarkShape
class RoundSliderTickMarkShape$Mate extends RoundSliderTickMarkShape with Mate {
  /// RoundSliderTickMarkShape RoundSliderTickMarkShape({double? tickMarkRadius})
  RoundSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , default:none
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {
    mateCreateName = 'RoundSliderTickMarkShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundSliderTickMarkShape$Mate(tickMarkRadius: p.get('tickMarkRadius').build());
    mateUse(
      'tickMarkRadius',
      tickMarkRadius,
      isNamed: true,
    );
  }
}

/// class RoundRangeSliderTickMarkShape extends RangeSliderTickMarkShape
class RoundRangeSliderTickMarkShape$Mate extends RoundRangeSliderTickMarkShape with Mate {
  /// RoundRangeSliderTickMarkShape RoundRangeSliderTickMarkShape({double? tickMarkRadius})
  RoundRangeSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , default:none
      double? tickMarkRadius})
      : super(tickMarkRadius: tickMarkRadius) {
    mateCreateName = 'RoundRangeSliderTickMarkShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundRangeSliderTickMarkShape$Mate(tickMarkRadius: p.get('tickMarkRadius').build());
    mateUse(
      'tickMarkRadius',
      tickMarkRadius,
      isNamed: true,
    );
  }
}

/// class RoundSliderThumbShape extends SliderComponentShape
class RoundSliderThumbShape$Mate extends RoundSliderThumbShape with Mate {
  /// RoundSliderThumbShape RoundSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , default:processed=DoubleLiteralImpl
    double enabledThumbRadius = 10.0,

    /// optionalParameters: {double? disabledThumbRadius} , default:none
    double? disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , default:processed=DoubleLiteralImpl
    double elevation = 1.0,

    /// optionalParameters: {double pressedElevation = 6.0} , default:processed=DoubleLiteralImpl
    double pressedElevation = 6.0,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {
    mateCreateName = 'RoundSliderThumbShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundSliderThumbShape$Mate(
          enabledThumbRadius: p.get('enabledThumbRadius').build(),
          disabledThumbRadius: p.get('disabledThumbRadius').build(),
          elevation: p.get('elevation').build(),
          pressedElevation: p.get('pressedElevation').build(),
        );
    mateUse(
      'enabledThumbRadius',
      enabledThumbRadius,
      isNamed: true,
      defaultValue: 10.0,
    );
    mateUse(
      'disabledThumbRadius',
      disabledThumbRadius,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressedElevation',
      pressedElevation,
      isNamed: true,
      defaultValue: 6.0,
    );
  }
}

/// class RoundRangeSliderThumbShape extends RangeSliderThumbShape
class RoundRangeSliderThumbShape$Mate extends RoundRangeSliderThumbShape with Mate {
  /// RoundRangeSliderThumbShape RoundRangeSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundRangeSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , default:processed=DoubleLiteralImpl
    double enabledThumbRadius = 10.0,

    /// optionalParameters: {double? disabledThumbRadius} , default:none
    double? disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , default:processed=DoubleLiteralImpl
    double elevation = 1.0,

    /// optionalParameters: {double pressedElevation = 6.0} , default:processed=DoubleLiteralImpl
    double pressedElevation = 6.0,
  }) : super(
          enabledThumbRadius: enabledThumbRadius,
          disabledThumbRadius: disabledThumbRadius,
          elevation: elevation,
          pressedElevation: pressedElevation,
        ) {
    mateCreateName = 'RoundRangeSliderThumbShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundRangeSliderThumbShape$Mate(
          enabledThumbRadius: p.get('enabledThumbRadius').build(),
          disabledThumbRadius: p.get('disabledThumbRadius').build(),
          elevation: p.get('elevation').build(),
          pressedElevation: p.get('pressedElevation').build(),
        );
    mateUse(
      'enabledThumbRadius',
      enabledThumbRadius,
      isNamed: true,
      defaultValue: 10.0,
    );
    mateUse(
      'disabledThumbRadius',
      disabledThumbRadius,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'pressedElevation',
      pressedElevation,
      isNamed: true,
      defaultValue: 6.0,
    );
  }
}

/// class RoundSliderOverlayShape extends SliderComponentShape
class RoundSliderOverlayShape$Mate extends RoundSliderOverlayShape with Mate {
  /// RoundSliderOverlayShape RoundSliderOverlayShape({double overlayRadius = 24.0})
  RoundSliderOverlayShape$Mate(
      {
      /// optionalParameters: {double overlayRadius = 24.0} , default:processed=DoubleLiteralImpl
      double overlayRadius = 24.0})
      : super(overlayRadius: overlayRadius) {
    mateCreateName = 'RoundSliderOverlayShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundSliderOverlayShape$Mate(overlayRadius: p.get('overlayRadius').build());
    mateUse(
      'overlayRadius',
      overlayRadius,
      isNamed: true,
      defaultValue: 24.0,
    );
  }
}

/// class RangeValues
class RangeValues$Mate extends RangeValues with Mate {
  /// RangeValues RangeValues(double start, double end)
  RangeValues$Mate(
    /// requiredParameters: double start
    double start,

    /// requiredParameters: double end
    double end,
  ) : super(
          start,
          end,
        ) {
    mateCreateName = 'RangeValues';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RangeValues$Mate(
          p.get('start').value,
          p.get('end').value,
        );
    mateUse(
      'start',
      start,
      isNamed: false,
    );
    mateUse(
      'end',
      end,
      isNamed: false,
    );
  }
}

/// class RangeLabels
class RangeLabels$Mate extends RangeLabels with Mate {
  /// RangeLabels RangeLabels(String start, String end)
  RangeLabels$Mate(
    /// requiredParameters: String start
    String start,

    /// requiredParameters: String end
    String end,
  ) : super(
          start,
          end,
        ) {
    mateCreateName = 'RangeLabels';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RangeLabels$Mate(
          p.get('start').value,
          p.get('end').value,
        );
    mateUse(
      'start',
      start,
      isNamed: false,
    );
    mateUse(
      'end',
      end,
      isNamed: false,
    );
  }
}
