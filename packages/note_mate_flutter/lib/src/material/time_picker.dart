// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/time_picker.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/material/time.dart';import 'dart:core';import 'package:flutter/src/widgets/media_query.dart';import 'package:note/mate.dart' show Mate;/// class TimePickerDialog extends StatefulWidget
class TimePickerDialog$Mate extends TimePickerDialog with Mate {/// TimePickerDialog TimePickerDialog({Key? key, required TimeOfDay initialTime, String? cancelText, String? confirmText, String? helpText, String? errorInvalidText, String? hourLabelText, String? minuteLabelText, String? restorationId, TimePickerEntryMode initialEntryMode = TimePickerEntryMode.dial, Orientation? orientation, void Function(TimePickerEntryMode)? onEntryModeChanged})
TimePickerDialog$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required TimeOfDay initialTime} , hasDefaultValue:false, defaultValueCode:null
required TimeOfDay initialTime, /// optionalParameters: {String? cancelText} , hasDefaultValue:false, defaultValueCode:null
String? cancelText, /// optionalParameters: {String? confirmText} , hasDefaultValue:false, defaultValueCode:null
String? confirmText, /// optionalParameters: {String? helpText} , hasDefaultValue:false, defaultValueCode:null
String? helpText, /// optionalParameters: {String? errorInvalidText} , hasDefaultValue:false, defaultValueCode:null
String? errorInvalidText, /// optionalParameters: {String? hourLabelText} , hasDefaultValue:false, defaultValueCode:null
String? hourLabelText, /// optionalParameters: {String? minuteLabelText} , hasDefaultValue:false, defaultValueCode:null
String? minuteLabelText, /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
String? restorationId, /// optionalParameters: {TimePickerEntryMode initialEntryMode = TimePickerEntryMode.dial} , hasDefaultValue:true, defaultValueCode:TimePickerEntryMode.dial
required TimePickerEntryMode initialEntryMode, /// optionalParameters: {Orientation? orientation} , hasDefaultValue:false, defaultValueCode:null
Orientation? orientation, /// optionalParameters: {void Function(TimePickerEntryMode)? onEntryModeChanged} , hasDefaultValue:false, defaultValueCode:null
EntryModeChangeCallback? onEntryModeChanged, }) : super(key: key, initialTime: initialTime, cancelText: cancelText, confirmText: confirmText, helpText: helpText, errorInvalidText: errorInvalidText, hourLabelText: hourLabelText, minuteLabelText: minuteLabelText, restorationId: restorationId, initialEntryMode: initialEntryMode, orientation: orientation, onEntryModeChanged: onEntryModeChanged, ) { mateBuilder = (p) => TimePickerDialog$Mate(key: p.get('key').build(), initialTime: p.get('initialTime').build(), cancelText: p.get('cancelText').build(), confirmText: p.get('confirmText').build(), helpText: p.get('helpText').build(), errorInvalidText: p.get('errorInvalidText').build(), hourLabelText: p.get('hourLabelText').build(), minuteLabelText: p.get('minuteLabelText').build(), restorationId: p.get('restorationId').build(), initialEntryMode: p.get('initialEntryMode').build(), orientation: p.get('orientation').build(), onEntryModeChanged: p.get('onEntryModeChanged').build(), );
matePut('key', key);
matePut('initialTime', initialTime);
matePut('cancelText', cancelText);
matePut('confirmText', confirmText);
matePut('helpText', helpText);
matePut('errorInvalidText', errorInvalidText);
matePut('hourLabelText', hourLabelText);
matePut('minuteLabelText', minuteLabelText);
matePut('restorationId', restorationId);
matePut('initialEntryMode', initialEntryMode);
matePut('orientation', orientation);
matePut('onEntryModeChanged', onEntryModeChanged); }

 }
