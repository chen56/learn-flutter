// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/icon_button.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:ui';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class IconButton extends StatelessWidget
class IconButton$Mate extends IconButton with Mate {
  /// IconButton IconButton({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {double? iconSize} , defaultValue:none
    double? iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , defaultValue:none
    VisualDensity? visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , defaultValue:none
    AlignmentGeometry? alignment,

    /// optionalParameters: {double? splashRadius} , defaultValue:none
    double? splashRadius,

    /// optionalParameters: {Color? color} , defaultValue:none
    Color? color,

    /// optionalParameters: {Color? focusColor} , defaultValue:none
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , defaultValue:none
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , defaultValue:none
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , defaultValue:none
    Color? splashColor,

    /// optionalParameters: {Color? disabledColor} , defaultValue:none
    Color? disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , defaultValue:none
    required VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , defaultValue:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {bool? enableFeedback} , defaultValue:none
    bool? enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , defaultValue:none
    BoxConstraints? constraints,

    /// optionalParameters: {ButtonStyle? style} , defaultValue:none
    ButtonStyle? style,

    /// optionalParameters: {bool? isSelected} , defaultValue:none
    bool? isSelected,

    /// optionalParameters: {Widget? selectedIcon} , defaultValue:none
    Widget? selectedIcon,

    /// optionalParameters: {required Widget icon} , defaultValue:none
    required Widget icon,
  }) : super(
          key: key,
          iconSize: iconSize,
          visualDensity: visualDensity,
          padding: padding,
          alignment: alignment,
          splashRadius: splashRadius,
          color: color,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          disabledColor: disabledColor,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          focusNode: focusNode,
          autofocus: autofocus,
          tooltip: tooltip,
          enableFeedback: enableFeedback,
          constraints: constraints,
          style: style,
          isSelected: isSelected,
          selectedIcon: selectedIcon,
          icon: icon,
        ) {
    mateCreateName = 'IconButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('iconSize', iconSize, isNamed: true);
    mateUse('visualDensity', visualDensity, isNamed: true);
    mateUse('padding', padding, isNamed: true);
    mateUse('alignment', alignment, isNamed: true);
    mateUse('splashRadius', splashRadius, isNamed: true);
    mateUse('color', color, isNamed: true);
    mateUse('focusColor', focusColor, isNamed: true);
    mateUse('hoverColor', hoverColor, isNamed: true);
    mateUse('highlightColor', highlightColor, isNamed: true);
    mateUse('splashColor', splashColor, isNamed: true);
    mateUse('disabledColor', disabledColor, isNamed: true);
    mateUse('onPressed', onPressed, isNamed: true);
    mateUse('mouseCursor', mouseCursor, isNamed: true);
    mateUse('focusNode', focusNode, isNamed: true);
    mateUse('autofocus', autofocus, isNamed: true);
    mateUse('tooltip', tooltip, isNamed: true);
    mateUse('enableFeedback', enableFeedback, isNamed: true);
    mateUse('constraints', constraints, isNamed: true);
    mateUse('style', style, isNamed: true);
    mateUse('isSelected', isSelected, isNamed: true);
    mateUse('selectedIcon', selectedIcon, isNamed: true);
    mateUse('icon', icon, isNamed: true);
  }
}
