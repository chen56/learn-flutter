// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/icon_button.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/material/theme_data.dart' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/painting/alignment.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/services/mouse_cursor.dart' as _i8;
import 'package:flutter/src/widgets/focus_manager.dart' as _i9;
import 'package:flutter/src/rendering/box.dart' as _i10;
import 'package:flutter/src/material/button_style.dart' as _i11;
import 'package:flutter/src/widgets/framework.dart' as _i12;

/// class IconButton extends StatelessWidget
class IconButton$Mate extends _i1.IconButton with _i2.Mate {
  /// IconButton IconButton({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? iconSize} , default:none
    double? iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i4.VisualDensity? visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i5.EdgeInsetsGeometry? padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    _i6.AlignmentGeometry? alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {Color? color} , default:none
    _i7.Color? color,

    /// optionalParameters: {Color? focusColor} , default:none
    _i7.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i7.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i7.Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i7.Color? splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    _i7.Color? disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required _i7.VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i9.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    _i10.BoxConstraints? constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {bool? isSelected} , default:none
    bool? isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    _i12.Widget? selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required _i12.Widget icon,
  }) : super(
          key: key,
          iconSize: iconSize,
          visualDensity: visualDensity,
          padding: padding,
          alignment: alignment,
          splashRadius: splashRadius,
          color: color,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          disabledColor: disabledColor,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          focusNode: focusNode,
          autofocus: autofocus,
          tooltip: tooltip,
          enableFeedback: enableFeedback,
          constraints: constraints,
          style: style,
          isSelected: isSelected,
          selectedIcon: selectedIcon,
          icon: icon,
        ) {
    mateBuilderName = 'IconButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'disabledColor',
      disabledColor,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'constraints',
      constraints,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'isSelected',
      isSelected,
      isNamed: true,
    );
    mateUse(
      'selectedIcon',
      selectedIcon,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
  }

  /// IconButton IconButton.filled({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate.filled({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? iconSize} , default:none
    double? iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i4.VisualDensity? visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i5.EdgeInsetsGeometry? padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    _i6.AlignmentGeometry? alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {Color? color} , default:none
    _i7.Color? color,

    /// optionalParameters: {Color? focusColor} , default:none
    _i7.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i7.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i7.Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i7.Color? splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    _i7.Color? disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required _i7.VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i9.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    _i10.BoxConstraints? constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {bool? isSelected} , default:none
    bool? isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    _i12.Widget? selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required _i12.Widget icon,
  }) : super.filled(
          key: key,
          iconSize: iconSize,
          visualDensity: visualDensity,
          padding: padding,
          alignment: alignment,
          splashRadius: splashRadius,
          color: color,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          disabledColor: disabledColor,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          focusNode: focusNode,
          autofocus: autofocus,
          tooltip: tooltip,
          enableFeedback: enableFeedback,
          constraints: constraints,
          style: style,
          isSelected: isSelected,
          selectedIcon: selectedIcon,
          icon: icon,
        ) {
    mateBuilderName = 'IconButton.filled';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate.filled(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'disabledColor',
      disabledColor,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'constraints',
      constraints,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'isSelected',
      isSelected,
      isNamed: true,
    );
    mateUse(
      'selectedIcon',
      selectedIcon,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
  }

  /// IconButton IconButton.filledTonal({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate.filledTonal({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? iconSize} , default:none
    double? iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i4.VisualDensity? visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i5.EdgeInsetsGeometry? padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    _i6.AlignmentGeometry? alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {Color? color} , default:none
    _i7.Color? color,

    /// optionalParameters: {Color? focusColor} , default:none
    _i7.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i7.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i7.Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i7.Color? splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    _i7.Color? disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required _i7.VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i9.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    _i10.BoxConstraints? constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {bool? isSelected} , default:none
    bool? isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    _i12.Widget? selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required _i12.Widget icon,
  }) : super.filledTonal(
          key: key,
          iconSize: iconSize,
          visualDensity: visualDensity,
          padding: padding,
          alignment: alignment,
          splashRadius: splashRadius,
          color: color,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          disabledColor: disabledColor,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          focusNode: focusNode,
          autofocus: autofocus,
          tooltip: tooltip,
          enableFeedback: enableFeedback,
          constraints: constraints,
          style: style,
          isSelected: isSelected,
          selectedIcon: selectedIcon,
          icon: icon,
        ) {
    mateBuilderName = 'IconButton.filledTonal';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate.filledTonal(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'disabledColor',
      disabledColor,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'constraints',
      constraints,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'isSelected',
      isSelected,
      isNamed: true,
    );
    mateUse(
      'selectedIcon',
      selectedIcon,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
  }

  /// IconButton IconButton.outlined({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate.outlined({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? iconSize} , default:none
    double? iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    _i4.VisualDensity? visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i5.EdgeInsetsGeometry? padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    _i6.AlignmentGeometry? alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    double? splashRadius,

    /// optionalParameters: {Color? color} , default:none
    _i7.Color? color,

    /// optionalParameters: {Color? focusColor} , default:none
    _i7.Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    _i7.Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    _i7.Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    _i7.Color? splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    _i7.Color? disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required _i7.VoidCallback? onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    _i8.MouseCursor? mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i9.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    bool? enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    _i10.BoxConstraints? constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    _i11.ButtonStyle? style,

    /// optionalParameters: {bool? isSelected} , default:none
    bool? isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    _i12.Widget? selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required _i12.Widget icon,
  }) : super.outlined(
          key: key,
          iconSize: iconSize,
          visualDensity: visualDensity,
          padding: padding,
          alignment: alignment,
          splashRadius: splashRadius,
          color: color,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          disabledColor: disabledColor,
          onPressed: onPressed,
          mouseCursor: mouseCursor,
          focusNode: focusNode,
          autofocus: autofocus,
          tooltip: tooltip,
          enableFeedback: enableFeedback,
          constraints: constraints,
          style: style,
          isSelected: isSelected,
          selectedIcon: selectedIcon,
          icon: icon,
        ) {
    mateBuilderName = 'IconButton.outlined';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate.outlined(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'iconSize',
      iconSize,
      isNamed: true,
    );
    mateUse(
      'visualDensity',
      visualDensity,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'splashRadius',
      splashRadius,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'hoverColor',
      hoverColor,
      isNamed: true,
    );
    mateUse(
      'highlightColor',
      highlightColor,
      isNamed: true,
    );
    mateUse(
      'splashColor',
      splashColor,
      isNamed: true,
    );
    mateUse(
      'disabledColor',
      disabledColor,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'enableFeedback',
      enableFeedback,
      isNamed: true,
    );
    mateUse(
      'constraints',
      constraints,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'isSelected',
      isSelected,
      isNamed: true,
    );
    mateUse(
      'selectedIcon',
      selectedIcon,
      isNamed: true,
    );
    mateUse(
      'icon',
      icon,
      isNamed: true,
    );
  }
}
