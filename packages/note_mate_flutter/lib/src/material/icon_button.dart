// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/icon_button.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/material/theme_data.dart' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/painting/alignment.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/services/mouse_cursor.dart' as _i8;
import 'package:flutter/src/widgets/focus_manager.dart' as _i9;
import 'package:flutter/src/rendering/box.dart' as _i10;
import 'package:flutter/src/material/button_style.dart' as _i11;
import 'package:flutter/src/widgets/framework.dart' as _i12;

/// class IconButton extends StatelessWidget
class IconButton$Mate extends _i1.IconButton with _i2.Mate {
  /// IconButton IconButton({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? iconSize} , default:none
    super.iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    super.visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    super.alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    super.splashRadius,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required super.onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    super.style,

    /// optionalParameters: {bool? isSelected} , default:none
    super.isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required super.icon,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'iconSize': _i2.BuilderArg<double?>(
            name: 'iconSize',
            init: iconSize,
            isNamed: true,
          ),
          'visualDensity': _i2.BuilderArg<_i4.VisualDensity?>(
            name: 'visualDensity',
            init: visualDensity,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'splashRadius': _i2.BuilderArg<double?>(
            name: 'splashRadius',
            init: splashRadius,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i7.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i7.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i7.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i7.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i7.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i7.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'onPressed': _i2.BuilderArg<_i7.VoidCallback?>(
            name: 'onPressed',
            init: onPressed,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i10.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i11.ButtonStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'isSelected': _i2.BuilderArg<bool?>(
            name: 'isSelected',
            init: isSelected,
            isNamed: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i12.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i12.Widget>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IconButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
  }

  /// IconButton IconButton.filled({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate.filled({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? iconSize} , default:none
    super.iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    super.visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    super.alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    super.splashRadius,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required super.onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    super.style,

    /// optionalParameters: {bool? isSelected} , default:none
    super.isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required super.icon,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'iconSize': _i2.BuilderArg<double?>(
            name: 'iconSize',
            init: iconSize,
            isNamed: true,
          ),
          'visualDensity': _i2.BuilderArg<_i4.VisualDensity?>(
            name: 'visualDensity',
            init: visualDensity,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'splashRadius': _i2.BuilderArg<double?>(
            name: 'splashRadius',
            init: splashRadius,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i7.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i7.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i7.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i7.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i7.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i7.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'onPressed': _i2.BuilderArg<_i7.VoidCallback?>(
            name: 'onPressed',
            init: onPressed,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i10.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i11.ButtonStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'isSelected': _i2.BuilderArg<bool?>(
            name: 'isSelected',
            init: isSelected,
            isNamed: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i12.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i12.Widget>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
        },
        super.filled() {
    mateBuilderName = 'IconButton.filled';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate.filled(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
  }

  /// IconButton IconButton.filledTonal({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate.filledTonal({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? iconSize} , default:none
    super.iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    super.visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    super.alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    super.splashRadius,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required super.onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    super.style,

    /// optionalParameters: {bool? isSelected} , default:none
    super.isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required super.icon,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'iconSize': _i2.BuilderArg<double?>(
            name: 'iconSize',
            init: iconSize,
            isNamed: true,
          ),
          'visualDensity': _i2.BuilderArg<_i4.VisualDensity?>(
            name: 'visualDensity',
            init: visualDensity,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'splashRadius': _i2.BuilderArg<double?>(
            name: 'splashRadius',
            init: splashRadius,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i7.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i7.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i7.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i7.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i7.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i7.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'onPressed': _i2.BuilderArg<_i7.VoidCallback?>(
            name: 'onPressed',
            init: onPressed,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i10.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i11.ButtonStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'isSelected': _i2.BuilderArg<bool?>(
            name: 'isSelected',
            init: isSelected,
            isNamed: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i12.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i12.Widget>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
        },
        super.filledTonal() {
    mateBuilderName = 'IconButton.filledTonal';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate.filledTonal(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
  }

  /// IconButton IconButton.outlined({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required void Function()? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})
  IconButton$Mate.outlined({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? iconSize} , default:none
    super.iconSize,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    super.visualDensity,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    super.alignment,

    /// optionalParameters: {double? splashRadius} , default:none
    super.splashRadius,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {required void Function()? onPressed} , default:none
    required super.onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {ButtonStyle? style} , default:none
    super.style,

    /// optionalParameters: {bool? isSelected} , default:none
    super.isSelected,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,

    /// optionalParameters: {required Widget icon} , default:none
    required super.icon,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'iconSize': _i2.BuilderArg<double?>(
            name: 'iconSize',
            init: iconSize,
            isNamed: true,
          ),
          'visualDensity': _i2.BuilderArg<_i4.VisualDensity?>(
            name: 'visualDensity',
            init: visualDensity,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'splashRadius': _i2.BuilderArg<double?>(
            name: 'splashRadius',
            init: splashRadius,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i7.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i7.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i7.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i7.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i7.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i7.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'onPressed': _i2.BuilderArg<_i7.VoidCallback?>(
            name: 'onPressed',
            init: onPressed,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i10.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i11.ButtonStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'isSelected': _i2.BuilderArg<bool?>(
            name: 'isSelected',
            init: isSelected,
            isNamed: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i12.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i12.Widget>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
        },
        super.outlined() {
    mateBuilderName = 'IconButton.outlined';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => IconButton$Mate.outlined(
          key: p.get('key').build(),
          iconSize: p.get('iconSize').build(),
          visualDensity: p.get('visualDensity').build(),
          padding: p.get('padding').build(),
          alignment: p.get('alignment').build(),
          splashRadius: p.get('splashRadius').build(),
          color: p.get('color').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          disabledColor: p.get('disabledColor').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          tooltip: p.get('tooltip').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          style: p.get('style').build(),
          isSelected: p.get('isSelected').build(),
          selectedIcon: p.get('selectedIcon').build(),
          icon: p.get('icon').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
