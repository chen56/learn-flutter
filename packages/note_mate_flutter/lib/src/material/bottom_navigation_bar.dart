// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/bottom_navigation_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/bottom_navigation_bar_item.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:note/mate.dart';

/// class BottomNavigationBar extends StatefulWidget
class BottomNavigationBar$Mate extends BottomNavigationBar with Mate<BottomNavigationBar$Mate> {
  /// BottomNavigationBar BottomNavigationBar({Key? key, required List<BottomNavigationBarItem> items, void Function(int)? onTap, int currentIndex = 0, double? elevation, BottomNavigationBarType? type, Color? fixedColor, Color? backgroundColor, double iconSize = 24.0, Color? selectedItemColor, Color? unselectedItemColor, IconThemeData? selectedIconTheme, IconThemeData? unselectedIconTheme, double selectedFontSize = 14.0, double unselectedFontSize = 12.0, TextStyle? selectedLabelStyle, TextStyle? unselectedLabelStyle, bool? showSelectedLabels, bool? showUnselectedLabels, MouseCursor? mouseCursor, bool? enableFeedback, BottomNavigationBarLandscapeLayout? landscapeLayout, bool useLegacyColorScheme = true})
  BottomNavigationBar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<BottomNavigationBarItem> items} , hasDefaultValue:false, defaultValueCode:null
    required List<BottomNavigationBarItem> items,

    /// optionalParameters: {void Function(int)? onTap} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<int>? onTap,

    /// optionalParameters: {int currentIndex = 0} , hasDefaultValue:true, defaultValueCode:0
    required int currentIndex,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {BottomNavigationBarType? type} , hasDefaultValue:false, defaultValueCode:null
    BottomNavigationBarType? type,

    /// optionalParameters: {Color? fixedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? fixedColor,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double iconSize = 24.0} , hasDefaultValue:true, defaultValueCode:24.0
    required double iconSize,

    /// optionalParameters: {Color? selectedItemColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedItemColor,

    /// optionalParameters: {Color? unselectedItemColor} , hasDefaultValue:false, defaultValueCode:null
    Color? unselectedItemColor,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? selectedIconTheme,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? unselectedIconTheme,

    /// optionalParameters: {double selectedFontSize = 14.0} , hasDefaultValue:true, defaultValueCode:14.0
    required double selectedFontSize,

    /// optionalParameters: {double unselectedFontSize = 12.0} , hasDefaultValue:true, defaultValueCode:12.0
    required double unselectedFontSize,

    /// optionalParameters: {TextStyle? selectedLabelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? selectedLabelStyle,

    /// optionalParameters: {TextStyle? unselectedLabelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? unselectedLabelStyle,

    /// optionalParameters: {bool? showSelectedLabels} , hasDefaultValue:false, defaultValueCode:null
    bool? showSelectedLabels,

    /// optionalParameters: {bool? showUnselectedLabels} , hasDefaultValue:false, defaultValueCode:null
    bool? showUnselectedLabels,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {BottomNavigationBarLandscapeLayout? landscapeLayout} , hasDefaultValue:false, defaultValueCode:null
    BottomNavigationBarLandscapeLayout? landscapeLayout,

    /// optionalParameters: {bool useLegacyColorScheme = true} , hasDefaultValue:true, defaultValueCode:true
    required bool useLegacyColorScheme,
  }) : super(
          key: key,
          items: items,
          onTap: onTap,
          currentIndex: currentIndex,
          elevation: elevation,
          type: type,
          fixedColor: fixedColor,
          backgroundColor: backgroundColor,
          iconSize: iconSize,
          selectedItemColor: selectedItemColor,
          unselectedItemColor: unselectedItemColor,
          selectedIconTheme: selectedIconTheme,
          unselectedIconTheme: unselectedIconTheme,
          selectedFontSize: selectedFontSize,
          unselectedFontSize: unselectedFontSize,
          selectedLabelStyle: selectedLabelStyle,
          unselectedLabelStyle: unselectedLabelStyle,
          showSelectedLabels: showSelectedLabels,
          showUnselectedLabels: showUnselectedLabels,
          mouseCursor: mouseCursor,
          enableFeedback: enableFeedback,
          landscapeLayout: landscapeLayout,
          useLegacyColorScheme: useLegacyColorScheme,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => BottomNavigationBar$Mate(
        key: p.get('key').build(),
        items: p.get('items').build(),
        onTap: p.get('onTap').build(),
        currentIndex: p.get('currentIndex').build(),
        elevation: p.get('elevation').build(),
        type: p.get('type').build(),
        fixedColor: p.get('fixedColor').build(),
        backgroundColor: p.get('backgroundColor').build(),
        iconSize: p.get('iconSize').build(),
        selectedItemColor: p.get('selectedItemColor').build(),
        unselectedItemColor: p.get('unselectedItemColor').build(),
        selectedIconTheme: p.get('selectedIconTheme').build(),
        unselectedIconTheme: p.get('unselectedIconTheme').build(),
        selectedFontSize: p.get('selectedFontSize').build(),
        unselectedFontSize: p.get('unselectedFontSize').build(),
        selectedLabelStyle: p.get('selectedLabelStyle').build(),
        unselectedLabelStyle: p.get('unselectedLabelStyle').build(),
        showSelectedLabels: p.get('showSelectedLabels').build(),
        showUnselectedLabels: p.get('showUnselectedLabels').build(),
        mouseCursor: p.get('mouseCursor').build(),
        enableFeedback: p.get('enableFeedback').build(),
        landscapeLayout: p.get('landscapeLayout').build(),
        useLegacyColorScheme: p.get('useLegacyColorScheme').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.putList('items', items);
    mateParams.put('onTap', onTap);
    mateParams.put('currentIndex', currentIndex);
    mateParams.put('elevation', elevation);
    mateParams.put('type', type);
    mateParams.put('fixedColor', fixedColor);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('iconSize', iconSize);
    mateParams.put('selectedItemColor', selectedItemColor);
    mateParams.put('unselectedItemColor', unselectedItemColor);
    mateParams.put('selectedIconTheme', selectedIconTheme);
    mateParams.put('unselectedIconTheme', unselectedIconTheme);
    mateParams.put('selectedFontSize', selectedFontSize);
    mateParams.put('unselectedFontSize', unselectedFontSize);
    mateParams.put('selectedLabelStyle', selectedLabelStyle);
    mateParams.put('unselectedLabelStyle', unselectedLabelStyle);
    mateParams.put('showSelectedLabels', showSelectedLabels);
    mateParams.put('showUnselectedLabels', showUnselectedLabels);
    mateParams.put('mouseCursor', mouseCursor);
    mateParams.put('enableFeedback', enableFeedback);
    mateParams.put('landscapeLayout', landscapeLayout);
    mateParams.put('useLegacyColorScheme', useLegacyColorScheme);
  }
}
