// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/material/data_table.dart';import 'package:flutter/src/widgets/framework.dart';import 'dart:core';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/foundation/basic_types.dart';import 'package:flutter/src/gestures/long_press.dart';import 'package:flutter/src/material/material_state.dart';import 'dart:ui';import 'package:flutter/src/gestures/tap.dart';import 'package:flutter/src/painting/decoration.dart';import 'package:flutter/src/painting/text_style.dart';import 'package:flutter/src/rendering/table_border.dart';import 'package:note/mate.dart' show Mate;/// class DataColumn
class DataColumn$Mate extends DataColumn with Mate {/// DataColumn DataColumn({required Widget label, String? tooltip, bool numeric = false, void Function(int, bool)? onSort})
DataColumn$Mate({/// optionalParameters: {required Widget label} , hasDefaultValue:false, defaultValueCode:null
required Widget label, /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
String? tooltip, /// optionalParameters: {bool numeric = false} , hasDefaultValue:true, defaultValueCode:false
required bool numeric, /// optionalParameters: {void Function(int, bool)? onSort} , hasDefaultValue:false, defaultValueCode:null
DataColumnSortCallback? onSort, }) : super(label: label, tooltip: tooltip, numeric: numeric, onSort: onSort, ) { mateBuilder = (p) => DataColumn$Mate(label: p.get('label').build(), tooltip: p.get('tooltip').build(), numeric: p.get('numeric').build(), onSort: p.get('onSort').build(), );
matePut('label', label);
matePut('tooltip', tooltip);
matePut('numeric', numeric);
matePut('onSort', onSort); }

 }
/// class DataRow
class DataRow$Mate extends DataRow with Mate {/// DataRow DataRow({LocalKey? key, bool selected = false, void Function(bool?)? onSelectChanged, void Function()? onLongPress, MaterialStateProperty<Color?>? color, required List<DataCell> cells})
DataRow$Mate({/// optionalParameters: {LocalKey? key} , hasDefaultValue:false, defaultValueCode:null
LocalKey? key, /// optionalParameters: {bool selected = false} , hasDefaultValue:true, defaultValueCode:false
required bool selected, /// optionalParameters: {void Function(bool?)? onSelectChanged} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool?>? onSelectChanged, /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
GestureLongPressCallback? onLongPress, /// optionalParameters: {MaterialStateProperty<Color?>? color} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? color, /// optionalParameters: {required List<DataCell> cells} , hasDefaultValue:false, defaultValueCode:null
required List<DataCell> cells, }) : super(key: key, selected: selected, onSelectChanged: onSelectChanged, onLongPress: onLongPress, color: color, cells: cells, ) { mateBuilder = (p) => DataRow$Mate(key: p.get('key').build(), selected: p.get('selected').build(), onSelectChanged: p.get('onSelectChanged').build(), onLongPress: p.get('onLongPress').build(), color: p.get('color').build(), cells: p.get('cells').build(), );
matePut('key', key);
matePut('selected', selected);
matePut('onSelectChanged', onSelectChanged);
matePut('onLongPress', onLongPress);
matePut('color', color);
matePut('cells', cells); }

/// DataRow DataRow.byIndex({int? index, bool selected = false, void Function(bool?)? onSelectChanged, void Function()? onLongPress, MaterialStateProperty<Color?>? color, required List<DataCell> cells})
DataRow$Mate.byIndex({/// optionalParameters: {int? index} , hasDefaultValue:false, defaultValueCode:null
int? index, /// optionalParameters: {bool selected = false} , hasDefaultValue:true, defaultValueCode:false
required bool selected, /// optionalParameters: {void Function(bool?)? onSelectChanged} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool?>? onSelectChanged, /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
GestureLongPressCallback? onLongPress, /// optionalParameters: {MaterialStateProperty<Color?>? color} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? color, /// optionalParameters: {required List<DataCell> cells} , hasDefaultValue:false, defaultValueCode:null
required List<DataCell> cells, }) : super.byIndex(index: index, selected: selected, onSelectChanged: onSelectChanged, onLongPress: onLongPress, color: color, cells: cells, ) { mateBuilder = (p) => DataRow$Mate.byIndex(index: p.get('index').build(), selected: p.get('selected').build(), onSelectChanged: p.get('onSelectChanged').build(), onLongPress: p.get('onLongPress').build(), color: p.get('color').build(), cells: p.get('cells').build(), );
matePut('index', index);
matePut('selected', selected);
matePut('onSelectChanged', onSelectChanged);
matePut('onLongPress', onLongPress);
matePut('color', color);
matePut('cells', cells); }

 }
/// class DataCell
class DataCell$Mate extends DataCell with Mate {/// DataCell DataCell(Widget child, {bool placeholder = false, bool showEditIcon = false, void Function()? onTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function()? onDoubleTap, void Function()? onTapCancel})
DataCell$Mate(/// requiredParameters: Widget child 
Widget child, {/// optionalParameters: {bool placeholder = false} , hasDefaultValue:true, defaultValueCode:false
required bool placeholder, /// optionalParameters: {bool showEditIcon = false} , hasDefaultValue:true, defaultValueCode:false
required bool showEditIcon, /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
GestureTapCallback? onTap, /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
GestureLongPressCallback? onLongPress, /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , hasDefaultValue:false, defaultValueCode:null
GestureTapDownCallback? onTapDown, /// optionalParameters: {void Function()? onDoubleTap} , hasDefaultValue:false, defaultValueCode:null
GestureTapCallback? onDoubleTap, /// optionalParameters: {void Function()? onTapCancel} , hasDefaultValue:false, defaultValueCode:null
GestureTapCancelCallback? onTapCancel, }) : super(child, placeholder: placeholder, showEditIcon: showEditIcon, onTap: onTap, onLongPress: onLongPress, onTapDown: onTapDown, onDoubleTap: onDoubleTap, onTapCancel: onTapCancel, ) { mateBuilder = (p) => DataCell$Mate(p.get('child').value, placeholder: p.get('placeholder').build(), showEditIcon: p.get('showEditIcon').build(), onTap: p.get('onTap').build(), onLongPress: p.get('onLongPress').build(), onTapDown: p.get('onTapDown').build(), onDoubleTap: p.get('onDoubleTap').build(), onTapCancel: p.get('onTapCancel').build(), );
matePut('child', child);
matePut('placeholder', placeholder);
matePut('showEditIcon', showEditIcon);
matePut('onTap', onTap);
matePut('onLongPress', onLongPress);
matePut('onTapDown', onTapDown);
matePut('onDoubleTap', onDoubleTap);
matePut('onTapCancel', onTapCancel); }

 }
/// class DataTable extends StatelessWidget
class DataTable$Mate extends DataTable with Mate {/// DataTable DataTable({Key? key, required List<DataColumn> columns, int? sortColumnIndex, bool sortAscending = true, void Function(bool?)? onSelectAll, Decoration? decoration, MaterialStateProperty<Color?>? dataRowColor, double? dataRowHeight, double? dataRowMinHeight, double? dataRowMaxHeight, TextStyle? dataTextStyle, MaterialStateProperty<Color?>? headingRowColor, double? headingRowHeight, TextStyle? headingTextStyle, double? horizontalMargin, double? columnSpacing, bool showCheckboxColumn = true, bool showBottomBorder = false, double? dividerThickness, required List<DataRow> rows, double? checkboxHorizontalMargin, TableBorder? border, Clip clipBehavior = Clip.none})
DataTable$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required List<DataColumn> columns} , hasDefaultValue:false, defaultValueCode:null
required List<DataColumn> columns, /// optionalParameters: {int? sortColumnIndex} , hasDefaultValue:false, defaultValueCode:null
int? sortColumnIndex, /// optionalParameters: {bool sortAscending = true} , hasDefaultValue:true, defaultValueCode:true
required bool sortAscending, /// optionalParameters: {void Function(bool?)? onSelectAll} , hasDefaultValue:false, defaultValueCode:null
ValueSetter<bool?>? onSelectAll, /// optionalParameters: {Decoration? decoration} , hasDefaultValue:false, defaultValueCode:null
Decoration? decoration, /// optionalParameters: {MaterialStateProperty<Color?>? dataRowColor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? dataRowColor, /// optionalParameters: {double? dataRowMinHeight} , hasDefaultValue:false, defaultValueCode:null
double? dataRowMinHeight, /// optionalParameters: {double? dataRowMaxHeight} , hasDefaultValue:false, defaultValueCode:null
double? dataRowMaxHeight, /// optionalParameters: {TextStyle? dataTextStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? dataTextStyle, /// optionalParameters: {MaterialStateProperty<Color?>? headingRowColor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? headingRowColor, /// optionalParameters: {double? headingRowHeight} , hasDefaultValue:false, defaultValueCode:null
double? headingRowHeight, /// optionalParameters: {TextStyle? headingTextStyle} , hasDefaultValue:false, defaultValueCode:null
TextStyle? headingTextStyle, /// optionalParameters: {double? horizontalMargin} , hasDefaultValue:false, defaultValueCode:null
double? horizontalMargin, /// optionalParameters: {double? columnSpacing} , hasDefaultValue:false, defaultValueCode:null
double? columnSpacing, /// optionalParameters: {bool showCheckboxColumn = true} , hasDefaultValue:true, defaultValueCode:true
required bool showCheckboxColumn, /// optionalParameters: {bool showBottomBorder = false} , hasDefaultValue:true, defaultValueCode:false
required bool showBottomBorder, /// optionalParameters: {double? dividerThickness} , hasDefaultValue:false, defaultValueCode:null
double? dividerThickness, /// optionalParameters: {required List<DataRow> rows} , hasDefaultValue:false, defaultValueCode:null
required List<DataRow> rows, /// optionalParameters: {double? checkboxHorizontalMargin} , hasDefaultValue:false, defaultValueCode:null
double? checkboxHorizontalMargin, /// optionalParameters: {TableBorder? border} , hasDefaultValue:false, defaultValueCode:null
TableBorder? border, /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
required Clip clipBehavior, }) : super(key: key, columns: columns, sortColumnIndex: sortColumnIndex, sortAscending: sortAscending, onSelectAll: onSelectAll, decoration: decoration, dataRowColor: dataRowColor, dataRowMinHeight: dataRowMinHeight, dataRowMaxHeight: dataRowMaxHeight, dataTextStyle: dataTextStyle, headingRowColor: headingRowColor, headingRowHeight: headingRowHeight, headingTextStyle: headingTextStyle, horizontalMargin: horizontalMargin, columnSpacing: columnSpacing, showCheckboxColumn: showCheckboxColumn, showBottomBorder: showBottomBorder, dividerThickness: dividerThickness, rows: rows, checkboxHorizontalMargin: checkboxHorizontalMargin, border: border, clipBehavior: clipBehavior, ) { mateBuilder = (p) => DataTable$Mate(key: p.get('key').build(), columns: p.get('columns').build(), sortColumnIndex: p.get('sortColumnIndex').build(), sortAscending: p.get('sortAscending').build(), onSelectAll: p.get('onSelectAll').build(), decoration: p.get('decoration').build(), dataRowColor: p.get('dataRowColor').build(), dataRowMinHeight: p.get('dataRowMinHeight').build(), dataRowMaxHeight: p.get('dataRowMaxHeight').build(), dataTextStyle: p.get('dataTextStyle').build(), headingRowColor: p.get('headingRowColor').build(), headingRowHeight: p.get('headingRowHeight').build(), headingTextStyle: p.get('headingTextStyle').build(), horizontalMargin: p.get('horizontalMargin').build(), columnSpacing: p.get('columnSpacing').build(), showCheckboxColumn: p.get('showCheckboxColumn').build(), showBottomBorder: p.get('showBottomBorder').build(), dividerThickness: p.get('dividerThickness').build(), rows: p.get('rows').build(), checkboxHorizontalMargin: p.get('checkboxHorizontalMargin').build(), border: p.get('border').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('key', key);
matePut('columns', columns);
matePut('sortColumnIndex', sortColumnIndex);
matePut('sortAscending', sortAscending);
matePut('onSelectAll', onSelectAll);
matePut('decoration', decoration);
matePut('dataRowColor', dataRowColor);
matePut('dataRowMinHeight', dataRowMinHeight);
matePut('dataRowMaxHeight', dataRowMaxHeight);
matePut('dataTextStyle', dataTextStyle);
matePut('headingRowColor', headingRowColor);
matePut('headingRowHeight', headingRowHeight);
matePut('headingTextStyle', headingTextStyle);
matePut('horizontalMargin', horizontalMargin);
matePut('columnSpacing', columnSpacing);
matePut('showCheckboxColumn', showCheckboxColumn);
matePut('showBottomBorder', showBottomBorder);
matePut('dividerThickness', dividerThickness);
matePut('rows', rows);
matePut('checkboxHorizontalMargin', checkboxHorizontalMargin);
matePut('border', border);
matePut('clipBehavior', clipBehavior); }

 }
/// class TableRowInkWell extends InkResponse
class TableRowInkWell$Mate extends TableRowInkWell with Mate {/// TableRowInkWell TableRowInkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, MaterialStateProperty<Color?>? overlayColor})
TableRowInkWell$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
Widget? child, /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
GestureTapCallback? onTap, /// optionalParameters: {void Function()? onDoubleTap} , hasDefaultValue:false, defaultValueCode:null
GestureTapCallback? onDoubleTap, /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
GestureLongPressCallback? onLongPress, /// optionalParameters: {void Function(bool)? onHighlightChanged} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool>? onHighlightChanged, /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
MaterialStateProperty<Color?>? overlayColor, }) : super(key: key, child: child, onTap: onTap, onDoubleTap: onDoubleTap, onLongPress: onLongPress, onHighlightChanged: onHighlightChanged, overlayColor: overlayColor, ) { mateBuilder = (p) => TableRowInkWell$Mate(key: p.get('key').build(), child: p.get('child').build(), onTap: p.get('onTap').build(), onDoubleTap: p.get('onDoubleTap').build(), onLongPress: p.get('onLongPress').build(), onHighlightChanged: p.get('onHighlightChanged').build(), overlayColor: p.get('overlayColor').build(), );
matePut('key', key);
matePut('child', child);
matePut('onTap', onTap);
matePut('onDoubleTap', onDoubleTap);
matePut('onLongPress', onLongPress);
matePut('onHighlightChanged', onHighlightChanged);
matePut('overlayColor', overlayColor); }

 }
