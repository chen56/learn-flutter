// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/data_table.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/material/material_state.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/rendering/table_border.dart';

/// class DataColumn
class DataColumn$Mate extends DataColumn with Mate {
  /// DataColumn DataColumn({required Widget label, String? tooltip, bool numeric = false, void Function(int, bool)? onSort})
  DataColumn$Mate({
    /// optionalParameters: {required Widget label} , defaultValue:none
    required Widget label,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {bool numeric = false} , defaultValue:Literal
    bool numeric = false,

    /// optionalParameters: {void Function(int, bool)? onSort} , defaultValue:none
    DataColumnSortCallback? onSort,
  }) : super(
          label: label,
          tooltip: tooltip,
          numeric: numeric,
          onSort: onSort,
        ) {
    mateCreateName = 'DataColumn';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DataColumn$Mate(
          label: p.get('label').build(),
          tooltip: p.get('tooltip').build(),
          numeric: p.get('numeric').build(),
          onSort: p.get('onSort').build(),
        );
    mateUse('label', label, isNamed: true);
    mateUse('tooltip', tooltip, isNamed: true);
    mateUse('numeric', numeric, isNamed: true);
    mateUse('onSort', onSort, isNamed: true);
  }
}

/// class DataRow
class DataRow$Mate extends DataRow with Mate {
  /// DataRow DataRow({LocalKey? key, bool selected = false, void Function(bool?)? onSelectChanged, void Function()? onLongPress, MaterialStateProperty<Color?>? color, required List<DataCell> cells})
  DataRow$Mate({
    /// optionalParameters: {LocalKey? key} , defaultValue:none
    LocalKey? key,

    /// optionalParameters: {bool selected = false} , defaultValue:Literal
    bool selected = false,

    /// optionalParameters: {void Function(bool?)? onSelectChanged} , defaultValue:none
    ValueChanged<bool?>? onSelectChanged,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {MaterialStateProperty<Color?>? color} , defaultValue:none
    MaterialStateProperty<Color?>? color,

    /// optionalParameters: {required List<DataCell> cells} , defaultValue:none
    required List<DataCell> cells,
  }) : super(
          key: key,
          selected: selected,
          onSelectChanged: onSelectChanged,
          onLongPress: onLongPress,
          color: color,
          cells: cells,
        ) {
    mateCreateName = 'DataRow';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DataRow$Mate(
          key: p.get('key').build(),
          selected: p.get('selected').build(),
          onSelectChanged: p.get('onSelectChanged').build(),
          onLongPress: p.get('onLongPress').build(),
          color: p.get('color').build(),
          cells: p.get('cells').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('selected', selected, isNamed: true);
    mateUse('onSelectChanged', onSelectChanged, isNamed: true);
    mateUse('onLongPress', onLongPress, isNamed: true);
    mateUse('color', color, isNamed: true);
    mateUseList('cells', cells, isNamed: true);
  }

  /// DataRow DataRow.byIndex({int? index, bool selected = false, void Function(bool?)? onSelectChanged, void Function()? onLongPress, MaterialStateProperty<Color?>? color, required List<DataCell> cells})
  DataRow$Mate.byIndex({
    /// optionalParameters: {int? index} , defaultValue:none
    int? index,

    /// optionalParameters: {bool selected = false} , defaultValue:Literal
    bool selected = false,

    /// optionalParameters: {void Function(bool?)? onSelectChanged} , defaultValue:none
    ValueChanged<bool?>? onSelectChanged,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {MaterialStateProperty<Color?>? color} , defaultValue:none
    MaterialStateProperty<Color?>? color,

    /// optionalParameters: {required List<DataCell> cells} , defaultValue:none
    required List<DataCell> cells,
  }) : super.byIndex(
          index: index,
          selected: selected,
          onSelectChanged: onSelectChanged,
          onLongPress: onLongPress,
          color: color,
          cells: cells,
        ) {
    mateCreateName = 'DataRow.byIndex';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DataRow$Mate.byIndex(
          index: p.get('index').build(),
          selected: p.get('selected').build(),
          onSelectChanged: p.get('onSelectChanged').build(),
          onLongPress: p.get('onLongPress').build(),
          color: p.get('color').build(),
          cells: p.get('cells').build(),
        );
    mateUse('index', index, isNamed: true);
    mateUse('selected', selected, isNamed: true);
    mateUse('onSelectChanged', onSelectChanged, isNamed: true);
    mateUse('onLongPress', onLongPress, isNamed: true);
    mateUse('color', color, isNamed: true);
    mateUseList('cells', cells, isNamed: true);
  }
}

/// class DataCell
class DataCell$Mate extends DataCell with Mate {
  /// DataCell DataCell(Widget child, {bool placeholder = false, bool showEditIcon = false, void Function()? onTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function()? onDoubleTap, void Function()? onTapCancel})
  DataCell$Mate(
    /// requiredParameters: Widget child
    Widget child, {
    /// optionalParameters: {bool placeholder = false} , defaultValue:Literal
    bool placeholder = false,

    /// optionalParameters: {bool showEditIcon = false} , defaultValue:Literal
    bool showEditIcon = false,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , defaultValue:none
    GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function()? onDoubleTap} , defaultValue:none
    GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onTapCancel} , defaultValue:none
    GestureTapCancelCallback? onTapCancel,
  }) : super(
          child,
          placeholder: placeholder,
          showEditIcon: showEditIcon,
          onTap: onTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onDoubleTap: onDoubleTap,
          onTapCancel: onTapCancel,
        ) {
    mateCreateName = 'DataCell';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DataCell$Mate(
          p.get('child').value,
          placeholder: p.get('placeholder').build(),
          showEditIcon: p.get('showEditIcon').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onTapDown: p.get('onTapDown').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onTapCancel: p.get('onTapCancel').build(),
        );
    mateUse('child', child, isNamed: false);
    mateUse('placeholder', placeholder, isNamed: true);
    mateUse('showEditIcon', showEditIcon, isNamed: true);
    mateUse('onTap', onTap, isNamed: true);
    mateUse('onLongPress', onLongPress, isNamed: true);
    mateUse('onTapDown', onTapDown, isNamed: true);
    mateUse('onDoubleTap', onDoubleTap, isNamed: true);
    mateUse('onTapCancel', onTapCancel, isNamed: true);
  }
}

/// class DataTable extends StatelessWidget
class DataTable$Mate extends DataTable with Mate {
  /// DataTable DataTable({Key? key, required List<DataColumn> columns, int? sortColumnIndex, bool sortAscending = true, void Function(bool?)? onSelectAll, Decoration? decoration, MaterialStateProperty<Color?>? dataRowColor, double? dataRowHeight, double? dataRowMinHeight, double? dataRowMaxHeight, TextStyle? dataTextStyle, MaterialStateProperty<Color?>? headingRowColor, double? headingRowHeight, TextStyle? headingTextStyle, double? horizontalMargin, double? columnSpacing, bool showCheckboxColumn = true, bool showBottomBorder = false, double? dividerThickness, required List<DataRow> rows, double? checkboxHorizontalMargin, TableBorder? border, Clip clipBehavior = Clip.none})
  DataTable$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<DataColumn> columns} , defaultValue:none
    required List<DataColumn> columns,

    /// optionalParameters: {int? sortColumnIndex} , defaultValue:none
    int? sortColumnIndex,

    /// optionalParameters: {bool sortAscending = true} , defaultValue:Literal
    bool sortAscending = true,

    /// optionalParameters: {void Function(bool?)? onSelectAll} , defaultValue:none
    ValueSetter<bool?>? onSelectAll,

    /// optionalParameters: {Decoration? decoration} , defaultValue:none
    Decoration? decoration,

    /// optionalParameters: {MaterialStateProperty<Color?>? dataRowColor} , defaultValue:none
    MaterialStateProperty<Color?>? dataRowColor,

    /// optionalParameters: {double? dataRowMinHeight} , defaultValue:none
    double? dataRowMinHeight,

    /// optionalParameters: {double? dataRowMaxHeight} , defaultValue:none
    double? dataRowMaxHeight,

    /// optionalParameters: {TextStyle? dataTextStyle} , defaultValue:none
    TextStyle? dataTextStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? headingRowColor} , defaultValue:none
    MaterialStateProperty<Color?>? headingRowColor,

    /// optionalParameters: {double? headingRowHeight} , defaultValue:none
    double? headingRowHeight,

    /// optionalParameters: {TextStyle? headingTextStyle} , defaultValue:none
    TextStyle? headingTextStyle,

    /// optionalParameters: {double? horizontalMargin} , defaultValue:none
    double? horizontalMargin,

    /// optionalParameters: {double? columnSpacing} , defaultValue:none
    double? columnSpacing,

    /// optionalParameters: {bool showCheckboxColumn = true} , defaultValue:Literal
    bool showCheckboxColumn = true,

    /// optionalParameters: {bool showBottomBorder = false} , defaultValue:Literal
    bool showBottomBorder = false,

    /// optionalParameters: {double? dividerThickness} , defaultValue:none
    double? dividerThickness,

    /// optionalParameters: {required List<DataRow> rows} , defaultValue:none
    required List<DataRow> rows,

    /// optionalParameters: {double? checkboxHorizontalMargin} , defaultValue:none
    double? checkboxHorizontalMargin,

    /// optionalParameters: {TableBorder? border} , defaultValue:none
    TableBorder? border,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , defaultValue:PrefixedIdentifier
    Clip clipBehavior = Clip.none,
  }) : super(
          key: key,
          columns: columns,
          sortColumnIndex: sortColumnIndex,
          sortAscending: sortAscending,
          onSelectAll: onSelectAll,
          decoration: decoration,
          dataRowColor: dataRowColor,
          dataRowMinHeight: dataRowMinHeight,
          dataRowMaxHeight: dataRowMaxHeight,
          dataTextStyle: dataTextStyle,
          headingRowColor: headingRowColor,
          headingRowHeight: headingRowHeight,
          headingTextStyle: headingTextStyle,
          horizontalMargin: horizontalMargin,
          columnSpacing: columnSpacing,
          showCheckboxColumn: showCheckboxColumn,
          showBottomBorder: showBottomBorder,
          dividerThickness: dividerThickness,
          rows: rows,
          checkboxHorizontalMargin: checkboxHorizontalMargin,
          border: border,
          clipBehavior: clipBehavior,
        ) {
    mateCreateName = 'DataTable';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DataTable$Mate(
          key: p.get('key').build(),
          columns: p.get('columns').build(),
          sortColumnIndex: p.get('sortColumnIndex').build(),
          sortAscending: p.get('sortAscending').build(),
          onSelectAll: p.get('onSelectAll').build(),
          decoration: p.get('decoration').build(),
          dataRowColor: p.get('dataRowColor').build(),
          dataRowMinHeight: p.get('dataRowMinHeight').build(),
          dataRowMaxHeight: p.get('dataRowMaxHeight').build(),
          dataTextStyle: p.get('dataTextStyle').build(),
          headingRowColor: p.get('headingRowColor').build(),
          headingRowHeight: p.get('headingRowHeight').build(),
          headingTextStyle: p.get('headingTextStyle').build(),
          horizontalMargin: p.get('horizontalMargin').build(),
          columnSpacing: p.get('columnSpacing').build(),
          showCheckboxColumn: p.get('showCheckboxColumn').build(),
          showBottomBorder: p.get('showBottomBorder').build(),
          dividerThickness: p.get('dividerThickness').build(),
          rows: p.get('rows').build(),
          checkboxHorizontalMargin: p.get('checkboxHorizontalMargin').build(),
          border: p.get('border').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUseList('columns', columns, isNamed: true);
    mateUse('sortColumnIndex', sortColumnIndex, isNamed: true);
    mateUse('sortAscending', sortAscending, isNamed: true);
    mateUse('onSelectAll', onSelectAll, isNamed: true);
    mateUse('decoration', decoration, isNamed: true);
    mateUse('dataRowColor', dataRowColor, isNamed: true);
    mateUse('dataRowMinHeight', dataRowMinHeight, isNamed: true);
    mateUse('dataRowMaxHeight', dataRowMaxHeight, isNamed: true);
    mateUse('dataTextStyle', dataTextStyle, isNamed: true);
    mateUse('headingRowColor', headingRowColor, isNamed: true);
    mateUse('headingRowHeight', headingRowHeight, isNamed: true);
    mateUse('headingTextStyle', headingTextStyle, isNamed: true);
    mateUse('horizontalMargin', horizontalMargin, isNamed: true);
    mateUse('columnSpacing', columnSpacing, isNamed: true);
    mateUse('showCheckboxColumn', showCheckboxColumn, isNamed: true);
    mateUse('showBottomBorder', showBottomBorder, isNamed: true);
    mateUse('dividerThickness', dividerThickness, isNamed: true);
    mateUseList('rows', rows, isNamed: true);
    mateUse('checkboxHorizontalMargin', checkboxHorizontalMargin, isNamed: true);
    mateUse('border', border, isNamed: true);
    mateUse('clipBehavior', clipBehavior, isNamed: true);
  }
}

/// class TableRowInkWell extends InkResponse
class TableRowInkWell$Mate extends TableRowInkWell with Mate {
  /// TableRowInkWell TableRowInkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, MaterialStateProperty<Color?>? overlayColor})
  TableRowInkWell$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onDoubleTap} , defaultValue:none
    GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , defaultValue:none
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , defaultValue:none
    MaterialStateProperty<Color?>? overlayColor,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          overlayColor: overlayColor,
        ) {
    mateCreateName = 'TableRowInkWell';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TableRowInkWell$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTap: p.get('onTap').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onHighlightChanged: p.get('onHighlightChanged').build(),
          overlayColor: p.get('overlayColor').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('child', child, isNamed: true);
    mateUse('onTap', onTap, isNamed: true);
    mateUse('onDoubleTap', onDoubleTap, isNamed: true);
    mateUse('onLongPress', onLongPress, isNamed: true);
    mateUse('onHighlightChanged', onHighlightChanged, isNamed: true);
    mateUse('overlayColor', overlayColor, isNamed: true);
  }
}
