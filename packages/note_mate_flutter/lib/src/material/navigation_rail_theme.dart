// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/navigation_rail_theme.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/painting/text_style.dart' as _i4;
import 'package:flutter/src/widgets/icon_theme_data.dart' as _i5;
import 'package:flutter/src/material/navigation_rail.dart' as _i6;
import 'package:flutter/src/painting/borders.dart' as _i7;
import 'package:flutter/src/foundation/key.dart' as _i8;
import 'package:flutter/src/widgets/framework.dart' as _i9;

/// class NavigationRailThemeData with Diagnosticable
class NavigationRailThemeData$Mate extends _i1.NavigationRailThemeData with _i2.Mate {
  /// NavigationRailThemeData NavigationRailThemeData({Color? backgroundColor, double? elevation, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? groupAlignment, NavigationRailLabelType? labelType, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape, double? minWidth, double? minExtendedWidth})
  NavigationRailThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , default:none
    _i3.Color? backgroundColor,

    /// optionalParameters: {double? elevation} , default:none
    double? elevation,

    /// optionalParameters: {TextStyle? unselectedLabelTextStyle} , default:none
    _i4.TextStyle? unselectedLabelTextStyle,

    /// optionalParameters: {TextStyle? selectedLabelTextStyle} , default:none
    _i4.TextStyle? selectedLabelTextStyle,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , default:none
    _i5.IconThemeData? unselectedIconTheme,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , default:none
    _i5.IconThemeData? selectedIconTheme,

    /// optionalParameters: {double? groupAlignment} , default:none
    double? groupAlignment,

    /// optionalParameters: {NavigationRailLabelType? labelType} , default:none
    _i6.NavigationRailLabelType? labelType,

    /// optionalParameters: {bool? useIndicator} , default:none
    bool? useIndicator,

    /// optionalParameters: {Color? indicatorColor} , default:none
    _i3.Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , default:none
    _i7.ShapeBorder? indicatorShape,

    /// optionalParameters: {double? minWidth} , default:none
    double? minWidth,

    /// optionalParameters: {double? minExtendedWidth} , default:none
    double? minExtendedWidth,
  }) : super(
          backgroundColor: backgroundColor,
          elevation: elevation,
          unselectedLabelTextStyle: unselectedLabelTextStyle,
          selectedLabelTextStyle: selectedLabelTextStyle,
          unselectedIconTheme: unselectedIconTheme,
          selectedIconTheme: selectedIconTheme,
          groupAlignment: groupAlignment,
          labelType: labelType,
          useIndicator: useIndicator,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          minWidth: minWidth,
          minExtendedWidth: minExtendedWidth,
        ) {
    mateBuilderName = 'NavigationRailThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationRailThemeData$Mate(
          backgroundColor: p.get('backgroundColor').build(),
          elevation: p.get('elevation').build(),
          unselectedLabelTextStyle: p.get('unselectedLabelTextStyle').build(),
          selectedLabelTextStyle: p.get('selectedLabelTextStyle').build(),
          unselectedIconTheme: p.get('unselectedIconTheme').build(),
          selectedIconTheme: p.get('selectedIconTheme').build(),
          groupAlignment: p.get('groupAlignment').build(),
          labelType: p.get('labelType').build(),
          useIndicator: p.get('useIndicator').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
          minWidth: p.get('minWidth').build(),
          minExtendedWidth: p.get('minExtendedWidth').build(),
        );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'unselectedLabelTextStyle',
      unselectedLabelTextStyle,
      isNamed: true,
    );
    mateUse(
      'selectedLabelTextStyle',
      selectedLabelTextStyle,
      isNamed: true,
    );
    mateUse(
      'unselectedIconTheme',
      unselectedIconTheme,
      isNamed: true,
    );
    mateUse(
      'selectedIconTheme',
      selectedIconTheme,
      isNamed: true,
    );
    mateUse(
      'groupAlignment',
      groupAlignment,
      isNamed: true,
    );
    mateUse(
      'labelType',
      labelType,
      isNamed: true,
    );
    mateUse(
      'useIndicator',
      useIndicator,
      isNamed: true,
    );
    mateUse(
      'indicatorColor',
      indicatorColor,
      isNamed: true,
    );
    mateUse(
      'indicatorShape',
      indicatorShape,
      isNamed: true,
    );
    mateUse(
      'minWidth',
      minWidth,
      isNamed: true,
    );
    mateUse(
      'minExtendedWidth',
      minExtendedWidth,
      isNamed: true,
    );
  }
}

/// class NavigationRailTheme extends InheritedTheme
class NavigationRailTheme$Mate extends _i1.NavigationRailTheme with _i2.Mate {
  /// NavigationRailTheme NavigationRailTheme({Key? key, required NavigationRailThemeData data, required Widget child})
  NavigationRailTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i8.Key? key,

    /// optionalParameters: {required NavigationRailThemeData data} , default:none
    required _i1.NavigationRailThemeData data,

    /// optionalParameters: {required Widget child} , default:none
    required _i9.Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateBuilderName = 'NavigationRailTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationRailTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'data',
      data,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
