// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/foundation/diagnostics.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/foundation.dart' as _i3;

/// class TextTreeConfiguration
class TextTreeConfiguration$Mate extends _i1.TextTreeConfiguration with _i2.Mate {
  /// TextTreeConfiguration TextTreeConfiguration({required String prefixLineOne, required String prefixOtherLines, required String prefixLastChildLineOne, required String prefixOtherLinesRootNode, required String linkCharacter, required String propertyPrefixIfChildren, required String propertyPrefixNoChildren, String lineBreak = '\n', bool lineBreakProperties = true, String afterName = ':', String afterDescriptionIfBody = '', String afterDescription = '', String beforeProperties = '', String afterProperties = '', String mandatoryAfterProperties = '', String propertySeparator = '', String bodyIndent = '', String footer = '', bool showChildren = true, bool addBlankLineIfNoChildren = true, bool isNameOnOwnLine = false, bool isBlankLineBetweenPropertiesAndChildren = true, String beforeName = '', String suffixLineOne = '', String mandatoryFooter = ''})
  TextTreeConfiguration$Mate({
    /// optionalParameters: {required String prefixLineOne} , default:none
    required String prefixLineOne,

    /// optionalParameters: {required String prefixOtherLines} , default:none
    required String prefixOtherLines,

    /// optionalParameters: {required String prefixLastChildLineOne} , default:none
    required String prefixLastChildLineOne,

    /// optionalParameters: {required String prefixOtherLinesRootNode} , default:none
    required String prefixOtherLinesRootNode,

    /// optionalParameters: {required String linkCharacter} , default:none
    required String linkCharacter,

    /// optionalParameters: {required String propertyPrefixIfChildren} , default:none
    required String propertyPrefixIfChildren,

    /// optionalParameters: {required String propertyPrefixNoChildren} , default:none
    required String propertyPrefixNoChildren,

    /// optionalParameters: {String lineBreak = '\n'} , default:processed=SimpleStringLiteralImpl
    String lineBreak = '\n',

    /// optionalParameters: {bool lineBreakProperties = true} , default:processed=BooleanLiteralImpl
    bool lineBreakProperties = true,

    /// optionalParameters: {String afterName = ':'} , default:processed=SimpleStringLiteralImpl
    String afterName = ':',

    /// optionalParameters: {String afterDescriptionIfBody = ''} , default:processed=SimpleStringLiteralImpl
    String afterDescriptionIfBody = '',

    /// optionalParameters: {String afterDescription = ''} , default:processed=SimpleStringLiteralImpl
    String afterDescription = '',

    /// optionalParameters: {String beforeProperties = ''} , default:processed=SimpleStringLiteralImpl
    String beforeProperties = '',

    /// optionalParameters: {String afterProperties = ''} , default:processed=SimpleStringLiteralImpl
    String afterProperties = '',

    /// optionalParameters: {String mandatoryAfterProperties = ''} , default:processed=SimpleStringLiteralImpl
    String mandatoryAfterProperties = '',

    /// optionalParameters: {String propertySeparator = ''} , default:processed=SimpleStringLiteralImpl
    String propertySeparator = '',

    /// optionalParameters: {String bodyIndent = ''} , default:processed=SimpleStringLiteralImpl
    String bodyIndent = '',

    /// optionalParameters: {String footer = ''} , default:processed=SimpleStringLiteralImpl
    String footer = '',

    /// optionalParameters: {bool showChildren = true} , default:processed=BooleanLiteralImpl
    bool showChildren = true,

    /// optionalParameters: {bool addBlankLineIfNoChildren = true} , default:processed=BooleanLiteralImpl
    bool addBlankLineIfNoChildren = true,

    /// optionalParameters: {bool isNameOnOwnLine = false} , default:processed=BooleanLiteralImpl
    bool isNameOnOwnLine = false,

    /// optionalParameters: {bool isBlankLineBetweenPropertiesAndChildren = true} , default:processed=BooleanLiteralImpl
    bool isBlankLineBetweenPropertiesAndChildren = true,

    /// optionalParameters: {String beforeName = ''} , default:processed=SimpleStringLiteralImpl
    String beforeName = '',

    /// optionalParameters: {String suffixLineOne = ''} , default:processed=SimpleStringLiteralImpl
    String suffixLineOne = '',

    /// optionalParameters: {String mandatoryFooter = ''} , default:processed=SimpleStringLiteralImpl
    String mandatoryFooter = '',
  }) : super(
          prefixLineOne: prefixLineOne,
          prefixOtherLines: prefixOtherLines,
          prefixLastChildLineOne: prefixLastChildLineOne,
          prefixOtherLinesRootNode: prefixOtherLinesRootNode,
          linkCharacter: linkCharacter,
          propertyPrefixIfChildren: propertyPrefixIfChildren,
          propertyPrefixNoChildren: propertyPrefixNoChildren,
          lineBreak: lineBreak,
          lineBreakProperties: lineBreakProperties,
          afterName: afterName,
          afterDescriptionIfBody: afterDescriptionIfBody,
          afterDescription: afterDescription,
          beforeProperties: beforeProperties,
          afterProperties: afterProperties,
          mandatoryAfterProperties: mandatoryAfterProperties,
          propertySeparator: propertySeparator,
          bodyIndent: bodyIndent,
          footer: footer,
          showChildren: showChildren,
          addBlankLineIfNoChildren: addBlankLineIfNoChildren,
          isNameOnOwnLine: isNameOnOwnLine,
          isBlankLineBetweenPropertiesAndChildren: isBlankLineBetweenPropertiesAndChildren,
          beforeName: beforeName,
          suffixLineOne: suffixLineOne,
          mandatoryFooter: mandatoryFooter,
        ) {
    mateBuilderName = 'TextTreeConfiguration';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => TextTreeConfiguration$Mate(
          prefixLineOne: p.get('prefixLineOne').build(),
          prefixOtherLines: p.get('prefixOtherLines').build(),
          prefixLastChildLineOne: p.get('prefixLastChildLineOne').build(),
          prefixOtherLinesRootNode: p.get('prefixOtherLinesRootNode').build(),
          linkCharacter: p.get('linkCharacter').build(),
          propertyPrefixIfChildren: p.get('propertyPrefixIfChildren').build(),
          propertyPrefixNoChildren: p.get('propertyPrefixNoChildren').build(),
          lineBreak: p.get('lineBreak').build(),
          lineBreakProperties: p.get('lineBreakProperties').build(),
          afterName: p.get('afterName').build(),
          afterDescriptionIfBody: p.get('afterDescriptionIfBody').build(),
          afterDescription: p.get('afterDescription').build(),
          beforeProperties: p.get('beforeProperties').build(),
          afterProperties: p.get('afterProperties').build(),
          mandatoryAfterProperties: p.get('mandatoryAfterProperties').build(),
          propertySeparator: p.get('propertySeparator').build(),
          bodyIndent: p.get('bodyIndent').build(),
          footer: p.get('footer').build(),
          showChildren: p.get('showChildren').build(),
          addBlankLineIfNoChildren: p.get('addBlankLineIfNoChildren').build(),
          isNameOnOwnLine: p.get('isNameOnOwnLine').build(),
          isBlankLineBetweenPropertiesAndChildren: p.get('isBlankLineBetweenPropertiesAndChildren').build(),
          beforeName: p.get('beforeName').build(),
          suffixLineOne: p.get('suffixLineOne').build(),
          mandatoryFooter: p.get('mandatoryFooter').build(),
        );
    mateUse(
      'prefixLineOne',
      prefixLineOne,
      isNamed: true,
    );
    mateUse(
      'prefixOtherLines',
      prefixOtherLines,
      isNamed: true,
    );
    mateUse(
      'prefixLastChildLineOne',
      prefixLastChildLineOne,
      isNamed: true,
    );
    mateUse(
      'prefixOtherLinesRootNode',
      prefixOtherLinesRootNode,
      isNamed: true,
    );
    mateUse(
      'linkCharacter',
      linkCharacter,
      isNamed: true,
    );
    mateUse(
      'propertyPrefixIfChildren',
      propertyPrefixIfChildren,
      isNamed: true,
    );
    mateUse(
      'propertyPrefixNoChildren',
      propertyPrefixNoChildren,
      isNamed: true,
    );
    mateUse(
      'lineBreak',
      lineBreak,
      isNamed: true,
      defaultValue: '\n',
    );
    mateUse(
      'lineBreakProperties',
      lineBreakProperties,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'afterName',
      afterName,
      isNamed: true,
      defaultValue: ':',
    );
    mateUse(
      'afterDescriptionIfBody',
      afterDescriptionIfBody,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'afterDescription',
      afterDescription,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'beforeProperties',
      beforeProperties,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'afterProperties',
      afterProperties,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'mandatoryAfterProperties',
      mandatoryAfterProperties,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'propertySeparator',
      propertySeparator,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'bodyIndent',
      bodyIndent,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'footer',
      footer,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'showChildren',
      showChildren,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'addBlankLineIfNoChildren',
      addBlankLineIfNoChildren,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'isNameOnOwnLine',
      isNameOnOwnLine,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'isBlankLineBetweenPropertiesAndChildren',
      isBlankLineBetweenPropertiesAndChildren,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'beforeName',
      beforeName,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'suffixLineOne',
      suffixLineOne,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'mandatoryFooter',
      mandatoryFooter,
      isNamed: true,
      defaultValue: '',
    );
  }
}

/// class TextTreeRenderer
class TextTreeRenderer$Mate extends _i1.TextTreeRenderer with _i2.Mate {
  /// TextTreeRenderer TextTreeRenderer({DiagnosticLevel minLevel = DiagnosticLevel.debug, int wrapWidth = 100, int wrapWidthProperties = 65, int maxDescendentsTruncatableNode = -1})
  TextTreeRenderer$Mate({
    /// optionalParameters: {DiagnosticLevel minLevel = DiagnosticLevel.debug} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel minLevel = _i3.DiagnosticLevel.debug,

    /// optionalParameters: {int wrapWidth = 100} , default:processed=IntegerLiteralImpl
    int wrapWidth = 100,

    /// optionalParameters: {int wrapWidthProperties = 65} , default:processed=IntegerLiteralImpl
    int wrapWidthProperties = 65,

    /// optionalParameters: {int maxDescendentsTruncatableNode = -1} , default:processed=PrefixExpressionImpl
    int maxDescendentsTruncatableNode = -1,
  }) : super(
          minLevel: minLevel,
          wrapWidth: wrapWidth,
          wrapWidthProperties: wrapWidthProperties,
          maxDescendentsTruncatableNode: maxDescendentsTruncatableNode,
        ) {
    mateBuilderName = 'TextTreeRenderer';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => TextTreeRenderer$Mate(
          minLevel: p.get('minLevel').build(),
          wrapWidth: p.get('wrapWidth').build(),
          wrapWidthProperties: p.get('wrapWidthProperties').build(),
          maxDescendentsTruncatableNode: p.get('maxDescendentsTruncatableNode').build(),
        );
    mateUse(
      'minLevel',
      minLevel,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.debug,
    );
    mateUse(
      'wrapWidth',
      wrapWidth,
      isNamed: true,
      defaultValue: 100,
    );
    mateUse(
      'wrapWidthProperties',
      wrapWidthProperties,
      isNamed: true,
      defaultValue: 65,
    );
    mateUse(
      'maxDescendentsTruncatableNode',
      maxDescendentsTruncatableNode,
      isNamed: true,
      defaultValue: -1,
    );
  }
}

/// class MessageProperty extends DiagnosticsProperty<void>
class MessageProperty$Mate extends _i1.MessageProperty with _i2.Mate {
  /// MessageProperty MessageProperty(String name, String message, {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  MessageProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: String message
    String message, {
    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          message,
          style: style,
          level: level,
        ) {
    mateBuilderName = 'MessageProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => MessageProperty$Mate(
          p.get('name').value,
          p.get('message').value,
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'message',
      message,
      isNamed: false,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.singleLine,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class StringProperty extends DiagnosticsProperty<String>
class StringProperty$Mate extends _i1.StringProperty with _i2.Mate {
  /// StringProperty StringProperty(String name, String? value, {String? description, String? tooltip, bool showName = true, Object? defaultValue = kNoDefaultValue, bool quoted = true, String? ifEmpty, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  StringProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: String? value
    String? value, {
    /// optionalParameters: {String? description} , default:none
    String? description,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {bool quoted = true} , default:processed=BooleanLiteralImpl
    bool quoted = true,

    /// optionalParameters: {String? ifEmpty} , default:none
    String? ifEmpty,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          description: description,
          tooltip: tooltip,
          showName: showName,
          defaultValue: defaultValue,
          quoted: quoted,
          ifEmpty: ifEmpty,
          style: style,
          level: level,
        ) {
    mateBuilderName = 'StringProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => StringProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          description: p.get('description').build(),
          tooltip: p.get('tooltip').build(),
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          quoted: p.get('quoted').build(),
          ifEmpty: p.get('ifEmpty').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'description',
      description,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'quoted',
      quoted,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'ifEmpty',
      ifEmpty,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.singleLine,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class DoubleProperty extends _NumProperty<double>
class DoubleProperty$Mate extends _i1.DoubleProperty with _i2.Mate {
  /// DoubleProperty DoubleProperty(String name, double? value, {String? ifNull, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? value
    double? value, {
    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {String? unit} , default:none
    String? unit,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          showName: showName,
          style: style,
          level: level,
        ) {
    mateBuilderName = 'DoubleProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DoubleProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          ifNull: p.get('ifNull').build(),
          unit: p.get('unit').build(),
          tooltip: p.get('tooltip').build(),
          defaultValue: p.get('defaultValue').build(),
          showName: p.get('showName').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'unit',
      unit,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.singleLine,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }

  /// DoubleProperty DoubleProperty.lazy(String name, double? Function() computeValue, {String? ifNull, bool showName = true, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate.lazy(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? Function() computeValue
    _i1.ComputePropertyValueCallback<double> computeValue, {
    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {String? unit} , default:none
    String? unit,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super.lazy(
          name,
          computeValue,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateBuilderName = 'DoubleProperty.lazy';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DoubleProperty$Mate.lazy(
          p.get('name').value,
          p.get('computeValue').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          unit: p.get('unit').build(),
          tooltip: p.get('tooltip').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'computeValue',
      computeValue,
      isNamed: false,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'unit',
      unit,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class IntProperty extends _NumProperty<int>
class IntProperty$Mate extends _i1.IntProperty with _i2.Mate {
  /// IntProperty IntProperty(String name, int? value, {String? ifNull, bool showName = true, String? unit, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IntProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: int? value
    int? value, {
    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {String? unit} , default:none
    String? unit,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          defaultValue: defaultValue,
          style: style,
          level: level,
        ) {
    mateBuilderName = 'IntProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => IntProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          unit: p.get('unit').build(),
          defaultValue: p.get('defaultValue').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'unit',
      unit,
      isNamed: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.singleLine,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class PercentProperty extends DoubleProperty
class PercentProperty$Mate extends _i1.PercentProperty with _i2.Mate {
  /// PercentProperty PercentProperty(String name, double? fraction, {String? ifNull, bool showName = true, String? tooltip, String? unit, DiagnosticLevel level = DiagnosticLevel.info})
  PercentProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? fraction
    double? fraction, {
    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {String? unit} , default:none
    String? unit,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          fraction,
          ifNull: ifNull,
          showName: showName,
          tooltip: tooltip,
          unit: unit,
          level: level,
        ) {
    mateBuilderName = 'PercentProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => PercentProperty$Mate(
          p.get('name').value,
          p.get('fraction').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          tooltip: p.get('tooltip').build(),
          unit: p.get('unit').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'fraction',
      fraction,
      isNamed: false,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'unit',
      unit,
      isNamed: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class FlagProperty extends DiagnosticsProperty<bool>
class FlagProperty$Mate extends _i1.FlagProperty with _i2.Mate {
  /// FlagProperty FlagProperty(String name, {required bool? value, String? ifTrue, String? ifFalse, bool showName = false, Object? defaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  FlagProperty$Mate(
    /// requiredParameters: String name
    String name, {
    /// optionalParameters: {required bool? value} , default:none
    required bool? value,

    /// optionalParameters: {String? ifTrue} , default:none
    String? ifTrue,

    /// optionalParameters: {String? ifFalse} , default:none
    String? ifFalse,

    /// optionalParameters: {bool showName = false} , default:processed=BooleanLiteralImpl
    bool showName = false,

    /// optionalParameters: {Object? defaultValue} , default:none
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value: value,
          ifTrue: ifTrue,
          ifFalse: ifFalse,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateBuilderName = 'FlagProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => FlagProperty$Mate(
          p.get('name').value,
          value: p.get('value').build(),
          ifTrue: p.get('ifTrue').build(),
          ifFalse: p.get('ifFalse').build(),
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'ifTrue',
      ifTrue,
      isNamed: true,
    );
    mateUse(
      'ifFalse',
      ifFalse,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class IterableProperty<T> extends DiagnosticsProperty<Iterable<T>>
class IterableProperty$Mate<T> extends _i1.IterableProperty<T> with _i2.Mate {
  /// IterableProperty<T> IterableProperty(String name, Iterable<T>? value, {Object? defaultValue = kNoDefaultValue, String? ifNull, String? ifEmpty = '[]', DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  IterableProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Iterable<T>? value
    Iterable<T>? value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {String? ifEmpty = '[]'} , default:processed=SimpleStringLiteralImpl
    String? ifEmpty = '[]',

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    bool showSeparator = true,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateBuilderName = 'IterableProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => IterableProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          defaultValue: p.get('defaultValue').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          style: p.get('style').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'ifEmpty',
      ifEmpty,
      isNamed: true,
      defaultValue: '[]',
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.singleLine,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'showSeparator',
      showSeparator,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class EnumProperty<T> extends DiagnosticsProperty<T>
class EnumProperty$Mate<T> extends _i1.EnumProperty<T> with _i2.Mate {
  /// EnumProperty<T> EnumProperty(String name, T? value, {Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  EnumProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateBuilderName = 'EnumProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => EnumProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class ObjectFlagProperty<T> extends DiagnosticsProperty<T>
class ObjectFlagProperty$Mate<T> extends _i1.ObjectFlagProperty<T> with _i2.Mate {
  /// ObjectFlagProperty<T> ObjectFlagProperty(String name, T? value, {String? ifPresent, String? ifNull, bool showName = false, DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {String? ifPresent} , default:none
    String? ifPresent,

    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {bool showName = false} , default:processed=BooleanLiteralImpl
    bool showName = false,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          ifPresent: ifPresent,
          ifNull: ifNull,
          showName: showName,
          level: level,
        ) {
    mateBuilderName = 'ObjectFlagProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => ObjectFlagProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          ifPresent: p.get('ifPresent').build(),
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'ifPresent',
      ifPresent,
      isNamed: true,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }

  /// ObjectFlagProperty<T> ObjectFlagProperty.has(String name, T? value, {DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate.has(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super.has(
          name,
          value,
          level: level,
        ) {
    mateBuilderName = 'ObjectFlagProperty.has';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => ObjectFlagProperty$Mate<T>.has(
          p.get('name').value,
          p.get('value').value,
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class FlagsSummary<T> extends DiagnosticsProperty<Map<String, T?>>
class FlagsSummary$Mate<T> extends _i1.FlagsSummary<T> with _i2.Mate {
  /// FlagsSummary<T> FlagsSummary(String name, Map<String, T?> value, {String? ifEmpty, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  FlagsSummary$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Map<String, T?> value
    Map<String, T?> value, {
    /// optionalParameters: {String? ifEmpty} , default:none
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    bool showSeparator = true,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateBuilderName = 'FlagsSummary';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => FlagsSummary$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'ifEmpty',
      ifEmpty,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'showSeparator',
      showSeparator,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class DiagnosticsProperty<T> extends DiagnosticsNode
class DiagnosticsProperty$Mate<T> extends _i1.DiagnosticsProperty<T> with _i2.Mate {
  /// DiagnosticsProperty<T> DiagnosticsProperty(String? name, T? value, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, String? linePrefix, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate(
    /// requiredParameters: String? name
    String? name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {String? description} , default:none
    String? description,

    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {String? ifEmpty} , default:none
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    bool showSeparator = true,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {bool missingIfNull = false} , default:processed=BooleanLiteralImpl
    bool missingIfNull = false,

    /// optionalParameters: {String? linePrefix} , default:none
    String? linePrefix,

    /// optionalParameters: {bool expandableValue = false} , default:processed=BooleanLiteralImpl
    bool expandableValue = false,

    /// optionalParameters: {bool allowWrap = true} , default:processed=BooleanLiteralImpl
    bool allowWrap = true,

    /// optionalParameters: {bool allowNameWrap = true} , default:processed=BooleanLiteralImpl
    bool allowNameWrap = true,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          linePrefix: linePrefix,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateBuilderName = 'DiagnosticsProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          description: p.get('description').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          defaultValue: p.get('defaultValue').build(),
          tooltip: p.get('tooltip').build(),
          missingIfNull: p.get('missingIfNull').build(),
          linePrefix: p.get('linePrefix').build(),
          expandableValue: p.get('expandableValue').build(),
          allowWrap: p.get('allowWrap').build(),
          allowNameWrap: p.get('allowNameWrap').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'description',
      description,
      isNamed: true,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'ifEmpty',
      ifEmpty,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'showSeparator',
      showSeparator,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'missingIfNull',
      missingIfNull,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'linePrefix',
      linePrefix,
      isNamed: true,
    );
    mateUse(
      'expandableValue',
      expandableValue,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'allowWrap',
      allowWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'allowNameWrap',
      allowNameWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.singleLine,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }

  /// DiagnosticsProperty<T> DiagnosticsProperty.lazy(String? name, T? Function() computeValue, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate.lazy(
    /// requiredParameters: String? name
    String? name,

    /// requiredParameters: T? Function() computeValue
    _i1.ComputePropertyValueCallback<T> computeValue, {
    /// optionalParameters: {String? description} , default:none
    String? description,

    /// optionalParameters: {String? ifNull} , default:none
    String? ifNull,

    /// optionalParameters: {String? ifEmpty} , default:none
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    bool showSeparator = true,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {bool missingIfNull = false} , default:processed=BooleanLiteralImpl
    bool missingIfNull = false,

    /// optionalParameters: {bool expandableValue = false} , default:processed=BooleanLiteralImpl
    bool expandableValue = false,

    /// optionalParameters: {bool allowWrap = true} , default:processed=BooleanLiteralImpl
    bool allowWrap = true,

    /// optionalParameters: {bool allowNameWrap = true} , default:processed=BooleanLiteralImpl
    bool allowNameWrap = true,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,
  }) : super.lazy(
          name,
          computeValue,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateBuilderName = 'DiagnosticsProperty.lazy';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsProperty$Mate<T>.lazy(
          p.get('name').value,
          p.get('computeValue').value,
          description: p.get('description').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          defaultValue: p.get('defaultValue').build(),
          tooltip: p.get('tooltip').build(),
          missingIfNull: p.get('missingIfNull').build(),
          expandableValue: p.get('expandableValue').build(),
          allowWrap: p.get('allowWrap').build(),
          allowNameWrap: p.get('allowNameWrap').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'computeValue',
      computeValue,
      isNamed: false,
    );
    mateUse(
      'description',
      description,
      isNamed: true,
    );
    mateUse(
      'ifNull',
      ifNull,
      isNamed: true,
    );
    mateUse(
      'ifEmpty',
      ifEmpty,
      isNamed: true,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'showSeparator',
      showSeparator,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'missingIfNull',
      missingIfNull,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'expandableValue',
      expandableValue,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'allowWrap',
      allowWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'allowNameWrap',
      allowNameWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.singleLine,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
  }
}

/// class DiagnosticableNode<T extends Diagnosticable> extends DiagnosticsNode
class DiagnosticableNode$Mate<T extends _i1.Diagnosticable> extends _i1.DiagnosticableNode<T> with _i2.Mate {
  /// DiagnosticableNode<T> DiagnosticableNode({String? name, required T value, required DiagnosticsTreeStyle? style})
  DiagnosticableNode$Mate({
    /// optionalParameters: {String? name} , default:none
    String? name,

    /// optionalParameters: {required T value} , default:none
    required T value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , default:none
    required _i1.DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateBuilderName = 'DiagnosticableNode';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticableNode$Mate<T>(
          name: p.get('name').build(),
          value: p.get('value').build(),
          style: p.get('style').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
  }
}

/// class DiagnosticableTreeNode extends DiagnosticableNode<DiagnosticableTree>
class DiagnosticableTreeNode$Mate extends _i1.DiagnosticableTreeNode with _i2.Mate {
  /// DiagnosticableTreeNode DiagnosticableTreeNode({String? name, required DiagnosticableTree value, required DiagnosticsTreeStyle? style})
  DiagnosticableTreeNode$Mate({
    /// optionalParameters: {String? name} , default:none
    String? name,

    /// optionalParameters: {required DiagnosticableTree value} , default:none
    required _i1.DiagnosticableTree value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , default:none
    required _i1.DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateBuilderName = 'DiagnosticableTreeNode';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticableTreeNode$Mate(
          name: p.get('name').build(),
          value: p.get('value').build(),
          style: p.get('style').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
  }
}

/// class DiagnosticPropertiesBuilder
class DiagnosticPropertiesBuilder$Mate extends _i1.DiagnosticPropertiesBuilder with _i2.Mate {
  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder.fromProperties(List<DiagnosticsNode> properties)
  DiagnosticPropertiesBuilder$Mate.fromProperties(

      /// requiredParameters: List<DiagnosticsNode> properties
      List<_i1.DiagnosticsNode> properties)
      : super.fromProperties(properties) {
    mateBuilderName = 'DiagnosticPropertiesBuilder.fromProperties';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticPropertiesBuilder$Mate.fromProperties(p.get('properties').value);
    mateUse(
      'properties',
      properties,
      isNamed: false,
    );
  }
}

/// class DiagnosticsBlock extends DiagnosticsNode
class DiagnosticsBlock$Mate extends _i1.DiagnosticsBlock with _i2.Mate {
  /// DiagnosticsBlock DiagnosticsBlock({String? name, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace, bool showName = true, bool showSeparator = true, String? linePrefix, Object? value, String? description, DiagnosticLevel level = DiagnosticLevel.info, bool allowTruncate = false, List<DiagnosticsNode> children = const <DiagnosticsNode>[], List<DiagnosticsNode> properties = const <DiagnosticsNode>[]})
  DiagnosticsBlock$Mate({
    /// optionalParameters: {String? name} , default:none
    String? name,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticsTreeStyle style = _i3.DiagnosticsTreeStyle.whitespace,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    bool showSeparator = true,

    /// optionalParameters: {String? linePrefix} , default:none
    String? linePrefix,

    /// optionalParameters: {Object? value} , default:none
    Object? value,

    /// optionalParameters: {String? description} , default:none
    String? description,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i1.DiagnosticLevel level = _i3.DiagnosticLevel.info,

    /// optionalParameters: {bool allowTruncate = false} , default:processed=BooleanLiteralImpl
    bool allowTruncate = false,

    /// optionalParameters: {List<DiagnosticsNode> children = const <DiagnosticsNode>[]} , default:unprocessed=ListLiteralImpl
    required List<_i1.DiagnosticsNode> children,

    /// optionalParameters: {List<DiagnosticsNode> properties = const <DiagnosticsNode>[]} , default:unprocessed=ListLiteralImpl
    required List<_i1.DiagnosticsNode> properties,
  }) : super(
          name: name,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          linePrefix: linePrefix,
          value: value,
          description: description,
          level: level,
          allowTruncate: allowTruncate,
          children: children,
          properties: properties,
        ) {
    mateBuilderName = 'DiagnosticsBlock';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsBlock$Mate(
          name: p.get('name').build(),
          style: p.get('style').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          linePrefix: p.get('linePrefix').build(),
          value: p.get('value').build(),
          description: p.get('description').build(),
          level: p.get('level').build(),
          allowTruncate: p.get('allowTruncate').build(),
          children: p.get('children').build(),
          properties: p.get('properties').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
      defaultValue: _i3.DiagnosticsTreeStyle.whitespace,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'showSeparator',
      showSeparator,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'linePrefix',
      linePrefix,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'description',
      description,
      isNamed: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i3.DiagnosticLevel.info,
    );
    mateUse(
      'allowTruncate',
      allowTruncate,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'properties',
      properties,
      isNamed: true,
    );
  }
}
