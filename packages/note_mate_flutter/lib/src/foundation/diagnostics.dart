// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/foundation/diagnostics.dart' as _i1;
import 'package:note/mate.dart' as _i2;

/// class TextTreeConfiguration
class TextTreeConfiguration$Mate extends _i1.TextTreeConfiguration with _i2.Mate {
  /// TextTreeConfiguration TextTreeConfiguration({required String prefixLineOne, required String prefixOtherLines, required String prefixLastChildLineOne, required String prefixOtherLinesRootNode, required String linkCharacter, required String propertyPrefixIfChildren, required String propertyPrefixNoChildren, String lineBreak = '\n', bool lineBreakProperties = true, String afterName = ':', String afterDescriptionIfBody = '', String afterDescription = '', String beforeProperties = '', String afterProperties = '', String mandatoryAfterProperties = '', String propertySeparator = '', String bodyIndent = '', String footer = '', bool showChildren = true, bool addBlankLineIfNoChildren = true, bool isNameOnOwnLine = false, bool isBlankLineBetweenPropertiesAndChildren = true, String beforeName = '', String suffixLineOne = '', String mandatoryFooter = ''})
  TextTreeConfiguration$Mate({
    /// optionalParameters: {required String prefixLineOne} , default:none
    required super.prefixLineOne,

    /// optionalParameters: {required String prefixOtherLines} , default:none
    required super.prefixOtherLines,

    /// optionalParameters: {required String prefixLastChildLineOne} , default:none
    required super.prefixLastChildLineOne,

    /// optionalParameters: {required String prefixOtherLinesRootNode} , default:none
    required super.prefixOtherLinesRootNode,

    /// optionalParameters: {required String linkCharacter} , default:none
    required super.linkCharacter,

    /// optionalParameters: {required String propertyPrefixIfChildren} , default:none
    required super.propertyPrefixIfChildren,

    /// optionalParameters: {required String propertyPrefixNoChildren} , default:none
    required super.propertyPrefixNoChildren,

    /// optionalParameters: {String lineBreak = '\n'} , default:processed=SimpleStringLiteralImpl
    super.lineBreak,

    /// optionalParameters: {bool lineBreakProperties = true} , default:processed=BooleanLiteralImpl
    super.lineBreakProperties,

    /// optionalParameters: {String afterName = ':'} , default:processed=SimpleStringLiteralImpl
    super.afterName,

    /// optionalParameters: {String afterDescriptionIfBody = ''} , default:processed=SimpleStringLiteralImpl
    super.afterDescriptionIfBody,

    /// optionalParameters: {String afterDescription = ''} , default:processed=SimpleStringLiteralImpl
    super.afterDescription,

    /// optionalParameters: {String beforeProperties = ''} , default:processed=SimpleStringLiteralImpl
    super.beforeProperties,

    /// optionalParameters: {String afterProperties = ''} , default:processed=SimpleStringLiteralImpl
    super.afterProperties,

    /// optionalParameters: {String mandatoryAfterProperties = ''} , default:processed=SimpleStringLiteralImpl
    super.mandatoryAfterProperties,

    /// optionalParameters: {String propertySeparator = ''} , default:processed=SimpleStringLiteralImpl
    super.propertySeparator,

    /// optionalParameters: {String bodyIndent = ''} , default:processed=SimpleStringLiteralImpl
    super.bodyIndent,

    /// optionalParameters: {String footer = ''} , default:processed=SimpleStringLiteralImpl
    super.footer,

    /// optionalParameters: {bool showChildren = true} , default:processed=BooleanLiteralImpl
    super.showChildren,

    /// optionalParameters: {bool addBlankLineIfNoChildren = true} , default:processed=BooleanLiteralImpl
    super.addBlankLineIfNoChildren,

    /// optionalParameters: {bool isNameOnOwnLine = false} , default:processed=BooleanLiteralImpl
    super.isNameOnOwnLine,

    /// optionalParameters: {bool isBlankLineBetweenPropertiesAndChildren = true} , default:processed=BooleanLiteralImpl
    super.isBlankLineBetweenPropertiesAndChildren,

    /// optionalParameters: {String beforeName = ''} , default:processed=SimpleStringLiteralImpl
    super.beforeName,

    /// optionalParameters: {String suffixLineOne = ''} , default:processed=SimpleStringLiteralImpl
    super.suffixLineOne,

    /// optionalParameters: {String mandatoryFooter = ''} , default:processed=SimpleStringLiteralImpl
    super.mandatoryFooter,
  })  : mateParams = {
          'prefixLineOne': _i2.BuilderArg<String>(
            name: 'prefixLineOne',
            init: prefixLineOne,
            isNamed: true,
          ),
          'prefixOtherLines': _i2.BuilderArg<String>(
            name: 'prefixOtherLines',
            init: prefixOtherLines,
            isNamed: true,
          ),
          'prefixLastChildLineOne': _i2.BuilderArg<String>(
            name: 'prefixLastChildLineOne',
            init: prefixLastChildLineOne,
            isNamed: true,
          ),
          'prefixOtherLinesRootNode': _i2.BuilderArg<String>(
            name: 'prefixOtherLinesRootNode',
            init: prefixOtherLinesRootNode,
            isNamed: true,
          ),
          'linkCharacter': _i2.BuilderArg<String>(
            name: 'linkCharacter',
            init: linkCharacter,
            isNamed: true,
          ),
          'propertyPrefixIfChildren': _i2.BuilderArg<String>(
            name: 'propertyPrefixIfChildren',
            init: propertyPrefixIfChildren,
            isNamed: true,
          ),
          'propertyPrefixNoChildren': _i2.BuilderArg<String>(
            name: 'propertyPrefixNoChildren',
            init: propertyPrefixNoChildren,
            isNamed: true,
          ),
          'lineBreak': _i2.BuilderArg<String>(
            name: 'lineBreak',
            init: lineBreak,
            isNamed: true,
            defaultValue: '\n',
          ),
          'lineBreakProperties': _i2.BuilderArg<bool>(
            name: 'lineBreakProperties',
            init: lineBreakProperties,
            isNamed: true,
            defaultValue: true,
          ),
          'afterName': _i2.BuilderArg<String>(
            name: 'afterName',
            init: afterName,
            isNamed: true,
            defaultValue: ':',
          ),
          'afterDescriptionIfBody': _i2.BuilderArg<String>(
            name: 'afterDescriptionIfBody',
            init: afterDescriptionIfBody,
            isNamed: true,
            defaultValue: '',
          ),
          'afterDescription': _i2.BuilderArg<String>(
            name: 'afterDescription',
            init: afterDescription,
            isNamed: true,
            defaultValue: '',
          ),
          'beforeProperties': _i2.BuilderArg<String>(
            name: 'beforeProperties',
            init: beforeProperties,
            isNamed: true,
            defaultValue: '',
          ),
          'afterProperties': _i2.BuilderArg<String>(
            name: 'afterProperties',
            init: afterProperties,
            isNamed: true,
            defaultValue: '',
          ),
          'mandatoryAfterProperties': _i2.BuilderArg<String>(
            name: 'mandatoryAfterProperties',
            init: mandatoryAfterProperties,
            isNamed: true,
            defaultValue: '',
          ),
          'propertySeparator': _i2.BuilderArg<String>(
            name: 'propertySeparator',
            init: propertySeparator,
            isNamed: true,
            defaultValue: '',
          ),
          'bodyIndent': _i2.BuilderArg<String>(
            name: 'bodyIndent',
            init: bodyIndent,
            isNamed: true,
            defaultValue: '',
          ),
          'footer': _i2.BuilderArg<String>(
            name: 'footer',
            init: footer,
            isNamed: true,
            defaultValue: '',
          ),
          'showChildren': _i2.BuilderArg<bool>(
            name: 'showChildren',
            init: showChildren,
            isNamed: true,
            defaultValue: true,
          ),
          'addBlankLineIfNoChildren': _i2.BuilderArg<bool>(
            name: 'addBlankLineIfNoChildren',
            init: addBlankLineIfNoChildren,
            isNamed: true,
            defaultValue: true,
          ),
          'isNameOnOwnLine': _i2.BuilderArg<bool>(
            name: 'isNameOnOwnLine',
            init: isNameOnOwnLine,
            isNamed: true,
            defaultValue: false,
          ),
          'isBlankLineBetweenPropertiesAndChildren': _i2.BuilderArg<bool>(
            name: 'isBlankLineBetweenPropertiesAndChildren',
            init: isBlankLineBetweenPropertiesAndChildren,
            isNamed: true,
            defaultValue: true,
          ),
          'beforeName': _i2.BuilderArg<String>(
            name: 'beforeName',
            init: beforeName,
            isNamed: true,
            defaultValue: '',
          ),
          'suffixLineOne': _i2.BuilderArg<String>(
            name: 'suffixLineOne',
            init: suffixLineOne,
            isNamed: true,
            defaultValue: '',
          ),
          'mandatoryFooter': _i2.BuilderArg<String>(
            name: 'mandatoryFooter',
            init: mandatoryFooter,
            isNamed: true,
            defaultValue: '',
          ),
        },
        super() {
    mateBuilderName = 'TextTreeConfiguration';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => TextTreeConfiguration$Mate(
          prefixLineOne: p.get('prefixLineOne').build(),
          prefixOtherLines: p.get('prefixOtherLines').build(),
          prefixLastChildLineOne: p.get('prefixLastChildLineOne').build(),
          prefixOtherLinesRootNode: p.get('prefixOtherLinesRootNode').build(),
          linkCharacter: p.get('linkCharacter').build(),
          propertyPrefixIfChildren: p.get('propertyPrefixIfChildren').build(),
          propertyPrefixNoChildren: p.get('propertyPrefixNoChildren').build(),
          lineBreak: p.get('lineBreak').build(),
          lineBreakProperties: p.get('lineBreakProperties').build(),
          afterName: p.get('afterName').build(),
          afterDescriptionIfBody: p.get('afterDescriptionIfBody').build(),
          afterDescription: p.get('afterDescription').build(),
          beforeProperties: p.get('beforeProperties').build(),
          afterProperties: p.get('afterProperties').build(),
          mandatoryAfterProperties: p.get('mandatoryAfterProperties').build(),
          propertySeparator: p.get('propertySeparator').build(),
          bodyIndent: p.get('bodyIndent').build(),
          footer: p.get('footer').build(),
          showChildren: p.get('showChildren').build(),
          addBlankLineIfNoChildren: p.get('addBlankLineIfNoChildren').build(),
          isNameOnOwnLine: p.get('isNameOnOwnLine').build(),
          isBlankLineBetweenPropertiesAndChildren: p.get('isBlankLineBetweenPropertiesAndChildren').build(),
          beforeName: p.get('beforeName').build(),
          suffixLineOne: p.get('suffixLineOne').build(),
          mandatoryFooter: p.get('mandatoryFooter').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TextTreeRenderer
class TextTreeRenderer$Mate extends _i1.TextTreeRenderer with _i2.Mate {
  /// TextTreeRenderer TextTreeRenderer({DiagnosticLevel minLevel = DiagnosticLevel.debug, int wrapWidth = 100, int wrapWidthProperties = 65, int maxDescendentsTruncatableNode = -1})
  TextTreeRenderer$Mate({
    /// optionalParameters: {DiagnosticLevel minLevel = DiagnosticLevel.debug} , default:unprocessed=PrefixedIdentifierImpl
    super.minLevel,

    /// optionalParameters: {int wrapWidth = 100} , default:processed=IntegerLiteralImpl
    super.wrapWidth,

    /// optionalParameters: {int wrapWidthProperties = 65} , default:processed=IntegerLiteralImpl
    super.wrapWidthProperties,

    /// optionalParameters: {int maxDescendentsTruncatableNode = -1} , default:processed=PrefixExpressionImpl
    super.maxDescendentsTruncatableNode,
  })  : mateParams = {
          'minLevel': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'minLevel',
            init: minLevel,
            isNamed: true,
          ),
          'wrapWidth': _i2.BuilderArg<int>(
            name: 'wrapWidth',
            init: wrapWidth,
            isNamed: true,
            defaultValue: 100,
          ),
          'wrapWidthProperties': _i2.BuilderArg<int>(
            name: 'wrapWidthProperties',
            init: wrapWidthProperties,
            isNamed: true,
            defaultValue: 65,
          ),
          'maxDescendentsTruncatableNode': _i2.BuilderArg<int>(
            name: 'maxDescendentsTruncatableNode',
            init: maxDescendentsTruncatableNode,
            isNamed: true,
            defaultValue: -1,
          ),
        },
        super() {
    mateBuilderName = 'TextTreeRenderer';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => TextTreeRenderer$Mate(
          minLevel: p.get('minLevel').build(),
          wrapWidth: p.get('wrapWidth').build(),
          wrapWidthProperties: p.get('wrapWidthProperties').build(),
          maxDescendentsTruncatableNode: p.get('maxDescendentsTruncatableNode').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class MessageProperty extends DiagnosticsProperty<void>
class MessageProperty$Mate extends _i1.MessageProperty with _i2.Mate {
  /// MessageProperty MessageProperty(String name, String message, {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  MessageProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: String message
    super.message, {
    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'message': _i2.BuilderArg<String>(
            name: 'message',
            init: message,
            isNamed: false,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'MessageProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => MessageProperty$Mate(
          p.get('name').value,
          p.get('message').value,
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class StringProperty extends DiagnosticsProperty<String>
class StringProperty$Mate extends _i1.StringProperty with _i2.Mate {
  /// StringProperty StringProperty(String name, String? value, {String? description, String? tooltip, bool showName = true, Object? defaultValue = kNoDefaultValue, bool quoted = true, String? ifEmpty, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  StringProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: String? value
    super.value, {
    /// optionalParameters: {String? description} , default:none
    super.description,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {bool quoted = true} , default:processed=BooleanLiteralImpl
    super.quoted,

    /// optionalParameters: {String? ifEmpty} , default:none
    super.ifEmpty,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<String?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'description': _i2.BuilderArg<String?>(
            name: 'description',
            init: description,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'quoted': _i2.BuilderArg<bool>(
            name: 'quoted',
            init: quoted,
            isNamed: true,
            defaultValue: true,
          ),
          'ifEmpty': _i2.BuilderArg<String?>(
            name: 'ifEmpty',
            init: ifEmpty,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'StringProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => StringProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          description: p.get('description').build(),
          tooltip: p.get('tooltip').build(),
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          quoted: p.get('quoted').build(),
          ifEmpty: p.get('ifEmpty').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DoubleProperty extends _NumProperty<double>
class DoubleProperty$Mate extends _i1.DoubleProperty with _i2.Mate {
  /// DoubleProperty DoubleProperty(String name, double? value, {String? ifNull, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: double? value
    super.value, {
    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {String? unit} , default:none
    super.unit,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<double?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'unit': _i2.BuilderArg<String?>(
            name: 'unit',
            init: unit,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DoubleProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DoubleProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          ifNull: p.get('ifNull').build(),
          unit: p.get('unit').build(),
          tooltip: p.get('tooltip').build(),
          defaultValue: p.get('defaultValue').build(),
          showName: p.get('showName').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
  }

  /// DoubleProperty DoubleProperty.lazy(String name, double? Function() computeValue, {String? ifNull, bool showName = true, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate.lazy(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: double? Function() computeValue
    super.computeValue, {
    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {String? unit} , default:none
    super.unit,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'computeValue': _i2.BuilderArg<_i1.ComputePropertyValueCallback<double>>(
            name: 'computeValue',
            init: computeValue,
            isNamed: false,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'unit': _i2.BuilderArg<String?>(
            name: 'unit',
            init: unit,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super.lazy() {
    mateBuilderName = 'DoubleProperty.lazy';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DoubleProperty$Mate.lazy(
          p.get('name').value,
          p.get('computeValue').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          unit: p.get('unit').build(),
          tooltip: p.get('tooltip').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IntProperty extends _NumProperty<int>
class IntProperty$Mate extends _i1.IntProperty with _i2.Mate {
  /// IntProperty IntProperty(String name, int? value, {String? ifNull, bool showName = true, String? unit, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IntProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: int? value
    super.value, {
    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {String? unit} , default:none
    super.unit,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<int?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'unit': _i2.BuilderArg<String?>(
            name: 'unit',
            init: unit,
            isNamed: true,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IntProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => IntProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          unit: p.get('unit').build(),
          defaultValue: p.get('defaultValue').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PercentProperty extends DoubleProperty
class PercentProperty$Mate extends _i1.PercentProperty with _i2.Mate {
  /// PercentProperty PercentProperty(String name, double? fraction, {String? ifNull, bool showName = true, String? tooltip, String? unit, DiagnosticLevel level = DiagnosticLevel.info})
  PercentProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: double? fraction
    super.fraction, {
    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {String? unit} , default:none
    super.unit,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'fraction': _i2.BuilderArg<double?>(
            name: 'fraction',
            init: fraction,
            isNamed: false,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'unit': _i2.BuilderArg<String?>(
            name: 'unit',
            init: unit,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PercentProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => PercentProperty$Mate(
          p.get('name').value,
          p.get('fraction').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          tooltip: p.get('tooltip').build(),
          unit: p.get('unit').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class FlagProperty extends DiagnosticsProperty<bool>
class FlagProperty$Mate extends _i1.FlagProperty with _i2.Mate {
  /// FlagProperty FlagProperty(String name, {required bool? value, String? ifTrue, String? ifFalse, bool showName = false, Object? defaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  FlagProperty$Mate(
    /// requiredParameters: String name
    super.name, {
    /// optionalParameters: {required bool? value} , default:none
    required super.value,

    /// optionalParameters: {String? ifTrue} , default:none
    super.ifTrue,

    /// optionalParameters: {String? ifFalse} , default:none
    super.ifFalse,

    /// optionalParameters: {bool showName = false} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {Object? defaultValue} , default:none
    super.defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<bool?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'ifTrue': _i2.BuilderArg<String?>(
            name: 'ifTrue',
            init: ifTrue,
            isNamed: true,
          ),
          'ifFalse': _i2.BuilderArg<String?>(
            name: 'ifFalse',
            init: ifFalse,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: false,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'FlagProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => FlagProperty$Mate(
          p.get('name').value,
          value: p.get('value').build(),
          ifTrue: p.get('ifTrue').build(),
          ifFalse: p.get('ifFalse').build(),
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IterableProperty<T> extends DiagnosticsProperty<Iterable<T>>
class IterableProperty$Mate<T> extends _i1.IterableProperty<T> with _i2.Mate {
  /// IterableProperty<T> IterableProperty(String name, Iterable<T>? value, {Object? defaultValue = kNoDefaultValue, String? ifNull, String? ifEmpty = '[]', DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  IterableProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: Iterable<T>? value
    super.value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {String? ifEmpty = '[]'} , default:processed=SimpleStringLiteralImpl
    super.ifEmpty,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    super.showSeparator,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<Iterable<T>?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'ifEmpty': _i2.BuilderArg<String?>(
            name: 'ifEmpty',
            init: ifEmpty,
            isNamed: true,
            defaultValue: '[]',
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'showSeparator': _i2.BuilderArg<bool>(
            name: 'showSeparator',
            init: showSeparator,
            isNamed: true,
            defaultValue: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IterableProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => IterableProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          defaultValue: p.get('defaultValue').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          style: p.get('style').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class EnumProperty<T> extends DiagnosticsProperty<T>
class EnumProperty$Mate<T> extends _i1.EnumProperty<T> with _i2.Mate {
  /// EnumProperty<T> EnumProperty(String name, T? value, {Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  EnumProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: T? value
    super.value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'EnumProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => EnumProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ObjectFlagProperty<T> extends DiagnosticsProperty<T>
class ObjectFlagProperty$Mate<T> extends _i1.ObjectFlagProperty<T> with _i2.Mate {
  /// ObjectFlagProperty<T> ObjectFlagProperty(String name, T? value, {String? ifPresent, String? ifNull, bool showName = false, DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: T? value
    super.value, {
    /// optionalParameters: {String? ifPresent} , default:none
    super.ifPresent,

    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {bool showName = false} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'ifPresent': _i2.BuilderArg<String?>(
            name: 'ifPresent',
            init: ifPresent,
            isNamed: true,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: false,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ObjectFlagProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => ObjectFlagProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          ifPresent: p.get('ifPresent').build(),
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          level: p.get('level').build(),
        );
  }

  /// ObjectFlagProperty<T> ObjectFlagProperty.has(String name, T? value, {DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate.has(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: T? value
    super.value, {
    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super.has() {
    mateBuilderName = 'ObjectFlagProperty.has';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => ObjectFlagProperty$Mate<T>.has(
          p.get('name').value,
          p.get('value').value,
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class FlagsSummary<T> extends DiagnosticsProperty<Map<String, T?>>
class FlagsSummary$Mate<T> extends _i1.FlagsSummary<T> with _i2.Mate {
  /// FlagsSummary<T> FlagsSummary(String name, Map<String, T?> value, {String? ifEmpty, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  FlagsSummary$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: Map<String, T?> value
    super.value, {
    /// optionalParameters: {String? ifEmpty} , default:none
    super.ifEmpty,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    super.showSeparator,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<Map<String, T?>>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'ifEmpty': _i2.BuilderArg<String?>(
            name: 'ifEmpty',
            init: ifEmpty,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'showSeparator': _i2.BuilderArg<bool>(
            name: 'showSeparator',
            init: showSeparator,
            isNamed: true,
            defaultValue: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'FlagsSummary';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => FlagsSummary$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DiagnosticsProperty<T> extends DiagnosticsNode
class DiagnosticsProperty$Mate<T> extends _i1.DiagnosticsProperty<T> with _i2.Mate {
  /// DiagnosticsProperty<T> DiagnosticsProperty(String? name, T? value, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, String? linePrefix, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate(
    /// requiredParameters: String? name
    super.name,

    /// requiredParameters: T? value
    super.value, {
    /// optionalParameters: {String? description} , default:none
    super.description,

    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {String? ifEmpty} , default:none
    super.ifEmpty,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    super.showSeparator,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool missingIfNull = false} , default:processed=BooleanLiteralImpl
    super.missingIfNull,

    /// optionalParameters: {String? linePrefix} , default:none
    super.linePrefix,

    /// optionalParameters: {bool expandableValue = false} , default:processed=BooleanLiteralImpl
    super.expandableValue,

    /// optionalParameters: {bool allowWrap = true} , default:processed=BooleanLiteralImpl
    super.allowWrap,

    /// optionalParameters: {bool allowNameWrap = true} , default:processed=BooleanLiteralImpl
    super.allowNameWrap,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String?>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'description': _i2.BuilderArg<String?>(
            name: 'description',
            init: description,
            isNamed: true,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'ifEmpty': _i2.BuilderArg<String?>(
            name: 'ifEmpty',
            init: ifEmpty,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'showSeparator': _i2.BuilderArg<bool>(
            name: 'showSeparator',
            init: showSeparator,
            isNamed: true,
            defaultValue: true,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'missingIfNull': _i2.BuilderArg<bool>(
            name: 'missingIfNull',
            init: missingIfNull,
            isNamed: true,
            defaultValue: false,
          ),
          'linePrefix': _i2.BuilderArg<String?>(
            name: 'linePrefix',
            init: linePrefix,
            isNamed: true,
          ),
          'expandableValue': _i2.BuilderArg<bool>(
            name: 'expandableValue',
            init: expandableValue,
            isNamed: true,
            defaultValue: false,
          ),
          'allowWrap': _i2.BuilderArg<bool>(
            name: 'allowWrap',
            init: allowWrap,
            isNamed: true,
            defaultValue: true,
          ),
          'allowNameWrap': _i2.BuilderArg<bool>(
            name: 'allowNameWrap',
            init: allowNameWrap,
            isNamed: true,
            defaultValue: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DiagnosticsProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          description: p.get('description').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          defaultValue: p.get('defaultValue').build(),
          tooltip: p.get('tooltip').build(),
          missingIfNull: p.get('missingIfNull').build(),
          linePrefix: p.get('linePrefix').build(),
          expandableValue: p.get('expandableValue').build(),
          allowWrap: p.get('allowWrap').build(),
          allowNameWrap: p.get('allowNameWrap').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
  }

  /// DiagnosticsProperty<T> DiagnosticsProperty.lazy(String? name, T? Function() computeValue, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate.lazy(
    /// requiredParameters: String? name
    super.name,

    /// requiredParameters: T? Function() computeValue
    super.computeValue, {
    /// optionalParameters: {String? description} , default:none
    super.description,

    /// optionalParameters: {String? ifNull} , default:none
    super.ifNull,

    /// optionalParameters: {String? ifEmpty} , default:none
    super.ifEmpty,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    super.showSeparator,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool missingIfNull = false} , default:processed=BooleanLiteralImpl
    super.missingIfNull,

    /// optionalParameters: {bool expandableValue = false} , default:processed=BooleanLiteralImpl
    super.expandableValue,

    /// optionalParameters: {bool allowWrap = true} , default:processed=BooleanLiteralImpl
    super.allowWrap,

    /// optionalParameters: {bool allowNameWrap = true} , default:processed=BooleanLiteralImpl
    super.allowNameWrap,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,
  })  : mateParams = {
          'name': _i2.BuilderArg<String?>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'computeValue': _i2.BuilderArg<_i1.ComputePropertyValueCallback<T>>(
            name: 'computeValue',
            init: computeValue,
            isNamed: false,
          ),
          'description': _i2.BuilderArg<String?>(
            name: 'description',
            init: description,
            isNamed: true,
          ),
          'ifNull': _i2.BuilderArg<String?>(
            name: 'ifNull',
            init: ifNull,
            isNamed: true,
          ),
          'ifEmpty': _i2.BuilderArg<String?>(
            name: 'ifEmpty',
            init: ifEmpty,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'showSeparator': _i2.BuilderArg<bool>(
            name: 'showSeparator',
            init: showSeparator,
            isNamed: true,
            defaultValue: true,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'missingIfNull': _i2.BuilderArg<bool>(
            name: 'missingIfNull',
            init: missingIfNull,
            isNamed: true,
            defaultValue: false,
          ),
          'expandableValue': _i2.BuilderArg<bool>(
            name: 'expandableValue',
            init: expandableValue,
            isNamed: true,
            defaultValue: false,
          ),
          'allowWrap': _i2.BuilderArg<bool>(
            name: 'allowWrap',
            init: allowWrap,
            isNamed: true,
            defaultValue: true,
          ),
          'allowNameWrap': _i2.BuilderArg<bool>(
            name: 'allowNameWrap',
            init: allowNameWrap,
            isNamed: true,
            defaultValue: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
        },
        super.lazy() {
    mateBuilderName = 'DiagnosticsProperty.lazy';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsProperty$Mate<T>.lazy(
          p.get('name').value,
          p.get('computeValue').value,
          description: p.get('description').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          defaultValue: p.get('defaultValue').build(),
          tooltip: p.get('tooltip').build(),
          missingIfNull: p.get('missingIfNull').build(),
          expandableValue: p.get('expandableValue').build(),
          allowWrap: p.get('allowWrap').build(),
          allowNameWrap: p.get('allowNameWrap').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DiagnosticableNode<T extends Diagnosticable> extends DiagnosticsNode
class DiagnosticableNode$Mate<T extends _i1.Diagnosticable> extends _i1.DiagnosticableNode<T> with _i2.Mate {
  /// DiagnosticableNode<T> DiagnosticableNode({String? name, required T value, required DiagnosticsTreeStyle? style})
  DiagnosticableNode$Mate({
    /// optionalParameters: {String? name} , default:none
    super.name,

    /// optionalParameters: {required T value} , default:none
    required super.value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , default:none
    required super.style,
  })  : mateParams = {
          'name': _i2.BuilderArg<String?>(
            name: 'name',
            init: name,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DiagnosticableNode';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticableNode$Mate<T>(
          name: p.get('name').build(),
          value: p.get('value').build(),
          style: p.get('style').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DiagnosticableTreeNode extends DiagnosticableNode<DiagnosticableTree>
class DiagnosticableTreeNode$Mate extends _i1.DiagnosticableTreeNode with _i2.Mate {
  /// DiagnosticableTreeNode DiagnosticableTreeNode({String? name, required DiagnosticableTree value, required DiagnosticsTreeStyle? style})
  DiagnosticableTreeNode$Mate({
    /// optionalParameters: {String? name} , default:none
    super.name,

    /// optionalParameters: {required DiagnosticableTree value} , default:none
    required super.value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , default:none
    required super.style,
  })  : mateParams = {
          'name': _i2.BuilderArg<String?>(
            name: 'name',
            init: name,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<_i1.DiagnosticableTree>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DiagnosticableTreeNode';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticableTreeNode$Mate(
          name: p.get('name').build(),
          value: p.get('value').build(),
          style: p.get('style').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DiagnosticPropertiesBuilder
class DiagnosticPropertiesBuilder$Mate extends _i1.DiagnosticPropertiesBuilder with _i2.Mate {
  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder.fromProperties(List<DiagnosticsNode> properties)
  DiagnosticPropertiesBuilder$Mate.fromProperties(

      /// requiredParameters: List<DiagnosticsNode> properties
      super.properties)
      : mateParams = {
          'properties': _i2.BuilderArg<List<_i1.DiagnosticsNode>>(
            name: 'properties',
            init: properties,
            isNamed: false,
          )
        },
        super.fromProperties() {
    mateBuilderName = 'DiagnosticPropertiesBuilder.fromProperties';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticPropertiesBuilder$Mate.fromProperties(p.get('properties').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DiagnosticsBlock extends DiagnosticsNode
class DiagnosticsBlock$Mate extends _i1.DiagnosticsBlock with _i2.Mate {
  /// DiagnosticsBlock DiagnosticsBlock({String? name, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace, bool showName = true, bool showSeparator = true, String? linePrefix, Object? value, String? description, DiagnosticLevel level = DiagnosticLevel.info, bool allowTruncate = false, List<DiagnosticsNode> children = const <DiagnosticsNode>[], List<DiagnosticsNode> properties = const <DiagnosticsNode>[]})
  DiagnosticsBlock$Mate({
    /// optionalParameters: {String? name} , default:none
    super.name,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace} , default:unprocessed=PrefixedIdentifierImpl
    super.style,

    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {bool showSeparator = true} , default:processed=BooleanLiteralImpl
    super.showSeparator,

    /// optionalParameters: {String? linePrefix} , default:none
    super.linePrefix,

    /// optionalParameters: {Object? value} , default:none
    super.value,

    /// optionalParameters: {String? description} , default:none
    super.description,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,

    /// optionalParameters: {bool allowTruncate = false} , default:processed=BooleanLiteralImpl
    super.allowTruncate,

    /// optionalParameters: {List<DiagnosticsNode> children = const <DiagnosticsNode>[]} , default:unprocessed=ListLiteralImpl
    super.children,

    /// optionalParameters: {List<DiagnosticsNode> properties = const <DiagnosticsNode>[]} , default:unprocessed=ListLiteralImpl
    super.properties,
  })  : mateParams = {
          'name': _i2.BuilderArg<String?>(
            name: 'name',
            init: name,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i1.DiagnosticsTreeStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'showSeparator': _i2.BuilderArg<bool>(
            name: 'showSeparator',
            init: showSeparator,
            isNamed: true,
            defaultValue: true,
          ),
          'linePrefix': _i2.BuilderArg<String?>(
            name: 'linePrefix',
            init: linePrefix,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<Object?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'description': _i2.BuilderArg<String?>(
            name: 'description',
            init: description,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i1.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
          'allowTruncate': _i2.BuilderArg<bool>(
            name: 'allowTruncate',
            init: allowTruncate,
            isNamed: true,
            defaultValue: false,
          ),
          'children': _i2.BuilderArg<List<_i1.DiagnosticsNode>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'properties': _i2.BuilderArg<List<_i1.DiagnosticsNode>>(
            name: 'properties',
            init: properties,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DiagnosticsBlock';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsBlock$Mate(
          name: p.get('name').build(),
          style: p.get('style').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          linePrefix: p.get('linePrefix').build(),
          value: p.get('value').build(),
          description: p.get('description').build(),
          level: p.get('level').build(),
          allowTruncate: p.get('allowTruncate').build(),
          children: p.get('children').build(),
          properties: p.get('properties').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
