// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/foundation.dart';

/// class TextTreeConfiguration
class TextTreeConfiguration$Mate extends TextTreeConfiguration with Mate {
  /// TextTreeConfiguration TextTreeConfiguration({required String prefixLineOne, required String prefixOtherLines, required String prefixLastChildLineOne, required String prefixOtherLinesRootNode, required String linkCharacter, required String propertyPrefixIfChildren, required String propertyPrefixNoChildren, String lineBreak = '\n', bool lineBreakProperties = true, String afterName = ':', String afterDescriptionIfBody = '', String afterDescription = '', String beforeProperties = '', String afterProperties = '', String mandatoryAfterProperties = '', String propertySeparator = '', String bodyIndent = '', String footer = '', bool showChildren = true, bool addBlankLineIfNoChildren = true, bool isNameOnOwnLine = false, bool isBlankLineBetweenPropertiesAndChildren = true, String beforeName = '', String suffixLineOne = '', String mandatoryFooter = ''})
  TextTreeConfiguration$Mate({
    /// optionalParameters: {required String prefixLineOne} , defaultValue:none
    required String prefixLineOne,

    /// optionalParameters: {required String prefixOtherLines} , defaultValue:none
    required String prefixOtherLines,

    /// optionalParameters: {required String prefixLastChildLineOne} , defaultValue:none
    required String prefixLastChildLineOne,

    /// optionalParameters: {required String prefixOtherLinesRootNode} , defaultValue:none
    required String prefixOtherLinesRootNode,

    /// optionalParameters: {required String linkCharacter} , defaultValue:none
    required String linkCharacter,

    /// optionalParameters: {required String propertyPrefixIfChildren} , defaultValue:none
    required String propertyPrefixIfChildren,

    /// optionalParameters: {required String propertyPrefixNoChildren} , defaultValue:none
    required String propertyPrefixNoChildren,

    /// optionalParameters: {String lineBreak = '\n'} , defaultValue:Literal
    String lineBreak = '\n',

    /// optionalParameters: {bool lineBreakProperties = true} , defaultValue:Literal
    bool lineBreakProperties = true,

    /// optionalParameters: {String afterName = ':'} , defaultValue:Literal
    String afterName = ':',

    /// optionalParameters: {String afterDescriptionIfBody = ''} , defaultValue:Literal
    String afterDescriptionIfBody = '',

    /// optionalParameters: {String afterDescription = ''} , defaultValue:Literal
    String afterDescription = '',

    /// optionalParameters: {String beforeProperties = ''} , defaultValue:Literal
    String beforeProperties = '',

    /// optionalParameters: {String afterProperties = ''} , defaultValue:Literal
    String afterProperties = '',

    /// optionalParameters: {String mandatoryAfterProperties = ''} , defaultValue:Literal
    String mandatoryAfterProperties = '',

    /// optionalParameters: {String propertySeparator = ''} , defaultValue:Literal
    String propertySeparator = '',

    /// optionalParameters: {String bodyIndent = ''} , defaultValue:Literal
    String bodyIndent = '',

    /// optionalParameters: {String footer = ''} , defaultValue:Literal
    String footer = '',

    /// optionalParameters: {bool showChildren = true} , defaultValue:Literal
    bool showChildren = true,

    /// optionalParameters: {bool addBlankLineIfNoChildren = true} , defaultValue:Literal
    bool addBlankLineIfNoChildren = true,

    /// optionalParameters: {bool isNameOnOwnLine = false} , defaultValue:Literal
    bool isNameOnOwnLine = false,

    /// optionalParameters: {bool isBlankLineBetweenPropertiesAndChildren = true} , defaultValue:Literal
    bool isBlankLineBetweenPropertiesAndChildren = true,

    /// optionalParameters: {String beforeName = ''} , defaultValue:Literal
    String beforeName = '',

    /// optionalParameters: {String suffixLineOne = ''} , defaultValue:Literal
    String suffixLineOne = '',

    /// optionalParameters: {String mandatoryFooter = ''} , defaultValue:Literal
    String mandatoryFooter = '',
  }) : super(
          prefixLineOne: prefixLineOne,
          prefixOtherLines: prefixOtherLines,
          prefixLastChildLineOne: prefixLastChildLineOne,
          prefixOtherLinesRootNode: prefixOtherLinesRootNode,
          linkCharacter: linkCharacter,
          propertyPrefixIfChildren: propertyPrefixIfChildren,
          propertyPrefixNoChildren: propertyPrefixNoChildren,
          lineBreak: lineBreak,
          lineBreakProperties: lineBreakProperties,
          afterName: afterName,
          afterDescriptionIfBody: afterDescriptionIfBody,
          afterDescription: afterDescription,
          beforeProperties: beforeProperties,
          afterProperties: afterProperties,
          mandatoryAfterProperties: mandatoryAfterProperties,
          propertySeparator: propertySeparator,
          bodyIndent: bodyIndent,
          footer: footer,
          showChildren: showChildren,
          addBlankLineIfNoChildren: addBlankLineIfNoChildren,
          isNameOnOwnLine: isNameOnOwnLine,
          isBlankLineBetweenPropertiesAndChildren: isBlankLineBetweenPropertiesAndChildren,
          beforeName: beforeName,
          suffixLineOne: suffixLineOne,
          mandatoryFooter: mandatoryFooter,
        ) {
    mateCreateName = 'TextTreeConfiguration';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => TextTreeConfiguration$Mate(
          prefixLineOne: p.get('prefixLineOne').build(),
          prefixOtherLines: p.get('prefixOtherLines').build(),
          prefixLastChildLineOne: p.get('prefixLastChildLineOne').build(),
          prefixOtherLinesRootNode: p.get('prefixOtherLinesRootNode').build(),
          linkCharacter: p.get('linkCharacter').build(),
          propertyPrefixIfChildren: p.get('propertyPrefixIfChildren').build(),
          propertyPrefixNoChildren: p.get('propertyPrefixNoChildren').build(),
          lineBreak: p.get('lineBreak').build(),
          lineBreakProperties: p.get('lineBreakProperties').build(),
          afterName: p.get('afterName').build(),
          afterDescriptionIfBody: p.get('afterDescriptionIfBody').build(),
          afterDescription: p.get('afterDescription').build(),
          beforeProperties: p.get('beforeProperties').build(),
          afterProperties: p.get('afterProperties').build(),
          mandatoryAfterProperties: p.get('mandatoryAfterProperties').build(),
          propertySeparator: p.get('propertySeparator').build(),
          bodyIndent: p.get('bodyIndent').build(),
          footer: p.get('footer').build(),
          showChildren: p.get('showChildren').build(),
          addBlankLineIfNoChildren: p.get('addBlankLineIfNoChildren').build(),
          isNameOnOwnLine: p.get('isNameOnOwnLine').build(),
          isBlankLineBetweenPropertiesAndChildren: p.get('isBlankLineBetweenPropertiesAndChildren').build(),
          beforeName: p.get('beforeName').build(),
          suffixLineOne: p.get('suffixLineOne').build(),
          mandatoryFooter: p.get('mandatoryFooter').build(),
        );
    mateUse('prefixLineOne', prefixLineOne);
    mateUse('prefixOtherLines', prefixOtherLines);
    mateUse('prefixLastChildLineOne', prefixLastChildLineOne);
    mateUse('prefixOtherLinesRootNode', prefixOtherLinesRootNode);
    mateUse('linkCharacter', linkCharacter);
    mateUse('propertyPrefixIfChildren', propertyPrefixIfChildren);
    mateUse('propertyPrefixNoChildren', propertyPrefixNoChildren);
    mateUse('lineBreak', lineBreak);
    mateUse('lineBreakProperties', lineBreakProperties);
    mateUse('afterName', afterName);
    mateUse('afterDescriptionIfBody', afterDescriptionIfBody);
    mateUse('afterDescription', afterDescription);
    mateUse('beforeProperties', beforeProperties);
    mateUse('afterProperties', afterProperties);
    mateUse('mandatoryAfterProperties', mandatoryAfterProperties);
    mateUse('propertySeparator', propertySeparator);
    mateUse('bodyIndent', bodyIndent);
    mateUse('footer', footer);
    mateUse('showChildren', showChildren);
    mateUse('addBlankLineIfNoChildren', addBlankLineIfNoChildren);
    mateUse('isNameOnOwnLine', isNameOnOwnLine);
    mateUse('isBlankLineBetweenPropertiesAndChildren', isBlankLineBetweenPropertiesAndChildren);
    mateUse('beforeName', beforeName);
    mateUse('suffixLineOne', suffixLineOne);
    mateUse('mandatoryFooter', mandatoryFooter);
  }
}

/// class TextTreeRenderer
class TextTreeRenderer$Mate extends TextTreeRenderer with Mate {
  /// TextTreeRenderer TextTreeRenderer({DiagnosticLevel minLevel = DiagnosticLevel.debug, int wrapWidth = 100, int wrapWidthProperties = 65, int maxDescendentsTruncatableNode = -1})
  TextTreeRenderer$Mate({
    /// optionalParameters: {DiagnosticLevel minLevel = DiagnosticLevel.debug} , defaultValue:PrefixedIdentifier
    DiagnosticLevel minLevel = DiagnosticLevel.debug,

    /// optionalParameters: {int wrapWidth = 100} , defaultValue:Literal
    int wrapWidth = 100,

    /// optionalParameters: {int wrapWidthProperties = 65} , defaultValue:Literal
    int wrapWidthProperties = 65,

    /// optionalParameters: {int maxDescendentsTruncatableNode = -1} , defaultValue:unprocessed
    required int maxDescendentsTruncatableNode,
  }) : super(
          minLevel: minLevel,
          wrapWidth: wrapWidth,
          wrapWidthProperties: wrapWidthProperties,
          maxDescendentsTruncatableNode: maxDescendentsTruncatableNode,
        ) {
    mateCreateName = 'TextTreeRenderer';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => TextTreeRenderer$Mate(
          minLevel: p.get('minLevel').build(),
          wrapWidth: p.get('wrapWidth').build(),
          wrapWidthProperties: p.get('wrapWidthProperties').build(),
          maxDescendentsTruncatableNode: p.get('maxDescendentsTruncatableNode').build(),
        );
    mateUse('minLevel', minLevel);
    mateUse('wrapWidth', wrapWidth);
    mateUse('wrapWidthProperties', wrapWidthProperties);
    mateUse('maxDescendentsTruncatableNode', maxDescendentsTruncatableNode);
  }
}

/// class MessageProperty extends DiagnosticsProperty<void>
class MessageProperty$Mate extends MessageProperty with Mate {
  /// MessageProperty MessageProperty(String name, String message, {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  MessageProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: String message
    String message, {
    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:PrefixedIdentifier
    DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:PrefixedIdentifier
    DiagnosticLevel level = DiagnosticLevel.info,
  }) : super(
          name,
          message,
          style: style,
          level: level,
        ) {
    mateCreateName = 'MessageProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => MessageProperty$Mate(
          p.get('name').value,
          p.get('message').value,
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('message', message);
    mateUse('style', style);
    mateUse('level', level);
  }
}

/// class StringProperty extends DiagnosticsProperty<String>
class StringProperty$Mate extends StringProperty with Mate {
  /// StringProperty StringProperty(String name, String? value, {String? description, String? tooltip, bool showName = true, Object? defaultValue = kNoDefaultValue, bool quoted = true, String? ifEmpty, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  StringProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: String? value
    String? value, {
    /// optionalParameters: {String? description} , defaultValue:none
    String? description,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {bool quoted = true} , defaultValue:Literal
    bool quoted = true,

    /// optionalParameters: {String? ifEmpty} , defaultValue:none
    String? ifEmpty,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:is!ConstVariableElement
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          description: description,
          tooltip: tooltip,
          showName: showName,
          defaultValue: defaultValue,
          quoted: quoted,
          ifEmpty: ifEmpty,
          style: style,
          level: level,
        ) {
    mateCreateName = 'StringProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => StringProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          description: p.get('description').build(),
          tooltip: p.get('tooltip').build(),
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          quoted: p.get('quoted').build(),
          ifEmpty: p.get('ifEmpty').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('description', description);
    mateUse('tooltip', tooltip);
    mateUse('showName', showName);
    mateUse('defaultValue', defaultValue);
    mateUse('quoted', quoted);
    mateUse('ifEmpty', ifEmpty);
    mateUse('style', style);
    mateUse('level', level);
  }
}

/// class DoubleProperty extends _NumProperty<double>
class DoubleProperty$Mate extends DoubleProperty with Mate {
  /// DoubleProperty DoubleProperty(String name, double? value, {String? ifNull, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? value
    double? value, {
    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {String? unit} , defaultValue:none
    String? unit,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:is!ConstVariableElement
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          showName: showName,
          style: style,
          level: level,
        ) {
    mateCreateName = 'DoubleProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DoubleProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          ifNull: p.get('ifNull').build(),
          unit: p.get('unit').build(),
          tooltip: p.get('tooltip').build(),
          defaultValue: p.get('defaultValue').build(),
          showName: p.get('showName').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('ifNull', ifNull);
    mateUse('unit', unit);
    mateUse('tooltip', tooltip);
    mateUse('defaultValue', defaultValue);
    mateUse('showName', showName);
    mateUse('style', style);
    mateUse('level', level);
  }

  /// DoubleProperty DoubleProperty.lazy(String name, double? Function() computeValue, {String? ifNull, bool showName = true, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate.lazy(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? Function() computeValue
    ComputePropertyValueCallback<double> computeValue, {
    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {String? unit} , defaultValue:none
    String? unit,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super.lazy(
          name,
          computeValue,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateCreateName = 'DoubleProperty.lazy';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DoubleProperty$Mate.lazy(
          p.get('name').value,
          p.get('computeValue').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          unit: p.get('unit').build(),
          tooltip: p.get('tooltip').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('computeValue', computeValue);
    mateUse('ifNull', ifNull);
    mateUse('showName', showName);
    mateUse('unit', unit);
    mateUse('tooltip', tooltip);
    mateUse('defaultValue', defaultValue);
    mateUse('level', level);
  }
}

/// class IntProperty extends _NumProperty<int>
class IntProperty$Mate extends IntProperty with Mate {
  /// IntProperty IntProperty(String name, int? value, {String? ifNull, bool showName = true, String? unit, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IntProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: int? value
    int? value, {
    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {String? unit} , defaultValue:none
    String? unit,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:is!ConstVariableElement
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          defaultValue: defaultValue,
          style: style,
          level: level,
        ) {
    mateCreateName = 'IntProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => IntProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          unit: p.get('unit').build(),
          defaultValue: p.get('defaultValue').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('ifNull', ifNull);
    mateUse('showName', showName);
    mateUse('unit', unit);
    mateUse('defaultValue', defaultValue);
    mateUse('style', style);
    mateUse('level', level);
  }
}

/// class PercentProperty extends DoubleProperty
class PercentProperty$Mate extends PercentProperty with Mate {
  /// PercentProperty PercentProperty(String name, double? fraction, {String? ifNull, bool showName = true, String? tooltip, String? unit, DiagnosticLevel level = DiagnosticLevel.info})
  PercentProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? fraction
    double? fraction, {
    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {String? unit} , defaultValue:none
    String? unit,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          fraction,
          ifNull: ifNull,
          showName: showName,
          tooltip: tooltip,
          unit: unit,
          level: level,
        ) {
    mateCreateName = 'PercentProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => PercentProperty$Mate(
          p.get('name').value,
          p.get('fraction').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          tooltip: p.get('tooltip').build(),
          unit: p.get('unit').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('fraction', fraction);
    mateUse('ifNull', ifNull);
    mateUse('showName', showName);
    mateUse('tooltip', tooltip);
    mateUse('unit', unit);
    mateUse('level', level);
  }
}

/// class FlagProperty extends DiagnosticsProperty<bool>
class FlagProperty$Mate extends FlagProperty with Mate {
  /// FlagProperty FlagProperty(String name, {required bool? value, String? ifTrue, String? ifFalse, bool showName = false, Object? defaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  FlagProperty$Mate(
    /// requiredParameters: String name
    String name, {
    /// optionalParameters: {required bool? value} , defaultValue:none
    required bool? value,

    /// optionalParameters: {String? ifTrue} , defaultValue:none
    String? ifTrue,

    /// optionalParameters: {String? ifFalse} , defaultValue:none
    String? ifFalse,

    /// optionalParameters: {bool showName = false} , defaultValue:Literal
    bool showName = false,

    /// optionalParameters: {Object? defaultValue} , defaultValue:none
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:PrefixedIdentifier
    DiagnosticLevel level = DiagnosticLevel.info,
  }) : super(
          name,
          value: value,
          ifTrue: ifTrue,
          ifFalse: ifFalse,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateCreateName = 'FlagProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => FlagProperty$Mate(
          p.get('name').value,
          value: p.get('value').build(),
          ifTrue: p.get('ifTrue').build(),
          ifFalse: p.get('ifFalse').build(),
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('ifTrue', ifTrue);
    mateUse('ifFalse', ifFalse);
    mateUse('showName', showName);
    mateUse('defaultValue', defaultValue);
    mateUse('level', level);
  }
}

/// class IterableProperty<T> extends DiagnosticsProperty<Iterable<T>>
class IterableProperty$Mate<T> extends IterableProperty<T> with Mate {
  /// IterableProperty<T> IterableProperty(String name, Iterable<T>? value, {Object? defaultValue = kNoDefaultValue, String? ifNull, String? ifEmpty = '[]', DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  IterableProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Iterable<T>? value
    Iterable<T>? value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {String? ifEmpty = '[]'} , defaultValue:Literal
    String? ifEmpty = '[]',

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:is!ConstVariableElement
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {bool showSeparator = true} , defaultValue:is!ConstVariableElement
    required bool showSeparator,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateCreateName = 'IterableProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => IterableProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          defaultValue: p.get('defaultValue').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          style: p.get('style').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('defaultValue', defaultValue);
    mateUse('ifNull', ifNull);
    mateUse('ifEmpty', ifEmpty);
    mateUse('style', style);
    mateUse('showName', showName);
    mateUse('showSeparator', showSeparator);
    mateUse('level', level);
  }
}

/// class EnumProperty<T> extends DiagnosticsProperty<T>
class EnumProperty$Mate<T> extends EnumProperty<T> with Mate {
  /// EnumProperty<T> EnumProperty(String name, T? value, {Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  EnumProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateCreateName = 'EnumProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => EnumProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('defaultValue', defaultValue);
    mateUse('level', level);
  }
}

/// class ObjectFlagProperty<T> extends DiagnosticsProperty<T>
class ObjectFlagProperty$Mate<T> extends ObjectFlagProperty<T> with Mate {
  /// ObjectFlagProperty<T> ObjectFlagProperty(String name, T? value, {String? ifPresent, String? ifNull, bool showName = false, DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {String? ifPresent} , defaultValue:none
    String? ifPresent,

    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {bool showName = false} , defaultValue:Literal
    bool showName = false,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifPresent: ifPresent,
          ifNull: ifNull,
          showName: showName,
          level: level,
        ) {
    mateCreateName = 'ObjectFlagProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => ObjectFlagProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          ifPresent: p.get('ifPresent').build(),
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('ifPresent', ifPresent);
    mateUse('ifNull', ifNull);
    mateUse('showName', showName);
    mateUse('level', level);
  }

  /// ObjectFlagProperty<T> ObjectFlagProperty.has(String name, T? value, {DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate.has(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super.has(
          name,
          value,
          level: level,
        ) {
    mateCreateName = 'ObjectFlagProperty.has';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => ObjectFlagProperty$Mate<T>.has(
          p.get('name').value,
          p.get('value').value,
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('level', level);
  }
}

/// class FlagsSummary<T> extends DiagnosticsProperty<Map<String, T?>>
class FlagsSummary$Mate<T> extends FlagsSummary<T> with Mate {
  /// FlagsSummary<T> FlagsSummary(String name, Map<String, T?> value, {String? ifEmpty, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  FlagsSummary$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Map<String, T?> value
    Map<String, T?> value, {
    /// optionalParameters: {String? ifEmpty} , defaultValue:none
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {bool showSeparator = true} , defaultValue:is!ConstVariableElement
    required bool showSeparator,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateCreateName = 'FlagsSummary';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => FlagsSummary$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('ifEmpty', ifEmpty);
    mateUse('showName', showName);
    mateUse('showSeparator', showSeparator);
    mateUse('level', level);
  }
}

/// class DiagnosticsProperty<T> extends DiagnosticsNode
class DiagnosticsProperty$Mate<T> extends DiagnosticsProperty<T> with Mate {
  /// DiagnosticsProperty<T> DiagnosticsProperty(String? name, T? value, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, String? linePrefix, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate(
    /// requiredParameters: String? name
    String? name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {String? description} , defaultValue:none
    String? description,

    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {String? ifEmpty} , defaultValue:none
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , defaultValue:Literal
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , defaultValue:Literal
    bool showSeparator = true,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:unprocessed
    Object? defaultValue,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {bool missingIfNull = false} , defaultValue:Literal
    bool missingIfNull = false,

    /// optionalParameters: {String? linePrefix} , defaultValue:none
    String? linePrefix,

    /// optionalParameters: {bool expandableValue = false} , defaultValue:Literal
    bool expandableValue = false,

    /// optionalParameters: {bool allowWrap = true} , defaultValue:Literal
    bool allowWrap = true,

    /// optionalParameters: {bool allowNameWrap = true} , defaultValue:Literal
    bool allowNameWrap = true,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:PrefixedIdentifier
    DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:PrefixedIdentifier
    DiagnosticLevel level = DiagnosticLevel.info,
  }) : super(
          name,
          value,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          linePrefix: linePrefix,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateCreateName = 'DiagnosticsProperty';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsProperty$Mate<T>(
          p.get('name').value,
          p.get('value').value,
          description: p.get('description').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          defaultValue: p.get('defaultValue').build(),
          tooltip: p.get('tooltip').build(),
          missingIfNull: p.get('missingIfNull').build(),
          linePrefix: p.get('linePrefix').build(),
          expandableValue: p.get('expandableValue').build(),
          allowWrap: p.get('allowWrap').build(),
          allowNameWrap: p.get('allowNameWrap').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('description', description);
    mateUse('ifNull', ifNull);
    mateUse('ifEmpty', ifEmpty);
    mateUse('showName', showName);
    mateUse('showSeparator', showSeparator);
    mateUse('defaultValue', defaultValue);
    mateUse('tooltip', tooltip);
    mateUse('missingIfNull', missingIfNull);
    mateUse('linePrefix', linePrefix);
    mateUse('expandableValue', expandableValue);
    mateUse('allowWrap', allowWrap);
    mateUse('allowNameWrap', allowNameWrap);
    mateUse('style', style);
    mateUse('level', level);
  }

  /// DiagnosticsProperty<T> DiagnosticsProperty.lazy(String? name, T? Function() computeValue, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate.lazy(
    /// requiredParameters: String? name
    String? name,

    /// requiredParameters: T? Function() computeValue
    ComputePropertyValueCallback<T> computeValue, {
    /// optionalParameters: {String? description} , defaultValue:none
    String? description,

    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {String? ifEmpty} , defaultValue:none
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , defaultValue:Literal
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , defaultValue:Literal
    bool showSeparator = true,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:unprocessed
    Object? defaultValue,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {bool missingIfNull = false} , defaultValue:Literal
    bool missingIfNull = false,

    /// optionalParameters: {bool expandableValue = false} , defaultValue:Literal
    bool expandableValue = false,

    /// optionalParameters: {bool allowWrap = true} , defaultValue:Literal
    bool allowWrap = true,

    /// optionalParameters: {bool allowNameWrap = true} , defaultValue:Literal
    bool allowNameWrap = true,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:PrefixedIdentifier
    DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:PrefixedIdentifier
    DiagnosticLevel level = DiagnosticLevel.info,
  }) : super.lazy(
          name,
          computeValue,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateCreateName = 'DiagnosticsProperty.lazy';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsProperty$Mate<T>.lazy(
          p.get('name').value,
          p.get('computeValue').value,
          description: p.get('description').build(),
          ifNull: p.get('ifNull').build(),
          ifEmpty: p.get('ifEmpty').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          defaultValue: p.get('defaultValue').build(),
          tooltip: p.get('tooltip').build(),
          missingIfNull: p.get('missingIfNull').build(),
          expandableValue: p.get('expandableValue').build(),
          allowWrap: p.get('allowWrap').build(),
          allowNameWrap: p.get('allowNameWrap').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name);
    mateUse('computeValue', computeValue);
    mateUse('description', description);
    mateUse('ifNull', ifNull);
    mateUse('ifEmpty', ifEmpty);
    mateUse('showName', showName);
    mateUse('showSeparator', showSeparator);
    mateUse('defaultValue', defaultValue);
    mateUse('tooltip', tooltip);
    mateUse('missingIfNull', missingIfNull);
    mateUse('expandableValue', expandableValue);
    mateUse('allowWrap', allowWrap);
    mateUse('allowNameWrap', allowNameWrap);
    mateUse('style', style);
    mateUse('level', level);
  }
}

/// class DiagnosticableNode<T extends Diagnosticable> extends DiagnosticsNode
class DiagnosticableNode$Mate<T extends Diagnosticable> extends DiagnosticableNode<T> with Mate {
  /// DiagnosticableNode<T> DiagnosticableNode({String? name, required T value, required DiagnosticsTreeStyle? style})
  DiagnosticableNode$Mate({
    /// optionalParameters: {String? name} , defaultValue:none
    String? name,

    /// optionalParameters: {required T value} , defaultValue:none
    required T value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , defaultValue:none
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateCreateName = 'DiagnosticableNode';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticableNode$Mate<T>(
          name: p.get('name').build(),
          value: p.get('value').build(),
          style: p.get('style').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('style', style);
  }
}

/// class DiagnosticableTreeNode extends DiagnosticableNode<DiagnosticableTree>
class DiagnosticableTreeNode$Mate extends DiagnosticableTreeNode with Mate {
  /// DiagnosticableTreeNode DiagnosticableTreeNode({String? name, required DiagnosticableTree value, required DiagnosticsTreeStyle? style})
  DiagnosticableTreeNode$Mate({
    /// optionalParameters: {String? name} , defaultValue:none
    String? name,

    /// optionalParameters: {required DiagnosticableTree value} , defaultValue:none
    required DiagnosticableTree value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , defaultValue:none
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateCreateName = 'DiagnosticableTreeNode';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticableTreeNode$Mate(
          name: p.get('name').build(),
          value: p.get('value').build(),
          style: p.get('style').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('style', style);
  }
}

/// class DiagnosticPropertiesBuilder
class DiagnosticPropertiesBuilder$Mate extends DiagnosticPropertiesBuilder with Mate {
  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder.fromProperties(List<DiagnosticsNode> properties)
  DiagnosticPropertiesBuilder$Mate.fromProperties(

      /// requiredParameters: List<DiagnosticsNode> properties
      List<DiagnosticsNode> properties)
      : super.fromProperties(properties) {
    mateCreateName = 'DiagnosticPropertiesBuilder.fromProperties';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticPropertiesBuilder$Mate.fromProperties(p.get('properties').value);
    mateUse('properties', properties);
  }
}

/// class DiagnosticsBlock extends DiagnosticsNode
class DiagnosticsBlock$Mate extends DiagnosticsBlock with Mate {
  /// DiagnosticsBlock DiagnosticsBlock({String? name, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace, bool showName = true, bool showSeparator = true, String? linePrefix, Object? value, String? description, DiagnosticLevel level = DiagnosticLevel.info, bool allowTruncate = false, List<DiagnosticsNode> children = const <DiagnosticsNode>[], List<DiagnosticsNode> properties = const <DiagnosticsNode>[]})
  DiagnosticsBlock$Mate({
    /// optionalParameters: {String? name} , defaultValue:none
    String? name,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace} , defaultValue:PrefixedIdentifier
    DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace,

    /// optionalParameters: {bool showName = true} , defaultValue:Literal
    bool showName = true,

    /// optionalParameters: {bool showSeparator = true} , defaultValue:Literal
    bool showSeparator = true,

    /// optionalParameters: {String? linePrefix} , defaultValue:none
    String? linePrefix,

    /// optionalParameters: {Object? value} , defaultValue:none
    Object? value,

    /// optionalParameters: {String? description} , defaultValue:none
    String? description,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:PrefixedIdentifier
    DiagnosticLevel level = DiagnosticLevel.info,

    /// optionalParameters: {bool allowTruncate = false} , defaultValue:Literal
    bool allowTruncate = false,

    /// optionalParameters: {List<DiagnosticsNode> children = const <DiagnosticsNode>[]} , defaultValue:unprocessed
    required List<DiagnosticsNode> children,

    /// optionalParameters: {List<DiagnosticsNode> properties = const <DiagnosticsNode>[]} , defaultValue:unprocessed
    required List<DiagnosticsNode> properties,
  }) : super(
          name: name,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          linePrefix: linePrefix,
          value: value,
          description: description,
          level: level,
          allowTruncate: allowTruncate,
          children: children,
          properties: properties,
        ) {
    mateCreateName = 'DiagnosticsBlock';
    matePackageUrl = 'package:flutter/foundation.dart';
    mateBuilder = (p) => DiagnosticsBlock$Mate(
          name: p.get('name').build(),
          style: p.get('style').build(),
          showName: p.get('showName').build(),
          showSeparator: p.get('showSeparator').build(),
          linePrefix: p.get('linePrefix').build(),
          value: p.get('value').build(),
          description: p.get('description').build(),
          level: p.get('level').build(),
          allowTruncate: p.get('allowTruncate').build(),
          children: p.get('children').build(),
          properties: p.get('properties').build(),
        );
    mateUse('name', name);
    mateUse('style', style);
    mateUse('showName', showName);
    mateUse('showSeparator', showSeparator);
    mateUse('linePrefix', linePrefix);
    mateUse('value', value);
    mateUse('description', description);
    mateUse('level', level);
    mateUse('allowTruncate', allowTruncate);
    mateUse('children', children);
    mateUse('properties', properties);
  }
}
