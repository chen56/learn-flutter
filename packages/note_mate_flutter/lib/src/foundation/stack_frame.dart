// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/foundation/stack_frame.dart';
import 'package:note/mate.dart';
import 'dart:core';

/// class StackFrame
class StackFrame$Mate extends StackFrame with Mate {
  /// StackFrame StackFrame({required int number, required int column, required int line, required String packageScheme, required String package, required String packagePath, String className = '', required String method, bool isConstructor = false, required String source})
  StackFrame$Mate({
    /// optionalParameters: {required int number} , defaultValue:none
    required int number,

    /// optionalParameters: {required int column} , defaultValue:none
    required int column,

    /// optionalParameters: {required int line} , defaultValue:none
    required int line,

    /// optionalParameters: {required String packageScheme} , defaultValue:none
    required String packageScheme,

    /// optionalParameters: {required String package} , defaultValue:none
    required String package,

    /// optionalParameters: {required String packagePath} , defaultValue:none
    required String packagePath,

    /// optionalParameters: {String className = ''} , defaultValue:Literal
    String className = '',

    /// optionalParameters: {required String method} , defaultValue:none
    required String method,

    /// optionalParameters: {bool isConstructor = false} , defaultValue:Literal
    bool isConstructor = false,

    /// optionalParameters: {required String source} , defaultValue:none
    required String source,
  }) : super(
          number: number,
          column: column,
          line: line,
          packageScheme: packageScheme,
          package: package,
          packagePath: packagePath,
          className: className,
          method: method,
          isConstructor: isConstructor,
          source: source,
        ) {
    mateBuilder = (p) => StackFrame$Mate(
          number: p.get('number').build(),
          column: p.get('column').build(),
          line: p.get('line').build(),
          packageScheme: p.get('packageScheme').build(),
          package: p.get('package').build(),
          packagePath: p.get('packagePath').build(),
          className: p.get('className').build(),
          method: p.get('method').build(),
          isConstructor: p.get('isConstructor').build(),
          source: p.get('source').build(),
        );
    mateDeclare('number', number);
    mateDeclare('column', column);
    mateDeclare('line', line);
    mateDeclare('packageScheme', packageScheme);
    mateDeclare('package', package);
    mateDeclare('packagePath', packagePath);
    mateDeclare('className', className);
    mateDeclare('method', method);
    mateDeclare('isConstructor', isConstructor);
    mateDeclare('source', source);
  }
}
