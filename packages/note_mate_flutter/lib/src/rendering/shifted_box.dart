// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/shifted_box.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/painting/edge_insets.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/rendering/box.dart' as _i5;
import 'package:flutter/src/painting/alignment.dart' as _i6;
import 'package:flutter/cupertino.dart' as _i7;

/// class RenderPadding extends RenderShiftedBox
class RenderPadding$Mate extends _i1.RenderPadding with _i2.Mate {
  /// RenderPadding RenderPadding({required EdgeInsetsGeometry padding, TextDirection? textDirection, RenderBox? child})
  RenderPadding$Mate({
    /// optionalParameters: {required EdgeInsetsGeometry padding} , default:none
    required super.padding,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'padding': _i2.BuilderArg<_i3.EdgeInsetsGeometry>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderPadding';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderPadding$Mate(
          padding: p.get('padding').build(),
          textDirection: p.get('textDirection').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderPositionedBox extends RenderAligningShiftedBox
class RenderPositionedBox$Mate extends _i1.RenderPositionedBox with _i2.Mate {
  /// RenderPositionedBox RenderPositionedBox({RenderBox? child, double? widthFactor, double? heightFactor, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
  RenderPositionedBox$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {double? widthFactor} , default:none
    super.widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    super.heightFactor,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'widthFactor': _i2.BuilderArg<double?>(
            name: 'widthFactor',
            init: widthFactor,
            isNamed: true,
          ),
          'heightFactor': _i2.BuilderArg<double?>(
            name: 'heightFactor',
            init: heightFactor,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i7.Alignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderPositionedBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderPositionedBox$Mate(
          child: p.get('child').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderConstrainedOverflowBox extends RenderAligningShiftedBox
class RenderConstrainedOverflowBox$Mate extends _i1.RenderConstrainedOverflowBox with _i2.Mate {
  /// RenderConstrainedOverflowBox RenderConstrainedOverflowBox({RenderBox? child, double? minWidth, double? maxWidth, double? minHeight, double? maxHeight, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
  RenderConstrainedOverflowBox$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {double? minWidth} , default:none
    super.minWidth,

    /// optionalParameters: {double? maxWidth} , default:none
    super.maxWidth,

    /// optionalParameters: {double? minHeight} , default:none
    super.minHeight,

    /// optionalParameters: {double? maxHeight} , default:none
    super.maxHeight,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'minWidth': _i2.BuilderArg<double?>(
            name: 'minWidth',
            init: minWidth,
            isNamed: true,
          ),
          'maxWidth': _i2.BuilderArg<double?>(
            name: 'maxWidth',
            init: maxWidth,
            isNamed: true,
          ),
          'minHeight': _i2.BuilderArg<double?>(
            name: 'minHeight',
            init: minHeight,
            isNamed: true,
          ),
          'maxHeight': _i2.BuilderArg<double?>(
            name: 'maxHeight',
            init: maxHeight,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i7.Alignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderConstrainedOverflowBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderConstrainedOverflowBox$Mate(
          child: p.get('child').build(),
          minWidth: p.get('minWidth').build(),
          maxWidth: p.get('maxWidth').build(),
          minHeight: p.get('minHeight').build(),
          maxHeight: p.get('maxHeight').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderConstraintsTransformBox extends RenderAligningShiftedBox with DebugOverflowIndicatorMixin
class RenderConstraintsTransformBox$Mate extends _i1.RenderConstraintsTransformBox with _i2.Mate {
  /// RenderConstraintsTransformBox RenderConstraintsTransformBox({required AlignmentGeometry alignment = Alignment.center, required TextDirection? textDirection, required BoxConstraints Function(BoxConstraints) constraintsTransform, RenderBox? child, Clip clipBehavior = Clip.none})
  RenderConstraintsTransformBox$Mate({
    /// optionalParameters: {required AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {required TextDirection? textDirection} , default:none
    required super.textDirection,

    /// optionalParameters: {required BoxConstraints Function(BoxConstraints) constraintsTransform} , default:none
    required super.constraintsTransform,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i7.Alignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'constraintsTransform': _i2.BuilderArg<_i1.BoxConstraintsTransform>(
            name: 'constraintsTransform',
            init: constraintsTransform,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
        },
        super() {
    mateBuilderName = 'RenderConstraintsTransformBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderConstraintsTransformBox$Mate(
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          constraintsTransform: p.get('constraintsTransform').build(),
          child: p.get('child').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderSizedOverflowBox extends RenderAligningShiftedBox
class RenderSizedOverflowBox$Mate extends _i1.RenderSizedOverflowBox with _i2.Mate {
  /// RenderSizedOverflowBox RenderSizedOverflowBox({RenderBox? child, required Size requestedSize, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
  RenderSizedOverflowBox$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required Size requestedSize} , default:none
    required super.requestedSize,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'requestedSize': _i2.BuilderArg<_i4.Size>(
            name: 'requestedSize',
            init: requestedSize,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i7.Alignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderSizedOverflowBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderSizedOverflowBox$Mate(
          child: p.get('child').build(),
          requestedSize: p.get('requestedSize').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderFractionallySizedOverflowBox extends RenderAligningShiftedBox
class RenderFractionallySizedOverflowBox$Mate extends _i1.RenderFractionallySizedOverflowBox with _i2.Mate {
  /// RenderFractionallySizedOverflowBox RenderFractionallySizedOverflowBox({RenderBox? child, double? widthFactor, double? heightFactor, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
  RenderFractionallySizedOverflowBox$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {double? widthFactor} , default:none
    super.widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    super.heightFactor,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'widthFactor': _i2.BuilderArg<double?>(
            name: 'widthFactor',
            init: widthFactor,
            isNamed: true,
          ),
          'heightFactor': _i2.BuilderArg<double?>(
            name: 'heightFactor',
            init: heightFactor,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i6.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i7.Alignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderFractionallySizedOverflowBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderFractionallySizedOverflowBox$Mate(
          child: p.get('child').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderCustomSingleChildLayoutBox extends RenderShiftedBox
class RenderCustomSingleChildLayoutBox$Mate extends _i1.RenderCustomSingleChildLayoutBox with _i2.Mate {
  /// RenderCustomSingleChildLayoutBox RenderCustomSingleChildLayoutBox({RenderBox? child, required SingleChildLayoutDelegate delegate})
  RenderCustomSingleChildLayoutBox$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required SingleChildLayoutDelegate delegate} , default:none
    required super.delegate,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i1.SingleChildLayoutDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderCustomSingleChildLayoutBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderCustomSingleChildLayoutBox$Mate(
          child: p.get('child').build(),
          delegate: p.get('delegate').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderBaseline extends RenderShiftedBox
class RenderBaseline$Mate extends _i1.RenderBaseline with _i2.Mate {
  /// RenderBaseline RenderBaseline({RenderBox? child, required double baseline, required TextBaseline baselineType})
  RenderBaseline$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required double baseline} , default:none
    required super.baseline,

    /// optionalParameters: {required TextBaseline baselineType} , default:none
    required super.baselineType,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i5.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'baseline': _i2.BuilderArg<double>(
            name: 'baseline',
            init: baseline,
            isNamed: true,
          ),
          'baselineType': _i2.BuilderArg<_i4.TextBaseline>(
            name: 'baselineType',
            init: baselineType,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderBaseline';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderBaseline$Mate(
          child: p.get('child').build(),
          baseline: p.get('baseline').build(),
          baselineType: p.get('baselineType').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
