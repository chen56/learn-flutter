// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/shifted_box.dart';import 'package:flutter/src/painting/edge_insets.dart';import 'dart:ui';import 'package:flutter/src/rendering/box.dart';import 'dart:core';import 'package:flutter/src/painting/alignment.dart';import 'package:note/mate.dart' show Mate;/// class RenderPadding extends RenderShiftedBox
class RenderPadding$Mate extends RenderPadding with Mate {/// RenderPadding RenderPadding({required EdgeInsetsGeometry padding, TextDirection? textDirection, RenderBox? child})
RenderPadding$Mate({/// optionalParameters: {required EdgeInsetsGeometry padding} , hasDefaultValue:false, defaultValueCode:null
required EdgeInsetsGeometry padding, /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
TextDirection? textDirection, /// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, }) : super(padding: padding, textDirection: textDirection, child: child, ) { mateBuilder = (p) => RenderPadding$Mate(padding: p.get('padding').build(), textDirection: p.get('textDirection').build(), child: p.get('child').build(), );
matePut('padding', padding);
matePut('textDirection', textDirection);
matePut('child', child); }

 }
/// class RenderPositionedBox extends RenderAligningShiftedBox
class RenderPositionedBox$Mate extends RenderPositionedBox with Mate {/// RenderPositionedBox RenderPositionedBox({RenderBox? child, double? widthFactor, double? heightFactor, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
RenderPositionedBox$Mate({/// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, /// optionalParameters: {double? widthFactor} , hasDefaultValue:false, defaultValueCode:null
double? widthFactor, /// optionalParameters: {double? heightFactor} , hasDefaultValue:false, defaultValueCode:null
double? heightFactor, /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
required AlignmentGeometry alignment, /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
TextDirection? textDirection, }) : super(child: child, widthFactor: widthFactor, heightFactor: heightFactor, alignment: alignment, textDirection: textDirection, ) { mateBuilder = (p) => RenderPositionedBox$Mate(child: p.get('child').build(), widthFactor: p.get('widthFactor').build(), heightFactor: p.get('heightFactor').build(), alignment: p.get('alignment').build(), textDirection: p.get('textDirection').build(), );
matePut('child', child);
matePut('widthFactor', widthFactor);
matePut('heightFactor', heightFactor);
matePut('alignment', alignment);
matePut('textDirection', textDirection); }

 }
/// class RenderConstrainedOverflowBox extends RenderAligningShiftedBox
class RenderConstrainedOverflowBox$Mate extends RenderConstrainedOverflowBox with Mate {/// RenderConstrainedOverflowBox RenderConstrainedOverflowBox({RenderBox? child, double? minWidth, double? maxWidth, double? minHeight, double? maxHeight, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
RenderConstrainedOverflowBox$Mate({/// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, /// optionalParameters: {double? minWidth} , hasDefaultValue:false, defaultValueCode:null
double? minWidth, /// optionalParameters: {double? maxWidth} , hasDefaultValue:false, defaultValueCode:null
double? maxWidth, /// optionalParameters: {double? minHeight} , hasDefaultValue:false, defaultValueCode:null
double? minHeight, /// optionalParameters: {double? maxHeight} , hasDefaultValue:false, defaultValueCode:null
double? maxHeight, /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
required AlignmentGeometry alignment, /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
TextDirection? textDirection, }) : super(child: child, minWidth: minWidth, maxWidth: maxWidth, minHeight: minHeight, maxHeight: maxHeight, alignment: alignment, textDirection: textDirection, ) { mateBuilder = (p) => RenderConstrainedOverflowBox$Mate(child: p.get('child').build(), minWidth: p.get('minWidth').build(), maxWidth: p.get('maxWidth').build(), minHeight: p.get('minHeight').build(), maxHeight: p.get('maxHeight').build(), alignment: p.get('alignment').build(), textDirection: p.get('textDirection').build(), );
matePut('child', child);
matePut('minWidth', minWidth);
matePut('maxWidth', maxWidth);
matePut('minHeight', minHeight);
matePut('maxHeight', maxHeight);
matePut('alignment', alignment);
matePut('textDirection', textDirection); }

 }
/// class RenderConstraintsTransformBox extends RenderAligningShiftedBox with DebugOverflowIndicatorMixin
class RenderConstraintsTransformBox$Mate extends RenderConstraintsTransformBox with Mate {/// RenderConstraintsTransformBox RenderConstraintsTransformBox({required AlignmentGeometry alignment = Alignment.center, required TextDirection? textDirection, required BoxConstraints Function(BoxConstraints) constraintsTransform, RenderBox? child, Clip clipBehavior = Clip.none})
RenderConstraintsTransformBox$Mate({/// optionalParameters: {required AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
required AlignmentGeometry alignment, /// optionalParameters: {required TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
required TextDirection? textDirection, /// optionalParameters: {required BoxConstraints Function(BoxConstraints) constraintsTransform} , hasDefaultValue:false, defaultValueCode:null
required BoxConstraintsTransform constraintsTransform, /// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
required Clip clipBehavior, }) : super(alignment: alignment, textDirection: textDirection, constraintsTransform: constraintsTransform, child: child, clipBehavior: clipBehavior, ) { mateBuilder = (p) => RenderConstraintsTransformBox$Mate(alignment: p.get('alignment').build(), textDirection: p.get('textDirection').build(), constraintsTransform: p.get('constraintsTransform').build(), child: p.get('child').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('alignment', alignment);
matePut('textDirection', textDirection);
matePut('constraintsTransform', constraintsTransform);
matePut('child', child);
matePut('clipBehavior', clipBehavior); }

 }
/// class RenderSizedOverflowBox extends RenderAligningShiftedBox
class RenderSizedOverflowBox$Mate extends RenderSizedOverflowBox with Mate {/// RenderSizedOverflowBox RenderSizedOverflowBox({RenderBox? child, required Size requestedSize, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
RenderSizedOverflowBox$Mate({/// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, /// optionalParameters: {required Size requestedSize} , hasDefaultValue:false, defaultValueCode:null
required Size requestedSize, /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
required AlignmentGeometry alignment, /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
TextDirection? textDirection, }) : super(child: child, requestedSize: requestedSize, alignment: alignment, textDirection: textDirection, ) { mateBuilder = (p) => RenderSizedOverflowBox$Mate(child: p.get('child').build(), requestedSize: p.get('requestedSize').build(), alignment: p.get('alignment').build(), textDirection: p.get('textDirection').build(), );
matePut('child', child);
matePut('requestedSize', requestedSize);
matePut('alignment', alignment);
matePut('textDirection', textDirection); }

 }
/// class RenderFractionallySizedOverflowBox extends RenderAligningShiftedBox
class RenderFractionallySizedOverflowBox$Mate extends RenderFractionallySizedOverflowBox with Mate {/// RenderFractionallySizedOverflowBox RenderFractionallySizedOverflowBox({RenderBox? child, double? widthFactor, double? heightFactor, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection})
RenderFractionallySizedOverflowBox$Mate({/// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, /// optionalParameters: {double? widthFactor} , hasDefaultValue:false, defaultValueCode:null
double? widthFactor, /// optionalParameters: {double? heightFactor} , hasDefaultValue:false, defaultValueCode:null
double? heightFactor, /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
required AlignmentGeometry alignment, /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
TextDirection? textDirection, }) : super(child: child, widthFactor: widthFactor, heightFactor: heightFactor, alignment: alignment, textDirection: textDirection, ) { mateBuilder = (p) => RenderFractionallySizedOverflowBox$Mate(child: p.get('child').build(), widthFactor: p.get('widthFactor').build(), heightFactor: p.get('heightFactor').build(), alignment: p.get('alignment').build(), textDirection: p.get('textDirection').build(), );
matePut('child', child);
matePut('widthFactor', widthFactor);
matePut('heightFactor', heightFactor);
matePut('alignment', alignment);
matePut('textDirection', textDirection); }

 }
/// class RenderCustomSingleChildLayoutBox extends RenderShiftedBox
class RenderCustomSingleChildLayoutBox$Mate extends RenderCustomSingleChildLayoutBox with Mate {/// RenderCustomSingleChildLayoutBox RenderCustomSingleChildLayoutBox({RenderBox? child, required SingleChildLayoutDelegate delegate})
RenderCustomSingleChildLayoutBox$Mate({/// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, /// optionalParameters: {required SingleChildLayoutDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
required SingleChildLayoutDelegate delegate, }) : super(child: child, delegate: delegate, ) { mateBuilder = (p) => RenderCustomSingleChildLayoutBox$Mate(child: p.get('child').build(), delegate: p.get('delegate').build(), );
matePut('child', child);
matePut('delegate', delegate); }

 }
/// class RenderBaseline extends RenderShiftedBox
class RenderBaseline$Mate extends RenderBaseline with Mate {/// RenderBaseline RenderBaseline({RenderBox? child, required double baseline, required TextBaseline baselineType})
RenderBaseline$Mate({/// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child, /// optionalParameters: {required double baseline} , hasDefaultValue:false, defaultValueCode:null
required double baseline, /// optionalParameters: {required TextBaseline baselineType} , hasDefaultValue:false, defaultValueCode:null
required TextBaseline baselineType, }) : super(child: child, baseline: baseline, baselineType: baselineType, ) { mateBuilder = (p) => RenderBaseline$Mate(child: p.get('child').build(), baseline: p.get('baseline').build(), baselineType: p.get('baselineType').build(), );
matePut('child', child);
matePut('baseline', baseline);
matePut('baselineType', baselineType); }

 }
