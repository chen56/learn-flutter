// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/proxy_box.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/rendering/box.dart' as _i3;
import 'package:flutter/src/animation/animation.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/borders.dart' as _i6;
import 'package:flutter/src/painting/border_radius.dart' as _i7;
import 'package:flutter/cupertino.dart' as _i8;
import 'package:flutter/src/painting/box_border.dart' as _i9;
import 'package:flutter/src/painting/decoration.dart' as _i10;
import 'package:flutter/src/painting/image_provider.dart' as _i11;
import 'package:vector_math/vector_math_64.dart' as _i12;
import 'package:flutter/src/painting/alignment.dart' as _i13;
import 'package:flutter/src/painting/box_fit.dart' as _i14;
import 'package:flutter/src/services/mouse_tracking.dart' as _i15;
import 'package:flutter/src/services/mouse_cursor.dart' as _i16;
import 'package:flutter/src/gestures/tap.dart' as _i17;
import 'package:flutter/src/gestures/long_press.dart' as _i18;
import 'package:flutter/src/gestures/drag_details.dart' as _i19;
import 'package:flutter/src/semantics/semantics.dart' as _i20;
import 'package:flutter/src/rendering/layer.dart' as _i21;
import 'package:flutter/animation.dart' as _i22;

/// class RenderProxyBox extends RenderBox with RenderObjectWithChildMixin<RenderBox>, RenderProxyBoxMixin<RenderBox>
class RenderProxyBox$Mate extends _i1.RenderProxyBox with _i2.Mate {
  /// RenderProxyBox RenderProxyBox([RenderBox? child])
  RenderProxyBox$Mate(

      /// requiredParameters: [RenderBox? child]
      super.child)
      : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'RenderProxyBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderProxyBox$Mate(p.get('child').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderConstrainedBox extends RenderProxyBox
class RenderConstrainedBox$Mate extends _i1.RenderConstrainedBox with _i2.Mate {
  /// RenderConstrainedBox RenderConstrainedBox({RenderBox? child, required BoxConstraints additionalConstraints})
  RenderConstrainedBox$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required BoxConstraints additionalConstraints} , default:none
    required super.additionalConstraints,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'additionalConstraints': _i2.BuilderArg<_i3.BoxConstraints>(
            name: 'additionalConstraints',
            init: additionalConstraints,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderConstrainedBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderConstrainedBox$Mate(
          child: p.get('child').build(),
          additionalConstraints: p.get('additionalConstraints').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderLimitedBox extends RenderProxyBox
class RenderLimitedBox$Mate extends _i1.RenderLimitedBox with _i2.Mate {
  /// RenderLimitedBox RenderLimitedBox({RenderBox? child, double maxWidth = double.infinity, double maxHeight = double.infinity})
  RenderLimitedBox$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {double maxWidth = double.infinity} , default:processed=PrefixedIdentifierImpl
    super.maxWidth,

    /// optionalParameters: {double maxHeight = double.infinity} , default:processed=PrefixedIdentifierImpl
    super.maxHeight,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'maxWidth': _i2.BuilderArg<double>(
            name: 'maxWidth',
            init: maxWidth,
            isNamed: true,
            defaultValue: double.infinity,
          ),
          'maxHeight': _i2.BuilderArg<double>(
            name: 'maxHeight',
            init: maxHeight,
            isNamed: true,
            defaultValue: double.infinity,
          ),
        },
        super() {
    mateBuilderName = 'RenderLimitedBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderLimitedBox$Mate(
          child: p.get('child').build(),
          maxWidth: p.get('maxWidth').build(),
          maxHeight: p.get('maxHeight').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderAspectRatio extends RenderProxyBox
class RenderAspectRatio$Mate extends _i1.RenderAspectRatio with _i2.Mate {
  /// RenderAspectRatio RenderAspectRatio({RenderBox? child, required double aspectRatio})
  RenderAspectRatio$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required double aspectRatio} , default:none
    required super.aspectRatio,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'aspectRatio': _i2.BuilderArg<double>(
            name: 'aspectRatio',
            init: aspectRatio,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderAspectRatio';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderAspectRatio$Mate(
          child: p.get('child').build(),
          aspectRatio: p.get('aspectRatio').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderIntrinsicWidth extends RenderProxyBox
class RenderIntrinsicWidth$Mate extends _i1.RenderIntrinsicWidth with _i2.Mate {
  /// RenderIntrinsicWidth RenderIntrinsicWidth({double? stepWidth, double? stepHeight, RenderBox? child})
  RenderIntrinsicWidth$Mate({
    /// optionalParameters: {double? stepWidth} , default:none
    super.stepWidth,

    /// optionalParameters: {double? stepHeight} , default:none
    super.stepHeight,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'stepWidth': _i2.BuilderArg<double?>(
            name: 'stepWidth',
            init: stepWidth,
            isNamed: true,
          ),
          'stepHeight': _i2.BuilderArg<double?>(
            name: 'stepHeight',
            init: stepHeight,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderIntrinsicWidth';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderIntrinsicWidth$Mate(
          stepWidth: p.get('stepWidth').build(),
          stepHeight: p.get('stepHeight').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderIntrinsicHeight extends RenderProxyBox
class RenderIntrinsicHeight$Mate extends _i1.RenderIntrinsicHeight with _i2.Mate {
  /// RenderIntrinsicHeight RenderIntrinsicHeight({RenderBox? child})
  RenderIntrinsicHeight$Mate(
      {
      /// optionalParameters: {RenderBox? child} , default:none
      super.child})
      : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'RenderIntrinsicHeight';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderIntrinsicHeight$Mate(child: p.get('child').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderOpacity extends RenderProxyBox
class RenderOpacity$Mate extends _i1.RenderOpacity with _i2.Mate {
  /// RenderOpacity RenderOpacity({double opacity = 1.0, bool alwaysIncludeSemantics = false, RenderBox? child})
  RenderOpacity$Mate({
    /// optionalParameters: {double opacity = 1.0} , default:processed=DoubleLiteralImpl
    super.opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.alwaysIncludeSemantics,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'opacity': _i2.BuilderArg<double>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'alwaysIncludeSemantics': _i2.BuilderArg<bool>(
            name: 'alwaysIncludeSemantics',
            init: alwaysIncludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderOpacity';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderOpacity$Mate(
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderAnimatedOpacity extends RenderProxyBox with RenderAnimatedOpacityMixin<RenderBox>
class RenderAnimatedOpacity$Mate extends _i1.RenderAnimatedOpacity with _i2.Mate {
  /// RenderAnimatedOpacity RenderAnimatedOpacity({required Animation<double> opacity, bool alwaysIncludeSemantics = false, RenderBox? child})
  RenderAnimatedOpacity$Mate({
    /// optionalParameters: {required Animation<double> opacity} , default:none
    required super.opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.alwaysIncludeSemantics,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'opacity': _i2.BuilderArg<_i4.Animation<double>>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'alwaysIncludeSemantics': _i2.BuilderArg<bool>(
            name: 'alwaysIncludeSemantics',
            init: alwaysIncludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderAnimatedOpacity';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderAnimatedOpacity$Mate(
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderShaderMask extends RenderProxyBox
class RenderShaderMask$Mate extends _i1.RenderShaderMask with _i2.Mate {
  /// RenderShaderMask RenderShaderMask({RenderBox? child, required Shader Function(Rect) shaderCallback, BlendMode blendMode = BlendMode.modulate})
  RenderShaderMask$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required Shader Function(Rect) shaderCallback} , default:none
    required super.shaderCallback,

    /// optionalParameters: {BlendMode blendMode = BlendMode.modulate} , default:processed=PrefixedIdentifierImpl
    super.blendMode,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'shaderCallback': _i2.BuilderArg<_i1.ShaderCallback>(
            name: 'shaderCallback',
            init: shaderCallback,
            isNamed: true,
          ),
          'blendMode': _i2.BuilderArg<_i5.BlendMode>(
            name: 'blendMode',
            init: blendMode,
            isNamed: true,
            defaultValue: _i5.BlendMode.modulate,
          ),
        },
        super() {
    mateBuilderName = 'RenderShaderMask';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderShaderMask$Mate(
          child: p.get('child').build(),
          shaderCallback: p.get('shaderCallback').build(),
          blendMode: p.get('blendMode').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderBackdropFilter extends RenderProxyBox
class RenderBackdropFilter$Mate extends _i1.RenderBackdropFilter with _i2.Mate {
  /// RenderBackdropFilter RenderBackdropFilter({RenderBox? child, required ImageFilter filter, BlendMode blendMode = BlendMode.srcOver})
  RenderBackdropFilter$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required ImageFilter filter} , default:none
    required super.filter,

    /// optionalParameters: {BlendMode blendMode = BlendMode.srcOver} , default:processed=PrefixedIdentifierImpl
    super.blendMode,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'filter': _i2.BuilderArg<_i5.ImageFilter>(
            name: 'filter',
            init: filter,
            isNamed: true,
          ),
          'blendMode': _i2.BuilderArg<_i5.BlendMode>(
            name: 'blendMode',
            init: blendMode,
            isNamed: true,
            defaultValue: _i5.BlendMode.srcOver,
          ),
        },
        super() {
    mateBuilderName = 'RenderBackdropFilter';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderBackdropFilter$Mate(
          child: p.get('child').build(),
          filter: p.get('filter').build(),
          blendMode: p.get('blendMode').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ShapeBorderClipper extends CustomClipper<Path>
class ShapeBorderClipper$Mate extends _i1.ShapeBorderClipper with _i2.Mate {
  /// ShapeBorderClipper ShapeBorderClipper({required ShapeBorder shape, TextDirection? textDirection})
  ShapeBorderClipper$Mate({
    /// optionalParameters: {required ShapeBorder shape} , default:none
    required super.shape,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,
  })  : mateParams = {
          'shape': _i2.BuilderArg<_i6.ShapeBorder>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ShapeBorderClipper';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShapeBorderClipper$Mate(
          shape: p.get('shape').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderClipRect extends _RenderCustomClip<Rect>
class RenderClipRect$Mate extends _i1.RenderClipRect with _i2.Mate {
  /// RenderClipRect RenderClipRect({RenderBox? child, CustomClipper<Rect>? clipper, Clip clipBehavior = Clip.antiAlias})
  RenderClipRect$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {CustomClipper<Rect>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i1.CustomClipper<_i5.Rect>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.antiAlias,
          ),
        },
        super() {
    mateBuilderName = 'RenderClipRect';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderClipRect$Mate(
          child: p.get('child').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderClipRRect extends _RenderCustomClip<RRect>
class RenderClipRRect$Mate extends _i1.RenderClipRRect with _i2.Mate {
  /// RenderClipRRect RenderClipRRect({RenderBox? child, BorderRadiusGeometry borderRadius = BorderRadius.zero, CustomClipper<RRect>? clipper, Clip clipBehavior = Clip.antiAlias, TextDirection? textDirection})
  RenderClipRRect$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {BorderRadiusGeometry borderRadius = BorderRadius.zero} , default:processed=PrefixedIdentifierImpl
    super.borderRadius,

    /// optionalParameters: {CustomClipper<RRect>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i7.BorderRadiusGeometry>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
            defaultValue: _i8.BorderRadius.zero,
          ),
          'clipper': _i2.BuilderArg<_i1.CustomClipper<_i5.RRect>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.antiAlias,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderClipRRect';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderClipRRect$Mate(
          child: p.get('child').build(),
          borderRadius: p.get('borderRadius').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderClipOval extends _RenderCustomClip<Rect>
class RenderClipOval$Mate extends _i1.RenderClipOval with _i2.Mate {
  /// RenderClipOval RenderClipOval({RenderBox? child, CustomClipper<Rect>? clipper, Clip clipBehavior = Clip.antiAlias})
  RenderClipOval$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {CustomClipper<Rect>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i1.CustomClipper<_i5.Rect>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.antiAlias,
          ),
        },
        super() {
    mateBuilderName = 'RenderClipOval';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderClipOval$Mate(
          child: p.get('child').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderClipPath extends _RenderCustomClip<Path>
class RenderClipPath$Mate extends _i1.RenderClipPath with _i2.Mate {
  /// RenderClipPath RenderClipPath({RenderBox? child, CustomClipper<Path>? clipper, Clip clipBehavior = Clip.antiAlias})
  RenderClipPath$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {CustomClipper<Path>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i1.CustomClipper<_i5.Path>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.antiAlias,
          ),
        },
        super() {
    mateBuilderName = 'RenderClipPath';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderClipPath$Mate(
          child: p.get('child').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderPhysicalModel extends _RenderPhysicalModelBase<RRect>
class RenderPhysicalModel$Mate extends _i1.RenderPhysicalModel with _i2.Mate {
  /// RenderPhysicalModel RenderPhysicalModel({RenderBox? child, BoxShape shape = BoxShape.rectangle, Clip clipBehavior = Clip.none, BorderRadius? borderRadius, double elevation = 0.0, required Color color, Color shadowColor = const Color(0xFF000000)})
  RenderPhysicalModel$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {BoxShape shape = BoxShape.rectangle} , default:processed=PrefixedIdentifierImpl
    super.shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    super.borderRadius,

    /// optionalParameters: {double elevation = 0.0} , default:processed=DoubleLiteralImpl
    super.elevation,

    /// optionalParameters: {required Color color} , default:none
    required super.color,

    /// optionalParameters: {Color shadowColor = const Color(0xFF000000)} , default:unprocessed=InstanceCreationExpressionImpl
    super.shadowColor,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i9.BoxShape>(
            name: 'shape',
            init: shape,
            isNamed: true,
            defaultValue: _i8.BoxShape.rectangle,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.none,
          ),
          'borderRadius': _i2.BuilderArg<_i7.BorderRadius?>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'color': _i2.BuilderArg<_i5.Color>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i5.Color>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderPhysicalModel';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderPhysicalModel$Mate(
          child: p.get('child').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          borderRadius: p.get('borderRadius').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          shadowColor: p.get('shadowColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderPhysicalShape extends _RenderPhysicalModelBase<Path>
class RenderPhysicalShape$Mate extends _i1.RenderPhysicalShape with _i2.Mate {
  /// RenderPhysicalShape RenderPhysicalShape({RenderBox? child, required CustomClipper<Path> clipper, Clip clipBehavior = Clip.none, double elevation = 0.0, required Color color, Color shadowColor = const Color(0xFF000000)})
  RenderPhysicalShape$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required CustomClipper<Path> clipper} , default:none
    required super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {double elevation = 0.0} , default:processed=DoubleLiteralImpl
    super.elevation,

    /// optionalParameters: {required Color color} , default:none
    required super.color,

    /// optionalParameters: {Color shadowColor = const Color(0xFF000000)} , default:unprocessed=InstanceCreationExpressionImpl
    super.shadowColor,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i1.CustomClipper<_i5.Path>>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.none,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'color': _i2.BuilderArg<_i5.Color>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i5.Color>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderPhysicalShape';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderPhysicalShape$Mate(
          child: p.get('child').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          shadowColor: p.get('shadowColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderDecoratedBox extends RenderProxyBox
class RenderDecoratedBox$Mate extends _i1.RenderDecoratedBox with _i2.Mate {
  /// RenderDecoratedBox RenderDecoratedBox({required Decoration decoration, DecorationPosition position = DecorationPosition.background, ImageConfiguration configuration = ImageConfiguration.empty, RenderBox? child})
  RenderDecoratedBox$Mate({
    /// optionalParameters: {required Decoration decoration} , default:none
    required super.decoration,

    /// optionalParameters: {DecorationPosition position = DecorationPosition.background} , default:processed=PrefixedIdentifierImpl
    super.position,

    /// optionalParameters: {ImageConfiguration configuration = ImageConfiguration.empty} , default:processed=PrefixedIdentifierImpl
    super.configuration,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'decoration': _i2.BuilderArg<_i10.Decoration>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'position': _i2.BuilderArg<_i1.DecorationPosition>(
            name: 'position',
            init: position,
            isNamed: true,
            defaultValue: _i8.DecorationPosition.background,
          ),
          'configuration': _i2.BuilderArg<_i11.ImageConfiguration>(
            name: 'configuration',
            init: configuration,
            isNamed: true,
            defaultValue: _i8.ImageConfiguration.empty,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderDecoratedBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderDecoratedBox$Mate(
          decoration: p.get('decoration').build(),
          position: p.get('position').build(),
          configuration: p.get('configuration').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderTransform extends RenderProxyBox
class RenderTransform$Mate extends _i1.RenderTransform with _i2.Mate {
  /// RenderTransform RenderTransform({required Matrix4 transform, Offset? origin, AlignmentGeometry? alignment, TextDirection? textDirection, bool transformHitTests = true, FilterQuality? filterQuality, RenderBox? child})
  RenderTransform$Mate({
    /// optionalParameters: {required Matrix4 transform} , default:none
    required super.transform,

    /// optionalParameters: {Offset? origin} , default:none
    super.origin,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'transform': _i2.BuilderArg<_i12.Matrix4>(
            name: 'transform',
            init: transform,
            isNamed: true,
          ),
          'origin': _i2.BuilderArg<_i5.Offset?>(
            name: 'origin',
            init: origin,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'filterQuality': _i2.BuilderArg<_i5.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderTransform';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderTransform$Mate(
          transform: p.get('transform').build(),
          origin: p.get('origin').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderFittedBox extends RenderProxyBox
class RenderFittedBox$Mate extends _i1.RenderFittedBox with _i2.Mate {
  /// RenderFittedBox RenderFittedBox({BoxFit fit = BoxFit.contain, AlignmentGeometry alignment = Alignment.center, TextDirection? textDirection, RenderBox? child, Clip clipBehavior = Clip.none})
  RenderFittedBox$Mate({
    /// optionalParameters: {BoxFit fit = BoxFit.contain} , default:processed=PrefixedIdentifierImpl
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'fit': _i2.BuilderArg<_i14.BoxFit>(
            name: 'fit',
            init: fit,
            isNamed: true,
            defaultValue: _i8.BoxFit.contain,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i8.Alignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.none,
          ),
        },
        super() {
    mateBuilderName = 'RenderFittedBox';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderFittedBox$Mate(
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          child: p.get('child').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderFractionalTranslation extends RenderProxyBox
class RenderFractionalTranslation$Mate extends _i1.RenderFractionalTranslation with _i2.Mate {
  /// RenderFractionalTranslation RenderFractionalTranslation({required Offset translation, bool transformHitTests = true, RenderBox? child})
  RenderFractionalTranslation$Mate({
    /// optionalParameters: {required Offset translation} , default:none
    required super.translation,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'translation': _i2.BuilderArg<_i5.Offset>(
            name: 'translation',
            init: translation,
            isNamed: true,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderFractionalTranslation';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderFractionalTranslation$Mate(
          translation: p.get('translation').build(),
          transformHitTests: p.get('transformHitTests').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderPointerListener extends RenderProxyBoxWithHitTestBehavior
class RenderPointerListener$Mate extends _i1.RenderPointerListener with _i2.Mate {
  /// RenderPointerListener RenderPointerListener({void Function(PointerDownEvent)? onPointerDown, void Function(PointerMoveEvent)? onPointerMove, void Function(PointerUpEvent)? onPointerUp, void Function(PointerHoverEvent)? onPointerHover, void Function(PointerCancelEvent)? onPointerCancel, void Function(PointerPanZoomStartEvent)? onPointerPanZoomStart, void Function(PointerPanZoomUpdateEvent)? onPointerPanZoomUpdate, void Function(PointerPanZoomEndEvent)? onPointerPanZoomEnd, void Function(PointerSignalEvent)? onPointerSignal, HitTestBehavior behavior = HitTestBehavior.deferToChild, RenderBox? child})
  RenderPointerListener$Mate({
    /// optionalParameters: {void Function(PointerDownEvent)? onPointerDown} , default:none
    super.onPointerDown,

    /// optionalParameters: {void Function(PointerMoveEvent)? onPointerMove} , default:none
    super.onPointerMove,

    /// optionalParameters: {void Function(PointerUpEvent)? onPointerUp} , default:none
    super.onPointerUp,

    /// optionalParameters: {void Function(PointerHoverEvent)? onPointerHover} , default:none
    super.onPointerHover,

    /// optionalParameters: {void Function(PointerCancelEvent)? onPointerCancel} , default:none
    super.onPointerCancel,

    /// optionalParameters: {void Function(PointerPanZoomStartEvent)? onPointerPanZoomStart} , default:none
    super.onPointerPanZoomStart,

    /// optionalParameters: {void Function(PointerPanZoomUpdateEvent)? onPointerPanZoomUpdate} , default:none
    super.onPointerPanZoomUpdate,

    /// optionalParameters: {void Function(PointerPanZoomEndEvent)? onPointerPanZoomEnd} , default:none
    super.onPointerPanZoomEnd,

    /// optionalParameters: {void Function(PointerSignalEvent)? onPointerSignal} , default:none
    super.onPointerSignal,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    super.behavior,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'onPointerDown': _i2.BuilderArg<_i1.PointerDownEventListener?>(
            name: 'onPointerDown',
            init: onPointerDown,
            isNamed: true,
          ),
          'onPointerMove': _i2.BuilderArg<_i1.PointerMoveEventListener?>(
            name: 'onPointerMove',
            init: onPointerMove,
            isNamed: true,
          ),
          'onPointerUp': _i2.BuilderArg<_i1.PointerUpEventListener?>(
            name: 'onPointerUp',
            init: onPointerUp,
            isNamed: true,
          ),
          'onPointerHover': _i2.BuilderArg<_i15.PointerHoverEventListener?>(
            name: 'onPointerHover',
            init: onPointerHover,
            isNamed: true,
          ),
          'onPointerCancel': _i2.BuilderArg<_i1.PointerCancelEventListener?>(
            name: 'onPointerCancel',
            init: onPointerCancel,
            isNamed: true,
          ),
          'onPointerPanZoomStart': _i2.BuilderArg<_i1.PointerPanZoomStartEventListener?>(
            name: 'onPointerPanZoomStart',
            init: onPointerPanZoomStart,
            isNamed: true,
          ),
          'onPointerPanZoomUpdate': _i2.BuilderArg<_i1.PointerPanZoomUpdateEventListener?>(
            name: 'onPointerPanZoomUpdate',
            init: onPointerPanZoomUpdate,
            isNamed: true,
          ),
          'onPointerPanZoomEnd': _i2.BuilderArg<_i1.PointerPanZoomEndEventListener?>(
            name: 'onPointerPanZoomEnd',
            init: onPointerPanZoomEnd,
            isNamed: true,
          ),
          'onPointerSignal': _i2.BuilderArg<_i1.PointerSignalEventListener?>(
            name: 'onPointerSignal',
            init: onPointerSignal,
            isNamed: true,
          ),
          'behavior': _i2.BuilderArg<_i1.HitTestBehavior>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
            defaultValue: _i8.HitTestBehavior.deferToChild,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderPointerListener';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderPointerListener$Mate(
          onPointerDown: p.get('onPointerDown').build(),
          onPointerMove: p.get('onPointerMove').build(),
          onPointerUp: p.get('onPointerUp').build(),
          onPointerHover: p.get('onPointerHover').build(),
          onPointerCancel: p.get('onPointerCancel').build(),
          onPointerPanZoomStart: p.get('onPointerPanZoomStart').build(),
          onPointerPanZoomUpdate: p.get('onPointerPanZoomUpdate').build(),
          onPointerPanZoomEnd: p.get('onPointerPanZoomEnd').build(),
          onPointerSignal: p.get('onPointerSignal').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderMouseRegion extends RenderProxyBoxWithHitTestBehavior implements MouseTrackerAnnotation
class RenderMouseRegion$Mate extends _i1.RenderMouseRegion with _i2.Mate {
  /// RenderMouseRegion RenderMouseRegion({void Function(PointerEnterEvent)? onEnter, void Function(PointerHoverEvent)? onHover, void Function(PointerExitEvent)? onExit, MouseCursor cursor = MouseCursor.defer, bool validForMouseTracker = true, bool opaque = true, RenderBox? child, HitTestBehavior? hitTestBehavior = HitTestBehavior.opaque})
  RenderMouseRegion$Mate({
    /// optionalParameters: {void Function(PointerEnterEvent)? onEnter} , default:none
    super.onEnter,

    /// optionalParameters: {void Function(PointerHoverEvent)? onHover} , default:none
    super.onHover,

    /// optionalParameters: {void Function(PointerExitEvent)? onExit} , default:none
    super.onExit,

    /// optionalParameters: {MouseCursor cursor = MouseCursor.defer} , default:processed=PrefixedIdentifierImpl
    super.cursor,

    /// optionalParameters: {bool validForMouseTracker = true} , default:processed=BooleanLiteralImpl
    super.validForMouseTracker,

    /// optionalParameters: {bool opaque = true} , default:processed=BooleanLiteralImpl
    super.opaque,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {HitTestBehavior? hitTestBehavior = HitTestBehavior.opaque} , default:processed=PrefixedIdentifierImpl
    super.hitTestBehavior,
  })  : mateParams = {
          'onEnter': _i2.BuilderArg<_i15.PointerEnterEventListener?>(
            name: 'onEnter',
            init: onEnter,
            isNamed: true,
          ),
          'onHover': _i2.BuilderArg<_i15.PointerHoverEventListener?>(
            name: 'onHover',
            init: onHover,
            isNamed: true,
          ),
          'onExit': _i2.BuilderArg<_i15.PointerExitEventListener?>(
            name: 'onExit',
            init: onExit,
            isNamed: true,
          ),
          'cursor': _i2.BuilderArg<_i16.MouseCursor>(
            name: 'cursor',
            init: cursor,
            isNamed: true,
            defaultValue: _i8.MouseCursor.defer,
          ),
          'validForMouseTracker': _i2.BuilderArg<bool>(
            name: 'validForMouseTracker',
            init: validForMouseTracker,
            isNamed: true,
            defaultValue: true,
          ),
          'opaque': _i2.BuilderArg<bool>(
            name: 'opaque',
            init: opaque,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'hitTestBehavior': _i2.BuilderArg<_i1.HitTestBehavior?>(
            name: 'hitTestBehavior',
            init: hitTestBehavior,
            isNamed: true,
            defaultValue: _i8.HitTestBehavior.opaque,
          ),
        },
        super() {
    mateBuilderName = 'RenderMouseRegion';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderMouseRegion$Mate(
          onEnter: p.get('onEnter').build(),
          onHover: p.get('onHover').build(),
          onExit: p.get('onExit').build(),
          cursor: p.get('cursor').build(),
          validForMouseTracker: p.get('validForMouseTracker').build(),
          opaque: p.get('opaque').build(),
          child: p.get('child').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderRepaintBoundary extends RenderProxyBox
class RenderRepaintBoundary$Mate extends _i1.RenderRepaintBoundary with _i2.Mate {
  /// RenderRepaintBoundary RenderRepaintBoundary({RenderBox? child})
  RenderRepaintBoundary$Mate(
      {
      /// optionalParameters: {RenderBox? child} , default:none
      super.child})
      : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'RenderRepaintBoundary';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderRepaintBoundary$Mate(child: p.get('child').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderIgnorePointer extends RenderProxyBox
class RenderIgnorePointer$Mate extends _i1.RenderIgnorePointer with _i2.Mate {
  /// RenderIgnorePointer RenderIgnorePointer({RenderBox? child, bool ignoring = true, bool? ignoringSemantics})
  RenderIgnorePointer$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {bool ignoring = true} , default:processed=BooleanLiteralImpl
    super.ignoring,

    /// optionalParameters: {bool? ignoringSemantics} , default:none
    super.ignoringSemantics,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'ignoring': _i2.BuilderArg<bool>(
            name: 'ignoring',
            init: ignoring,
            isNamed: true,
            defaultValue: true,
          ),
          'ignoringSemantics': _i2.BuilderArg<bool?>(
            name: 'ignoringSemantics',
            init: ignoringSemantics,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderIgnorePointer';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderIgnorePointer$Mate(
          child: p.get('child').build(),
          ignoring: p.get('ignoring').build(),
          ignoringSemantics: p.get('ignoringSemantics').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderOffstage extends RenderProxyBox
class RenderOffstage$Mate extends _i1.RenderOffstage with _i2.Mate {
  /// RenderOffstage RenderOffstage({bool offstage = true, RenderBox? child})
  RenderOffstage$Mate({
    /// optionalParameters: {bool offstage = true} , default:processed=BooleanLiteralImpl
    super.offstage,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'offstage': _i2.BuilderArg<bool>(
            name: 'offstage',
            init: offstage,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderOffstage';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderOffstage$Mate(
          offstage: p.get('offstage').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderAbsorbPointer extends RenderProxyBox
class RenderAbsorbPointer$Mate extends _i1.RenderAbsorbPointer with _i2.Mate {
  /// RenderAbsorbPointer RenderAbsorbPointer({RenderBox? child, bool absorbing = true, bool? ignoringSemantics})
  RenderAbsorbPointer$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {bool absorbing = true} , default:processed=BooleanLiteralImpl
    super.absorbing,

    /// optionalParameters: {bool? ignoringSemantics} , default:none
    super.ignoringSemantics,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'absorbing': _i2.BuilderArg<bool>(
            name: 'absorbing',
            init: absorbing,
            isNamed: true,
            defaultValue: true,
          ),
          'ignoringSemantics': _i2.BuilderArg<bool?>(
            name: 'ignoringSemantics',
            init: ignoringSemantics,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderAbsorbPointer';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderAbsorbPointer$Mate(
          child: p.get('child').build(),
          absorbing: p.get('absorbing').build(),
          ignoringSemantics: p.get('ignoringSemantics').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderMetaData extends RenderProxyBoxWithHitTestBehavior
class RenderMetaData$Mate extends _i1.RenderMetaData with _i2.Mate {
  /// RenderMetaData RenderMetaData({dynamic metaData, HitTestBehavior behavior = HitTestBehavior.deferToChild, RenderBox? child})
  RenderMetaData$Mate({
    /// optionalParameters: {dynamic metaData} , default:none
    super.metaData,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    super.behavior,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'metaData': _i2.BuilderArg<dynamic>(
            name: 'metaData',
            init: metaData,
            isNamed: true,
          ),
          'behavior': _i2.BuilderArg<_i1.HitTestBehavior>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
            defaultValue: _i8.HitTestBehavior.deferToChild,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderMetaData';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderMetaData$Mate(
          metaData: p.get('metaData').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderSemanticsGestureHandler extends RenderProxyBoxWithHitTestBehavior
class RenderSemanticsGestureHandler$Mate extends _i1.RenderSemanticsGestureHandler with _i2.Mate {
  /// RenderSemanticsGestureHandler RenderSemanticsGestureHandler({RenderBox? child, void Function()? onTap, void Function()? onLongPress, void Function(DragUpdateDetails)? onHorizontalDragUpdate, void Function(DragUpdateDetails)? onVerticalDragUpdate, double scrollFactor = 0.8, HitTestBehavior behavior = HitTestBehavior.deferToChild})
  RenderSemanticsGestureHandler$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    super.onLongPress,

    /// optionalParameters: {void Function(DragUpdateDetails)? onHorizontalDragUpdate} , default:none
    super.onHorizontalDragUpdate,

    /// optionalParameters: {void Function(DragUpdateDetails)? onVerticalDragUpdate} , default:none
    super.onVerticalDragUpdate,

    /// optionalParameters: {double scrollFactor = 0.8} , default:processed=DoubleLiteralImpl
    super.scrollFactor,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    super.behavior,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i17.GestureTapCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'onLongPress': _i2.BuilderArg<_i18.GestureLongPressCallback?>(
            name: 'onLongPress',
            init: onLongPress,
            isNamed: true,
          ),
          'onHorizontalDragUpdate': _i2.BuilderArg<_i19.GestureDragUpdateCallback?>(
            name: 'onHorizontalDragUpdate',
            init: onHorizontalDragUpdate,
            isNamed: true,
          ),
          'onVerticalDragUpdate': _i2.BuilderArg<_i19.GestureDragUpdateCallback?>(
            name: 'onVerticalDragUpdate',
            init: onVerticalDragUpdate,
            isNamed: true,
          ),
          'scrollFactor': _i2.BuilderArg<double>(
            name: 'scrollFactor',
            init: scrollFactor,
            isNamed: true,
            defaultValue: 0.8,
          ),
          'behavior': _i2.BuilderArg<_i1.HitTestBehavior>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
            defaultValue: _i8.HitTestBehavior.deferToChild,
          ),
        },
        super() {
    mateBuilderName = 'RenderSemanticsGestureHandler';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RenderSemanticsGestureHandler$Mate(
          child: p.get('child').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onHorizontalDragUpdate: p.get('onHorizontalDragUpdate').build(),
          onVerticalDragUpdate: p.get('onVerticalDragUpdate').build(),
          scrollFactor: p.get('scrollFactor').build(),
          behavior: p.get('behavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderSemanticsAnnotations extends RenderProxyBox
class RenderSemanticsAnnotations$Mate extends _i1.RenderSemanticsAnnotations with _i2.Mate {
  /// RenderSemanticsAnnotations RenderSemanticsAnnotations({RenderBox? child, required SemanticsProperties properties, bool container = false, bool explicitChildNodes = false, bool excludeSemantics = false, TextDirection? textDirection})
  RenderSemanticsAnnotations$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required SemanticsProperties properties} , default:none
    required super.properties,

    /// optionalParameters: {bool container = false} , default:processed=BooleanLiteralImpl
    super.container,

    /// optionalParameters: {bool explicitChildNodes = false} , default:processed=BooleanLiteralImpl
    super.explicitChildNodes,

    /// optionalParameters: {bool excludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeSemantics,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'properties': _i2.BuilderArg<_i20.SemanticsProperties>(
            name: 'properties',
            init: properties,
            isNamed: true,
          ),
          'container': _i2.BuilderArg<bool>(
            name: 'container',
            init: container,
            isNamed: true,
            defaultValue: false,
          ),
          'explicitChildNodes': _i2.BuilderArg<bool>(
            name: 'explicitChildNodes',
            init: explicitChildNodes,
            isNamed: true,
            defaultValue: false,
          ),
          'excludeSemantics': _i2.BuilderArg<bool>(
            name: 'excludeSemantics',
            init: excludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderSemanticsAnnotations';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderSemanticsAnnotations$Mate(
          child: p.get('child').build(),
          properties: p.get('properties').build(),
          container: p.get('container').build(),
          explicitChildNodes: p.get('explicitChildNodes').build(),
          excludeSemantics: p.get('excludeSemantics').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderBlockSemantics extends RenderProxyBox
class RenderBlockSemantics$Mate extends _i1.RenderBlockSemantics with _i2.Mate {
  /// RenderBlockSemantics RenderBlockSemantics({RenderBox? child, bool blocking = true})
  RenderBlockSemantics$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {bool blocking = true} , default:processed=BooleanLiteralImpl
    super.blocking,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'blocking': _i2.BuilderArg<bool>(
            name: 'blocking',
            init: blocking,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderBlockSemantics';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderBlockSemantics$Mate(
          child: p.get('child').build(),
          blocking: p.get('blocking').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderMergeSemantics extends RenderProxyBox
class RenderMergeSemantics$Mate extends _i1.RenderMergeSemantics with _i2.Mate {
  /// RenderMergeSemantics RenderMergeSemantics({RenderBox? child})
  RenderMergeSemantics$Mate(
      {
      /// optionalParameters: {RenderBox? child} , default:none
      super.child})
      : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'RenderMergeSemantics';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderMergeSemantics$Mate(child: p.get('child').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderExcludeSemantics extends RenderProxyBox
class RenderExcludeSemantics$Mate extends _i1.RenderExcludeSemantics with _i2.Mate {
  /// RenderExcludeSemantics RenderExcludeSemantics({RenderBox? child, bool excluding = true})
  RenderExcludeSemantics$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {bool excluding = true} , default:processed=BooleanLiteralImpl
    super.excluding,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'excluding': _i2.BuilderArg<bool>(
            name: 'excluding',
            init: excluding,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderExcludeSemantics';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderExcludeSemantics$Mate(
          child: p.get('child').build(),
          excluding: p.get('excluding').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderIndexedSemantics extends RenderProxyBox
class RenderIndexedSemantics$Mate extends _i1.RenderIndexedSemantics with _i2.Mate {
  /// RenderIndexedSemantics RenderIndexedSemantics({RenderBox? child, required int index})
  RenderIndexedSemantics$Mate({
    /// optionalParameters: {RenderBox? child} , default:none
    super.child,

    /// optionalParameters: {required int index} , default:none
    required super.index,
  })  : mateParams = {
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'index': _i2.BuilderArg<int>(
            name: 'index',
            init: index,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderIndexedSemantics';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderIndexedSemantics$Mate(
          child: p.get('child').build(),
          index: p.get('index').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderLeaderLayer extends RenderProxyBox
class RenderLeaderLayer$Mate extends _i1.RenderLeaderLayer with _i2.Mate {
  /// RenderLeaderLayer RenderLeaderLayer({required LayerLink link, RenderBox? child})
  RenderLeaderLayer$Mate({
    /// optionalParameters: {required LayerLink link} , default:none
    required super.link,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'link': _i2.BuilderArg<_i21.LayerLink>(
            name: 'link',
            init: link,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderLeaderLayer';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderLeaderLayer$Mate(
          link: p.get('link').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderFollowerLayer extends RenderProxyBox
class RenderFollowerLayer$Mate extends _i1.RenderFollowerLayer with _i2.Mate {
  /// RenderFollowerLayer RenderFollowerLayer({required LayerLink link, bool showWhenUnlinked = true, Offset offset = Offset.zero, Alignment leaderAnchor = Alignment.topLeft, Alignment followerAnchor = Alignment.topLeft, RenderBox? child})
  RenderFollowerLayer$Mate({
    /// optionalParameters: {required LayerLink link} , default:none
    required super.link,

    /// optionalParameters: {bool showWhenUnlinked = true} , default:processed=BooleanLiteralImpl
    super.showWhenUnlinked,

    /// optionalParameters: {Offset offset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    super.offset,

    /// optionalParameters: {Alignment leaderAnchor = Alignment.topLeft} , default:processed=PrefixedIdentifierImpl
    super.leaderAnchor,

    /// optionalParameters: {Alignment followerAnchor = Alignment.topLeft} , default:processed=PrefixedIdentifierImpl
    super.followerAnchor,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'link': _i2.BuilderArg<_i21.LayerLink>(
            name: 'link',
            init: link,
            isNamed: true,
          ),
          'showWhenUnlinked': _i2.BuilderArg<bool>(
            name: 'showWhenUnlinked',
            init: showWhenUnlinked,
            isNamed: true,
            defaultValue: true,
          ),
          'offset': _i2.BuilderArg<_i5.Offset>(
            name: 'offset',
            init: offset,
            isNamed: true,
            defaultValue: _i22.Offset.zero,
          ),
          'leaderAnchor': _i2.BuilderArg<_i13.Alignment>(
            name: 'leaderAnchor',
            init: leaderAnchor,
            isNamed: true,
            defaultValue: _i8.Alignment.topLeft,
          ),
          'followerAnchor': _i2.BuilderArg<_i13.Alignment>(
            name: 'followerAnchor',
            init: followerAnchor,
            isNamed: true,
            defaultValue: _i8.Alignment.topLeft,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderFollowerLayer';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderFollowerLayer$Mate(
          link: p.get('link').build(),
          showWhenUnlinked: p.get('showWhenUnlinked').build(),
          offset: p.get('offset').build(),
          leaderAnchor: p.get('leaderAnchor').build(),
          followerAnchor: p.get('followerAnchor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderAnnotatedRegion<T extends Object> extends RenderProxyBox
class RenderAnnotatedRegion$Mate<T extends Object> extends _i1.RenderAnnotatedRegion<T> with _i2.Mate {
  /// RenderAnnotatedRegion<T> RenderAnnotatedRegion({required T value, required bool sized, RenderBox? child})
  RenderAnnotatedRegion$Mate({
    /// optionalParameters: {required T value} , default:none
    required super.value,

    /// optionalParameters: {required bool sized} , default:none
    required super.sized,

    /// optionalParameters: {RenderBox? child} , default:none
    super.child,
  })  : mateParams = {
          'value': _i2.BuilderArg<T>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'sized': _i2.BuilderArg<bool>(
            name: 'sized',
            init: sized,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i3.RenderBox?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderAnnotatedRegion';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderAnnotatedRegion$Mate<T>(
          value: p.get('value').build(),
          sized: p.get('sized').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
