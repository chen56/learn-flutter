// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/table.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/rendering/table_border.dart';import 'package:flutter/src/painting/decoration.dart';import 'package:flutter/src/painting/image_provider.dart';import 'package:flutter/src/rendering/box.dart';import 'package:note/mate.dart' show Mate;/// class IntrinsicColumnWidth extends TableColumnWidth
class IntrinsicColumnWidth$Mate extends IntrinsicColumnWidth with Mate {/// IntrinsicColumnWidth IntrinsicColumnWidth({double? flex})
IntrinsicColumnWidth$Mate({/// optionalParameters: {double? flex} , hasDefaultValue:false, defaultValueCode:null
double? flex}) : super(flex: flex) { mateBuilder = (p) => IntrinsicColumnWidth$Mate(flex: p.get('flex').build());
matePut('flex', flex); }

 }
/// class FixedColumnWidth extends TableColumnWidth
class FixedColumnWidth$Mate extends FixedColumnWidth with Mate {/// FixedColumnWidth FixedColumnWidth(double value)
FixedColumnWidth$Mate(/// requiredParameters: double value 
double value) : super(value) { mateBuilder = (p) => FixedColumnWidth$Mate(p.get('value').value);
matePut('value', value); }

 }
/// class FractionColumnWidth extends TableColumnWidth
class FractionColumnWidth$Mate extends FractionColumnWidth with Mate {/// FractionColumnWidth FractionColumnWidth(double value)
FractionColumnWidth$Mate(/// requiredParameters: double value 
double value) : super(value) { mateBuilder = (p) => FractionColumnWidth$Mate(p.get('value').value);
matePut('value', value); }

 }
/// class FlexColumnWidth extends TableColumnWidth
class FlexColumnWidth$Mate extends FlexColumnWidth with Mate {/// FlexColumnWidth FlexColumnWidth([double value = 1.0])
FlexColumnWidth$Mate(/// requiredParameters: [double value = 1.0] 
double value) : super(value) { mateBuilder = (p) => FlexColumnWidth$Mate(p.get('value').value);
matePut('value', value); }

 }
/// class MaxColumnWidth extends TableColumnWidth
class MaxColumnWidth$Mate extends MaxColumnWidth with Mate {/// MaxColumnWidth MaxColumnWidth(TableColumnWidth a, TableColumnWidth b)
MaxColumnWidth$Mate(/// requiredParameters: TableColumnWidth a 
TableColumnWidth a, /// requiredParameters: TableColumnWidth b 
TableColumnWidth b, ) : super(a, b, ) { mateBuilder = (p) => MaxColumnWidth$Mate(p.get('a').value, p.get('b').value, );
matePut('a', a);
matePut('b', b); }

 }
/// class MinColumnWidth extends TableColumnWidth
class MinColumnWidth$Mate extends MinColumnWidth with Mate {/// MinColumnWidth MinColumnWidth(TableColumnWidth a, TableColumnWidth b)
MinColumnWidth$Mate(/// requiredParameters: TableColumnWidth a 
TableColumnWidth a, /// requiredParameters: TableColumnWidth b 
TableColumnWidth b, ) : super(a, b, ) { mateBuilder = (p) => MinColumnWidth$Mate(p.get('a').value, p.get('b').value, );
matePut('a', a);
matePut('b', b); }

 }
/// class RenderTable extends RenderBox
class RenderTable$Mate extends RenderTable with Mate {/// RenderTable RenderTable({int? columns, int? rows, Map<int, TableColumnWidth>? columnWidths, TableColumnWidth defaultColumnWidth = const FlexColumnWidth(), required TextDirection textDirection, TableBorder? border, List<Decoration?>? rowDecorations, ImageConfiguration configuration = ImageConfiguration.empty, TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top, TextBaseline? textBaseline, List<List<RenderBox>>? children})
RenderTable$Mate({/// optionalParameters: {int? columns} , hasDefaultValue:false, defaultValueCode:null
int? columns, /// optionalParameters: {int? rows} , hasDefaultValue:false, defaultValueCode:null
int? rows, /// optionalParameters: {Map<int, TableColumnWidth>? columnWidths} , hasDefaultValue:false, defaultValueCode:null
Map<int,TableColumnWidth>? columnWidths, /// optionalParameters: {TableColumnWidth defaultColumnWidth = const FlexColumnWidth()} , hasDefaultValue:true, defaultValueCode:const FlexColumnWidth()
required TableColumnWidth defaultColumnWidth, /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
required TextDirection textDirection, /// optionalParameters: {TableBorder? border} , hasDefaultValue:false, defaultValueCode:null
TableBorder? border, /// optionalParameters: {List<Decoration?>? rowDecorations} , hasDefaultValue:false, defaultValueCode:null
List<Decoration?>? rowDecorations, /// optionalParameters: {ImageConfiguration configuration = ImageConfiguration.empty} , hasDefaultValue:true, defaultValueCode:ImageConfiguration.empty
required ImageConfiguration configuration, /// optionalParameters: {TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top} , hasDefaultValue:true, defaultValueCode:TableCellVerticalAlignment.top
required TableCellVerticalAlignment defaultVerticalAlignment, /// optionalParameters: {TextBaseline? textBaseline} , hasDefaultValue:false, defaultValueCode:null
TextBaseline? textBaseline, /// optionalParameters: {List<List<RenderBox>>? children} , hasDefaultValue:false, defaultValueCode:null
List<List<RenderBox>>? children, }) : super(columns: columns, rows: rows, columnWidths: columnWidths, defaultColumnWidth: defaultColumnWidth, textDirection: textDirection, border: border, rowDecorations: rowDecorations, configuration: configuration, defaultVerticalAlignment: defaultVerticalAlignment, textBaseline: textBaseline, children: children, ) { mateBuilder = (p) => RenderTable$Mate(columns: p.get('columns').build(), rows: p.get('rows').build(), columnWidths: p.get('columnWidths').build(), defaultColumnWidth: p.get('defaultColumnWidth').build(), textDirection: p.get('textDirection').build(), border: p.get('border').build(), rowDecorations: p.get('rowDecorations').build(), configuration: p.get('configuration').build(), defaultVerticalAlignment: p.get('defaultVerticalAlignment').build(), textBaseline: p.get('textBaseline').build(), children: p.get('children').build(), );
matePut('columns', columns);
matePut('rows', rows);
matePut('columnWidths', columnWidths);
matePut('defaultColumnWidth', defaultColumnWidth);
matePut('textDirection', textDirection);
matePut('border', border);
matePut('rowDecorations', rowDecorations);
matePut('configuration', configuration);
matePut('defaultVerticalAlignment', defaultVerticalAlignment);
matePut('textBaseline', textBaseline);
matePut('children', children); }

 }
