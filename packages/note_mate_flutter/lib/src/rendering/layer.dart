// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/layer.dart';import 'dart:ui';import 'dart:core';import 'package:vector_math/vector_math_64.dart';import 'package:note/mate.dart' show Mate;/// class AnnotationEntry<T>
class AnnotationEntry$Mate<T> extends AnnotationEntry<T> with Mate {/// AnnotationEntry<T> AnnotationEntry({required T annotation, required Offset localPosition})
AnnotationEntry$Mate({/// optionalParameters: {required T annotation} , hasDefaultValue:false, defaultValueCode:null
required T annotation, /// optionalParameters: {required Offset localPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset localPosition, }) : super(annotation: annotation, localPosition: localPosition, ) { mateBuilder = (p) => AnnotationEntry$Mate<T>(annotation: p.get('annotation').build(), localPosition: p.get('localPosition').build(), );
matePut('annotation', annotation);
matePut('localPosition', localPosition); }

 }
/// class LayerHandle<T extends Layer>
class LayerHandle$Mate<T extends Layer> extends LayerHandle<T> with Mate {/// LayerHandle<T> LayerHandle([T? _layer])
LayerHandle$Mate(/// requiredParameters: [T? _layer] 
T? _layer) : super(_layer) { mateBuilder = (p) => LayerHandle$Mate<T>(p.get('_layer').value);
matePut('_layer', _layer); }

 }
/// class PictureLayer extends Layer
class PictureLayer$Mate extends PictureLayer with Mate {/// PictureLayer PictureLayer(Rect canvasBounds)
PictureLayer$Mate(/// requiredParameters: Rect canvasBounds 
Rect canvasBounds) : super(canvasBounds) { mateBuilder = (p) => PictureLayer$Mate(p.get('canvasBounds').value);
matePut('canvasBounds', canvasBounds); }

 }
/// class TextureLayer extends Layer
class TextureLayer$Mate extends TextureLayer with Mate {/// TextureLayer TextureLayer({required Rect rect, required int textureId, bool freeze = false, FilterQuality filterQuality = ui.FilterQuality.low})
TextureLayer$Mate({/// optionalParameters: {required Rect rect} , hasDefaultValue:false, defaultValueCode:null
required Rect rect, /// optionalParameters: {required int textureId} , hasDefaultValue:false, defaultValueCode:null
required int textureId, /// optionalParameters: {bool freeze = false} , hasDefaultValue:true, defaultValueCode:false
required bool freeze, /// optionalParameters: {FilterQuality filterQuality = ui.FilterQuality.low} , hasDefaultValue:true, defaultValueCode:ui.FilterQuality.low
required FilterQuality filterQuality, }) : super(rect: rect, textureId: textureId, freeze: freeze, filterQuality: filterQuality, ) { mateBuilder = (p) => TextureLayer$Mate(rect: p.get('rect').build(), textureId: p.get('textureId').build(), freeze: p.get('freeze').build(), filterQuality: p.get('filterQuality').build(), );
matePut('rect', rect);
matePut('textureId', textureId);
matePut('freeze', freeze);
matePut('filterQuality', filterQuality); }

 }
/// class PlatformViewLayer extends Layer
class PlatformViewLayer$Mate extends PlatformViewLayer with Mate {/// PlatformViewLayer PlatformViewLayer({required Rect rect, required int viewId})
PlatformViewLayer$Mate({/// optionalParameters: {required Rect rect} , hasDefaultValue:false, defaultValueCode:null
required Rect rect, /// optionalParameters: {required int viewId} , hasDefaultValue:false, defaultValueCode:null
required int viewId, }) : super(rect: rect, viewId: viewId, ) { mateBuilder = (p) => PlatformViewLayer$Mate(rect: p.get('rect').build(), viewId: p.get('viewId').build(), );
matePut('rect', rect);
matePut('viewId', viewId); }

 }
/// class PerformanceOverlayLayer extends Layer
class PerformanceOverlayLayer$Mate extends PerformanceOverlayLayer with Mate {/// PerformanceOverlayLayer PerformanceOverlayLayer({required Rect overlayRect, required int optionsMask, required int rasterizerThreshold, required bool checkerboardRasterCacheImages, required bool checkerboardOffscreenLayers})
PerformanceOverlayLayer$Mate({/// optionalParameters: {required Rect overlayRect} , hasDefaultValue:false, defaultValueCode:null
required Rect overlayRect, /// optionalParameters: {required int optionsMask} , hasDefaultValue:false, defaultValueCode:null
required int optionsMask, /// optionalParameters: {required int rasterizerThreshold} , hasDefaultValue:false, defaultValueCode:null
required int rasterizerThreshold, /// optionalParameters: {required bool checkerboardRasterCacheImages} , hasDefaultValue:false, defaultValueCode:null
required bool checkerboardRasterCacheImages, /// optionalParameters: {required bool checkerboardOffscreenLayers} , hasDefaultValue:false, defaultValueCode:null
required bool checkerboardOffscreenLayers, }) : super(overlayRect: overlayRect, optionsMask: optionsMask, rasterizerThreshold: rasterizerThreshold, checkerboardRasterCacheImages: checkerboardRasterCacheImages, checkerboardOffscreenLayers: checkerboardOffscreenLayers, ) { mateBuilder = (p) => PerformanceOverlayLayer$Mate(overlayRect: p.get('overlayRect').build(), optionsMask: p.get('optionsMask').build(), rasterizerThreshold: p.get('rasterizerThreshold').build(), checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(), checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(), );
matePut('overlayRect', overlayRect);
matePut('optionsMask', optionsMask);
matePut('rasterizerThreshold', rasterizerThreshold);
matePut('checkerboardRasterCacheImages', checkerboardRasterCacheImages);
matePut('checkerboardOffscreenLayers', checkerboardOffscreenLayers); }

 }
/// class OffsetLayer extends ContainerLayer
class OffsetLayer$Mate extends OffsetLayer with Mate {/// OffsetLayer OffsetLayer({Offset offset = Offset.zero})
OffsetLayer$Mate({/// optionalParameters: {Offset offset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset offset}) : super(offset: offset) { mateBuilder = (p) => OffsetLayer$Mate(offset: p.get('offset').build());
matePut('offset', offset); }

 }
/// class ClipRectLayer extends ContainerLayer
class ClipRectLayer$Mate extends ClipRectLayer with Mate {/// ClipRectLayer ClipRectLayer({Rect? clipRect, Clip clipBehavior = Clip.hardEdge})
ClipRectLayer$Mate({/// optionalParameters: {Rect? clipRect} , hasDefaultValue:false, defaultValueCode:null
Rect? clipRect, /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
required Clip clipBehavior, }) : super(clipRect: clipRect, clipBehavior: clipBehavior, ) { mateBuilder = (p) => ClipRectLayer$Mate(clipRect: p.get('clipRect').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('clipRect', clipRect);
matePut('clipBehavior', clipBehavior); }

 }
/// class ClipRRectLayer extends ContainerLayer
class ClipRRectLayer$Mate extends ClipRRectLayer with Mate {/// ClipRRectLayer ClipRRectLayer({RRect? clipRRect, Clip clipBehavior = Clip.antiAlias})
ClipRRectLayer$Mate({/// optionalParameters: {RRect? clipRRect} , hasDefaultValue:false, defaultValueCode:null
RRect? clipRRect, /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , hasDefaultValue:true, defaultValueCode:Clip.antiAlias
required Clip clipBehavior, }) : super(clipRRect: clipRRect, clipBehavior: clipBehavior, ) { mateBuilder = (p) => ClipRRectLayer$Mate(clipRRect: p.get('clipRRect').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('clipRRect', clipRRect);
matePut('clipBehavior', clipBehavior); }

 }
/// class ClipPathLayer extends ContainerLayer
class ClipPathLayer$Mate extends ClipPathLayer with Mate {/// ClipPathLayer ClipPathLayer({Path? clipPath, Clip clipBehavior = Clip.antiAlias})
ClipPathLayer$Mate({/// optionalParameters: {Path? clipPath} , hasDefaultValue:false, defaultValueCode:null
Path? clipPath, /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , hasDefaultValue:true, defaultValueCode:Clip.antiAlias
required Clip clipBehavior, }) : super(clipPath: clipPath, clipBehavior: clipBehavior, ) { mateBuilder = (p) => ClipPathLayer$Mate(clipPath: p.get('clipPath').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('clipPath', clipPath);
matePut('clipBehavior', clipBehavior); }

 }
/// class ColorFilterLayer extends ContainerLayer
class ColorFilterLayer$Mate extends ColorFilterLayer with Mate {/// ColorFilterLayer ColorFilterLayer({ColorFilter? colorFilter})
ColorFilterLayer$Mate({/// optionalParameters: {ColorFilter? colorFilter} , hasDefaultValue:false, defaultValueCode:null
ColorFilter? colorFilter}) : super(colorFilter: colorFilter) { mateBuilder = (p) => ColorFilterLayer$Mate(colorFilter: p.get('colorFilter').build());
matePut('colorFilter', colorFilter); }

 }
/// class ImageFilterLayer extends OffsetLayer
class ImageFilterLayer$Mate extends ImageFilterLayer with Mate {/// ImageFilterLayer ImageFilterLayer({ImageFilter? imageFilter, Offset offset = Offset.zero})
ImageFilterLayer$Mate({/// optionalParameters: {ImageFilter? imageFilter} , hasDefaultValue:false, defaultValueCode:null
ImageFilter? imageFilter, /// optionalParameters: {Offset offset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset offset, }) : super(imageFilter: imageFilter, offset: offset, ) { mateBuilder = (p) => ImageFilterLayer$Mate(imageFilter: p.get('imageFilter').build(), offset: p.get('offset').build(), );
matePut('imageFilter', imageFilter);
matePut('offset', offset); }

 }
/// class TransformLayer extends OffsetLayer
class TransformLayer$Mate extends TransformLayer with Mate {/// TransformLayer TransformLayer({Matrix4? transform, Offset offset = Offset.zero})
TransformLayer$Mate({/// optionalParameters: {Matrix4? transform} , hasDefaultValue:false, defaultValueCode:null
Matrix4? transform, /// optionalParameters: {Offset offset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset offset, }) : super(transform: transform, offset: offset, ) { mateBuilder = (p) => TransformLayer$Mate(transform: p.get('transform').build(), offset: p.get('offset').build(), );
matePut('transform', transform);
matePut('offset', offset); }

 }
/// class OpacityLayer extends OffsetLayer
class OpacityLayer$Mate extends OpacityLayer with Mate {/// OpacityLayer OpacityLayer({int? alpha, Offset offset = Offset.zero})
OpacityLayer$Mate({/// optionalParameters: {int? alpha} , hasDefaultValue:false, defaultValueCode:null
int? alpha, /// optionalParameters: {Offset offset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset offset, }) : super(alpha: alpha, offset: offset, ) { mateBuilder = (p) => OpacityLayer$Mate(alpha: p.get('alpha').build(), offset: p.get('offset').build(), );
matePut('alpha', alpha);
matePut('offset', offset); }

 }
/// class ShaderMaskLayer extends ContainerLayer
class ShaderMaskLayer$Mate extends ShaderMaskLayer with Mate {/// ShaderMaskLayer ShaderMaskLayer({Shader? shader, Rect? maskRect, BlendMode? blendMode})
ShaderMaskLayer$Mate({/// optionalParameters: {Shader? shader} , hasDefaultValue:false, defaultValueCode:null
Shader? shader, /// optionalParameters: {Rect? maskRect} , hasDefaultValue:false, defaultValueCode:null
Rect? maskRect, /// optionalParameters: {BlendMode? blendMode} , hasDefaultValue:false, defaultValueCode:null
BlendMode? blendMode, }) : super(shader: shader, maskRect: maskRect, blendMode: blendMode, ) { mateBuilder = (p) => ShaderMaskLayer$Mate(shader: p.get('shader').build(), maskRect: p.get('maskRect').build(), blendMode: p.get('blendMode').build(), );
matePut('shader', shader);
matePut('maskRect', maskRect);
matePut('blendMode', blendMode); }

 }
/// class BackdropFilterLayer extends ContainerLayer
class BackdropFilterLayer$Mate extends BackdropFilterLayer with Mate {/// BackdropFilterLayer BackdropFilterLayer({ImageFilter? filter, BlendMode blendMode = BlendMode.srcOver})
BackdropFilterLayer$Mate({/// optionalParameters: {ImageFilter? filter} , hasDefaultValue:false, defaultValueCode:null
ImageFilter? filter, /// optionalParameters: {BlendMode blendMode = BlendMode.srcOver} , hasDefaultValue:true, defaultValueCode:BlendMode.srcOver
required BlendMode blendMode, }) : super(filter: filter, blendMode: blendMode, ) { mateBuilder = (p) => BackdropFilterLayer$Mate(filter: p.get('filter').build(), blendMode: p.get('blendMode').build(), );
matePut('filter', filter);
matePut('blendMode', blendMode); }

 }
/// class PhysicalModelLayer extends ContainerLayer
class PhysicalModelLayer$Mate extends PhysicalModelLayer with Mate {/// PhysicalModelLayer PhysicalModelLayer({Path? clipPath, Clip clipBehavior = Clip.none, double? elevation, Color? color, Color? shadowColor})
PhysicalModelLayer$Mate({/// optionalParameters: {Path? clipPath} , hasDefaultValue:false, defaultValueCode:null
Path? clipPath, /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
required Clip clipBehavior, /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
double? elevation, /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
Color? color, /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
Color? shadowColor, }) : super(clipPath: clipPath, clipBehavior: clipBehavior, elevation: elevation, color: color, shadowColor: shadowColor, ) { mateBuilder = (p) => PhysicalModelLayer$Mate(clipPath: p.get('clipPath').build(), clipBehavior: p.get('clipBehavior').build(), elevation: p.get('elevation').build(), color: p.get('color').build(), shadowColor: p.get('shadowColor').build(), );
matePut('clipPath', clipPath);
matePut('clipBehavior', clipBehavior);
matePut('elevation', elevation);
matePut('color', color);
matePut('shadowColor', shadowColor); }

 }
/// class LeaderLayer extends ContainerLayer
class LeaderLayer$Mate extends LeaderLayer with Mate {/// LeaderLayer LeaderLayer({required LayerLink link, Offset offset = Offset.zero})
LeaderLayer$Mate({/// optionalParameters: {required LayerLink link} , hasDefaultValue:false, defaultValueCode:null
required LayerLink link, /// optionalParameters: {Offset offset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset offset, }) : super(link: link, offset: offset, ) { mateBuilder = (p) => LeaderLayer$Mate(link: p.get('link').build(), offset: p.get('offset').build(), );
matePut('link', link);
matePut('offset', offset); }

 }
/// class FollowerLayer extends ContainerLayer
class FollowerLayer$Mate extends FollowerLayer with Mate {/// FollowerLayer FollowerLayer({required LayerLink link, bool? showWhenUnlinked = true, Offset? unlinkedOffset = Offset.zero, Offset? linkedOffset = Offset.zero})
FollowerLayer$Mate({/// optionalParameters: {required LayerLink link} , hasDefaultValue:false, defaultValueCode:null
required LayerLink link, /// optionalParameters: {bool? showWhenUnlinked = true} , hasDefaultValue:true, defaultValueCode:true
bool? showWhenUnlinked, /// optionalParameters: {Offset? unlinkedOffset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
Offset? unlinkedOffset, /// optionalParameters: {Offset? linkedOffset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
Offset? linkedOffset, }) : super(link: link, showWhenUnlinked: showWhenUnlinked, unlinkedOffset: unlinkedOffset, linkedOffset: linkedOffset, ) { mateBuilder = (p) => FollowerLayer$Mate(link: p.get('link').build(), showWhenUnlinked: p.get('showWhenUnlinked').build(), unlinkedOffset: p.get('unlinkedOffset').build(), linkedOffset: p.get('linkedOffset').build(), );
matePut('link', link);
matePut('showWhenUnlinked', showWhenUnlinked);
matePut('unlinkedOffset', unlinkedOffset);
matePut('linkedOffset', linkedOffset); }

 }
/// class AnnotatedRegionLayer<T extends Object> extends ContainerLayer
class AnnotatedRegionLayer$Mate<T extends Object> extends AnnotatedRegionLayer<T> with Mate {/// AnnotatedRegionLayer<T> AnnotatedRegionLayer(T value, {Size? size, Offset? offset, bool opaque = false})
AnnotatedRegionLayer$Mate(/// requiredParameters: T value 
T value, {/// optionalParameters: {Size? size} , hasDefaultValue:false, defaultValueCode:null
Size? size, /// optionalParameters: {Offset? offset} , hasDefaultValue:false, defaultValueCode:null
Offset? offset, /// optionalParameters: {bool opaque = false} , hasDefaultValue:true, defaultValueCode:false
required bool opaque, }) : super(value, size: size, offset: offset, opaque: opaque, ) { mateBuilder = (p) => AnnotatedRegionLayer$Mate<T>(p.get('value').value, size: p.get('size').build(), offset: p.get('offset').build(), opaque: p.get('opaque').build(), );
matePut('value', value);
matePut('size', size);
matePut('offset', offset);
matePut('opaque', opaque); }

 }
