// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/custom_paint.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/semantics/semantics.dart' as _i5;
import 'package:vector_math/vector_math_64.dart' as _i6;
import 'package:flutter/animation.dart' as _i7;
import 'package:flutter/src/rendering/box.dart' as _i8;

/// class CustomPainterSemantics
class CustomPainterSemantics$Mate extends _i1.CustomPainterSemantics with _i2.Mate {
  /// CustomPainterSemantics CustomPainterSemantics({Key? key, required Rect rect, required SemanticsProperties properties, Matrix4? transform, Set<SemanticsTag>? tags})
  CustomPainterSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Rect rect} , default:none
    required _i4.Rect rect,

    /// optionalParameters: {required SemanticsProperties properties} , default:none
    required _i5.SemanticsProperties properties,

    /// optionalParameters: {Matrix4? transform} , default:none
    _i6.Matrix4? transform,

    /// optionalParameters: {Set<SemanticsTag>? tags} , default:none
    Set<_i5.SemanticsTag>? tags,
  }) : super(
          key: key,
          rect: rect,
          properties: properties,
          transform: transform,
          tags: tags,
        ) {
    mateBuilderName = 'CustomPainterSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CustomPainterSemantics$Mate(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          properties: p.get('properties').build(),
          transform: p.get('transform').build(),
          tags: p.get('tags').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'rect',
      rect,
      isNamed: true,
    );
    mateUse(
      'properties',
      properties,
      isNamed: true,
    );
    mateUse(
      'transform',
      transform,
      isNamed: true,
    );
    mateUse(
      'tags',
      tags,
      isNamed: true,
    );
  }
}

/// class RenderCustomPaint extends RenderProxyBox
class RenderCustomPaint$Mate extends _i1.RenderCustomPaint with _i2.Mate {
  /// RenderCustomPaint RenderCustomPaint({CustomPainter? painter, CustomPainter? foregroundPainter, Size preferredSize = Size.zero, bool isComplex = false, bool willChange = false, RenderBox? child})
  RenderCustomPaint$Mate({
    /// optionalParameters: {CustomPainter? painter} , default:none
    _i1.CustomPainter? painter,

    /// optionalParameters: {CustomPainter? foregroundPainter} , default:none
    _i1.CustomPainter? foregroundPainter,

    /// optionalParameters: {Size preferredSize = Size.zero} , default:processed=PrefixedIdentifierImpl
    _i4.Size preferredSize = _i7.Size.zero,

    /// optionalParameters: {bool isComplex = false} , default:processed=BooleanLiteralImpl
    bool isComplex = false,

    /// optionalParameters: {bool willChange = false} , default:processed=BooleanLiteralImpl
    bool willChange = false,

    /// optionalParameters: {RenderBox? child} , default:none
    _i8.RenderBox? child,
  }) : super(
          painter: painter,
          foregroundPainter: foregroundPainter,
          preferredSize: preferredSize,
          isComplex: isComplex,
          willChange: willChange,
          child: child,
        ) {
    mateBuilderName = 'RenderCustomPaint';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderCustomPaint$Mate(
          painter: p.get('painter').build(),
          foregroundPainter: p.get('foregroundPainter').build(),
          preferredSize: p.get('preferredSize').build(),
          isComplex: p.get('isComplex').build(),
          willChange: p.get('willChange').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'painter',
      painter,
      isNamed: true,
    );
    mateUse(
      'foregroundPainter',
      foregroundPainter,
      isNamed: true,
    );
    mateUse(
      'preferredSize',
      preferredSize,
      isNamed: true,
      defaultValue: _i7.Size.zero,
    );
    mateUse(
      'isComplex',
      isComplex,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'willChange',
      willChange,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
