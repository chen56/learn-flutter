// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/object.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'dart:ui';
import 'package:flutter/src/semantics/semantics.dart';
import 'dart:core';
export 'package:flutter/painting.dart';

/// class PaintingContext extends ClipContext
class PaintingContext$Mate extends PaintingContext with Mate {
  /// PaintingContext PaintingContext(ContainerLayer _containerLayer, Rect estimatedBounds)
  PaintingContext$Mate(
    /// requiredParameters: ContainerLayer _containerLayer
    ContainerLayer _containerLayer,

    /// requiredParameters: Rect estimatedBounds
    Rect estimatedBounds,
  ) : super(
          _containerLayer,
          estimatedBounds,
        ) {
    mateBuilder = (p) => PaintingContext$Mate(
          p.get('_containerLayer').value,
          p.get('estimatedBounds').value,
        );
    mateDeclare('_containerLayer', _containerLayer);
    mateDeclare('estimatedBounds', estimatedBounds);
  }
}

/// class PipelineOwner
class PipelineOwner$Mate extends PipelineOwner with Mate {
  /// PipelineOwner PipelineOwner({void Function()? onNeedVisualUpdate, void Function()? onSemanticsOwnerCreated, void Function(SemanticsUpdate)? onSemanticsUpdate, void Function()? onSemanticsOwnerDisposed})
  PipelineOwner$Mate({
    /// optionalParameters: {void Function()? onNeedVisualUpdate} , defaultValue:none
    VoidCallback? onNeedVisualUpdate,

    /// optionalParameters: {void Function()? onSemanticsOwnerCreated} , defaultValue:none
    VoidCallback? onSemanticsOwnerCreated,

    /// optionalParameters: {void Function(SemanticsUpdate)? onSemanticsUpdate} , defaultValue:none
    SemanticsUpdateCallback? onSemanticsUpdate,

    /// optionalParameters: {void Function()? onSemanticsOwnerDisposed} , defaultValue:none
    VoidCallback? onSemanticsOwnerDisposed,
  }) : super(
          onNeedVisualUpdate: onNeedVisualUpdate,
          onSemanticsOwnerCreated: onSemanticsOwnerCreated,
          onSemanticsUpdate: onSemanticsUpdate,
          onSemanticsOwnerDisposed: onSemanticsOwnerDisposed,
        ) {
    mateBuilder = (p) => PipelineOwner$Mate(
          onNeedVisualUpdate: p.get('onNeedVisualUpdate').build(),
          onSemanticsOwnerCreated: p.get('onSemanticsOwnerCreated').build(),
          onSemanticsUpdate: p.get('onSemanticsUpdate').build(),
          onSemanticsOwnerDisposed: p.get('onSemanticsOwnerDisposed').build(),
        );
    mateDeclare('onNeedVisualUpdate', onNeedVisualUpdate);
    mateDeclare('onSemanticsOwnerCreated', onSemanticsOwnerCreated);
    mateDeclare('onSemanticsUpdate', onSemanticsUpdate);
    mateDeclare('onSemanticsOwnerDisposed', onSemanticsOwnerDisposed);
  }
}

/// class DiagnosticsDebugCreator extends DiagnosticsProperty<Object>
class DiagnosticsDebugCreator$Mate extends DiagnosticsDebugCreator with Mate {
  /// DiagnosticsDebugCreator DiagnosticsDebugCreator(Object value)
  DiagnosticsDebugCreator$Mate(

      /// requiredParameters: Object value
      Object value)
      : super(value) {
    mateBuilder = (p) => DiagnosticsDebugCreator$Mate(p.get('value').value);
    mateDeclare('value', value);
  }
}
