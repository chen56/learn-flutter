// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/sliver_persistent_header.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/basic_types.dart' as _i3;
import 'package:flutter/src/animation/curves.dart' as _i4;
import 'package:flutter/animation.dart' as _i5;

/// class OverScrollHeaderStretchConfiguration
class OverScrollHeaderStretchConfiguration$Mate extends _i1.OverScrollHeaderStretchConfiguration with _i2.Mate {
  /// OverScrollHeaderStretchConfiguration OverScrollHeaderStretchConfiguration({double stretchTriggerOffset = 100.0, Future<void> Function()? onStretchTrigger})
  OverScrollHeaderStretchConfiguration$Mate({
    /// optionalParameters: {double stretchTriggerOffset = 100.0} , default:processed=DoubleLiteralImpl
    double stretchTriggerOffset = 100.0,

    /// optionalParameters: {Future<void> Function()? onStretchTrigger} , default:none
    _i3.AsyncCallback? onStretchTrigger,
  }) : super(
          stretchTriggerOffset: stretchTriggerOffset,
          onStretchTrigger: onStretchTrigger,
        ) {
    mateBuilderName = 'OverScrollHeaderStretchConfiguration';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => OverScrollHeaderStretchConfiguration$Mate(
          stretchTriggerOffset: p.get('stretchTriggerOffset').build(),
          onStretchTrigger: p.get('onStretchTrigger').build(),
        );
    mateUse(
      'stretchTriggerOffset',
      stretchTriggerOffset,
      isNamed: true,
      defaultValue: 100.0,
    );
    mateUse(
      'onStretchTrigger',
      onStretchTrigger,
      isNamed: true,
    );
  }
}

/// class PersistentHeaderShowOnScreenConfiguration
class PersistentHeaderShowOnScreenConfiguration$Mate extends _i1.PersistentHeaderShowOnScreenConfiguration
    with _i2.Mate {
  /// PersistentHeaderShowOnScreenConfiguration PersistentHeaderShowOnScreenConfiguration({double minShowOnScreenExtent = double.negativeInfinity, double maxShowOnScreenExtent = double.infinity})
  PersistentHeaderShowOnScreenConfiguration$Mate({
    /// optionalParameters: {double minShowOnScreenExtent = double.negativeInfinity} , default:processed=PrefixedIdentifierImpl
    double minShowOnScreenExtent = double.negativeInfinity,

    /// optionalParameters: {double maxShowOnScreenExtent = double.infinity} , default:processed=PrefixedIdentifierImpl
    double maxShowOnScreenExtent = double.infinity,
  }) : super(
          minShowOnScreenExtent: minShowOnScreenExtent,
          maxShowOnScreenExtent: maxShowOnScreenExtent,
        ) {
    mateBuilderName = 'PersistentHeaderShowOnScreenConfiguration';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => PersistentHeaderShowOnScreenConfiguration$Mate(
          minShowOnScreenExtent: p.get('minShowOnScreenExtent').build(),
          maxShowOnScreenExtent: p.get('maxShowOnScreenExtent').build(),
        );
    mateUse(
      'minShowOnScreenExtent',
      minShowOnScreenExtent,
      isNamed: true,
      defaultValue: double.negativeInfinity,
    );
    mateUse(
      'maxShowOnScreenExtent',
      maxShowOnScreenExtent,
      isNamed: true,
      defaultValue: double.infinity,
    );
  }
}

/// class FloatingHeaderSnapConfiguration
class FloatingHeaderSnapConfiguration$Mate extends _i1.FloatingHeaderSnapConfiguration with _i2.Mate {
  /// FloatingHeaderSnapConfiguration FloatingHeaderSnapConfiguration({Curve curve = Curves.ease, Duration duration = const Duration(milliseconds: 300)})
  FloatingHeaderSnapConfiguration$Mate({
    /// optionalParameters: {Curve curve = Curves.ease} , default:processed=PrefixedIdentifierImpl
    _i4.Curve curve = _i5.Curves.ease,

    /// optionalParameters: {Duration duration = const Duration(milliseconds: 300)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration duration,
  }) : super(
          curve: curve,
          duration: duration,
        ) {
    mateBuilderName = 'FloatingHeaderSnapConfiguration';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => FloatingHeaderSnapConfiguration$Mate(
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
        );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: _i5.Curves.ease,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
  }
}
