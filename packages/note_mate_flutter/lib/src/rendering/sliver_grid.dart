// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/sliver_grid.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/rendering/sliver_multi_box_adaptor.dart';

/// class SliverGridGeometry
class SliverGridGeometry$Mate extends SliverGridGeometry with Mate {
  /// SliverGridGeometry SliverGridGeometry({required double scrollOffset, required double crossAxisOffset, required double mainAxisExtent, required double crossAxisExtent})
  SliverGridGeometry$Mate({
    /// optionalParameters: {required double scrollOffset} , defaultValue:none
    required double scrollOffset,

    /// optionalParameters: {required double crossAxisOffset} , defaultValue:none
    required double crossAxisOffset,

    /// optionalParameters: {required double mainAxisExtent} , defaultValue:none
    required double mainAxisExtent,

    /// optionalParameters: {required double crossAxisExtent} , defaultValue:none
    required double crossAxisExtent,
  }) : super(
          scrollOffset: scrollOffset,
          crossAxisOffset: crossAxisOffset,
          mainAxisExtent: mainAxisExtent,
          crossAxisExtent: crossAxisExtent,
        ) {
    mateBuilder = (p) => SliverGridGeometry$Mate(
          scrollOffset: p.get('scrollOffset').build(),
          crossAxisOffset: p.get('crossAxisOffset').build(),
          mainAxisExtent: p.get('mainAxisExtent').build(),
          crossAxisExtent: p.get('crossAxisExtent').build(),
        );
    mateDeclare('scrollOffset', scrollOffset);
    mateDeclare('crossAxisOffset', crossAxisOffset);
    mateDeclare('mainAxisExtent', mainAxisExtent);
    mateDeclare('crossAxisExtent', crossAxisExtent);
  }
}

/// class SliverGridRegularTileLayout extends SliverGridLayout
class SliverGridRegularTileLayout$Mate extends SliverGridRegularTileLayout with Mate {
  /// SliverGridRegularTileLayout SliverGridRegularTileLayout({required int crossAxisCount, required double mainAxisStride, required double crossAxisStride, required double childMainAxisExtent, required double childCrossAxisExtent, required bool reverseCrossAxis})
  SliverGridRegularTileLayout$Mate({
    /// optionalParameters: {required int crossAxisCount} , defaultValue:none
    required int crossAxisCount,

    /// optionalParameters: {required double mainAxisStride} , defaultValue:none
    required double mainAxisStride,

    /// optionalParameters: {required double crossAxisStride} , defaultValue:none
    required double crossAxisStride,

    /// optionalParameters: {required double childMainAxisExtent} , defaultValue:none
    required double childMainAxisExtent,

    /// optionalParameters: {required double childCrossAxisExtent} , defaultValue:none
    required double childCrossAxisExtent,

    /// optionalParameters: {required bool reverseCrossAxis} , defaultValue:none
    required bool reverseCrossAxis,
  }) : super(
          crossAxisCount: crossAxisCount,
          mainAxisStride: mainAxisStride,
          crossAxisStride: crossAxisStride,
          childMainAxisExtent: childMainAxisExtent,
          childCrossAxisExtent: childCrossAxisExtent,
          reverseCrossAxis: reverseCrossAxis,
        ) {
    mateBuilder = (p) => SliverGridRegularTileLayout$Mate(
          crossAxisCount: p.get('crossAxisCount').build(),
          mainAxisStride: p.get('mainAxisStride').build(),
          crossAxisStride: p.get('crossAxisStride').build(),
          childMainAxisExtent: p.get('childMainAxisExtent').build(),
          childCrossAxisExtent: p.get('childCrossAxisExtent').build(),
          reverseCrossAxis: p.get('reverseCrossAxis').build(),
        );
    mateDeclare('crossAxisCount', crossAxisCount);
    mateDeclare('mainAxisStride', mainAxisStride);
    mateDeclare('crossAxisStride', crossAxisStride);
    mateDeclare('childMainAxisExtent', childMainAxisExtent);
    mateDeclare('childCrossAxisExtent', childCrossAxisExtent);
    mateDeclare('reverseCrossAxis', reverseCrossAxis);
  }
}

/// class SliverGridDelegateWithFixedCrossAxisCount extends SliverGridDelegate
class SliverGridDelegateWithFixedCrossAxisCount$Mate extends SliverGridDelegateWithFixedCrossAxisCount with Mate {
  /// SliverGridDelegateWithFixedCrossAxisCount SliverGridDelegateWithFixedCrossAxisCount({required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, double? mainAxisExtent})
  SliverGridDelegateWithFixedCrossAxisCount$Mate({
    /// optionalParameters: {required int crossAxisCount} , defaultValue:none
    required int crossAxisCount,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , defaultValue:Literal
    double mainAxisSpacing = 0.0,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , defaultValue:Literal
    double crossAxisSpacing = 0.0,

    /// optionalParameters: {double childAspectRatio = 1.0} , defaultValue:Literal
    double childAspectRatio = 1.0,

    /// optionalParameters: {double? mainAxisExtent} , defaultValue:none
    double? mainAxisExtent,
  }) : super(
          crossAxisCount: crossAxisCount,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          mainAxisExtent: mainAxisExtent,
        ) {
    mateBuilder = (p) => SliverGridDelegateWithFixedCrossAxisCount$Mate(
          crossAxisCount: p.get('crossAxisCount').build(),
          mainAxisSpacing: p.get('mainAxisSpacing').build(),
          crossAxisSpacing: p.get('crossAxisSpacing').build(),
          childAspectRatio: p.get('childAspectRatio').build(),
          mainAxisExtent: p.get('mainAxisExtent').build(),
        );
    mateDeclare('crossAxisCount', crossAxisCount);
    mateDeclare('mainAxisSpacing', mainAxisSpacing);
    mateDeclare('crossAxisSpacing', crossAxisSpacing);
    mateDeclare('childAspectRatio', childAspectRatio);
    mateDeclare('mainAxisExtent', mainAxisExtent);
  }
}

/// class SliverGridDelegateWithMaxCrossAxisExtent extends SliverGridDelegate
class SliverGridDelegateWithMaxCrossAxisExtent$Mate extends SliverGridDelegateWithMaxCrossAxisExtent with Mate {
  /// SliverGridDelegateWithMaxCrossAxisExtent SliverGridDelegateWithMaxCrossAxisExtent({required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, double? mainAxisExtent})
  SliverGridDelegateWithMaxCrossAxisExtent$Mate({
    /// optionalParameters: {required double maxCrossAxisExtent} , defaultValue:none
    required double maxCrossAxisExtent,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , defaultValue:Literal
    double mainAxisSpacing = 0.0,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , defaultValue:Literal
    double crossAxisSpacing = 0.0,

    /// optionalParameters: {double childAspectRatio = 1.0} , defaultValue:Literal
    double childAspectRatio = 1.0,

    /// optionalParameters: {double? mainAxisExtent} , defaultValue:none
    double? mainAxisExtent,
  }) : super(
          maxCrossAxisExtent: maxCrossAxisExtent,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          mainAxisExtent: mainAxisExtent,
        ) {
    mateBuilder = (p) => SliverGridDelegateWithMaxCrossAxisExtent$Mate(
          maxCrossAxisExtent: p.get('maxCrossAxisExtent').build(),
          mainAxisSpacing: p.get('mainAxisSpacing').build(),
          crossAxisSpacing: p.get('crossAxisSpacing').build(),
          childAspectRatio: p.get('childAspectRatio').build(),
          mainAxisExtent: p.get('mainAxisExtent').build(),
        );
    mateDeclare('maxCrossAxisExtent', maxCrossAxisExtent);
    mateDeclare('mainAxisSpacing', mainAxisSpacing);
    mateDeclare('crossAxisSpacing', crossAxisSpacing);
    mateDeclare('childAspectRatio', childAspectRatio);
    mateDeclare('mainAxisExtent', mainAxisExtent);
  }
}

/// class RenderSliverGrid extends RenderSliverMultiBoxAdaptor
class RenderSliverGrid$Mate extends RenderSliverGrid with Mate {
  /// RenderSliverGrid RenderSliverGrid({required RenderSliverBoxChildManager childManager, required SliverGridDelegate gridDelegate})
  RenderSliverGrid$Mate({
    /// optionalParameters: {required RenderSliverBoxChildManager childManager} , defaultValue:none
    required RenderSliverBoxChildManager childManager,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , defaultValue:none
    required SliverGridDelegate gridDelegate,
  }) : super(
          childManager: childManager,
          gridDelegate: gridDelegate,
        ) {
    mateBuilder = (p) => RenderSliverGrid$Mate(
          childManager: p.get('childManager').build(),
          gridDelegate: p.get('gridDelegate').build(),
        );
    mateDeclare('childManager', childManager);
    mateDeclare('gridDelegate', gridDelegate);
  }
}
