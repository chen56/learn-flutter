// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/sliver_grid.dart';import 'dart:core';import 'package:flutter/src/rendering/sliver_multi_box_adaptor.dart';import 'package:note/mate.dart' show Mate;/// class SliverGridGeometry
class SliverGridGeometry$Mate extends SliverGridGeometry with Mate {/// SliverGridGeometry SliverGridGeometry({required double scrollOffset, required double crossAxisOffset, required double mainAxisExtent, required double crossAxisExtent})
SliverGridGeometry$Mate({/// optionalParameters: {required double scrollOffset} , hasDefaultValue:false, defaultValueCode:null
required double scrollOffset, /// optionalParameters: {required double crossAxisOffset} , hasDefaultValue:false, defaultValueCode:null
required double crossAxisOffset, /// optionalParameters: {required double mainAxisExtent} , hasDefaultValue:false, defaultValueCode:null
required double mainAxisExtent, /// optionalParameters: {required double crossAxisExtent} , hasDefaultValue:false, defaultValueCode:null
required double crossAxisExtent, }) : super(scrollOffset: scrollOffset, crossAxisOffset: crossAxisOffset, mainAxisExtent: mainAxisExtent, crossAxisExtent: crossAxisExtent, ) { mateBuilder = (p) => SliverGridGeometry$Mate(scrollOffset: p.get('scrollOffset').build(), crossAxisOffset: p.get('crossAxisOffset').build(), mainAxisExtent: p.get('mainAxisExtent').build(), crossAxisExtent: p.get('crossAxisExtent').build(), );
matePut('scrollOffset', scrollOffset);
matePut('crossAxisOffset', crossAxisOffset);
matePut('mainAxisExtent', mainAxisExtent);
matePut('crossAxisExtent', crossAxisExtent); }

 }
/// class SliverGridRegularTileLayout extends SliverGridLayout
class SliverGridRegularTileLayout$Mate extends SliverGridRegularTileLayout with Mate {/// SliverGridRegularTileLayout SliverGridRegularTileLayout({required int crossAxisCount, required double mainAxisStride, required double crossAxisStride, required double childMainAxisExtent, required double childCrossAxisExtent, required bool reverseCrossAxis})
SliverGridRegularTileLayout$Mate({/// optionalParameters: {required int crossAxisCount} , hasDefaultValue:false, defaultValueCode:null
required int crossAxisCount, /// optionalParameters: {required double mainAxisStride} , hasDefaultValue:false, defaultValueCode:null
required double mainAxisStride, /// optionalParameters: {required double crossAxisStride} , hasDefaultValue:false, defaultValueCode:null
required double crossAxisStride, /// optionalParameters: {required double childMainAxisExtent} , hasDefaultValue:false, defaultValueCode:null
required double childMainAxisExtent, /// optionalParameters: {required double childCrossAxisExtent} , hasDefaultValue:false, defaultValueCode:null
required double childCrossAxisExtent, /// optionalParameters: {required bool reverseCrossAxis} , hasDefaultValue:false, defaultValueCode:null
required bool reverseCrossAxis, }) : super(crossAxisCount: crossAxisCount, mainAxisStride: mainAxisStride, crossAxisStride: crossAxisStride, childMainAxisExtent: childMainAxisExtent, childCrossAxisExtent: childCrossAxisExtent, reverseCrossAxis: reverseCrossAxis, ) { mateBuilder = (p) => SliverGridRegularTileLayout$Mate(crossAxisCount: p.get('crossAxisCount').build(), mainAxisStride: p.get('mainAxisStride').build(), crossAxisStride: p.get('crossAxisStride').build(), childMainAxisExtent: p.get('childMainAxisExtent').build(), childCrossAxisExtent: p.get('childCrossAxisExtent').build(), reverseCrossAxis: p.get('reverseCrossAxis').build(), );
matePut('crossAxisCount', crossAxisCount);
matePut('mainAxisStride', mainAxisStride);
matePut('crossAxisStride', crossAxisStride);
matePut('childMainAxisExtent', childMainAxisExtent);
matePut('childCrossAxisExtent', childCrossAxisExtent);
matePut('reverseCrossAxis', reverseCrossAxis); }

 }
/// class SliverGridDelegateWithFixedCrossAxisCount extends SliverGridDelegate
class SliverGridDelegateWithFixedCrossAxisCount$Mate extends SliverGridDelegateWithFixedCrossAxisCount with Mate {/// SliverGridDelegateWithFixedCrossAxisCount SliverGridDelegateWithFixedCrossAxisCount({required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, double? mainAxisExtent})
SliverGridDelegateWithFixedCrossAxisCount$Mate({/// optionalParameters: {required int crossAxisCount} , hasDefaultValue:false, defaultValueCode:null
required int crossAxisCount, /// optionalParameters: {double mainAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double mainAxisSpacing, /// optionalParameters: {double crossAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double crossAxisSpacing, /// optionalParameters: {double childAspectRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
required double childAspectRatio, /// optionalParameters: {double? mainAxisExtent} , hasDefaultValue:false, defaultValueCode:null
double? mainAxisExtent, }) : super(crossAxisCount: crossAxisCount, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, mainAxisExtent: mainAxisExtent, ) { mateBuilder = (p) => SliverGridDelegateWithFixedCrossAxisCount$Mate(crossAxisCount: p.get('crossAxisCount').build(), mainAxisSpacing: p.get('mainAxisSpacing').build(), crossAxisSpacing: p.get('crossAxisSpacing').build(), childAspectRatio: p.get('childAspectRatio').build(), mainAxisExtent: p.get('mainAxisExtent').build(), );
matePut('crossAxisCount', crossAxisCount);
matePut('mainAxisSpacing', mainAxisSpacing);
matePut('crossAxisSpacing', crossAxisSpacing);
matePut('childAspectRatio', childAspectRatio);
matePut('mainAxisExtent', mainAxisExtent); }

 }
/// class SliverGridDelegateWithMaxCrossAxisExtent extends SliverGridDelegate
class SliverGridDelegateWithMaxCrossAxisExtent$Mate extends SliverGridDelegateWithMaxCrossAxisExtent with Mate {/// SliverGridDelegateWithMaxCrossAxisExtent SliverGridDelegateWithMaxCrossAxisExtent({required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, double? mainAxisExtent})
SliverGridDelegateWithMaxCrossAxisExtent$Mate({/// optionalParameters: {required double maxCrossAxisExtent} , hasDefaultValue:false, defaultValueCode:null
required double maxCrossAxisExtent, /// optionalParameters: {double mainAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double mainAxisSpacing, /// optionalParameters: {double crossAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double crossAxisSpacing, /// optionalParameters: {double childAspectRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
required double childAspectRatio, /// optionalParameters: {double? mainAxisExtent} , hasDefaultValue:false, defaultValueCode:null
double? mainAxisExtent, }) : super(maxCrossAxisExtent: maxCrossAxisExtent, mainAxisSpacing: mainAxisSpacing, crossAxisSpacing: crossAxisSpacing, childAspectRatio: childAspectRatio, mainAxisExtent: mainAxisExtent, ) { mateBuilder = (p) => SliverGridDelegateWithMaxCrossAxisExtent$Mate(maxCrossAxisExtent: p.get('maxCrossAxisExtent').build(), mainAxisSpacing: p.get('mainAxisSpacing').build(), crossAxisSpacing: p.get('crossAxisSpacing').build(), childAspectRatio: p.get('childAspectRatio').build(), mainAxisExtent: p.get('mainAxisExtent').build(), );
matePut('maxCrossAxisExtent', maxCrossAxisExtent);
matePut('mainAxisSpacing', mainAxisSpacing);
matePut('crossAxisSpacing', crossAxisSpacing);
matePut('childAspectRatio', childAspectRatio);
matePut('mainAxisExtent', mainAxisExtent); }

 }
/// class RenderSliverGrid extends RenderSliverMultiBoxAdaptor
class RenderSliverGrid$Mate extends RenderSliverGrid with Mate {/// RenderSliverGrid RenderSliverGrid({required RenderSliverBoxChildManager childManager, required SliverGridDelegate gridDelegate})
RenderSliverGrid$Mate({/// optionalParameters: {required RenderSliverBoxChildManager childManager} , hasDefaultValue:false, defaultValueCode:null
required RenderSliverBoxChildManager childManager, /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
required SliverGridDelegate gridDelegate, }) : super(childManager: childManager, gridDelegate: gridDelegate, ) { mateBuilder = (p) => RenderSliverGrid$Mate(childManager: p.get('childManager').build(), gridDelegate: p.get('gridDelegate').build(), );
matePut('childManager', childManager);
matePut('gridDelegate', gridDelegate); }

 }
