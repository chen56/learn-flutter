// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/sliver.dart';import 'package:flutter/src/painting/basic_types.dart';import 'package:flutter/src/rendering/viewport_offset.dart';import 'dart:core';import 'package:flutter/src/gestures/hit_test.dart';import 'package:flutter/src/rendering/box.dart';import 'package:note/mate.dart' show Mate;/// class SliverConstraints extends Constraints
class SliverConstraints$Mate extends SliverConstraints with Mate {/// SliverConstraints SliverConstraints({required AxisDirection axisDirection, required GrowthDirection growthDirection, required ScrollDirection userScrollDirection, required double scrollOffset, required double precedingScrollExtent, required double overlap, required double remainingPaintExtent, required double crossAxisExtent, required AxisDirection crossAxisDirection, required double viewportMainAxisExtent, required double remainingCacheExtent, required double cacheOrigin})
SliverConstraints$Mate({/// optionalParameters: {required AxisDirection axisDirection} , hasDefaultValue:false, defaultValueCode:null
required AxisDirection axisDirection, /// optionalParameters: {required GrowthDirection growthDirection} , hasDefaultValue:false, defaultValueCode:null
required GrowthDirection growthDirection, /// optionalParameters: {required ScrollDirection userScrollDirection} , hasDefaultValue:false, defaultValueCode:null
required ScrollDirection userScrollDirection, /// optionalParameters: {required double scrollOffset} , hasDefaultValue:false, defaultValueCode:null
required double scrollOffset, /// optionalParameters: {required double precedingScrollExtent} , hasDefaultValue:false, defaultValueCode:null
required double precedingScrollExtent, /// optionalParameters: {required double overlap} , hasDefaultValue:false, defaultValueCode:null
required double overlap, /// optionalParameters: {required double remainingPaintExtent} , hasDefaultValue:false, defaultValueCode:null
required double remainingPaintExtent, /// optionalParameters: {required double crossAxisExtent} , hasDefaultValue:false, defaultValueCode:null
required double crossAxisExtent, /// optionalParameters: {required AxisDirection crossAxisDirection} , hasDefaultValue:false, defaultValueCode:null
required AxisDirection crossAxisDirection, /// optionalParameters: {required double viewportMainAxisExtent} , hasDefaultValue:false, defaultValueCode:null
required double viewportMainAxisExtent, /// optionalParameters: {required double remainingCacheExtent} , hasDefaultValue:false, defaultValueCode:null
required double remainingCacheExtent, /// optionalParameters: {required double cacheOrigin} , hasDefaultValue:false, defaultValueCode:null
required double cacheOrigin, }) : super(axisDirection: axisDirection, growthDirection: growthDirection, userScrollDirection: userScrollDirection, scrollOffset: scrollOffset, precedingScrollExtent: precedingScrollExtent, overlap: overlap, remainingPaintExtent: remainingPaintExtent, crossAxisExtent: crossAxisExtent, crossAxisDirection: crossAxisDirection, viewportMainAxisExtent: viewportMainAxisExtent, remainingCacheExtent: remainingCacheExtent, cacheOrigin: cacheOrigin, ) { mateBuilder = (p) => SliverConstraints$Mate(axisDirection: p.get('axisDirection').build(), growthDirection: p.get('growthDirection').build(), userScrollDirection: p.get('userScrollDirection').build(), scrollOffset: p.get('scrollOffset').build(), precedingScrollExtent: p.get('precedingScrollExtent').build(), overlap: p.get('overlap').build(), remainingPaintExtent: p.get('remainingPaintExtent').build(), crossAxisExtent: p.get('crossAxisExtent').build(), crossAxisDirection: p.get('crossAxisDirection').build(), viewportMainAxisExtent: p.get('viewportMainAxisExtent').build(), remainingCacheExtent: p.get('remainingCacheExtent').build(), cacheOrigin: p.get('cacheOrigin').build(), );
matePut('axisDirection', axisDirection);
matePut('growthDirection', growthDirection);
matePut('userScrollDirection', userScrollDirection);
matePut('scrollOffset', scrollOffset);
matePut('precedingScrollExtent', precedingScrollExtent);
matePut('overlap', overlap);
matePut('remainingPaintExtent', remainingPaintExtent);
matePut('crossAxisExtent', crossAxisExtent);
matePut('crossAxisDirection', crossAxisDirection);
matePut('viewportMainAxisExtent', viewportMainAxisExtent);
matePut('remainingCacheExtent', remainingCacheExtent);
matePut('cacheOrigin', cacheOrigin); }

 }
/// class SliverGeometry with Diagnosticable
class SliverGeometry$Mate extends SliverGeometry with Mate {/// SliverGeometry SliverGeometry({double scrollExtent = 0.0, double paintExtent = 0.0, double paintOrigin = 0.0, double? layoutExtent, double maxPaintExtent = 0.0, double maxScrollObstructionExtent = 0.0, double? hitTestExtent, bool? visible, bool hasVisualOverflow = false, double? scrollOffsetCorrection, double? cacheExtent})
SliverGeometry$Mate({/// optionalParameters: {double scrollExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double scrollExtent, /// optionalParameters: {double paintExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double paintExtent, /// optionalParameters: {double paintOrigin = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double paintOrigin, /// optionalParameters: {double? layoutExtent} , hasDefaultValue:false, defaultValueCode:null
double? layoutExtent, /// optionalParameters: {double maxPaintExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double maxPaintExtent, /// optionalParameters: {double maxScrollObstructionExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double maxScrollObstructionExtent, /// optionalParameters: {double? hitTestExtent} , hasDefaultValue:false, defaultValueCode:null
double? hitTestExtent, /// optionalParameters: {bool? visible} , hasDefaultValue:false, defaultValueCode:null
bool? visible, /// optionalParameters: {bool hasVisualOverflow = false} , hasDefaultValue:true, defaultValueCode:false
required bool hasVisualOverflow, /// optionalParameters: {double? scrollOffsetCorrection} , hasDefaultValue:false, defaultValueCode:null
double? scrollOffsetCorrection, /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
double? cacheExtent, }) : super(scrollExtent: scrollExtent, paintExtent: paintExtent, paintOrigin: paintOrigin, layoutExtent: layoutExtent, maxPaintExtent: maxPaintExtent, maxScrollObstructionExtent: maxScrollObstructionExtent, hitTestExtent: hitTestExtent, visible: visible, hasVisualOverflow: hasVisualOverflow, scrollOffsetCorrection: scrollOffsetCorrection, cacheExtent: cacheExtent, ) { mateBuilder = (p) => SliverGeometry$Mate(scrollExtent: p.get('scrollExtent').build(), paintExtent: p.get('paintExtent').build(), paintOrigin: p.get('paintOrigin').build(), layoutExtent: p.get('layoutExtent').build(), maxPaintExtent: p.get('maxPaintExtent').build(), maxScrollObstructionExtent: p.get('maxScrollObstructionExtent').build(), hitTestExtent: p.get('hitTestExtent').build(), visible: p.get('visible').build(), hasVisualOverflow: p.get('hasVisualOverflow').build(), scrollOffsetCorrection: p.get('scrollOffsetCorrection').build(), cacheExtent: p.get('cacheExtent').build(), );
matePut('scrollExtent', scrollExtent);
matePut('paintExtent', paintExtent);
matePut('paintOrigin', paintOrigin);
matePut('layoutExtent', layoutExtent);
matePut('maxPaintExtent', maxPaintExtent);
matePut('maxScrollObstructionExtent', maxScrollObstructionExtent);
matePut('hitTestExtent', hitTestExtent);
matePut('visible', visible);
matePut('hasVisualOverflow', hasVisualOverflow);
matePut('scrollOffsetCorrection', scrollOffsetCorrection);
matePut('cacheExtent', cacheExtent); }

 }
/// class SliverHitTestResult extends HitTestResult
class SliverHitTestResult$Mate extends SliverHitTestResult with Mate {/// SliverHitTestResult SliverHitTestResult.wrap(HitTestResult result)
SliverHitTestResult$Mate.wrap(/// requiredParameters: HitTestResult result 
HitTestResult result) : super.wrap(result) { mateBuilder = (p) => SliverHitTestResult$Mate.wrap(p.get('result').value);
matePut('result', result); }

 }
/// class SliverHitTestEntry extends HitTestEntry<RenderSliver>
class SliverHitTestEntry$Mate extends SliverHitTestEntry with Mate {/// SliverHitTestEntry SliverHitTestEntry(RenderSliver target, {required double mainAxisPosition, required double crossAxisPosition})
SliverHitTestEntry$Mate(/// requiredParameters: RenderSliver target 
RenderSliver target, {/// optionalParameters: {required double mainAxisPosition} , hasDefaultValue:false, defaultValueCode:null
required double mainAxisPosition, /// optionalParameters: {required double crossAxisPosition} , hasDefaultValue:false, defaultValueCode:null
required double crossAxisPosition, }) : super(target, mainAxisPosition: mainAxisPosition, crossAxisPosition: crossAxisPosition, ) { mateBuilder = (p) => SliverHitTestEntry$Mate(p.get('target').value, mainAxisPosition: p.get('mainAxisPosition').build(), crossAxisPosition: p.get('crossAxisPosition').build(), );
matePut('target', target);
matePut('mainAxisPosition', mainAxisPosition);
matePut('crossAxisPosition', crossAxisPosition); }

 }
/// class RenderSliverToBoxAdapter extends RenderSliverSingleBoxAdapter
class RenderSliverToBoxAdapter$Mate extends RenderSliverToBoxAdapter with Mate {/// RenderSliverToBoxAdapter RenderSliverToBoxAdapter({RenderBox? child})
RenderSliverToBoxAdapter$Mate({/// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
RenderBox? child}) : super(child: child) { mateBuilder = (p) => RenderSliverToBoxAdapter$Mate(child: p.get('child').build());
matePut('child', child); }

 }
