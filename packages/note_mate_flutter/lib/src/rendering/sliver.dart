// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/sliver.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'dart:core';
import 'package:flutter/src/gestures/hit_test.dart';
import 'package:flutter/src/rendering/box.dart';

/// class SliverConstraints extends Constraints
class SliverConstraints$Mate extends SliverConstraints with Mate {
  /// SliverConstraints SliverConstraints({required AxisDirection axisDirection, required GrowthDirection growthDirection, required ScrollDirection userScrollDirection, required double scrollOffset, required double precedingScrollExtent, required double overlap, required double remainingPaintExtent, required double crossAxisExtent, required AxisDirection crossAxisDirection, required double viewportMainAxisExtent, required double remainingCacheExtent, required double cacheOrigin})
  SliverConstraints$Mate({
    /// optionalParameters: {required AxisDirection axisDirection} , default:none
    required AxisDirection axisDirection,

    /// optionalParameters: {required GrowthDirection growthDirection} , default:none
    required GrowthDirection growthDirection,

    /// optionalParameters: {required ScrollDirection userScrollDirection} , default:none
    required ScrollDirection userScrollDirection,

    /// optionalParameters: {required double scrollOffset} , default:none
    required double scrollOffset,

    /// optionalParameters: {required double precedingScrollExtent} , default:none
    required double precedingScrollExtent,

    /// optionalParameters: {required double overlap} , default:none
    required double overlap,

    /// optionalParameters: {required double remainingPaintExtent} , default:none
    required double remainingPaintExtent,

    /// optionalParameters: {required double crossAxisExtent} , default:none
    required double crossAxisExtent,

    /// optionalParameters: {required AxisDirection crossAxisDirection} , default:none
    required AxisDirection crossAxisDirection,

    /// optionalParameters: {required double viewportMainAxisExtent} , default:none
    required double viewportMainAxisExtent,

    /// optionalParameters: {required double remainingCacheExtent} , default:none
    required double remainingCacheExtent,

    /// optionalParameters: {required double cacheOrigin} , default:none
    required double cacheOrigin,
  }) : super(
          axisDirection: axisDirection,
          growthDirection: growthDirection,
          userScrollDirection: userScrollDirection,
          scrollOffset: scrollOffset,
          precedingScrollExtent: precedingScrollExtent,
          overlap: overlap,
          remainingPaintExtent: remainingPaintExtent,
          crossAxisExtent: crossAxisExtent,
          crossAxisDirection: crossAxisDirection,
          viewportMainAxisExtent: viewportMainAxisExtent,
          remainingCacheExtent: remainingCacheExtent,
          cacheOrigin: cacheOrigin,
        ) {
    mateBuilderName = 'SliverConstraints';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SliverConstraints$Mate(
          axisDirection: p.get('axisDirection').build(),
          growthDirection: p.get('growthDirection').build(),
          userScrollDirection: p.get('userScrollDirection').build(),
          scrollOffset: p.get('scrollOffset').build(),
          precedingScrollExtent: p.get('precedingScrollExtent').build(),
          overlap: p.get('overlap').build(),
          remainingPaintExtent: p.get('remainingPaintExtent').build(),
          crossAxisExtent: p.get('crossAxisExtent').build(),
          crossAxisDirection: p.get('crossAxisDirection').build(),
          viewportMainAxisExtent: p.get('viewportMainAxisExtent').build(),
          remainingCacheExtent: p.get('remainingCacheExtent').build(),
          cacheOrigin: p.get('cacheOrigin').build(),
        );
    mateUse(
      'axisDirection',
      axisDirection,
      isNamed: true,
    );
    mateUse(
      'growthDirection',
      growthDirection,
      isNamed: true,
    );
    mateUse(
      'userScrollDirection',
      userScrollDirection,
      isNamed: true,
    );
    mateUse(
      'scrollOffset',
      scrollOffset,
      isNamed: true,
    );
    mateUse(
      'precedingScrollExtent',
      precedingScrollExtent,
      isNamed: true,
    );
    mateUse(
      'overlap',
      overlap,
      isNamed: true,
    );
    mateUse(
      'remainingPaintExtent',
      remainingPaintExtent,
      isNamed: true,
    );
    mateUse(
      'crossAxisExtent',
      crossAxisExtent,
      isNamed: true,
    );
    mateUse(
      'crossAxisDirection',
      crossAxisDirection,
      isNamed: true,
    );
    mateUse(
      'viewportMainAxisExtent',
      viewportMainAxisExtent,
      isNamed: true,
    );
    mateUse(
      'remainingCacheExtent',
      remainingCacheExtent,
      isNamed: true,
    );
    mateUse(
      'cacheOrigin',
      cacheOrigin,
      isNamed: true,
    );
  }
}

/// class SliverGeometry with Diagnosticable
class SliverGeometry$Mate extends SliverGeometry with Mate {
  /// SliverGeometry SliverGeometry({double scrollExtent = 0.0, double paintExtent = 0.0, double paintOrigin = 0.0, double? layoutExtent, double maxPaintExtent = 0.0, double maxScrollObstructionExtent = 0.0, double? hitTestExtent, bool? visible, bool hasVisualOverflow = false, double? scrollOffsetCorrection, double? cacheExtent})
  SliverGeometry$Mate({
    /// optionalParameters: {double scrollExtent = 0.0} , default:processed=DoubleLiteralImpl
    double scrollExtent = 0.0,

    /// optionalParameters: {double paintExtent = 0.0} , default:processed=DoubleLiteralImpl
    double paintExtent = 0.0,

    /// optionalParameters: {double paintOrigin = 0.0} , default:processed=DoubleLiteralImpl
    double paintOrigin = 0.0,

    /// optionalParameters: {double? layoutExtent} , default:none
    double? layoutExtent,

    /// optionalParameters: {double maxPaintExtent = 0.0} , default:processed=DoubleLiteralImpl
    double maxPaintExtent = 0.0,

    /// optionalParameters: {double maxScrollObstructionExtent = 0.0} , default:processed=DoubleLiteralImpl
    double maxScrollObstructionExtent = 0.0,

    /// optionalParameters: {double? hitTestExtent} , default:none
    double? hitTestExtent,

    /// optionalParameters: {bool? visible} , default:none
    bool? visible,

    /// optionalParameters: {bool hasVisualOverflow = false} , default:processed=BooleanLiteralImpl
    bool hasVisualOverflow = false,

    /// optionalParameters: {double? scrollOffsetCorrection} , default:none
    double? scrollOffsetCorrection,

    /// optionalParameters: {double? cacheExtent} , default:none
    double? cacheExtent,
  }) : super(
          scrollExtent: scrollExtent,
          paintExtent: paintExtent,
          paintOrigin: paintOrigin,
          layoutExtent: layoutExtent,
          maxPaintExtent: maxPaintExtent,
          maxScrollObstructionExtent: maxScrollObstructionExtent,
          hitTestExtent: hitTestExtent,
          visible: visible,
          hasVisualOverflow: hasVisualOverflow,
          scrollOffsetCorrection: scrollOffsetCorrection,
          cacheExtent: cacheExtent,
        ) {
    mateBuilderName = 'SliverGeometry';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SliverGeometry$Mate(
          scrollExtent: p.get('scrollExtent').build(),
          paintExtent: p.get('paintExtent').build(),
          paintOrigin: p.get('paintOrigin').build(),
          layoutExtent: p.get('layoutExtent').build(),
          maxPaintExtent: p.get('maxPaintExtent').build(),
          maxScrollObstructionExtent:
              p.get('maxScrollObstructionExtent').build(),
          hitTestExtent: p.get('hitTestExtent').build(),
          visible: p.get('visible').build(),
          hasVisualOverflow: p.get('hasVisualOverflow').build(),
          scrollOffsetCorrection: p.get('scrollOffsetCorrection').build(),
          cacheExtent: p.get('cacheExtent').build(),
        );
    mateUse(
      'scrollExtent',
      scrollExtent,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'paintExtent',
      paintExtent,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'paintOrigin',
      paintOrigin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'layoutExtent',
      layoutExtent,
      isNamed: true,
    );
    mateUse(
      'maxPaintExtent',
      maxPaintExtent,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'maxScrollObstructionExtent',
      maxScrollObstructionExtent,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'hitTestExtent',
      hitTestExtent,
      isNamed: true,
    );
    mateUse(
      'visible',
      visible,
      isNamed: true,
    );
    mateUse(
      'hasVisualOverflow',
      hasVisualOverflow,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'scrollOffsetCorrection',
      scrollOffsetCorrection,
      isNamed: true,
    );
    mateUse(
      'cacheExtent',
      cacheExtent,
      isNamed: true,
    );
  }
}

/// class SliverHitTestResult extends HitTestResult
class SliverHitTestResult$Mate extends SliverHitTestResult with Mate {
  /// SliverHitTestResult SliverHitTestResult.wrap(HitTestResult result)
  SliverHitTestResult$Mate.wrap(

      /// requiredParameters: HitTestResult result
      HitTestResult result)
      : super.wrap(result) {
    mateBuilderName = 'SliverHitTestResult.wrap';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SliverHitTestResult$Mate.wrap(p.get('result').value);
    mateUse(
      'result',
      result,
      isNamed: false,
    );
  }
}

/// class SliverHitTestEntry extends HitTestEntry<RenderSliver>
class SliverHitTestEntry$Mate extends SliverHitTestEntry with Mate {
  /// SliverHitTestEntry SliverHitTestEntry(RenderSliver target, {required double mainAxisPosition, required double crossAxisPosition})
  SliverHitTestEntry$Mate(
    /// requiredParameters: RenderSliver target
    RenderSliver target, {
    /// optionalParameters: {required double mainAxisPosition} , default:none
    required double mainAxisPosition,

    /// optionalParameters: {required double crossAxisPosition} , default:none
    required double crossAxisPosition,
  }) : super(
          target,
          mainAxisPosition: mainAxisPosition,
          crossAxisPosition: crossAxisPosition,
        ) {
    mateBuilderName = 'SliverHitTestEntry';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SliverHitTestEntry$Mate(
          p.get('target').value,
          mainAxisPosition: p.get('mainAxisPosition').build(),
          crossAxisPosition: p.get('crossAxisPosition').build(),
        );
    mateUse(
      'target',
      target,
      isNamed: false,
    );
    mateUse(
      'mainAxisPosition',
      mainAxisPosition,
      isNamed: true,
    );
    mateUse(
      'crossAxisPosition',
      crossAxisPosition,
      isNamed: true,
    );
  }
}

/// class RenderSliverToBoxAdapter extends RenderSliverSingleBoxAdapter
class RenderSliverToBoxAdapter$Mate extends RenderSliverToBoxAdapter with Mate {
  /// RenderSliverToBoxAdapter RenderSliverToBoxAdapter({RenderBox? child})
  RenderSliverToBoxAdapter$Mate(
      {
      /// optionalParameters: {RenderBox? child} , default:none
      RenderBox? child})
      : super(child: child) {
    mateBuilderName = 'RenderSliverToBoxAdapter';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder =
        (p) => RenderSliverToBoxAdapter$Mate(child: p.get('child').build());
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
