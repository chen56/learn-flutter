// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/performance_overlay.dart';
import 'package:note/mate.dart';
import 'dart:core';

/// class RenderPerformanceOverlay extends RenderBox
class RenderPerformanceOverlay$Mate extends RenderPerformanceOverlay with Mate {
  /// RenderPerformanceOverlay RenderPerformanceOverlay({int optionsMask = 0, int rasterizerThreshold = 0, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false})
  RenderPerformanceOverlay$Mate({
    /// optionalParameters: {int optionsMask = 0} , hasDefaultValue:true, defaultValueCode:0
    required int optionsMask,

    /// optionalParameters: {int rasterizerThreshold = 0} , hasDefaultValue:true, defaultValueCode:0
    required int rasterizerThreshold,

    /// optionalParameters: {bool checkerboardRasterCacheImages = false} , hasDefaultValue:true, defaultValueCode:false
    required bool checkerboardRasterCacheImages,

    /// optionalParameters: {bool checkerboardOffscreenLayers = false} , hasDefaultValue:true, defaultValueCode:false
    required bool checkerboardOffscreenLayers,
  }) : super(
          optionsMask: optionsMask,
          rasterizerThreshold: rasterizerThreshold,
          checkerboardRasterCacheImages: checkerboardRasterCacheImages,
          checkerboardOffscreenLayers: checkerboardOffscreenLayers,
        ) {
    mateBuilder = (p) => RenderPerformanceOverlay$Mate(
          optionsMask: p.get('optionsMask').build(),
          rasterizerThreshold: p.get('rasterizerThreshold').build(),
          checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(),
          checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(),
        );
    matePut('optionsMask', optionsMask);
    matePut('rasterizerThreshold', rasterizerThreshold);
    matePut('checkerboardRasterCacheImages', checkerboardRasterCacheImages);
    matePut('checkerboardOffscreenLayers', checkerboardOffscreenLayers);
  }
}
