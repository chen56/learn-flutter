// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/wrap.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:ui';

/// class RenderWrap extends RenderBox with ContainerRenderObjectMixin<RenderBox, WrapParentData>, RenderBoxContainerDefaultsMixin<RenderBox, WrapParentData>
class RenderWrap$Mate extends RenderWrap with Mate {
  /// RenderWrap RenderWrap({List<RenderBox>? children, Axis direction = Axis.horizontal, WrapAlignment alignment = WrapAlignment.start, double spacing = 0.0, WrapAlignment runAlignment = WrapAlignment.start, double runSpacing = 0.0, WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, Clip clipBehavior = Clip.none})
  RenderWrap$Mate({
    /// optionalParameters: {List<RenderBox>? children} , hasDefaultValue:false, defaultValueCode:null
    List<RenderBox>? children,

    /// optionalParameters: {Axis direction = Axis.horizontal} , hasDefaultValue:true, defaultValueCode:Axis.horizontal
    required Axis direction,

    /// optionalParameters: {WrapAlignment alignment = WrapAlignment.start} , hasDefaultValue:true, defaultValueCode:WrapAlignment.start
    required WrapAlignment alignment,

    /// optionalParameters: {double spacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double spacing,

    /// optionalParameters: {WrapAlignment runAlignment = WrapAlignment.start} , hasDefaultValue:true, defaultValueCode:WrapAlignment.start
    required WrapAlignment runAlignment,

    /// optionalParameters: {double runSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double runSpacing,

    /// optionalParameters: {WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start} , hasDefaultValue:true, defaultValueCode:WrapCrossAlignment.start
    required WrapCrossAlignment crossAxisAlignment,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , hasDefaultValue:true, defaultValueCode:VerticalDirection.down
    required VerticalDirection verticalDirection,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
    required Clip clipBehavior,
  }) : super(
          children: children,
          direction: direction,
          alignment: alignment,
          spacing: spacing,
          runAlignment: runAlignment,
          runSpacing: runSpacing,
          crossAxisAlignment: crossAxisAlignment,
          textDirection: textDirection,
          verticalDirection: verticalDirection,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => RenderWrap$Mate(
          children: p.get('children').build(),
          direction: p.get('direction').build(),
          alignment: p.get('alignment').build(),
          spacing: p.get('spacing').build(),
          runAlignment: p.get('runAlignment').build(),
          runSpacing: p.get('runSpacing').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    matePut('children', children);
    matePut('direction', direction);
    matePut('alignment', alignment);
    matePut('spacing', spacing);
    matePut('runAlignment', runAlignment);
    matePut('runSpacing', runSpacing);
    matePut('crossAxisAlignment', crossAxisAlignment);
    matePut('textDirection', textDirection);
    matePut('verticalDirection', verticalDirection);
    matePut('clipBehavior', clipBehavior);
  }
}
