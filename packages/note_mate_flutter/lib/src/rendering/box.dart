// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/box.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/gestures/hit_test.dart' as _i4;

/// class BoxConstraints extends Constraints
class BoxConstraints$Mate extends _i1.BoxConstraints with _i2.Mate {
  /// BoxConstraints BoxConstraints({double minWidth = 0.0, double maxWidth = double.infinity, double minHeight = 0.0, double maxHeight = double.infinity})
  BoxConstraints$Mate({
    /// optionalParameters: {double minWidth = 0.0} , default:processed=DoubleLiteralImpl
    double minWidth = 0.0,

    /// optionalParameters: {double maxWidth = double.infinity} , default:processed=PrefixedIdentifierImpl
    double maxWidth = double.infinity,

    /// optionalParameters: {double minHeight = 0.0} , default:processed=DoubleLiteralImpl
    double minHeight = 0.0,

    /// optionalParameters: {double maxHeight = double.infinity} , default:processed=PrefixedIdentifierImpl
    double maxHeight = double.infinity,
  }) : super(
          minWidth: minWidth,
          maxWidth: maxWidth,
          minHeight: minHeight,
          maxHeight: maxHeight,
        ) {
    mateBuilderName = 'BoxConstraints';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BoxConstraints$Mate(
          minWidth: p.get('minWidth').build(),
          maxWidth: p.get('maxWidth').build(),
          minHeight: p.get('minHeight').build(),
          maxHeight: p.get('maxHeight').build(),
        );
    mateUse(
      'minWidth',
      minWidth,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'maxWidth',
      maxWidth,
      isNamed: true,
      defaultValue: double.infinity,
    );
    mateUse(
      'minHeight',
      minHeight,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'maxHeight',
      maxHeight,
      isNamed: true,
      defaultValue: double.infinity,
    );
  }

  /// BoxConstraints BoxConstraints.tight(Size size)
  BoxConstraints$Mate.tight(

      /// requiredParameters: Size size
      _i3.Size size)
      : super.tight(size) {
    mateBuilderName = 'BoxConstraints.tight';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BoxConstraints$Mate.tight(p.get('size').value);
    mateUse(
      'size',
      size,
      isNamed: false,
    );
  }

  /// BoxConstraints BoxConstraints.tightFor({double? width, double? height})
  BoxConstraints$Mate.tightFor({
    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,
  }) : super.tightFor(
          width: width,
          height: height,
        ) {
    mateBuilderName = 'BoxConstraints.tightFor';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BoxConstraints$Mate.tightFor(
          width: p.get('width').build(),
          height: p.get('height').build(),
        );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
  }

  /// BoxConstraints BoxConstraints.tightForFinite({double width = double.infinity, double height = double.infinity})
  BoxConstraints$Mate.tightForFinite({
    /// optionalParameters: {double width = double.infinity} , default:processed=PrefixedIdentifierImpl
    double width = double.infinity,

    /// optionalParameters: {double height = double.infinity} , default:processed=PrefixedIdentifierImpl
    double height = double.infinity,
  }) : super.tightForFinite(
          width: width,
          height: height,
        ) {
    mateBuilderName = 'BoxConstraints.tightForFinite';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BoxConstraints$Mate.tightForFinite(
          width: p.get('width').build(),
          height: p.get('height').build(),
        );
    mateUse(
      'width',
      width,
      isNamed: true,
      defaultValue: double.infinity,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
      defaultValue: double.infinity,
    );
  }

  /// BoxConstraints BoxConstraints.loose(Size size)
  BoxConstraints$Mate.loose(

      /// requiredParameters: Size size
      _i3.Size size)
      : super.loose(size) {
    mateBuilderName = 'BoxConstraints.loose';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BoxConstraints$Mate.loose(p.get('size').value);
    mateUse(
      'size',
      size,
      isNamed: false,
    );
  }

  /// BoxConstraints BoxConstraints.expand({double? width, double? height})
  BoxConstraints$Mate.expand({
    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,
  }) : super.expand(
          width: width,
          height: height,
        ) {
    mateBuilderName = 'BoxConstraints.expand';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BoxConstraints$Mate.expand(
          width: p.get('width').build(),
          height: p.get('height').build(),
        );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
  }
}

/// class BoxHitTestResult extends HitTestResult
class BoxHitTestResult$Mate extends _i1.BoxHitTestResult with _i2.Mate {
  /// BoxHitTestResult BoxHitTestResult.wrap(HitTestResult result)
  BoxHitTestResult$Mate.wrap(

      /// requiredParameters: HitTestResult result
      _i4.HitTestResult result)
      : super.wrap(result) {
    mateBuilderName = 'BoxHitTestResult.wrap';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => BoxHitTestResult$Mate.wrap(p.get('result').value);
    mateUse(
      'result',
      result,
      isNamed: false,
    );
  }
}

/// class BoxHitTestEntry extends HitTestEntry<RenderBox>
class BoxHitTestEntry$Mate extends _i1.BoxHitTestEntry with _i2.Mate {
  /// BoxHitTestEntry BoxHitTestEntry(RenderBox target, Offset localPosition)
  BoxHitTestEntry$Mate(
    /// requiredParameters: RenderBox target
    _i1.RenderBox target,

    /// requiredParameters: Offset localPosition
    _i3.Offset localPosition,
  ) : super(
          target,
          localPosition,
        ) {
    mateBuilderName = 'BoxHitTestEntry';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => BoxHitTestEntry$Mate(
          p.get('target').value,
          p.get('localPosition').value,
        );
    mateUse(
      'target',
      target,
      isNamed: false,
    );
    mateUse(
      'localPosition',
      localPosition,
      isNamed: false,
    );
  }
}
