// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/platform_view.dart';import 'package:flutter/src/services/platform_views.dart';import 'dart:core';import 'package:flutter/src/foundation/basic_types.dart';import 'package:flutter/src/gestures/recognizer.dart';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class RenderAndroidView extends PlatformViewRenderBox
class RenderAndroidView$Mate extends RenderAndroidView with Mate {/// RenderAndroidView RenderAndroidView({required AndroidViewController viewController, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers, Clip clipBehavior = Clip.hardEdge})
RenderAndroidView$Mate({/// optionalParameters: {required AndroidViewController viewController} , hasDefaultValue:false, defaultValueCode:null
required AndroidViewController viewController, /// optionalParameters: {required PlatformViewHitTestBehavior hitTestBehavior} , hasDefaultValue:false, defaultValueCode:null
required PlatformViewHitTestBehavior hitTestBehavior, /// optionalParameters: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers} , hasDefaultValue:false, defaultValueCode:null
required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers, /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
required Clip clipBehavior, }) : super(viewController: viewController, hitTestBehavior: hitTestBehavior, gestureRecognizers: gestureRecognizers, clipBehavior: clipBehavior, ) { mateBuilder = (p) => RenderAndroidView$Mate(viewController: p.get('viewController').build(), hitTestBehavior: p.get('hitTestBehavior').build(), gestureRecognizers: p.get('gestureRecognizers').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('viewController', viewController);
matePut('hitTestBehavior', hitTestBehavior);
matePut('gestureRecognizers', gestureRecognizers);
matePut('clipBehavior', clipBehavior); }

 }
/// class RenderUiKitView extends RenderBox
class RenderUiKitView$Mate extends RenderUiKitView with Mate {/// RenderUiKitView RenderUiKitView({required UiKitViewController viewController, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
RenderUiKitView$Mate({/// optionalParameters: {required UiKitViewController viewController} , hasDefaultValue:false, defaultValueCode:null
required UiKitViewController viewController, /// optionalParameters: {required PlatformViewHitTestBehavior hitTestBehavior} , hasDefaultValue:false, defaultValueCode:null
required PlatformViewHitTestBehavior hitTestBehavior, /// optionalParameters: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers} , hasDefaultValue:false, defaultValueCode:null
required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers, }) : super(viewController: viewController, hitTestBehavior: hitTestBehavior, gestureRecognizers: gestureRecognizers, ) { mateBuilder = (p) => RenderUiKitView$Mate(viewController: p.get('viewController').build(), hitTestBehavior: p.get('hitTestBehavior').build(), gestureRecognizers: p.get('gestureRecognizers').build(), );
matePut('viewController', viewController);
matePut('hitTestBehavior', hitTestBehavior);
matePut('gestureRecognizers', gestureRecognizers); }

 }
/// class PlatformViewRenderBox extends RenderBox with _PlatformViewGestureMixin
class PlatformViewRenderBox$Mate extends PlatformViewRenderBox with Mate {/// PlatformViewRenderBox PlatformViewRenderBox({required PlatformViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
PlatformViewRenderBox$Mate({/// optionalParameters: {required PlatformViewController controller} , hasDefaultValue:false, defaultValueCode:null
required PlatformViewController controller, /// optionalParameters: {required PlatformViewHitTestBehavior hitTestBehavior} , hasDefaultValue:false, defaultValueCode:null
required PlatformViewHitTestBehavior hitTestBehavior, /// optionalParameters: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers} , hasDefaultValue:false, defaultValueCode:null
required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers, }) : super(controller: controller, hitTestBehavior: hitTestBehavior, gestureRecognizers: gestureRecognizers, ) { mateBuilder = (p) => PlatformViewRenderBox$Mate(controller: p.get('controller').build(), hitTestBehavior: p.get('hitTestBehavior').build(), gestureRecognizers: p.get('gestureRecognizers').build(), );
matePut('controller', controller);
matePut('hitTestBehavior', hitTestBehavior);
matePut('gestureRecognizers', gestureRecognizers); }

 }
