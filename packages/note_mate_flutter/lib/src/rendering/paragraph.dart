// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/paragraph.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/painting/inline_span.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/rendering/selection.dart';

/// class PlaceholderSpanIndexSemanticsTag extends SemanticsTag
class PlaceholderSpanIndexSemanticsTag$Mate extends PlaceholderSpanIndexSemanticsTag with Mate {
  /// PlaceholderSpanIndexSemanticsTag PlaceholderSpanIndexSemanticsTag(int index)
  PlaceholderSpanIndexSemanticsTag$Mate(

      /// requiredParameters: int index
      int index)
      : super(index) {
    mateBuilder = (p) => PlaceholderSpanIndexSemanticsTag$Mate(p.get('index').value);
    mateDeclare('index', index);
  }
}

/// class RenderParagraph extends RenderBox with ContainerRenderObjectMixin<RenderBox, TextParentData>, RenderBoxContainerDefaultsMixin<RenderBox, TextParentData>, RelayoutWhenSystemFontsChangeMixin
class RenderParagraph$Mate extends RenderParagraph with Mate {
  /// RenderParagraph RenderParagraph(InlineSpan text, {TextAlign textAlign = TextAlign.start, required TextDirection textDirection, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, double textScaleFactor = 1.0, int? maxLines, Locale? locale, StrutStyle? strutStyle, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, List<RenderBox>? children, Color? selectionColor, SelectionRegistrar? registrar})
  RenderParagraph$Mate(
    /// requiredParameters: InlineSpan text
    InlineSpan text, {
    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , defaultValue:unprocessed
    required TextAlign textAlign,

    /// optionalParameters: {required TextDirection textDirection} , defaultValue:none
    required TextDirection textDirection,

    /// optionalParameters: {bool softWrap = true} , defaultValue:Literal
    bool softWrap = true,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , defaultValue:unprocessed
    required TextOverflow overflow,

    /// optionalParameters: {double textScaleFactor = 1.0} , defaultValue:Literal
    double textScaleFactor = 1.0,

    /// optionalParameters: {int? maxLines} , defaultValue:none
    int? maxLines,

    /// optionalParameters: {Locale? locale} , defaultValue:none
    Locale? locale,

    /// optionalParameters: {StrutStyle? strutStyle} , defaultValue:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , defaultValue:unprocessed
    required TextWidthBasis textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , defaultValue:none
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {List<RenderBox>? children} , defaultValue:none
    List<RenderBox>? children,

    /// optionalParameters: {Color? selectionColor} , defaultValue:none
    Color? selectionColor,

    /// optionalParameters: {SelectionRegistrar? registrar} , defaultValue:none
    SelectionRegistrar? registrar,
  }) : super(
          text,
          textAlign: textAlign,
          textDirection: textDirection,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          locale: locale,
          strutStyle: strutStyle,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          children: children,
          selectionColor: selectionColor,
          registrar: registrar,
        ) {
    mateBuilder = (p) => RenderParagraph$Mate(
          p.get('text').value,
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          locale: p.get('locale').build(),
          strutStyle: p.get('strutStyle').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          children: p.get('children').build(),
          selectionColor: p.get('selectionColor').build(),
          registrar: p.get('registrar').build(),
        );
    mateDeclare('text', text);
    mateDeclare('textAlign', textAlign);
    mateDeclare('textDirection', textDirection);
    mateDeclare('softWrap', softWrap);
    mateDeclare('overflow', overflow);
    mateDeclare('textScaleFactor', textScaleFactor);
    mateDeclare('maxLines', maxLines);
    mateDeclare('locale', locale);
    mateDeclare('strutStyle', strutStyle);
    mateDeclare('textWidthBasis', textWidthBasis);
    mateDeclare('textHeightBehavior', textHeightBehavior);
    mateDeclare('children', children);
    mateDeclare('selectionColor', selectionColor);
    mateDeclare('registrar', registrar);
  }
}
