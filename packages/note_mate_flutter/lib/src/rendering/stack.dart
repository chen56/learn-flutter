// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/stack.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/rendering/box.dart' as _i3;
import 'package:flutter/src/painting/alignment.dart' as _i4;
import 'package:flutter/cupertino.dart' as _i5;
import 'dart:ui' as _i6;

/// class RelativeRect
class RelativeRect$Mate extends _i1.RelativeRect with _i2.Mate {
  /// RelativeRect RelativeRect.fromLTRB(double left, double top, double right, double bottom)
  RelativeRect$Mate.fromLTRB(
    /// requiredParameters: double left
    double left,

    /// requiredParameters: double top
    double top,

    /// requiredParameters: double right
    double right,

    /// requiredParameters: double bottom
    double bottom,
  ) : super.fromLTRB(
          left,
          top,
          right,
          bottom,
        ) {
    mateBuilderName = 'RelativeRect.fromLTRB';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RelativeRect$Mate.fromLTRB(
          p.get('left').value,
          p.get('top').value,
          p.get('right').value,
          p.get('bottom').value,
        );
    mateUse(
      'left',
      left,
      isNamed: false,
    );
    mateUse(
      'top',
      top,
      isNamed: false,
    );
    mateUse(
      'right',
      right,
      isNamed: false,
    );
    mateUse(
      'bottom',
      bottom,
      isNamed: false,
    );
  }
}

/// class RenderStack extends RenderBox with ContainerRenderObjectMixin<RenderBox, StackParentData>, RenderBoxContainerDefaultsMixin<RenderBox, StackParentData>
class RenderStack$Mate extends _i1.RenderStack with _i2.Mate {
  /// RenderStack RenderStack({List<RenderBox>? children, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, StackFit fit = StackFit.loose, Clip clipBehavior = Clip.hardEdge})
  RenderStack$Mate({
    /// optionalParameters: {List<RenderBox>? children} , default:none
    List<_i3.RenderBox>? children,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , default:processed=PrefixedIdentifierImpl
    _i4.AlignmentGeometry alignment = _i5.AlignmentDirectional.topStart,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i6.TextDirection? textDirection,

    /// optionalParameters: {StackFit fit = StackFit.loose} , default:processed=PrefixedIdentifierImpl
    _i1.StackFit fit = _i5.StackFit.loose,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.hardEdge,
  }) : super(
          children: children,
          alignment: alignment,
          textDirection: textDirection,
          fit: fit,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'RenderStack';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderStack$Mate(
          children: p.get('children').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          fit: p.get('fit').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i5.AlignmentDirectional.topStart,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
      defaultValue: _i5.StackFit.loose,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.hardEdge,
    );
  }
}

/// class RenderIndexedStack extends RenderStack
class RenderIndexedStack$Mate extends _i1.RenderIndexedStack with _i2.Mate {
  /// RenderIndexedStack RenderIndexedStack({List<RenderBox>? children, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, StackFit fit = StackFit.loose, Clip clipBehavior = Clip.hardEdge, int? index = 0})
  RenderIndexedStack$Mate({
    /// optionalParameters: {List<RenderBox>? children} , default:none
    List<_i3.RenderBox>? children,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , default:processed=PrefixedIdentifierImpl
    _i4.AlignmentGeometry alignment = _i5.AlignmentDirectional.topStart,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i6.TextDirection? textDirection,

    /// optionalParameters: {StackFit fit = StackFit.loose} , default:processed=PrefixedIdentifierImpl
    _i1.StackFit fit = _i5.StackFit.loose,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i6.Clip clipBehavior = _i6.Clip.hardEdge,

    /// optionalParameters: {int? index = 0} , default:processed=IntegerLiteralImpl
    int? index = 0,
  }) : super(
          children: children,
          alignment: alignment,
          textDirection: textDirection,
          fit: fit,
          clipBehavior: clipBehavior,
          index: index,
        ) {
    mateBuilderName = 'RenderIndexedStack';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderIndexedStack$Mate(
          children: p.get('children').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          fit: p.get('fit').build(),
          clipBehavior: p.get('clipBehavior').build(),
          index: p.get('index').build(),
        );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i5.AlignmentDirectional.topStart,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
      defaultValue: _i5.StackFit.loose,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i6.Clip.hardEdge,
    );
    mateUse(
      'index',
      index,
      isNamed: true,
      defaultValue: 0,
    );
  }
}
