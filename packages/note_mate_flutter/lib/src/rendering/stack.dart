// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/stack.dart';import 'dart:core';import 'package:flutter/src/rendering/box.dart';import 'package:flutter/src/painting/alignment.dart';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class RelativeRect
class RelativeRect$Mate extends RelativeRect with Mate {/// RelativeRect RelativeRect.fromLTRB(double left, double top, double right, double bottom)
RelativeRect$Mate.fromLTRB(/// requiredParameters: double left 
double left, /// requiredParameters: double top 
double top, /// requiredParameters: double right 
double right, /// requiredParameters: double bottom 
double bottom, ) : super.fromLTRB(left, top, right, bottom, ) { mateBuilder = (p) => RelativeRect$Mate.fromLTRB(p.get('left').value, p.get('top').value, p.get('right').value, p.get('bottom').value, );
matePut('left', left);
matePut('top', top);
matePut('right', right);
matePut('bottom', bottom); }

 }
/// class RenderStack extends RenderBox with ContainerRenderObjectMixin<RenderBox, StackParentData>, RenderBoxContainerDefaultsMixin<RenderBox, StackParentData>
class RenderStack$Mate extends RenderStack with Mate {/// RenderStack RenderStack({List<RenderBox>? children, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, StackFit fit = StackFit.loose, Clip clipBehavior = Clip.hardEdge})
RenderStack$Mate({/// optionalParameters: {List<RenderBox>? children} , hasDefaultValue:false, defaultValueCode:null
List<RenderBox>? children, /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.topStart
required AlignmentGeometry alignment, /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
TextDirection? textDirection, /// optionalParameters: {StackFit fit = StackFit.loose} , hasDefaultValue:true, defaultValueCode:StackFit.loose
required StackFit fit, /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
required Clip clipBehavior, }) : super(children: children, alignment: alignment, textDirection: textDirection, fit: fit, clipBehavior: clipBehavior, ) { mateBuilder = (p) => RenderStack$Mate(children: p.get('children').build(), alignment: p.get('alignment').build(), textDirection: p.get('textDirection').build(), fit: p.get('fit').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('children', children);
matePut('alignment', alignment);
matePut('textDirection', textDirection);
matePut('fit', fit);
matePut('clipBehavior', clipBehavior); }

 }
/// class RenderIndexedStack extends RenderStack
class RenderIndexedStack$Mate extends RenderIndexedStack with Mate {/// RenderIndexedStack RenderIndexedStack({List<RenderBox>? children, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, StackFit fit = StackFit.loose, Clip clipBehavior = Clip.hardEdge, int? index = 0})
RenderIndexedStack$Mate({/// optionalParameters: {List<RenderBox>? children} , hasDefaultValue:false, defaultValueCode:null
List<RenderBox>? children, /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.topStart
required AlignmentGeometry alignment, /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
TextDirection? textDirection, /// optionalParameters: {StackFit fit = StackFit.loose} , hasDefaultValue:true, defaultValueCode:StackFit.loose
required StackFit fit, /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
required Clip clipBehavior, /// optionalParameters: {int? index = 0} , hasDefaultValue:true, defaultValueCode:0
int? index, }) : super(children: children, alignment: alignment, textDirection: textDirection, fit: fit, clipBehavior: clipBehavior, index: index, ) { mateBuilder = (p) => RenderIndexedStack$Mate(children: p.get('children').build(), alignment: p.get('alignment').build(), textDirection: p.get('textDirection').build(), fit: p.get('fit').build(), clipBehavior: p.get('clipBehavior').build(), index: p.get('index').build(), );
matePut('children', children);
matePut('alignment', alignment);
matePut('textDirection', textDirection);
matePut('fit', fit);
matePut('clipBehavior', clipBehavior);
matePut('index', index); }

 }
