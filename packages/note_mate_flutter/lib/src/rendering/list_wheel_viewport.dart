// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/rendering/list_wheel_viewport.dart';import 'package:flutter/src/rendering/viewport_offset.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/rendering/box.dart';import 'package:note/mate.dart' show Mate;/// class RenderListWheelViewport extends RenderBox with ContainerRenderObjectMixin<RenderBox, ListWheelParentData> implements RenderAbstractViewport
class RenderListWheelViewport$Mate extends RenderListWheelViewport with Mate {/// RenderListWheelViewport RenderListWheelViewport({required ListWheelChildManager childManager, required ViewportOffset offset, double diameterRatio = defaultDiameterRatio, double perspective = defaultPerspective, double offAxisFraction = 0, bool useMagnifier = false, double magnification = 1, double overAndUnderCenterOpacity = 1, required double itemExtent, double squeeze = 1, bool renderChildrenOutsideViewport = false, Clip clipBehavior = Clip.none, List<RenderBox>? children})
RenderListWheelViewport$Mate({/// optionalParameters: {required ListWheelChildManager childManager} , hasDefaultValue:false, defaultValueCode:null
required ListWheelChildManager childManager, /// optionalParameters: {required ViewportOffset offset} , hasDefaultValue:false, defaultValueCode:null
required ViewportOffset offset, /// optionalParameters: {double diameterRatio = defaultDiameterRatio} , hasDefaultValue:true, defaultValueCode:defaultDiameterRatio
required double diameterRatio, /// optionalParameters: {double perspective = defaultPerspective} , hasDefaultValue:true, defaultValueCode:defaultPerspective
required double perspective, /// optionalParameters: {double offAxisFraction = 0} , hasDefaultValue:true, defaultValueCode:0
required double offAxisFraction, /// optionalParameters: {bool useMagnifier = false} , hasDefaultValue:true, defaultValueCode:false
required bool useMagnifier, /// optionalParameters: {double magnification = 1} , hasDefaultValue:true, defaultValueCode:1
required double magnification, /// optionalParameters: {double overAndUnderCenterOpacity = 1} , hasDefaultValue:true, defaultValueCode:1
required double overAndUnderCenterOpacity, /// optionalParameters: {required double itemExtent} , hasDefaultValue:false, defaultValueCode:null
required double itemExtent, /// optionalParameters: {double squeeze = 1} , hasDefaultValue:true, defaultValueCode:1
required double squeeze, /// optionalParameters: {bool renderChildrenOutsideViewport = false} , hasDefaultValue:true, defaultValueCode:false
required bool renderChildrenOutsideViewport, /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
required Clip clipBehavior, /// optionalParameters: {List<RenderBox>? children} , hasDefaultValue:false, defaultValueCode:null
List<RenderBox>? children, }) : super(childManager: childManager, offset: offset, diameterRatio: diameterRatio, perspective: perspective, offAxisFraction: offAxisFraction, useMagnifier: useMagnifier, magnification: magnification, overAndUnderCenterOpacity: overAndUnderCenterOpacity, itemExtent: itemExtent, squeeze: squeeze, renderChildrenOutsideViewport: renderChildrenOutsideViewport, clipBehavior: clipBehavior, children: children, ) { mateBuilder = (p) => RenderListWheelViewport$Mate(childManager: p.get('childManager').build(), offset: p.get('offset').build(), diameterRatio: p.get('diameterRatio').build(), perspective: p.get('perspective').build(), offAxisFraction: p.get('offAxisFraction').build(), useMagnifier: p.get('useMagnifier').build(), magnification: p.get('magnification').build(), overAndUnderCenterOpacity: p.get('overAndUnderCenterOpacity').build(), itemExtent: p.get('itemExtent').build(), squeeze: p.get('squeeze').build(), renderChildrenOutsideViewport: p.get('renderChildrenOutsideViewport').build(), clipBehavior: p.get('clipBehavior').build(), children: p.get('children').build(), );
matePut('childManager', childManager);
matePut('offset', offset);
matePut('diameterRatio', diameterRatio);
matePut('perspective', perspective);
matePut('offAxisFraction', offAxisFraction);
matePut('useMagnifier', useMagnifier);
matePut('magnification', magnification);
matePut('overAndUnderCenterOpacity', overAndUnderCenterOpacity);
matePut('itemExtent', itemExtent);
matePut('squeeze', squeeze);
matePut('renderChildrenOutsideViewport', renderChildrenOutsideViewport);
matePut('clipBehavior', clipBehavior);
matePut('children', children); }

 }
