// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/tweens.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/fractional_offset.dart';
import 'package:flutter/src/painting/alignment.dart';

/// class FractionalOffsetTween extends Tween<FractionalOffset?>
class FractionalOffsetTween$Mate extends FractionalOffsetTween with Mate {
  /// FractionalOffsetTween FractionalOffsetTween({FractionalOffset? begin, FractionalOffset? end})
  FractionalOffsetTween$Mate({
    /// optionalParameters: {FractionalOffset? begin} , defaultValue:none
    FractionalOffset? begin,

    /// optionalParameters: {FractionalOffset? end} , defaultValue:none
    FractionalOffset? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilder = (p) => FractionalOffsetTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateDeclare('begin', begin);
    mateDeclare('end', end);
  }
}

/// class AlignmentTween extends Tween<Alignment>
class AlignmentTween$Mate extends AlignmentTween with Mate {
  /// AlignmentTween AlignmentTween({Alignment? begin, Alignment? end})
  AlignmentTween$Mate({
    /// optionalParameters: {Alignment? begin} , defaultValue:none
    Alignment? begin,

    /// optionalParameters: {Alignment? end} , defaultValue:none
    Alignment? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilder = (p) => AlignmentTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateDeclare('begin', begin);
    mateDeclare('end', end);
  }
}

/// class AlignmentGeometryTween extends Tween<AlignmentGeometry?>
class AlignmentGeometryTween$Mate extends AlignmentGeometryTween with Mate {
  /// AlignmentGeometryTween AlignmentGeometryTween({AlignmentGeometry? begin, AlignmentGeometry? end})
  AlignmentGeometryTween$Mate({
    /// optionalParameters: {AlignmentGeometry? begin} , defaultValue:none
    AlignmentGeometry? begin,

    /// optionalParameters: {AlignmentGeometry? end} , defaultValue:none
    AlignmentGeometry? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilder = (p) => AlignmentGeometryTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateDeclare('begin', begin);
    mateDeclare('end', end);
  }
}
