// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/flex.dart';
import 'dart:core';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:ui';
import 'package:note/mate.dart';

/// class RenderFlex extends RenderBox with ContainerRenderObjectMixin<RenderBox, FlexParentData>, RenderBoxContainerDefaultsMixin<RenderBox, FlexParentData>, DebugOverflowIndicatorMixin
class RenderFlex$Mate extends RenderFlex with Mate<RenderFlex$Mate> {
  /// RenderFlex RenderFlex({List<RenderBox>? children, Axis direction = Axis.horizontal, MainAxisSize mainAxisSize = MainAxisSize.max, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline? textBaseline, Clip clipBehavior = Clip.none})
  RenderFlex$Mate({
    /// optionalParameters: {List<RenderBox>? children} , hasDefaultValue:false, defaultValueCode:null
    List<RenderBox>? children,

    /// optionalParameters: {Axis direction = Axis.horizontal} , hasDefaultValue:true, defaultValueCode:Axis.horizontal
    required Axis direction,

    /// optionalParameters: {MainAxisSize mainAxisSize = MainAxisSize.max} , hasDefaultValue:true, defaultValueCode:MainAxisSize.max
    required MainAxisSize mainAxisSize,

    /// optionalParameters: {MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start} , hasDefaultValue:true, defaultValueCode:MainAxisAlignment.start
    required MainAxisAlignment mainAxisAlignment,

    /// optionalParameters: {CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center} , hasDefaultValue:true, defaultValueCode:CrossAxisAlignment.center
    required CrossAxisAlignment crossAxisAlignment,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , hasDefaultValue:true, defaultValueCode:VerticalDirection.down
    required VerticalDirection verticalDirection,

    /// optionalParameters: {TextBaseline? textBaseline} , hasDefaultValue:false, defaultValueCode:null
    TextBaseline? textBaseline,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
    required Clip clipBehavior,
  }) : super(
          children: children,
          direction: direction,
          mainAxisSize: mainAxisSize,
          mainAxisAlignment: mainAxisAlignment,
          crossAxisAlignment: crossAxisAlignment,
          textDirection: textDirection,
          verticalDirection: verticalDirection,
          textBaseline: textBaseline,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RenderFlex$Mate(
        children: p.get('children').build(),
        direction: p.get('direction').build(),
        mainAxisSize: p.get('mainAxisSize').build(),
        mainAxisAlignment: p.get('mainAxisAlignment').build(),
        crossAxisAlignment: p.get('crossAxisAlignment').build(),
        textDirection: p.get('textDirection').build(),
        verticalDirection: p.get('verticalDirection').build(),
        textBaseline: p.get('textBaseline').build(),
        clipBehavior: p.get('clipBehavior').build(),
      ),
    );
    mateParams.putList('children', children);
    mateParams.put('direction', direction);
    mateParams.put('mainAxisSize', mainAxisSize);
    mateParams.put('mainAxisAlignment', mainAxisAlignment);
    mateParams.put('crossAxisAlignment', crossAxisAlignment);
    mateParams.put('textDirection', textDirection);
    mateParams.put('verticalDirection', verticalDirection);
    mateParams.put('textBaseline', textBaseline);
    mateParams.put('clipBehavior', clipBehavior);
  }
}
