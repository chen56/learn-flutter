// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/physics/clamped_simulation.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/physics/simulation.dart';
import 'dart:core';

/// class ClampedSimulation extends Simulation
class ClampedSimulation$Mate extends ClampedSimulation with Mate {
  /// ClampedSimulation ClampedSimulation(Simulation simulation, {double xMin = double.negativeInfinity, double xMax = double.infinity, double dxMin = double.negativeInfinity, double dxMax = double.infinity})
  ClampedSimulation$Mate(
    /// requiredParameters: Simulation simulation
    Simulation simulation, {
    /// optionalParameters: {double xMin = double.negativeInfinity} , hasDefaultValue:true, defaultValueCode:double.negativeInfinity
    required double xMin,

    /// optionalParameters: {double xMax = double.infinity} , hasDefaultValue:true, defaultValueCode:double.infinity
    required double xMax,

    /// optionalParameters: {double dxMin = double.negativeInfinity} , hasDefaultValue:true, defaultValueCode:double.negativeInfinity
    required double dxMin,

    /// optionalParameters: {double dxMax = double.infinity} , hasDefaultValue:true, defaultValueCode:double.infinity
    required double dxMax,
  }) : super(
          simulation,
          xMin: xMin,
          xMax: xMax,
          dxMin: dxMin,
          dxMax: dxMax,
        ) {
    mateBuilder = (p) => ClampedSimulation$Mate(
          p.get('simulation').value,
          xMin: p.get('xMin').build(),
          xMax: p.get('xMax').build(),
          dxMin: p.get('dxMin').build(),
          dxMax: p.get('dxMax').build(),
        );
    matePut('simulation', simulation);
    matePut('xMin', xMin);
    matePut('xMax', xMax);
    matePut('dxMin', dxMin);
    matePut('dxMax', dxMax);
  }
}
