// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/physics/clamped_simulation.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/physics/simulation.dart';
import 'dart:core';

/// class ClampedSimulation extends Simulation
class ClampedSimulation$Mate extends ClampedSimulation with Mate {
  /// ClampedSimulation ClampedSimulation(Simulation simulation, {double xMin = double.negativeInfinity, double xMax = double.infinity, double dxMin = double.negativeInfinity, double dxMax = double.infinity})
  ClampedSimulation$Mate(
    /// requiredParameters: Simulation simulation
    Simulation simulation, {
    /// optionalParameters: {double xMin = double.negativeInfinity} , defaultValue:PrefixedIdentifier
    double xMin = double.negativeInfinity,

    /// optionalParameters: {double xMax = double.infinity} , defaultValue:PrefixedIdentifier
    double xMax = double.infinity,

    /// optionalParameters: {double dxMin = double.negativeInfinity} , defaultValue:PrefixedIdentifier
    double dxMin = double.negativeInfinity,

    /// optionalParameters: {double dxMax = double.infinity} , defaultValue:PrefixedIdentifier
    double dxMax = double.infinity,
  }) : super(
          simulation,
          xMin: xMin,
          xMax: xMax,
          dxMin: dxMin,
          dxMax: dxMax,
        ) {
    mateCreateName = 'ClampedSimulation';
    matePackageUrl = 'package:flutter/physics.dart';
    mateBuilder = (p) => ClampedSimulation$Mate(
          p.get('simulation').value,
          xMin: p.get('xMin').build(),
          xMax: p.get('xMax').build(),
          dxMin: p.get('dxMin').build(),
          dxMax: p.get('dxMax').build(),
        );
    mateUse('simulation', simulation, isNamed: false);
    mateUse('xMin', xMin, isNamed: true);
    mateUse('xMax', xMax, isNamed: true);
    mateUse('dxMin', dxMin, isNamed: true);
    mateUse('dxMax', dxMax, isNamed: true);
  }
}
