// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/physics/friction_simulation.dart';import 'dart:core';import 'package:flutter/src/physics/tolerance.dart';import 'package:note/mate.dart' show Mate;/// class FrictionSimulation extends Simulation
class FrictionSimulation$Mate extends FrictionSimulation with Mate {/// FrictionSimulation FrictionSimulation(double drag, double position, double velocity, {Tolerance tolerance = Tolerance.defaultTolerance, double constantDeceleration = 0})
FrictionSimulation$Mate(/// requiredParameters: double drag 
double drag, /// requiredParameters: double position 
double position, /// requiredParameters: double velocity 
double velocity, {/// optionalParameters: {Tolerance tolerance = Tolerance.defaultTolerance} , hasDefaultValue:true, defaultValueCode:Tolerance.defaultTolerance
required Tolerance tolerance, /// optionalParameters: {double constantDeceleration = 0} , hasDefaultValue:true, defaultValueCode:0
required double constantDeceleration, }) : super(drag, position, velocity, tolerance: tolerance, constantDeceleration: constantDeceleration, ) { mateBuilder = (p) => FrictionSimulation$Mate(p.get('drag').value, p.get('position').value, p.get('velocity').value, tolerance: p.get('tolerance').build(), constantDeceleration: p.get('constantDeceleration').build(), );
matePut('drag', drag);
matePut('position', position);
matePut('velocity', velocity);
matePut('tolerance', tolerance);
matePut('constantDeceleration', constantDeceleration); }

 }
/// class BoundedFrictionSimulation extends FrictionSimulation
class BoundedFrictionSimulation$Mate extends BoundedFrictionSimulation with Mate {/// BoundedFrictionSimulation BoundedFrictionSimulation(double drag, double position, double velocity, double _minX, double _maxX)
BoundedFrictionSimulation$Mate(/// requiredParameters: double drag 
double drag, /// requiredParameters: double position 
double position, /// requiredParameters: double velocity 
double velocity, /// requiredParameters: double _minX 
double _minX, /// requiredParameters: double _maxX 
double _maxX, ) : super(drag, position, velocity, _minX, _maxX, ) { mateBuilder = (p) => BoundedFrictionSimulation$Mate(p.get('drag').value, p.get('position').value, p.get('velocity').value, p.get('_minX').value, p.get('_maxX').value, );
matePut('drag', drag);
matePut('position', position);
matePut('velocity', velocity);
matePut('_minX', _minX);
matePut('_maxX', _maxX); }

 }
