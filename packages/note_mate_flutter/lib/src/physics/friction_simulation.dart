// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/physics/friction_simulation.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/physics/tolerance.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i4;

/// class FrictionSimulation extends Simulation
class FrictionSimulation$Mate extends _i1.FrictionSimulation with _i2.Mate {
  /// FrictionSimulation FrictionSimulation(double drag, double position, double velocity, {Tolerance tolerance = Tolerance.defaultTolerance, double constantDeceleration = 0})
  FrictionSimulation$Mate(
    /// requiredParameters: double drag
    double drag,

    /// requiredParameters: double position
    double position,

    /// requiredParameters: double velocity
    double velocity, {
    /// optionalParameters: {Tolerance tolerance = Tolerance.defaultTolerance} , default:processed=PrefixedIdentifierImpl
    _i3.Tolerance tolerance = _i4.Tolerance.defaultTolerance,

    /// optionalParameters: {double constantDeceleration = 0} , default:processed=IntegerLiteralImpl
    double constantDeceleration = 0,
  }) : super(
          drag,
          position,
          velocity,
          tolerance: tolerance,
          constantDeceleration: constantDeceleration,
        ) {
    mateBuilderName = 'FrictionSimulation';
    matePackageUrl = 'package:flutter/physics.dart';
    mateBuilder = (p) => FrictionSimulation$Mate(
          p.get('drag').value,
          p.get('position').value,
          p.get('velocity').value,
          tolerance: p.get('tolerance').build(),
          constantDeceleration: p.get('constantDeceleration').build(),
        );
    mateUse(
      'drag',
      drag,
      isNamed: false,
    );
    mateUse(
      'position',
      position,
      isNamed: false,
    );
    mateUse(
      'velocity',
      velocity,
      isNamed: false,
    );
    mateUse(
      'tolerance',
      tolerance,
      isNamed: true,
      defaultValue: _i4.Tolerance.defaultTolerance,
    );
    mateUse(
      'constantDeceleration',
      constantDeceleration,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class BoundedFrictionSimulation extends FrictionSimulation
class BoundedFrictionSimulation$Mate extends _i1.BoundedFrictionSimulation with _i2.Mate {
  /// BoundedFrictionSimulation BoundedFrictionSimulation(double drag, double position, double velocity, double _minX, double _maxX)
  BoundedFrictionSimulation$Mate(
    /// requiredParameters: double drag
    double drag,

    /// requiredParameters: double position
    double position,

    /// requiredParameters: double velocity
    double velocity,

    /// requiredParameters: double _minX
    double _minX,

    /// requiredParameters: double _maxX
    double _maxX,
  ) : super(
          drag,
          position,
          velocity,
          _minX,
          _maxX,
        ) {
    mateBuilderName = 'BoundedFrictionSimulation';
    matePackageUrl = 'package:flutter/physics.dart';
    mateBuilder = (p) => BoundedFrictionSimulation$Mate(
          p.get('drag').value,
          p.get('position').value,
          p.get('velocity').value,
          p.get('_minX').value,
          p.get('_maxX').value,
        );
    mateUse(
      'drag',
      drag,
      isNamed: false,
    );
    mateUse(
      'position',
      position,
      isNamed: false,
    );
    mateUse(
      'velocity',
      velocity,
      isNamed: false,
    );
    mateUse(
      '_minX',
      _minX,
      isNamed: false,
    );
    mateUse(
      '_maxX',
      _maxX,
      isNamed: false,
    );
  }
}
