// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/gradient.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/painting.dart';
import 'dart:ui';

/// class GradientRotation extends GradientTransform
class GradientRotation$Mate extends GradientRotation with Mate {
  /// GradientRotation GradientRotation(double radians)
  GradientRotation$Mate(

      /// requiredParameters: double radians
      double radians)
      : super(radians) {
    mateBuilderName = 'GradientRotation';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => GradientRotation$Mate(p.get('radians').value);
    mateUse(
      'radians',
      radians,
      isNamed: false,
    );
  }
}

/// class LinearGradient extends Gradient
class LinearGradient$Mate extends LinearGradient with Mate {
  /// LinearGradient LinearGradient({AlignmentGeometry begin = Alignment.centerLeft, AlignmentGeometry end = Alignment.centerRight, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, GradientTransform? transform})
  LinearGradient$Mate({
    /// optionalParameters: {AlignmentGeometry begin = Alignment.centerLeft} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry begin = Alignment.centerLeft,

    /// optionalParameters: {AlignmentGeometry end = Alignment.centerRight} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry end = Alignment.centerRight,

    /// optionalParameters: {required List<Color> colors} , default:none
    required List<Color> colors,

    /// optionalParameters: {List<double>? stops} , default:none
    List<double>? stops,

    /// optionalParameters: {TileMode tileMode = TileMode.clamp} , default:processed=PrefixedIdentifierImpl
    TileMode tileMode = TileMode.clamp,

    /// optionalParameters: {GradientTransform? transform} , default:none
    GradientTransform? transform,
  }) : super(
          begin: begin,
          end: end,
          colors: colors,
          stops: stops,
          tileMode: tileMode,
          transform: transform,
        ) {
    mateBuilderName = 'LinearGradient';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => LinearGradient$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
          colors: p.get('colors').build(),
          stops: p.get('stops').build(),
          tileMode: p.get('tileMode').build(),
          transform: p.get('transform').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
      defaultValue: Alignment.centerLeft,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
      defaultValue: Alignment.centerRight,
    );
    mateUseList(
      'colors',
      colors,
      isNamed: true,
    );
    mateUseList(
      'stops',
      stops,
      isNamed: true,
    );
    mateUse(
      'tileMode',
      tileMode,
      isNamed: true,
      defaultValue: TileMode.clamp,
    );
    mateUse(
      'transform',
      transform,
      isNamed: true,
    );
  }
}

/// class RadialGradient extends Gradient
class RadialGradient$Mate extends RadialGradient with Mate {
  /// RadialGradient RadialGradient({AlignmentGeometry center = Alignment.center, double radius = 0.5, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, AlignmentGeometry? focal, double focalRadius = 0.0, GradientTransform? transform})
  RadialGradient$Mate({
    /// optionalParameters: {AlignmentGeometry center = Alignment.center} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry center = Alignment.center,

    /// optionalParameters: {double radius = 0.5} , default:processed=DoubleLiteralImpl
    double radius = 0.5,

    /// optionalParameters: {required List<Color> colors} , default:none
    required List<Color> colors,

    /// optionalParameters: {List<double>? stops} , default:none
    List<double>? stops,

    /// optionalParameters: {TileMode tileMode = TileMode.clamp} , default:processed=PrefixedIdentifierImpl
    TileMode tileMode = TileMode.clamp,

    /// optionalParameters: {AlignmentGeometry? focal} , default:none
    AlignmentGeometry? focal,

    /// optionalParameters: {double focalRadius = 0.0} , default:processed=DoubleLiteralImpl
    double focalRadius = 0.0,

    /// optionalParameters: {GradientTransform? transform} , default:none
    GradientTransform? transform,
  }) : super(
          center: center,
          radius: radius,
          colors: colors,
          stops: stops,
          tileMode: tileMode,
          focal: focal,
          focalRadius: focalRadius,
          transform: transform,
        ) {
    mateBuilderName = 'RadialGradient';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => RadialGradient$Mate(
          center: p.get('center').build(),
          radius: p.get('radius').build(),
          colors: p.get('colors').build(),
          stops: p.get('stops').build(),
          tileMode: p.get('tileMode').build(),
          focal: p.get('focal').build(),
          focalRadius: p.get('focalRadius').build(),
          transform: p.get('transform').build(),
        );
    mateUse(
      'center',
      center,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'radius',
      radius,
      isNamed: true,
      defaultValue: 0.5,
    );
    mateUseList(
      'colors',
      colors,
      isNamed: true,
    );
    mateUseList(
      'stops',
      stops,
      isNamed: true,
    );
    mateUse(
      'tileMode',
      tileMode,
      isNamed: true,
      defaultValue: TileMode.clamp,
    );
    mateUse(
      'focal',
      focal,
      isNamed: true,
    );
    mateUse(
      'focalRadius',
      focalRadius,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'transform',
      transform,
      isNamed: true,
    );
  }
}

/// class SweepGradient extends Gradient
class SweepGradient$Mate extends SweepGradient with Mate {
  /// SweepGradient SweepGradient({AlignmentGeometry center = Alignment.center, double startAngle = 0.0, double endAngle = math.pi * 2, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, GradientTransform? transform})
  SweepGradient$Mate({
    /// optionalParameters: {AlignmentGeometry center = Alignment.center} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry center = Alignment.center,

    /// optionalParameters: {double startAngle = 0.0} , default:processed=DoubleLiteralImpl
    double startAngle = 0.0,

    /// optionalParameters: {double endAngle = math.pi * 2} , default:unprocessed=BinaryExpressionImpl
    required double endAngle,

    /// optionalParameters: {required List<Color> colors} , default:none
    required List<Color> colors,

    /// optionalParameters: {List<double>? stops} , default:none
    List<double>? stops,

    /// optionalParameters: {TileMode tileMode = TileMode.clamp} , default:processed=PrefixedIdentifierImpl
    TileMode tileMode = TileMode.clamp,

    /// optionalParameters: {GradientTransform? transform} , default:none
    GradientTransform? transform,
  }) : super(
          center: center,
          startAngle: startAngle,
          endAngle: endAngle,
          colors: colors,
          stops: stops,
          tileMode: tileMode,
          transform: transform,
        ) {
    mateBuilderName = 'SweepGradient';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => SweepGradient$Mate(
          center: p.get('center').build(),
          startAngle: p.get('startAngle').build(),
          endAngle: p.get('endAngle').build(),
          colors: p.get('colors').build(),
          stops: p.get('stops').build(),
          tileMode: p.get('tileMode').build(),
          transform: p.get('transform').build(),
        );
    mateUse(
      'center',
      center,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'startAngle',
      startAngle,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'endAngle',
      endAngle,
      isNamed: true,
    );
    mateUseList(
      'colors',
      colors,
      isNamed: true,
    );
    mateUseList(
      'stops',
      stops,
      isNamed: true,
    );
    mateUse(
      'tileMode',
      tileMode,
      isNamed: true,
      defaultValue: TileMode.clamp,
    );
    mateUse(
      'transform',
      transform,
      isNamed: true,
    );
  }
}
