// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/painting/gradient.dart';import 'dart:core';import 'package:flutter/src/painting/alignment.dart';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class GradientRotation extends GradientTransform
class GradientRotation$Mate extends GradientRotation with Mate {/// GradientRotation GradientRotation(double radians)
GradientRotation$Mate(/// requiredParameters: double radians 
double radians) : super(radians) { mateBuilder = (p) => GradientRotation$Mate(p.get('radians').value);
matePut('radians', radians); }

 }
/// class LinearGradient extends Gradient
class LinearGradient$Mate extends LinearGradient with Mate {/// LinearGradient LinearGradient({AlignmentGeometry begin = Alignment.centerLeft, AlignmentGeometry end = Alignment.centerRight, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, GradientTransform? transform})
LinearGradient$Mate({/// optionalParameters: {AlignmentGeometry begin = Alignment.centerLeft} , hasDefaultValue:true, defaultValueCode:Alignment.centerLeft
required AlignmentGeometry begin, /// optionalParameters: {AlignmentGeometry end = Alignment.centerRight} , hasDefaultValue:true, defaultValueCode:Alignment.centerRight
required AlignmentGeometry end, /// optionalParameters: {required List<Color> colors} , hasDefaultValue:false, defaultValueCode:null
required List<Color> colors, /// optionalParameters: {List<double>? stops} , hasDefaultValue:false, defaultValueCode:null
List<double>? stops, /// optionalParameters: {TileMode tileMode = TileMode.clamp} , hasDefaultValue:true, defaultValueCode:TileMode.clamp
required TileMode tileMode, /// optionalParameters: {GradientTransform? transform} , hasDefaultValue:false, defaultValueCode:null
GradientTransform? transform, }) : super(begin: begin, end: end, colors: colors, stops: stops, tileMode: tileMode, transform: transform, ) { mateBuilder = (p) => LinearGradient$Mate(begin: p.get('begin').build(), end: p.get('end').build(), colors: p.get('colors').build(), stops: p.get('stops').build(), tileMode: p.get('tileMode').build(), transform: p.get('transform').build(), );
matePut('begin', begin);
matePut('end', end);
matePut('colors', colors);
matePut('stops', stops);
matePut('tileMode', tileMode);
matePut('transform', transform); }

 }
/// class RadialGradient extends Gradient
class RadialGradient$Mate extends RadialGradient with Mate {/// RadialGradient RadialGradient({AlignmentGeometry center = Alignment.center, double radius = 0.5, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, AlignmentGeometry? focal, double focalRadius = 0.0, GradientTransform? transform})
RadialGradient$Mate({/// optionalParameters: {AlignmentGeometry center = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
required AlignmentGeometry center, /// optionalParameters: {double radius = 0.5} , hasDefaultValue:true, defaultValueCode:0.5
required double radius, /// optionalParameters: {required List<Color> colors} , hasDefaultValue:false, defaultValueCode:null
required List<Color> colors, /// optionalParameters: {List<double>? stops} , hasDefaultValue:false, defaultValueCode:null
List<double>? stops, /// optionalParameters: {TileMode tileMode = TileMode.clamp} , hasDefaultValue:true, defaultValueCode:TileMode.clamp
required TileMode tileMode, /// optionalParameters: {AlignmentGeometry? focal} , hasDefaultValue:false, defaultValueCode:null
AlignmentGeometry? focal, /// optionalParameters: {double focalRadius = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double focalRadius, /// optionalParameters: {GradientTransform? transform} , hasDefaultValue:false, defaultValueCode:null
GradientTransform? transform, }) : super(center: center, radius: radius, colors: colors, stops: stops, tileMode: tileMode, focal: focal, focalRadius: focalRadius, transform: transform, ) { mateBuilder = (p) => RadialGradient$Mate(center: p.get('center').build(), radius: p.get('radius').build(), colors: p.get('colors').build(), stops: p.get('stops').build(), tileMode: p.get('tileMode').build(), focal: p.get('focal').build(), focalRadius: p.get('focalRadius').build(), transform: p.get('transform').build(), );
matePut('center', center);
matePut('radius', radius);
matePut('colors', colors);
matePut('stops', stops);
matePut('tileMode', tileMode);
matePut('focal', focal);
matePut('focalRadius', focalRadius);
matePut('transform', transform); }

 }
/// class SweepGradient extends Gradient
class SweepGradient$Mate extends SweepGradient with Mate {/// SweepGradient SweepGradient({AlignmentGeometry center = Alignment.center, double startAngle = 0.0, double endAngle = math.pi * 2, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, GradientTransform? transform})
SweepGradient$Mate({/// optionalParameters: {AlignmentGeometry center = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
required AlignmentGeometry center, /// optionalParameters: {double startAngle = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double startAngle, /// optionalParameters: {double endAngle = math.pi * 2} , hasDefaultValue:true, defaultValueCode:math.pi * 2
required double endAngle, /// optionalParameters: {required List<Color> colors} , hasDefaultValue:false, defaultValueCode:null
required List<Color> colors, /// optionalParameters: {List<double>? stops} , hasDefaultValue:false, defaultValueCode:null
List<double>? stops, /// optionalParameters: {TileMode tileMode = TileMode.clamp} , hasDefaultValue:true, defaultValueCode:TileMode.clamp
required TileMode tileMode, /// optionalParameters: {GradientTransform? transform} , hasDefaultValue:false, defaultValueCode:null
GradientTransform? transform, }) : super(center: center, startAngle: startAngle, endAngle: endAngle, colors: colors, stops: stops, tileMode: tileMode, transform: transform, ) { mateBuilder = (p) => SweepGradient$Mate(center: p.get('center').build(), startAngle: p.get('startAngle').build(), endAngle: p.get('endAngle').build(), colors: p.get('colors').build(), stops: p.get('stops').build(), tileMode: p.get('tileMode').build(), transform: p.get('transform').build(), );
matePut('center', center);
matePut('startAngle', startAngle);
matePut('endAngle', endAngle);
matePut('colors', colors);
matePut('stops', stops);
matePut('tileMode', tileMode);
matePut('transform', transform); }

 }
