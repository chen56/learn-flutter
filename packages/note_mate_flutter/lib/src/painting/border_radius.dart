// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/border_radius.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';

/// class BorderRadius extends BorderRadiusGeometry
class BorderRadius$Mate extends BorderRadius with Mate {
  /// BorderRadius BorderRadius.all(Radius radius)
  BorderRadius$Mate.all(

      /// requiredParameters: Radius radius
      Radius radius)
      : super.all(radius) {
    mateCreateName = 'BorderRadius.all';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadius$Mate.all(p.get('radius').value);
    mateUse('radius', radius);
  }

  /// BorderRadius BorderRadius.circular(double radius)
  BorderRadius$Mate.circular(

      /// requiredParameters: double radius
      double radius)
      : super.circular(radius) {
    mateCreateName = 'BorderRadius.circular';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadius$Mate.circular(p.get('radius').value);
    mateUse('radius', radius);
  }

  /// BorderRadius BorderRadius.vertical({Radius top = Radius.zero, Radius bottom = Radius.zero})
  BorderRadius$Mate.vertical({
    /// optionalParameters: {Radius top = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius top = Radius.zero,

    /// optionalParameters: {Radius bottom = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius bottom = Radius.zero,
  }) : super.vertical(
          top: top,
          bottom: bottom,
        ) {
    mateCreateName = 'BorderRadius.vertical';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadius$Mate.vertical(
          top: p.get('top').build(),
          bottom: p.get('bottom').build(),
        );
    mateUse('top', top);
    mateUse('bottom', bottom);
  }

  /// BorderRadius BorderRadius.horizontal({Radius left = Radius.zero, Radius right = Radius.zero})
  BorderRadius$Mate.horizontal({
    /// optionalParameters: {Radius left = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius left = Radius.zero,

    /// optionalParameters: {Radius right = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius right = Radius.zero,
  }) : super.horizontal(
          left: left,
          right: right,
        ) {
    mateCreateName = 'BorderRadius.horizontal';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadius$Mate.horizontal(
          left: p.get('left').build(),
          right: p.get('right').build(),
        );
    mateUse('left', left);
    mateUse('right', right);
  }

  /// BorderRadius BorderRadius.only({Radius topLeft = Radius.zero, Radius topRight = Radius.zero, Radius bottomLeft = Radius.zero, Radius bottomRight = Radius.zero})
  BorderRadius$Mate.only({
    /// optionalParameters: {Radius topLeft = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius topLeft = Radius.zero,

    /// optionalParameters: {Radius topRight = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius topRight = Radius.zero,

    /// optionalParameters: {Radius bottomLeft = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius bottomLeft = Radius.zero,

    /// optionalParameters: {Radius bottomRight = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius bottomRight = Radius.zero,
  }) : super.only(
          topLeft: topLeft,
          topRight: topRight,
          bottomLeft: bottomLeft,
          bottomRight: bottomRight,
        ) {
    mateCreateName = 'BorderRadius.only';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadius$Mate.only(
          topLeft: p.get('topLeft').build(),
          topRight: p.get('topRight').build(),
          bottomLeft: p.get('bottomLeft').build(),
          bottomRight: p.get('bottomRight').build(),
        );
    mateUse('topLeft', topLeft);
    mateUse('topRight', topRight);
    mateUse('bottomLeft', bottomLeft);
    mateUse('bottomRight', bottomRight);
  }
}

/// class BorderRadiusDirectional extends BorderRadiusGeometry
class BorderRadiusDirectional$Mate extends BorderRadiusDirectional with Mate {
  /// BorderRadiusDirectional BorderRadiusDirectional.all(Radius radius)
  BorderRadiusDirectional$Mate.all(

      /// requiredParameters: Radius radius
      Radius radius)
      : super.all(radius) {
    mateCreateName = 'BorderRadiusDirectional.all';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadiusDirectional$Mate.all(p.get('radius').value);
    mateUse('radius', radius);
  }

  /// BorderRadiusDirectional BorderRadiusDirectional.circular(double radius)
  BorderRadiusDirectional$Mate.circular(

      /// requiredParameters: double radius
      double radius)
      : super.circular(radius) {
    mateCreateName = 'BorderRadiusDirectional.circular';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadiusDirectional$Mate.circular(p.get('radius').value);
    mateUse('radius', radius);
  }

  /// BorderRadiusDirectional BorderRadiusDirectional.vertical({Radius top = Radius.zero, Radius bottom = Radius.zero})
  BorderRadiusDirectional$Mate.vertical({
    /// optionalParameters: {Radius top = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius top = Radius.zero,

    /// optionalParameters: {Radius bottom = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius bottom = Radius.zero,
  }) : super.vertical(
          top: top,
          bottom: bottom,
        ) {
    mateCreateName = 'BorderRadiusDirectional.vertical';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadiusDirectional$Mate.vertical(
          top: p.get('top').build(),
          bottom: p.get('bottom').build(),
        );
    mateUse('top', top);
    mateUse('bottom', bottom);
  }

  /// BorderRadiusDirectional BorderRadiusDirectional.horizontal({Radius start = Radius.zero, Radius end = Radius.zero})
  BorderRadiusDirectional$Mate.horizontal({
    /// optionalParameters: {Radius start = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius start = Radius.zero,

    /// optionalParameters: {Radius end = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius end = Radius.zero,
  }) : super.horizontal(
          start: start,
          end: end,
        ) {
    mateCreateName = 'BorderRadiusDirectional.horizontal';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadiusDirectional$Mate.horizontal(
          start: p.get('start').build(),
          end: p.get('end').build(),
        );
    mateUse('start', start);
    mateUse('end', end);
  }

  /// BorderRadiusDirectional BorderRadiusDirectional.only({Radius topStart = Radius.zero, Radius topEnd = Radius.zero, Radius bottomStart = Radius.zero, Radius bottomEnd = Radius.zero})
  BorderRadiusDirectional$Mate.only({
    /// optionalParameters: {Radius topStart = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius topStart = Radius.zero,

    /// optionalParameters: {Radius topEnd = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius topEnd = Radius.zero,

    /// optionalParameters: {Radius bottomStart = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius bottomStart = Radius.zero,

    /// optionalParameters: {Radius bottomEnd = Radius.zero} , defaultValue:PrefixedIdentifier
    Radius bottomEnd = Radius.zero,
  }) : super.only(
          topStart: topStart,
          topEnd: topEnd,
          bottomStart: bottomStart,
          bottomEnd: bottomEnd,
        ) {
    mateCreateName = 'BorderRadiusDirectional.only';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderRadiusDirectional$Mate.only(
          topStart: p.get('topStart').build(),
          topEnd: p.get('topEnd').build(),
          bottomStart: p.get('bottomStart').build(),
          bottomEnd: p.get('bottomEnd').build(),
        );
    mateUse('topStart', topStart);
    mateUse('topEnd', topEnd);
    mateUse('bottomStart', bottomStart);
    mateUse('bottomEnd', bottomEnd);
  }
}
