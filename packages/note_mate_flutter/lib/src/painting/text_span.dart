// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/painting/text_span.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/painting/inline_span.dart' as _i3;
import 'package:flutter/src/painting/text_style.dart' as _i4;
import 'package:flutter/src/gestures/recognizer.dart' as _i5;
import 'package:flutter/src/services/mouse_cursor.dart' as _i6;
import 'package:flutter/src/services/mouse_tracking.dart' as _i7;
import 'dart:ui' as _i8;

/// class TextSpan extends InlineSpan implements HitTestTarget, MouseTrackerAnnotation
class TextSpan$Mate extends _i1.TextSpan with _i2.Mate {
  /// TextSpan TextSpan({String? text, List<InlineSpan>? children, TextStyle? style, GestureRecognizer? recognizer, MouseCursor? mouseCursor, void Function(PointerEnterEvent)? onEnter, void Function(PointerExitEvent)? onExit, String? semanticsLabel, Locale? locale, bool? spellOut})
  TextSpan$Mate({
    /// optionalParameters: {String? text} , default:none
    super.text,

    /// optionalParameters: {List<InlineSpan>? children} , default:none
    super.children,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {GestureRecognizer? recognizer} , default:none
    super.recognizer,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {void Function(PointerEnterEvent)? onEnter} , default:none
    super.onEnter,

    /// optionalParameters: {void Function(PointerExitEvent)? onExit} , default:none
    super.onExit,

    /// optionalParameters: {String? semanticsLabel} , default:none
    super.semanticsLabel,

    /// optionalParameters: {Locale? locale} , default:none
    super.locale,

    /// optionalParameters: {bool? spellOut} , default:none
    super.spellOut,
  })  : mateParams = {
          'text': _i2.BuilderArg<String?>(
            name: 'text',
            init: text,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i3.InlineSpan>?>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'recognizer': _i2.BuilderArg<_i5.GestureRecognizer?>(
            name: 'recognizer',
            init: recognizer,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i6.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'onEnter': _i2.BuilderArg<_i7.PointerEnterEventListener?>(
            name: 'onEnter',
            init: onEnter,
            isNamed: true,
          ),
          'onExit': _i2.BuilderArg<_i7.PointerExitEventListener?>(
            name: 'onExit',
            init: onExit,
            isNamed: true,
          ),
          'semanticsLabel': _i2.BuilderArg<String?>(
            name: 'semanticsLabel',
            init: semanticsLabel,
            isNamed: true,
          ),
          'locale': _i2.BuilderArg<_i8.Locale?>(
            name: 'locale',
            init: locale,
            isNamed: true,
          ),
          'spellOut': _i2.BuilderArg<bool?>(
            name: 'spellOut',
            init: spellOut,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TextSpan';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSpan$Mate(
          text: p.get('text').build(),
          children: p.get('children').build(),
          style: p.get('style').build(),
          recognizer: p.get('recognizer').build(),
          mouseCursor: p.get('mouseCursor').build(),
          onEnter: p.get('onEnter').build(),
          onExit: p.get('onExit').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          locale: p.get('locale').build(),
          spellOut: p.get('spellOut').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
