// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/text_style.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/text_painter.dart';

/// class TextStyle with Diagnosticable
class TextStyle$Mate extends TextStyle with Mate {
  /// TextStyle TextStyle({bool inherit = true, Color? color, Color? backgroundColor, double? fontSize, FontWeight? fontWeight, FontStyle? fontStyle, double? letterSpacing, double? wordSpacing, TextBaseline? textBaseline, double? height, TextLeadingDistribution? leadingDistribution, Locale? locale, Paint? foreground, Paint? background, List<Shadow>? shadows, List<FontFeature>? fontFeatures, List<FontVariation>? fontVariations, TextDecoration? decoration, Color? decorationColor, TextDecorationStyle? decorationStyle, double? decorationThickness, String? debugLabel, String? fontFamily, List<String>? fontFamilyFallback, String? package, TextOverflow? overflow})
  TextStyle$Mate({
    /// optionalParameters: {bool inherit = true} , defaultValue:Literal
    bool inherit = true,

    /// optionalParameters: {Color? color} , defaultValue:none
    Color? color,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {double? fontSize} , defaultValue:none
    double? fontSize,

    /// optionalParameters: {FontWeight? fontWeight} , defaultValue:none
    FontWeight? fontWeight,

    /// optionalParameters: {FontStyle? fontStyle} , defaultValue:none
    FontStyle? fontStyle,

    /// optionalParameters: {double? letterSpacing} , defaultValue:none
    double? letterSpacing,

    /// optionalParameters: {double? wordSpacing} , defaultValue:none
    double? wordSpacing,

    /// optionalParameters: {TextBaseline? textBaseline} , defaultValue:none
    TextBaseline? textBaseline,

    /// optionalParameters: {double? height} , defaultValue:none
    double? height,

    /// optionalParameters: {TextLeadingDistribution? leadingDistribution} , defaultValue:none
    TextLeadingDistribution? leadingDistribution,

    /// optionalParameters: {Locale? locale} , defaultValue:none
    Locale? locale,

    /// optionalParameters: {Paint? foreground} , defaultValue:none
    Paint? foreground,

    /// optionalParameters: {Paint? background} , defaultValue:none
    Paint? background,

    /// optionalParameters: {List<Shadow>? shadows} , defaultValue:none
    List<Shadow>? shadows,

    /// optionalParameters: {List<FontFeature>? fontFeatures} , defaultValue:none
    List<FontFeature>? fontFeatures,

    /// optionalParameters: {List<FontVariation>? fontVariations} , defaultValue:none
    List<FontVariation>? fontVariations,

    /// optionalParameters: {TextDecoration? decoration} , defaultValue:none
    TextDecoration? decoration,

    /// optionalParameters: {Color? decorationColor} , defaultValue:none
    Color? decorationColor,

    /// optionalParameters: {TextDecorationStyle? decorationStyle} , defaultValue:none
    TextDecorationStyle? decorationStyle,

    /// optionalParameters: {double? decorationThickness} , defaultValue:none
    double? decorationThickness,

    /// optionalParameters: {String? debugLabel} , defaultValue:none
    String? debugLabel,

    /// optionalParameters: {String? fontFamily} , defaultValue:none
    String? fontFamily,

    /// optionalParameters: {List<String>? fontFamilyFallback} , defaultValue:none
    List<String>? fontFamilyFallback,

    /// optionalParameters: {String? package} , defaultValue:none
    String? package,

    /// optionalParameters: {TextOverflow? overflow} , defaultValue:none
    TextOverflow? overflow,
  }) : super(
          inherit: inherit,
          color: color,
          backgroundColor: backgroundColor,
          fontSize: fontSize,
          fontWeight: fontWeight,
          fontStyle: fontStyle,
          letterSpacing: letterSpacing,
          wordSpacing: wordSpacing,
          textBaseline: textBaseline,
          height: height,
          leadingDistribution: leadingDistribution,
          locale: locale,
          foreground: foreground,
          background: background,
          shadows: shadows,
          fontFeatures: fontFeatures,
          fontVariations: fontVariations,
          decoration: decoration,
          decorationColor: decorationColor,
          decorationStyle: decorationStyle,
          decorationThickness: decorationThickness,
          debugLabel: debugLabel,
          fontFamily: fontFamily,
          fontFamilyFallback: fontFamilyFallback,
          package: package,
          overflow: overflow,
        ) {
    mateBuilder = (p) => TextStyle$Mate(
          inherit: p.get('inherit').build(),
          color: p.get('color').build(),
          backgroundColor: p.get('backgroundColor').build(),
          fontSize: p.get('fontSize').build(),
          fontWeight: p.get('fontWeight').build(),
          fontStyle: p.get('fontStyle').build(),
          letterSpacing: p.get('letterSpacing').build(),
          wordSpacing: p.get('wordSpacing').build(),
          textBaseline: p.get('textBaseline').build(),
          height: p.get('height').build(),
          leadingDistribution: p.get('leadingDistribution').build(),
          locale: p.get('locale').build(),
          foreground: p.get('foreground').build(),
          background: p.get('background').build(),
          shadows: p.get('shadows').build(),
          fontFeatures: p.get('fontFeatures').build(),
          fontVariations: p.get('fontVariations').build(),
          decoration: p.get('decoration').build(),
          decorationColor: p.get('decorationColor').build(),
          decorationStyle: p.get('decorationStyle').build(),
          decorationThickness: p.get('decorationThickness').build(),
          debugLabel: p.get('debugLabel').build(),
          fontFamily: p.get('fontFamily').build(),
          fontFamilyFallback: p.get('fontFamilyFallback').build(),
          package: p.get('package').build(),
          overflow: p.get('overflow').build(),
        );
    mateDeclare('inherit', inherit);
    mateDeclare('color', color);
    mateDeclare('backgroundColor', backgroundColor);
    mateDeclare('fontSize', fontSize);
    mateDeclare('fontWeight', fontWeight);
    mateDeclare('fontStyle', fontStyle);
    mateDeclare('letterSpacing', letterSpacing);
    mateDeclare('wordSpacing', wordSpacing);
    mateDeclare('textBaseline', textBaseline);
    mateDeclare('height', height);
    mateDeclare('leadingDistribution', leadingDistribution);
    mateDeclare('locale', locale);
    mateDeclare('foreground', foreground);
    mateDeclare('background', background);
    mateDeclare('shadows', shadows);
    mateDeclare('fontFeatures', fontFeatures);
    mateDeclare('fontVariations', fontVariations);
    mateDeclare('decoration', decoration);
    mateDeclare('decorationColor', decorationColor);
    mateDeclare('decorationStyle', decorationStyle);
    mateDeclare('decorationThickness', decorationThickness);
    mateDeclare('debugLabel', debugLabel);
    mateDeclare('fontFamily', fontFamily);
    mateDeclare('fontFamilyFallback', fontFamilyFallback);
    mateDeclare('package', package);
    mateDeclare('overflow', overflow);
  }
}
