// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/painting/decoration_image.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/painting/image_provider.dart' as _i3;
import 'package:flutter/src/painting/image_stream.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/box_fit.dart' as _i6;
import 'package:flutter/src/painting/alignment.dart' as _i7;
import 'package:flutter/cupertino.dart' as _i8;
import 'package:vector_math/vector_math_64.dart' as _i9;

/// class DecorationImage
class DecorationImage$Mate extends _i1.DecorationImage with _i2.Mate {
  /// DecorationImage DecorationImage({required ImageProvider<Object> image, void Function(Object, StackTrace?)? onError, ColorFilter? colorFilter, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, Rect? centerSlice, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, double scale = 1.0, double opacity = 1.0, FilterQuality filterQuality = FilterQuality.low, bool invertColors = false, bool isAntiAlias = false})
  DecorationImage$Mate({
    /// optionalParameters: {required ImageProvider<Object> image} , default:none
    required _i3.ImageProvider<Object> image,

    /// optionalParameters: {void Function(Object, StackTrace?)? onError} , default:none
    _i4.ImageErrorListener? onError,

    /// optionalParameters: {ColorFilter? colorFilter} , default:none
    _i5.ColorFilter? colorFilter,

    /// optionalParameters: {BoxFit? fit} , default:none
    _i6.BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i7.AlignmentGeometry alignment = _i8.Alignment.center,

    /// optionalParameters: {Rect? centerSlice} , default:none
    _i5.Rect? centerSlice,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:processed=PrefixedIdentifierImpl
    _i1.ImageRepeat repeat = _i8.ImageRepeat.noRepeat,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    bool matchTextDirection = false,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    double scale = 1.0,

    /// optionalParameters: {double opacity = 1.0} , default:processed=DoubleLiteralImpl
    double opacity = 1.0,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:processed=PrefixedIdentifierImpl
    _i5.FilterQuality filterQuality = _i5.FilterQuality.low,

    /// optionalParameters: {bool invertColors = false} , default:processed=BooleanLiteralImpl
    bool invertColors = false,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    bool isAntiAlias = false,
  }) : super(
          image: image,
          onError: onError,
          colorFilter: colorFilter,
          fit: fit,
          alignment: alignment,
          centerSlice: centerSlice,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          scale: scale,
          opacity: opacity,
          filterQuality: filterQuality,
          invertColors: invertColors,
          isAntiAlias: isAntiAlias,
        ) {
    mateBuilderName = 'DecorationImage';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DecorationImage$Mate(
          image: p.get('image').build(),
          onError: p.get('onError').build(),
          colorFilter: p.get('colorFilter').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          centerSlice: p.get('centerSlice').build(),
          repeat: p.get('repeat').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          scale: p.get('scale').build(),
          opacity: p.get('opacity').build(),
          filterQuality: p.get('filterQuality').build(),
          invertColors: p.get('invertColors').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
        );
    mateUse(
      'image',
      image,
      isNamed: true,
    );
    mateUse(
      'onError',
      onError,
      isNamed: true,
    );
    mateUse(
      'colorFilter',
      colorFilter,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i8.Alignment.center,
    );
    mateUse(
      'centerSlice',
      centerSlice,
      isNamed: true,
    );
    mateUse(
      'repeat',
      repeat,
      isNamed: true,
      defaultValue: _i8.ImageRepeat.noRepeat,
    );
    mateUse(
      'matchTextDirection',
      matchTextDirection,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'scale',
      scale,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
      defaultValue: _i5.FilterQuality.low,
    );
    mateUse(
      'invertColors',
      invertColors,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'isAntiAlias',
      isAntiAlias,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class ImageTilingInfo
class ImageTilingInfo$Mate extends _i1.ImageTilingInfo with _i2.Mate {
  /// ImageTilingInfo ImageTilingInfo({required TileMode tmx, required TileMode tmy, required Matrix4 transform})
  ImageTilingInfo$Mate({
    /// optionalParameters: {required TileMode tmx} , default:none
    required _i5.TileMode tmx,

    /// optionalParameters: {required TileMode tmy} , default:none
    required _i5.TileMode tmy,

    /// optionalParameters: {required Matrix4 transform} , default:none
    required _i9.Matrix4 transform,
  }) : super(
          tmx: tmx,
          tmy: tmy,
          transform: transform,
        ) {
    mateBuilderName = 'ImageTilingInfo';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ImageTilingInfo$Mate(
          tmx: p.get('tmx').build(),
          tmy: p.get('tmy').build(),
          transform: p.get('transform').build(),
        );
    mateUse(
      'tmx',
      tmx,
      isNamed: true,
    );
    mateUse(
      'tmy',
      tmy,
      isNamed: true,
    );
    mateUse(
      'transform',
      transform,
      isNamed: true,
    );
  }
}
