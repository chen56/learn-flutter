// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/box_border.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/painting.dart';

/// class Border extends BoxBorder
class Border$Mate extends Border with Mate {
  /// Border Border({BorderSide top = BorderSide.none, BorderSide right = BorderSide.none, BorderSide bottom = BorderSide.none, BorderSide left = BorderSide.none})
  Border$Mate({
    /// optionalParameters: {BorderSide top = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide top = BorderSide.none,

    /// optionalParameters: {BorderSide right = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide right = BorderSide.none,

    /// optionalParameters: {BorderSide bottom = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide bottom = BorderSide.none,

    /// optionalParameters: {BorderSide left = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide left = BorderSide.none,
  }) : super(
          top: top,
          right: right,
          bottom: bottom,
          left: left,
        ) {
    mateCreateName = 'Border';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => Border$Mate(
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          left: p.get('left').build(),
        );
    mateUse('top', top, isNamed: true);
    mateUse('right', right, isNamed: true);
    mateUse('bottom', bottom, isNamed: true);
    mateUse('left', left, isNamed: true);
  }

  /// Border Border.fromBorderSide(BorderSide side)
  Border$Mate.fromBorderSide(

      /// requiredParameters: BorderSide side
      BorderSide side)
      : super.fromBorderSide(side) {
    mateCreateName = 'Border.fromBorderSide';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => Border$Mate.fromBorderSide(p.get('side').value);
    mateUse('side', side, isNamed: false);
  }

  /// Border Border.symmetric({BorderSide vertical = BorderSide.none, BorderSide horizontal = BorderSide.none})
  Border$Mate.symmetric({
    /// optionalParameters: {BorderSide vertical = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide vertical = BorderSide.none,

    /// optionalParameters: {BorderSide horizontal = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide horizontal = BorderSide.none,
  }) : super.symmetric(
          vertical: vertical,
          horizontal: horizontal,
        ) {
    mateCreateName = 'Border.symmetric';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => Border$Mate.symmetric(
          vertical: p.get('vertical').build(),
          horizontal: p.get('horizontal').build(),
        );
    mateUse('vertical', vertical, isNamed: true);
    mateUse('horizontal', horizontal, isNamed: true);
  }
}

/// class BorderDirectional extends BoxBorder
class BorderDirectional$Mate extends BorderDirectional with Mate {
  /// BorderDirectional BorderDirectional({BorderSide top = BorderSide.none, BorderSide start = BorderSide.none, BorderSide end = BorderSide.none, BorderSide bottom = BorderSide.none})
  BorderDirectional$Mate({
    /// optionalParameters: {BorderSide top = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide top = BorderSide.none,

    /// optionalParameters: {BorderSide start = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide start = BorderSide.none,

    /// optionalParameters: {BorderSide end = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide end = BorderSide.none,

    /// optionalParameters: {BorderSide bottom = BorderSide.none} , defaultValue:PrefixedIdentifier
    BorderSide bottom = BorderSide.none,
  }) : super(
          top: top,
          start: start,
          end: end,
          bottom: bottom,
        ) {
    mateCreateName = 'BorderDirectional';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => BorderDirectional$Mate(
          top: p.get('top').build(),
          start: p.get('start').build(),
          end: p.get('end').build(),
          bottom: p.get('bottom').build(),
        );
    mateUse('top', top, isNamed: true);
    mateUse('start', start, isNamed: true);
    mateUse('end', end, isNamed: true);
    mateUse('bottom', bottom, isNamed: true);
  }
}
