// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/linear_border.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';

/// class LinearBorderEdge
class LinearBorderEdge$Mate extends LinearBorderEdge with Mate {
  /// LinearBorderEdge LinearBorderEdge({double size = 1.0, double alignment = 0.0})
  LinearBorderEdge$Mate({
    /// optionalParameters: {double size = 1.0} , defaultValue:Literal
    double size = 1.0,

    /// optionalParameters: {double alignment = 0.0} , defaultValue:Literal
    double alignment = 0.0,
  }) : super(
          size: size,
          alignment: alignment,
        ) {
    mateBuilder = (p) => LinearBorderEdge$Mate(
          size: p.get('size').build(),
          alignment: p.get('alignment').build(),
        );
    mateUse('size', size);
    mateUse('alignment', alignment);
  }
}

/// class LinearBorder extends OutlinedBorder
class LinearBorder$Mate extends LinearBorder with Mate {
  /// LinearBorder LinearBorder({BorderSide side = BorderSide.none, LinearBorderEdge? start, LinearBorderEdge? end, LinearBorderEdge? top, LinearBorderEdge? bottom})
  LinearBorder$Mate({
    /// optionalParameters: {BorderSide side = BorderSide.none} , defaultValue:unprocessed
    required BorderSide side,

    /// optionalParameters: {LinearBorderEdge? start} , defaultValue:none
    LinearBorderEdge? start,

    /// optionalParameters: {LinearBorderEdge? end} , defaultValue:none
    LinearBorderEdge? end,

    /// optionalParameters: {LinearBorderEdge? top} , defaultValue:none
    LinearBorderEdge? top,

    /// optionalParameters: {LinearBorderEdge? bottom} , defaultValue:none
    LinearBorderEdge? bottom,
  }) : super(
          side: side,
          start: start,
          end: end,
          top: top,
          bottom: bottom,
        ) {
    mateBuilder = (p) => LinearBorder$Mate(
          side: p.get('side').build(),
          start: p.get('start').build(),
          end: p.get('end').build(),
          top: p.get('top').build(),
          bottom: p.get('bottom').build(),
        );
    mateUse('side', side);
    mateUse('start', start);
    mateUse('end', end);
    mateUse('top', top);
    mateUse('bottom', bottom);
  }

  /// LinearBorder LinearBorder.start({BorderSide side = BorderSide.none, double alignment = 0.0, double size = 1.0})
  LinearBorder$Mate.start({
    /// optionalParameters: {BorderSide side = BorderSide.none} , defaultValue:unprocessed
    required BorderSide side,

    /// optionalParameters: {double alignment = 0.0} , defaultValue:Literal
    double alignment = 0.0,

    /// optionalParameters: {double size = 1.0} , defaultValue:Literal
    double size = 1.0,
  }) : super.start(
          side: side,
          alignment: alignment,
          size: size,
        ) {
    mateBuilder = (p) => LinearBorder$Mate.start(
          side: p.get('side').build(),
          alignment: p.get('alignment').build(),
          size: p.get('size').build(),
        );
    mateUse('side', side);
    mateUse('alignment', alignment);
    mateUse('size', size);
  }

  /// LinearBorder LinearBorder.end({BorderSide side = BorderSide.none, double alignment = 0.0, double size = 1.0})
  LinearBorder$Mate.end({
    /// optionalParameters: {BorderSide side = BorderSide.none} , defaultValue:unprocessed
    required BorderSide side,

    /// optionalParameters: {double alignment = 0.0} , defaultValue:Literal
    double alignment = 0.0,

    /// optionalParameters: {double size = 1.0} , defaultValue:Literal
    double size = 1.0,
  }) : super.end(
          side: side,
          alignment: alignment,
          size: size,
        ) {
    mateBuilder = (p) => LinearBorder$Mate.end(
          side: p.get('side').build(),
          alignment: p.get('alignment').build(),
          size: p.get('size').build(),
        );
    mateUse('side', side);
    mateUse('alignment', alignment);
    mateUse('size', size);
  }

  /// LinearBorder LinearBorder.top({BorderSide side = BorderSide.none, double alignment = 0.0, double size = 1.0})
  LinearBorder$Mate.top({
    /// optionalParameters: {BorderSide side = BorderSide.none} , defaultValue:unprocessed
    required BorderSide side,

    /// optionalParameters: {double alignment = 0.0} , defaultValue:Literal
    double alignment = 0.0,

    /// optionalParameters: {double size = 1.0} , defaultValue:Literal
    double size = 1.0,
  }) : super.top(
          side: side,
          alignment: alignment,
          size: size,
        ) {
    mateBuilder = (p) => LinearBorder$Mate.top(
          side: p.get('side').build(),
          alignment: p.get('alignment').build(),
          size: p.get('size').build(),
        );
    mateUse('side', side);
    mateUse('alignment', alignment);
    mateUse('size', size);
  }

  /// LinearBorder LinearBorder.bottom({BorderSide side = BorderSide.none, double alignment = 0.0, double size = 1.0})
  LinearBorder$Mate.bottom({
    /// optionalParameters: {BorderSide side = BorderSide.none} , defaultValue:unprocessed
    required BorderSide side,

    /// optionalParameters: {double alignment = 0.0} , defaultValue:Literal
    double alignment = 0.0,

    /// optionalParameters: {double size = 1.0} , defaultValue:Literal
    double size = 1.0,
  }) : super.bottom(
          side: side,
          alignment: alignment,
          size: size,
        ) {
    mateBuilder = (p) => LinearBorder$Mate.bottom(
          side: p.get('side').build(),
          alignment: p.get('alignment').build(),
          size: p.get('size').build(),
        );
    mateUse('side', side);
    mateUse('alignment', alignment);
    mateUse('size', size);
  }
}
