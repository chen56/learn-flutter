// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/text_painter.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/inline_span.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/painting.dart';

/// class PlaceholderDimensions
class PlaceholderDimensions$Mate extends PlaceholderDimensions with Mate {
  /// PlaceholderDimensions PlaceholderDimensions({required Size size, required PlaceholderAlignment alignment, TextBaseline? baseline, double? baselineOffset})
  PlaceholderDimensions$Mate({
    /// optionalParameters: {required Size size} , defaultValue:none
    required Size size,

    /// optionalParameters: {required PlaceholderAlignment alignment} , defaultValue:none
    required PlaceholderAlignment alignment,

    /// optionalParameters: {TextBaseline? baseline} , defaultValue:none
    TextBaseline? baseline,

    /// optionalParameters: {double? baselineOffset} , defaultValue:none
    double? baselineOffset,
  }) : super(
          size: size,
          alignment: alignment,
          baseline: baseline,
          baselineOffset: baselineOffset,
        ) {
    mateCreateName = 'PlaceholderDimensions';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => PlaceholderDimensions$Mate(
          size: p.get('size').build(),
          alignment: p.get('alignment').build(),
          baseline: p.get('baseline').build(),
          baselineOffset: p.get('baselineOffset').build(),
        );
    mateUse('size', size, isNamed: true);
    mateUse('alignment', alignment, isNamed: true);
    mateUse('baseline', baseline, isNamed: true);
    mateUse('baselineOffset', baselineOffset, isNamed: true);
  }
}

/// class TextPainter
class TextPainter$Mate extends TextPainter with Mate {
  /// TextPainter TextPainter({InlineSpan? text, TextAlign textAlign = TextAlign.start, TextDirection? textDirection, double textScaleFactor = 1.0, int? maxLines, String? ellipsis, Locale? locale, StrutStyle? strutStyle, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior})
  TextPainter$Mate({
    /// optionalParameters: {InlineSpan? text} , defaultValue:none
    InlineSpan? text,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , defaultValue:PrefixedIdentifier
    TextAlign textAlign = TextAlign.start,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {double textScaleFactor = 1.0} , defaultValue:Literal
    double textScaleFactor = 1.0,

    /// optionalParameters: {int? maxLines} , defaultValue:none
    int? maxLines,

    /// optionalParameters: {String? ellipsis} , defaultValue:none
    String? ellipsis,

    /// optionalParameters: {Locale? locale} , defaultValue:none
    Locale? locale,

    /// optionalParameters: {StrutStyle? strutStyle} , defaultValue:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , defaultValue:PrefixedIdentifier
    TextWidthBasis textWidthBasis = TextWidthBasis.parent,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , defaultValue:none
    TextHeightBehavior? textHeightBehavior,
  }) : super(
          text: text,
          textAlign: textAlign,
          textDirection: textDirection,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          ellipsis: ellipsis,
          locale: locale,
          strutStyle: strutStyle,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
        ) {
    mateCreateName = 'TextPainter';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => TextPainter$Mate(
          text: p.get('text').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          ellipsis: p.get('ellipsis').build(),
          locale: p.get('locale').build(),
          strutStyle: p.get('strutStyle').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
        );
    mateUse('text', text, isNamed: true);
    mateUse('textAlign', textAlign, isNamed: true);
    mateUse('textDirection', textDirection, isNamed: true);
    mateUse('textScaleFactor', textScaleFactor, isNamed: true);
    mateUse('maxLines', maxLines, isNamed: true);
    mateUse('ellipsis', ellipsis, isNamed: true);
    mateUse('locale', locale, isNamed: true);
    mateUse('strutStyle', strutStyle, isNamed: true);
    mateUse('textWidthBasis', textWidthBasis, isNamed: true);
    mateUse('textHeightBehavior', textHeightBehavior, isNamed: true);
  }
}
