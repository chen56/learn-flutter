// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/painting/edge_insets.dart';import 'dart:core';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class EdgeInsets extends EdgeInsetsGeometry
class EdgeInsets$Mate extends EdgeInsets with Mate {/// EdgeInsets EdgeInsets.fromLTRB(double left, double top, double right, double bottom)
EdgeInsets$Mate.fromLTRB(/// requiredParameters: double left 
double left, /// requiredParameters: double top 
double top, /// requiredParameters: double right 
double right, /// requiredParameters: double bottom 
double bottom, ) : super.fromLTRB(left, top, right, bottom, ) { mateBuilder = (p) => EdgeInsets$Mate.fromLTRB(p.get('left').value, p.get('top').value, p.get('right').value, p.get('bottom').value, );
matePut('left', left);
matePut('top', top);
matePut('right', right);
matePut('bottom', bottom); }

/// EdgeInsets EdgeInsets.all(double value)
EdgeInsets$Mate.all(/// requiredParameters: double value 
double value) : super.all(value) { mateBuilder = (p) => EdgeInsets$Mate.all(p.get('value').value);
matePut('value', value); }

/// EdgeInsets EdgeInsets.only({double left = 0.0, double top = 0.0, double right = 0.0, double bottom = 0.0})
EdgeInsets$Mate.only({/// optionalParameters: {double left = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double left, /// optionalParameters: {double top = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double top, /// optionalParameters: {double right = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double right, /// optionalParameters: {double bottom = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double bottom, }) : super.only(left: left, top: top, right: right, bottom: bottom, ) { mateBuilder = (p) => EdgeInsets$Mate.only(left: p.get('left').build(), top: p.get('top').build(), right: p.get('right').build(), bottom: p.get('bottom').build(), );
matePut('left', left);
matePut('top', top);
matePut('right', right);
matePut('bottom', bottom); }

/// EdgeInsets EdgeInsets.symmetric({double vertical = 0.0, double horizontal = 0.0})
EdgeInsets$Mate.symmetric({/// optionalParameters: {double vertical = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double vertical, /// optionalParameters: {double horizontal = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double horizontal, }) : super.symmetric(vertical: vertical, horizontal: horizontal, ) { mateBuilder = (p) => EdgeInsets$Mate.symmetric(vertical: p.get('vertical').build(), horizontal: p.get('horizontal').build(), );
matePut('vertical', vertical);
matePut('horizontal', horizontal); }

/// EdgeInsets EdgeInsets.fromViewPadding(ViewPadding padding, double devicePixelRatio)
EdgeInsets$Mate.fromViewPadding(/// requiredParameters: ViewPadding padding 
ViewPadding padding, /// requiredParameters: double devicePixelRatio 
double devicePixelRatio, ) : super.fromViewPadding(padding, devicePixelRatio, ) { mateBuilder = (p) => EdgeInsets$Mate.fromViewPadding(p.get('padding').value, p.get('devicePixelRatio').value, );
matePut('padding', padding);
matePut('devicePixelRatio', devicePixelRatio); }

 }
/// class EdgeInsetsDirectional extends EdgeInsetsGeometry
class EdgeInsetsDirectional$Mate extends EdgeInsetsDirectional with Mate {/// EdgeInsetsDirectional EdgeInsetsDirectional.fromSTEB(double start, double top, double end, double bottom)
EdgeInsetsDirectional$Mate.fromSTEB(/// requiredParameters: double start 
double start, /// requiredParameters: double top 
double top, /// requiredParameters: double end 
double end, /// requiredParameters: double bottom 
double bottom, ) : super.fromSTEB(start, top, end, bottom, ) { mateBuilder = (p) => EdgeInsetsDirectional$Mate.fromSTEB(p.get('start').value, p.get('top').value, p.get('end').value, p.get('bottom').value, );
matePut('start', start);
matePut('top', top);
matePut('end', end);
matePut('bottom', bottom); }

/// EdgeInsetsDirectional EdgeInsetsDirectional.only({double start = 0.0, double top = 0.0, double end = 0.0, double bottom = 0.0})
EdgeInsetsDirectional$Mate.only({/// optionalParameters: {double start = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double start, /// optionalParameters: {double top = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double top, /// optionalParameters: {double end = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double end, /// optionalParameters: {double bottom = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double bottom, }) : super.only(start: start, top: top, end: end, bottom: bottom, ) { mateBuilder = (p) => EdgeInsetsDirectional$Mate.only(start: p.get('start').build(), top: p.get('top').build(), end: p.get('end').build(), bottom: p.get('bottom').build(), );
matePut('start', start);
matePut('top', top);
matePut('end', end);
matePut('bottom', bottom); }

/// EdgeInsetsDirectional EdgeInsetsDirectional.symmetric({double horizontal = 0.0, double vertical = 0.0})
EdgeInsetsDirectional$Mate.symmetric({/// optionalParameters: {double horizontal = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double horizontal, /// optionalParameters: {double vertical = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
required double vertical, }) : super.symmetric(horizontal: horizontal, vertical: vertical, ) { mateBuilder = (p) => EdgeInsetsDirectional$Mate.symmetric(horizontal: p.get('horizontal').build(), vertical: p.get('vertical').build(), );
matePut('horizontal', horizontal);
matePut('vertical', vertical); }

/// EdgeInsetsDirectional EdgeInsetsDirectional.all(double value)
EdgeInsetsDirectional$Mate.all(/// requiredParameters: double value 
double value) : super.all(value) { mateBuilder = (p) => EdgeInsetsDirectional$Mate.all(p.get('value').value);
matePut('value', value); }

 }
