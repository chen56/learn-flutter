// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/painting/inline_span.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/gestures/recognizer.dart';import 'package:note/mate.dart' show Mate;/// class Accumulator
class Accumulator$Mate extends Accumulator with Mate {/// Accumulator Accumulator([int _value = 0])
Accumulator$Mate(/// requiredParameters: [int _value = 0] 
int _value) : super(_value) { mateBuilder = (p) => Accumulator$Mate(p.get('_value').value);
matePut('_value', _value); }

 }
/// class InlineSpanSemanticsInformation
class InlineSpanSemanticsInformation$Mate extends InlineSpanSemanticsInformation with Mate {/// InlineSpanSemanticsInformation InlineSpanSemanticsInformation(String text, {bool isPlaceholder = false, String? semanticsLabel, List<StringAttribute> stringAttributes = const <ui.StringAttribute>[], GestureRecognizer? recognizer})
InlineSpanSemanticsInformation$Mate(/// requiredParameters: String text 
String text, {/// optionalParameters: {bool isPlaceholder = false} , hasDefaultValue:true, defaultValueCode:false
required bool isPlaceholder, /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
String? semanticsLabel, /// optionalParameters: {List<StringAttribute> stringAttributes = const <ui.StringAttribute>[]} , hasDefaultValue:true, defaultValueCode:const <ui.StringAttribute>[]
required List<StringAttribute> stringAttributes, /// optionalParameters: {GestureRecognizer? recognizer} , hasDefaultValue:false, defaultValueCode:null
GestureRecognizer? recognizer, }) : super(text, isPlaceholder: isPlaceholder, semanticsLabel: semanticsLabel, stringAttributes: stringAttributes, recognizer: recognizer, ) { mateBuilder = (p) => InlineSpanSemanticsInformation$Mate(p.get('text').value, isPlaceholder: p.get('isPlaceholder').build(), semanticsLabel: p.get('semanticsLabel').build(), stringAttributes: p.get('stringAttributes').build(), recognizer: p.get('recognizer').build(), );
matePut('text', text);
matePut('isPlaceholder', isPlaceholder);
matePut('semanticsLabel', semanticsLabel);
matePut('stringAttributes', stringAttributes);
matePut('recognizer', recognizer); }

 }
