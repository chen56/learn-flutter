// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/painting/matrix_utils.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:vector_math/vector_math_64.dart' as _i3;
import 'package:flutter/src/foundation/diagnostics.dart' as _i4;
import 'package:flutter/foundation.dart' as _i5;

/// class TransformProperty extends DiagnosticsProperty<Matrix4>
class TransformProperty$Mate extends _i1.TransformProperty with _i2.Mate {
  /// TransformProperty TransformProperty(String name, Matrix4? value, {bool showName = true, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  TransformProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Matrix4? value
    _i3.Matrix4? value, {
    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i4.DiagnosticLevel level = _i5.DiagnosticLevel.info,
  }) : super(
          name,
          value,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateBuilderName = 'TransformProperty';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TransformProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i5.DiagnosticLevel.info,
    );
  }
}
