// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/matrix_utils.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class TransformProperty extends DiagnosticsProperty<Matrix4>
class TransformProperty$Mate extends TransformProperty with Mate {
  /// TransformProperty TransformProperty(String name, Matrix4? value, {bool showName = true, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  TransformProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Matrix4? value
    Matrix4? value, {
    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateCreateName = 'TransformProperty';
    matePackageUrl = 'package:flutter/painting.dart';
    mateBuilder = (p) => TransformProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name, isNamed: false);
    mateUse('value', value, isNamed: false);
    mateUse('showName', showName, isNamed: true);
    mateUse('defaultValue', defaultValue, isNamed: true);
    mateUse('level', level, isNamed: true);
  }
}
