// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/animation/animations.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/animation/animation.dart';
import 'dart:core';
import 'package:flutter/src/animation/curves.dart';
import 'dart:ui';

/// class AlwaysStoppedAnimation<T> extends Animation<T>
class AlwaysStoppedAnimation$Mate<T> extends AlwaysStoppedAnimation<T> with Mate {
  /// AlwaysStoppedAnimation<T> AlwaysStoppedAnimation(T value)
  AlwaysStoppedAnimation$Mate(

      /// requiredParameters: T value
      T value)
      : super(value) {
    mateBuilderName = 'AlwaysStoppedAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AlwaysStoppedAnimation$Mate<T>(p.get('value').value);
    mateUse(
      'value',
      value,
      isNamed: false,
    );
  }
}

/// class ProxyAnimation extends Animation<double> with AnimationLazyListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class ProxyAnimation$Mate extends ProxyAnimation with Mate {
  /// ProxyAnimation ProxyAnimation([Animation<double>? animation])
  ProxyAnimation$Mate(

      /// requiredParameters: [Animation<double>? animation]
      Animation<double>? animation)
      : super(animation) {
    mateBuilderName = 'ProxyAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ProxyAnimation$Mate(p.get('animation').value);
    mateUse(
      'animation',
      animation,
      isNamed: false,
    );
  }
}

/// class ReverseAnimation extends Animation<double> with AnimationLazyListenerMixin, AnimationLocalStatusListenersMixin
class ReverseAnimation$Mate extends ReverseAnimation with Mate {
  /// ReverseAnimation ReverseAnimation(Animation<double> parent)
  ReverseAnimation$Mate(

      /// requiredParameters: Animation<double> parent
      Animation<double> parent)
      : super(parent) {
    mateBuilderName = 'ReverseAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ReverseAnimation$Mate(p.get('parent').value);
    mateUse(
      'parent',
      parent,
      isNamed: false,
    );
  }
}

/// class CurvedAnimation extends Animation<double> with AnimationWithParentMixin<double>
class CurvedAnimation$Mate extends CurvedAnimation with Mate {
  /// CurvedAnimation CurvedAnimation({required Animation<double> parent, required Curve curve, Curve? reverseCurve})
  CurvedAnimation$Mate({
    /// optionalParameters: {required Animation<double> parent} , default:none
    required Animation<double> parent,

    /// optionalParameters: {required Curve curve} , default:none
    required Curve curve,

    /// optionalParameters: {Curve? reverseCurve} , default:none
    Curve? reverseCurve,
  }) : super(
          parent: parent,
          curve: curve,
          reverseCurve: reverseCurve,
        ) {
    mateBuilderName = 'CurvedAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => CurvedAnimation$Mate(
          parent: p.get('parent').build(),
          curve: p.get('curve').build(),
          reverseCurve: p.get('reverseCurve').build(),
        );
    mateUse(
      'parent',
      parent,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
    );
    mateUse(
      'reverseCurve',
      reverseCurve,
      isNamed: true,
    );
  }
}

/// class TrainHoppingAnimation extends Animation<double> with AnimationEagerListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class TrainHoppingAnimation$Mate extends TrainHoppingAnimation with Mate {
  /// TrainHoppingAnimation TrainHoppingAnimation(Animation<double> _currentTrain, Animation<double>? _nextTrain, {void Function()? onSwitchedTrain})
  TrainHoppingAnimation$Mate(
    /// requiredParameters: Animation<double> _currentTrain
    Animation<double> _currentTrain,

    /// requiredParameters: Animation<double>? _nextTrain
    Animation<double>? _nextTrain, {
    /// optionalParameters: {void Function()? onSwitchedTrain} , default:none
    VoidCallback? onSwitchedTrain,
  }) : super(
          _currentTrain,
          _nextTrain,
          onSwitchedTrain: onSwitchedTrain,
        ) {
    mateBuilderName = 'TrainHoppingAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => TrainHoppingAnimation$Mate(
          p.get('_currentTrain').value,
          p.get('_nextTrain').value,
          onSwitchedTrain: p.get('onSwitchedTrain').build(),
        );
    mateUse(
      '_currentTrain',
      _currentTrain,
      isNamed: false,
    );
    mateUse(
      '_nextTrain',
      _nextTrain,
      isNamed: false,
    );
    mateUse(
      'onSwitchedTrain',
      onSwitchedTrain,
      isNamed: true,
    );
  }
}

/// class AnimationMean extends CompoundAnimation<double>
class AnimationMean$Mate extends AnimationMean with Mate {
  /// AnimationMean AnimationMean({required Animation<double> left, required Animation<double> right})
  AnimationMean$Mate({
    /// optionalParameters: {required Animation<double> left} , default:none
    required Animation<double> left,

    /// optionalParameters: {required Animation<double> right} , default:none
    required Animation<double> right,
  }) : super(
          left: left,
          right: right,
        ) {
    mateBuilderName = 'AnimationMean';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationMean$Mate(
          left: p.get('left').build(),
          right: p.get('right').build(),
        );
    mateUse(
      'left',
      left,
      isNamed: true,
    );
    mateUse(
      'right',
      right,
      isNamed: true,
    );
  }
}

/// class AnimationMax<T extends num> extends CompoundAnimation<T>
class AnimationMax$Mate<T extends num> extends AnimationMax<T> with Mate {
  /// AnimationMax<T> AnimationMax(Animation<T> first, Animation<T> next)
  AnimationMax$Mate(
    /// requiredParameters: Animation<T> first
    Animation<T> first,

    /// requiredParameters: Animation<T> next
    Animation<T> next,
  ) : super(
          first,
          next,
        ) {
    mateBuilderName = 'AnimationMax';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationMax$Mate<T>(
          p.get('first').value,
          p.get('next').value,
        );
    mateUse(
      'first',
      first,
      isNamed: false,
    );
    mateUse(
      'next',
      next,
      isNamed: false,
    );
  }
}

/// class AnimationMin<T extends num> extends CompoundAnimation<T>
class AnimationMin$Mate<T extends num> extends AnimationMin<T> with Mate {
  /// AnimationMin<T> AnimationMin(Animation<T> first, Animation<T> next)
  AnimationMin$Mate(
    /// requiredParameters: Animation<T> first
    Animation<T> first,

    /// requiredParameters: Animation<T> next
    Animation<T> next,
  ) : super(
          first,
          next,
        ) {
    mateBuilderName = 'AnimationMin';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationMin$Mate<T>(
          p.get('first').value,
          p.get('next').value,
        );
    mateUse(
      'first',
      first,
      isNamed: false,
    );
    mateUse(
      'next',
      next,
      isNamed: false,
    );
  }
}
