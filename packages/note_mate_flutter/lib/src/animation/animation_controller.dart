// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/animation/animation_controller.dart';
import 'dart:core';
import 'package:flutter/src/scheduler/ticker.dart';
import 'package:note/mate.dart';

/// class AnimationController extends Animation<double> with AnimationEagerListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class AnimationController$Mate extends AnimationController with Mate<AnimationController$Mate> {
  /// AnimationController AnimationController({double? value, Duration? duration, Duration? reverseDuration, String? debugLabel, double lowerBound = 0.0, double upperBound = 1.0, AnimationBehavior animationBehavior = AnimationBehavior.normal, required TickerProvider vsync})
  AnimationController$Mate({
    /// optionalParameters: {double? value} , hasDefaultValue:false, defaultValueCode:null
    double? value,

    /// optionalParameters: {Duration? duration} , hasDefaultValue:false, defaultValueCode:null
    Duration? duration,

    /// optionalParameters: {Duration? reverseDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? reverseDuration,

    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,

    /// optionalParameters: {double lowerBound = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double lowerBound,

    /// optionalParameters: {double upperBound = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double upperBound,

    /// optionalParameters: {AnimationBehavior animationBehavior = AnimationBehavior.normal} , hasDefaultValue:true, defaultValueCode:AnimationBehavior.normal
    required AnimationBehavior animationBehavior,

    /// optionalParameters: {required TickerProvider vsync} , hasDefaultValue:false, defaultValueCode:null
    required TickerProvider vsync,
  }) : super(
          value: value,
          duration: duration,
          reverseDuration: reverseDuration,
          debugLabel: debugLabel,
          lowerBound: lowerBound,
          upperBound: upperBound,
          animationBehavior: animationBehavior,
          vsync: vsync,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AnimationController$Mate(
        value: p.get('value').build(),
        duration: p.get('duration').build(),
        reverseDuration: p.get('reverseDuration').build(),
        debugLabel: p.get('debugLabel').build(),
        lowerBound: p.get('lowerBound').build(),
        upperBound: p.get('upperBound').build(),
        animationBehavior: p.get('animationBehavior').build(),
        vsync: p.get('vsync').build(),
      ),
    );
    mateParams.put('value', value);
    mateParams.put('duration', duration);
    mateParams.put('reverseDuration', reverseDuration);
    mateParams.put('debugLabel', debugLabel);
    mateParams.put('lowerBound', lowerBound);
    mateParams.put('upperBound', upperBound);
    mateParams.put('animationBehavior', animationBehavior);
    mateParams.put('vsync', vsync);
  }

  /// AnimationController AnimationController.unbounded({double value = 0.0, Duration? duration, Duration? reverseDuration, String? debugLabel, required TickerProvider vsync, AnimationBehavior animationBehavior = AnimationBehavior.preserve})
  AnimationController$Mate.unbounded({
    /// optionalParameters: {double value = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double value,

    /// optionalParameters: {Duration? duration} , hasDefaultValue:false, defaultValueCode:null
    Duration? duration,

    /// optionalParameters: {Duration? reverseDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? reverseDuration,

    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,

    /// optionalParameters: {required TickerProvider vsync} , hasDefaultValue:false, defaultValueCode:null
    required TickerProvider vsync,

    /// optionalParameters: {AnimationBehavior animationBehavior = AnimationBehavior.preserve} , hasDefaultValue:true, defaultValueCode:AnimationBehavior.preserve
    required AnimationBehavior animationBehavior,
  }) : super.unbounded(
          value: value,
          duration: duration,
          reverseDuration: reverseDuration,
          debugLabel: debugLabel,
          vsync: vsync,
          animationBehavior: animationBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AnimationController$Mate.unbounded(
        value: p.get('value').build(),
        duration: p.get('duration').build(),
        reverseDuration: p.get('reverseDuration').build(),
        debugLabel: p.get('debugLabel').build(),
        vsync: p.get('vsync').build(),
        animationBehavior: p.get('animationBehavior').build(),
      ),
    );
    mateParams.put('value', value);
    mateParams.put('duration', duration);
    mateParams.put('reverseDuration', reverseDuration);
    mateParams.put('debugLabel', debugLabel);
    mateParams.put('vsync', vsync);
    mateParams.put('animationBehavior', animationBehavior);
  }
}
