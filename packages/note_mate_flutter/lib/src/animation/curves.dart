// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/animation/curves.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/animation.dart';
import 'dart:ui';

/// class SawTooth extends Curve
class SawTooth$Mate extends SawTooth with Mate {
  /// SawTooth SawTooth(int count)
  SawTooth$Mate(

      /// requiredParameters: int count
      int count)
      : super(count) {
    mateCreateName = 'SawTooth';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => SawTooth$Mate(p.get('count').value);
    mateUse(
      'count',
      count,
      isNamed: false,
    );
  }
}

/// class Interval extends Curve
class Interval$Mate extends Interval with Mate {
  /// Interval Interval(double begin, double end, {Curve curve = Curves.linear})
  Interval$Mate(
    /// requiredParameters: double begin
    double begin,

    /// requiredParameters: double end
    double end, {
    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,
  }) : super(
          begin,
          end,
          curve: curve,
        ) {
    mateCreateName = 'Interval';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => Interval$Mate(
          p.get('begin').value,
          p.get('end').value,
          curve: p.get('curve').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: false,
    );
    mateUse(
      'end',
      end,
      isNamed: false,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
  }
}

/// class Threshold extends Curve
class Threshold$Mate extends Threshold with Mate {
  /// Threshold Threshold(double threshold)
  Threshold$Mate(

      /// requiredParameters: double threshold
      double threshold)
      : super(threshold) {
    mateCreateName = 'Threshold';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => Threshold$Mate(p.get('threshold').value);
    mateUse(
      'threshold',
      threshold,
      isNamed: false,
    );
  }
}

/// class Cubic extends Curve
class Cubic$Mate extends Cubic with Mate {
  /// Cubic Cubic(double a, double b, double c, double d)
  Cubic$Mate(
    /// requiredParameters: double a
    double a,

    /// requiredParameters: double b
    double b,

    /// requiredParameters: double c
    double c,

    /// requiredParameters: double d
    double d,
  ) : super(
          a,
          b,
          c,
          d,
        ) {
    mateCreateName = 'Cubic';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => Cubic$Mate(
          p.get('a').value,
          p.get('b').value,
          p.get('c').value,
          p.get('d').value,
        );
    mateUse(
      'a',
      a,
      isNamed: false,
    );
    mateUse(
      'b',
      b,
      isNamed: false,
    );
    mateUse(
      'c',
      c,
      isNamed: false,
    );
    mateUse(
      'd',
      d,
      isNamed: false,
    );
  }
}

/// class ThreePointCubic extends Curve
class ThreePointCubic$Mate extends ThreePointCubic with Mate {
  /// ThreePointCubic ThreePointCubic(Offset a1, Offset b1, Offset midpoint, Offset a2, Offset b2)
  ThreePointCubic$Mate(
    /// requiredParameters: Offset a1
    Offset a1,

    /// requiredParameters: Offset b1
    Offset b1,

    /// requiredParameters: Offset midpoint
    Offset midpoint,

    /// requiredParameters: Offset a2
    Offset a2,

    /// requiredParameters: Offset b2
    Offset b2,
  ) : super(
          a1,
          b1,
          midpoint,
          a2,
          b2,
        ) {
    mateCreateName = 'ThreePointCubic';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ThreePointCubic$Mate(
          p.get('a1').value,
          p.get('b1').value,
          p.get('midpoint').value,
          p.get('a2').value,
          p.get('b2').value,
        );
    mateUse(
      'a1',
      a1,
      isNamed: false,
    );
    mateUse(
      'b1',
      b1,
      isNamed: false,
    );
    mateUse(
      'midpoint',
      midpoint,
      isNamed: false,
    );
    mateUse(
      'a2',
      a2,
      isNamed: false,
    );
    mateUse(
      'b2',
      b2,
      isNamed: false,
    );
  }
}

/// class Curve2DSample
class Curve2DSample$Mate extends Curve2DSample with Mate {
  /// Curve2DSample Curve2DSample(double t, Offset value)
  Curve2DSample$Mate(
    /// requiredParameters: double t
    double t,

    /// requiredParameters: Offset value
    Offset value,
  ) : super(
          t,
          value,
        ) {
    mateCreateName = 'Curve2DSample';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => Curve2DSample$Mate(
          p.get('t').value,
          p.get('value').value,
        );
    mateUse(
      't',
      t,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
  }
}

/// class CatmullRomSpline extends Curve2D
class CatmullRomSpline$Mate extends CatmullRomSpline with Mate {
  /// CatmullRomSpline CatmullRomSpline(List<Offset> controlPoints, {double tension = 0.0, Offset? startHandle, Offset? endHandle})
  CatmullRomSpline$Mate(
    /// requiredParameters: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// optionalParameters: {double tension = 0.0} , default:processed=DoubleLiteralImpl
    double tension = 0.0,

    /// optionalParameters: {Offset? startHandle} , default:none
    Offset? startHandle,

    /// optionalParameters: {Offset? endHandle} , default:none
    Offset? endHandle,
  }) : super(
          controlPoints,
          tension: tension,
          startHandle: startHandle,
          endHandle: endHandle,
        ) {
    mateCreateName = 'CatmullRomSpline';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => CatmullRomSpline$Mate(
          p.get('controlPoints').value,
          tension: p.get('tension').build(),
          startHandle: p.get('startHandle').build(),
          endHandle: p.get('endHandle').build(),
        );
    mateUseList(
      'controlPoints',
      controlPoints,
      isNamed: false,
    );
    mateUse(
      'tension',
      tension,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'startHandle',
      startHandle,
      isNamed: true,
    );
    mateUse(
      'endHandle',
      endHandle,
      isNamed: true,
    );
  }

  /// CatmullRomSpline CatmullRomSpline.precompute(List<Offset> controlPoints, {double tension = 0.0, Offset? startHandle, Offset? endHandle})
  CatmullRomSpline$Mate.precompute(
    /// requiredParameters: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// optionalParameters: {double tension = 0.0} , default:processed=DoubleLiteralImpl
    double tension = 0.0,

    /// optionalParameters: {Offset? startHandle} , default:none
    Offset? startHandle,

    /// optionalParameters: {Offset? endHandle} , default:none
    Offset? endHandle,
  }) : super.precompute(
          controlPoints,
          tension: tension,
          startHandle: startHandle,
          endHandle: endHandle,
        ) {
    mateCreateName = 'CatmullRomSpline.precompute';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => CatmullRomSpline$Mate.precompute(
          p.get('controlPoints').value,
          tension: p.get('tension').build(),
          startHandle: p.get('startHandle').build(),
          endHandle: p.get('endHandle').build(),
        );
    mateUseList(
      'controlPoints',
      controlPoints,
      isNamed: false,
    );
    mateUse(
      'tension',
      tension,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'startHandle',
      startHandle,
      isNamed: true,
    );
    mateUse(
      'endHandle',
      endHandle,
      isNamed: true,
    );
  }
}

/// class CatmullRomCurve extends Curve
class CatmullRomCurve$Mate extends CatmullRomCurve with Mate {
  /// CatmullRomCurve CatmullRomCurve(List<Offset> controlPoints, {double tension = 0.0})
  CatmullRomCurve$Mate(
    /// requiredParameters: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// optionalParameters: {double tension = 0.0} , default:processed=DoubleLiteralImpl
    double tension = 0.0,
  }) : super(
          controlPoints,
          tension: tension,
        ) {
    mateCreateName = 'CatmullRomCurve';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => CatmullRomCurve$Mate(
          p.get('controlPoints').value,
          tension: p.get('tension').build(),
        );
    mateUseList(
      'controlPoints',
      controlPoints,
      isNamed: false,
    );
    mateUse(
      'tension',
      tension,
      isNamed: true,
      defaultValue: 0.0,
    );
  }

  /// CatmullRomCurve CatmullRomCurve.precompute(List<Offset> controlPoints, {double tension = 0.0})
  CatmullRomCurve$Mate.precompute(
    /// requiredParameters: List<Offset> controlPoints
    List<Offset> controlPoints, {
    /// optionalParameters: {double tension = 0.0} , default:processed=DoubleLiteralImpl
    double tension = 0.0,
  }) : super.precompute(
          controlPoints,
          tension: tension,
        ) {
    mateCreateName = 'CatmullRomCurve.precompute';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => CatmullRomCurve$Mate.precompute(
          p.get('controlPoints').value,
          tension: p.get('tension').build(),
        );
    mateUseList(
      'controlPoints',
      controlPoints,
      isNamed: false,
    );
    mateUse(
      'tension',
      tension,
      isNamed: true,
      defaultValue: 0.0,
    );
  }
}

/// class FlippedCurve extends Curve
class FlippedCurve$Mate extends FlippedCurve with Mate {
  /// FlippedCurve FlippedCurve(Curve curve)
  FlippedCurve$Mate(

      /// requiredParameters: Curve curve
      Curve curve)
      : super(curve) {
    mateCreateName = 'FlippedCurve';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => FlippedCurve$Mate(p.get('curve').value);
    mateUse(
      'curve',
      curve,
      isNamed: false,
    );
  }
}

/// class ElasticInCurve extends Curve
class ElasticInCurve$Mate extends ElasticInCurve with Mate {
  /// ElasticInCurve ElasticInCurve([double period = 0.4])
  ElasticInCurve$Mate(

      /// requiredParameters: [double period = 0.4]
      double period)
      : super(period) {
    mateCreateName = 'ElasticInCurve';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ElasticInCurve$Mate(p.get('period').value);
    mateUse(
      'period',
      period,
      isNamed: false,
      defaultValue: 0.4,
    );
  }
}

/// class ElasticOutCurve extends Curve
class ElasticOutCurve$Mate extends ElasticOutCurve with Mate {
  /// ElasticOutCurve ElasticOutCurve([double period = 0.4])
  ElasticOutCurve$Mate(

      /// requiredParameters: [double period = 0.4]
      double period)
      : super(period) {
    mateCreateName = 'ElasticOutCurve';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ElasticOutCurve$Mate(p.get('period').value);
    mateUse(
      'period',
      period,
      isNamed: false,
      defaultValue: 0.4,
    );
  }
}

/// class ElasticInOutCurve extends Curve
class ElasticInOutCurve$Mate extends ElasticInOutCurve with Mate {
  /// ElasticInOutCurve ElasticInOutCurve([double period = 0.4])
  ElasticInOutCurve$Mate(

      /// requiredParameters: [double period = 0.4]
      double period)
      : super(period) {
    mateCreateName = 'ElasticInOutCurve';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ElasticInOutCurve$Mate(p.get('period').value);
    mateUse(
      'period',
      period,
      isNamed: false,
      defaultValue: 0.4,
    );
  }
}
