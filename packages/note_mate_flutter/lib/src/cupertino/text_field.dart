// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/text_field.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/box_decoration.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/services/text_formatter.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:note/mate.dart';

/// class CupertinoTextField extends StatefulWidget
class CupertinoTextField$Mate extends CupertinoTextField with Mate<CupertinoTextField$Mate> {
  /// CupertinoTextField CupertinoTextField({Key? key, TextEditingController? controller, FocusNode? focusNode, BoxDecoration? decoration = _kDefaultRoundedBorderDecoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText), Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, void Function()? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})
  CupertinoTextField$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {TextEditingController? controller} , hasDefaultValue:false, defaultValueCode:null
    TextEditingController? controller,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {BoxDecoration? decoration = _kDefaultRoundedBorderDecoration} , hasDefaultValue:true, defaultValueCode:_kDefaultRoundedBorderDecoration
    BoxDecoration? decoration,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(7.0)} , hasDefaultValue:true, defaultValueCode:const EdgeInsets.all(7.0)
    required EdgeInsetsGeometry padding,

    /// optionalParameters: {String? placeholder} , hasDefaultValue:false, defaultValueCode:null
    String? placeholder,

    /// optionalParameters: {TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText)} , hasDefaultValue:true, defaultValueCode:const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText)
    TextStyle? placeholderStyle,

    /// optionalParameters: {Widget? prefix} , hasDefaultValue:false, defaultValueCode:null
    Widget? prefix,

    /// optionalParameters: {OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always} , hasDefaultValue:true, defaultValueCode:OverlayVisibilityMode.always
    required OverlayVisibilityMode prefixMode,

    /// optionalParameters: {Widget? suffix} , hasDefaultValue:false, defaultValueCode:null
    Widget? suffix,

    /// optionalParameters: {OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always} , hasDefaultValue:true, defaultValueCode:OverlayVisibilityMode.always
    required OverlayVisibilityMode suffixMode,

    /// optionalParameters: {OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never} , hasDefaultValue:true, defaultValueCode:OverlayVisibilityMode.never
    required OverlayVisibilityMode clearButtonMode,

    /// optionalParameters: {TextInputType? keyboardType} , hasDefaultValue:false, defaultValueCode:null
    TextInputType? keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , hasDefaultValue:false, defaultValueCode:null
    TextInputAction? textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , hasDefaultValue:true, defaultValueCode:TextCapitalization.none
    required TextCapitalization textCapitalization,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , hasDefaultValue:true, defaultValueCode:TextAlign.start
    required TextAlign textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , hasDefaultValue:false, defaultValueCode:null
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {bool readOnly = false} , hasDefaultValue:true, defaultValueCode:false
    required bool readOnly,

    /// optionalParameters: {bool? showCursor} , hasDefaultValue:false, defaultValueCode:null
    bool? showCursor,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {String obscuringCharacter = '•'} , hasDefaultValue:true, defaultValueCode:'•'
    required String obscuringCharacter,

    /// optionalParameters: {bool obscureText = false} , hasDefaultValue:true, defaultValueCode:false
    required bool obscureText,

    /// optionalParameters: {bool autocorrect = true} , hasDefaultValue:true, defaultValueCode:true
    required bool autocorrect,

    /// optionalParameters: {SmartDashesType? smartDashesType} , hasDefaultValue:false, defaultValueCode:null
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , hasDefaultValue:false, defaultValueCode:null
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableSuggestions,

    /// optionalParameters: {int? maxLines = 1} , hasDefaultValue:true, defaultValueCode:1
    int? maxLines,

    /// optionalParameters: {int? minLines} , hasDefaultValue:false, defaultValueCode:null
    int? minLines,

    /// optionalParameters: {bool expands = false} , hasDefaultValue:true, defaultValueCode:false
    required bool expands,

    /// optionalParameters: {int? maxLength} , hasDefaultValue:false, defaultValueCode:null
    int? maxLength,

    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , hasDefaultValue:false, defaultValueCode:null
    MaxLengthEnforcement? maxLengthEnforcement,

    /// optionalParameters: {void Function(String)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<String>? onSubmitted,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , hasDefaultValue:false, defaultValueCode:null
    TapRegionCallback? onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , hasDefaultValue:false, defaultValueCode:null
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {bool? enabled} , hasDefaultValue:false, defaultValueCode:null
    bool? enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , hasDefaultValue:true, defaultValueCode:2.0
    required double cursorWidth,

    /// optionalParameters: {double? cursorHeight} , hasDefaultValue:false, defaultValueCode:null
    double? cursorHeight,

    /// optionalParameters: {Radius cursorRadius = const Radius.circular(2.0)} , hasDefaultValue:true, defaultValueCode:const Radius.circular(2.0)
    required Radius cursorRadius,

    /// optionalParameters: {Color? cursorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxHeightStyle.tight
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxWidthStyle.tight
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {Brightness? keyboardAppearance} , hasDefaultValue:false, defaultValueCode:null
    Brightness? keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , hasDefaultValue:true, defaultValueCode:const EdgeInsets.all(20.0)
    required EdgeInsets scrollPadding,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , hasDefaultValue:false, defaultValueCode:null
    bool? enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
    TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTap,

    /// optionalParameters: {ScrollController? scrollController} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , hasDefaultValue:true, defaultValueCode:const <String>[]
    Iterable<String>? autofillHints,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , hasDefaultValue:false, defaultValueCode:null
    ContentInsertionConfiguration? contentInsertionConfiguration,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {bool scribbleEnabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool scribbleEnabled,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableIMEPersonalizedLearning,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , hasDefaultValue:true, defaultValueCode:_defaultContextMenuBuilder
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , hasDefaultValue:false, defaultValueCode:null
    SpellCheckConfiguration? spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , hasDefaultValue:false, defaultValueCode:null
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super(
          key: key,
          controller: controller,
          focusNode: focusNode,
          decoration: decoration,
          padding: padding,
          placeholder: placeholder,
          placeholderStyle: placeholderStyle,
          prefix: prefix,
          prefixMode: prefixMode,
          suffix: suffix,
          suffixMode: suffixMode,
          clearButtonMode: clearButtonMode,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          textCapitalization: textCapitalization,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          textDirection: textDirection,
          readOnly: readOnly,
          showCursor: showCursor,
          autofocus: autofocus,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          maxLength: maxLength,
          maxLengthEnforcement: maxLengthEnforcement,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          onTapOutside: onTapOutside,
          inputFormatters: inputFormatters,
          enabled: enabled,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          keyboardAppearance: keyboardAppearance,
          scrollPadding: scrollPadding,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollController: scrollController,
          scrollPhysics: scrollPhysics,
          autofillHints: autofillHints,
          contentInsertionConfiguration: contentInsertionConfiguration,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scribbleEnabled: scribbleEnabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          contextMenuBuilder: contextMenuBuilder,
          spellCheckConfiguration: spellCheckConfiguration,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoTextField$Mate(
        key: p.get('key').build(),
        controller: p.get('controller').build(),
        focusNode: p.get('focusNode').build(),
        decoration: p.get('decoration').build(),
        padding: p.get('padding').build(),
        placeholder: p.get('placeholder').build(),
        placeholderStyle: p.get('placeholderStyle').build(),
        prefix: p.get('prefix').build(),
        prefixMode: p.get('prefixMode').build(),
        suffix: p.get('suffix').build(),
        suffixMode: p.get('suffixMode').build(),
        clearButtonMode: p.get('clearButtonMode').build(),
        keyboardType: p.get('keyboardType').build(),
        textInputAction: p.get('textInputAction').build(),
        textCapitalization: p.get('textCapitalization').build(),
        style: p.get('style').build(),
        strutStyle: p.get('strutStyle').build(),
        textAlign: p.get('textAlign').build(),
        textAlignVertical: p.get('textAlignVertical').build(),
        textDirection: p.get('textDirection').build(),
        readOnly: p.get('readOnly').build(),
        showCursor: p.get('showCursor').build(),
        autofocus: p.get('autofocus').build(),
        obscuringCharacter: p.get('obscuringCharacter').build(),
        obscureText: p.get('obscureText').build(),
        autocorrect: p.get('autocorrect').build(),
        smartDashesType: p.get('smartDashesType').build(),
        smartQuotesType: p.get('smartQuotesType').build(),
        enableSuggestions: p.get('enableSuggestions').build(),
        maxLines: p.get('maxLines').build(),
        minLines: p.get('minLines').build(),
        expands: p.get('expands').build(),
        maxLength: p.get('maxLength').build(),
        maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
        onChanged: p.get('onChanged').build(),
        onEditingComplete: p.get('onEditingComplete').build(),
        onSubmitted: p.get('onSubmitted').build(),
        onTapOutside: p.get('onTapOutside').build(),
        inputFormatters: p.get('inputFormatters').build(),
        enabled: p.get('enabled').build(),
        cursorWidth: p.get('cursorWidth').build(),
        cursorHeight: p.get('cursorHeight').build(),
        cursorRadius: p.get('cursorRadius').build(),
        cursorColor: p.get('cursorColor').build(),
        selectionHeightStyle: p.get('selectionHeightStyle').build(),
        selectionWidthStyle: p.get('selectionWidthStyle').build(),
        keyboardAppearance: p.get('keyboardAppearance').build(),
        scrollPadding: p.get('scrollPadding').build(),
        dragStartBehavior: p.get('dragStartBehavior').build(),
        enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
        selectionControls: p.get('selectionControls').build(),
        onTap: p.get('onTap').build(),
        scrollController: p.get('scrollController').build(),
        scrollPhysics: p.get('scrollPhysics').build(),
        autofillHints: p.get('autofillHints').build(),
        contentInsertionConfiguration: p.get('contentInsertionConfiguration').build(),
        clipBehavior: p.get('clipBehavior').build(),
        restorationId: p.get('restorationId').build(),
        scribbleEnabled: p.get('scribbleEnabled').build(),
        enableIMEPersonalizedLearning: p.get('enableIMEPersonalizedLearning').build(),
        contextMenuBuilder: p.get('contextMenuBuilder').build(),
        spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
        magnifierConfiguration: p.get('magnifierConfiguration').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('controller', controller);
    mateParams.put('focusNode', focusNode);
    mateParams.put('decoration', decoration);
    mateParams.put('padding', padding);
    mateParams.put('placeholder', placeholder);
    mateParams.put('placeholderStyle', placeholderStyle);
    mateParams.put('prefix', prefix);
    mateParams.put('prefixMode', prefixMode);
    mateParams.put('suffix', suffix);
    mateParams.put('suffixMode', suffixMode);
    mateParams.put('clearButtonMode', clearButtonMode);
    mateParams.put('keyboardType', keyboardType);
    mateParams.put('textInputAction', textInputAction);
    mateParams.put('textCapitalization', textCapitalization);
    mateParams.put('style', style);
    mateParams.put('strutStyle', strutStyle);
    mateParams.put('textAlign', textAlign);
    mateParams.put('textAlignVertical', textAlignVertical);
    mateParams.put('textDirection', textDirection);
    mateParams.put('readOnly', readOnly);
    mateParams.put('showCursor', showCursor);
    mateParams.put('autofocus', autofocus);
    mateParams.put('obscuringCharacter', obscuringCharacter);
    mateParams.put('obscureText', obscureText);
    mateParams.put('autocorrect', autocorrect);
    mateParams.put('smartDashesType', smartDashesType);
    mateParams.put('smartQuotesType', smartQuotesType);
    mateParams.put('enableSuggestions', enableSuggestions);
    mateParams.put('maxLines', maxLines);
    mateParams.put('minLines', minLines);
    mateParams.put('expands', expands);
    mateParams.put('maxLength', maxLength);
    mateParams.put('maxLengthEnforcement', maxLengthEnforcement);
    mateParams.put('onChanged', onChanged);
    mateParams.put('onEditingComplete', onEditingComplete);
    mateParams.put('onSubmitted', onSubmitted);
    mateParams.put('onTapOutside', onTapOutside);
    mateParams.putList('inputFormatters', inputFormatters);
    mateParams.put('enabled', enabled);
    mateParams.put('cursorWidth', cursorWidth);
    mateParams.put('cursorHeight', cursorHeight);
    mateParams.put('cursorRadius', cursorRadius);
    mateParams.put('cursorColor', cursorColor);
    mateParams.put('selectionHeightStyle', selectionHeightStyle);
    mateParams.put('selectionWidthStyle', selectionWidthStyle);
    mateParams.put('keyboardAppearance', keyboardAppearance);
    mateParams.put('scrollPadding', scrollPadding);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('enableInteractiveSelection', enableInteractiveSelection);
    mateParams.put('selectionControls', selectionControls);
    mateParams.put('onTap', onTap);
    mateParams.put('scrollController', scrollController);
    mateParams.put('scrollPhysics', scrollPhysics);
    mateParams.put('autofillHints', autofillHints);
    mateParams.put('contentInsertionConfiguration', contentInsertionConfiguration);
    mateParams.put('clipBehavior', clipBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('scribbleEnabled', scribbleEnabled);
    mateParams.put('enableIMEPersonalizedLearning', enableIMEPersonalizedLearning);
    mateParams.put('contextMenuBuilder', contextMenuBuilder);
    mateParams.put('spellCheckConfiguration', spellCheckConfiguration);
    mateParams.put('magnifierConfiguration', magnifierConfiguration);
  }

  /// CupertinoTextField CupertinoTextField.borderless({Key? key, TextEditingController? controller, FocusNode? focusNode, BoxDecoration? decoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = _kDefaultPlaceholderStyle, Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, void Function()? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})
  CupertinoTextField$Mate.borderless({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {TextEditingController? controller} , hasDefaultValue:false, defaultValueCode:null
    TextEditingController? controller,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {BoxDecoration? decoration} , hasDefaultValue:false, defaultValueCode:null
    BoxDecoration? decoration,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(7.0)} , hasDefaultValue:true, defaultValueCode:const EdgeInsets.all(7.0)
    required EdgeInsetsGeometry padding,

    /// optionalParameters: {String? placeholder} , hasDefaultValue:false, defaultValueCode:null
    String? placeholder,

    /// optionalParameters: {TextStyle? placeholderStyle = _kDefaultPlaceholderStyle} , hasDefaultValue:true, defaultValueCode:_kDefaultPlaceholderStyle
    TextStyle? placeholderStyle,

    /// optionalParameters: {Widget? prefix} , hasDefaultValue:false, defaultValueCode:null
    Widget? prefix,

    /// optionalParameters: {OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always} , hasDefaultValue:true, defaultValueCode:OverlayVisibilityMode.always
    required OverlayVisibilityMode prefixMode,

    /// optionalParameters: {Widget? suffix} , hasDefaultValue:false, defaultValueCode:null
    Widget? suffix,

    /// optionalParameters: {OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always} , hasDefaultValue:true, defaultValueCode:OverlayVisibilityMode.always
    required OverlayVisibilityMode suffixMode,

    /// optionalParameters: {OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never} , hasDefaultValue:true, defaultValueCode:OverlayVisibilityMode.never
    required OverlayVisibilityMode clearButtonMode,

    /// optionalParameters: {TextInputType? keyboardType} , hasDefaultValue:false, defaultValueCode:null
    TextInputType? keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , hasDefaultValue:false, defaultValueCode:null
    TextInputAction? textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , hasDefaultValue:true, defaultValueCode:TextCapitalization.none
    required TextCapitalization textCapitalization,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , hasDefaultValue:true, defaultValueCode:TextAlign.start
    required TextAlign textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , hasDefaultValue:false, defaultValueCode:null
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {bool readOnly = false} , hasDefaultValue:true, defaultValueCode:false
    required bool readOnly,

    /// optionalParameters: {bool? showCursor} , hasDefaultValue:false, defaultValueCode:null
    bool? showCursor,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {String obscuringCharacter = '•'} , hasDefaultValue:true, defaultValueCode:'•'
    required String obscuringCharacter,

    /// optionalParameters: {bool obscureText = false} , hasDefaultValue:true, defaultValueCode:false
    required bool obscureText,

    /// optionalParameters: {bool autocorrect = true} , hasDefaultValue:true, defaultValueCode:true
    required bool autocorrect,

    /// optionalParameters: {SmartDashesType? smartDashesType} , hasDefaultValue:false, defaultValueCode:null
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , hasDefaultValue:false, defaultValueCode:null
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableSuggestions,

    /// optionalParameters: {int? maxLines = 1} , hasDefaultValue:true, defaultValueCode:1
    int? maxLines,

    /// optionalParameters: {int? minLines} , hasDefaultValue:false, defaultValueCode:null
    int? minLines,

    /// optionalParameters: {bool expands = false} , hasDefaultValue:true, defaultValueCode:false
    required bool expands,

    /// optionalParameters: {int? maxLength} , hasDefaultValue:false, defaultValueCode:null
    int? maxLength,

    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , hasDefaultValue:false, defaultValueCode:null
    MaxLengthEnforcement? maxLengthEnforcement,

    /// optionalParameters: {void Function(String)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<String>? onSubmitted,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , hasDefaultValue:false, defaultValueCode:null
    TapRegionCallback? onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , hasDefaultValue:false, defaultValueCode:null
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {bool? enabled} , hasDefaultValue:false, defaultValueCode:null
    bool? enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , hasDefaultValue:true, defaultValueCode:2.0
    required double cursorWidth,

    /// optionalParameters: {double? cursorHeight} , hasDefaultValue:false, defaultValueCode:null
    double? cursorHeight,

    /// optionalParameters: {Radius cursorRadius = const Radius.circular(2.0)} , hasDefaultValue:true, defaultValueCode:const Radius.circular(2.0)
    required Radius cursorRadius,

    /// optionalParameters: {Color? cursorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxHeightStyle.tight
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , hasDefaultValue:true, defaultValueCode:ui.BoxWidthStyle.tight
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {Brightness? keyboardAppearance} , hasDefaultValue:false, defaultValueCode:null
    Brightness? keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , hasDefaultValue:true, defaultValueCode:const EdgeInsets.all(20.0)
    required EdgeInsets scrollPadding,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , hasDefaultValue:false, defaultValueCode:null
    bool? enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
    TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTap,

    /// optionalParameters: {ScrollController? scrollController} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , hasDefaultValue:true, defaultValueCode:const <String>[]
    Iterable<String>? autofillHints,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , hasDefaultValue:false, defaultValueCode:null
    ContentInsertionConfiguration? contentInsertionConfiguration,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {bool scribbleEnabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool scribbleEnabled,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableIMEPersonalizedLearning,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , hasDefaultValue:true, defaultValueCode:_defaultContextMenuBuilder
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , hasDefaultValue:false, defaultValueCode:null
    SpellCheckConfiguration? spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , hasDefaultValue:false, defaultValueCode:null
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super.borderless(
          key: key,
          controller: controller,
          focusNode: focusNode,
          decoration: decoration,
          padding: padding,
          placeholder: placeholder,
          placeholderStyle: placeholderStyle,
          prefix: prefix,
          prefixMode: prefixMode,
          suffix: suffix,
          suffixMode: suffixMode,
          clearButtonMode: clearButtonMode,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          textCapitalization: textCapitalization,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          textDirection: textDirection,
          readOnly: readOnly,
          showCursor: showCursor,
          autofocus: autofocus,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          maxLength: maxLength,
          maxLengthEnforcement: maxLengthEnforcement,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          onTapOutside: onTapOutside,
          inputFormatters: inputFormatters,
          enabled: enabled,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          keyboardAppearance: keyboardAppearance,
          scrollPadding: scrollPadding,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollController: scrollController,
          scrollPhysics: scrollPhysics,
          autofillHints: autofillHints,
          contentInsertionConfiguration: contentInsertionConfiguration,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scribbleEnabled: scribbleEnabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          contextMenuBuilder: contextMenuBuilder,
          spellCheckConfiguration: spellCheckConfiguration,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoTextField$Mate.borderless(
        key: p.get('key').build(),
        controller: p.get('controller').build(),
        focusNode: p.get('focusNode').build(),
        decoration: p.get('decoration').build(),
        padding: p.get('padding').build(),
        placeholder: p.get('placeholder').build(),
        placeholderStyle: p.get('placeholderStyle').build(),
        prefix: p.get('prefix').build(),
        prefixMode: p.get('prefixMode').build(),
        suffix: p.get('suffix').build(),
        suffixMode: p.get('suffixMode').build(),
        clearButtonMode: p.get('clearButtonMode').build(),
        keyboardType: p.get('keyboardType').build(),
        textInputAction: p.get('textInputAction').build(),
        textCapitalization: p.get('textCapitalization').build(),
        style: p.get('style').build(),
        strutStyle: p.get('strutStyle').build(),
        textAlign: p.get('textAlign').build(),
        textAlignVertical: p.get('textAlignVertical').build(),
        textDirection: p.get('textDirection').build(),
        readOnly: p.get('readOnly').build(),
        showCursor: p.get('showCursor').build(),
        autofocus: p.get('autofocus').build(),
        obscuringCharacter: p.get('obscuringCharacter').build(),
        obscureText: p.get('obscureText').build(),
        autocorrect: p.get('autocorrect').build(),
        smartDashesType: p.get('smartDashesType').build(),
        smartQuotesType: p.get('smartQuotesType').build(),
        enableSuggestions: p.get('enableSuggestions').build(),
        maxLines: p.get('maxLines').build(),
        minLines: p.get('minLines').build(),
        expands: p.get('expands').build(),
        maxLength: p.get('maxLength').build(),
        maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
        onChanged: p.get('onChanged').build(),
        onEditingComplete: p.get('onEditingComplete').build(),
        onSubmitted: p.get('onSubmitted').build(),
        onTapOutside: p.get('onTapOutside').build(),
        inputFormatters: p.get('inputFormatters').build(),
        enabled: p.get('enabled').build(),
        cursorWidth: p.get('cursorWidth').build(),
        cursorHeight: p.get('cursorHeight').build(),
        cursorRadius: p.get('cursorRadius').build(),
        cursorColor: p.get('cursorColor').build(),
        selectionHeightStyle: p.get('selectionHeightStyle').build(),
        selectionWidthStyle: p.get('selectionWidthStyle').build(),
        keyboardAppearance: p.get('keyboardAppearance').build(),
        scrollPadding: p.get('scrollPadding').build(),
        dragStartBehavior: p.get('dragStartBehavior').build(),
        enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
        selectionControls: p.get('selectionControls').build(),
        onTap: p.get('onTap').build(),
        scrollController: p.get('scrollController').build(),
        scrollPhysics: p.get('scrollPhysics').build(),
        autofillHints: p.get('autofillHints').build(),
        contentInsertionConfiguration: p.get('contentInsertionConfiguration').build(),
        clipBehavior: p.get('clipBehavior').build(),
        restorationId: p.get('restorationId').build(),
        scribbleEnabled: p.get('scribbleEnabled').build(),
        enableIMEPersonalizedLearning: p.get('enableIMEPersonalizedLearning').build(),
        contextMenuBuilder: p.get('contextMenuBuilder').build(),
        spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
        magnifierConfiguration: p.get('magnifierConfiguration').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('controller', controller);
    mateParams.put('focusNode', focusNode);
    mateParams.put('decoration', decoration);
    mateParams.put('padding', padding);
    mateParams.put('placeholder', placeholder);
    mateParams.put('placeholderStyle', placeholderStyle);
    mateParams.put('prefix', prefix);
    mateParams.put('prefixMode', prefixMode);
    mateParams.put('suffix', suffix);
    mateParams.put('suffixMode', suffixMode);
    mateParams.put('clearButtonMode', clearButtonMode);
    mateParams.put('keyboardType', keyboardType);
    mateParams.put('textInputAction', textInputAction);
    mateParams.put('textCapitalization', textCapitalization);
    mateParams.put('style', style);
    mateParams.put('strutStyle', strutStyle);
    mateParams.put('textAlign', textAlign);
    mateParams.put('textAlignVertical', textAlignVertical);
    mateParams.put('textDirection', textDirection);
    mateParams.put('readOnly', readOnly);
    mateParams.put('showCursor', showCursor);
    mateParams.put('autofocus', autofocus);
    mateParams.put('obscuringCharacter', obscuringCharacter);
    mateParams.put('obscureText', obscureText);
    mateParams.put('autocorrect', autocorrect);
    mateParams.put('smartDashesType', smartDashesType);
    mateParams.put('smartQuotesType', smartQuotesType);
    mateParams.put('enableSuggestions', enableSuggestions);
    mateParams.put('maxLines', maxLines);
    mateParams.put('minLines', minLines);
    mateParams.put('expands', expands);
    mateParams.put('maxLength', maxLength);
    mateParams.put('maxLengthEnforcement', maxLengthEnforcement);
    mateParams.put('onChanged', onChanged);
    mateParams.put('onEditingComplete', onEditingComplete);
    mateParams.put('onSubmitted', onSubmitted);
    mateParams.put('onTapOutside', onTapOutside);
    mateParams.putList('inputFormatters', inputFormatters);
    mateParams.put('enabled', enabled);
    mateParams.put('cursorWidth', cursorWidth);
    mateParams.put('cursorHeight', cursorHeight);
    mateParams.put('cursorRadius', cursorRadius);
    mateParams.put('cursorColor', cursorColor);
    mateParams.put('selectionHeightStyle', selectionHeightStyle);
    mateParams.put('selectionWidthStyle', selectionWidthStyle);
    mateParams.put('keyboardAppearance', keyboardAppearance);
    mateParams.put('scrollPadding', scrollPadding);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('enableInteractiveSelection', enableInteractiveSelection);
    mateParams.put('selectionControls', selectionControls);
    mateParams.put('onTap', onTap);
    mateParams.put('scrollController', scrollController);
    mateParams.put('scrollPhysics', scrollPhysics);
    mateParams.put('autofillHints', autofillHints);
    mateParams.put('contentInsertionConfiguration', contentInsertionConfiguration);
    mateParams.put('clipBehavior', clipBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('scribbleEnabled', scribbleEnabled);
    mateParams.put('enableIMEPersonalizedLearning', enableIMEPersonalizedLearning);
    mateParams.put('contextMenuBuilder', contextMenuBuilder);
    mateParams.put('spellCheckConfiguration', spellCheckConfiguration);
    mateParams.put('magnifierConfiguration', magnifierConfiguration);
  }
}
