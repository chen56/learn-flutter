// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/text_field.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/box_decoration.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/services/text_formatter.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/src/widgets/magnifier.dart';

/// class CupertinoTextField extends StatefulWidget
class CupertinoTextField$Mate extends CupertinoTextField with Mate {
  /// CupertinoTextField CupertinoTextField({Key? key, TextEditingController? controller, FocusNode? focusNode, BoxDecoration? decoration = _kDefaultRoundedBorderDecoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText), Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, void Function()? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})
  CupertinoTextField$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {TextEditingController? controller} , defaultValue:none
    TextEditingController? controller,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {BoxDecoration? decoration = _kDefaultRoundedBorderDecoration} , defaultValue:unprocessed
    BoxDecoration? decoration,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(7.0)} , defaultValue:unprocessed
    required EdgeInsetsGeometry padding,

    /// optionalParameters: {String? placeholder} , defaultValue:none
    String? placeholder,

    /// optionalParameters: {TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText)} , defaultValue:unprocessed
    TextStyle? placeholderStyle,

    /// optionalParameters: {Widget? prefix} , defaultValue:none
    Widget? prefix,

    /// optionalParameters: {OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always} , defaultValue:unprocessed
    required OverlayVisibilityMode prefixMode,

    /// optionalParameters: {Widget? suffix} , defaultValue:none
    Widget? suffix,

    /// optionalParameters: {OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always} , defaultValue:unprocessed
    required OverlayVisibilityMode suffixMode,

    /// optionalParameters: {OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never} , defaultValue:unprocessed
    required OverlayVisibilityMode clearButtonMode,

    /// optionalParameters: {TextInputType? keyboardType} , defaultValue:none
    TextInputType? keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , defaultValue:none
    TextInputAction? textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , defaultValue:unprocessed
    required TextCapitalization textCapitalization,

    /// optionalParameters: {TextStyle? style} , defaultValue:none
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , defaultValue:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , defaultValue:unprocessed
    required TextAlign textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , defaultValue:none
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {bool readOnly = false} , defaultValue:Literal
    bool readOnly = false,

    /// optionalParameters: {bool? showCursor} , defaultValue:none
    bool? showCursor,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {String obscuringCharacter = '•'} , defaultValue:Literal
    String obscuringCharacter = '•',

    /// optionalParameters: {bool obscureText = false} , defaultValue:Literal
    bool obscureText = false,

    /// optionalParameters: {bool autocorrect = true} , defaultValue:Literal
    bool autocorrect = true,

    /// optionalParameters: {SmartDashesType? smartDashesType} , defaultValue:none
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , defaultValue:none
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , defaultValue:Literal
    bool enableSuggestions = true,

    /// optionalParameters: {int? maxLines = 1} , defaultValue:Literal
    int? maxLines = 1,

    /// optionalParameters: {int? minLines} , defaultValue:none
    int? minLines,

    /// optionalParameters: {bool expands = false} , defaultValue:Literal
    bool expands = false,

    /// optionalParameters: {int? maxLength} , defaultValue:none
    int? maxLength,

    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , defaultValue:none
    MaxLengthEnforcement? maxLengthEnforcement,

    /// optionalParameters: {void Function(String)? onChanged} , defaultValue:none
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , defaultValue:none
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , defaultValue:none
    ValueChanged<String>? onSubmitted,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , defaultValue:none
    TapRegionCallback? onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , defaultValue:none
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {bool? enabled} , defaultValue:none
    bool? enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , defaultValue:Literal
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , defaultValue:none
    double? cursorHeight,

    /// optionalParameters: {Radius cursorRadius = const Radius.circular(2.0)} , defaultValue:unprocessed
    required Radius cursorRadius,

    /// optionalParameters: {Color? cursorColor} , defaultValue:none
    Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , defaultValue:unprocessed
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , defaultValue:unprocessed
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {Brightness? keyboardAppearance} , defaultValue:none
    Brightness? keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , defaultValue:unprocessed
    required EdgeInsets scrollPadding,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , defaultValue:none
    bool? enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , defaultValue:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {ScrollController? scrollController} , defaultValue:none
    ScrollController? scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , defaultValue:none
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , defaultValue:unprocessed
    Iterable<String>? autofillHints,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , defaultValue:none
    ContentInsertionConfiguration? contentInsertionConfiguration,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {bool scribbleEnabled = true} , defaultValue:Literal
    bool scribbleEnabled = true,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , defaultValue:Literal
    bool enableIMEPersonalizedLearning = true,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , defaultValue:unprocessed
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , defaultValue:none
    SpellCheckConfiguration? spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , defaultValue:none
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super(
          key: key,
          controller: controller,
          focusNode: focusNode,
          decoration: decoration,
          padding: padding,
          placeholder: placeholder,
          placeholderStyle: placeholderStyle,
          prefix: prefix,
          prefixMode: prefixMode,
          suffix: suffix,
          suffixMode: suffixMode,
          clearButtonMode: clearButtonMode,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          textCapitalization: textCapitalization,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          textDirection: textDirection,
          readOnly: readOnly,
          showCursor: showCursor,
          autofocus: autofocus,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          maxLength: maxLength,
          maxLengthEnforcement: maxLengthEnforcement,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          onTapOutside: onTapOutside,
          inputFormatters: inputFormatters,
          enabled: enabled,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          keyboardAppearance: keyboardAppearance,
          scrollPadding: scrollPadding,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollController: scrollController,
          scrollPhysics: scrollPhysics,
          autofillHints: autofillHints,
          contentInsertionConfiguration: contentInsertionConfiguration,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scribbleEnabled: scribbleEnabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          contextMenuBuilder: contextMenuBuilder,
          spellCheckConfiguration: spellCheckConfiguration,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilder = (p) => CupertinoTextField$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          focusNode: p.get('focusNode').build(),
          decoration: p.get('decoration').build(),
          padding: p.get('padding').build(),
          placeholder: p.get('placeholder').build(),
          placeholderStyle: p.get('placeholderStyle').build(),
          prefix: p.get('prefix').build(),
          prefixMode: p.get('prefixMode').build(),
          suffix: p.get('suffix').build(),
          suffixMode: p.get('suffixMode').build(),
          clearButtonMode: p.get('clearButtonMode').build(),
          keyboardType: p.get('keyboardType').build(),
          textInputAction: p.get('textInputAction').build(),
          textCapitalization: p.get('textCapitalization').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          textDirection: p.get('textDirection').build(),
          readOnly: p.get('readOnly').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          maxLength: p.get('maxLength').build(),
          maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
          onChanged: p.get('onChanged').build(),
          onEditingComplete: p.get('onEditingComplete').build(),
          onSubmitted: p.get('onSubmitted').build(),
          onTapOutside: p.get('onTapOutside').build(),
          inputFormatters: p.get('inputFormatters').build(),
          enabled: p.get('enabled').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          scrollPadding: p.get('scrollPadding').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection:
              p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollController: p.get('scrollController').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          autofillHints: p.get('autofillHints').build(),
          contentInsertionConfiguration:
              p.get('contentInsertionConfiguration').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scribbleEnabled: p.get('scribbleEnabled').build(),
          enableIMEPersonalizedLearning:
              p.get('enableIMEPersonalizedLearning').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('focusNode', focusNode);
    mateUse('decoration', decoration);
    mateUse('padding', padding);
    mateUse('placeholder', placeholder);
    mateUse('placeholderStyle', placeholderStyle);
    mateUse('prefix', prefix);
    mateUse('prefixMode', prefixMode);
    mateUse('suffix', suffix);
    mateUse('suffixMode', suffixMode);
    mateUse('clearButtonMode', clearButtonMode);
    mateUse('keyboardType', keyboardType);
    mateUse('textInputAction', textInputAction);
    mateUse('textCapitalization', textCapitalization);
    mateUse('style', style);
    mateUse('strutStyle', strutStyle);
    mateUse('textAlign', textAlign);
    mateUse('textAlignVertical', textAlignVertical);
    mateUse('textDirection', textDirection);
    mateUse('readOnly', readOnly);
    mateUse('showCursor', showCursor);
    mateUse('autofocus', autofocus);
    mateUse('obscuringCharacter', obscuringCharacter);
    mateUse('obscureText', obscureText);
    mateUse('autocorrect', autocorrect);
    mateUse('smartDashesType', smartDashesType);
    mateUse('smartQuotesType', smartQuotesType);
    mateUse('enableSuggestions', enableSuggestions);
    mateUse('maxLines', maxLines);
    mateUse('minLines', minLines);
    mateUse('expands', expands);
    mateUse('maxLength', maxLength);
    mateUse('maxLengthEnforcement', maxLengthEnforcement);
    mateUse('onChanged', onChanged);
    mateUse('onEditingComplete', onEditingComplete);
    mateUse('onSubmitted', onSubmitted);
    mateUse('onTapOutside', onTapOutside);
    mateUse('inputFormatters', inputFormatters);
    mateUse('enabled', enabled);
    mateUse('cursorWidth', cursorWidth);
    mateUse('cursorHeight', cursorHeight);
    mateUse('cursorRadius', cursorRadius);
    mateUse('cursorColor', cursorColor);
    mateUse('selectionHeightStyle', selectionHeightStyle);
    mateUse('selectionWidthStyle', selectionWidthStyle);
    mateUse('keyboardAppearance', keyboardAppearance);
    mateUse('scrollPadding', scrollPadding);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('enableInteractiveSelection', enableInteractiveSelection);
    mateUse('selectionControls', selectionControls);
    mateUse('onTap', onTap);
    mateUse('scrollController', scrollController);
    mateUse('scrollPhysics', scrollPhysics);
    mateUse('autofillHints', autofillHints);
    mateUse('contentInsertionConfiguration', contentInsertionConfiguration);
    mateUse('clipBehavior', clipBehavior);
    mateUse('restorationId', restorationId);
    mateUse('scribbleEnabled', scribbleEnabled);
    mateUse('enableIMEPersonalizedLearning', enableIMEPersonalizedLearning);
    mateUse('contextMenuBuilder', contextMenuBuilder);
    mateUse('spellCheckConfiguration', spellCheckConfiguration);
    mateUse('magnifierConfiguration', magnifierConfiguration);
  }

  /// CupertinoTextField CupertinoTextField.borderless({Key? key, TextEditingController? controller, FocusNode? focusNode, BoxDecoration? decoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = _kDefaultPlaceholderStyle, Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, void Function()? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})
  CupertinoTextField$Mate.borderless({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {TextEditingController? controller} , defaultValue:none
    TextEditingController? controller,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {BoxDecoration? decoration} , defaultValue:none
    BoxDecoration? decoration,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(7.0)} , defaultValue:unprocessed
    required EdgeInsetsGeometry padding,

    /// optionalParameters: {String? placeholder} , defaultValue:none
    String? placeholder,

    /// optionalParameters: {TextStyle? placeholderStyle = _kDefaultPlaceholderStyle} , defaultValue:unprocessed
    TextStyle? placeholderStyle,

    /// optionalParameters: {Widget? prefix} , defaultValue:none
    Widget? prefix,

    /// optionalParameters: {OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always} , defaultValue:unprocessed
    required OverlayVisibilityMode prefixMode,

    /// optionalParameters: {Widget? suffix} , defaultValue:none
    Widget? suffix,

    /// optionalParameters: {OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always} , defaultValue:unprocessed
    required OverlayVisibilityMode suffixMode,

    /// optionalParameters: {OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never} , defaultValue:unprocessed
    required OverlayVisibilityMode clearButtonMode,

    /// optionalParameters: {TextInputType? keyboardType} , defaultValue:none
    TextInputType? keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , defaultValue:none
    TextInputAction? textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , defaultValue:unprocessed
    required TextCapitalization textCapitalization,

    /// optionalParameters: {TextStyle? style} , defaultValue:none
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , defaultValue:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , defaultValue:unprocessed
    required TextAlign textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , defaultValue:none
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {bool readOnly = false} , defaultValue:Literal
    bool readOnly = false,

    /// optionalParameters: {bool? showCursor} , defaultValue:none
    bool? showCursor,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {String obscuringCharacter = '•'} , defaultValue:Literal
    String obscuringCharacter = '•',

    /// optionalParameters: {bool obscureText = false} , defaultValue:Literal
    bool obscureText = false,

    /// optionalParameters: {bool autocorrect = true} , defaultValue:Literal
    bool autocorrect = true,

    /// optionalParameters: {SmartDashesType? smartDashesType} , defaultValue:none
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , defaultValue:none
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , defaultValue:Literal
    bool enableSuggestions = true,

    /// optionalParameters: {int? maxLines = 1} , defaultValue:Literal
    int? maxLines = 1,

    /// optionalParameters: {int? minLines} , defaultValue:none
    int? minLines,

    /// optionalParameters: {bool expands = false} , defaultValue:Literal
    bool expands = false,

    /// optionalParameters: {int? maxLength} , defaultValue:none
    int? maxLength,

    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , defaultValue:none
    MaxLengthEnforcement? maxLengthEnforcement,

    /// optionalParameters: {void Function(String)? onChanged} , defaultValue:none
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , defaultValue:none
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , defaultValue:none
    ValueChanged<String>? onSubmitted,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , defaultValue:none
    TapRegionCallback? onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , defaultValue:none
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {bool? enabled} , defaultValue:none
    bool? enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , defaultValue:Literal
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , defaultValue:none
    double? cursorHeight,

    /// optionalParameters: {Radius cursorRadius = const Radius.circular(2.0)} , defaultValue:unprocessed
    required Radius cursorRadius,

    /// optionalParameters: {Color? cursorColor} , defaultValue:none
    Color? cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , defaultValue:unprocessed
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , defaultValue:unprocessed
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {Brightness? keyboardAppearance} , defaultValue:none
    Brightness? keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , defaultValue:unprocessed
    required EdgeInsets scrollPadding,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , defaultValue:none
    bool? enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , defaultValue:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {ScrollController? scrollController} , defaultValue:none
    ScrollController? scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , defaultValue:none
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , defaultValue:unprocessed
    Iterable<String>? autofillHints,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , defaultValue:none
    ContentInsertionConfiguration? contentInsertionConfiguration,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {bool scribbleEnabled = true} , defaultValue:Literal
    bool scribbleEnabled = true,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , defaultValue:Literal
    bool enableIMEPersonalizedLearning = true,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , defaultValue:unprocessed
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , defaultValue:none
    SpellCheckConfiguration? spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , defaultValue:none
    TextMagnifierConfiguration? magnifierConfiguration,
  }) : super.borderless(
          key: key,
          controller: controller,
          focusNode: focusNode,
          decoration: decoration,
          padding: padding,
          placeholder: placeholder,
          placeholderStyle: placeholderStyle,
          prefix: prefix,
          prefixMode: prefixMode,
          suffix: suffix,
          suffixMode: suffixMode,
          clearButtonMode: clearButtonMode,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          textCapitalization: textCapitalization,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          textDirection: textDirection,
          readOnly: readOnly,
          showCursor: showCursor,
          autofocus: autofocus,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          maxLength: maxLength,
          maxLengthEnforcement: maxLengthEnforcement,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          onTapOutside: onTapOutside,
          inputFormatters: inputFormatters,
          enabled: enabled,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorColor: cursorColor,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          keyboardAppearance: keyboardAppearance,
          scrollPadding: scrollPadding,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          onTap: onTap,
          scrollController: scrollController,
          scrollPhysics: scrollPhysics,
          autofillHints: autofillHints,
          contentInsertionConfiguration: contentInsertionConfiguration,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scribbleEnabled: scribbleEnabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          contextMenuBuilder: contextMenuBuilder,
          spellCheckConfiguration: spellCheckConfiguration,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilder = (p) => CupertinoTextField$Mate.borderless(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          focusNode: p.get('focusNode').build(),
          decoration: p.get('decoration').build(),
          padding: p.get('padding').build(),
          placeholder: p.get('placeholder').build(),
          placeholderStyle: p.get('placeholderStyle').build(),
          prefix: p.get('prefix').build(),
          prefixMode: p.get('prefixMode').build(),
          suffix: p.get('suffix').build(),
          suffixMode: p.get('suffixMode').build(),
          clearButtonMode: p.get('clearButtonMode').build(),
          keyboardType: p.get('keyboardType').build(),
          textInputAction: p.get('textInputAction').build(),
          textCapitalization: p.get('textCapitalization').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          textDirection: p.get('textDirection').build(),
          readOnly: p.get('readOnly').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          maxLength: p.get('maxLength').build(),
          maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
          onChanged: p.get('onChanged').build(),
          onEditingComplete: p.get('onEditingComplete').build(),
          onSubmitted: p.get('onSubmitted').build(),
          onTapOutside: p.get('onTapOutside').build(),
          inputFormatters: p.get('inputFormatters').build(),
          enabled: p.get('enabled').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          scrollPadding: p.get('scrollPadding').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection:
              p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollController: p.get('scrollController').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          autofillHints: p.get('autofillHints').build(),
          contentInsertionConfiguration:
              p.get('contentInsertionConfiguration').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scribbleEnabled: p.get('scribbleEnabled').build(),
          enableIMEPersonalizedLearning:
              p.get('enableIMEPersonalizedLearning').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('focusNode', focusNode);
    mateUse('decoration', decoration);
    mateUse('padding', padding);
    mateUse('placeholder', placeholder);
    mateUse('placeholderStyle', placeholderStyle);
    mateUse('prefix', prefix);
    mateUse('prefixMode', prefixMode);
    mateUse('suffix', suffix);
    mateUse('suffixMode', suffixMode);
    mateUse('clearButtonMode', clearButtonMode);
    mateUse('keyboardType', keyboardType);
    mateUse('textInputAction', textInputAction);
    mateUse('textCapitalization', textCapitalization);
    mateUse('style', style);
    mateUse('strutStyle', strutStyle);
    mateUse('textAlign', textAlign);
    mateUse('textAlignVertical', textAlignVertical);
    mateUse('textDirection', textDirection);
    mateUse('readOnly', readOnly);
    mateUse('showCursor', showCursor);
    mateUse('autofocus', autofocus);
    mateUse('obscuringCharacter', obscuringCharacter);
    mateUse('obscureText', obscureText);
    mateUse('autocorrect', autocorrect);
    mateUse('smartDashesType', smartDashesType);
    mateUse('smartQuotesType', smartQuotesType);
    mateUse('enableSuggestions', enableSuggestions);
    mateUse('maxLines', maxLines);
    mateUse('minLines', minLines);
    mateUse('expands', expands);
    mateUse('maxLength', maxLength);
    mateUse('maxLengthEnforcement', maxLengthEnforcement);
    mateUse('onChanged', onChanged);
    mateUse('onEditingComplete', onEditingComplete);
    mateUse('onSubmitted', onSubmitted);
    mateUse('onTapOutside', onTapOutside);
    mateUse('inputFormatters', inputFormatters);
    mateUse('enabled', enabled);
    mateUse('cursorWidth', cursorWidth);
    mateUse('cursorHeight', cursorHeight);
    mateUse('cursorRadius', cursorRadius);
    mateUse('cursorColor', cursorColor);
    mateUse('selectionHeightStyle', selectionHeightStyle);
    mateUse('selectionWidthStyle', selectionWidthStyle);
    mateUse('keyboardAppearance', keyboardAppearance);
    mateUse('scrollPadding', scrollPadding);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('enableInteractiveSelection', enableInteractiveSelection);
    mateUse('selectionControls', selectionControls);
    mateUse('onTap', onTap);
    mateUse('scrollController', scrollController);
    mateUse('scrollPhysics', scrollPhysics);
    mateUse('autofillHints', autofillHints);
    mateUse('contentInsertionConfiguration', contentInsertionConfiguration);
    mateUse('clipBehavior', clipBehavior);
    mateUse('restorationId', restorationId);
    mateUse('scribbleEnabled', scribbleEnabled);
    mateUse('enableIMEPersonalizedLearning', enableIMEPersonalizedLearning);
    mateUse('contextMenuBuilder', contextMenuBuilder);
    mateUse('spellCheckConfiguration', spellCheckConfiguration);
    mateUse('magnifierConfiguration', magnifierConfiguration);
  }
}
