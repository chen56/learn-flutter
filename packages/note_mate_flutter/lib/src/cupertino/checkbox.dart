// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/cupertino/checkbox.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/foundation/basic_types.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/widgets/focus_manager.dart' as _i6;
import 'package:flutter/src/painting/borders.dart' as _i7;

/// class CupertinoCheckbox extends StatefulWidget
class CupertinoCheckbox$Mate extends _i1.CupertinoCheckbox with _i2.Mate {
  /// CupertinoCheckbox CupertinoCheckbox({Key? key, required bool? value, bool tristate = false, required void Function(bool?)? onChanged, Color? activeColor, Color? inactiveColor, Color? checkColor, Color? focusColor, FocusNode? focusNode, bool autofocus = false, BorderSide? side, OutlinedBorder? shape})
  CupertinoCheckbox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required bool? value} , default:none
    required bool? value,

    /// optionalParameters: {bool tristate = false} , default:processed=BooleanLiteralImpl
    bool tristate = false,

    /// optionalParameters: {required void Function(bool?)? onChanged} , default:none
    required _i4.ValueChanged<bool?>? onChanged,

    /// optionalParameters: {Color? activeColor} , default:none
    _i5.Color? activeColor,

    /// optionalParameters: {Color? inactiveColor} , default:none
    _i5.Color? inactiveColor,

    /// optionalParameters: {Color? checkColor} , default:none
    _i5.Color? checkColor,

    /// optionalParameters: {Color? focusColor} , default:none
    _i5.Color? focusColor,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    _i6.FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {BorderSide? side} , default:none
    _i7.BorderSide? side,

    /// optionalParameters: {OutlinedBorder? shape} , default:none
    _i7.OutlinedBorder? shape,
  }) : super(
          key: key,
          value: value,
          tristate: tristate,
          onChanged: onChanged,
          activeColor: activeColor,
          inactiveColor: inactiveColor,
          checkColor: checkColor,
          focusColor: focusColor,
          focusNode: focusNode,
          autofocus: autofocus,
          side: side,
          shape: shape,
        ) {
    mateBuilderName = 'CupertinoCheckbox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoCheckbox$Mate(
          key: p.get('key').build(),
          value: p.get('value').build(),
          tristate: p.get('tristate').build(),
          onChanged: p.get('onChanged').build(),
          activeColor: p.get('activeColor').build(),
          inactiveColor: p.get('inactiveColor').build(),
          checkColor: p.get('checkColor').build(),
          focusColor: p.get('focusColor').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          side: p.get('side').build(),
          shape: p.get('shape').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'tristate',
      tristate,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'activeColor',
      activeColor,
      isNamed: true,
    );
    mateUse(
      'inactiveColor',
      inactiveColor,
      isNamed: true,
    );
    mateUse(
      'checkColor',
      checkColor,
      isNamed: true,
    );
    mateUse(
      'focusColor',
      focusColor,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'side',
      side,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
  }
}
