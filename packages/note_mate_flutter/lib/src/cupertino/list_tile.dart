// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/list_tile.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:core';

/// class CupertinoListTile extends StatefulWidget
class CupertinoListTile$Mate extends CupertinoListTile with Mate {
  /// CupertinoListTile CupertinoListTile({Key? key, required Widget title, Widget? subtitle, Widget? additionalInfo, Widget? leading, Widget? trailing, FutureOr<void> Function()? onTap, Color? backgroundColor, Color? backgroundColorActivated, EdgeInsetsGeometry? padding, double leadingSize = _kLeadingSize, double leadingToTitle = _kLeadingToTitle})
  CupertinoListTile$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget title} , hasDefaultValue:false, defaultValueCode:null
    required Widget title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {Widget? additionalInfo} , hasDefaultValue:false, defaultValueCode:null
    Widget? additionalInfo,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {FutureOr<void> Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    FutureOr<void> Function()? onTap,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? backgroundColorActivated} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColorActivated,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double leadingSize = _kLeadingSize} , hasDefaultValue:true, defaultValueCode:_kLeadingSize
    required double leadingSize,

    /// optionalParameters: {double leadingToTitle = _kLeadingToTitle} , hasDefaultValue:true, defaultValueCode:_kLeadingToTitle
    required double leadingToTitle,
  }) : super(
          key: key,
          title: title,
          subtitle: subtitle,
          additionalInfo: additionalInfo,
          leading: leading,
          trailing: trailing,
          onTap: onTap,
          backgroundColor: backgroundColor,
          backgroundColorActivated: backgroundColorActivated,
          padding: padding,
          leadingSize: leadingSize,
          leadingToTitle: leadingToTitle,
        ) {
    mateBuilder = (p) => CupertinoListTile$Mate(
          key: p.get('key').build(),
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          additionalInfo: p.get('additionalInfo').build(),
          leading: p.get('leading').build(),
          trailing: p.get('trailing').build(),
          onTap: p.get('onTap').build(),
          backgroundColor: p.get('backgroundColor').build(),
          backgroundColorActivated: p.get('backgroundColorActivated').build(),
          padding: p.get('padding').build(),
          leadingSize: p.get('leadingSize').build(),
          leadingToTitle: p.get('leadingToTitle').build(),
        );
    matePut('key', key);
    matePut('title', title);
    matePut('subtitle', subtitle);
    matePut('additionalInfo', additionalInfo);
    matePut('leading', leading);
    matePut('trailing', trailing);
    matePut('onTap', onTap);
    matePut('backgroundColor', backgroundColor);
    matePut('backgroundColorActivated', backgroundColorActivated);
    matePut('padding', padding);
    matePut('leadingSize', leadingSize);
    matePut('leadingToTitle', leadingToTitle);
  }

  /// CupertinoListTile CupertinoListTile.notched({Key? key, required Widget title, Widget? subtitle, Widget? additionalInfo, Widget? leading, Widget? trailing, FutureOr<void> Function()? onTap, Color? backgroundColor, Color? backgroundColorActivated, EdgeInsetsGeometry? padding, double leadingSize = _kNotchedLeadingSize, double leadingToTitle = _kNotchedLeadingToTitle})
  CupertinoListTile$Mate.notched({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget title} , hasDefaultValue:false, defaultValueCode:null
    required Widget title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {Widget? additionalInfo} , hasDefaultValue:false, defaultValueCode:null
    Widget? additionalInfo,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {FutureOr<void> Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    FutureOr<void> Function()? onTap,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? backgroundColorActivated} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColorActivated,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double leadingSize = _kNotchedLeadingSize} , hasDefaultValue:true, defaultValueCode:_kNotchedLeadingSize
    required double leadingSize,

    /// optionalParameters: {double leadingToTitle = _kNotchedLeadingToTitle} , hasDefaultValue:true, defaultValueCode:_kNotchedLeadingToTitle
    required double leadingToTitle,
  }) : super.notched(
          key: key,
          title: title,
          subtitle: subtitle,
          additionalInfo: additionalInfo,
          leading: leading,
          trailing: trailing,
          onTap: onTap,
          backgroundColor: backgroundColor,
          backgroundColorActivated: backgroundColorActivated,
          padding: padding,
          leadingSize: leadingSize,
          leadingToTitle: leadingToTitle,
        ) {
    mateBuilder = (p) => CupertinoListTile$Mate.notched(
          key: p.get('key').build(),
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          additionalInfo: p.get('additionalInfo').build(),
          leading: p.get('leading').build(),
          trailing: p.get('trailing').build(),
          onTap: p.get('onTap').build(),
          backgroundColor: p.get('backgroundColor').build(),
          backgroundColorActivated: p.get('backgroundColorActivated').build(),
          padding: p.get('padding').build(),
          leadingSize: p.get('leadingSize').build(),
          leadingToTitle: p.get('leadingToTitle').build(),
        );
    matePut('key', key);
    matePut('title', title);
    matePut('subtitle', subtitle);
    matePut('additionalInfo', additionalInfo);
    matePut('leading', leading);
    matePut('trailing', trailing);
    matePut('onTap', onTap);
    matePut('backgroundColor', backgroundColor);
    matePut('backgroundColorActivated', backgroundColorActivated);
    matePut('padding', padding);
    matePut('leadingSize', leadingSize);
    matePut('leadingToTitle', leadingToTitle);
  }
}

/// class CupertinoListTileChevron extends StatelessWidget
class CupertinoListTileChevron$Mate extends CupertinoListTileChevron with Mate {
  /// CupertinoListTileChevron CupertinoListTileChevron({Key? key})
  CupertinoListTileChevron$Mate(
      {
      /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
      Key? key})
      : super(key: key) {
    mateBuilder = (p) => CupertinoListTileChevron$Mate(key: p.get('key').build());
    matePut('key', key);
  }
}
