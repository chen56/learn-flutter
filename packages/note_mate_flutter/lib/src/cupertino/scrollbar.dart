// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/scrollbar.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scrollbar.dart';

/// class CupertinoScrollbar extends RawScrollbar
class CupertinoScrollbar$Mate extends CupertinoScrollbar with Mate {
  /// CupertinoScrollbar CupertinoScrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, double thickness = defaultThickness, double thicknessWhileDragging = defaultThicknessWhileDragging, Radius radius = defaultRadius, Radius radiusWhileDragging = defaultRadiusWhileDragging, bool Function(ScrollNotification)? notificationPredicate, ScrollbarOrientation? scrollbarOrientation, bool? isAlwaysShown})
  CupertinoScrollbar$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? thumbVisibility} , defaultValue:none
    bool? thumbVisibility,

    /// optionalParameters: {double thickness = defaultThickness} , defaultValue:none
    required double thickness,

    /// optionalParameters: {double thicknessWhileDragging = defaultThicknessWhileDragging} , defaultValue:unprocessed
    required double thicknessWhileDragging,

    /// optionalParameters: {Radius radius = defaultRadius} , defaultValue:none
    required Radius radius,

    /// optionalParameters: {Radius radiusWhileDragging = defaultRadiusWhileDragging} , defaultValue:unprocessed
    required Radius radiusWhileDragging,

    /// optionalParameters: {bool Function(ScrollNotification)? notificationPredicate} , defaultValue:none
    ScrollNotificationPredicate? notificationPredicate,

    /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , defaultValue:none
    ScrollbarOrientation? scrollbarOrientation,
  }) : super(
          key: key,
          child: child,
          controller: controller,
          thumbVisibility: thumbVisibility,
          thickness: thickness,
          thicknessWhileDragging: thicknessWhileDragging,
          radius: radius,
          radiusWhileDragging: radiusWhileDragging,
          notificationPredicate: notificationPredicate,
          scrollbarOrientation: scrollbarOrientation,
        ) {
    mateBuilder = (p) => CupertinoScrollbar$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          controller: p.get('controller').build(),
          thumbVisibility: p.get('thumbVisibility').build(),
          thickness: p.get('thickness').build(),
          thicknessWhileDragging: p.get('thicknessWhileDragging').build(),
          radius: p.get('radius').build(),
          radiusWhileDragging: p.get('radiusWhileDragging').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          scrollbarOrientation: p.get('scrollbarOrientation').build(),
        );
    mateDeclare('key', key);
    mateDeclare('child', child);
    mateDeclare('controller', controller);
    mateDeclare('thumbVisibility', thumbVisibility);
    mateDeclare('thickness', thickness);
    mateDeclare('thicknessWhileDragging', thicknessWhileDragging);
    mateDeclare('radius', radius);
    mateDeclare('radiusWhileDragging', radiusWhileDragging);
    mateDeclare('notificationPredicate', notificationPredicate);
    mateDeclare('scrollbarOrientation', scrollbarOrientation);
  }
}
