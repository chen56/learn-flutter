// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/scrollbar.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scrollbar.dart';

/// class CupertinoScrollbar extends RawScrollbar
class CupertinoScrollbar$Mate extends CupertinoScrollbar with Mate {
  /// CupertinoScrollbar CupertinoScrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, double thickness = defaultThickness, double thicknessWhileDragging = defaultThicknessWhileDragging, Radius radius = defaultRadius, Radius radiusWhileDragging = defaultRadiusWhileDragging, bool Function(ScrollNotification)? notificationPredicate, ScrollbarOrientation? scrollbarOrientation, bool? isAlwaysShown})
  CupertinoScrollbar$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {ScrollController? controller} , default:none
    ScrollController? controller,

    /// optionalParameters: {bool? thumbVisibility} , default:none
    bool? thumbVisibility,

    /// optionalParameters: {double thickness = defaultThickness} , default:unprocessed=SimpleIdentifierImpl
    required double thickness,

    /// optionalParameters: {double thicknessWhileDragging = defaultThicknessWhileDragging} , default:unprocessed=SimpleIdentifierImpl
    required double thicknessWhileDragging,

    /// optionalParameters: {Radius radius = defaultRadius} , default:unprocessed=SimpleIdentifierImpl
    required Radius radius,

    /// optionalParameters: {Radius radiusWhileDragging = defaultRadiusWhileDragging} , default:unprocessed=SimpleIdentifierImpl
    required Radius radiusWhileDragging,

    /// optionalParameters: {bool Function(ScrollNotification)? notificationPredicate} , default:none
    ScrollNotificationPredicate? notificationPredicate,

    /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , default:none
    ScrollbarOrientation? scrollbarOrientation,
  }) : super(
          key: key,
          child: child,
          controller: controller,
          thumbVisibility: thumbVisibility,
          thickness: thickness,
          thicknessWhileDragging: thicknessWhileDragging,
          radius: radius,
          radiusWhileDragging: radiusWhileDragging,
          notificationPredicate: notificationPredicate,
          scrollbarOrientation: scrollbarOrientation,
        ) {
    mateBuilderName = 'CupertinoScrollbar';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoScrollbar$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          controller: p.get('controller').build(),
          thumbVisibility: p.get('thumbVisibility').build(),
          thickness: p.get('thickness').build(),
          thicknessWhileDragging: p.get('thicknessWhileDragging').build(),
          radius: p.get('radius').build(),
          radiusWhileDragging: p.get('radiusWhileDragging').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          scrollbarOrientation: p.get('scrollbarOrientation').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'thumbVisibility',
      thumbVisibility,
      isNamed: true,
    );
    mateUse(
      'thickness',
      thickness,
      isNamed: true,
    );
    mateUse(
      'thicknessWhileDragging',
      thicknessWhileDragging,
      isNamed: true,
    );
    mateUse(
      'radius',
      radius,
      isNamed: true,
    );
    mateUse(
      'radiusWhileDragging',
      radiusWhileDragging,
      isNamed: true,
    );
    mateUse(
      'notificationPredicate',
      notificationPredicate,
      isNamed: true,
    );
    mateUse(
      'scrollbarOrientation',
      scrollbarOrientation,
      isNamed: true,
    );
  }
}
