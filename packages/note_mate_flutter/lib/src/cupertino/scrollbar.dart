// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/cupertino/scrollbar.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:flutter/src/widgets/scroll_controller.dart';import 'dart:core';import 'dart:ui';import 'package:flutter/src/widgets/scroll_notification.dart';import 'package:flutter/src/widgets/scrollbar.dart';import 'package:note/mate.dart' show Mate;/// class CupertinoScrollbar extends RawScrollbar
class CupertinoScrollbar$Mate extends CupertinoScrollbar with Mate {/// CupertinoScrollbar CupertinoScrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, double thickness = defaultThickness, double thicknessWhileDragging = defaultThicknessWhileDragging, Radius radius = defaultRadius, Radius radiusWhileDragging = defaultRadiusWhileDragging, bool Function(ScrollNotification)? notificationPredicate, ScrollbarOrientation? scrollbarOrientation, bool? isAlwaysShown})
CupertinoScrollbar$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
ScrollController? controller, /// optionalParameters: {bool? thumbVisibility} , hasDefaultValue:false, defaultValueCode:null
bool? thumbVisibility, /// optionalParameters: {double thickness = defaultThickness} , hasDefaultValue:true, defaultValueCode:defaultThickness
required double thickness, /// optionalParameters: {double thicknessWhileDragging = defaultThicknessWhileDragging} , hasDefaultValue:true, defaultValueCode:defaultThicknessWhileDragging
required double thicknessWhileDragging, /// optionalParameters: {Radius radius = defaultRadius} , hasDefaultValue:true, defaultValueCode:defaultRadius
required Radius radius, /// optionalParameters: {Radius radiusWhileDragging = defaultRadiusWhileDragging} , hasDefaultValue:true, defaultValueCode:defaultRadiusWhileDragging
required Radius radiusWhileDragging, /// optionalParameters: {bool Function(ScrollNotification)? notificationPredicate} , hasDefaultValue:false, defaultValueCode:null
ScrollNotificationPredicate? notificationPredicate, /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , hasDefaultValue:false, defaultValueCode:null
ScrollbarOrientation? scrollbarOrientation, }) : super(key: key, child: child, controller: controller, thumbVisibility: thumbVisibility, thickness: thickness, thicknessWhileDragging: thicknessWhileDragging, radius: radius, radiusWhileDragging: radiusWhileDragging, notificationPredicate: notificationPredicate, scrollbarOrientation: scrollbarOrientation, ) { mateBuilder = (p) => CupertinoScrollbar$Mate(key: p.get('key').build(), child: p.get('child').build(), controller: p.get('controller').build(), thumbVisibility: p.get('thumbVisibility').build(), thickness: p.get('thickness').build(), thicknessWhileDragging: p.get('thicknessWhileDragging').build(), radius: p.get('radius').build(), radiusWhileDragging: p.get('radiusWhileDragging').build(), notificationPredicate: p.get('notificationPredicate').build(), scrollbarOrientation: p.get('scrollbarOrientation').build(), );
matePut('key', key);
matePut('child', child);
matePut('controller', controller);
matePut('thumbVisibility', thumbVisibility);
matePut('thickness', thickness);
matePut('thicknessWhileDragging', thicknessWhileDragging);
matePut('radius', radius);
matePut('radiusWhileDragging', radiusWhileDragging);
matePut('notificationPredicate', notificationPredicate);
matePut('scrollbarOrientation', scrollbarOrientation); }

 }
