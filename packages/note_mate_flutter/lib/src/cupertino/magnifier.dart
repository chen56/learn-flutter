// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/cupertino/magnifier.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/animation/curves.dart';import 'package:flutter/src/widgets/magnifier.dart';import 'dart:core';import 'package:flutter/src/foundation/change_notifier.dart';import 'dart:ui';import 'package:flutter/src/painting/border_radius.dart';import 'package:flutter/src/painting/box_shadow.dart';import 'package:flutter/src/painting/borders.dart';import 'package:flutter/src/animation/animation.dart';import 'package:note/mate.dart' show Mate;/// class CupertinoTextMagnifier extends StatefulWidget
class CupertinoTextMagnifier$Mate extends CupertinoTextMagnifier with Mate {/// CupertinoTextMagnifier CupertinoTextMagnifier({Key? key, Curve animationCurve = Curves.easeOut, required MagnifierController controller, double dragResistance = 10.0, double hideBelowThreshold = 48.0, double horizontalScreenEdgePadding = 10.0, required ValueNotifier<MagnifierInfo> magnifierInfo})
CupertinoTextMagnifier$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {Curve animationCurve = Curves.easeOut} , hasDefaultValue:true, defaultValueCode:Curves.easeOut
required Curve animationCurve, /// optionalParameters: {required MagnifierController controller} , hasDefaultValue:false, defaultValueCode:null
required MagnifierController controller, /// optionalParameters: {double dragResistance = 10.0} , hasDefaultValue:true, defaultValueCode:10.0
required double dragResistance, /// optionalParameters: {double hideBelowThreshold = 48.0} , hasDefaultValue:true, defaultValueCode:48.0
required double hideBelowThreshold, /// optionalParameters: {double horizontalScreenEdgePadding = 10.0} , hasDefaultValue:true, defaultValueCode:10.0
required double horizontalScreenEdgePadding, /// optionalParameters: {required ValueNotifier<MagnifierInfo> magnifierInfo} , hasDefaultValue:false, defaultValueCode:null
required ValueNotifier<MagnifierInfo> magnifierInfo, }) : super(key: key, animationCurve: animationCurve, controller: controller, dragResistance: dragResistance, hideBelowThreshold: hideBelowThreshold, horizontalScreenEdgePadding: horizontalScreenEdgePadding, magnifierInfo: magnifierInfo, ) { mateBuilder = (p) => CupertinoTextMagnifier$Mate(key: p.get('key').build(), animationCurve: p.get('animationCurve').build(), controller: p.get('controller').build(), dragResistance: p.get('dragResistance').build(), hideBelowThreshold: p.get('hideBelowThreshold').build(), horizontalScreenEdgePadding: p.get('horizontalScreenEdgePadding').build(), magnifierInfo: p.get('magnifierInfo').build(), );
matePut('key', key);
matePut('animationCurve', animationCurve);
matePut('controller', controller);
matePut('dragResistance', dragResistance);
matePut('hideBelowThreshold', hideBelowThreshold);
matePut('horizontalScreenEdgePadding', horizontalScreenEdgePadding);
matePut('magnifierInfo', magnifierInfo); }

 }
/// class CupertinoMagnifier extends StatelessWidget
class CupertinoMagnifier$Mate extends CupertinoMagnifier with Mate {/// CupertinoMagnifier CupertinoMagnifier({Key? key, Size size = kDefaultSize, BorderRadius borderRadius = const BorderRadius.all(Radius.elliptical(60, 50)), Offset additionalFocalPointOffset = Offset.zero, List<BoxShadow> shadows = const <BoxShadow>[BoxShadow(color: Color.fromARGB(25, 0, 0, 0), blurRadius: 11, spreadRadius: 0.2)], BorderSide borderSide = const BorderSide(color: Color.fromARGB(255, 232, 232, 232)), Animation<double>? inOutAnimation})
CupertinoMagnifier$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {Size size = kDefaultSize} , hasDefaultValue:true, defaultValueCode:kDefaultSize
required Size size, /// optionalParameters: {BorderRadius borderRadius = const BorderRadius.all(Radius.elliptical(60, 50))} , hasDefaultValue:true, defaultValueCode:const BorderRadius.all(Radius.elliptical(60, 50))
required BorderRadius borderRadius, /// optionalParameters: {Offset additionalFocalPointOffset = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset additionalFocalPointOffset, /// optionalParameters: {List<BoxShadow> shadows = const <BoxShadow>[BoxShadow(color: Color.fromARGB(25, 0, 0, 0), blurRadius: 11, spreadRadius: 0.2)]} , hasDefaultValue:true, defaultValueCode:const <BoxShadow>[BoxShadow(color: Color.fromARGB(25, 0, 0, 0), blurRadius: 11, spreadRadius: 0.2)]
required List<BoxShadow> shadows, /// optionalParameters: {BorderSide borderSide = const BorderSide(color: Color.fromARGB(255, 232, 232, 232))} , hasDefaultValue:true, defaultValueCode:const BorderSide(color: Color.fromARGB(255, 232, 232, 232))
required BorderSide borderSide, /// optionalParameters: {Animation<double>? inOutAnimation} , hasDefaultValue:false, defaultValueCode:null
Animation<double>? inOutAnimation, }) : super(key: key, size: size, borderRadius: borderRadius, additionalFocalPointOffset: additionalFocalPointOffset, shadows: shadows, borderSide: borderSide, inOutAnimation: inOutAnimation, ) { mateBuilder = (p) => CupertinoMagnifier$Mate(key: p.get('key').build(), size: p.get('size').build(), borderRadius: p.get('borderRadius').build(), additionalFocalPointOffset: p.get('additionalFocalPointOffset').build(), shadows: p.get('shadows').build(), borderSide: p.get('borderSide').build(), inOutAnimation: p.get('inOutAnimation').build(), );
matePut('key', key);
matePut('size', size);
matePut('borderRadius', borderRadius);
matePut('additionalFocalPointOffset', additionalFocalPointOffset);
matePut('shadows', shadows);
matePut('borderSide', borderSide);
matePut('inOutAnimation', inOutAnimation); }

 }
