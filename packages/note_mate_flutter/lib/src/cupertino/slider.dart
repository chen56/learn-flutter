// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/cupertino/slider.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/foundation/basic_types.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/cupertino.dart' as _i6;

/// class CupertinoSlider extends StatefulWidget
class CupertinoSlider$Mate extends _i1.CupertinoSlider with _i2.Mate {
  /// CupertinoSlider CupertinoSlider({Key? key, required double value, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, Color? activeColor, Color thumbColor = CupertinoColors.white})
  CupertinoSlider$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double value} , default:none
    required super.value,

    /// optionalParameters: {required void Function(double)? onChanged} , default:none
    required super.onChanged,

    /// optionalParameters: {void Function(double)? onChangeStart} , default:none
    super.onChangeStart,

    /// optionalParameters: {void Function(double)? onChangeEnd} , default:none
    super.onChangeEnd,

    /// optionalParameters: {double min = 0.0} , default:processed=DoubleLiteralImpl
    super.min,

    /// optionalParameters: {double max = 1.0} , default:processed=DoubleLiteralImpl
    super.max,

    /// optionalParameters: {int? divisions} , default:none
    super.divisions,

    /// optionalParameters: {Color? activeColor} , default:none
    super.activeColor,

    /// optionalParameters: {Color thumbColor = CupertinoColors.white} , default:processed=PrefixedIdentifierImpl
    super.thumbColor,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<double>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'onChangeStart': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChangeStart',
            init: onChangeStart,
            isNamed: true,
          ),
          'onChangeEnd': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChangeEnd',
            init: onChangeEnd,
            isNamed: true,
          ),
          'min': _i2.BuilderArg<double>(
            name: 'min',
            init: min,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'max': _i2.BuilderArg<double>(
            name: 'max',
            init: max,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'divisions': _i2.BuilderArg<int?>(
            name: 'divisions',
            init: divisions,
            isNamed: true,
          ),
          'activeColor': _i2.BuilderArg<_i5.Color?>(
            name: 'activeColor',
            init: activeColor,
            isNamed: true,
          ),
          'thumbColor': _i2.BuilderArg<_i5.Color>(
            name: 'thumbColor',
            init: thumbColor,
            isNamed: true,
            defaultValue: _i6.CupertinoColors.white,
          ),
        },
        super() {
    mateBuilderName = 'CupertinoSlider';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoSlider$Mate(
          key: p.get('key').build(),
          value: p.get('value').build(),
          onChanged: p.get('onChanged').build(),
          onChangeStart: p.get('onChangeStart').build(),
          onChangeEnd: p.get('onChangeEnd').build(),
          min: p.get('min').build(),
          max: p.get('max').build(),
          divisions: p.get('divisions').build(),
          activeColor: p.get('activeColor').build(),
          thumbColor: p.get('thumbColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
