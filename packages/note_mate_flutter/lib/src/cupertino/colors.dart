// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/cupertino/colors.dart';import 'dart:core';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class CupertinoDynamicColor extends Color with Diagnosticable
class CupertinoDynamicColor$Mate extends CupertinoDynamicColor with Mate {/// CupertinoDynamicColor CupertinoDynamicColor({String? debugLabel, required Color color, required Color darkColor, required Color highContrastColor, required Color darkHighContrastColor, required Color elevatedColor, required Color darkElevatedColor, required Color highContrastElevatedColor, required Color darkHighContrastElevatedColor})
CupertinoDynamicColor$Mate({/// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
String? debugLabel, /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
required Color color, /// optionalParameters: {required Color darkColor} , hasDefaultValue:false, defaultValueCode:null
required Color darkColor, /// optionalParameters: {required Color highContrastColor} , hasDefaultValue:false, defaultValueCode:null
required Color highContrastColor, /// optionalParameters: {required Color darkHighContrastColor} , hasDefaultValue:false, defaultValueCode:null
required Color darkHighContrastColor, /// optionalParameters: {required Color elevatedColor} , hasDefaultValue:false, defaultValueCode:null
required Color elevatedColor, /// optionalParameters: {required Color darkElevatedColor} , hasDefaultValue:false, defaultValueCode:null
required Color darkElevatedColor, /// optionalParameters: {required Color highContrastElevatedColor} , hasDefaultValue:false, defaultValueCode:null
required Color highContrastElevatedColor, /// optionalParameters: {required Color darkHighContrastElevatedColor} , hasDefaultValue:false, defaultValueCode:null
required Color darkHighContrastElevatedColor, }) : super(debugLabel: debugLabel, color: color, darkColor: darkColor, highContrastColor: highContrastColor, darkHighContrastColor: darkHighContrastColor, elevatedColor: elevatedColor, darkElevatedColor: darkElevatedColor, highContrastElevatedColor: highContrastElevatedColor, darkHighContrastElevatedColor: darkHighContrastElevatedColor, ) { mateBuilder = (p) => CupertinoDynamicColor$Mate(debugLabel: p.get('debugLabel').build(), color: p.get('color').build(), darkColor: p.get('darkColor').build(), highContrastColor: p.get('highContrastColor').build(), darkHighContrastColor: p.get('darkHighContrastColor').build(), elevatedColor: p.get('elevatedColor').build(), darkElevatedColor: p.get('darkElevatedColor').build(), highContrastElevatedColor: p.get('highContrastElevatedColor').build(), darkHighContrastElevatedColor: p.get('darkHighContrastElevatedColor').build(), );
matePut('debugLabel', debugLabel);
matePut('color', color);
matePut('darkColor', darkColor);
matePut('highContrastColor', highContrastColor);
matePut('darkHighContrastColor', darkHighContrastColor);
matePut('elevatedColor', elevatedColor);
matePut('darkElevatedColor', darkElevatedColor);
matePut('highContrastElevatedColor', highContrastElevatedColor);
matePut('darkHighContrastElevatedColor', darkHighContrastElevatedColor); }

/// CupertinoDynamicColor CupertinoDynamicColor.withBrightnessAndContrast({String? debugLabel, required Color color, required Color darkColor, required Color highContrastColor, required Color darkHighContrastColor})
CupertinoDynamicColor$Mate.withBrightnessAndContrast({/// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
String? debugLabel, /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
required Color color, /// optionalParameters: {required Color darkColor} , hasDefaultValue:false, defaultValueCode:null
required Color darkColor, /// optionalParameters: {required Color highContrastColor} , hasDefaultValue:false, defaultValueCode:null
required Color highContrastColor, /// optionalParameters: {required Color darkHighContrastColor} , hasDefaultValue:false, defaultValueCode:null
required Color darkHighContrastColor, }) : super.withBrightnessAndContrast(debugLabel: debugLabel, color: color, darkColor: darkColor, highContrastColor: highContrastColor, darkHighContrastColor: darkHighContrastColor, ) { mateBuilder = (p) => CupertinoDynamicColor$Mate.withBrightnessAndContrast(debugLabel: p.get('debugLabel').build(), color: p.get('color').build(), darkColor: p.get('darkColor').build(), highContrastColor: p.get('highContrastColor').build(), darkHighContrastColor: p.get('darkHighContrastColor').build(), );
matePut('debugLabel', debugLabel);
matePut('color', color);
matePut('darkColor', darkColor);
matePut('highContrastColor', highContrastColor);
matePut('darkHighContrastColor', darkHighContrastColor); }

/// CupertinoDynamicColor CupertinoDynamicColor.withBrightness({String? debugLabel, required Color color, required Color darkColor})
CupertinoDynamicColor$Mate.withBrightness({/// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
String? debugLabel, /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
required Color color, /// optionalParameters: {required Color darkColor} , hasDefaultValue:false, defaultValueCode:null
required Color darkColor, }) : super.withBrightness(debugLabel: debugLabel, color: color, darkColor: darkColor, ) { mateBuilder = (p) => CupertinoDynamicColor$Mate.withBrightness(debugLabel: p.get('debugLabel').build(), color: p.get('color').build(), darkColor: p.get('darkColor').build(), );
matePut('debugLabel', debugLabel);
matePut('color', color);
matePut('darkColor', darkColor); }

 }
