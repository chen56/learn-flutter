// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/button.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/alignment.dart';

/// class CupertinoButton extends StatefulWidget
class CupertinoButton$Mate extends CupertinoButton with Mate {
  /// CupertinoButton CupertinoButton({Key? key, required Widget child, EdgeInsetsGeometry? padding, Color? color, Color disabledColor = CupertinoColors.quaternarySystemFill, double? minSize = kMinInteractiveDimensionCupertino, double? pressedOpacity = 0.4, BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0)), AlignmentGeometry alignment = Alignment.center, required void Function()? onPressed})
  CupertinoButton$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color? color} , defaultValue:none
    Color? color,

    /// optionalParameters: {Color disabledColor = CupertinoColors.quaternarySystemFill} , defaultValue:unprocessed
    required Color disabledColor,

    /// optionalParameters: {double? minSize = kMinInteractiveDimensionCupertino} , defaultValue:unprocessed
    double? minSize,

    /// optionalParameters: {double? pressedOpacity = 0.4} , defaultValue:Literal
    double? pressedOpacity = 0.4,

    /// optionalParameters: {BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0))} , defaultValue:unprocessed
    BorderRadius? borderRadius,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , defaultValue:unprocessed
    required AlignmentGeometry alignment,

    /// optionalParameters: {required void Function()? onPressed} , defaultValue:none
    required VoidCallback? onPressed,
  }) : super(
          key: key,
          child: child,
          padding: padding,
          color: color,
          disabledColor: disabledColor,
          minSize: minSize,
          pressedOpacity: pressedOpacity,
          borderRadius: borderRadius,
          alignment: alignment,
          onPressed: onPressed,
        ) {
    mateBuilder = (p) => CupertinoButton$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          padding: p.get('padding').build(),
          color: p.get('color').build(),
          disabledColor: p.get('disabledColor').build(),
          minSize: p.get('minSize').build(),
          pressedOpacity: p.get('pressedOpacity').build(),
          borderRadius: p.get('borderRadius').build(),
          alignment: p.get('alignment').build(),
          onPressed: p.get('onPressed').build(),
        );
    mateUse('key', key);
    mateUse('child', child);
    mateUse('padding', padding);
    mateUse('color', color);
    mateUse('disabledColor', disabledColor);
    mateUse('minSize', minSize);
    mateUse('pressedOpacity', pressedOpacity);
    mateUse('borderRadius', borderRadius);
    mateUse('alignment', alignment);
    mateUse('onPressed', onPressed);
  }

  /// CupertinoButton CupertinoButton.filled({Key? key, required Widget child, EdgeInsetsGeometry? padding, Color disabledColor = CupertinoColors.quaternarySystemFill, double? minSize = kMinInteractiveDimensionCupertino, double? pressedOpacity = 0.4, BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0)), AlignmentGeometry alignment = Alignment.center, required void Function()? onPressed})
  CupertinoButton$Mate.filled({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color disabledColor = CupertinoColors.quaternarySystemFill} , defaultValue:unprocessed
    required Color disabledColor,

    /// optionalParameters: {double? minSize = kMinInteractiveDimensionCupertino} , defaultValue:unprocessed
    double? minSize,

    /// optionalParameters: {double? pressedOpacity = 0.4} , defaultValue:Literal
    double? pressedOpacity = 0.4,

    /// optionalParameters: {BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0))} , defaultValue:unprocessed
    BorderRadius? borderRadius,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , defaultValue:unprocessed
    required AlignmentGeometry alignment,

    /// optionalParameters: {required void Function()? onPressed} , defaultValue:none
    required VoidCallback? onPressed,
  }) : super.filled(
          key: key,
          child: child,
          padding: padding,
          disabledColor: disabledColor,
          minSize: minSize,
          pressedOpacity: pressedOpacity,
          borderRadius: borderRadius,
          alignment: alignment,
          onPressed: onPressed,
        ) {
    mateBuilder = (p) => CupertinoButton$Mate.filled(
          key: p.get('key').build(),
          child: p.get('child').build(),
          padding: p.get('padding').build(),
          disabledColor: p.get('disabledColor').build(),
          minSize: p.get('minSize').build(),
          pressedOpacity: p.get('pressedOpacity').build(),
          borderRadius: p.get('borderRadius').build(),
          alignment: p.get('alignment').build(),
          onPressed: p.get('onPressed').build(),
        );
    mateUse('key', key);
    mateUse('child', child);
    mateUse('padding', padding);
    mateUse('disabledColor', disabledColor);
    mateUse('minSize', minSize);
    mateUse('pressedOpacity', pressedOpacity);
    mateUse('borderRadius', borderRadius);
    mateUse('alignment', alignment);
    mateUse('onPressed', onPressed);
  }
}
