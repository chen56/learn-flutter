// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/cupertino/route.dart';import 'package:flutter/src/widgets/framework.dart';import 'dart:core';import 'package:flutter/src/widgets/navigator.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/animation/animation.dart';import 'dart:ui';import 'package:flutter/src/widgets/routes.dart';import 'package:note/mate.dart' show Mate;/// class CupertinoPageRoute<T> extends PageRoute<T> with CupertinoRouteTransitionMixin<T>
class CupertinoPageRoute$Mate<T> extends CupertinoPageRoute<T> with Mate {/// CupertinoPageRoute<T> CupertinoPageRoute({required Widget Function(BuildContext) builder, String? title, RouteSettings? settings, bool maintainState = true, bool fullscreenDialog = false, bool allowSnapshotting = true})
CupertinoPageRoute$Mate({/// optionalParameters: {required Widget Function(BuildContext) builder} , hasDefaultValue:false, defaultValueCode:null
required WidgetBuilder builder, /// optionalParameters: {String? title} , hasDefaultValue:false, defaultValueCode:null
String? title, /// optionalParameters: {RouteSettings? settings} , hasDefaultValue:false, defaultValueCode:null
RouteSettings? settings, /// optionalParameters: {bool maintainState = true} , hasDefaultValue:true, defaultValueCode:true
required bool maintainState, /// optionalParameters: {bool fullscreenDialog = false} , hasDefaultValue:true, defaultValueCode:false
required bool fullscreenDialog, /// optionalParameters: {bool allowSnapshotting = true} , hasDefaultValue:true, defaultValueCode:true
required bool allowSnapshotting, }) : super(builder: builder, title: title, settings: settings, maintainState: maintainState, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting, ) { mateBuilder = (p) => CupertinoPageRoute$Mate<T>(builder: p.get('builder').build(), title: p.get('title').build(), settings: p.get('settings').build(), maintainState: p.get('maintainState').build(), fullscreenDialog: p.get('fullscreenDialog').build(), allowSnapshotting: p.get('allowSnapshotting').build(), );
matePut('builder', builder);
matePut('title', title);
matePut('settings', settings);
matePut('maintainState', maintainState);
matePut('fullscreenDialog', fullscreenDialog);
matePut('allowSnapshotting', allowSnapshotting); }

 }
/// class CupertinoPage<T> extends Page<T>
class CupertinoPage$Mate<T> extends CupertinoPage<T> with Mate {/// CupertinoPage<T> CupertinoPage({required Widget child, bool maintainState = true, String? title, bool fullscreenDialog = false, bool allowSnapshotting = true, LocalKey? key, String? name, Object? arguments, String? restorationId})
CupertinoPage$Mate({/// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, /// optionalParameters: {bool maintainState = true} , hasDefaultValue:true, defaultValueCode:true
required bool maintainState, /// optionalParameters: {String? title} , hasDefaultValue:false, defaultValueCode:null
String? title, /// optionalParameters: {bool fullscreenDialog = false} , hasDefaultValue:true, defaultValueCode:false
required bool fullscreenDialog, /// optionalParameters: {bool allowSnapshotting = true} , hasDefaultValue:true, defaultValueCode:true
required bool allowSnapshotting, /// optionalParameters: {LocalKey? key} , hasDefaultValue:false, defaultValueCode:null
LocalKey? key, /// optionalParameters: {String? name} , hasDefaultValue:false, defaultValueCode:null
String? name, /// optionalParameters: {Object? arguments} , hasDefaultValue:false, defaultValueCode:null
Object? arguments, /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
String? restorationId, }) : super(child: child, maintainState: maintainState, title: title, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting, key: key, name: name, arguments: arguments, restorationId: restorationId, ) { mateBuilder = (p) => CupertinoPage$Mate<T>(child: p.get('child').build(), maintainState: p.get('maintainState').build(), title: p.get('title').build(), fullscreenDialog: p.get('fullscreenDialog').build(), allowSnapshotting: p.get('allowSnapshotting').build(), key: p.get('key').build(), name: p.get('name').build(), arguments: p.get('arguments').build(), restorationId: p.get('restorationId').build(), );
matePut('child', child);
matePut('maintainState', maintainState);
matePut('title', title);
matePut('fullscreenDialog', fullscreenDialog);
matePut('allowSnapshotting', allowSnapshotting);
matePut('key', key);
matePut('name', name);
matePut('arguments', arguments);
matePut('restorationId', restorationId); }

 }
/// class CupertinoPageTransition extends StatelessWidget
class CupertinoPageTransition$Mate extends CupertinoPageTransition with Mate {/// CupertinoPageTransition CupertinoPageTransition({Key? key, required Animation<double> primaryRouteAnimation, required Animation<double> secondaryRouteAnimation, required Widget child, required bool linearTransition})
CupertinoPageTransition$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Animation<double> primaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
required Animation<double> primaryRouteAnimation, /// optionalParameters: {required Animation<double> secondaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
required Animation<double> secondaryRouteAnimation, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, /// optionalParameters: {required bool linearTransition} , hasDefaultValue:false, defaultValueCode:null
required bool linearTransition, }) : super(key: key, primaryRouteAnimation: primaryRouteAnimation, secondaryRouteAnimation: secondaryRouteAnimation, child: child, linearTransition: linearTransition, ) { mateBuilder = (p) => CupertinoPageTransition$Mate(key: p.get('key').build(), primaryRouteAnimation: p.get('primaryRouteAnimation').build(), secondaryRouteAnimation: p.get('secondaryRouteAnimation').build(), child: p.get('child').build(), linearTransition: p.get('linearTransition').build(), );
matePut('key', key);
matePut('primaryRouteAnimation', primaryRouteAnimation);
matePut('secondaryRouteAnimation', secondaryRouteAnimation);
matePut('child', child);
matePut('linearTransition', linearTransition); }

 }
/// class CupertinoFullscreenDialogTransition extends StatelessWidget
class CupertinoFullscreenDialogTransition$Mate extends CupertinoFullscreenDialogTransition with Mate {/// CupertinoFullscreenDialogTransition CupertinoFullscreenDialogTransition({Key? key, required Animation<double> primaryRouteAnimation, required Animation<double> secondaryRouteAnimation, required Widget child, required bool linearTransition})
CupertinoFullscreenDialogTransition$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Animation<double> primaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
required Animation<double> primaryRouteAnimation, /// optionalParameters: {required Animation<double> secondaryRouteAnimation} , hasDefaultValue:false, defaultValueCode:null
required Animation<double> secondaryRouteAnimation, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, /// optionalParameters: {required bool linearTransition} , hasDefaultValue:false, defaultValueCode:null
required bool linearTransition, }) : super(key: key, primaryRouteAnimation: primaryRouteAnimation, secondaryRouteAnimation: secondaryRouteAnimation, child: child, linearTransition: linearTransition, ) { mateBuilder = (p) => CupertinoFullscreenDialogTransition$Mate(key: p.get('key').build(), primaryRouteAnimation: p.get('primaryRouteAnimation').build(), secondaryRouteAnimation: p.get('secondaryRouteAnimation').build(), child: p.get('child').build(), linearTransition: p.get('linearTransition').build(), );
matePut('key', key);
matePut('primaryRouteAnimation', primaryRouteAnimation);
matePut('secondaryRouteAnimation', secondaryRouteAnimation);
matePut('child', child);
matePut('linearTransition', linearTransition); }

 }
/// class CupertinoModalPopupRoute<T> extends PopupRoute<T>
class CupertinoModalPopupRoute$Mate<T> extends CupertinoModalPopupRoute<T> with Mate {/// CupertinoModalPopupRoute<T> CupertinoModalPopupRoute({required Widget Function(BuildContext) builder, String barrierLabel = 'Dismiss', Color? barrierColor = kCupertinoModalBarrierColor, bool barrierDismissible = true, bool semanticsDismissible = false, ImageFilter? filter, RouteSettings? settings, Offset? anchorPoint})
CupertinoModalPopupRoute$Mate({/// optionalParameters: {required Widget Function(BuildContext) builder} , hasDefaultValue:false, defaultValueCode:null
required WidgetBuilder builder, /// optionalParameters: {String barrierLabel = 'Dismiss'} , hasDefaultValue:true, defaultValueCode:'Dismiss'
required String barrierLabel, /// optionalParameters: {Color? barrierColor = kCupertinoModalBarrierColor} , hasDefaultValue:true, defaultValueCode:kCupertinoModalBarrierColor
Color? barrierColor, /// optionalParameters: {bool barrierDismissible = true} , hasDefaultValue:true, defaultValueCode:true
required bool barrierDismissible, /// optionalParameters: {bool semanticsDismissible = false} , hasDefaultValue:true, defaultValueCode:false
required bool semanticsDismissible, /// optionalParameters: {ImageFilter? filter} , hasDefaultValue:false, defaultValueCode:null
ImageFilter? filter, /// optionalParameters: {RouteSettings? settings} , hasDefaultValue:false, defaultValueCode:null
RouteSettings? settings, /// optionalParameters: {Offset? anchorPoint} , hasDefaultValue:false, defaultValueCode:null
Offset? anchorPoint, }) : super(builder: builder, barrierLabel: barrierLabel, barrierColor: barrierColor, barrierDismissible: barrierDismissible, semanticsDismissible: semanticsDismissible, filter: filter, settings: settings, anchorPoint: anchorPoint, ) { mateBuilder = (p) => CupertinoModalPopupRoute$Mate<T>(builder: p.get('builder').build(), barrierLabel: p.get('barrierLabel').build(), barrierColor: p.get('barrierColor').build(), barrierDismissible: p.get('barrierDismissible').build(), semanticsDismissible: p.get('semanticsDismissible').build(), filter: p.get('filter').build(), settings: p.get('settings').build(), anchorPoint: p.get('anchorPoint').build(), );
matePut('builder', builder);
matePut('barrierLabel', barrierLabel);
matePut('barrierColor', barrierColor);
matePut('barrierDismissible', barrierDismissible);
matePut('semanticsDismissible', semanticsDismissible);
matePut('filter', filter);
matePut('settings', settings);
matePut('anchorPoint', anchorPoint); }

 }
/// class CupertinoDialogRoute<T> extends RawDialogRoute<T>
class CupertinoDialogRoute$Mate<T> extends CupertinoDialogRoute<T> with Mate {/// CupertinoDialogRoute<T> CupertinoDialogRoute({required Widget Function(BuildContext) builder, required BuildContext context, bool barrierDismissible = true, Color? barrierColor, String? barrierLabel, Duration transitionDuration = const Duration(milliseconds: 250), Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder = _buildCupertinoDialogTransitions, RouteSettings? settings, Offset? anchorPoint})
CupertinoDialogRoute$Mate({/// optionalParameters: {required Widget Function(BuildContext) builder} , hasDefaultValue:false, defaultValueCode:null
required WidgetBuilder builder, /// optionalParameters: {required BuildContext context} , hasDefaultValue:false, defaultValueCode:null
required BuildContext context, /// optionalParameters: {bool barrierDismissible = true} , hasDefaultValue:true, defaultValueCode:true
required bool barrierDismissible, /// optionalParameters: {Color? barrierColor} , hasDefaultValue:false, defaultValueCode:null
Color? barrierColor, /// optionalParameters: {String? barrierLabel} , hasDefaultValue:false, defaultValueCode:null
String? barrierLabel, /// optionalParameters: {Duration transitionDuration = const Duration(milliseconds: 250)} , hasDefaultValue:true, defaultValueCode:const Duration(milliseconds: 250)
required Duration transitionDuration, /// optionalParameters: {Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder = _buildCupertinoDialogTransitions} , hasDefaultValue:true, defaultValueCode:_buildCupertinoDialogTransitions
RouteTransitionsBuilder? transitionBuilder, /// optionalParameters: {RouteSettings? settings} , hasDefaultValue:false, defaultValueCode:null
RouteSettings? settings, /// optionalParameters: {Offset? anchorPoint} , hasDefaultValue:false, defaultValueCode:null
Offset? anchorPoint, }) : super(builder: builder, context: context, barrierDismissible: barrierDismissible, barrierColor: barrierColor, barrierLabel: barrierLabel, transitionDuration: transitionDuration, transitionBuilder: transitionBuilder, settings: settings, anchorPoint: anchorPoint, ) { mateBuilder = (p) => CupertinoDialogRoute$Mate<T>(builder: p.get('builder').build(), context: p.get('context').build(), barrierDismissible: p.get('barrierDismissible').build(), barrierColor: p.get('barrierColor').build(), barrierLabel: p.get('barrierLabel').build(), transitionDuration: p.get('transitionDuration').build(), transitionBuilder: p.get('transitionBuilder').build(), settings: p.get('settings').build(), anchorPoint: p.get('anchorPoint').build(), );
matePut('builder', builder);
matePut('context', context);
matePut('barrierDismissible', barrierDismissible);
matePut('barrierColor', barrierColor);
matePut('barrierLabel', barrierLabel);
matePut('transitionDuration', transitionDuration);
matePut('transitionBuilder', transitionBuilder);
matePut('settings', settings);
matePut('anchorPoint', anchorPoint); }

 }
