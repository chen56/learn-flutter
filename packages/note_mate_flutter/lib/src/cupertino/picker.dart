// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/picker.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/list_wheel_scroll_view.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class CupertinoPicker extends StatefulWidget
class CupertinoPicker$Mate extends CupertinoPicker with Mate<CupertinoPicker$Mate> {
  /// CupertinoPicker CupertinoPicker({Key? key, double diameterRatio = _kDefaultDiameterRatio, Color? backgroundColor, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, FixedExtentScrollController? scrollController, double squeeze = _kSqueeze, required double itemExtent, required void Function(int)? onSelectedItemChanged, required List<Widget> children, Widget? selectionOverlay = const CupertinoPickerDefaultSelectionOverlay(), bool looping = false})
  CupertinoPicker$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {double diameterRatio = _kDefaultDiameterRatio} , hasDefaultValue:true, defaultValueCode:_kDefaultDiameterRatio
    required double diameterRatio,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double offAxisFraction = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double offAxisFraction,

    /// optionalParameters: {bool useMagnifier = false} , hasDefaultValue:true, defaultValueCode:false
    required bool useMagnifier,

    /// optionalParameters: {double magnification = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double magnification,

    /// optionalParameters: {FixedExtentScrollController? scrollController} , hasDefaultValue:false, defaultValueCode:null
    FixedExtentScrollController? scrollController,

    /// optionalParameters: {double squeeze = _kSqueeze} , hasDefaultValue:true, defaultValueCode:_kSqueeze
    required double squeeze,

    /// optionalParameters: {required double itemExtent} , hasDefaultValue:false, defaultValueCode:null
    required double itemExtent,

    /// optionalParameters: {required void Function(int)? onSelectedItemChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<int>? onSelectedItemChanged,

    /// optionalParameters: {required List<Widget> children} , hasDefaultValue:false, defaultValueCode:null
    required List<Widget> children,

    /// optionalParameters: {Widget? selectionOverlay = const CupertinoPickerDefaultSelectionOverlay()} , hasDefaultValue:true, defaultValueCode:const CupertinoPickerDefaultSelectionOverlay()
    Widget? selectionOverlay,

    /// optionalParameters: {bool looping = false} , hasDefaultValue:true, defaultValueCode:false
    required bool looping,
  }) : super(
          key: key,
          diameterRatio: diameterRatio,
          backgroundColor: backgroundColor,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          scrollController: scrollController,
          squeeze: squeeze,
          itemExtent: itemExtent,
          onSelectedItemChanged: onSelectedItemChanged,
          children: children,
          selectionOverlay: selectionOverlay,
          looping: looping,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoPicker$Mate(
        key: p.get('key').build(),
        diameterRatio: p.get('diameterRatio').build(),
        backgroundColor: p.get('backgroundColor').build(),
        offAxisFraction: p.get('offAxisFraction').build(),
        useMagnifier: p.get('useMagnifier').build(),
        magnification: p.get('magnification').build(),
        scrollController: p.get('scrollController').build(),
        squeeze: p.get('squeeze').build(),
        itemExtent: p.get('itemExtent').build(),
        onSelectedItemChanged: p.get('onSelectedItemChanged').build(),
        children: p.get('children').build(),
        selectionOverlay: p.get('selectionOverlay').build(),
        looping: p.get('looping').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('diameterRatio', diameterRatio);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('offAxisFraction', offAxisFraction);
    mateParams.put('useMagnifier', useMagnifier);
    mateParams.put('magnification', magnification);
    mateParams.put('scrollController', scrollController);
    mateParams.put('squeeze', squeeze);
    mateParams.put('itemExtent', itemExtent);
    mateParams.put('onSelectedItemChanged', onSelectedItemChanged);
    mateParams.putList('children', children);
    mateParams.put('selectionOverlay', selectionOverlay);
    mateParams.put('looping', looping);
  }

  /// CupertinoPicker CupertinoPicker.builder({Key? key, double diameterRatio = _kDefaultDiameterRatio, Color? backgroundColor, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, FixedExtentScrollController? scrollController, double squeeze = _kSqueeze, required double itemExtent, required void Function(int)? onSelectedItemChanged, required Widget? Function(BuildContext, int) itemBuilder, int? childCount, Widget? selectionOverlay = const CupertinoPickerDefaultSelectionOverlay()})
  CupertinoPicker$Mate.builder({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {double diameterRatio = _kDefaultDiameterRatio} , hasDefaultValue:true, defaultValueCode:_kDefaultDiameterRatio
    required double diameterRatio,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double offAxisFraction = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double offAxisFraction,

    /// optionalParameters: {bool useMagnifier = false} , hasDefaultValue:true, defaultValueCode:false
    required bool useMagnifier,

    /// optionalParameters: {double magnification = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double magnification,

    /// optionalParameters: {FixedExtentScrollController? scrollController} , hasDefaultValue:false, defaultValueCode:null
    FixedExtentScrollController? scrollController,

    /// optionalParameters: {double squeeze = _kSqueeze} , hasDefaultValue:true, defaultValueCode:_kSqueeze
    required double squeeze,

    /// optionalParameters: {required double itemExtent} , hasDefaultValue:false, defaultValueCode:null
    required double itemExtent,

    /// optionalParameters: {required void Function(int)? onSelectedItemChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<int>? onSelectedItemChanged,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? childCount} , hasDefaultValue:false, defaultValueCode:null
    int? childCount,

    /// optionalParameters: {Widget? selectionOverlay = const CupertinoPickerDefaultSelectionOverlay()} , hasDefaultValue:true, defaultValueCode:const CupertinoPickerDefaultSelectionOverlay()
    Widget? selectionOverlay,
  }) : super.builder(
          key: key,
          diameterRatio: diameterRatio,
          backgroundColor: backgroundColor,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          scrollController: scrollController,
          squeeze: squeeze,
          itemExtent: itemExtent,
          onSelectedItemChanged: onSelectedItemChanged,
          itemBuilder: itemBuilder,
          childCount: childCount,
          selectionOverlay: selectionOverlay,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoPicker$Mate.builder(
        key: p.get('key').build(),
        diameterRatio: p.get('diameterRatio').build(),
        backgroundColor: p.get('backgroundColor').build(),
        offAxisFraction: p.get('offAxisFraction').build(),
        useMagnifier: p.get('useMagnifier').build(),
        magnification: p.get('magnification').build(),
        scrollController: p.get('scrollController').build(),
        squeeze: p.get('squeeze').build(),
        itemExtent: p.get('itemExtent').build(),
        onSelectedItemChanged: p.get('onSelectedItemChanged').build(),
        itemBuilder: p.get('itemBuilder').build(),
        childCount: p.get('childCount').build(),
        selectionOverlay: p.get('selectionOverlay').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('diameterRatio', diameterRatio);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('offAxisFraction', offAxisFraction);
    mateParams.put('useMagnifier', useMagnifier);
    mateParams.put('magnification', magnification);
    mateParams.put('scrollController', scrollController);
    mateParams.put('squeeze', squeeze);
    mateParams.put('itemExtent', itemExtent);
    mateParams.put('onSelectedItemChanged', onSelectedItemChanged);
    mateParams.put('itemBuilder', itemBuilder);
    mateParams.put('childCount', childCount);
    mateParams.put('selectionOverlay', selectionOverlay);
  }
}

/// class CupertinoPickerDefaultSelectionOverlay extends StatelessWidget
class CupertinoPickerDefaultSelectionOverlay$Mate extends CupertinoPickerDefaultSelectionOverlay
    with Mate<CupertinoPickerDefaultSelectionOverlay$Mate> {
  /// CupertinoPickerDefaultSelectionOverlay CupertinoPickerDefaultSelectionOverlay({Key? key, Color background = CupertinoColors.tertiarySystemFill, bool capStartEdge = true, bool capEndEdge = true})
  CupertinoPickerDefaultSelectionOverlay$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color background = CupertinoColors.tertiarySystemFill} , hasDefaultValue:true, defaultValueCode:CupertinoColors.tertiarySystemFill
    required Color background,

    /// optionalParameters: {bool capStartEdge = true} , hasDefaultValue:true, defaultValueCode:true
    required bool capStartEdge,

    /// optionalParameters: {bool capEndEdge = true} , hasDefaultValue:true, defaultValueCode:true
    required bool capEndEdge,
  }) : super(
          key: key,
          background: background,
          capStartEdge: capStartEdge,
          capEndEdge: capEndEdge,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoPickerDefaultSelectionOverlay$Mate(
        key: p.get('key').build(),
        background: p.get('background').build(),
        capStartEdge: p.get('capStartEdge').build(),
        capEndEdge: p.get('capEndEdge').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('background', background);
    mateParams.put('capStartEdge', capStartEdge);
    mateParams.put('capEndEdge', capEndEdge);
  }
}
