// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/cupertino/date_picker.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i4;
import 'package:flutter/src/foundation/basic_types.dart' as _i5;
import 'package:flutter/src/cupertino/localizations.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/painting/alignment.dart' as _i8;

/// class CupertinoDatePicker extends StatefulWidget
class CupertinoDatePicker$Mate extends _i1.CupertinoDatePicker with _i2.Mate {
  /// CupertinoDatePicker CupertinoDatePicker({Key? key, CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime, required void Function(DateTime) onDateTimeChanged, DateTime? initialDateTime, DateTime? minimumDate, DateTime? maximumDate, int minimumYear = 1, int? maximumYear, int minuteInterval = 1, bool use24hFormat = false, DatePickerDateOrder? dateOrder, Color? backgroundColor, bool showDayOfWeek = false})
  CupertinoDatePicker$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime} , default:processed=PrefixedIdentifierImpl
    super.mode,

    /// optionalParameters: {required void Function(DateTime) onDateTimeChanged} , default:none
    required super.onDateTimeChanged,

    /// optionalParameters: {DateTime? initialDateTime} , default:none
    super.initialDateTime,

    /// optionalParameters: {DateTime? minimumDate} , default:none
    super.minimumDate,

    /// optionalParameters: {DateTime? maximumDate} , default:none
    super.maximumDate,

    /// optionalParameters: {int minimumYear = 1} , default:processed=IntegerLiteralImpl
    super.minimumYear,

    /// optionalParameters: {int? maximumYear} , default:none
    super.maximumYear,

    /// optionalParameters: {int minuteInterval = 1} , default:processed=IntegerLiteralImpl
    super.minuteInterval,

    /// optionalParameters: {bool use24hFormat = false} , default:processed=BooleanLiteralImpl
    super.use24hFormat,

    /// optionalParameters: {DatePickerDateOrder? dateOrder} , default:none
    super.dateOrder,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {bool showDayOfWeek = false} , default:processed=BooleanLiteralImpl
    super.showDayOfWeek,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'mode': _i2.BuilderArg<_i1.CupertinoDatePickerMode>(
            name: 'mode',
            init: mode,
            isNamed: true,
            defaultValue: _i4.CupertinoDatePickerMode.dateAndTime,
          ),
          'onDateTimeChanged': _i2.BuilderArg<_i5.ValueChanged<DateTime>>(
            name: 'onDateTimeChanged',
            init: onDateTimeChanged,
            isNamed: true,
          ),
          'initialDateTime': _i2.BuilderArg<DateTime?>(
            name: 'initialDateTime',
            init: initialDateTime,
            isNamed: true,
          ),
          'minimumDate': _i2.BuilderArg<DateTime?>(
            name: 'minimumDate',
            init: minimumDate,
            isNamed: true,
          ),
          'maximumDate': _i2.BuilderArg<DateTime?>(
            name: 'maximumDate',
            init: maximumDate,
            isNamed: true,
          ),
          'minimumYear': _i2.BuilderArg<int>(
            name: 'minimumYear',
            init: minimumYear,
            isNamed: true,
            defaultValue: 1,
          ),
          'maximumYear': _i2.BuilderArg<int?>(
            name: 'maximumYear',
            init: maximumYear,
            isNamed: true,
          ),
          'minuteInterval': _i2.BuilderArg<int>(
            name: 'minuteInterval',
            init: minuteInterval,
            isNamed: true,
            defaultValue: 1,
          ),
          'use24hFormat': _i2.BuilderArg<bool>(
            name: 'use24hFormat',
            init: use24hFormat,
            isNamed: true,
            defaultValue: false,
          ),
          'dateOrder': _i2.BuilderArg<_i6.DatePickerDateOrder?>(
            name: 'dateOrder',
            init: dateOrder,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i7.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'showDayOfWeek': _i2.BuilderArg<bool>(
            name: 'showDayOfWeek',
            init: showDayOfWeek,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'CupertinoDatePicker';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoDatePicker$Mate(
          key: p.get('key').build(),
          mode: p.get('mode').build(),
          onDateTimeChanged: p.get('onDateTimeChanged').build(),
          initialDateTime: p.get('initialDateTime').build(),
          minimumDate: p.get('minimumDate').build(),
          maximumDate: p.get('maximumDate').build(),
          minimumYear: p.get('minimumYear').build(),
          maximumYear: p.get('maximumYear').build(),
          minuteInterval: p.get('minuteInterval').build(),
          use24hFormat: p.get('use24hFormat').build(),
          dateOrder: p.get('dateOrder').build(),
          backgroundColor: p.get('backgroundColor').build(),
          showDayOfWeek: p.get('showDayOfWeek').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CupertinoTimerPicker extends StatefulWidget
class CupertinoTimerPicker$Mate extends _i1.CupertinoTimerPicker with _i2.Mate {
  /// CupertinoTimerPicker CupertinoTimerPicker({Key? key, CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms, Duration initialTimerDuration = Duration.zero, int minuteInterval = 1, int secondInterval = 1, AlignmentGeometry alignment = Alignment.center, Color? backgroundColor, required void Function(Duration) onTimerDurationChanged})
  CupertinoTimerPicker$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms} , default:processed=PrefixedIdentifierImpl
    super.mode,

    /// optionalParameters: {Duration initialTimerDuration = Duration.zero} , default:processed=PrefixedIdentifierImpl
    super.initialTimerDuration,

    /// optionalParameters: {int minuteInterval = 1} , default:processed=IntegerLiteralImpl
    super.minuteInterval,

    /// optionalParameters: {int secondInterval = 1} , default:processed=IntegerLiteralImpl
    super.secondInterval,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {required void Function(Duration) onTimerDurationChanged} , default:none
    required super.onTimerDurationChanged,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'mode': _i2.BuilderArg<_i1.CupertinoTimerPickerMode>(
            name: 'mode',
            init: mode,
            isNamed: true,
            defaultValue: _i4.CupertinoTimerPickerMode.hms,
          ),
          'initialTimerDuration': _i2.BuilderArg<Duration>(
            name: 'initialTimerDuration',
            init: initialTimerDuration,
            isNamed: true,
            defaultValue: Duration.zero,
          ),
          'minuteInterval': _i2.BuilderArg<int>(
            name: 'minuteInterval',
            init: minuteInterval,
            isNamed: true,
            defaultValue: 1,
          ),
          'secondInterval': _i2.BuilderArg<int>(
            name: 'secondInterval',
            init: secondInterval,
            isNamed: true,
            defaultValue: 1,
          ),
          'alignment': _i2.BuilderArg<_i8.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i4.Alignment.center,
          ),
          'backgroundColor': _i2.BuilderArg<_i7.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'onTimerDurationChanged': _i2.BuilderArg<_i5.ValueChanged<Duration>>(
            name: 'onTimerDurationChanged',
            init: onTimerDurationChanged,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CupertinoTimerPicker';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoTimerPicker$Mate(
          key: p.get('key').build(),
          mode: p.get('mode').build(),
          initialTimerDuration: p.get('initialTimerDuration').build(),
          minuteInterval: p.get('minuteInterval').build(),
          secondInterval: p.get('secondInterval').build(),
          alignment: p.get('alignment').build(),
          backgroundColor: p.get('backgroundColor').build(),
          onTimerDurationChanged: p.get('onTimerDurationChanged').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
