// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/date_picker.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/cupertino/localizations.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';

/// class CupertinoDatePicker extends StatefulWidget
class CupertinoDatePicker$Mate extends CupertinoDatePicker with Mate {
  /// CupertinoDatePicker CupertinoDatePicker({Key? key, CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime, required void Function(DateTime) onDateTimeChanged, DateTime? initialDateTime, DateTime? minimumDate, DateTime? maximumDate, int minimumYear = 1, int? maximumYear, int minuteInterval = 1, bool use24hFormat = false, DatePickerDateOrder? dateOrder, Color? backgroundColor, bool showDayOfWeek = false})
  CupertinoDatePicker$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime} , defaultValue:unprocessed
    required CupertinoDatePickerMode mode,

    /// optionalParameters: {required void Function(DateTime) onDateTimeChanged} , defaultValue:none
    required ValueChanged<DateTime> onDateTimeChanged,

    /// optionalParameters: {DateTime? initialDateTime} , defaultValue:none
    DateTime? initialDateTime,

    /// optionalParameters: {DateTime? minimumDate} , defaultValue:none
    DateTime? minimumDate,

    /// optionalParameters: {DateTime? maximumDate} , defaultValue:none
    DateTime? maximumDate,

    /// optionalParameters: {int minimumYear = 1} , defaultValue:Literal
    int minimumYear = 1,

    /// optionalParameters: {int? maximumYear} , defaultValue:none
    int? maximumYear,

    /// optionalParameters: {int minuteInterval = 1} , defaultValue:Literal
    int minuteInterval = 1,

    /// optionalParameters: {bool use24hFormat = false} , defaultValue:Literal
    bool use24hFormat = false,

    /// optionalParameters: {DatePickerDateOrder? dateOrder} , defaultValue:none
    DatePickerDateOrder? dateOrder,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {bool showDayOfWeek = false} , defaultValue:Literal
    bool showDayOfWeek = false,
  }) : super(
          key: key,
          mode: mode,
          onDateTimeChanged: onDateTimeChanged,
          initialDateTime: initialDateTime,
          minimumDate: minimumDate,
          maximumDate: maximumDate,
          minimumYear: minimumYear,
          maximumYear: maximumYear,
          minuteInterval: minuteInterval,
          use24hFormat: use24hFormat,
          dateOrder: dateOrder,
          backgroundColor: backgroundColor,
          showDayOfWeek: showDayOfWeek,
        ) {
    mateCreateName = 'CupertinoDatePicker';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoDatePicker$Mate(
          key: p.get('key').build(),
          mode: p.get('mode').build(),
          onDateTimeChanged: p.get('onDateTimeChanged').build(),
          initialDateTime: p.get('initialDateTime').build(),
          minimumDate: p.get('minimumDate').build(),
          maximumDate: p.get('maximumDate').build(),
          minimumYear: p.get('minimumYear').build(),
          maximumYear: p.get('maximumYear').build(),
          minuteInterval: p.get('minuteInterval').build(),
          use24hFormat: p.get('use24hFormat').build(),
          dateOrder: p.get('dateOrder').build(),
          backgroundColor: p.get('backgroundColor').build(),
          showDayOfWeek: p.get('showDayOfWeek').build(),
        );
    mateUse('key', key);
    mateUse('mode', mode);
    mateUse('onDateTimeChanged', onDateTimeChanged);
    mateUse('initialDateTime', initialDateTime);
    mateUse('minimumDate', minimumDate);
    mateUse('maximumDate', maximumDate);
    mateUse('minimumYear', minimumYear);
    mateUse('maximumYear', maximumYear);
    mateUse('minuteInterval', minuteInterval);
    mateUse('use24hFormat', use24hFormat);
    mateUse('dateOrder', dateOrder);
    mateUse('backgroundColor', backgroundColor);
    mateUse('showDayOfWeek', showDayOfWeek);
  }
}

/// class CupertinoTimerPicker extends StatefulWidget
class CupertinoTimerPicker$Mate extends CupertinoTimerPicker with Mate {
  /// CupertinoTimerPicker CupertinoTimerPicker({Key? key, CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms, Duration initialTimerDuration = Duration.zero, int minuteInterval = 1, int secondInterval = 1, AlignmentGeometry alignment = Alignment.center, Color? backgroundColor, required void Function(Duration) onTimerDurationChanged})
  CupertinoTimerPicker$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms} , defaultValue:unprocessed
    required CupertinoTimerPickerMode mode,

    /// optionalParameters: {Duration initialTimerDuration = Duration.zero} , defaultValue:unprocessed
    required Duration initialTimerDuration,

    /// optionalParameters: {int minuteInterval = 1} , defaultValue:Literal
    int minuteInterval = 1,

    /// optionalParameters: {int secondInterval = 1} , defaultValue:Literal
    int secondInterval = 1,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , defaultValue:unprocessed
    required AlignmentGeometry alignment,

    /// optionalParameters: {Color? backgroundColor} , defaultValue:none
    Color? backgroundColor,

    /// optionalParameters: {required void Function(Duration) onTimerDurationChanged} , defaultValue:none
    required ValueChanged<Duration> onTimerDurationChanged,
  }) : super(
          key: key,
          mode: mode,
          initialTimerDuration: initialTimerDuration,
          minuteInterval: minuteInterval,
          secondInterval: secondInterval,
          alignment: alignment,
          backgroundColor: backgroundColor,
          onTimerDurationChanged: onTimerDurationChanged,
        ) {
    mateCreateName = 'CupertinoTimerPicker';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoTimerPicker$Mate(
          key: p.get('key').build(),
          mode: p.get('mode').build(),
          initialTimerDuration: p.get('initialTimerDuration').build(),
          minuteInterval: p.get('minuteInterval').build(),
          secondInterval: p.get('secondInterval').build(),
          alignment: p.get('alignment').build(),
          backgroundColor: p.get('backgroundColor').build(),
          onTimerDurationChanged: p.get('onTimerDurationChanged').build(),
        );
    mateUse('key', key);
    mateUse('mode', mode);
    mateUse('initialTimerDuration', initialTimerDuration);
    mateUse('minuteInterval', minuteInterval);
    mateUse('secondInterval', secondInterval);
    mateUse('alignment', alignment);
    mateUse('backgroundColor', backgroundColor);
    mateUse('onTimerDurationChanged', onTimerDurationChanged);
  }
}
