// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/adaptive_text_selection_toolbar.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/text_selection_toolbar_anchors.dart';
import 'package:flutter/src/widgets/context_menu_button_item.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/rendering/selection.dart';

/// class CupertinoAdaptiveTextSelectionToolbar extends StatelessWidget
class CupertinoAdaptiveTextSelectionToolbar$Mate extends CupertinoAdaptiveTextSelectionToolbar with Mate {
  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar({Key? key, required List<Widget>? children, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<Widget>? children} , defaultValue:none
    required List<Widget>? children,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , defaultValue:none
    required TextSelectionToolbarAnchors anchors,
  }) : super(
          key: key,
          children: children,
          anchors: anchors,
        ) {
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          anchors: p.get('anchors').build(),
        );
    mateDeclare('key', key);
    mateDeclare('children', children);
    mateDeclare('anchors', anchors);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.buttonItems({Key? key, required List<ContextMenuButtonItem>? buttonItems, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.buttonItems({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required List<ContextMenuButtonItem>? buttonItems} , defaultValue:none
    required List<ContextMenuButtonItem>? buttonItems,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , defaultValue:none
    required TextSelectionToolbarAnchors anchors,
  }) : super.buttonItems(
          key: key,
          buttonItems: buttonItems,
          anchors: anchors,
        ) {
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.buttonItems(
          key: p.get('key').build(),
          buttonItems: p.get('buttonItems').build(),
          anchors: p.get('anchors').build(),
        );
    mateDeclare('key', key);
    mateDeclare('buttonItems', buttonItems);
    mateDeclare('anchors', anchors);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.editable({Key? key, required ClipboardStatus clipboardStatus, required void Function()? onCopy, required void Function()? onCut, required void Function()? onPaste, required void Function()? onSelectAll, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.editable({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required ClipboardStatus clipboardStatus} , defaultValue:none
    required ClipboardStatus clipboardStatus,

    /// optionalParameters: {required void Function()? onCopy} , defaultValue:none
    required VoidCallback? onCopy,

    /// optionalParameters: {required void Function()? onCut} , defaultValue:none
    required VoidCallback? onCut,

    /// optionalParameters: {required void Function()? onPaste} , defaultValue:none
    required VoidCallback? onPaste,

    /// optionalParameters: {required void Function()? onSelectAll} , defaultValue:none
    required VoidCallback? onSelectAll,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , defaultValue:none
    required TextSelectionToolbarAnchors anchors,
  }) : super.editable(
          key: key,
          clipboardStatus: clipboardStatus,
          onCopy: onCopy,
          onCut: onCut,
          onPaste: onPaste,
          onSelectAll: onSelectAll,
          anchors: anchors,
        ) {
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.editable(
          key: p.get('key').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          onCopy: p.get('onCopy').build(),
          onCut: p.get('onCut').build(),
          onPaste: p.get('onPaste').build(),
          onSelectAll: p.get('onSelectAll').build(),
          anchors: p.get('anchors').build(),
        );
    mateDeclare('key', key);
    mateDeclare('clipboardStatus', clipboardStatus);
    mateDeclare('onCopy', onCopy);
    mateDeclare('onCut', onCut);
    mateDeclare('onPaste', onPaste);
    mateDeclare('onSelectAll', onSelectAll);
    mateDeclare('anchors', anchors);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.editableText({Key? key, required EditableTextState editableTextState})
  CupertinoAdaptiveTextSelectionToolbar$Mate.editableText({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required EditableTextState editableTextState} , defaultValue:none
    required EditableTextState editableTextState,
  }) : super.editableText(
          key: key,
          editableTextState: editableTextState,
        ) {
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.editableText(
          key: p.get('key').build(),
          editableTextState: p.get('editableTextState').build(),
        );
    mateDeclare('key', key);
    mateDeclare('editableTextState', editableTextState);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.selectable({Key? key, required void Function() onCopy, required void Function() onSelectAll, required SelectionGeometry selectionGeometry, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.selectable({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required void Function() onCopy} , defaultValue:none
    required VoidCallback onCopy,

    /// optionalParameters: {required void Function() onSelectAll} , defaultValue:none
    required VoidCallback onSelectAll,

    /// optionalParameters: {required SelectionGeometry selectionGeometry} , defaultValue:none
    required SelectionGeometry selectionGeometry,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , defaultValue:none
    required TextSelectionToolbarAnchors anchors,
  }) : super.selectable(
          key: key,
          onCopy: onCopy,
          onSelectAll: onSelectAll,
          selectionGeometry: selectionGeometry,
          anchors: anchors,
        ) {
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.selectable(
          key: p.get('key').build(),
          onCopy: p.get('onCopy').build(),
          onSelectAll: p.get('onSelectAll').build(),
          selectionGeometry: p.get('selectionGeometry').build(),
          anchors: p.get('anchors').build(),
        );
    mateDeclare('key', key);
    mateDeclare('onCopy', onCopy);
    mateDeclare('onSelectAll', onSelectAll);
    mateDeclare('selectionGeometry', selectionGeometry);
    mateDeclare('anchors', anchors);
  }
}
