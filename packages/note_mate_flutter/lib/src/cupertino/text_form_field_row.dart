// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/text_form_field_row.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/box_decoration.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/widgets/form.dart';
import 'package:flutter/src/services/text_formatter.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/widgets.dart';

/// class CupertinoTextFormFieldRow extends FormField<String>
class CupertinoTextFormFieldRow$Mate extends CupertinoTextFormFieldRow
    with Mate {
  /// CupertinoTextFormFieldRow CupertinoTextFormFieldRow({Key? key, Widget? prefix, EdgeInsetsGeometry? padding, TextEditingController? controller, String? initialValue, FocusNode? focusNode, BoxDecoration? decoration, TextInputType? keyboardType, TextCapitalization textCapitalization = TextCapitalization.none, TextInputAction? textInputAction, TextStyle? style, StrutStyle? strutStyle, TextDirection? textDirection, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, bool autofocus = false, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, void Function(String)? onChanged, void Function()? onTap, void Function()? onEditingComplete, void Function(String)? onFieldSubmitted, void Function(String?)? onSaved, String? Function(String?)? validator, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Color? cursorColor, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints, AutovalidateMode autovalidateMode = AutovalidateMode.disabled, String? placeholder, TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText), Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder})
  CupertinoTextFormFieldRow$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? prefix} , default:none
    Widget? prefix,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {TextEditingController? controller} , default:none
    TextEditingController? controller,

    /// optionalParameters: {String? initialValue} , default:none
    String? initialValue,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    FocusNode? focusNode,

    /// optionalParameters: {BoxDecoration? decoration} , default:none
    BoxDecoration? decoration,

    /// optionalParameters: {TextInputType? keyboardType} , default:none
    TextInputType? keyboardType,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , default:processed=PrefixedIdentifierImpl
    TextCapitalization textCapitalization = TextCapitalization.none,

    /// optionalParameters: {TextInputAction? textInputAction} , default:none
    TextInputAction? textInputAction,

    /// optionalParameters: {TextStyle? style} , default:none
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    StrutStyle? strutStyle,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    TextDirection? textDirection,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , default:processed=PrefixedIdentifierImpl
    TextAlign textAlign = TextAlign.start,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , default:none
    TextAlignVertical? textAlignVertical,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {bool readOnly = false} , default:processed=BooleanLiteralImpl
    bool readOnly = false,

    /// optionalParameters: {bool? showCursor} , default:none
    bool? showCursor,

    /// optionalParameters: {String obscuringCharacter = '•'} , default:processed=SimpleStringLiteralImpl
    String obscuringCharacter = '•',

    /// optionalParameters: {bool obscureText = false} , default:processed=BooleanLiteralImpl
    bool obscureText = false,

    /// optionalParameters: {bool autocorrect = true} , default:processed=BooleanLiteralImpl
    bool autocorrect = true,

    /// optionalParameters: {SmartDashesType? smartDashesType} , default:none
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , default:none
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , default:processed=BooleanLiteralImpl
    bool enableSuggestions = true,

    /// optionalParameters: {int? maxLines = 1} , default:processed=IntegerLiteralImpl
    int? maxLines = 1,

    /// optionalParameters: {int? minLines} , default:none
    int? minLines,

    /// optionalParameters: {bool expands = false} , default:processed=BooleanLiteralImpl
    bool expands = false,

    /// optionalParameters: {int? maxLength} , default:none
    int? maxLength,

    /// optionalParameters: {void Function(String)? onChanged} , default:none
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onTap} , default:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onEditingComplete} , default:none
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onFieldSubmitted} , default:none
    ValueChanged<String>? onFieldSubmitted,

    /// optionalParameters: {void Function(String?)? onSaved} , default:none
    FormFieldSetter<String>? onSaved,

    /// optionalParameters: {String? Function(String?)? validator} , default:none
    FormFieldValidator<String>? validator,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , default:none
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {bool? enabled} , default:none
    bool? enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , default:none
    double? cursorHeight,

    /// optionalParameters: {Color? cursorColor} , default:none
    Color? cursorColor,

    /// optionalParameters: {Brightness? keyboardAppearance} , default:none
    Brightness? keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , default:unprocessed=InstanceCreationExpressionImpl
    required EdgeInsets scrollPadding,

    /// optionalParameters: {bool enableInteractiveSelection = true} , default:processed=BooleanLiteralImpl
    bool enableInteractiveSelection = true,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints} , default:none
    Iterable<String>? autofillHints,

    /// optionalParameters: {AutovalidateMode autovalidateMode = AutovalidateMode.disabled} , default:processed=PrefixedIdentifierImpl
    AutovalidateMode autovalidateMode = AutovalidateMode.disabled,

    /// optionalParameters: {String? placeholder} , default:none
    String? placeholder,

    /// optionalParameters: {TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText)} , default:unprocessed=InstanceCreationExpressionImpl
    required TextStyle? placeholderStyle,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , default:unprocessed=SimpleIdentifierImpl
    required EditableTextContextMenuBuilder? contextMenuBuilder,
  }) : super(
          key: key,
          prefix: prefix,
          padding: padding,
          controller: controller,
          initialValue: initialValue,
          focusNode: focusNode,
          decoration: decoration,
          keyboardType: keyboardType,
          textCapitalization: textCapitalization,
          textInputAction: textInputAction,
          style: style,
          strutStyle: strutStyle,
          textDirection: textDirection,
          textAlign: textAlign,
          textAlignVertical: textAlignVertical,
          autofocus: autofocus,
          readOnly: readOnly,
          showCursor: showCursor,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          maxLength: maxLength,
          onChanged: onChanged,
          onTap: onTap,
          onEditingComplete: onEditingComplete,
          onFieldSubmitted: onFieldSubmitted,
          onSaved: onSaved,
          validator: validator,
          inputFormatters: inputFormatters,
          enabled: enabled,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorColor: cursorColor,
          keyboardAppearance: keyboardAppearance,
          scrollPadding: scrollPadding,
          enableInteractiveSelection: enableInteractiveSelection,
          selectionControls: selectionControls,
          scrollPhysics: scrollPhysics,
          autofillHints: autofillHints,
          autovalidateMode: autovalidateMode,
          placeholder: placeholder,
          placeholderStyle: placeholderStyle,
          contextMenuBuilder: contextMenuBuilder,
        ) {
    mateBuilderName = 'CupertinoTextFormFieldRow';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoTextFormFieldRow$Mate(
          key: p.get('key').build(),
          prefix: p.get('prefix').build(),
          padding: p.get('padding').build(),
          controller: p.get('controller').build(),
          initialValue: p.get('initialValue').build(),
          focusNode: p.get('focusNode').build(),
          decoration: p.get('decoration').build(),
          keyboardType: p.get('keyboardType').build(),
          textCapitalization: p.get('textCapitalization').build(),
          textInputAction: p.get('textInputAction').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textDirection: p.get('textDirection').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          autofocus: p.get('autofocus').build(),
          readOnly: p.get('readOnly').build(),
          showCursor: p.get('showCursor').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          maxLength: p.get('maxLength').build(),
          onChanged: p.get('onChanged').build(),
          onTap: p.get('onTap').build(),
          onEditingComplete: p.get('onEditingComplete').build(),
          onFieldSubmitted: p.get('onFieldSubmitted').build(),
          onSaved: p.get('onSaved').build(),
          validator: p.get('validator').build(),
          inputFormatters: p.get('inputFormatters').build(),
          enabled: p.get('enabled').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorColor: p.get('cursorColor').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          scrollPadding: p.get('scrollPadding').build(),
          enableInteractiveSelection:
              p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          autofillHints: p.get('autofillHints').build(),
          autovalidateMode: p.get('autovalidateMode').build(),
          placeholder: p.get('placeholder').build(),
          placeholderStyle: p.get('placeholderStyle').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'prefix',
      prefix,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'initialValue',
      initialValue,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'decoration',
      decoration,
      isNamed: true,
    );
    mateUse(
      'keyboardType',
      keyboardType,
      isNamed: true,
    );
    mateUse(
      'textCapitalization',
      textCapitalization,
      isNamed: true,
      defaultValue: TextCapitalization.none,
    );
    mateUse(
      'textInputAction',
      textInputAction,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'strutStyle',
      strutStyle,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
      defaultValue: TextAlign.start,
    );
    mateUse(
      'textAlignVertical',
      textAlignVertical,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'readOnly',
      readOnly,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'showCursor',
      showCursor,
      isNamed: true,
    );
    mateUse(
      'obscuringCharacter',
      obscuringCharacter,
      isNamed: true,
      defaultValue: '•',
    );
    mateUse(
      'obscureText',
      obscureText,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'autocorrect',
      autocorrect,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'smartDashesType',
      smartDashesType,
      isNamed: true,
    );
    mateUse(
      'smartQuotesType',
      smartQuotesType,
      isNamed: true,
    );
    mateUse(
      'enableSuggestions',
      enableSuggestions,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
      defaultValue: 1,
    );
    mateUse(
      'minLines',
      minLines,
      isNamed: true,
    );
    mateUse(
      'expands',
      expands,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'maxLength',
      maxLength,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'onEditingComplete',
      onEditingComplete,
      isNamed: true,
    );
    mateUse(
      'onFieldSubmitted',
      onFieldSubmitted,
      isNamed: true,
    );
    mateUse(
      'onSaved',
      onSaved,
      isNamed: true,
    );
    mateUse(
      'validator',
      validator,
      isNamed: true,
    );
    mateUseList(
      'inputFormatters',
      inputFormatters,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
    );
    mateUse(
      'cursorWidth',
      cursorWidth,
      isNamed: true,
      defaultValue: 2.0,
    );
    mateUse(
      'cursorHeight',
      cursorHeight,
      isNamed: true,
    );
    mateUse(
      'cursorColor',
      cursorColor,
      isNamed: true,
    );
    mateUse(
      'keyboardAppearance',
      keyboardAppearance,
      isNamed: true,
    );
    mateUse(
      'scrollPadding',
      scrollPadding,
      isNamed: true,
    );
    mateUse(
      'enableInteractiveSelection',
      enableInteractiveSelection,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'selectionControls',
      selectionControls,
      isNamed: true,
    );
    mateUse(
      'scrollPhysics',
      scrollPhysics,
      isNamed: true,
    );
    mateUse(
      'autofillHints',
      autofillHints,
      isNamed: true,
    );
    mateUse(
      'autovalidateMode',
      autovalidateMode,
      isNamed: true,
      defaultValue: AutovalidateMode.disabled,
    );
    mateUse(
      'placeholder',
      placeholder,
      isNamed: true,
    );
    mateUse(
      'placeholderStyle',
      placeholderStyle,
      isNamed: true,
    );
    mateUse(
      'contextMenuBuilder',
      contextMenuBuilder,
      isNamed: true,
    );
  }
}
