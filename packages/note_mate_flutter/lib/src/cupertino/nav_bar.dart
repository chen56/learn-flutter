// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/nav_bar.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/painting/box_border.dart';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';

/// class CupertinoNavigationBar extends StatefulWidget implements ObstructingPreferredSizeWidget
class CupertinoNavigationBar$Mate extends CupertinoNavigationBar with Mate {
  /// CupertinoNavigationBar CupertinoNavigationBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag})
  CupertinoNavigationBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? leading} , default:none
    Widget? leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , default:processed=BooleanLiteralImpl
    bool automaticallyImplyLeading = true,

    /// optionalParameters: {bool automaticallyImplyMiddle = true} , default:processed=BooleanLiteralImpl
    bool automaticallyImplyMiddle = true,

    /// optionalParameters: {String? previousPageTitle} , default:none
    String? previousPageTitle,

    /// optionalParameters: {Widget? middle} , default:none
    Widget? middle,

    /// optionalParameters: {Widget? trailing} , default:none
    Widget? trailing,

    /// optionalParameters: {Border? border = _kDefaultNavBarBorder} , default:unprocessed=SimpleIdentifierImpl
    required Border? border,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {Brightness? brightness} , default:none
    Brightness? brightness,

    /// optionalParameters: {EdgeInsetsDirectional? padding} , default:none
    EdgeInsetsDirectional? padding,

    /// optionalParameters: {bool transitionBetweenRoutes = true} , default:processed=BooleanLiteralImpl
    bool transitionBetweenRoutes = true,

    /// optionalParameters: {Object heroTag = _defaultHeroTag} , default:unprocessed=SimpleIdentifierImpl
    required Object heroTag,
  }) : super(
          key: key,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          automaticallyImplyMiddle: automaticallyImplyMiddle,
          previousPageTitle: previousPageTitle,
          middle: middle,
          trailing: trailing,
          border: border,
          backgroundColor: backgroundColor,
          brightness: brightness,
          padding: padding,
          transitionBetweenRoutes: transitionBetweenRoutes,
          heroTag: heroTag,
        ) {
    mateCreateName = 'CupertinoNavigationBar';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoNavigationBar$Mate(
          key: p.get('key').build(),
          leading: p.get('leading').build(),
          automaticallyImplyLeading: p.get('automaticallyImplyLeading').build(),
          automaticallyImplyMiddle: p.get('automaticallyImplyMiddle').build(),
          previousPageTitle: p.get('previousPageTitle').build(),
          middle: p.get('middle').build(),
          trailing: p.get('trailing').build(),
          border: p.get('border').build(),
          backgroundColor: p.get('backgroundColor').build(),
          brightness: p.get('brightness').build(),
          padding: p.get('padding').build(),
          transitionBetweenRoutes: p.get('transitionBetweenRoutes').build(),
          heroTag: p.get('heroTag').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'leading',
      leading,
      isNamed: true,
    );
    mateUse(
      'automaticallyImplyLeading',
      automaticallyImplyLeading,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'automaticallyImplyMiddle',
      automaticallyImplyMiddle,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'previousPageTitle',
      previousPageTitle,
      isNamed: true,
    );
    mateUse(
      'middle',
      middle,
      isNamed: true,
    );
    mateUse(
      'trailing',
      trailing,
      isNamed: true,
    );
    mateUse(
      'border',
      border,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'brightness',
      brightness,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'transitionBetweenRoutes',
      transitionBetweenRoutes,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'heroTag',
      heroTag,
      isNamed: true,
    );
  }
}

/// class CupertinoSliverNavigationBar extends StatefulWidget
class CupertinoSliverNavigationBar$Mate extends CupertinoSliverNavigationBar with Mate {
  /// CupertinoSliverNavigationBar CupertinoSliverNavigationBar({Key? key, Widget? largeTitle, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyTitle = true, bool alwaysShowMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag, bool stretch = false})
  CupertinoSliverNavigationBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? largeTitle} , default:none
    Widget? largeTitle,

    /// optionalParameters: {Widget? leading} , default:none
    Widget? leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , default:processed=BooleanLiteralImpl
    bool automaticallyImplyLeading = true,

    /// optionalParameters: {bool automaticallyImplyTitle = true} , default:processed=BooleanLiteralImpl
    bool automaticallyImplyTitle = true,

    /// optionalParameters: {bool alwaysShowMiddle = true} , default:processed=BooleanLiteralImpl
    bool alwaysShowMiddle = true,

    /// optionalParameters: {String? previousPageTitle} , default:none
    String? previousPageTitle,

    /// optionalParameters: {Widget? middle} , default:none
    Widget? middle,

    /// optionalParameters: {Widget? trailing} , default:none
    Widget? trailing,

    /// optionalParameters: {Border? border = _kDefaultNavBarBorder} , default:unprocessed=SimpleIdentifierImpl
    required Border? border,

    /// optionalParameters: {Color? backgroundColor} , default:none
    Color? backgroundColor,

    /// optionalParameters: {Brightness? brightness} , default:none
    Brightness? brightness,

    /// optionalParameters: {EdgeInsetsDirectional? padding} , default:none
    EdgeInsetsDirectional? padding,

    /// optionalParameters: {bool transitionBetweenRoutes = true} , default:processed=BooleanLiteralImpl
    bool transitionBetweenRoutes = true,

    /// optionalParameters: {Object heroTag = _defaultHeroTag} , default:unprocessed=SimpleIdentifierImpl
    required Object heroTag,

    /// optionalParameters: {bool stretch = false} , default:processed=BooleanLiteralImpl
    bool stretch = false,
  }) : super(
          key: key,
          largeTitle: largeTitle,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          automaticallyImplyTitle: automaticallyImplyTitle,
          alwaysShowMiddle: alwaysShowMiddle,
          previousPageTitle: previousPageTitle,
          middle: middle,
          trailing: trailing,
          border: border,
          backgroundColor: backgroundColor,
          brightness: brightness,
          padding: padding,
          transitionBetweenRoutes: transitionBetweenRoutes,
          heroTag: heroTag,
          stretch: stretch,
        ) {
    mateCreateName = 'CupertinoSliverNavigationBar';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoSliverNavigationBar$Mate(
          key: p.get('key').build(),
          largeTitle: p.get('largeTitle').build(),
          leading: p.get('leading').build(),
          automaticallyImplyLeading: p.get('automaticallyImplyLeading').build(),
          automaticallyImplyTitle: p.get('automaticallyImplyTitle').build(),
          alwaysShowMiddle: p.get('alwaysShowMiddle').build(),
          previousPageTitle: p.get('previousPageTitle').build(),
          middle: p.get('middle').build(),
          trailing: p.get('trailing').build(),
          border: p.get('border').build(),
          backgroundColor: p.get('backgroundColor').build(),
          brightness: p.get('brightness').build(),
          padding: p.get('padding').build(),
          transitionBetweenRoutes: p.get('transitionBetweenRoutes').build(),
          heroTag: p.get('heroTag').build(),
          stretch: p.get('stretch').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'largeTitle',
      largeTitle,
      isNamed: true,
    );
    mateUse(
      'leading',
      leading,
      isNamed: true,
    );
    mateUse(
      'automaticallyImplyLeading',
      automaticallyImplyLeading,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'automaticallyImplyTitle',
      automaticallyImplyTitle,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'alwaysShowMiddle',
      alwaysShowMiddle,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'previousPageTitle',
      previousPageTitle,
      isNamed: true,
    );
    mateUse(
      'middle',
      middle,
      isNamed: true,
    );
    mateUse(
      'trailing',
      trailing,
      isNamed: true,
    );
    mateUse(
      'border',
      border,
      isNamed: true,
    );
    mateUse(
      'backgroundColor',
      backgroundColor,
      isNamed: true,
    );
    mateUse(
      'brightness',
      brightness,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'transitionBetweenRoutes',
      transitionBetweenRoutes,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'heroTag',
      heroTag,
      isNamed: true,
    );
    mateUse(
      'stretch',
      stretch,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class CupertinoNavigationBarBackButton extends StatelessWidget
class CupertinoNavigationBarBackButton$Mate extends CupertinoNavigationBarBackButton with Mate {
  /// CupertinoNavigationBarBackButton CupertinoNavigationBarBackButton({Key? key, Color? color, String? previousPageTitle, void Function()? onPressed})
  CupertinoNavigationBarBackButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Color? color} , default:none
    Color? color,

    /// optionalParameters: {String? previousPageTitle} , default:none
    String? previousPageTitle,

    /// optionalParameters: {void Function()? onPressed} , default:none
    VoidCallback? onPressed,
  }) : super(
          key: key,
          color: color,
          previousPageTitle: previousPageTitle,
          onPressed: onPressed,
        ) {
    mateCreateName = 'CupertinoNavigationBarBackButton';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoNavigationBarBackButton$Mate(
          key: p.get('key').build(),
          color: p.get('color').build(),
          previousPageTitle: p.get('previousPageTitle').build(),
          onPressed: p.get('onPressed').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'previousPageTitle',
      previousPageTitle,
      isNamed: true,
    );
    mateUse(
      'onPressed',
      onPressed,
      isNamed: true,
    );
  }
}
