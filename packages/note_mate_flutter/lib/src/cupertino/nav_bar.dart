// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/nav_bar.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/painting/box_border.dart';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';

/// class CupertinoNavigationBar extends StatefulWidget implements ObstructingPreferredSizeWidget
class CupertinoNavigationBar$Mate extends CupertinoNavigationBar with Mate {
  /// CupertinoNavigationBar CupertinoNavigationBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag})
  CupertinoNavigationBar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , hasDefaultValue:true, defaultValueCode:true
    required bool automaticallyImplyLeading,

    /// optionalParameters: {bool automaticallyImplyMiddle = true} , hasDefaultValue:true, defaultValueCode:true
    required bool automaticallyImplyMiddle,

    /// optionalParameters: {String? previousPageTitle} , hasDefaultValue:false, defaultValueCode:null
    String? previousPageTitle,

    /// optionalParameters: {Widget? middle} , hasDefaultValue:false, defaultValueCode:null
    Widget? middle,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {Border? border = _kDefaultNavBarBorder} , hasDefaultValue:true, defaultValueCode:_kDefaultNavBarBorder
    Border? border,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Brightness? brightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? brightness,

    /// optionalParameters: {EdgeInsetsDirectional? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsDirectional? padding,

    /// optionalParameters: {bool transitionBetweenRoutes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool transitionBetweenRoutes,

    /// optionalParameters: {Object heroTag = _defaultHeroTag} , hasDefaultValue:true, defaultValueCode:_defaultHeroTag
    required Object heroTag,
  }) : super(
          key: key,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          automaticallyImplyMiddle: automaticallyImplyMiddle,
          previousPageTitle: previousPageTitle,
          middle: middle,
          trailing: trailing,
          border: border,
          backgroundColor: backgroundColor,
          brightness: brightness,
          padding: padding,
          transitionBetweenRoutes: transitionBetweenRoutes,
          heroTag: heroTag,
        ) {
    mateBuilder = (p) => CupertinoNavigationBar$Mate(
          key: p.get('key').build(),
          leading: p.get('leading').build(),
          automaticallyImplyLeading: p.get('automaticallyImplyLeading').build(),
          automaticallyImplyMiddle: p.get('automaticallyImplyMiddle').build(),
          previousPageTitle: p.get('previousPageTitle').build(),
          middle: p.get('middle').build(),
          trailing: p.get('trailing').build(),
          border: p.get('border').build(),
          backgroundColor: p.get('backgroundColor').build(),
          brightness: p.get('brightness').build(),
          padding: p.get('padding').build(),
          transitionBetweenRoutes: p.get('transitionBetweenRoutes').build(),
          heroTag: p.get('heroTag').build(),
        );
    matePut('key', key);
    matePut('leading', leading);
    matePut('automaticallyImplyLeading', automaticallyImplyLeading);
    matePut('automaticallyImplyMiddle', automaticallyImplyMiddle);
    matePut('previousPageTitle', previousPageTitle);
    matePut('middle', middle);
    matePut('trailing', trailing);
    matePut('border', border);
    matePut('backgroundColor', backgroundColor);
    matePut('brightness', brightness);
    matePut('padding', padding);
    matePut('transitionBetweenRoutes', transitionBetweenRoutes);
    matePut('heroTag', heroTag);
  }
}

/// class CupertinoSliverNavigationBar extends StatefulWidget
class CupertinoSliverNavigationBar$Mate extends CupertinoSliverNavigationBar with Mate {
  /// CupertinoSliverNavigationBar CupertinoSliverNavigationBar({Key? key, Widget? largeTitle, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyTitle = true, bool alwaysShowMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag, bool stretch = false})
  CupertinoSliverNavigationBar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? largeTitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? largeTitle,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , hasDefaultValue:true, defaultValueCode:true
    required bool automaticallyImplyLeading,

    /// optionalParameters: {bool automaticallyImplyTitle = true} , hasDefaultValue:true, defaultValueCode:true
    required bool automaticallyImplyTitle,

    /// optionalParameters: {bool alwaysShowMiddle = true} , hasDefaultValue:true, defaultValueCode:true
    required bool alwaysShowMiddle,

    /// optionalParameters: {String? previousPageTitle} , hasDefaultValue:false, defaultValueCode:null
    String? previousPageTitle,

    /// optionalParameters: {Widget? middle} , hasDefaultValue:false, defaultValueCode:null
    Widget? middle,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {Border? border = _kDefaultNavBarBorder} , hasDefaultValue:true, defaultValueCode:_kDefaultNavBarBorder
    Border? border,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Brightness? brightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? brightness,

    /// optionalParameters: {EdgeInsetsDirectional? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsDirectional? padding,

    /// optionalParameters: {bool transitionBetweenRoutes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool transitionBetweenRoutes,

    /// optionalParameters: {Object heroTag = _defaultHeroTag} , hasDefaultValue:true, defaultValueCode:_defaultHeroTag
    required Object heroTag,

    /// optionalParameters: {bool stretch = false} , hasDefaultValue:true, defaultValueCode:false
    required bool stretch,
  }) : super(
          key: key,
          largeTitle: largeTitle,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          automaticallyImplyTitle: automaticallyImplyTitle,
          alwaysShowMiddle: alwaysShowMiddle,
          previousPageTitle: previousPageTitle,
          middle: middle,
          trailing: trailing,
          border: border,
          backgroundColor: backgroundColor,
          brightness: brightness,
          padding: padding,
          transitionBetweenRoutes: transitionBetweenRoutes,
          heroTag: heroTag,
          stretch: stretch,
        ) {
    mateBuilder = (p) => CupertinoSliverNavigationBar$Mate(
          key: p.get('key').build(),
          largeTitle: p.get('largeTitle').build(),
          leading: p.get('leading').build(),
          automaticallyImplyLeading: p.get('automaticallyImplyLeading').build(),
          automaticallyImplyTitle: p.get('automaticallyImplyTitle').build(),
          alwaysShowMiddle: p.get('alwaysShowMiddle').build(),
          previousPageTitle: p.get('previousPageTitle').build(),
          middle: p.get('middle').build(),
          trailing: p.get('trailing').build(),
          border: p.get('border').build(),
          backgroundColor: p.get('backgroundColor').build(),
          brightness: p.get('brightness').build(),
          padding: p.get('padding').build(),
          transitionBetweenRoutes: p.get('transitionBetweenRoutes').build(),
          heroTag: p.get('heroTag').build(),
          stretch: p.get('stretch').build(),
        );
    matePut('key', key);
    matePut('largeTitle', largeTitle);
    matePut('leading', leading);
    matePut('automaticallyImplyLeading', automaticallyImplyLeading);
    matePut('automaticallyImplyTitle', automaticallyImplyTitle);
    matePut('alwaysShowMiddle', alwaysShowMiddle);
    matePut('previousPageTitle', previousPageTitle);
    matePut('middle', middle);
    matePut('trailing', trailing);
    matePut('border', border);
    matePut('backgroundColor', backgroundColor);
    matePut('brightness', brightness);
    matePut('padding', padding);
    matePut('transitionBetweenRoutes', transitionBetweenRoutes);
    matePut('heroTag', heroTag);
    matePut('stretch', stretch);
  }
}

/// class CupertinoNavigationBarBackButton extends StatelessWidget
class CupertinoNavigationBarBackButton$Mate extends CupertinoNavigationBarBackButton with Mate {
  /// CupertinoNavigationBarBackButton CupertinoNavigationBarBackButton({Key? key, Color? color, String? previousPageTitle, void Function()? onPressed})
  CupertinoNavigationBarBackButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {String? previousPageTitle} , hasDefaultValue:false, defaultValueCode:null
    String? previousPageTitle,

    /// optionalParameters: {void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onPressed,
  }) : super(
          key: key,
          color: color,
          previousPageTitle: previousPageTitle,
          onPressed: onPressed,
        ) {
    mateBuilder = (p) => CupertinoNavigationBarBackButton$Mate(
          key: p.get('key').build(),
          color: p.get('color').build(),
          previousPageTitle: p.get('previousPageTitle').build(),
          onPressed: p.get('onPressed').build(),
        );
    matePut('key', key);
    matePut('color', color);
    matePut('previousPageTitle', previousPageTitle);
    matePut('onPressed', onPressed);
  }
}
