// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/semantics/semantics.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/foundation/diagnostics.dart' as _i4;
import 'package:flutter/src/services/text_editing.dart' as _i5;
import 'package:vector_math/vector_math_64.dart' as _i6;
import 'package:flutter/src/foundation/key.dart' as _i7;

/// class SemanticsTag
class SemanticsTag$Mate extends _i1.SemanticsTag with _i2.Mate {
  /// SemanticsTag SemanticsTag(String name)
  SemanticsTag$Mate(

      /// requiredParameters: String name
      super.name)
      : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'SemanticsTag';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsTag$Mate(p.get('name').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CustomSemanticsAction
class CustomSemanticsAction$Mate extends _i1.CustomSemanticsAction with _i2.Mate {
  /// CustomSemanticsAction CustomSemanticsAction({required String label})
  CustomSemanticsAction$Mate(
      {
      /// optionalParameters: {required String label} , default:none
      required super.label})
      : mateParams = {
          'label': _i2.BuilderArg<String>(
            name: 'label',
            init: label,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'CustomSemanticsAction';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => CustomSemanticsAction$Mate(label: p.get('label').build());
  }

  /// CustomSemanticsAction CustomSemanticsAction.overridingAction({required String hint, required SemanticsAction action})
  CustomSemanticsAction$Mate.overridingAction({
    /// optionalParameters: {required String hint} , default:none
    required super.hint,

    /// optionalParameters: {required SemanticsAction action} , default:none
    required super.action,
  })  : mateParams = {
          'hint': _i2.BuilderArg<String>(
            name: 'hint',
            init: hint,
            isNamed: true,
          ),
          'action': _i2.BuilderArg<_i3.SemanticsAction>(
            name: 'action',
            init: action,
            isNamed: true,
          ),
        },
        super.overridingAction() {
    mateBuilderName = 'CustomSemanticsAction.overridingAction';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => CustomSemanticsAction$Mate.overridingAction(
          hint: p.get('hint').build(),
          action: p.get('action').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AttributedString
class AttributedString$Mate extends _i1.AttributedString with _i2.Mate {
  /// AttributedString AttributedString(String string, {List<StringAttribute> attributes = const <StringAttribute>[]})
  AttributedString$Mate(
    /// requiredParameters: String string
    super.string, {
    /// optionalParameters: {List<StringAttribute> attributes = const <StringAttribute>[]} , default:unprocessed=ListLiteralImpl
    super.attributes,
  })  : mateParams = {
          'string': _i2.BuilderArg<String>(
            name: 'string',
            init: string,
            isNamed: false,
          ),
          'attributes': _i2.BuilderArg<List<_i3.StringAttribute>>(
            name: 'attributes',
            init: attributes,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AttributedString';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => AttributedString$Mate(
          p.get('string').value,
          attributes: p.get('attributes').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AttributedStringProperty extends DiagnosticsProperty<AttributedString>
class AttributedStringProperty$Mate extends _i1.AttributedStringProperty with _i2.Mate {
  /// AttributedStringProperty AttributedStringProperty(String name, AttributedString? value, {bool showName = true, bool showWhenEmpty = false, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info, String? description})
  AttributedStringProperty$Mate(
    /// requiredParameters: String name
    super.name,

    /// requiredParameters: AttributedString? value
    super.value, {
    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    super.showName,

    /// optionalParameters: {bool showWhenEmpty = false} , default:processed=BooleanLiteralImpl
    super.showWhenEmpty,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    super.defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:unprocessed=PrefixedIdentifierImpl
    super.level,

    /// optionalParameters: {String? description} , default:none
    super.description,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'value': _i2.BuilderArg<_i1.AttributedString?>(
            name: 'value',
            init: value,
            isNamed: false,
          ),
          'showName': _i2.BuilderArg<bool>(
            name: 'showName',
            init: showName,
            isNamed: true,
            defaultValue: true,
          ),
          'showWhenEmpty': _i2.BuilderArg<bool>(
            name: 'showWhenEmpty',
            init: showWhenEmpty,
            isNamed: true,
            defaultValue: false,
          ),
          'defaultValue': _i2.BuilderArg<Object?>(
            name: 'defaultValue',
            init: defaultValue,
            isNamed: true,
          ),
          'level': _i2.BuilderArg<_i4.DiagnosticLevel>(
            name: 'level',
            init: level,
            isNamed: true,
          ),
          'description': _i2.BuilderArg<String?>(
            name: 'description',
            init: description,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AttributedStringProperty';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => AttributedStringProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          showName: p.get('showName').build(),
          showWhenEmpty: p.get('showWhenEmpty').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
          description: p.get('description').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SemanticsData with Diagnosticable
class SemanticsData$Mate extends _i1.SemanticsData with _i2.Mate {
  /// SemanticsData SemanticsData({required int flags, required int actions, required AttributedString attributedLabel, required AttributedString attributedValue, required AttributedString attributedIncreasedValue, required AttributedString attributedDecreasedValue, required AttributedString attributedHint, required String tooltip, required TextDirection? textDirection, required Rect rect, required double elevation, required double thickness, required TextSelection? textSelection, required int? scrollIndex, required int? scrollChildCount, required double? scrollPosition, required double? scrollExtentMax, required double? scrollExtentMin, required int? platformViewId, required int? maxValueLength, required int? currentValueLength, Set<SemanticsTag>? tags, Matrix4? transform, List<int>? customSemanticsActionIds})
  SemanticsData$Mate({
    /// optionalParameters: {required int flags} , default:none
    required super.flags,

    /// optionalParameters: {required int actions} , default:none
    required super.actions,

    /// optionalParameters: {required AttributedString attributedLabel} , default:none
    required super.attributedLabel,

    /// optionalParameters: {required AttributedString attributedValue} , default:none
    required super.attributedValue,

    /// optionalParameters: {required AttributedString attributedIncreasedValue} , default:none
    required super.attributedIncreasedValue,

    /// optionalParameters: {required AttributedString attributedDecreasedValue} , default:none
    required super.attributedDecreasedValue,

    /// optionalParameters: {required AttributedString attributedHint} , default:none
    required super.attributedHint,

    /// optionalParameters: {required String tooltip} , default:none
    required super.tooltip,

    /// optionalParameters: {required TextDirection? textDirection} , default:none
    required super.textDirection,

    /// optionalParameters: {required Rect rect} , default:none
    required super.rect,

    /// optionalParameters: {required double elevation} , default:none
    required super.elevation,

    /// optionalParameters: {required double thickness} , default:none
    required super.thickness,

    /// optionalParameters: {required TextSelection? textSelection} , default:none
    required super.textSelection,

    /// optionalParameters: {required int? scrollIndex} , default:none
    required super.scrollIndex,

    /// optionalParameters: {required int? scrollChildCount} , default:none
    required super.scrollChildCount,

    /// optionalParameters: {required double? scrollPosition} , default:none
    required super.scrollPosition,

    /// optionalParameters: {required double? scrollExtentMax} , default:none
    required super.scrollExtentMax,

    /// optionalParameters: {required double? scrollExtentMin} , default:none
    required super.scrollExtentMin,

    /// optionalParameters: {required int? platformViewId} , default:none
    required super.platformViewId,

    /// optionalParameters: {required int? maxValueLength} , default:none
    required super.maxValueLength,

    /// optionalParameters: {required int? currentValueLength} , default:none
    required super.currentValueLength,

    /// optionalParameters: {Set<SemanticsTag>? tags} , default:none
    super.tags,

    /// optionalParameters: {Matrix4? transform} , default:none
    super.transform,

    /// optionalParameters: {List<int>? customSemanticsActionIds} , default:none
    super.customSemanticsActionIds,
  })  : mateParams = {
          'flags': _i2.BuilderArg<int>(
            name: 'flags',
            init: flags,
            isNamed: true,
          ),
          'actions': _i2.BuilderArg<int>(
            name: 'actions',
            init: actions,
            isNamed: true,
          ),
          'attributedLabel': _i2.BuilderArg<_i1.AttributedString>(
            name: 'attributedLabel',
            init: attributedLabel,
            isNamed: true,
          ),
          'attributedValue': _i2.BuilderArg<_i1.AttributedString>(
            name: 'attributedValue',
            init: attributedValue,
            isNamed: true,
          ),
          'attributedIncreasedValue': _i2.BuilderArg<_i1.AttributedString>(
            name: 'attributedIncreasedValue',
            init: attributedIncreasedValue,
            isNamed: true,
          ),
          'attributedDecreasedValue': _i2.BuilderArg<_i1.AttributedString>(
            name: 'attributedDecreasedValue',
            init: attributedDecreasedValue,
            isNamed: true,
          ),
          'attributedHint': _i2.BuilderArg<_i1.AttributedString>(
            name: 'attributedHint',
            init: attributedHint,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i3.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'rect': _i2.BuilderArg<_i3.Rect>(
            name: 'rect',
            init: rect,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'thickness': _i2.BuilderArg<double>(
            name: 'thickness',
            init: thickness,
            isNamed: true,
          ),
          'textSelection': _i2.BuilderArg<_i5.TextSelection?>(
            name: 'textSelection',
            init: textSelection,
            isNamed: true,
          ),
          'scrollIndex': _i2.BuilderArg<int?>(
            name: 'scrollIndex',
            init: scrollIndex,
            isNamed: true,
          ),
          'scrollChildCount': _i2.BuilderArg<int?>(
            name: 'scrollChildCount',
            init: scrollChildCount,
            isNamed: true,
          ),
          'scrollPosition': _i2.BuilderArg<double?>(
            name: 'scrollPosition',
            init: scrollPosition,
            isNamed: true,
          ),
          'scrollExtentMax': _i2.BuilderArg<double?>(
            name: 'scrollExtentMax',
            init: scrollExtentMax,
            isNamed: true,
          ),
          'scrollExtentMin': _i2.BuilderArg<double?>(
            name: 'scrollExtentMin',
            init: scrollExtentMin,
            isNamed: true,
          ),
          'platformViewId': _i2.BuilderArg<int?>(
            name: 'platformViewId',
            init: platformViewId,
            isNamed: true,
          ),
          'maxValueLength': _i2.BuilderArg<int?>(
            name: 'maxValueLength',
            init: maxValueLength,
            isNamed: true,
          ),
          'currentValueLength': _i2.BuilderArg<int?>(
            name: 'currentValueLength',
            init: currentValueLength,
            isNamed: true,
          ),
          'tags': _i2.BuilderArg<Set<_i1.SemanticsTag>?>(
            name: 'tags',
            init: tags,
            isNamed: true,
          ),
          'transform': _i2.BuilderArg<_i6.Matrix4?>(
            name: 'transform',
            init: transform,
            isNamed: true,
          ),
          'customSemanticsActionIds': _i2.BuilderArg<List<int>?>(
            name: 'customSemanticsActionIds',
            init: customSemanticsActionIds,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SemanticsData';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsData$Mate(
          flags: p.get('flags').build(),
          actions: p.get('actions').build(),
          attributedLabel: p.get('attributedLabel').build(),
          attributedValue: p.get('attributedValue').build(),
          attributedIncreasedValue: p.get('attributedIncreasedValue').build(),
          attributedDecreasedValue: p.get('attributedDecreasedValue').build(),
          attributedHint: p.get('attributedHint').build(),
          tooltip: p.get('tooltip').build(),
          textDirection: p.get('textDirection').build(),
          rect: p.get('rect').build(),
          elevation: p.get('elevation').build(),
          thickness: p.get('thickness').build(),
          textSelection: p.get('textSelection').build(),
          scrollIndex: p.get('scrollIndex').build(),
          scrollChildCount: p.get('scrollChildCount').build(),
          scrollPosition: p.get('scrollPosition').build(),
          scrollExtentMax: p.get('scrollExtentMax').build(),
          scrollExtentMin: p.get('scrollExtentMin').build(),
          platformViewId: p.get('platformViewId').build(),
          maxValueLength: p.get('maxValueLength').build(),
          currentValueLength: p.get('currentValueLength').build(),
          tags: p.get('tags').build(),
          transform: p.get('transform').build(),
          customSemanticsActionIds: p.get('customSemanticsActionIds').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SemanticsHintOverrides extends DiagnosticableTree
class SemanticsHintOverrides$Mate extends _i1.SemanticsHintOverrides with _i2.Mate {
  /// SemanticsHintOverrides SemanticsHintOverrides({String? onTapHint, String? onLongPressHint})
  SemanticsHintOverrides$Mate({
    /// optionalParameters: {String? onTapHint} , default:none
    super.onTapHint,

    /// optionalParameters: {String? onLongPressHint} , default:none
    super.onLongPressHint,
  })  : mateParams = {
          'onTapHint': _i2.BuilderArg<String?>(
            name: 'onTapHint',
            init: onTapHint,
            isNamed: true,
          ),
          'onLongPressHint': _i2.BuilderArg<String?>(
            name: 'onLongPressHint',
            init: onLongPressHint,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SemanticsHintOverrides';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsHintOverrides$Mate(
          onTapHint: p.get('onTapHint').build(),
          onLongPressHint: p.get('onLongPressHint').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SemanticsProperties extends DiagnosticableTree
class SemanticsProperties$Mate extends _i1.SemanticsProperties with _i2.Mate {
  /// SemanticsProperties SemanticsProperties({bool? enabled, bool? checked, bool? mixed, bool? selected, bool? toggled, bool? button, bool? link, bool? header, bool? textField, bool? slider, bool? keyboardKey, bool? readOnly, bool? focusable, bool? focused, bool? inMutuallyExclusiveGroup, bool? hidden, bool? obscured, bool? multiline, bool? scopesRoute, bool? namesRoute, bool? image, bool? liveRegion, int? maxValueLength, int? currentValueLength, String? label, AttributedString? attributedLabel, String? value, AttributedString? attributedValue, String? increasedValue, AttributedString? attributedIncreasedValue, String? decreasedValue, AttributedString? attributedDecreasedValue, String? hint, String? tooltip, AttributedString? attributedHint, SemanticsHintOverrides? hintOverrides, TextDirection? textDirection, SemanticsSortKey? sortKey, SemanticsTag? tagForChildren, void Function()? onTap, void Function()? onLongPress, void Function()? onScrollLeft, void Function()? onScrollRight, void Function()? onScrollUp, void Function()? onScrollDown, void Function()? onIncrease, void Function()? onDecrease, void Function()? onCopy, void Function()? onCut, void Function()? onPaste, void Function(bool)? onMoveCursorForwardByCharacter, void Function(bool)? onMoveCursorBackwardByCharacter, void Function(bool)? onMoveCursorForwardByWord, void Function(bool)? onMoveCursorBackwardByWord, void Function(TextSelection)? onSetSelection, void Function(String)? onSetText, void Function()? onDidGainAccessibilityFocus, void Function()? onDidLoseAccessibilityFocus, void Function()? onDismiss, Map<CustomSemanticsAction, void Function()>? customSemanticsActions})
  SemanticsProperties$Mate({
    /// optionalParameters: {bool? enabled} , default:none
    super.enabled,

    /// optionalParameters: {bool? checked} , default:none
    super.checked,

    /// optionalParameters: {bool? mixed} , default:none
    super.mixed,

    /// optionalParameters: {bool? selected} , default:none
    super.selected,

    /// optionalParameters: {bool? toggled} , default:none
    super.toggled,

    /// optionalParameters: {bool? button} , default:none
    super.button,

    /// optionalParameters: {bool? link} , default:none
    super.link,

    /// optionalParameters: {bool? header} , default:none
    super.header,

    /// optionalParameters: {bool? textField} , default:none
    super.textField,

    /// optionalParameters: {bool? slider} , default:none
    super.slider,

    /// optionalParameters: {bool? keyboardKey} , default:none
    super.keyboardKey,

    /// optionalParameters: {bool? readOnly} , default:none
    super.readOnly,

    /// optionalParameters: {bool? focusable} , default:none
    super.focusable,

    /// optionalParameters: {bool? focused} , default:none
    super.focused,

    /// optionalParameters: {bool? inMutuallyExclusiveGroup} , default:none
    super.inMutuallyExclusiveGroup,

    /// optionalParameters: {bool? hidden} , default:none
    super.hidden,

    /// optionalParameters: {bool? obscured} , default:none
    super.obscured,

    /// optionalParameters: {bool? multiline} , default:none
    super.multiline,

    /// optionalParameters: {bool? scopesRoute} , default:none
    super.scopesRoute,

    /// optionalParameters: {bool? namesRoute} , default:none
    super.namesRoute,

    /// optionalParameters: {bool? image} , default:none
    super.image,

    /// optionalParameters: {bool? liveRegion} , default:none
    super.liveRegion,

    /// optionalParameters: {int? maxValueLength} , default:none
    super.maxValueLength,

    /// optionalParameters: {int? currentValueLength} , default:none
    super.currentValueLength,

    /// optionalParameters: {String? label} , default:none
    super.label,

    /// optionalParameters: {AttributedString? attributedLabel} , default:none
    super.attributedLabel,

    /// optionalParameters: {String? value} , default:none
    super.value,

    /// optionalParameters: {AttributedString? attributedValue} , default:none
    super.attributedValue,

    /// optionalParameters: {String? increasedValue} , default:none
    super.increasedValue,

    /// optionalParameters: {AttributedString? attributedIncreasedValue} , default:none
    super.attributedIncreasedValue,

    /// optionalParameters: {String? decreasedValue} , default:none
    super.decreasedValue,

    /// optionalParameters: {AttributedString? attributedDecreasedValue} , default:none
    super.attributedDecreasedValue,

    /// optionalParameters: {String? hint} , default:none
    super.hint,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {AttributedString? attributedHint} , default:none
    super.attributedHint,

    /// optionalParameters: {SemanticsHintOverrides? hintOverrides} , default:none
    super.hintOverrides,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {SemanticsSortKey? sortKey} , default:none
    super.sortKey,

    /// optionalParameters: {SemanticsTag? tagForChildren} , default:none
    super.tagForChildren,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    super.onLongPress,

    /// optionalParameters: {void Function()? onScrollLeft} , default:none
    super.onScrollLeft,

    /// optionalParameters: {void Function()? onScrollRight} , default:none
    super.onScrollRight,

    /// optionalParameters: {void Function()? onScrollUp} , default:none
    super.onScrollUp,

    /// optionalParameters: {void Function()? onScrollDown} , default:none
    super.onScrollDown,

    /// optionalParameters: {void Function()? onIncrease} , default:none
    super.onIncrease,

    /// optionalParameters: {void Function()? onDecrease} , default:none
    super.onDecrease,

    /// optionalParameters: {void Function()? onCopy} , default:none
    super.onCopy,

    /// optionalParameters: {void Function()? onCut} , default:none
    super.onCut,

    /// optionalParameters: {void Function()? onPaste} , default:none
    super.onPaste,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByCharacter} , default:none
    super.onMoveCursorForwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByCharacter} , default:none
    super.onMoveCursorBackwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByWord} , default:none
    super.onMoveCursorForwardByWord,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByWord} , default:none
    super.onMoveCursorBackwardByWord,

    /// optionalParameters: {void Function(TextSelection)? onSetSelection} , default:none
    super.onSetSelection,

    /// optionalParameters: {void Function(String)? onSetText} , default:none
    super.onSetText,

    /// optionalParameters: {void Function()? onDidGainAccessibilityFocus} , default:none
    super.onDidGainAccessibilityFocus,

    /// optionalParameters: {void Function()? onDidLoseAccessibilityFocus} , default:none
    super.onDidLoseAccessibilityFocus,

    /// optionalParameters: {void Function()? onDismiss} , default:none
    super.onDismiss,

    /// optionalParameters: {Map<CustomSemanticsAction, void Function()>? customSemanticsActions} , default:none
    super.customSemanticsActions,
  })  : mateParams = {
          'enabled': _i2.BuilderArg<bool?>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
          ),
          'checked': _i2.BuilderArg<bool?>(
            name: 'checked',
            init: checked,
            isNamed: true,
          ),
          'mixed': _i2.BuilderArg<bool?>(
            name: 'mixed',
            init: mixed,
            isNamed: true,
          ),
          'selected': _i2.BuilderArg<bool?>(
            name: 'selected',
            init: selected,
            isNamed: true,
          ),
          'toggled': _i2.BuilderArg<bool?>(
            name: 'toggled',
            init: toggled,
            isNamed: true,
          ),
          'button': _i2.BuilderArg<bool?>(
            name: 'button',
            init: button,
            isNamed: true,
          ),
          'link': _i2.BuilderArg<bool?>(
            name: 'link',
            init: link,
            isNamed: true,
          ),
          'header': _i2.BuilderArg<bool?>(
            name: 'header',
            init: header,
            isNamed: true,
          ),
          'textField': _i2.BuilderArg<bool?>(
            name: 'textField',
            init: textField,
            isNamed: true,
          ),
          'slider': _i2.BuilderArg<bool?>(
            name: 'slider',
            init: slider,
            isNamed: true,
          ),
          'keyboardKey': _i2.BuilderArg<bool?>(
            name: 'keyboardKey',
            init: keyboardKey,
            isNamed: true,
          ),
          'readOnly': _i2.BuilderArg<bool?>(
            name: 'readOnly',
            init: readOnly,
            isNamed: true,
          ),
          'focusable': _i2.BuilderArg<bool?>(
            name: 'focusable',
            init: focusable,
            isNamed: true,
          ),
          'focused': _i2.BuilderArg<bool?>(
            name: 'focused',
            init: focused,
            isNamed: true,
          ),
          'inMutuallyExclusiveGroup': _i2.BuilderArg<bool?>(
            name: 'inMutuallyExclusiveGroup',
            init: inMutuallyExclusiveGroup,
            isNamed: true,
          ),
          'hidden': _i2.BuilderArg<bool?>(
            name: 'hidden',
            init: hidden,
            isNamed: true,
          ),
          'obscured': _i2.BuilderArg<bool?>(
            name: 'obscured',
            init: obscured,
            isNamed: true,
          ),
          'multiline': _i2.BuilderArg<bool?>(
            name: 'multiline',
            init: multiline,
            isNamed: true,
          ),
          'scopesRoute': _i2.BuilderArg<bool?>(
            name: 'scopesRoute',
            init: scopesRoute,
            isNamed: true,
          ),
          'namesRoute': _i2.BuilderArg<bool?>(
            name: 'namesRoute',
            init: namesRoute,
            isNamed: true,
          ),
          'image': _i2.BuilderArg<bool?>(
            name: 'image',
            init: image,
            isNamed: true,
          ),
          'liveRegion': _i2.BuilderArg<bool?>(
            name: 'liveRegion',
            init: liveRegion,
            isNamed: true,
          ),
          'maxValueLength': _i2.BuilderArg<int?>(
            name: 'maxValueLength',
            init: maxValueLength,
            isNamed: true,
          ),
          'currentValueLength': _i2.BuilderArg<int?>(
            name: 'currentValueLength',
            init: currentValueLength,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<String?>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'attributedLabel': _i2.BuilderArg<_i1.AttributedString?>(
            name: 'attributedLabel',
            init: attributedLabel,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<String?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'attributedValue': _i2.BuilderArg<_i1.AttributedString?>(
            name: 'attributedValue',
            init: attributedValue,
            isNamed: true,
          ),
          'increasedValue': _i2.BuilderArg<String?>(
            name: 'increasedValue',
            init: increasedValue,
            isNamed: true,
          ),
          'attributedIncreasedValue': _i2.BuilderArg<_i1.AttributedString?>(
            name: 'attributedIncreasedValue',
            init: attributedIncreasedValue,
            isNamed: true,
          ),
          'decreasedValue': _i2.BuilderArg<String?>(
            name: 'decreasedValue',
            init: decreasedValue,
            isNamed: true,
          ),
          'attributedDecreasedValue': _i2.BuilderArg<_i1.AttributedString?>(
            name: 'attributedDecreasedValue',
            init: attributedDecreasedValue,
            isNamed: true,
          ),
          'hint': _i2.BuilderArg<String?>(
            name: 'hint',
            init: hint,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'attributedHint': _i2.BuilderArg<_i1.AttributedString?>(
            name: 'attributedHint',
            init: attributedHint,
            isNamed: true,
          ),
          'hintOverrides': _i2.BuilderArg<_i1.SemanticsHintOverrides?>(
            name: 'hintOverrides',
            init: hintOverrides,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i3.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'sortKey': _i2.BuilderArg<_i1.SemanticsSortKey?>(
            name: 'sortKey',
            init: sortKey,
            isNamed: true,
          ),
          'tagForChildren': _i2.BuilderArg<_i1.SemanticsTag?>(
            name: 'tagForChildren',
            init: tagForChildren,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'onLongPress': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onLongPress',
            init: onLongPress,
            isNamed: true,
          ),
          'onScrollLeft': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onScrollLeft',
            init: onScrollLeft,
            isNamed: true,
          ),
          'onScrollRight': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onScrollRight',
            init: onScrollRight,
            isNamed: true,
          ),
          'onScrollUp': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onScrollUp',
            init: onScrollUp,
            isNamed: true,
          ),
          'onScrollDown': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onScrollDown',
            init: onScrollDown,
            isNamed: true,
          ),
          'onIncrease': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onIncrease',
            init: onIncrease,
            isNamed: true,
          ),
          'onDecrease': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onDecrease',
            init: onDecrease,
            isNamed: true,
          ),
          'onCopy': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onCopy',
            init: onCopy,
            isNamed: true,
          ),
          'onCut': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onCut',
            init: onCut,
            isNamed: true,
          ),
          'onPaste': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onPaste',
            init: onPaste,
            isNamed: true,
          ),
          'onMoveCursorForwardByCharacter': _i2.BuilderArg<_i1.MoveCursorHandler?>(
            name: 'onMoveCursorForwardByCharacter',
            init: onMoveCursorForwardByCharacter,
            isNamed: true,
          ),
          'onMoveCursorBackwardByCharacter': _i2.BuilderArg<_i1.MoveCursorHandler?>(
            name: 'onMoveCursorBackwardByCharacter',
            init: onMoveCursorBackwardByCharacter,
            isNamed: true,
          ),
          'onMoveCursorForwardByWord': _i2.BuilderArg<_i1.MoveCursorHandler?>(
            name: 'onMoveCursorForwardByWord',
            init: onMoveCursorForwardByWord,
            isNamed: true,
          ),
          'onMoveCursorBackwardByWord': _i2.BuilderArg<_i1.MoveCursorHandler?>(
            name: 'onMoveCursorBackwardByWord',
            init: onMoveCursorBackwardByWord,
            isNamed: true,
          ),
          'onSetSelection': _i2.BuilderArg<_i1.SetSelectionHandler?>(
            name: 'onSetSelection',
            init: onSetSelection,
            isNamed: true,
          ),
          'onSetText': _i2.BuilderArg<_i1.SetTextHandler?>(
            name: 'onSetText',
            init: onSetText,
            isNamed: true,
          ),
          'onDidGainAccessibilityFocus': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onDidGainAccessibilityFocus',
            init: onDidGainAccessibilityFocus,
            isNamed: true,
          ),
          'onDidLoseAccessibilityFocus': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onDidLoseAccessibilityFocus',
            init: onDidLoseAccessibilityFocus,
            isNamed: true,
          ),
          'onDismiss': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'onDismiss',
            init: onDismiss,
            isNamed: true,
          ),
          'customSemanticsActions': _i2.BuilderArg<Map<_i1.CustomSemanticsAction, _i3.VoidCallback>?>(
            name: 'customSemanticsActions',
            init: customSemanticsActions,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SemanticsProperties';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsProperties$Mate(
          enabled: p.get('enabled').build(),
          checked: p.get('checked').build(),
          mixed: p.get('mixed').build(),
          selected: p.get('selected').build(),
          toggled: p.get('toggled').build(),
          button: p.get('button').build(),
          link: p.get('link').build(),
          header: p.get('header').build(),
          textField: p.get('textField').build(),
          slider: p.get('slider').build(),
          keyboardKey: p.get('keyboardKey').build(),
          readOnly: p.get('readOnly').build(),
          focusable: p.get('focusable').build(),
          focused: p.get('focused').build(),
          inMutuallyExclusiveGroup: p.get('inMutuallyExclusiveGroup').build(),
          hidden: p.get('hidden').build(),
          obscured: p.get('obscured').build(),
          multiline: p.get('multiline').build(),
          scopesRoute: p.get('scopesRoute').build(),
          namesRoute: p.get('namesRoute').build(),
          image: p.get('image').build(),
          liveRegion: p.get('liveRegion').build(),
          maxValueLength: p.get('maxValueLength').build(),
          currentValueLength: p.get('currentValueLength').build(),
          label: p.get('label').build(),
          attributedLabel: p.get('attributedLabel').build(),
          value: p.get('value').build(),
          attributedValue: p.get('attributedValue').build(),
          increasedValue: p.get('increasedValue').build(),
          attributedIncreasedValue: p.get('attributedIncreasedValue').build(),
          decreasedValue: p.get('decreasedValue').build(),
          attributedDecreasedValue: p.get('attributedDecreasedValue').build(),
          hint: p.get('hint').build(),
          tooltip: p.get('tooltip').build(),
          attributedHint: p.get('attributedHint').build(),
          hintOverrides: p.get('hintOverrides').build(),
          textDirection: p.get('textDirection').build(),
          sortKey: p.get('sortKey').build(),
          tagForChildren: p.get('tagForChildren').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onScrollLeft: p.get('onScrollLeft').build(),
          onScrollRight: p.get('onScrollRight').build(),
          onScrollUp: p.get('onScrollUp').build(),
          onScrollDown: p.get('onScrollDown').build(),
          onIncrease: p.get('onIncrease').build(),
          onDecrease: p.get('onDecrease').build(),
          onCopy: p.get('onCopy').build(),
          onCut: p.get('onCut').build(),
          onPaste: p.get('onPaste').build(),
          onMoveCursorForwardByCharacter: p.get('onMoveCursorForwardByCharacter').build(),
          onMoveCursorBackwardByCharacter: p.get('onMoveCursorBackwardByCharacter').build(),
          onMoveCursorForwardByWord: p.get('onMoveCursorForwardByWord').build(),
          onMoveCursorBackwardByWord: p.get('onMoveCursorBackwardByWord').build(),
          onSetSelection: p.get('onSetSelection').build(),
          onSetText: p.get('onSetText').build(),
          onDidGainAccessibilityFocus: p.get('onDidGainAccessibilityFocus').build(),
          onDidLoseAccessibilityFocus: p.get('onDidLoseAccessibilityFocus').build(),
          onDismiss: p.get('onDismiss').build(),
          customSemanticsActions: p.get('customSemanticsActions').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SemanticsNode extends AbstractNode with DiagnosticableTreeMixin
class SemanticsNode$Mate extends _i1.SemanticsNode with _i2.Mate {
  /// SemanticsNode SemanticsNode({Key? key, void Function()? showOnScreen})
  SemanticsNode$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {void Function()? showOnScreen} , default:none
    super.showOnScreen,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i7.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'showOnScreen': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'showOnScreen',
            init: showOnScreen,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SemanticsNode';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsNode$Mate(
          key: p.get('key').build(),
          showOnScreen: p.get('showOnScreen').build(),
        );
  }

  /// SemanticsNode SemanticsNode.root({Key? key, void Function()? showOnScreen, required SemanticsOwner owner})
  SemanticsNode$Mate.root({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {void Function()? showOnScreen} , default:none
    super.showOnScreen,

    /// optionalParameters: {required SemanticsOwner owner} , default:none
    required super.owner,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i7.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'showOnScreen': _i2.BuilderArg<_i3.VoidCallback?>(
            name: 'showOnScreen',
            init: showOnScreen,
            isNamed: true,
          ),
          'owner': _i2.BuilderArg<_i1.SemanticsOwner>(
            name: 'owner',
            init: owner,
            isNamed: true,
          ),
        },
        super.root() {
    mateBuilderName = 'SemanticsNode.root';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsNode$Mate.root(
          key: p.get('key').build(),
          showOnScreen: p.get('showOnScreen').build(),
          owner: p.get('owner').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SemanticsOwner extends ChangeNotifier
class SemanticsOwner$Mate extends _i1.SemanticsOwner with _i2.Mate {
  /// SemanticsOwner SemanticsOwner({required void Function(SemanticsUpdate) onSemanticsUpdate})
  SemanticsOwner$Mate(
      {
      /// optionalParameters: {required void Function(SemanticsUpdate) onSemanticsUpdate} , default:none
      required super.onSemanticsUpdate})
      : mateParams = {
          'onSemanticsUpdate': _i2.BuilderArg<_i1.SemanticsUpdateCallback>(
            name: 'onSemanticsUpdate',
            init: onSemanticsUpdate,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'SemanticsOwner';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsOwner$Mate(onSemanticsUpdate: p.get('onSemanticsUpdate').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class OrdinalSortKey extends SemanticsSortKey
class OrdinalSortKey$Mate extends _i1.OrdinalSortKey with _i2.Mate {
  /// OrdinalSortKey OrdinalSortKey(double order, {String? name})
  OrdinalSortKey$Mate(
    /// requiredParameters: double order
    super.order, {
    /// optionalParameters: {String? name} , default:none
    super.name,
  })  : mateParams = {
          'order': _i2.BuilderArg<double>(
            name: 'order',
            init: order,
            isNamed: false,
          ),
          'name': _i2.BuilderArg<String?>(
            name: 'name',
            init: name,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'OrdinalSortKey';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => OrdinalSortKey$Mate(
          p.get('order').value,
          name: p.get('name').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
