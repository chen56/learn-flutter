// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/semantics/semantics.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/services/text_editing.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/foundation/key.dart';

/// class SemanticsTag
class SemanticsTag$Mate extends SemanticsTag with Mate {
  /// SemanticsTag SemanticsTag(String name)
  SemanticsTag$Mate(

      /// requiredParameters: String name
      String name)
      : super(name) {
    mateCreateName = 'SemanticsTag';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsTag$Mate(p.get('name').value);
    mateUse('name', name);
  }
}

/// class CustomSemanticsAction
class CustomSemanticsAction$Mate extends CustomSemanticsAction with Mate {
  /// CustomSemanticsAction CustomSemanticsAction({required String label})
  CustomSemanticsAction$Mate(
      {
      /// optionalParameters: {required String label} , defaultValue:none
      required String label})
      : super(label: label) {
    mateCreateName = 'CustomSemanticsAction';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => CustomSemanticsAction$Mate(label: p.get('label').build());
    mateUse('label', label);
  }

  /// CustomSemanticsAction CustomSemanticsAction.overridingAction({required String hint, required SemanticsAction action})
  CustomSemanticsAction$Mate.overridingAction({
    /// optionalParameters: {required String hint} , defaultValue:none
    required String hint,

    /// optionalParameters: {required SemanticsAction action} , defaultValue:none
    required SemanticsAction action,
  }) : super.overridingAction(
          hint: hint,
          action: action,
        ) {
    mateCreateName = 'CustomSemanticsAction.overridingAction';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => CustomSemanticsAction$Mate.overridingAction(
          hint: p.get('hint').build(),
          action: p.get('action').build(),
        );
    mateUse('hint', hint);
    mateUse('action', action);
  }
}

/// class AttributedString
class AttributedString$Mate extends AttributedString with Mate {
  /// AttributedString AttributedString(String string, {List<StringAttribute> attributes = const <StringAttribute>[]})
  AttributedString$Mate(
    /// requiredParameters: String string
    String string, {
    /// optionalParameters: {List<StringAttribute> attributes = const <StringAttribute>[]} , defaultValue:unprocessed
    required List<StringAttribute> attributes,
  }) : super(
          string,
          attributes: attributes,
        ) {
    mateCreateName = 'AttributedString';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => AttributedString$Mate(
          p.get('string').value,
          attributes: p.get('attributes').build(),
        );
    mateUse('string', string);
    mateUse('attributes', attributes);
  }
}

/// class AttributedStringProperty extends DiagnosticsProperty<AttributedString>
class AttributedStringProperty$Mate extends AttributedStringProperty with Mate {
  /// AttributedStringProperty AttributedStringProperty(String name, AttributedString? value, {bool showName = true, bool showWhenEmpty = false, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info, String? description})
  AttributedStringProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: AttributedString? value
    AttributedString? value, {
    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {bool showWhenEmpty = false} , defaultValue:Literal
    bool showWhenEmpty = false,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , defaultValue:is!ConstVariableElement
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,

    /// optionalParameters: {String? description} , defaultValue:none
    String? description,
  }) : super(
          name,
          value,
          showName: showName,
          showWhenEmpty: showWhenEmpty,
          defaultValue: defaultValue,
          level: level,
          description: description,
        ) {
    mateCreateName = 'AttributedStringProperty';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => AttributedStringProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          showName: p.get('showName').build(),
          showWhenEmpty: p.get('showWhenEmpty').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
          description: p.get('description').build(),
        );
    mateUse('name', name);
    mateUse('value', value);
    mateUse('showName', showName);
    mateUse('showWhenEmpty', showWhenEmpty);
    mateUse('defaultValue', defaultValue);
    mateUse('level', level);
    mateUse('description', description);
  }
}

/// class SemanticsData with Diagnosticable
class SemanticsData$Mate extends SemanticsData with Mate {
  /// SemanticsData SemanticsData({required int flags, required int actions, required AttributedString attributedLabel, required AttributedString attributedValue, required AttributedString attributedIncreasedValue, required AttributedString attributedDecreasedValue, required AttributedString attributedHint, required String tooltip, required TextDirection? textDirection, required Rect rect, required double elevation, required double thickness, required TextSelection? textSelection, required int? scrollIndex, required int? scrollChildCount, required double? scrollPosition, required double? scrollExtentMax, required double? scrollExtentMin, required int? platformViewId, required int? maxValueLength, required int? currentValueLength, Set<SemanticsTag>? tags, Matrix4? transform, List<int>? customSemanticsActionIds})
  SemanticsData$Mate({
    /// optionalParameters: {required int flags} , defaultValue:none
    required int flags,

    /// optionalParameters: {required int actions} , defaultValue:none
    required int actions,

    /// optionalParameters: {required AttributedString attributedLabel} , defaultValue:none
    required AttributedString attributedLabel,

    /// optionalParameters: {required AttributedString attributedValue} , defaultValue:none
    required AttributedString attributedValue,

    /// optionalParameters: {required AttributedString attributedIncreasedValue} , defaultValue:none
    required AttributedString attributedIncreasedValue,

    /// optionalParameters: {required AttributedString attributedDecreasedValue} , defaultValue:none
    required AttributedString attributedDecreasedValue,

    /// optionalParameters: {required AttributedString attributedHint} , defaultValue:none
    required AttributedString attributedHint,

    /// optionalParameters: {required String tooltip} , defaultValue:none
    required String tooltip,

    /// optionalParameters: {required TextDirection? textDirection} , defaultValue:none
    required TextDirection? textDirection,

    /// optionalParameters: {required Rect rect} , defaultValue:none
    required Rect rect,

    /// optionalParameters: {required double elevation} , defaultValue:none
    required double elevation,

    /// optionalParameters: {required double thickness} , defaultValue:none
    required double thickness,

    /// optionalParameters: {required TextSelection? textSelection} , defaultValue:none
    required TextSelection? textSelection,

    /// optionalParameters: {required int? scrollIndex} , defaultValue:none
    required int? scrollIndex,

    /// optionalParameters: {required int? scrollChildCount} , defaultValue:none
    required int? scrollChildCount,

    /// optionalParameters: {required double? scrollPosition} , defaultValue:none
    required double? scrollPosition,

    /// optionalParameters: {required double? scrollExtentMax} , defaultValue:none
    required double? scrollExtentMax,

    /// optionalParameters: {required double? scrollExtentMin} , defaultValue:none
    required double? scrollExtentMin,

    /// optionalParameters: {required int? platformViewId} , defaultValue:none
    required int? platformViewId,

    /// optionalParameters: {required int? maxValueLength} , defaultValue:none
    required int? maxValueLength,

    /// optionalParameters: {required int? currentValueLength} , defaultValue:none
    required int? currentValueLength,

    /// optionalParameters: {Set<SemanticsTag>? tags} , defaultValue:none
    Set<SemanticsTag>? tags,

    /// optionalParameters: {Matrix4? transform} , defaultValue:none
    Matrix4? transform,

    /// optionalParameters: {List<int>? customSemanticsActionIds} , defaultValue:none
    List<int>? customSemanticsActionIds,
  }) : super(
          flags: flags,
          actions: actions,
          attributedLabel: attributedLabel,
          attributedValue: attributedValue,
          attributedIncreasedValue: attributedIncreasedValue,
          attributedDecreasedValue: attributedDecreasedValue,
          attributedHint: attributedHint,
          tooltip: tooltip,
          textDirection: textDirection,
          rect: rect,
          elevation: elevation,
          thickness: thickness,
          textSelection: textSelection,
          scrollIndex: scrollIndex,
          scrollChildCount: scrollChildCount,
          scrollPosition: scrollPosition,
          scrollExtentMax: scrollExtentMax,
          scrollExtentMin: scrollExtentMin,
          platformViewId: platformViewId,
          maxValueLength: maxValueLength,
          currentValueLength: currentValueLength,
          tags: tags,
          transform: transform,
          customSemanticsActionIds: customSemanticsActionIds,
        ) {
    mateCreateName = 'SemanticsData';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsData$Mate(
          flags: p.get('flags').build(),
          actions: p.get('actions').build(),
          attributedLabel: p.get('attributedLabel').build(),
          attributedValue: p.get('attributedValue').build(),
          attributedIncreasedValue: p.get('attributedIncreasedValue').build(),
          attributedDecreasedValue: p.get('attributedDecreasedValue').build(),
          attributedHint: p.get('attributedHint').build(),
          tooltip: p.get('tooltip').build(),
          textDirection: p.get('textDirection').build(),
          rect: p.get('rect').build(),
          elevation: p.get('elevation').build(),
          thickness: p.get('thickness').build(),
          textSelection: p.get('textSelection').build(),
          scrollIndex: p.get('scrollIndex').build(),
          scrollChildCount: p.get('scrollChildCount').build(),
          scrollPosition: p.get('scrollPosition').build(),
          scrollExtentMax: p.get('scrollExtentMax').build(),
          scrollExtentMin: p.get('scrollExtentMin').build(),
          platformViewId: p.get('platformViewId').build(),
          maxValueLength: p.get('maxValueLength').build(),
          currentValueLength: p.get('currentValueLength').build(),
          tags: p.get('tags').build(),
          transform: p.get('transform').build(),
          customSemanticsActionIds: p.get('customSemanticsActionIds').build(),
        );
    mateUse('flags', flags);
    mateUse('actions', actions);
    mateUse('attributedLabel', attributedLabel);
    mateUse('attributedValue', attributedValue);
    mateUse('attributedIncreasedValue', attributedIncreasedValue);
    mateUse('attributedDecreasedValue', attributedDecreasedValue);
    mateUse('attributedHint', attributedHint);
    mateUse('tooltip', tooltip);
    mateUse('textDirection', textDirection);
    mateUse('rect', rect);
    mateUse('elevation', elevation);
    mateUse('thickness', thickness);
    mateUse('textSelection', textSelection);
    mateUse('scrollIndex', scrollIndex);
    mateUse('scrollChildCount', scrollChildCount);
    mateUse('scrollPosition', scrollPosition);
    mateUse('scrollExtentMax', scrollExtentMax);
    mateUse('scrollExtentMin', scrollExtentMin);
    mateUse('platformViewId', platformViewId);
    mateUse('maxValueLength', maxValueLength);
    mateUse('currentValueLength', currentValueLength);
    mateUse('tags', tags);
    mateUse('transform', transform);
    mateUse('customSemanticsActionIds', customSemanticsActionIds);
  }
}

/// class SemanticsHintOverrides extends DiagnosticableTree
class SemanticsHintOverrides$Mate extends SemanticsHintOverrides with Mate {
  /// SemanticsHintOverrides SemanticsHintOverrides({String? onTapHint, String? onLongPressHint})
  SemanticsHintOverrides$Mate({
    /// optionalParameters: {String? onTapHint} , defaultValue:none
    String? onTapHint,

    /// optionalParameters: {String? onLongPressHint} , defaultValue:none
    String? onLongPressHint,
  }) : super(
          onTapHint: onTapHint,
          onLongPressHint: onLongPressHint,
        ) {
    mateCreateName = 'SemanticsHintOverrides';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsHintOverrides$Mate(
          onTapHint: p.get('onTapHint').build(),
          onLongPressHint: p.get('onLongPressHint').build(),
        );
    mateUse('onTapHint', onTapHint);
    mateUse('onLongPressHint', onLongPressHint);
  }
}

/// class SemanticsProperties extends DiagnosticableTree
class SemanticsProperties$Mate extends SemanticsProperties with Mate {
  /// SemanticsProperties SemanticsProperties({bool? enabled, bool? checked, bool? mixed, bool? selected, bool? toggled, bool? button, bool? link, bool? header, bool? textField, bool? slider, bool? keyboardKey, bool? readOnly, bool? focusable, bool? focused, bool? inMutuallyExclusiveGroup, bool? hidden, bool? obscured, bool? multiline, bool? scopesRoute, bool? namesRoute, bool? image, bool? liveRegion, int? maxValueLength, int? currentValueLength, String? label, AttributedString? attributedLabel, String? value, AttributedString? attributedValue, String? increasedValue, AttributedString? attributedIncreasedValue, String? decreasedValue, AttributedString? attributedDecreasedValue, String? hint, String? tooltip, AttributedString? attributedHint, SemanticsHintOverrides? hintOverrides, TextDirection? textDirection, SemanticsSortKey? sortKey, SemanticsTag? tagForChildren, void Function()? onTap, void Function()? onLongPress, void Function()? onScrollLeft, void Function()? onScrollRight, void Function()? onScrollUp, void Function()? onScrollDown, void Function()? onIncrease, void Function()? onDecrease, void Function()? onCopy, void Function()? onCut, void Function()? onPaste, void Function(bool)? onMoveCursorForwardByCharacter, void Function(bool)? onMoveCursorBackwardByCharacter, void Function(bool)? onMoveCursorForwardByWord, void Function(bool)? onMoveCursorBackwardByWord, void Function(TextSelection)? onSetSelection, void Function(String)? onSetText, void Function()? onDidGainAccessibilityFocus, void Function()? onDidLoseAccessibilityFocus, void Function()? onDismiss, Map<CustomSemanticsAction, void Function()>? customSemanticsActions})
  SemanticsProperties$Mate({
    /// optionalParameters: {bool? enabled} , defaultValue:none
    bool? enabled,

    /// optionalParameters: {bool? checked} , defaultValue:none
    bool? checked,

    /// optionalParameters: {bool? mixed} , defaultValue:none
    bool? mixed,

    /// optionalParameters: {bool? selected} , defaultValue:none
    bool? selected,

    /// optionalParameters: {bool? toggled} , defaultValue:none
    bool? toggled,

    /// optionalParameters: {bool? button} , defaultValue:none
    bool? button,

    /// optionalParameters: {bool? link} , defaultValue:none
    bool? link,

    /// optionalParameters: {bool? header} , defaultValue:none
    bool? header,

    /// optionalParameters: {bool? textField} , defaultValue:none
    bool? textField,

    /// optionalParameters: {bool? slider} , defaultValue:none
    bool? slider,

    /// optionalParameters: {bool? keyboardKey} , defaultValue:none
    bool? keyboardKey,

    /// optionalParameters: {bool? readOnly} , defaultValue:none
    bool? readOnly,

    /// optionalParameters: {bool? focusable} , defaultValue:none
    bool? focusable,

    /// optionalParameters: {bool? focused} , defaultValue:none
    bool? focused,

    /// optionalParameters: {bool? inMutuallyExclusiveGroup} , defaultValue:none
    bool? inMutuallyExclusiveGroup,

    /// optionalParameters: {bool? hidden} , defaultValue:none
    bool? hidden,

    /// optionalParameters: {bool? obscured} , defaultValue:none
    bool? obscured,

    /// optionalParameters: {bool? multiline} , defaultValue:none
    bool? multiline,

    /// optionalParameters: {bool? scopesRoute} , defaultValue:none
    bool? scopesRoute,

    /// optionalParameters: {bool? namesRoute} , defaultValue:none
    bool? namesRoute,

    /// optionalParameters: {bool? image} , defaultValue:none
    bool? image,

    /// optionalParameters: {bool? liveRegion} , defaultValue:none
    bool? liveRegion,

    /// optionalParameters: {int? maxValueLength} , defaultValue:none
    int? maxValueLength,

    /// optionalParameters: {int? currentValueLength} , defaultValue:none
    int? currentValueLength,

    /// optionalParameters: {String? label} , defaultValue:none
    String? label,

    /// optionalParameters: {AttributedString? attributedLabel} , defaultValue:none
    AttributedString? attributedLabel,

    /// optionalParameters: {String? value} , defaultValue:none
    String? value,

    /// optionalParameters: {AttributedString? attributedValue} , defaultValue:none
    AttributedString? attributedValue,

    /// optionalParameters: {String? increasedValue} , defaultValue:none
    String? increasedValue,

    /// optionalParameters: {AttributedString? attributedIncreasedValue} , defaultValue:none
    AttributedString? attributedIncreasedValue,

    /// optionalParameters: {String? decreasedValue} , defaultValue:none
    String? decreasedValue,

    /// optionalParameters: {AttributedString? attributedDecreasedValue} , defaultValue:none
    AttributedString? attributedDecreasedValue,

    /// optionalParameters: {String? hint} , defaultValue:none
    String? hint,

    /// optionalParameters: {String? tooltip} , defaultValue:none
    String? tooltip,

    /// optionalParameters: {AttributedString? attributedHint} , defaultValue:none
    AttributedString? attributedHint,

    /// optionalParameters: {SemanticsHintOverrides? hintOverrides} , defaultValue:none
    SemanticsHintOverrides? hintOverrides,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {SemanticsSortKey? sortKey} , defaultValue:none
    SemanticsSortKey? sortKey,

    /// optionalParameters: {SemanticsTag? tagForChildren} , defaultValue:none
    SemanticsTag? tagForChildren,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    VoidCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    VoidCallback? onLongPress,

    /// optionalParameters: {void Function()? onScrollLeft} , defaultValue:none
    VoidCallback? onScrollLeft,

    /// optionalParameters: {void Function()? onScrollRight} , defaultValue:none
    VoidCallback? onScrollRight,

    /// optionalParameters: {void Function()? onScrollUp} , defaultValue:none
    VoidCallback? onScrollUp,

    /// optionalParameters: {void Function()? onScrollDown} , defaultValue:none
    VoidCallback? onScrollDown,

    /// optionalParameters: {void Function()? onIncrease} , defaultValue:none
    VoidCallback? onIncrease,

    /// optionalParameters: {void Function()? onDecrease} , defaultValue:none
    VoidCallback? onDecrease,

    /// optionalParameters: {void Function()? onCopy} , defaultValue:none
    VoidCallback? onCopy,

    /// optionalParameters: {void Function()? onCut} , defaultValue:none
    VoidCallback? onCut,

    /// optionalParameters: {void Function()? onPaste} , defaultValue:none
    VoidCallback? onPaste,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByCharacter} , defaultValue:none
    MoveCursorHandler? onMoveCursorForwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByCharacter} , defaultValue:none
    MoveCursorHandler? onMoveCursorBackwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByWord} , defaultValue:none
    MoveCursorHandler? onMoveCursorForwardByWord,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByWord} , defaultValue:none
    MoveCursorHandler? onMoveCursorBackwardByWord,

    /// optionalParameters: {void Function(TextSelection)? onSetSelection} , defaultValue:none
    SetSelectionHandler? onSetSelection,

    /// optionalParameters: {void Function(String)? onSetText} , defaultValue:none
    SetTextHandler? onSetText,

    /// optionalParameters: {void Function()? onDidGainAccessibilityFocus} , defaultValue:none
    VoidCallback? onDidGainAccessibilityFocus,

    /// optionalParameters: {void Function()? onDidLoseAccessibilityFocus} , defaultValue:none
    VoidCallback? onDidLoseAccessibilityFocus,

    /// optionalParameters: {void Function()? onDismiss} , defaultValue:none
    VoidCallback? onDismiss,

    /// optionalParameters: {Map<CustomSemanticsAction, void Function()>? customSemanticsActions} , defaultValue:none
    Map<CustomSemanticsAction, VoidCallback>? customSemanticsActions,
  }) : super(
          enabled: enabled,
          checked: checked,
          mixed: mixed,
          selected: selected,
          toggled: toggled,
          button: button,
          link: link,
          header: header,
          textField: textField,
          slider: slider,
          keyboardKey: keyboardKey,
          readOnly: readOnly,
          focusable: focusable,
          focused: focused,
          inMutuallyExclusiveGroup: inMutuallyExclusiveGroup,
          hidden: hidden,
          obscured: obscured,
          multiline: multiline,
          scopesRoute: scopesRoute,
          namesRoute: namesRoute,
          image: image,
          liveRegion: liveRegion,
          maxValueLength: maxValueLength,
          currentValueLength: currentValueLength,
          label: label,
          attributedLabel: attributedLabel,
          value: value,
          attributedValue: attributedValue,
          increasedValue: increasedValue,
          attributedIncreasedValue: attributedIncreasedValue,
          decreasedValue: decreasedValue,
          attributedDecreasedValue: attributedDecreasedValue,
          hint: hint,
          tooltip: tooltip,
          attributedHint: attributedHint,
          hintOverrides: hintOverrides,
          textDirection: textDirection,
          sortKey: sortKey,
          tagForChildren: tagForChildren,
          onTap: onTap,
          onLongPress: onLongPress,
          onScrollLeft: onScrollLeft,
          onScrollRight: onScrollRight,
          onScrollUp: onScrollUp,
          onScrollDown: onScrollDown,
          onIncrease: onIncrease,
          onDecrease: onDecrease,
          onCopy: onCopy,
          onCut: onCut,
          onPaste: onPaste,
          onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter,
          onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter,
          onMoveCursorForwardByWord: onMoveCursorForwardByWord,
          onMoveCursorBackwardByWord: onMoveCursorBackwardByWord,
          onSetSelection: onSetSelection,
          onSetText: onSetText,
          onDidGainAccessibilityFocus: onDidGainAccessibilityFocus,
          onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus,
          onDismiss: onDismiss,
          customSemanticsActions: customSemanticsActions,
        ) {
    mateCreateName = 'SemanticsProperties';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsProperties$Mate(
          enabled: p.get('enabled').build(),
          checked: p.get('checked').build(),
          mixed: p.get('mixed').build(),
          selected: p.get('selected').build(),
          toggled: p.get('toggled').build(),
          button: p.get('button').build(),
          link: p.get('link').build(),
          header: p.get('header').build(),
          textField: p.get('textField').build(),
          slider: p.get('slider').build(),
          keyboardKey: p.get('keyboardKey').build(),
          readOnly: p.get('readOnly').build(),
          focusable: p.get('focusable').build(),
          focused: p.get('focused').build(),
          inMutuallyExclusiveGroup: p.get('inMutuallyExclusiveGroup').build(),
          hidden: p.get('hidden').build(),
          obscured: p.get('obscured').build(),
          multiline: p.get('multiline').build(),
          scopesRoute: p.get('scopesRoute').build(),
          namesRoute: p.get('namesRoute').build(),
          image: p.get('image').build(),
          liveRegion: p.get('liveRegion').build(),
          maxValueLength: p.get('maxValueLength').build(),
          currentValueLength: p.get('currentValueLength').build(),
          label: p.get('label').build(),
          attributedLabel: p.get('attributedLabel').build(),
          value: p.get('value').build(),
          attributedValue: p.get('attributedValue').build(),
          increasedValue: p.get('increasedValue').build(),
          attributedIncreasedValue: p.get('attributedIncreasedValue').build(),
          decreasedValue: p.get('decreasedValue').build(),
          attributedDecreasedValue: p.get('attributedDecreasedValue').build(),
          hint: p.get('hint').build(),
          tooltip: p.get('tooltip').build(),
          attributedHint: p.get('attributedHint').build(),
          hintOverrides: p.get('hintOverrides').build(),
          textDirection: p.get('textDirection').build(),
          sortKey: p.get('sortKey').build(),
          tagForChildren: p.get('tagForChildren').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onScrollLeft: p.get('onScrollLeft').build(),
          onScrollRight: p.get('onScrollRight').build(),
          onScrollUp: p.get('onScrollUp').build(),
          onScrollDown: p.get('onScrollDown').build(),
          onIncrease: p.get('onIncrease').build(),
          onDecrease: p.get('onDecrease').build(),
          onCopy: p.get('onCopy').build(),
          onCut: p.get('onCut').build(),
          onPaste: p.get('onPaste').build(),
          onMoveCursorForwardByCharacter: p.get('onMoveCursorForwardByCharacter').build(),
          onMoveCursorBackwardByCharacter: p.get('onMoveCursorBackwardByCharacter').build(),
          onMoveCursorForwardByWord: p.get('onMoveCursorForwardByWord').build(),
          onMoveCursorBackwardByWord: p.get('onMoveCursorBackwardByWord').build(),
          onSetSelection: p.get('onSetSelection').build(),
          onSetText: p.get('onSetText').build(),
          onDidGainAccessibilityFocus: p.get('onDidGainAccessibilityFocus').build(),
          onDidLoseAccessibilityFocus: p.get('onDidLoseAccessibilityFocus').build(),
          onDismiss: p.get('onDismiss').build(),
          customSemanticsActions: p.get('customSemanticsActions').build(),
        );
    mateUse('enabled', enabled);
    mateUse('checked', checked);
    mateUse('mixed', mixed);
    mateUse('selected', selected);
    mateUse('toggled', toggled);
    mateUse('button', button);
    mateUse('link', link);
    mateUse('header', header);
    mateUse('textField', textField);
    mateUse('slider', slider);
    mateUse('keyboardKey', keyboardKey);
    mateUse('readOnly', readOnly);
    mateUse('focusable', focusable);
    mateUse('focused', focused);
    mateUse('inMutuallyExclusiveGroup', inMutuallyExclusiveGroup);
    mateUse('hidden', hidden);
    mateUse('obscured', obscured);
    mateUse('multiline', multiline);
    mateUse('scopesRoute', scopesRoute);
    mateUse('namesRoute', namesRoute);
    mateUse('image', image);
    mateUse('liveRegion', liveRegion);
    mateUse('maxValueLength', maxValueLength);
    mateUse('currentValueLength', currentValueLength);
    mateUse('label', label);
    mateUse('attributedLabel', attributedLabel);
    mateUse('value', value);
    mateUse('attributedValue', attributedValue);
    mateUse('increasedValue', increasedValue);
    mateUse('attributedIncreasedValue', attributedIncreasedValue);
    mateUse('decreasedValue', decreasedValue);
    mateUse('attributedDecreasedValue', attributedDecreasedValue);
    mateUse('hint', hint);
    mateUse('tooltip', tooltip);
    mateUse('attributedHint', attributedHint);
    mateUse('hintOverrides', hintOverrides);
    mateUse('textDirection', textDirection);
    mateUse('sortKey', sortKey);
    mateUse('tagForChildren', tagForChildren);
    mateUse('onTap', onTap);
    mateUse('onLongPress', onLongPress);
    mateUse('onScrollLeft', onScrollLeft);
    mateUse('onScrollRight', onScrollRight);
    mateUse('onScrollUp', onScrollUp);
    mateUse('onScrollDown', onScrollDown);
    mateUse('onIncrease', onIncrease);
    mateUse('onDecrease', onDecrease);
    mateUse('onCopy', onCopy);
    mateUse('onCut', onCut);
    mateUse('onPaste', onPaste);
    mateUse('onMoveCursorForwardByCharacter', onMoveCursorForwardByCharacter);
    mateUse('onMoveCursorBackwardByCharacter', onMoveCursorBackwardByCharacter);
    mateUse('onMoveCursorForwardByWord', onMoveCursorForwardByWord);
    mateUse('onMoveCursorBackwardByWord', onMoveCursorBackwardByWord);
    mateUse('onSetSelection', onSetSelection);
    mateUse('onSetText', onSetText);
    mateUse('onDidGainAccessibilityFocus', onDidGainAccessibilityFocus);
    mateUse('onDidLoseAccessibilityFocus', onDidLoseAccessibilityFocus);
    mateUse('onDismiss', onDismiss);
    mateUse('customSemanticsActions', customSemanticsActions);
  }
}

/// class SemanticsNode extends AbstractNode with DiagnosticableTreeMixin
class SemanticsNode$Mate extends SemanticsNode with Mate {
  /// SemanticsNode SemanticsNode({Key? key, void Function()? showOnScreen})
  SemanticsNode$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {void Function()? showOnScreen} , defaultValue:none
    VoidCallback? showOnScreen,
  }) : super(
          key: key,
          showOnScreen: showOnScreen,
        ) {
    mateCreateName = 'SemanticsNode';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsNode$Mate(
          key: p.get('key').build(),
          showOnScreen: p.get('showOnScreen').build(),
        );
    mateUse('key', key);
    mateUse('showOnScreen', showOnScreen);
  }

  /// SemanticsNode SemanticsNode.root({Key? key, void Function()? showOnScreen, required SemanticsOwner owner})
  SemanticsNode$Mate.root({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {void Function()? showOnScreen} , defaultValue:none
    VoidCallback? showOnScreen,

    /// optionalParameters: {required SemanticsOwner owner} , defaultValue:none
    required SemanticsOwner owner,
  }) : super.root(
          key: key,
          showOnScreen: showOnScreen,
          owner: owner,
        ) {
    mateCreateName = 'SemanticsNode.root';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsNode$Mate.root(
          key: p.get('key').build(),
          showOnScreen: p.get('showOnScreen').build(),
          owner: p.get('owner').build(),
        );
    mateUse('key', key);
    mateUse('showOnScreen', showOnScreen);
    mateUse('owner', owner);
  }
}

/// class SemanticsOwner extends ChangeNotifier
class SemanticsOwner$Mate extends SemanticsOwner with Mate {
  /// SemanticsOwner SemanticsOwner({required void Function(SemanticsUpdate) onSemanticsUpdate})
  SemanticsOwner$Mate(
      {
      /// optionalParameters: {required void Function(SemanticsUpdate) onSemanticsUpdate} , defaultValue:none
      required SemanticsUpdateCallback onSemanticsUpdate})
      : super(onSemanticsUpdate: onSemanticsUpdate) {
    mateCreateName = 'SemanticsOwner';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => SemanticsOwner$Mate(onSemanticsUpdate: p.get('onSemanticsUpdate').build());
    mateUse('onSemanticsUpdate', onSemanticsUpdate);
  }
}

/// class OrdinalSortKey extends SemanticsSortKey
class OrdinalSortKey$Mate extends OrdinalSortKey with Mate {
  /// OrdinalSortKey OrdinalSortKey(double order, {String? name})
  OrdinalSortKey$Mate(
    /// requiredParameters: double order
    double order, {
    /// optionalParameters: {String? name} , defaultValue:none
    String? name,
  }) : super(
          order,
          name: name,
        ) {
    mateCreateName = 'OrdinalSortKey';
    matePackageUrl = 'package:flutter/semantics.dart';
    mateBuilder = (p) => OrdinalSortKey$Mate(
          p.get('order').value,
          name: p.get('name').build(),
        );
    mateUse('order', order);
    mateUse('name', name);
  }
}
