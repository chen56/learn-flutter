// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/viewport.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'package:flutter/src/rendering/viewport.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';

/// class Viewport extends MultiChildRenderObjectWidget
class Viewport$Mate extends Viewport with Mate {
  /// Viewport Viewport({Key? key, AxisDirection axisDirection = AxisDirection.down, AxisDirection? crossAxisDirection, double anchor = 0.0, required ViewportOffset offset, Key? center, double? cacheExtent, CacheExtentStyle cacheExtentStyle = CacheExtentStyle.pixel, Clip clipBehavior = Clip.hardEdge, List<Widget> slivers = const <Widget>[]})
  Viewport$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , defaultValue:unprocessed
    required AxisDirection axisDirection,

    /// optionalParameters: {AxisDirection? crossAxisDirection} , defaultValue:none
    AxisDirection? crossAxisDirection,

    /// optionalParameters: {double anchor = 0.0} , defaultValue:Literal
    double anchor = 0.0,

    /// optionalParameters: {required ViewportOffset offset} , defaultValue:none
    required ViewportOffset offset,

    /// optionalParameters: {Key? center} , defaultValue:none
    Key? center,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {CacheExtentStyle cacheExtentStyle = CacheExtentStyle.pixel} , defaultValue:unprocessed
    required CacheExtentStyle cacheExtentStyle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {List<Widget> slivers = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> slivers,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          anchor: anchor,
          offset: offset,
          center: center,
          cacheExtent: cacheExtent,
          cacheExtentStyle: cacheExtentStyle,
          clipBehavior: clipBehavior,
          slivers: slivers,
        ) {
    mateBuilder = (p) => Viewport$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          crossAxisDirection: p.get('crossAxisDirection').build(),
          anchor: p.get('anchor').build(),
          offset: p.get('offset').build(),
          center: p.get('center').build(),
          cacheExtent: p.get('cacheExtent').build(),
          cacheExtentStyle: p.get('cacheExtentStyle').build(),
          clipBehavior: p.get('clipBehavior').build(),
          slivers: p.get('slivers').build(),
        );
    mateDeclare('key', key);
    mateDeclare('axisDirection', axisDirection);
    mateDeclare('crossAxisDirection', crossAxisDirection);
    mateDeclare('anchor', anchor);
    mateDeclare('offset', offset);
    mateDeclare('center', center);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('cacheExtentStyle', cacheExtentStyle);
    mateDeclare('clipBehavior', clipBehavior);
    mateDeclare('slivers', slivers);
  }
}

/// class ShrinkWrappingViewport extends MultiChildRenderObjectWidget
class ShrinkWrappingViewport$Mate extends ShrinkWrappingViewport with Mate {
  /// ShrinkWrappingViewport ShrinkWrappingViewport({Key? key, AxisDirection axisDirection = AxisDirection.down, AxisDirection? crossAxisDirection, required ViewportOffset offset, Clip clipBehavior = Clip.hardEdge, List<Widget> slivers = const <Widget>[]})
  ShrinkWrappingViewport$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , defaultValue:unprocessed
    required AxisDirection axisDirection,

    /// optionalParameters: {AxisDirection? crossAxisDirection} , defaultValue:none
    AxisDirection? crossAxisDirection,

    /// optionalParameters: {required ViewportOffset offset} , defaultValue:none
    required ViewportOffset offset,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {List<Widget> slivers = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> slivers,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          offset: offset,
          clipBehavior: clipBehavior,
          slivers: slivers,
        ) {
    mateBuilder = (p) => ShrinkWrappingViewport$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          crossAxisDirection: p.get('crossAxisDirection').build(),
          offset: p.get('offset').build(),
          clipBehavior: p.get('clipBehavior').build(),
          slivers: p.get('slivers').build(),
        );
    mateDeclare('key', key);
    mateDeclare('axisDirection', axisDirection);
    mateDeclare('crossAxisDirection', crossAxisDirection);
    mateDeclare('offset', offset);
    mateDeclare('clipBehavior', clipBehavior);
    mateDeclare('slivers', slivers);
  }
}
