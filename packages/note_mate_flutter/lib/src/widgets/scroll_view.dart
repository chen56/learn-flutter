// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/rendering/sliver_grid.dart';

/// class CustomScrollView extends ScrollView
class CustomScrollView$Mate extends CustomScrollView with Mate {
  /// CustomScrollView CustomScrollView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, ScrollBehavior? scrollBehavior, bool shrinkWrap = false, Key? center, double anchor = 0.0, double? cacheExtent, List<Widget> slivers = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  CustomScrollView$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , defaultValue:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {Key? center} , defaultValue:none
    Key? center,

    /// optionalParameters: {double anchor = 0.0} , defaultValue:Literal
    double anchor = 0.0,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {List<Widget> slivers = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> slivers,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          scrollBehavior: scrollBehavior,
          shrinkWrap: shrinkWrap,
          center: center,
          anchor: anchor,
          cacheExtent: cacheExtent,
          slivers: slivers,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => CustomScrollView$Mate(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          center: p.get('center').build(),
          anchor: p.get('anchor').build(),
          cacheExtent: p.get('cacheExtent').build(),
          slivers: p.get('slivers').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('scrollBehavior', scrollBehavior);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('center', center);
    mateDeclare('anchor', anchor);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('slivers', slivers);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }
}

/// class ListView extends BoxScrollView
class ListView$Mate extends ListView with Mate {
  /// ListView ListView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double? itemExtent} , defaultValue:none
    double? itemExtent,

    /// optionalParameters: {Widget? prototypeItem} , defaultValue:none
    Widget? prototypeItem,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , defaultValue:Literal
    bool addAutomaticKeepAlives = true,

    /// optionalParameters: {bool addRepaintBoundaries = true} , defaultValue:Literal
    bool addRepaintBoundaries = true,

    /// optionalParameters: {bool addSemanticIndexes = true} , defaultValue:Literal
    bool addSemanticIndexes = true,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => ListView$Mate(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          itemExtent: p.get('itemExtent').build(),
          prototypeItem: p.get('prototypeItem').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
          cacheExtent: p.get('cacheExtent').build(),
          children: p.get('children').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('itemExtent', itemExtent);
    mateDeclare('prototypeItem', prototypeItem);
    mateDeclare('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateDeclare('addRepaintBoundaries', addRepaintBoundaries);
    mateDeclare('addSemanticIndexes', addSemanticIndexes);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('children', children);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }

  /// ListView ListView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.builder({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double? itemExtent} , defaultValue:none
    double? itemExtent,

    /// optionalParameters: {Widget? prototypeItem} , defaultValue:none
    Widget? prototypeItem,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , defaultValue:none
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , defaultValue:none
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , defaultValue:none
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , defaultValue:Literal
    bool addAutomaticKeepAlives = true,

    /// optionalParameters: {bool addRepaintBoundaries = true} , defaultValue:Literal
    bool addRepaintBoundaries = true,

    /// optionalParameters: {bool addSemanticIndexes = true} , defaultValue:Literal
    bool addSemanticIndexes = true,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => ListView$Mate.builder(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          itemExtent: p.get('itemExtent').build(),
          prototypeItem: p.get('prototypeItem').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          itemCount: p.get('itemCount').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
          cacheExtent: p.get('cacheExtent').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('itemExtent', itemExtent);
    mateDeclare('prototypeItem', prototypeItem);
    mateDeclare('itemBuilder', itemBuilder);
    mateDeclare('findChildIndexCallback', findChildIndexCallback);
    mateDeclare('itemCount', itemCount);
    mateDeclare('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateDeclare('addRepaintBoundaries', addRepaintBoundaries);
    mateDeclare('addSemanticIndexes', addSemanticIndexes);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }

  /// ListView ListView.separated({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, required Widget Function(BuildContext, int) separatorBuilder, required int itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.separated({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , defaultValue:none
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , defaultValue:none
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {required Widget Function(BuildContext, int) separatorBuilder} , defaultValue:none
    required IndexedWidgetBuilder separatorBuilder,

    /// optionalParameters: {required int itemCount} , defaultValue:none
    required int itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , defaultValue:Literal
    bool addAutomaticKeepAlives = true,

    /// optionalParameters: {bool addRepaintBoundaries = true} , defaultValue:Literal
    bool addRepaintBoundaries = true,

    /// optionalParameters: {bool addSemanticIndexes = true} , defaultValue:Literal
    bool addSemanticIndexes = true,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super.separated(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          separatorBuilder: separatorBuilder,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => ListView$Mate.separated(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          separatorBuilder: p.get('separatorBuilder').build(),
          itemCount: p.get('itemCount').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
          cacheExtent: p.get('cacheExtent').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('itemBuilder', itemBuilder);
    mateDeclare('findChildIndexCallback', findChildIndexCallback);
    mateDeclare('separatorBuilder', separatorBuilder);
    mateDeclare('itemCount', itemCount);
    mateDeclare('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateDeclare('addRepaintBoundaries', addRepaintBoundaries);
    mateDeclare('addSemanticIndexes', addSemanticIndexes);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }

  /// ListView ListView.custom({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, required SliverChildDelegate childrenDelegate, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.custom({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double? itemExtent} , defaultValue:none
    double? itemExtent,

    /// optionalParameters: {Widget? prototypeItem} , defaultValue:none
    Widget? prototypeItem,

    /// optionalParameters: {required SliverChildDelegate childrenDelegate} , defaultValue:none
    required SliverChildDelegate childrenDelegate,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          childrenDelegate: childrenDelegate,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => ListView$Mate.custom(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          itemExtent: p.get('itemExtent').build(),
          prototypeItem: p.get('prototypeItem').build(),
          childrenDelegate: p.get('childrenDelegate').build(),
          cacheExtent: p.get('cacheExtent').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('itemExtent', itemExtent);
    mateDeclare('prototypeItem', prototypeItem);
    mateDeclare('childrenDelegate', childrenDelegate);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }
}

/// class GridView extends BoxScrollView
class GridView$Mate extends GridView with Mate {
  /// GridView GridView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Clip clipBehavior = Clip.hardEdge, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId})
  GridView$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , defaultValue:none
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , defaultValue:Literal
    bool addAutomaticKeepAlives = true,

    /// optionalParameters: {bool addRepaintBoundaries = true} , defaultValue:Literal
    bool addRepaintBoundaries = true,

    /// optionalParameters: {bool addSemanticIndexes = true} , defaultValue:Literal
    bool addSemanticIndexes = true,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          clipBehavior: clipBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
        ) {
    mateBuilder = (p) => GridView$Mate(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          gridDelegate: p.get('gridDelegate').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
          cacheExtent: p.get('cacheExtent').build(),
          children: p.get('children').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          clipBehavior: p.get('clipBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('gridDelegate', gridDelegate);
    mateDeclare('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateDeclare('addRepaintBoundaries', addRepaintBoundaries);
    mateDeclare('addSemanticIndexes', addSemanticIndexes);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('children', children);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('clipBehavior', clipBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
  }

  /// GridView GridView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.builder({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , defaultValue:none
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , defaultValue:none
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , defaultValue:none
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , defaultValue:none
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , defaultValue:Literal
    bool addAutomaticKeepAlives = true,

    /// optionalParameters: {bool addRepaintBoundaries = true} , defaultValue:Literal
    bool addRepaintBoundaries = true,

    /// optionalParameters: {bool addSemanticIndexes = true} , defaultValue:Literal
    bool addSemanticIndexes = true,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => GridView$Mate.builder(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          gridDelegate: p.get('gridDelegate').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          itemCount: p.get('itemCount').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
          cacheExtent: p.get('cacheExtent').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('gridDelegate', gridDelegate);
    mateDeclare('itemBuilder', itemBuilder);
    mateDeclare('findChildIndexCallback', findChildIndexCallback);
    mateDeclare('itemCount', itemCount);
    mateDeclare('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateDeclare('addRepaintBoundaries', addRepaintBoundaries);
    mateDeclare('addSemanticIndexes', addSemanticIndexes);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }

  /// GridView GridView.custom({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, required SliverChildDelegate childrenDelegate, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.custom({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , defaultValue:none
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {required SliverChildDelegate childrenDelegate} , defaultValue:none
    required SliverChildDelegate childrenDelegate,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          childrenDelegate: childrenDelegate,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => GridView$Mate.custom(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          gridDelegate: p.get('gridDelegate').build(),
          childrenDelegate: p.get('childrenDelegate').build(),
          cacheExtent: p.get('cacheExtent').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('gridDelegate', gridDelegate);
    mateDeclare('childrenDelegate', childrenDelegate);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }

  /// GridView GridView.count({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.count({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required int crossAxisCount} , defaultValue:none
    required int crossAxisCount,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , defaultValue:Literal
    double mainAxisSpacing = 0.0,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , defaultValue:Literal
    double crossAxisSpacing = 0.0,

    /// optionalParameters: {double childAspectRatio = 1.0} , defaultValue:Literal
    double childAspectRatio = 1.0,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , defaultValue:Literal
    bool addAutomaticKeepAlives = true,

    /// optionalParameters: {bool addRepaintBoundaries = true} , defaultValue:Literal
    bool addRepaintBoundaries = true,

    /// optionalParameters: {bool addSemanticIndexes = true} , defaultValue:Literal
    bool addSemanticIndexes = true,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super.count(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          crossAxisCount: crossAxisCount,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => GridView$Mate.count(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          crossAxisCount: p.get('crossAxisCount').build(),
          mainAxisSpacing: p.get('mainAxisSpacing').build(),
          crossAxisSpacing: p.get('crossAxisSpacing').build(),
          childAspectRatio: p.get('childAspectRatio').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
          cacheExtent: p.get('cacheExtent').build(),
          children: p.get('children').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('crossAxisCount', crossAxisCount);
    mateDeclare('mainAxisSpacing', mainAxisSpacing);
    mateDeclare('crossAxisSpacing', crossAxisSpacing);
    mateDeclare('childAspectRatio', childAspectRatio);
    mateDeclare('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateDeclare('addRepaintBoundaries', addRepaintBoundaries);
    mateDeclare('addSemanticIndexes', addSemanticIndexes);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('children', children);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }

  /// GridView GridView.extent({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.extent({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , defaultValue:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , defaultValue:Literal
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required double maxCrossAxisExtent} , defaultValue:none
    required double maxCrossAxisExtent,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , defaultValue:Literal
    double mainAxisSpacing = 0.0,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , defaultValue:Literal
    double crossAxisSpacing = 0.0,

    /// optionalParameters: {double childAspectRatio = 1.0} , defaultValue:Literal
    double childAspectRatio = 1.0,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , defaultValue:Literal
    bool addAutomaticKeepAlives = true,

    /// optionalParameters: {bool addRepaintBoundaries = true} , defaultValue:Literal
    bool addRepaintBoundaries = true,

    /// optionalParameters: {bool addSemanticIndexes = true} , defaultValue:Literal
    bool addSemanticIndexes = true,

    /// optionalParameters: {double? cacheExtent} , defaultValue:none
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , defaultValue:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , defaultValue:unprocessed
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super.extent(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          maxCrossAxisExtent: maxCrossAxisExtent,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => GridView$Mate.extent(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          maxCrossAxisExtent: p.get('maxCrossAxisExtent').build(),
          mainAxisSpacing: p.get('mainAxisSpacing').build(),
          crossAxisSpacing: p.get('crossAxisSpacing').build(),
          childAspectRatio: p.get('childAspectRatio').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
          cacheExtent: p.get('cacheExtent').build(),
          children: p.get('children').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          keyboardDismissBehavior: p.get('keyboardDismissBehavior').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateDeclare('key', key);
    mateDeclare('scrollDirection', scrollDirection);
    mateDeclare('reverse', reverse);
    mateDeclare('controller', controller);
    mateDeclare('primary', primary);
    mateDeclare('physics', physics);
    mateDeclare('shrinkWrap', shrinkWrap);
    mateDeclare('padding', padding);
    mateDeclare('maxCrossAxisExtent', maxCrossAxisExtent);
    mateDeclare('mainAxisSpacing', mainAxisSpacing);
    mateDeclare('crossAxisSpacing', crossAxisSpacing);
    mateDeclare('childAspectRatio', childAspectRatio);
    mateDeclare('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateDeclare('addRepaintBoundaries', addRepaintBoundaries);
    mateDeclare('addSemanticIndexes', addSemanticIndexes);
    mateDeclare('cacheExtent', cacheExtent);
    mateDeclare('children', children);
    mateDeclare('semanticChildCount', semanticChildCount);
    mateDeclare('dragStartBehavior', dragStartBehavior);
    mateDeclare('keyboardDismissBehavior', keyboardDismissBehavior);
    mateDeclare('restorationId', restorationId);
    mateDeclare('clipBehavior', clipBehavior);
  }
}
