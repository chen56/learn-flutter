// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/container.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/rendering/box.dart';
import 'package:vector_math/vector_math_64.dart';

/// class DecoratedBox extends SingleChildRenderObjectWidget
class DecoratedBox$Mate extends DecoratedBox with Mate {
  /// DecoratedBox DecoratedBox({Key? key, required Decoration decoration, DecorationPosition position = DecorationPosition.background, Widget? child})
  DecoratedBox$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Decoration decoration} , defaultValue:none
    required Decoration decoration,

    /// optionalParameters: {DecorationPosition position = DecorationPosition.background} , defaultValue:PrefixedIdentifier
    DecorationPosition position = DecorationPosition.background,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          decoration: decoration,
          position: position,
          child: child,
        ) {
    mateCreateName = 'DecoratedBox';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DecoratedBox$Mate(
          key: p.get('key').build(),
          decoration: p.get('decoration').build(),
          position: p.get('position').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('decoration', decoration, isNamed: true);
    mateUse('position', position, isNamed: true);
    mateUse('child', child, isNamed: true);
  }
}

/// class Container extends StatelessWidget
class Container$Mate extends Container with Mate {
  /// Container Container({Key? key, AlignmentGeometry? alignment, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, Decoration? foregroundDecoration, double? width, double? height, BoxConstraints? constraints, EdgeInsetsGeometry? margin, Matrix4? transform, AlignmentGeometry? transformAlignment, Widget? child, Clip clipBehavior = Clip.none})
  Container$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {AlignmentGeometry? alignment} , defaultValue:none
    AlignmentGeometry? alignment,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , defaultValue:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color? color} , defaultValue:none
    Color? color,

    /// optionalParameters: {Decoration? decoration} , defaultValue:none
    Decoration? decoration,

    /// optionalParameters: {Decoration? foregroundDecoration} , defaultValue:none
    Decoration? foregroundDecoration,

    /// optionalParameters: {double? width} , defaultValue:none
    double? width,

    /// optionalParameters: {double? height} , defaultValue:none
    double? height,

    /// optionalParameters: {BoxConstraints? constraints} , defaultValue:none
    BoxConstraints? constraints,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , defaultValue:none
    EdgeInsetsGeometry? margin,

    /// optionalParameters: {Matrix4? transform} , defaultValue:none
    Matrix4? transform,

    /// optionalParameters: {AlignmentGeometry? transformAlignment} , defaultValue:none
    AlignmentGeometry? transformAlignment,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , defaultValue:PrefixedIdentifier
    Clip clipBehavior = Clip.none,
  }) : super(
          key: key,
          alignment: alignment,
          padding: padding,
          color: color,
          decoration: decoration,
          foregroundDecoration: foregroundDecoration,
          width: width,
          height: height,
          constraints: constraints,
          margin: margin,
          transform: transform,
          transformAlignment: transformAlignment,
          child: child,
          clipBehavior: clipBehavior,
        ) {
    mateCreateName = 'Container';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => Container$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          padding: p.get('padding').build(),
          color: p.get('color').build(),
          decoration: p.get('decoration').build(),
          foregroundDecoration: p.get('foregroundDecoration').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          constraints: p.get('constraints').build(),
          margin: p.get('margin').build(),
          transform: p.get('transform').build(),
          transformAlignment: p.get('transformAlignment').build(),
          child: p.get('child').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('alignment', alignment, isNamed: true);
    mateUse('padding', padding, isNamed: true);
    mateUse('color', color, isNamed: true);
    mateUse('decoration', decoration, isNamed: true);
    mateUse('foregroundDecoration', foregroundDecoration, isNamed: true);
    mateUse('width', width, isNamed: true);
    mateUse('height', height, isNamed: true);
    mateUse('constraints', constraints, isNamed: true);
    mateUse('margin', margin, isNamed: true);
    mateUse('transform', transform, isNamed: true);
    mateUse('transformAlignment', transformAlignment, isNamed: true);
    mateUse('child', child, isNamed: true);
    mateUse('clipBehavior', clipBehavior, isNamed: true);
  }
}
