// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/container.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/rendering/box.dart';
import 'package:vector_math/vector_math_64.dart';

/// class DecoratedBox extends SingleChildRenderObjectWidget
class DecoratedBox$Mate extends DecoratedBox with Mate<DecoratedBox$Mate> {
  /// DecoratedBox DecoratedBox({Key? key, required Decoration decoration, DecorationPosition position = DecorationPosition.background, Widget? child})
  DecoratedBox$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Decoration decoration} , hasDefaultValue:false, defaultValueCode:null
    required Decoration decoration,

    /// optionalParameters: {DecorationPosition position = DecorationPosition.background} , hasDefaultValue:true, defaultValueCode:DecorationPosition.background
    required DecorationPosition position,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          decoration: decoration,
          position: position,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DecoratedBox$Mate(
        key: p.get('key').build(),
        decoration: p.get('decoration').build(),
        position: p.get('position').build(),
        child: p.get('child').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('decoration', decoration);
    mateParams.put('position', position);
    mateParams.put('child', child);
  }
}

/// class Container extends StatelessWidget
class Container$Mate extends Container with Mate<Container$Mate> {
  /// Container Container({Key? key, AlignmentGeometry? alignment, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, Decoration? foregroundDecoration, double? width, double? height, BoxConstraints? constraints, EdgeInsetsGeometry? margin, Matrix4? transform, AlignmentGeometry? transformAlignment, Widget? child, Clip clipBehavior = Clip.none})
  Container$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {AlignmentGeometry? alignment} , hasDefaultValue:false, defaultValueCode:null
    AlignmentGeometry? alignment,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Decoration? decoration} , hasDefaultValue:false, defaultValueCode:null
    Decoration? decoration,

    /// optionalParameters: {Decoration? foregroundDecoration} , hasDefaultValue:false, defaultValueCode:null
    Decoration? foregroundDecoration,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {BoxConstraints? constraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? constraints,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? margin,

    /// optionalParameters: {Matrix4? transform} , hasDefaultValue:false, defaultValueCode:null
    Matrix4? transform,

    /// optionalParameters: {AlignmentGeometry? transformAlignment} , hasDefaultValue:false, defaultValueCode:null
    AlignmentGeometry? transformAlignment,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
    required Clip clipBehavior,
  }) : super(
          key: key,
          alignment: alignment,
          padding: padding,
          color: color,
          decoration: decoration,
          foregroundDecoration: foregroundDecoration,
          width: width,
          height: height,
          constraints: constraints,
          margin: margin,
          transform: transform,
          transformAlignment: transformAlignment,
          child: child,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Container$Mate(
        key: p.get('key').build(),
        alignment: p.get('alignment').build(),
        padding: p.get('padding').build(),
        color: p.get('color').build(),
        decoration: p.get('decoration').build(),
        foregroundDecoration: p.get('foregroundDecoration').build(),
        width: p.get('width').build(),
        height: p.get('height').build(),
        constraints: p.get('constraints').build(),
        margin: p.get('margin').build(),
        transform: p.get('transform').build(),
        transformAlignment: p.get('transformAlignment').build(),
        child: p.get('child').build(),
        clipBehavior: p.get('clipBehavior').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('alignment', alignment);
    mateParams.put('padding', padding);
    mateParams.put('color', color);
    mateParams.put('decoration', decoration);
    mateParams.put('foregroundDecoration', foregroundDecoration);
    mateParams.put('width', width);
    mateParams.put('height', height);
    mateParams.put('constraints', constraints);
    mateParams.put('margin', margin);
    mateParams.put('transform', transform);
    mateParams.put('transformAlignment', transformAlignment);
    mateParams.put('child', child);
    mateParams.put('clipBehavior', clipBehavior);
  }
}
