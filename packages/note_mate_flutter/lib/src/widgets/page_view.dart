// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/page_view.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/gestures.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/sliver.dart';

/// class PageController extends ScrollController
class PageController$Mate extends PageController with Mate {
  /// PageController PageController({int initialPage = 0, bool keepPage = true, double viewportFraction = 1.0})
  PageController$Mate({
    /// optionalParameters: {int initialPage = 0} , defaultValue:Literal
    int initialPage = 0,

    /// optionalParameters: {bool keepPage = true} , defaultValue:Literal
    bool keepPage = true,

    /// optionalParameters: {double viewportFraction = 1.0} , defaultValue:Literal
    double viewportFraction = 1.0,
  }) : super(
          initialPage: initialPage,
          keepPage: keepPage,
          viewportFraction: viewportFraction,
        ) {
    mateCreateName = 'PageController';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PageController$Mate(
          initialPage: p.get('initialPage').build(),
          keepPage: p.get('keepPage').build(),
          viewportFraction: p.get('viewportFraction').build(),
        );
    mateUse('initialPage', initialPage);
    mateUse('keepPage', keepPage);
    mateUse('viewportFraction', viewportFraction);
  }
}

/// class PageMetrics extends FixedScrollMetrics
class PageMetrics$Mate extends PageMetrics with Mate {
  /// PageMetrics PageMetrics({required double? minScrollExtent, required double? maxScrollExtent, required double? pixels, required double? viewportDimension, required AxisDirection axisDirection, required double viewportFraction, required double devicePixelRatio})
  PageMetrics$Mate({
    /// optionalParameters: {required double? minScrollExtent} , defaultValue:none
    required double? minScrollExtent,

    /// optionalParameters: {required double? maxScrollExtent} , defaultValue:none
    required double? maxScrollExtent,

    /// optionalParameters: {required double? pixels} , defaultValue:none
    required double? pixels,

    /// optionalParameters: {required double? viewportDimension} , defaultValue:none
    required double? viewportDimension,

    /// optionalParameters: {required AxisDirection axisDirection} , defaultValue:none
    required AxisDirection axisDirection,

    /// optionalParameters: {required double viewportFraction} , defaultValue:none
    required double viewportFraction,

    /// optionalParameters: {required double devicePixelRatio} , defaultValue:none
    required double devicePixelRatio,
  }) : super(
          minScrollExtent: minScrollExtent,
          maxScrollExtent: maxScrollExtent,
          pixels: pixels,
          viewportDimension: viewportDimension,
          axisDirection: axisDirection,
          viewportFraction: viewportFraction,
          devicePixelRatio: devicePixelRatio,
        ) {
    mateCreateName = 'PageMetrics';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PageMetrics$Mate(
          minScrollExtent: p.get('minScrollExtent').build(),
          maxScrollExtent: p.get('maxScrollExtent').build(),
          pixels: p.get('pixels').build(),
          viewportDimension: p.get('viewportDimension').build(),
          axisDirection: p.get('axisDirection').build(),
          viewportFraction: p.get('viewportFraction').build(),
          devicePixelRatio: p.get('devicePixelRatio').build(),
        );
    mateUse('minScrollExtent', minScrollExtent);
    mateUse('maxScrollExtent', maxScrollExtent);
    mateUse('pixels', pixels);
    mateUse('viewportDimension', viewportDimension);
    mateUse('axisDirection', axisDirection);
    mateUse('viewportFraction', viewportFraction);
    mateUse('devicePixelRatio', devicePixelRatio);
  }
}

/// class PageScrollPhysics extends ScrollPhysics
class PageScrollPhysics$Mate extends PageScrollPhysics with Mate {
  /// PageScrollPhysics PageScrollPhysics({ScrollPhysics? parent})
  PageScrollPhysics$Mate(
      {
      /// optionalParameters: {ScrollPhysics? parent} , defaultValue:none
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateCreateName = 'PageScrollPhysics';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PageScrollPhysics$Mate(parent: p.get('parent').build());
    mateUse('parent', parent);
  }
}

/// class PageView extends StatefulWidget
class PageView$Mate extends PageView with Mate {
  /// PageView PageView({Key? key, Axis scrollDirection = Axis.horizontal, bool reverse = false, PageController? controller, ScrollPhysics? physics, bool pageSnapping = true, void Function(int)? onPageChanged, List<Widget> children = const <Widget>[], DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool allowImplicitScrolling = false, String? restorationId, Clip clipBehavior = Clip.hardEdge, ScrollBehavior? scrollBehavior, bool padEnds = true})
  PageView$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.horizontal} , defaultValue:PrefixedIdentifier
    Axis scrollDirection = Axis.horizontal,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {PageController? controller} , defaultValue:none
    PageController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool pageSnapping = true} , defaultValue:Literal
    bool pageSnapping = true,

    /// optionalParameters: {void Function(int)? onPageChanged} , defaultValue:none
    ValueChanged<int>? onPageChanged,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> children,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {bool allowImplicitScrolling = false} , defaultValue:Literal
    bool allowImplicitScrolling = false,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:PrefixedIdentifier
    Clip clipBehavior = Clip.hardEdge,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , defaultValue:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {bool padEnds = true} , defaultValue:Literal
    bool padEnds = true,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          physics: physics,
          pageSnapping: pageSnapping,
          onPageChanged: onPageChanged,
          children: children,
          dragStartBehavior: dragStartBehavior,
          allowImplicitScrolling: allowImplicitScrolling,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
          scrollBehavior: scrollBehavior,
          padEnds: padEnds,
        ) {
    mateCreateName = 'PageView';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PageView$Mate(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          pageSnapping: p.get('pageSnapping').build(),
          onPageChanged: p.get('onPageChanged').build(),
          children: p.get('children').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          allowImplicitScrolling: p.get('allowImplicitScrolling').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          padEnds: p.get('padEnds').build(),
        );
    mateUse('key', key);
    mateUse('scrollDirection', scrollDirection);
    mateUse('reverse', reverse);
    mateUse('controller', controller);
    mateUse('physics', physics);
    mateUse('pageSnapping', pageSnapping);
    mateUse('onPageChanged', onPageChanged);
    mateUse('children', children);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('allowImplicitScrolling', allowImplicitScrolling);
    mateUse('restorationId', restorationId);
    mateUse('clipBehavior', clipBehavior);
    mateUse('scrollBehavior', scrollBehavior);
    mateUse('padEnds', padEnds);
  }

  /// PageView PageView.builder({Key? key, Axis scrollDirection = Axis.horizontal, bool reverse = false, PageController? controller, ScrollPhysics? physics, bool pageSnapping = true, void Function(int)? onPageChanged, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool allowImplicitScrolling = false, String? restorationId, Clip clipBehavior = Clip.hardEdge, ScrollBehavior? scrollBehavior, bool padEnds = true})
  PageView$Mate.builder({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.horizontal} , defaultValue:PrefixedIdentifier
    Axis scrollDirection = Axis.horizontal,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {PageController? controller} , defaultValue:none
    PageController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool pageSnapping = true} , defaultValue:Literal
    bool pageSnapping = true,

    /// optionalParameters: {void Function(int)? onPageChanged} , defaultValue:none
    ValueChanged<int>? onPageChanged,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , defaultValue:none
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , defaultValue:none
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , defaultValue:none
    int? itemCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {bool allowImplicitScrolling = false} , defaultValue:Literal
    bool allowImplicitScrolling = false,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:PrefixedIdentifier
    Clip clipBehavior = Clip.hardEdge,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , defaultValue:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {bool padEnds = true} , defaultValue:Literal
    bool padEnds = true,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          physics: physics,
          pageSnapping: pageSnapping,
          onPageChanged: onPageChanged,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          dragStartBehavior: dragStartBehavior,
          allowImplicitScrolling: allowImplicitScrolling,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
          scrollBehavior: scrollBehavior,
          padEnds: padEnds,
        ) {
    mateCreateName = 'PageView.builder';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PageView$Mate.builder(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          pageSnapping: p.get('pageSnapping').build(),
          onPageChanged: p.get('onPageChanged').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          itemCount: p.get('itemCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          allowImplicitScrolling: p.get('allowImplicitScrolling').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          padEnds: p.get('padEnds').build(),
        );
    mateUse('key', key);
    mateUse('scrollDirection', scrollDirection);
    mateUse('reverse', reverse);
    mateUse('controller', controller);
    mateUse('physics', physics);
    mateUse('pageSnapping', pageSnapping);
    mateUse('onPageChanged', onPageChanged);
    mateUse('itemBuilder', itemBuilder);
    mateUse('findChildIndexCallback', findChildIndexCallback);
    mateUse('itemCount', itemCount);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('allowImplicitScrolling', allowImplicitScrolling);
    mateUse('restorationId', restorationId);
    mateUse('clipBehavior', clipBehavior);
    mateUse('scrollBehavior', scrollBehavior);
    mateUse('padEnds', padEnds);
  }

  /// PageView PageView.custom({Key? key, Axis scrollDirection = Axis.horizontal, bool reverse = false, PageController? controller, ScrollPhysics? physics, bool pageSnapping = true, void Function(int)? onPageChanged, required SliverChildDelegate childrenDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool allowImplicitScrolling = false, String? restorationId, Clip clipBehavior = Clip.hardEdge, ScrollBehavior? scrollBehavior, bool padEnds = true})
  PageView$Mate.custom({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.horizontal} , defaultValue:PrefixedIdentifier
    Axis scrollDirection = Axis.horizontal,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {PageController? controller} , defaultValue:none
    PageController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {bool pageSnapping = true} , defaultValue:Literal
    bool pageSnapping = true,

    /// optionalParameters: {void Function(int)? onPageChanged} , defaultValue:none
    ValueChanged<int>? onPageChanged,

    /// optionalParameters: {required SliverChildDelegate childrenDelegate} , defaultValue:none
    required SliverChildDelegate childrenDelegate,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {bool allowImplicitScrolling = false} , defaultValue:Literal
    bool allowImplicitScrolling = false,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:PrefixedIdentifier
    Clip clipBehavior = Clip.hardEdge,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , defaultValue:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {bool padEnds = true} , defaultValue:Literal
    bool padEnds = true,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          physics: physics,
          pageSnapping: pageSnapping,
          onPageChanged: onPageChanged,
          childrenDelegate: childrenDelegate,
          dragStartBehavior: dragStartBehavior,
          allowImplicitScrolling: allowImplicitScrolling,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
          scrollBehavior: scrollBehavior,
          padEnds: padEnds,
        ) {
    mateCreateName = 'PageView.custom';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PageView$Mate.custom(
          key: p.get('key').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          pageSnapping: p.get('pageSnapping').build(),
          onPageChanged: p.get('onPageChanged').build(),
          childrenDelegate: p.get('childrenDelegate').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          allowImplicitScrolling: p.get('allowImplicitScrolling').build(),
          restorationId: p.get('restorationId').build(),
          clipBehavior: p.get('clipBehavior').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          padEnds: p.get('padEnds').build(),
        );
    mateUse('key', key);
    mateUse('scrollDirection', scrollDirection);
    mateUse('reverse', reverse);
    mateUse('controller', controller);
    mateUse('physics', physics);
    mateUse('pageSnapping', pageSnapping);
    mateUse('onPageChanged', onPageChanged);
    mateUse('childrenDelegate', childrenDelegate);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('allowImplicitScrolling', allowImplicitScrolling);
    mateUse('restorationId', restorationId);
    mateUse('clipBehavior', clipBehavior);
    mateUse('scrollBehavior', scrollBehavior);
    mateUse('padEnds', padEnds);
  }
}
