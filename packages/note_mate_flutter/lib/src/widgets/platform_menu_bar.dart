// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/platform_menu_bar.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/services/keyboard_key.g.dart' as _i3;
import 'package:flutter/src/services/platform_channel.dart' as _i4;
import 'package:flutter/src/foundation/key.dart' as _i5;
import 'package:flutter/src/widgets/framework.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/widgets/actions.dart' as _i8;

/// class ShortcutSerialization
class ShortcutSerialization$Mate extends _i1.ShortcutSerialization with _i2.Mate {
  /// ShortcutSerialization ShortcutSerialization.character(String character, {bool alt = false, bool control = false, bool meta = false})
  ShortcutSerialization$Mate.character(
    /// requiredParameters: String character
    String character, {
    /// optionalParameters: {bool alt = false} , default:processed=BooleanLiteralImpl
    bool alt = false,

    /// optionalParameters: {bool control = false} , default:processed=BooleanLiteralImpl
    bool control = false,

    /// optionalParameters: {bool meta = false} , default:processed=BooleanLiteralImpl
    bool meta = false,
  }) : super.character(
          character,
          alt: alt,
          control: control,
          meta: meta,
        ) {
    mateBuilderName = 'ShortcutSerialization.character';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShortcutSerialization$Mate.character(
          p.get('character').value,
          alt: p.get('alt').build(),
          control: p.get('control').build(),
          meta: p.get('meta').build(),
        );
    mateUse(
      'character',
      character,
      isNamed: false,
    );
    mateUse(
      'alt',
      alt,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'control',
      control,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'meta',
      meta,
      isNamed: true,
      defaultValue: false,
    );
  }

  /// ShortcutSerialization ShortcutSerialization.modifier(LogicalKeyboardKey trigger, {bool alt = false, bool control = false, bool meta = false, bool shift = false})
  ShortcutSerialization$Mate.modifier(
    /// requiredParameters: LogicalKeyboardKey trigger
    _i3.LogicalKeyboardKey trigger, {
    /// optionalParameters: {bool alt = false} , default:processed=BooleanLiteralImpl
    bool alt = false,

    /// optionalParameters: {bool control = false} , default:processed=BooleanLiteralImpl
    bool control = false,

    /// optionalParameters: {bool meta = false} , default:processed=BooleanLiteralImpl
    bool meta = false,

    /// optionalParameters: {bool shift = false} , default:processed=BooleanLiteralImpl
    bool shift = false,
  }) : super.modifier(
          trigger,
          alt: alt,
          control: control,
          meta: meta,
          shift: shift,
        ) {
    mateBuilderName = 'ShortcutSerialization.modifier';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShortcutSerialization$Mate.modifier(
          p.get('trigger').value,
          alt: p.get('alt').build(),
          control: p.get('control').build(),
          meta: p.get('meta').build(),
          shift: p.get('shift').build(),
        );
    mateUse(
      'trigger',
      trigger,
      isNamed: false,
    );
    mateUse(
      'alt',
      alt,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'control',
      control,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'meta',
      meta,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'shift',
      shift,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class DefaultPlatformMenuDelegate extends PlatformMenuDelegate
class DefaultPlatformMenuDelegate$Mate extends _i1.DefaultPlatformMenuDelegate with _i2.Mate {
  /// DefaultPlatformMenuDelegate DefaultPlatformMenuDelegate({MethodChannel? channel})
  DefaultPlatformMenuDelegate$Mate(
      {
      /// optionalParameters: {MethodChannel? channel} , default:none
      _i4.MethodChannel? channel})
      : super(channel: channel) {
    mateBuilderName = 'DefaultPlatformMenuDelegate';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultPlatformMenuDelegate$Mate(channel: p.get('channel').build());
    mateUse(
      'channel',
      channel,
      isNamed: true,
    );
  }
}

/// class PlatformMenuBar extends StatefulWidget with DiagnosticableTreeMixin
class PlatformMenuBar$Mate extends _i1.PlatformMenuBar with _i2.Mate {
  /// PlatformMenuBar PlatformMenuBar({Key? key, required List<PlatformMenuItem> menus, Widget? child, Widget? body})
  PlatformMenuBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i5.Key? key,

    /// optionalParameters: {required List<PlatformMenuItem> menus} , default:none
    required List<_i1.PlatformMenuItem> menus,

    /// optionalParameters: {Widget? child} , default:none
    _i6.Widget? child,
  }) : super(
          key: key,
          menus: menus,
          child: child,
        ) {
    mateBuilderName = 'PlatformMenuBar';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PlatformMenuBar$Mate(
          key: p.get('key').build(),
          menus: p.get('menus').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'menus',
      menus,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class PlatformMenu extends PlatformMenuItem with DiagnosticableTreeMixin
class PlatformMenu$Mate extends _i1.PlatformMenu with _i2.Mate {
  /// PlatformMenu PlatformMenu({required String label, void Function()? onOpen, void Function()? onClose, required List<PlatformMenuItem> menus})
  PlatformMenu$Mate({
    /// optionalParameters: {required String label} , default:none
    required String label,

    /// optionalParameters: {void Function()? onOpen} , default:none
    _i7.VoidCallback? onOpen,

    /// optionalParameters: {void Function()? onClose} , default:none
    _i7.VoidCallback? onClose,

    /// optionalParameters: {required List<PlatformMenuItem> menus} , default:none
    required List<_i1.PlatformMenuItem> menus,
  }) : super(
          label: label,
          onOpen: onOpen,
          onClose: onClose,
          menus: menus,
        ) {
    mateBuilderName = 'PlatformMenu';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PlatformMenu$Mate(
          label: p.get('label').build(),
          onOpen: p.get('onOpen').build(),
          onClose: p.get('onClose').build(),
          menus: p.get('menus').build(),
        );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
    mateUse(
      'onOpen',
      onOpen,
      isNamed: true,
    );
    mateUse(
      'onClose',
      onClose,
      isNamed: true,
    );
    mateUse(
      'menus',
      menus,
      isNamed: true,
    );
  }
}

/// class PlatformMenuItemGroup extends PlatformMenuItem
class PlatformMenuItemGroup$Mate extends _i1.PlatformMenuItemGroup with _i2.Mate {
  /// PlatformMenuItemGroup PlatformMenuItemGroup({required List<PlatformMenuItem> members})
  PlatformMenuItemGroup$Mate(
      {
      /// optionalParameters: {required List<PlatformMenuItem> members} , default:none
      required List<_i1.PlatformMenuItem> members})
      : super(members: members) {
    mateBuilderName = 'PlatformMenuItemGroup';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PlatformMenuItemGroup$Mate(members: p.get('members').build());
    mateUse(
      'members',
      members,
      isNamed: true,
    );
  }
}

/// class PlatformMenuItem with Diagnosticable
class PlatformMenuItem$Mate extends _i1.PlatformMenuItem with _i2.Mate {
  /// PlatformMenuItem PlatformMenuItem({required String label, MenuSerializableShortcut? shortcut, void Function()? onSelected, Intent? onSelectedIntent})
  PlatformMenuItem$Mate({
    /// optionalParameters: {required String label} , default:none
    required String label,

    /// optionalParameters: {MenuSerializableShortcut? shortcut} , default:none
    _i1.MenuSerializableShortcut? shortcut,

    /// optionalParameters: {void Function()? onSelected} , default:none
    _i7.VoidCallback? onSelected,

    /// optionalParameters: {Intent? onSelectedIntent} , default:none
    _i8.Intent? onSelectedIntent,
  }) : super(
          label: label,
          shortcut: shortcut,
          onSelected: onSelected,
          onSelectedIntent: onSelectedIntent,
        ) {
    mateBuilderName = 'PlatformMenuItem';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PlatformMenuItem$Mate(
          label: p.get('label').build(),
          shortcut: p.get('shortcut').build(),
          onSelected: p.get('onSelected').build(),
          onSelectedIntent: p.get('onSelectedIntent').build(),
        );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
    mateUse(
      'shortcut',
      shortcut,
      isNamed: true,
    );
    mateUse(
      'onSelected',
      onSelected,
      isNamed: true,
    );
    mateUse(
      'onSelectedIntent',
      onSelectedIntent,
      isNamed: true,
    );
  }
}

/// class PlatformProvidedMenuItem extends PlatformMenuItem
class PlatformProvidedMenuItem$Mate extends _i1.PlatformProvidedMenuItem with _i2.Mate {
  /// PlatformProvidedMenuItem PlatformProvidedMenuItem({required PlatformProvidedMenuItemType type, bool enabled = true})
  PlatformProvidedMenuItem$Mate({
    /// optionalParameters: {required PlatformProvidedMenuItemType type} , default:none
    required _i1.PlatformProvidedMenuItemType type,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,
  }) : super(
          type: type,
          enabled: enabled,
        ) {
    mateBuilderName = 'PlatformProvidedMenuItem';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PlatformProvidedMenuItem$Mate(
          type: p.get('type').build(),
          enabled: p.get('enabled').build(),
        );
    mateUse(
      'type',
      type,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
  }
}
