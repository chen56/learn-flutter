// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/routes.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/navigator.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';

/// class LocalHistoryEntry
class LocalHistoryEntry$Mate extends LocalHistoryEntry with Mate {
  /// LocalHistoryEntry LocalHistoryEntry({void Function()? onRemove, bool impliesAppBarDismissal = true})
  LocalHistoryEntry$Mate({
    /// optionalParameters: {void Function()? onRemove} , default:none
    VoidCallback? onRemove,

    /// optionalParameters: {bool impliesAppBarDismissal = true} , default:processed=BooleanLiteralImpl
    bool impliesAppBarDismissal = true,
  }) : super(
          onRemove: onRemove,
          impliesAppBarDismissal: impliesAppBarDismissal,
        ) {
    mateBuilderName = 'LocalHistoryEntry';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => LocalHistoryEntry$Mate(
          onRemove: p.get('onRemove').build(),
          impliesAppBarDismissal: p.get('impliesAppBarDismissal').build(),
        );
    mateUse(
      'onRemove',
      onRemove,
      isNamed: true,
    );
    mateUse(
      'impliesAppBarDismissal',
      impliesAppBarDismissal,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class RawDialogRoute<T> extends PopupRoute<T>
class RawDialogRoute$Mate<T> extends RawDialogRoute<T> with Mate {
  /// RawDialogRoute<T> RawDialogRoute({required Widget Function(BuildContext, Animation<double>, Animation<double>) pageBuilder, bool barrierDismissible = true, Color? barrierColor = const Color(0x80000000), String? barrierLabel, Duration transitionDuration = const Duration(milliseconds: 200), Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder, RouteSettings? settings, Offset? anchorPoint, TraversalEdgeBehavior? traversalEdgeBehavior})
  RawDialogRoute$Mate({
    /// optionalParameters: {required Widget Function(BuildContext, Animation<double>, Animation<double>) pageBuilder} , default:none
    required RoutePageBuilder pageBuilder,

    /// optionalParameters: {bool barrierDismissible = true} , default:processed=BooleanLiteralImpl
    bool barrierDismissible = true,

    /// optionalParameters: {Color? barrierColor = const Color(0x80000000)} , default:unprocessed=InstanceCreationExpressionImpl
    required Color? barrierColor,

    /// optionalParameters: {String? barrierLabel} , default:none
    String? barrierLabel,

    /// optionalParameters: {Duration transitionDuration = const Duration(milliseconds: 200)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration transitionDuration,

    /// optionalParameters: {Widget Function(BuildContext, Animation<double>, Animation<double>, Widget)? transitionBuilder} , default:none
    RouteTransitionsBuilder? transitionBuilder,

    /// optionalParameters: {RouteSettings? settings} , default:none
    RouteSettings? settings,

    /// optionalParameters: {Offset? anchorPoint} , default:none
    Offset? anchorPoint,

    /// optionalParameters: {TraversalEdgeBehavior? traversalEdgeBehavior} , default:none
    TraversalEdgeBehavior? traversalEdgeBehavior,
  }) : super(
          pageBuilder: pageBuilder,
          barrierDismissible: barrierDismissible,
          barrierColor: barrierColor,
          barrierLabel: barrierLabel,
          transitionDuration: transitionDuration,
          transitionBuilder: transitionBuilder,
          settings: settings,
          anchorPoint: anchorPoint,
          traversalEdgeBehavior: traversalEdgeBehavior,
        ) {
    mateBuilderName = 'RawDialogRoute';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RawDialogRoute$Mate<T>(
          pageBuilder: p.get('pageBuilder').build(),
          barrierDismissible: p.get('barrierDismissible').build(),
          barrierColor: p.get('barrierColor').build(),
          barrierLabel: p.get('barrierLabel').build(),
          transitionDuration: p.get('transitionDuration').build(),
          transitionBuilder: p.get('transitionBuilder').build(),
          settings: p.get('settings').build(),
          anchorPoint: p.get('anchorPoint').build(),
          traversalEdgeBehavior: p.get('traversalEdgeBehavior').build(),
        );
    mateUse(
      'pageBuilder',
      pageBuilder,
      isNamed: true,
    );
    mateUse(
      'barrierDismissible',
      barrierDismissible,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'barrierColor',
      barrierColor,
      isNamed: true,
    );
    mateUse(
      'barrierLabel',
      barrierLabel,
      isNamed: true,
    );
    mateUse(
      'transitionDuration',
      transitionDuration,
      isNamed: true,
    );
    mateUse(
      'transitionBuilder',
      transitionBuilder,
      isNamed: true,
    );
    mateUse(
      'settings',
      settings,
      isNamed: true,
    );
    mateUse(
      'anchorPoint',
      anchorPoint,
      isNamed: true,
    );
    mateUse(
      'traversalEdgeBehavior',
      traversalEdgeBehavior,
      isNamed: true,
    );
  }
}
