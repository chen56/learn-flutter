// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/list_wheel_scroll_view.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

/// class ListWheelChildListDelegate extends ListWheelChildDelegate
class ListWheelChildListDelegate$Mate extends ListWheelChildListDelegate
    with Mate {
  /// ListWheelChildListDelegate ListWheelChildListDelegate({required List<Widget> children})
  ListWheelChildListDelegate$Mate(
      {
      /// optionalParameters: {required List<Widget> children} , defaultValue:none
      required List<Widget> children})
      : super(children: children) {
    mateBuilder = (p) =>
        ListWheelChildListDelegate$Mate(children: p.get('children').build());
    mateUse('children', children);
  }
}

/// class ListWheelChildLoopingListDelegate extends ListWheelChildDelegate
class ListWheelChildLoopingListDelegate$Mate
    extends ListWheelChildLoopingListDelegate with Mate {
  /// ListWheelChildLoopingListDelegate ListWheelChildLoopingListDelegate({required List<Widget> children})
  ListWheelChildLoopingListDelegate$Mate(
      {
      /// optionalParameters: {required List<Widget> children} , defaultValue:none
      required List<Widget> children})
      : super(children: children) {
    mateBuilder = (p) => ListWheelChildLoopingListDelegate$Mate(
        children: p.get('children').build());
    mateUse('children', children);
  }
}

/// class ListWheelChildBuilderDelegate extends ListWheelChildDelegate
class ListWheelChildBuilderDelegate$Mate extends ListWheelChildBuilderDelegate
    with Mate {
  /// ListWheelChildBuilderDelegate ListWheelChildBuilderDelegate({required Widget? Function(BuildContext, int) builder, int? childCount})
  ListWheelChildBuilderDelegate$Mate({
    /// optionalParameters: {required Widget? Function(BuildContext, int) builder} , defaultValue:none
    required NullableIndexedWidgetBuilder builder,

    /// optionalParameters: {int? childCount} , defaultValue:none
    int? childCount,
  }) : super(
          builder: builder,
          childCount: childCount,
        ) {
    mateBuilder = (p) => ListWheelChildBuilderDelegate$Mate(
          builder: p.get('builder').build(),
          childCount: p.get('childCount').build(),
        );
    mateUse('builder', builder);
    mateUse('childCount', childCount);
  }
}

/// class FixedExtentScrollController extends ScrollController
class FixedExtentScrollController$Mate extends FixedExtentScrollController
    with Mate {
  /// FixedExtentScrollController FixedExtentScrollController({int initialItem = 0})
  FixedExtentScrollController$Mate(
      {
      /// optionalParameters: {int initialItem = 0} , defaultValue:Literal
      int initialItem = 0})
      : super(initialItem: initialItem) {
    mateBuilder = (p) => FixedExtentScrollController$Mate(
        initialItem: p.get('initialItem').build());
    mateUse('initialItem', initialItem);
  }
}

/// class FixedExtentMetrics extends FixedScrollMetrics
class FixedExtentMetrics$Mate extends FixedExtentMetrics with Mate {
  /// FixedExtentMetrics FixedExtentMetrics({required double? minScrollExtent, required double? maxScrollExtent, required double? pixels, required double? viewportDimension, required AxisDirection axisDirection, required int itemIndex, required double devicePixelRatio})
  FixedExtentMetrics$Mate({
    /// optionalParameters: {required double? minScrollExtent} , defaultValue:none
    required double? minScrollExtent,

    /// optionalParameters: {required double? maxScrollExtent} , defaultValue:none
    required double? maxScrollExtent,

    /// optionalParameters: {required double? pixels} , defaultValue:none
    required double? pixels,

    /// optionalParameters: {required double? viewportDimension} , defaultValue:none
    required double? viewportDimension,

    /// optionalParameters: {required AxisDirection axisDirection} , defaultValue:none
    required AxisDirection axisDirection,

    /// optionalParameters: {required int itemIndex} , defaultValue:none
    required int itemIndex,

    /// optionalParameters: {required double devicePixelRatio} , defaultValue:none
    required double devicePixelRatio,
  }) : super(
          minScrollExtent: minScrollExtent,
          maxScrollExtent: maxScrollExtent,
          pixels: pixels,
          viewportDimension: viewportDimension,
          axisDirection: axisDirection,
          itemIndex: itemIndex,
          devicePixelRatio: devicePixelRatio,
        ) {
    mateBuilder = (p) => FixedExtentMetrics$Mate(
          minScrollExtent: p.get('minScrollExtent').build(),
          maxScrollExtent: p.get('maxScrollExtent').build(),
          pixels: p.get('pixels').build(),
          viewportDimension: p.get('viewportDimension').build(),
          axisDirection: p.get('axisDirection').build(),
          itemIndex: p.get('itemIndex').build(),
          devicePixelRatio: p.get('devicePixelRatio').build(),
        );
    mateUse('minScrollExtent', minScrollExtent);
    mateUse('maxScrollExtent', maxScrollExtent);
    mateUse('pixels', pixels);
    mateUse('viewportDimension', viewportDimension);
    mateUse('axisDirection', axisDirection);
    mateUse('itemIndex', itemIndex);
    mateUse('devicePixelRatio', devicePixelRatio);
  }
}

/// class FixedExtentScrollPhysics extends ScrollPhysics
class FixedExtentScrollPhysics$Mate extends FixedExtentScrollPhysics with Mate {
  /// FixedExtentScrollPhysics FixedExtentScrollPhysics({ScrollPhysics? parent})
  FixedExtentScrollPhysics$Mate(
      {
      /// optionalParameters: {ScrollPhysics? parent} , defaultValue:none
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateBuilder =
        (p) => FixedExtentScrollPhysics$Mate(parent: p.get('parent').build());
    mateUse('parent', parent);
  }
}

/// class ListWheelScrollView extends StatefulWidget
class ListWheelScrollView$Mate extends ListWheelScrollView with Mate {
  /// ListWheelScrollView ListWheelScrollView({Key? key, ScrollController? controller, ScrollPhysics? physics, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, void Function(int)? onSelectedItemChanged, bool renderChildrenOutsideViewport = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, required List<Widget> children})
  ListWheelScrollView$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio} , defaultValue:unprocessed
    required double diameterRatio,

    /// optionalParameters: {double perspective = RenderListWheelViewport.defaultPerspective} , defaultValue:unprocessed
    required double perspective,

    /// optionalParameters: {double offAxisFraction = 0.0} , defaultValue:Literal
    double offAxisFraction = 0.0,

    /// optionalParameters: {bool useMagnifier = false} , defaultValue:Literal
    bool useMagnifier = false,

    /// optionalParameters: {double magnification = 1.0} , defaultValue:Literal
    double magnification = 1.0,

    /// optionalParameters: {double overAndUnderCenterOpacity = 1.0} , defaultValue:Literal
    double overAndUnderCenterOpacity = 1.0,

    /// optionalParameters: {required double itemExtent} , defaultValue:none
    required double itemExtent,

    /// optionalParameters: {double squeeze = 1.0} , defaultValue:Literal
    double squeeze = 1.0,

    /// optionalParameters: {void Function(int)? onSelectedItemChanged} , defaultValue:none
    ValueChanged<int>? onSelectedItemChanged,

    /// optionalParameters: {bool renderChildrenOutsideViewport = false} , defaultValue:Literal
    bool renderChildrenOutsideViewport = false,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , defaultValue:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {required List<Widget> children} , defaultValue:none
    required List<Widget> children,
  }) : super(
          key: key,
          controller: controller,
          physics: physics,
          diameterRatio: diameterRatio,
          perspective: perspective,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          overAndUnderCenterOpacity: overAndUnderCenterOpacity,
          itemExtent: itemExtent,
          squeeze: squeeze,
          onSelectedItemChanged: onSelectedItemChanged,
          renderChildrenOutsideViewport: renderChildrenOutsideViewport,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          children: children,
        ) {
    mateBuilder = (p) => ListWheelScrollView$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          diameterRatio: p.get('diameterRatio').build(),
          perspective: p.get('perspective').build(),
          offAxisFraction: p.get('offAxisFraction').build(),
          useMagnifier: p.get('useMagnifier').build(),
          magnification: p.get('magnification').build(),
          overAndUnderCenterOpacity: p.get('overAndUnderCenterOpacity').build(),
          itemExtent: p.get('itemExtent').build(),
          squeeze: p.get('squeeze').build(),
          onSelectedItemChanged: p.get('onSelectedItemChanged').build(),
          renderChildrenOutsideViewport:
              p.get('renderChildrenOutsideViewport').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          children: p.get('children').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('physics', physics);
    mateUse('diameterRatio', diameterRatio);
    mateUse('perspective', perspective);
    mateUse('offAxisFraction', offAxisFraction);
    mateUse('useMagnifier', useMagnifier);
    mateUse('magnification', magnification);
    mateUse('overAndUnderCenterOpacity', overAndUnderCenterOpacity);
    mateUse('itemExtent', itemExtent);
    mateUse('squeeze', squeeze);
    mateUse('onSelectedItemChanged', onSelectedItemChanged);
    mateUse('renderChildrenOutsideViewport', renderChildrenOutsideViewport);
    mateUse('clipBehavior', clipBehavior);
    mateUse('restorationId', restorationId);
    mateUse('scrollBehavior', scrollBehavior);
    mateUse('children', children);
  }

  /// ListWheelScrollView ListWheelScrollView.useDelegate({Key? key, ScrollController? controller, ScrollPhysics? physics, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, void Function(int)? onSelectedItemChanged, bool renderChildrenOutsideViewport = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, required ListWheelChildDelegate childDelegate})
  ListWheelScrollView$Mate.useDelegate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio} , defaultValue:unprocessed
    required double diameterRatio,

    /// optionalParameters: {double perspective = RenderListWheelViewport.defaultPerspective} , defaultValue:unprocessed
    required double perspective,

    /// optionalParameters: {double offAxisFraction = 0.0} , defaultValue:Literal
    double offAxisFraction = 0.0,

    /// optionalParameters: {bool useMagnifier = false} , defaultValue:Literal
    bool useMagnifier = false,

    /// optionalParameters: {double magnification = 1.0} , defaultValue:Literal
    double magnification = 1.0,

    /// optionalParameters: {double overAndUnderCenterOpacity = 1.0} , defaultValue:Literal
    double overAndUnderCenterOpacity = 1.0,

    /// optionalParameters: {required double itemExtent} , defaultValue:none
    required double itemExtent,

    /// optionalParameters: {double squeeze = 1.0} , defaultValue:Literal
    double squeeze = 1.0,

    /// optionalParameters: {void Function(int)? onSelectedItemChanged} , defaultValue:none
    ValueChanged<int>? onSelectedItemChanged,

    /// optionalParameters: {bool renderChildrenOutsideViewport = false} , defaultValue:Literal
    bool renderChildrenOutsideViewport = false,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , defaultValue:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {required ListWheelChildDelegate childDelegate} , defaultValue:none
    required ListWheelChildDelegate childDelegate,
  }) : super.useDelegate(
          key: key,
          controller: controller,
          physics: physics,
          diameterRatio: diameterRatio,
          perspective: perspective,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          overAndUnderCenterOpacity: overAndUnderCenterOpacity,
          itemExtent: itemExtent,
          squeeze: squeeze,
          onSelectedItemChanged: onSelectedItemChanged,
          renderChildrenOutsideViewport: renderChildrenOutsideViewport,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          childDelegate: childDelegate,
        ) {
    mateBuilder = (p) => ListWheelScrollView$Mate.useDelegate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          diameterRatio: p.get('diameterRatio').build(),
          perspective: p.get('perspective').build(),
          offAxisFraction: p.get('offAxisFraction').build(),
          useMagnifier: p.get('useMagnifier').build(),
          magnification: p.get('magnification').build(),
          overAndUnderCenterOpacity: p.get('overAndUnderCenterOpacity').build(),
          itemExtent: p.get('itemExtent').build(),
          squeeze: p.get('squeeze').build(),
          onSelectedItemChanged: p.get('onSelectedItemChanged').build(),
          renderChildrenOutsideViewport:
              p.get('renderChildrenOutsideViewport').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          childDelegate: p.get('childDelegate').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('physics', physics);
    mateUse('diameterRatio', diameterRatio);
    mateUse('perspective', perspective);
    mateUse('offAxisFraction', offAxisFraction);
    mateUse('useMagnifier', useMagnifier);
    mateUse('magnification', magnification);
    mateUse('overAndUnderCenterOpacity', overAndUnderCenterOpacity);
    mateUse('itemExtent', itemExtent);
    mateUse('squeeze', squeeze);
    mateUse('onSelectedItemChanged', onSelectedItemChanged);
    mateUse('renderChildrenOutsideViewport', renderChildrenOutsideViewport);
    mateUse('clipBehavior', clipBehavior);
    mateUse('restorationId', restorationId);
    mateUse('scrollBehavior', scrollBehavior);
    mateUse('childDelegate', childDelegate);
  }
}

/// class ListWheelElement extends RenderObjectElement implements ListWheelChildManager
class ListWheelElement$Mate extends ListWheelElement with Mate {
  /// ListWheelElement ListWheelElement(ListWheelViewport widget)
  ListWheelElement$Mate(

      /// requiredParameters: ListWheelViewport widget
      ListWheelViewport widget)
      : super(widget) {
    mateBuilder = (p) => ListWheelElement$Mate(p.get('widget').value);
    mateUse('widget', widget);
  }
}

/// class ListWheelViewport extends RenderObjectWidget
class ListWheelViewport$Mate extends ListWheelViewport with Mate {
  /// ListWheelViewport ListWheelViewport({Key? key, double diameterRatio = RenderListWheelViewport.defaultDiameterRatio, double perspective = RenderListWheelViewport.defaultPerspective, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, double overAndUnderCenterOpacity = 1.0, required double itemExtent, double squeeze = 1.0, bool renderChildrenOutsideViewport = false, required ViewportOffset offset, required ListWheelChildDelegate childDelegate, Clip clipBehavior = Clip.hardEdge})
  ListWheelViewport$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {double diameterRatio = RenderListWheelViewport.defaultDiameterRatio} , defaultValue:unprocessed
    required double diameterRatio,

    /// optionalParameters: {double perspective = RenderListWheelViewport.defaultPerspective} , defaultValue:unprocessed
    required double perspective,

    /// optionalParameters: {double offAxisFraction = 0.0} , defaultValue:Literal
    double offAxisFraction = 0.0,

    /// optionalParameters: {bool useMagnifier = false} , defaultValue:Literal
    bool useMagnifier = false,

    /// optionalParameters: {double magnification = 1.0} , defaultValue:Literal
    double magnification = 1.0,

    /// optionalParameters: {double overAndUnderCenterOpacity = 1.0} , defaultValue:Literal
    double overAndUnderCenterOpacity = 1.0,

    /// optionalParameters: {required double itemExtent} , defaultValue:none
    required double itemExtent,

    /// optionalParameters: {double squeeze = 1.0} , defaultValue:Literal
    double squeeze = 1.0,

    /// optionalParameters: {bool renderChildrenOutsideViewport = false} , defaultValue:Literal
    bool renderChildrenOutsideViewport = false,

    /// optionalParameters: {required ViewportOffset offset} , defaultValue:none
    required ViewportOffset offset,

    /// optionalParameters: {required ListWheelChildDelegate childDelegate} , defaultValue:none
    required ListWheelChildDelegate childDelegate,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super(
          key: key,
          diameterRatio: diameterRatio,
          perspective: perspective,
          offAxisFraction: offAxisFraction,
          useMagnifier: useMagnifier,
          magnification: magnification,
          overAndUnderCenterOpacity: overAndUnderCenterOpacity,
          itemExtent: itemExtent,
          squeeze: squeeze,
          renderChildrenOutsideViewport: renderChildrenOutsideViewport,
          offset: offset,
          childDelegate: childDelegate,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => ListWheelViewport$Mate(
          key: p.get('key').build(),
          diameterRatio: p.get('diameterRatio').build(),
          perspective: p.get('perspective').build(),
          offAxisFraction: p.get('offAxisFraction').build(),
          useMagnifier: p.get('useMagnifier').build(),
          magnification: p.get('magnification').build(),
          overAndUnderCenterOpacity: p.get('overAndUnderCenterOpacity').build(),
          itemExtent: p.get('itemExtent').build(),
          squeeze: p.get('squeeze').build(),
          renderChildrenOutsideViewport:
              p.get('renderChildrenOutsideViewport').build(),
          offset: p.get('offset').build(),
          childDelegate: p.get('childDelegate').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse('key', key);
    mateUse('diameterRatio', diameterRatio);
    mateUse('perspective', perspective);
    mateUse('offAxisFraction', offAxisFraction);
    mateUse('useMagnifier', useMagnifier);
    mateUse('magnification', magnification);
    mateUse('overAndUnderCenterOpacity', overAndUnderCenterOpacity);
    mateUse('itemExtent', itemExtent);
    mateUse('squeeze', squeeze);
    mateUse('renderChildrenOutsideViewport', renderChildrenOutsideViewport);
    mateUse('offset', offset);
    mateUse('childDelegate', childDelegate);
    mateUse('clipBehavior', clipBehavior);
  }
}
