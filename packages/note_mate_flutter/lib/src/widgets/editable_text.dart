// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/editable_text.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/keyboard_inserted_content.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/services.dart';
import 'package:flutter/src/widgets/tap_region.dart';
import 'package:flutter/src/services/text_formatter.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/services/autofill.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/spell_check.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/widgets.dart';

/// class TextEditingController extends ValueNotifier<TextEditingValue>
class TextEditingController$Mate extends TextEditingController with Mate {
  /// TextEditingController TextEditingController({String? text})
  TextEditingController$Mate(
      {
      /// optionalParameters: {String? text} , default:none
      String? text})
      : super(text: text) {
    mateBuilderName = 'TextEditingController';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder =
        (p) => TextEditingController$Mate(text: p.get('text').build());
    mateUse(
      'text',
      text,
      isNamed: true,
    );
  }

  /// TextEditingController TextEditingController.fromValue(TextEditingValue? value)
  TextEditingController$Mate.fromValue(

      /// requiredParameters: TextEditingValue? value
      TextEditingValue? value)
      : super.fromValue(value) {
    mateBuilderName = 'TextEditingController.fromValue';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder =
        (p) => TextEditingController$Mate.fromValue(p.get('value').value);
    mateUse(
      'value',
      value,
      isNamed: false,
    );
  }
}

/// class ToolbarOptions
class ToolbarOptions$Mate extends ToolbarOptions with Mate {
  /// ToolbarOptions ToolbarOptions({bool copy = false, bool cut = false, bool paste = false, bool selectAll = false})
  ToolbarOptions$Mate({
    /// optionalParameters: {bool copy = false} , default:processed=BooleanLiteralImpl
    bool copy = false,

    /// optionalParameters: {bool cut = false} , default:processed=BooleanLiteralImpl
    bool cut = false,

    /// optionalParameters: {bool paste = false} , default:processed=BooleanLiteralImpl
    bool paste = false,

    /// optionalParameters: {bool selectAll = false} , default:processed=BooleanLiteralImpl
    bool selectAll = false,
  }) : super(
          copy: copy,
          cut: cut,
          paste: paste,
          selectAll: selectAll,
        ) {
    mateBuilderName = 'ToolbarOptions';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ToolbarOptions$Mate(
          copy: p.get('copy').build(),
          cut: p.get('cut').build(),
          paste: p.get('paste').build(),
          selectAll: p.get('selectAll').build(),
        );
    mateUse(
      'copy',
      copy,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'cut',
      cut,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'paste',
      paste,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'selectAll',
      selectAll,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class ContentInsertionConfiguration
class ContentInsertionConfiguration$Mate extends ContentInsertionConfiguration
    with Mate {
  /// ContentInsertionConfiguration ContentInsertionConfiguration({required void Function(KeyboardInsertedContent) onContentInserted, List<String> allowedMimeTypes = kDefaultContentInsertionMimeTypes})
  ContentInsertionConfiguration$Mate({
    /// optionalParameters: {required void Function(KeyboardInsertedContent) onContentInserted} , default:none
    required ValueChanged<KeyboardInsertedContent> onContentInserted,

    /// optionalParameters: {List<String> allowedMimeTypes = kDefaultContentInsertionMimeTypes} , default:unprocessed=SimpleIdentifierImpl
    required List<String> allowedMimeTypes,
  }) : super(
          onContentInserted: onContentInserted,
          allowedMimeTypes: allowedMimeTypes,
        ) {
    mateBuilderName = 'ContentInsertionConfiguration';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ContentInsertionConfiguration$Mate(
          onContentInserted: p.get('onContentInserted').build(),
          allowedMimeTypes: p.get('allowedMimeTypes').build(),
        );
    mateUse(
      'onContentInserted',
      onContentInserted,
      isNamed: true,
    );
    mateUseList(
      'allowedMimeTypes',
      allowedMimeTypes,
      isNamed: true,
    );
  }
}

/// class EditableText extends StatefulWidget
class EditableText$Mate extends EditableText with Mate {
  /// EditableText EditableText({Key? key, required TextEditingController controller, required FocusNode focusNode, bool readOnly = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, required TextStyle style, StrutStyle? strutStyle, required Color cursorColor, required Color backgroundCursorColor, TextAlign textAlign = TextAlign.start, TextDirection? textDirection, Locale? locale, double? textScaleFactor, int? maxLines = 1, int? minLines, bool expands = false, bool forceLine = true, TextHeightBehavior? textHeightBehavior, TextWidthBasis textWidthBasis = TextWidthBasis.parent, bool autofocus = false, bool? showCursor, bool showSelectionHandles = false, Color? selectionColor, TextSelectionControls? selectionControls, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(String, Map<String, dynamic>)? onAppPrivateCommand, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, void Function()? onSelectionHandleTapped, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, MouseCursor? mouseCursor, bool rendererIgnoresPointer = false, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, bool cursorOpacityAnimates = false, Offset? cursorOffset, bool paintCursorAboveText = false, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), Brightness keyboardAppearance = Brightness.light, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Color? autocorrectionTextRectColor, ToolbarOptions? toolbarOptions, Iterable<String>? autofillHints = const <String>[], AutofillClient? autofillClient, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, ContentInsertionConfiguration? contentInsertionConfiguration, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
  EditableText$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required TextEditingController controller} , default:none
    required TextEditingController controller,

    /// optionalParameters: {required FocusNode focusNode} , default:none
    required FocusNode focusNode,

    /// optionalParameters: {bool readOnly = false} , default:processed=BooleanLiteralImpl
    bool readOnly = false,

    /// optionalParameters: {String obscuringCharacter = '•'} , default:processed=SimpleStringLiteralImpl
    String obscuringCharacter = '•',

    /// optionalParameters: {bool obscureText = false} , default:processed=BooleanLiteralImpl
    bool obscureText = false,

    /// optionalParameters: {bool autocorrect = true} , default:processed=BooleanLiteralImpl
    bool autocorrect = true,

    /// optionalParameters: {SmartDashesType? smartDashesType} , default:none
    SmartDashesType? smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , default:none
    SmartQuotesType? smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , default:processed=BooleanLiteralImpl
    bool enableSuggestions = true,

    /// optionalParameters: {required TextStyle style} , default:none
    required TextStyle style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    StrutStyle? strutStyle,

    /// optionalParameters: {required Color cursorColor} , default:none
    required Color cursorColor,

    /// optionalParameters: {required Color backgroundCursorColor} , default:none
    required Color backgroundCursorColor,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , default:processed=PrefixedIdentifierImpl
    TextAlign textAlign = TextAlign.start,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , default:none
    Locale? locale,

    /// optionalParameters: {double? textScaleFactor} , default:none
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines = 1} , default:processed=IntegerLiteralImpl
    int? maxLines = 1,

    /// optionalParameters: {int? minLines} , default:none
    int? minLines,

    /// optionalParameters: {bool expands = false} , default:processed=BooleanLiteralImpl
    bool expands = false,

    /// optionalParameters: {bool forceLine = true} , default:processed=BooleanLiteralImpl
    bool forceLine = true,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:processed=PrefixedIdentifierImpl
    TextWidthBasis textWidthBasis = TextWidthBasis.parent,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {bool? showCursor} , default:none
    bool? showCursor,

    /// optionalParameters: {bool showSelectionHandles = false} , default:processed=BooleanLiteralImpl
    bool showSelectionHandles = false,

    /// optionalParameters: {Color? selectionColor} , default:none
    Color? selectionColor,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {TextInputType? keyboardType} , default:none
    TextInputType? keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , default:none
    TextInputAction? textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , default:processed=PrefixedIdentifierImpl
    TextCapitalization textCapitalization = TextCapitalization.none,

    /// optionalParameters: {void Function(String)? onChanged} , default:none
    ValueChanged<String>? onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , default:none
    VoidCallback? onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , default:none
    ValueChanged<String>? onSubmitted,

    /// optionalParameters: {void Function(String, Map<String, dynamic>)? onAppPrivateCommand} , default:none
    AppPrivateCommandCallback? onAppPrivateCommand,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , default:none
    SelectionChangedCallback? onSelectionChanged,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , default:none
    VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , default:none
    TapRegionCallback? onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , default:none
    List<TextInputFormatter>? inputFormatters,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool rendererIgnoresPointer = false} , default:processed=BooleanLiteralImpl
    bool rendererIgnoresPointer = false,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    double cursorWidth = 2.0,

    /// optionalParameters: {double? cursorHeight} , default:none
    double? cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , default:none
    Radius? cursorRadius,

    /// optionalParameters: {bool cursorOpacityAnimates = false} , default:processed=BooleanLiteralImpl
    bool cursorOpacityAnimates = false,

    /// optionalParameters: {Offset? cursorOffset} , default:none
    Offset? cursorOffset,

    /// optionalParameters: {bool paintCursorAboveText = false} , default:processed=BooleanLiteralImpl
    bool paintCursorAboveText = false,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    required BoxHeightStyle selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    required BoxWidthStyle selectionWidthStyle,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , default:unprocessed=InstanceCreationExpressionImpl
    required EdgeInsets scrollPadding,

    /// optionalParameters: {Brightness keyboardAppearance = Brightness.light} , default:processed=PrefixedIdentifierImpl
    Brightness keyboardAppearance = Brightness.light,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {bool? enableInteractiveSelection} , default:none
    bool? enableInteractiveSelection,

    /// optionalParameters: {ScrollController? scrollController} , default:none
    ScrollController? scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    ScrollPhysics? scrollPhysics,

    /// optionalParameters: {Color? autocorrectionTextRectColor} , default:none
    Color? autocorrectionTextRectColor,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , default:unprocessed=ListLiteralImpl
    required Iterable<String>? autofillHints,

    /// optionalParameters: {AutofillClient? autofillClient} , default:none
    AutofillClient? autofillClient,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.hardEdge,

    /// optionalParameters: {String? restorationId} , default:none
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , default:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {bool scribbleEnabled = true} , default:processed=BooleanLiteralImpl
    bool scribbleEnabled = true,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , default:processed=BooleanLiteralImpl
    bool enableIMEPersonalizedLearning = true,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , default:none
    ContentInsertionConfiguration? contentInsertionConfiguration,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder} , default:none
    EditableTextContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , default:none
    SpellCheckConfiguration? spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled} , default:processed=PrefixedIdentifierImpl
    TextMagnifierConfiguration magnifierConfiguration =
        TextMagnifierConfiguration.disabled,
  }) : super(
          key: key,
          controller: controller,
          focusNode: focusNode,
          readOnly: readOnly,
          obscuringCharacter: obscuringCharacter,
          obscureText: obscureText,
          autocorrect: autocorrect,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          enableSuggestions: enableSuggestions,
          style: style,
          strutStyle: strutStyle,
          cursorColor: cursorColor,
          backgroundCursorColor: backgroundCursorColor,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          minLines: minLines,
          expands: expands,
          forceLine: forceLine,
          textHeightBehavior: textHeightBehavior,
          textWidthBasis: textWidthBasis,
          autofocus: autofocus,
          showCursor: showCursor,
          showSelectionHandles: showSelectionHandles,
          selectionColor: selectionColor,
          selectionControls: selectionControls,
          keyboardType: keyboardType,
          textInputAction: textInputAction,
          textCapitalization: textCapitalization,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          onAppPrivateCommand: onAppPrivateCommand,
          onSelectionChanged: onSelectionChanged,
          onSelectionHandleTapped: onSelectionHandleTapped,
          onTapOutside: onTapOutside,
          inputFormatters: inputFormatters,
          mouseCursor: mouseCursor,
          rendererIgnoresPointer: rendererIgnoresPointer,
          cursorWidth: cursorWidth,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorOpacityAnimates: cursorOpacityAnimates,
          cursorOffset: cursorOffset,
          paintCursorAboveText: paintCursorAboveText,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          scrollPadding: scrollPadding,
          keyboardAppearance: keyboardAppearance,
          dragStartBehavior: dragStartBehavior,
          enableInteractiveSelection: enableInteractiveSelection,
          scrollController: scrollController,
          scrollPhysics: scrollPhysics,
          autocorrectionTextRectColor: autocorrectionTextRectColor,
          autofillHints: autofillHints,
          autofillClient: autofillClient,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          scribbleEnabled: scribbleEnabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          contentInsertionConfiguration: contentInsertionConfiguration,
          contextMenuBuilder: contextMenuBuilder,
          spellCheckConfiguration: spellCheckConfiguration,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilderName = 'EditableText';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => EditableText$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          focusNode: p.get('focusNode').build(),
          readOnly: p.get('readOnly').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          cursorColor: p.get('cursorColor').build(),
          backgroundCursorColor: p.get('backgroundCursorColor').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          locale: p.get('locale').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          forceLine: p.get('forceLine').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          autofocus: p.get('autofocus').build(),
          showCursor: p.get('showCursor').build(),
          showSelectionHandles: p.get('showSelectionHandles').build(),
          selectionColor: p.get('selectionColor').build(),
          selectionControls: p.get('selectionControls').build(),
          keyboardType: p.get('keyboardType').build(),
          textInputAction: p.get('textInputAction').build(),
          textCapitalization: p.get('textCapitalization').build(),
          onChanged: p.get('onChanged').build(),
          onEditingComplete: p.get('onEditingComplete').build(),
          onSubmitted: p.get('onSubmitted').build(),
          onAppPrivateCommand: p.get('onAppPrivateCommand').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(),
          onTapOutside: p.get('onTapOutside').build(),
          inputFormatters: p.get('inputFormatters').build(),
          mouseCursor: p.get('mouseCursor').build(),
          rendererIgnoresPointer: p.get('rendererIgnoresPointer').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorOpacityAnimates: p.get('cursorOpacityAnimates').build(),
          cursorOffset: p.get('cursorOffset').build(),
          paintCursorAboveText: p.get('paintCursorAboveText').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          scrollPadding: p.get('scrollPadding').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection:
              p.get('enableInteractiveSelection').build(),
          scrollController: p.get('scrollController').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          autocorrectionTextRectColor:
              p.get('autocorrectionTextRectColor').build(),
          autofillHints: p.get('autofillHints').build(),
          autofillClient: p.get('autofillClient').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          scribbleEnabled: p.get('scribbleEnabled').build(),
          enableIMEPersonalizedLearning:
              p.get('enableIMEPersonalizedLearning').build(),
          contentInsertionConfiguration:
              p.get('contentInsertionConfiguration').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'readOnly',
      readOnly,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'obscuringCharacter',
      obscuringCharacter,
      isNamed: true,
      defaultValue: '•',
    );
    mateUse(
      'obscureText',
      obscureText,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'autocorrect',
      autocorrect,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'smartDashesType',
      smartDashesType,
      isNamed: true,
    );
    mateUse(
      'smartQuotesType',
      smartQuotesType,
      isNamed: true,
    );
    mateUse(
      'enableSuggestions',
      enableSuggestions,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'strutStyle',
      strutStyle,
      isNamed: true,
    );
    mateUse(
      'cursorColor',
      cursorColor,
      isNamed: true,
    );
    mateUse(
      'backgroundCursorColor',
      backgroundCursorColor,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
      defaultValue: TextAlign.start,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'locale',
      locale,
      isNamed: true,
    );
    mateUse(
      'textScaleFactor',
      textScaleFactor,
      isNamed: true,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
      defaultValue: 1,
    );
    mateUse(
      'minLines',
      minLines,
      isNamed: true,
    );
    mateUse(
      'expands',
      expands,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'forceLine',
      forceLine,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
      defaultValue: TextWidthBasis.parent,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'showCursor',
      showCursor,
      isNamed: true,
    );
    mateUse(
      'showSelectionHandles',
      showSelectionHandles,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'selectionColor',
      selectionColor,
      isNamed: true,
    );
    mateUse(
      'selectionControls',
      selectionControls,
      isNamed: true,
    );
    mateUse(
      'keyboardType',
      keyboardType,
      isNamed: true,
    );
    mateUse(
      'textInputAction',
      textInputAction,
      isNamed: true,
    );
    mateUse(
      'textCapitalization',
      textCapitalization,
      isNamed: true,
      defaultValue: TextCapitalization.none,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'onEditingComplete',
      onEditingComplete,
      isNamed: true,
    );
    mateUse(
      'onSubmitted',
      onSubmitted,
      isNamed: true,
    );
    mateUse(
      'onAppPrivateCommand',
      onAppPrivateCommand,
      isNamed: true,
    );
    mateUse(
      'onSelectionChanged',
      onSelectionChanged,
      isNamed: true,
    );
    mateUse(
      'onSelectionHandleTapped',
      onSelectionHandleTapped,
      isNamed: true,
    );
    mateUse(
      'onTapOutside',
      onTapOutside,
      isNamed: true,
    );
    mateUseList(
      'inputFormatters',
      inputFormatters,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
    );
    mateUse(
      'rendererIgnoresPointer',
      rendererIgnoresPointer,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'cursorWidth',
      cursorWidth,
      isNamed: true,
      defaultValue: 2.0,
    );
    mateUse(
      'cursorHeight',
      cursorHeight,
      isNamed: true,
    );
    mateUse(
      'cursorRadius',
      cursorRadius,
      isNamed: true,
    );
    mateUse(
      'cursorOpacityAnimates',
      cursorOpacityAnimates,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'cursorOffset',
      cursorOffset,
      isNamed: true,
    );
    mateUse(
      'paintCursorAboveText',
      paintCursorAboveText,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'selectionHeightStyle',
      selectionHeightStyle,
      isNamed: true,
    );
    mateUse(
      'selectionWidthStyle',
      selectionWidthStyle,
      isNamed: true,
    );
    mateUse(
      'scrollPadding',
      scrollPadding,
      isNamed: true,
    );
    mateUse(
      'keyboardAppearance',
      keyboardAppearance,
      isNamed: true,
      defaultValue: Brightness.light,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: DragStartBehavior.start,
    );
    mateUse(
      'enableInteractiveSelection',
      enableInteractiveSelection,
      isNamed: true,
    );
    mateUse(
      'scrollController',
      scrollController,
      isNamed: true,
    );
    mateUse(
      'scrollPhysics',
      scrollPhysics,
      isNamed: true,
    );
    mateUse(
      'autocorrectionTextRectColor',
      autocorrectionTextRectColor,
      isNamed: true,
    );
    mateUse(
      'autofillHints',
      autofillHints,
      isNamed: true,
    );
    mateUse(
      'autofillClient',
      autofillClient,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.hardEdge,
    );
    mateUse(
      'restorationId',
      restorationId,
      isNamed: true,
    );
    mateUse(
      'scrollBehavior',
      scrollBehavior,
      isNamed: true,
    );
    mateUse(
      'scribbleEnabled',
      scribbleEnabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'enableIMEPersonalizedLearning',
      enableIMEPersonalizedLearning,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'contentInsertionConfiguration',
      contentInsertionConfiguration,
      isNamed: true,
    );
    mateUse(
      'contextMenuBuilder',
      contextMenuBuilder,
      isNamed: true,
    );
    mateUse(
      'spellCheckConfiguration',
      spellCheckConfiguration,
      isNamed: true,
    );
    mateUse(
      'magnifierConfiguration',
      magnifierConfiguration,
      isNamed: true,
      defaultValue: TextMagnifierConfiguration.disabled,
    );
  }
}
