// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/widget_inspector.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/foundation/diagnostics.dart' as _i5;

/// class WidgetInspector extends StatefulWidget
class WidgetInspector$Mate extends _i1.WidgetInspector with _i2.Mate {
  /// WidgetInspector WidgetInspector({Key? key, required Widget child, required Widget Function(BuildContext, void Function())? selectButtonBuilder})
  WidgetInspector$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,

    /// optionalParameters: {required Widget Function(BuildContext, void Function())? selectButtonBuilder} , default:none
    required _i1.InspectorSelectButtonBuilder? selectButtonBuilder,
  }) : super(
          key: key,
          child: child,
          selectButtonBuilder: selectButtonBuilder,
        ) {
    mateBuilderName = 'WidgetInspector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => WidgetInspector$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          selectButtonBuilder: p.get('selectButtonBuilder').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'selectButtonBuilder',
      selectButtonBuilder,
      isNamed: true,
    );
  }
}

/// class DevToolsDeepLinkProperty extends DiagnosticsProperty<String>
class DevToolsDeepLinkProperty$Mate extends _i1.DevToolsDeepLinkProperty with _i2.Mate {
  /// DevToolsDeepLinkProperty DevToolsDeepLinkProperty(String description, String url)
  DevToolsDeepLinkProperty$Mate(
    /// requiredParameters: String description
    String description,

    /// requiredParameters: String url
    String url,
  ) : super(
          description,
          url,
        ) {
    mateBuilderName = 'DevToolsDeepLinkProperty';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DevToolsDeepLinkProperty$Mate(
          p.get('description').value,
          p.get('url').value,
        );
    mateUse(
      'description',
      description,
      isNamed: false,
    );
    mateUse(
      'url',
      url,
      isNamed: false,
    );
  }
}

/// class InspectorSerializationDelegate implements DiagnosticsSerializationDelegate
class InspectorSerializationDelegate$Mate extends _i1.InspectorSerializationDelegate with _i2.Mate {
  /// InspectorSerializationDelegate InspectorSerializationDelegate({String? groupName, bool summaryTree = false, int maxDescendantsTruncatableNode = -1, bool expandPropertyValues = true, int subtreeDepth = 1, bool includeProperties = false, required WidgetInspectorService service, Map<String, Object>? Function(DiagnosticsNode, InspectorSerializationDelegate)? addAdditionalPropertiesCallback})
  InspectorSerializationDelegate$Mate({
    /// optionalParameters: {String? groupName} , default:none
    String? groupName,

    /// optionalParameters: {bool summaryTree = false} , default:processed=BooleanLiteralImpl
    bool summaryTree = false,

    /// optionalParameters: {int maxDescendantsTruncatableNode = -1} , default:processed=PrefixExpressionImpl
    int maxDescendantsTruncatableNode = -1,

    /// optionalParameters: {bool expandPropertyValues = true} , default:processed=BooleanLiteralImpl
    bool expandPropertyValues = true,

    /// optionalParameters: {int subtreeDepth = 1} , default:processed=IntegerLiteralImpl
    int subtreeDepth = 1,

    /// optionalParameters: {bool includeProperties = false} , default:processed=BooleanLiteralImpl
    bool includeProperties = false,

    /// optionalParameters: {required WidgetInspectorService service} , default:none
    required _i1.WidgetInspectorService service,

    /// optionalParameters: {Map<String, Object>? Function(DiagnosticsNode, InspectorSerializationDelegate)? addAdditionalPropertiesCallback} , default:none
    Map<String, Object>? Function(
      _i5.DiagnosticsNode,
      _i1.InspectorSerializationDelegate,
    )? addAdditionalPropertiesCallback,
  }) : super(
          groupName: groupName,
          summaryTree: summaryTree,
          maxDescendantsTruncatableNode: maxDescendantsTruncatableNode,
          expandPropertyValues: expandPropertyValues,
          subtreeDepth: subtreeDepth,
          includeProperties: includeProperties,
          service: service,
          addAdditionalPropertiesCallback: addAdditionalPropertiesCallback,
        ) {
    mateBuilderName = 'InspectorSerializationDelegate';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => InspectorSerializationDelegate$Mate(
          groupName: p.get('groupName').build(),
          summaryTree: p.get('summaryTree').build(),
          maxDescendantsTruncatableNode: p.get('maxDescendantsTruncatableNode').build(),
          expandPropertyValues: p.get('expandPropertyValues').build(),
          subtreeDepth: p.get('subtreeDepth').build(),
          includeProperties: p.get('includeProperties').build(),
          service: p.get('service').build(),
          addAdditionalPropertiesCallback: p.get('addAdditionalPropertiesCallback').build(),
        );
    mateUse(
      'groupName',
      groupName,
      isNamed: true,
    );
    mateUse(
      'summaryTree',
      summaryTree,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'maxDescendantsTruncatableNode',
      maxDescendantsTruncatableNode,
      isNamed: true,
      defaultValue: -1,
    );
    mateUse(
      'expandPropertyValues',
      expandPropertyValues,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'subtreeDepth',
      subtreeDepth,
      isNamed: true,
      defaultValue: 1,
    );
    mateUse(
      'includeProperties',
      includeProperties,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'service',
      service,
      isNamed: true,
    );
    mateUse(
      'addAdditionalPropertiesCallback',
      addAdditionalPropertiesCallback,
      isNamed: true,
    );
  }
}
