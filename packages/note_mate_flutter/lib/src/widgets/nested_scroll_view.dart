// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/nested_scroll_view.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

/// class NestedScrollView extends StatefulWidget
class NestedScrollView$Mate extends NestedScrollView with Mate {
  /// NestedScrollView NestedScrollView({Key? key, ScrollController? controller, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollPhysics? physics, required List<Widget> Function(BuildContext, bool) headerSliverBuilder, required Widget body, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool floatHeaderSlivers = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior})
  NestedScrollView$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {ScrollController? controller} , defaultValue:none
    ScrollController? controller,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , defaultValue:unprocessed
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , defaultValue:Literal
    bool reverse = false,

    /// optionalParameters: {ScrollPhysics? physics} , defaultValue:none
    ScrollPhysics? physics,

    /// optionalParameters: {required List<Widget> Function(BuildContext, bool) headerSliverBuilder} , defaultValue:none
    required NestedScrollViewHeaderSliversBuilder headerSliverBuilder,

    /// optionalParameters: {required Widget body} , defaultValue:none
    required Widget body,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:unprocessed
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool floatHeaderSlivers = false} , defaultValue:Literal
    bool floatHeaderSlivers = false,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , defaultValue:none
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , defaultValue:none
    ScrollBehavior? scrollBehavior,
  }) : super(
          key: key,
          controller: controller,
          scrollDirection: scrollDirection,
          reverse: reverse,
          physics: physics,
          headerSliverBuilder: headerSliverBuilder,
          body: body,
          dragStartBehavior: dragStartBehavior,
          floatHeaderSlivers: floatHeaderSlivers,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
        ) {
    mateCreateName = 'NestedScrollView';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NestedScrollView$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          physics: p.get('physics').build(),
          headerSliverBuilder: p.get('headerSliverBuilder').build(),
          body: p.get('body').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          floatHeaderSlivers: p.get('floatHeaderSlivers').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('scrollDirection', scrollDirection);
    mateUse('reverse', reverse);
    mateUse('physics', physics);
    mateUse('headerSliverBuilder', headerSliverBuilder);
    mateUse('body', body);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('floatHeaderSlivers', floatHeaderSlivers);
    mateUse('clipBehavior', clipBehavior);
    mateUse('restorationId', restorationId);
    mateUse('scrollBehavior', scrollBehavior);
  }
}

/// class SliverOverlapAbsorber extends SingleChildRenderObjectWidget
class SliverOverlapAbsorber$Mate extends SliverOverlapAbsorber with Mate {
  /// SliverOverlapAbsorber SliverOverlapAbsorber({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapAbsorber$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , defaultValue:none
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Widget? sliver} , defaultValue:none
    Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {
    mateCreateName = 'SliverOverlapAbsorber';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliverOverlapAbsorber$Mate(
          key: p.get('key').build(),
          handle: p.get('handle').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse('key', key);
    mateUse('handle', handle);
    mateUse('sliver', sliver);
  }
}

/// class RenderSliverOverlapAbsorber extends RenderSliver with RenderObjectWithChildMixin<RenderSliver>
class RenderSliverOverlapAbsorber$Mate extends RenderSliverOverlapAbsorber with Mate {
  /// RenderSliverOverlapAbsorber RenderSliverOverlapAbsorber({required SliverOverlapAbsorberHandle handle, RenderSliver? sliver})
  RenderSliverOverlapAbsorber$Mate({
    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , defaultValue:none
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {RenderSliver? sliver} , defaultValue:none
    RenderSliver? sliver,
  }) : super(
          handle: handle,
          sliver: sliver,
        ) {
    mateCreateName = 'RenderSliverOverlapAbsorber';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RenderSliverOverlapAbsorber$Mate(
          handle: p.get('handle').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse('handle', handle);
    mateUse('sliver', sliver);
  }
}

/// class SliverOverlapInjector extends SingleChildRenderObjectWidget
class SliverOverlapInjector$Mate extends SliverOverlapInjector with Mate {
  /// SliverOverlapInjector SliverOverlapInjector({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapInjector$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , defaultValue:none
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Widget? sliver} , defaultValue:none
    Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {
    mateCreateName = 'SliverOverlapInjector';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliverOverlapInjector$Mate(
          key: p.get('key').build(),
          handle: p.get('handle').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse('key', key);
    mateUse('handle', handle);
    mateUse('sliver', sliver);
  }
}

/// class RenderSliverOverlapInjector extends RenderSliver
class RenderSliverOverlapInjector$Mate extends RenderSliverOverlapInjector with Mate {
  /// RenderSliverOverlapInjector RenderSliverOverlapInjector({required SliverOverlapAbsorberHandle handle})
  RenderSliverOverlapInjector$Mate(
      {
      /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , defaultValue:none
      required SliverOverlapAbsorberHandle handle})
      : super(handle: handle) {
    mateCreateName = 'RenderSliverOverlapInjector';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RenderSliverOverlapInjector$Mate(handle: p.get('handle').build());
    mateUse('handle', handle);
  }
}

/// class NestedScrollViewViewport extends Viewport
class NestedScrollViewViewport$Mate extends NestedScrollViewViewport with Mate {
  /// NestedScrollViewViewport NestedScrollViewViewport({Key? key, AxisDirection axisDirection = AxisDirection.down, AxisDirection? crossAxisDirection, double anchor = 0.0, required ViewportOffset offset, Key? center, List<Widget> slivers = const <Widget>[], required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  NestedScrollViewViewport$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , defaultValue:unprocessed
    required AxisDirection axisDirection,

    /// optionalParameters: {AxisDirection? crossAxisDirection} , defaultValue:none
    AxisDirection? crossAxisDirection,

    /// optionalParameters: {double anchor = 0.0} , defaultValue:Literal
    double anchor = 0.0,

    /// optionalParameters: {required ViewportOffset offset} , defaultValue:none
    required ViewportOffset offset,

    /// optionalParameters: {Key? center} , defaultValue:none
    Key? center,

    /// optionalParameters: {List<Widget> slivers = const <Widget>[]} , defaultValue:unprocessed
    required List<Widget> slivers,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , defaultValue:none
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          anchor: anchor,
          offset: offset,
          center: center,
          slivers: slivers,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {
    mateCreateName = 'NestedScrollViewViewport';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NestedScrollViewViewport$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          crossAxisDirection: p.get('crossAxisDirection').build(),
          anchor: p.get('anchor').build(),
          offset: p.get('offset').build(),
          center: p.get('center').build(),
          slivers: p.get('slivers').build(),
          handle: p.get('handle').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse('key', key);
    mateUse('axisDirection', axisDirection);
    mateUse('crossAxisDirection', crossAxisDirection);
    mateUse('anchor', anchor);
    mateUse('offset', offset);
    mateUse('center', center);
    mateUse('slivers', slivers);
    mateUse('handle', handle);
    mateUse('clipBehavior', clipBehavior);
  }
}

/// class RenderNestedScrollViewViewport extends RenderViewport
class RenderNestedScrollViewViewport$Mate extends RenderNestedScrollViewViewport with Mate {
  /// RenderNestedScrollViewViewport RenderNestedScrollViewViewport({AxisDirection axisDirection = AxisDirection.down, required AxisDirection crossAxisDirection, required ViewportOffset offset, double anchor = 0.0, List<RenderSliver>? children, RenderSliver? center, required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  RenderNestedScrollViewViewport$Mate({
    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , defaultValue:is!ConstVariableElement
    required AxisDirection axisDirection,

    /// optionalParameters: {required AxisDirection crossAxisDirection} , defaultValue:none
    required AxisDirection crossAxisDirection,

    /// optionalParameters: {required ViewportOffset offset} , defaultValue:none
    required ViewportOffset offset,

    /// optionalParameters: {double anchor = 0.0} , defaultValue:Literal
    double anchor = 0.0,

    /// optionalParameters: {List<RenderSliver>? children} , defaultValue:none
    List<RenderSliver>? children,

    /// optionalParameters: {RenderSliver? center} , defaultValue:none
    RenderSliver? center,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , defaultValue:none
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:is!ConstVariableElement
    required Clip clipBehavior,
  }) : super(
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          offset: offset,
          anchor: anchor,
          children: children,
          center: center,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {
    mateCreateName = 'RenderNestedScrollViewViewport';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RenderNestedScrollViewViewport$Mate(
          axisDirection: p.get('axisDirection').build(),
          crossAxisDirection: p.get('crossAxisDirection').build(),
          offset: p.get('offset').build(),
          anchor: p.get('anchor').build(),
          children: p.get('children').build(),
          center: p.get('center').build(),
          handle: p.get('handle').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse('axisDirection', axisDirection);
    mateUse('crossAxisDirection', crossAxisDirection);
    mateUse('offset', offset);
    mateUse('anchor', anchor);
    mateUse('children', children);
    mateUse('center', center);
    mateUse('handle', handle);
    mateUse('clipBehavior', clipBehavior);
  }
}
