// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/nested_scroll_view.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i4;
import 'package:flutter/src/painting/basic_types.dart' as _i5;
import 'package:flutter/cupertino.dart' as _i6;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i8;
import 'package:flutter/src/gestures/recognizer.dart' as _i9;
import 'package:flutter/gestures.dart' as _i10;
import 'dart:ui' as _i11;
import 'package:flutter/src/widgets/scroll_configuration.dart' as _i12;
import 'package:flutter/src/rendering/sliver.dart' as _i13;
import 'package:flutter/src/rendering/viewport_offset.dart' as _i14;

/// class NestedScrollView extends StatefulWidget
class NestedScrollView$Mate extends _i1.NestedScrollView with _i2.Mate {
  /// NestedScrollView NestedScrollView({Key? key, ScrollController? controller, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollPhysics? physics, required List<Widget> Function(BuildContext, bool) headerSliverBuilder, required Widget body, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool floatHeaderSlivers = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior})
  NestedScrollView$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {ScrollController? controller} , default:none
    _i4.ScrollController? controller,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , default:processed=PrefixedIdentifierImpl
    _i5.Axis scrollDirection = _i6.Axis.vertical,

    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    bool reverse = false,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    _i7.ScrollPhysics? physics,

    /// optionalParameters: {required List<Widget> Function(BuildContext, bool) headerSliverBuilder} , default:none
    required _i1.NestedScrollViewHeaderSliversBuilder headerSliverBuilder,

    /// optionalParameters: {required Widget body} , default:none
    required _i8.Widget body,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i9.DragStartBehavior dragStartBehavior = _i10.DragStartBehavior.start,

    /// optionalParameters: {bool floatHeaderSlivers = false} , default:processed=BooleanLiteralImpl
    bool floatHeaderSlivers = false,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i11.Clip clipBehavior = _i11.Clip.hardEdge,

    /// optionalParameters: {String? restorationId} , default:none
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , default:none
    _i12.ScrollBehavior? scrollBehavior,
  }) : super(
          key: key,
          controller: controller,
          scrollDirection: scrollDirection,
          reverse: reverse,
          physics: physics,
          headerSliverBuilder: headerSliverBuilder,
          body: body,
          dragStartBehavior: dragStartBehavior,
          floatHeaderSlivers: floatHeaderSlivers,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
        ) {
    mateBuilderName = 'NestedScrollView';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => NestedScrollView$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          physics: p.get('physics').build(),
          headerSliverBuilder: p.get('headerSliverBuilder').build(),
          body: p.get('body').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          floatHeaderSlivers: p.get('floatHeaderSlivers').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'scrollDirection',
      scrollDirection,
      isNamed: true,
      defaultValue: _i6.Axis.vertical,
    );
    mateUse(
      'reverse',
      reverse,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'headerSliverBuilder',
      headerSliverBuilder,
      isNamed: true,
    );
    mateUse(
      'body',
      body,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i10.DragStartBehavior.start,
    );
    mateUse(
      'floatHeaderSlivers',
      floatHeaderSlivers,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i11.Clip.hardEdge,
    );
    mateUse(
      'restorationId',
      restorationId,
      isNamed: true,
    );
    mateUse(
      'scrollBehavior',
      scrollBehavior,
      isNamed: true,
    );
  }
}

/// class SliverOverlapAbsorber extends SingleChildRenderObjectWidget
class SliverOverlapAbsorber$Mate extends _i1.SliverOverlapAbsorber with _i2.Mate {
  /// SliverOverlapAbsorber SliverOverlapAbsorber({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapAbsorber$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , default:none
    required _i1.SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Widget? sliver} , default:none
    _i8.Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {
    mateBuilderName = 'SliverOverlapAbsorber';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverOverlapAbsorber$Mate(
          key: p.get('key').build(),
          handle: p.get('handle').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'handle',
      handle,
      isNamed: true,
    );
    mateUse(
      'sliver',
      sliver,
      isNamed: true,
    );
  }
}

/// class RenderSliverOverlapAbsorber extends RenderSliver with RenderObjectWithChildMixin<RenderSliver>
class RenderSliverOverlapAbsorber$Mate extends _i1.RenderSliverOverlapAbsorber with _i2.Mate {
  /// RenderSliverOverlapAbsorber RenderSliverOverlapAbsorber({required SliverOverlapAbsorberHandle handle, RenderSliver? sliver})
  RenderSliverOverlapAbsorber$Mate({
    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , default:none
    required _i1.SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {RenderSliver? sliver} , default:none
    _i13.RenderSliver? sliver,
  }) : super(
          handle: handle,
          sliver: sliver,
        ) {
    mateBuilderName = 'RenderSliverOverlapAbsorber';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RenderSliverOverlapAbsorber$Mate(
          handle: p.get('handle').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse(
      'handle',
      handle,
      isNamed: true,
    );
    mateUse(
      'sliver',
      sliver,
      isNamed: true,
    );
  }
}

/// class SliverOverlapInjector extends SingleChildRenderObjectWidget
class SliverOverlapInjector$Mate extends _i1.SliverOverlapInjector with _i2.Mate {
  /// SliverOverlapInjector SliverOverlapInjector({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapInjector$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , default:none
    required _i1.SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Widget? sliver} , default:none
    _i8.Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {
    mateBuilderName = 'SliverOverlapInjector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverOverlapInjector$Mate(
          key: p.get('key').build(),
          handle: p.get('handle').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'handle',
      handle,
      isNamed: true,
    );
    mateUse(
      'sliver',
      sliver,
      isNamed: true,
    );
  }
}

/// class RenderSliverOverlapInjector extends RenderSliver
class RenderSliverOverlapInjector$Mate extends _i1.RenderSliverOverlapInjector with _i2.Mate {
  /// RenderSliverOverlapInjector RenderSliverOverlapInjector({required SliverOverlapAbsorberHandle handle})
  RenderSliverOverlapInjector$Mate(
      {
      /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , default:none
      required _i1.SliverOverlapAbsorberHandle handle})
      : super(handle: handle) {
    mateBuilderName = 'RenderSliverOverlapInjector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RenderSliverOverlapInjector$Mate(handle: p.get('handle').build());
    mateUse(
      'handle',
      handle,
      isNamed: true,
    );
  }
}

/// class NestedScrollViewViewport extends Viewport
class NestedScrollViewViewport$Mate extends _i1.NestedScrollViewViewport with _i2.Mate {
  /// NestedScrollViewViewport NestedScrollViewViewport({Key? key, AxisDirection axisDirection = AxisDirection.down, AxisDirection? crossAxisDirection, double anchor = 0.0, required ViewportOffset offset, Key? center, List<Widget> slivers = const <Widget>[], required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  NestedScrollViewViewport$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , default:processed=PrefixedIdentifierImpl
    _i5.AxisDirection axisDirection = _i6.AxisDirection.down,

    /// optionalParameters: {AxisDirection? crossAxisDirection} , default:none
    _i5.AxisDirection? crossAxisDirection,

    /// optionalParameters: {double anchor = 0.0} , default:processed=DoubleLiteralImpl
    double anchor = 0.0,

    /// optionalParameters: {required ViewportOffset offset} , default:none
    required _i14.ViewportOffset offset,

    /// optionalParameters: {Key? center} , default:none
    _i3.Key? center,

    /// optionalParameters: {List<Widget> slivers = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i8.Widget> slivers,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , default:none
    required _i1.SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i11.Clip clipBehavior = _i11.Clip.hardEdge,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          anchor: anchor,
          offset: offset,
          center: center,
          slivers: slivers,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'NestedScrollViewViewport';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => NestedScrollViewViewport$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          crossAxisDirection: p.get('crossAxisDirection').build(),
          anchor: p.get('anchor').build(),
          offset: p.get('offset').build(),
          center: p.get('center').build(),
          slivers: p.get('slivers').build(),
          handle: p.get('handle').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'axisDirection',
      axisDirection,
      isNamed: true,
      defaultValue: _i6.AxisDirection.down,
    );
    mateUse(
      'crossAxisDirection',
      crossAxisDirection,
      isNamed: true,
    );
    mateUse(
      'anchor',
      anchor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'offset',
      offset,
      isNamed: true,
    );
    mateUse(
      'center',
      center,
      isNamed: true,
    );
    mateUse(
      'slivers',
      slivers,
      isNamed: true,
    );
    mateUse(
      'handle',
      handle,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i11.Clip.hardEdge,
    );
  }
}

/// class RenderNestedScrollViewViewport extends RenderViewport
class RenderNestedScrollViewViewport$Mate extends _i1.RenderNestedScrollViewViewport with _i2.Mate {
  /// RenderNestedScrollViewViewport RenderNestedScrollViewViewport({AxisDirection axisDirection = AxisDirection.down, required AxisDirection crossAxisDirection, required ViewportOffset offset, double anchor = 0.0, List<RenderSliver>? children, RenderSliver? center, required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  RenderNestedScrollViewViewport$Mate({
    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , default:processed=PrefixedIdentifierImpl
    _i5.AxisDirection axisDirection = _i6.AxisDirection.down,

    /// optionalParameters: {required AxisDirection crossAxisDirection} , default:none
    required _i5.AxisDirection crossAxisDirection,

    /// optionalParameters: {required ViewportOffset offset} , default:none
    required _i14.ViewportOffset offset,

    /// optionalParameters: {double anchor = 0.0} , default:processed=DoubleLiteralImpl
    double anchor = 0.0,

    /// optionalParameters: {List<RenderSliver>? children} , default:none
    List<_i13.RenderSliver>? children,

    /// optionalParameters: {RenderSliver? center} , default:none
    _i13.RenderSliver? center,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , default:none
    required _i1.SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i11.Clip clipBehavior = _i11.Clip.hardEdge,
  }) : super(
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          offset: offset,
          anchor: anchor,
          children: children,
          center: center,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'RenderNestedScrollViewViewport';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RenderNestedScrollViewViewport$Mate(
          axisDirection: p.get('axisDirection').build(),
          crossAxisDirection: p.get('crossAxisDirection').build(),
          offset: p.get('offset').build(),
          anchor: p.get('anchor').build(),
          children: p.get('children').build(),
          center: p.get('center').build(),
          handle: p.get('handle').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'axisDirection',
      axisDirection,
      isNamed: true,
      defaultValue: _i6.AxisDirection.down,
    );
    mateUse(
      'crossAxisDirection',
      crossAxisDirection,
      isNamed: true,
    );
    mateUse(
      'offset',
      offset,
      isNamed: true,
    );
    mateUse(
      'anchor',
      anchor,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'center',
      center,
      isNamed: true,
    );
    mateUse(
      'handle',
      handle,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i11.Clip.hardEdge,
    );
  }
}
