// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/raw_keyboard_listener.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/focus_manager.dart' as _i4;
import 'package:flutter/src/foundation/basic_types.dart' as _i5;
import 'package:flutter/src/services/raw_keyboard.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i7;

/// class RawKeyboardListener extends StatefulWidget
class RawKeyboardListener$Mate extends _i1.RawKeyboardListener with _i2.Mate {
  /// RawKeyboardListener RawKeyboardListener({Key? key, required FocusNode focusNode, bool autofocus = false, bool includeSemantics = true, void Function(RawKeyEvent)? onKey, required Widget child})
  RawKeyboardListener$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required FocusNode focusNode} , default:none
    required _i4.FocusNode focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {bool includeSemantics = true} , default:processed=BooleanLiteralImpl
    bool includeSemantics = true,

    /// optionalParameters: {void Function(RawKeyEvent)? onKey} , default:none
    _i5.ValueChanged<_i6.RawKeyEvent>? onKey,

    /// optionalParameters: {required Widget child} , default:none
    required _i7.Widget child,
  }) : super(
          key: key,
          focusNode: focusNode,
          autofocus: autofocus,
          includeSemantics: includeSemantics,
          onKey: onKey,
          child: child,
        ) {
    mateBuilderName = 'RawKeyboardListener';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RawKeyboardListener$Mate(
          key: p.get('key').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          includeSemantics: p.get('includeSemantics').build(),
          onKey: p.get('onKey').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'includeSemantics',
      includeSemantics,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onKey',
      onKey,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
