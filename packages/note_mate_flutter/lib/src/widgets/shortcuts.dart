// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/services/keyboard_key.g.dart';import 'package:flutter/src/widgets/shortcuts.dart';import 'dart:core';import 'package:flutter/src/widgets/actions.dart';import 'package:flutter/src/foundation/diagnostics.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class KeySet<T extends KeyboardKey>
class KeySet$Mate<T extends KeyboardKey> extends KeySet<T> with Mate {/// KeySet<T> KeySet(T key1, [T? key2, T? key3, T? key4])
KeySet$Mate(/// requiredParameters: T key1 
T key1, /// requiredParameters: [T? key2] 
T? key2, /// requiredParameters: [T? key3] 
T? key3, /// requiredParameters: [T? key4] 
T? key4, ) : super(key1, key2, key3, key4, ) { mateBuilder = (p) => KeySet$Mate<T>(p.get('key1').value, p.get('key2').value, p.get('key3').value, p.get('key4').value, );
matePut('key1', key1);
matePut('key2', key2);
matePut('key3', key3);
matePut('key4', key4); }

/// KeySet<T> KeySet.fromSet(Set<T> keys)
KeySet$Mate.fromSet(/// requiredParameters: Set<T> keys 
Set<T> keys) : super.fromSet(keys) { mateBuilder = (p) => KeySet$Mate<T>.fromSet(p.get('keys').value);
matePut('keys', keys); }

 }
/// class LogicalKeySet extends KeySet<LogicalKeyboardKey> with Diagnosticable implements ShortcutActivator
class LogicalKeySet$Mate extends LogicalKeySet with Mate {/// LogicalKeySet LogicalKeySet(LogicalKeyboardKey key1, [LogicalKeyboardKey? key2, LogicalKeyboardKey? key3, LogicalKeyboardKey? key4])
LogicalKeySet$Mate(/// requiredParameters: LogicalKeyboardKey key1 
LogicalKeyboardKey key1, /// requiredParameters: [LogicalKeyboardKey? key2] 
LogicalKeyboardKey? key2, /// requiredParameters: [LogicalKeyboardKey? key3] 
LogicalKeyboardKey? key3, /// requiredParameters: [LogicalKeyboardKey? key4] 
LogicalKeyboardKey? key4, ) : super(key1, key2, key3, key4, ) { mateBuilder = (p) => LogicalKeySet$Mate(p.get('key1').value, p.get('key2').value, p.get('key3').value, p.get('key4').value, );
matePut('key1', key1);
matePut('key2', key2);
matePut('key3', key3);
matePut('key4', key4); }

/// LogicalKeySet LogicalKeySet.fromSet(Set<LogicalKeyboardKey> keys)
LogicalKeySet$Mate.fromSet(/// requiredParameters: Set<LogicalKeyboardKey> keys 
Set<LogicalKeyboardKey> keys) : super.fromSet(keys) { mateBuilder = (p) => LogicalKeySet$Mate.fromSet(p.get('keys').value);
matePut('keys', keys); }

 }
/// class ShortcutMapProperty extends DiagnosticsProperty<Map<ShortcutActivator, Intent>>
class ShortcutMapProperty$Mate extends ShortcutMapProperty with Mate {/// ShortcutMapProperty ShortcutMapProperty(String name, Map<ShortcutActivator, Intent> value, {bool showName = true, Object defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info, String? description})
ShortcutMapProperty$Mate(/// requiredParameters: String name 
String name, /// requiredParameters: Map<ShortcutActivator, Intent> value 
Map<ShortcutActivator,Intent> value, {/// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
required bool showName, /// optionalParameters: {Object defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
required Object defaultValue, /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
required DiagnosticLevel level, /// optionalParameters: {String? description} , hasDefaultValue:false, defaultValueCode:null
String? description, }) : super(name, value, showName: showName, defaultValue: defaultValue, level: level, description: description, ) { mateBuilder = (p) => ShortcutMapProperty$Mate(p.get('name').value, p.get('value').value, showName: p.get('showName').build(), defaultValue: p.get('defaultValue').build(), level: p.get('level').build(), description: p.get('description').build(), );
matePut('name', name);
matePut('value', value);
matePut('showName', showName);
matePut('defaultValue', defaultValue);
matePut('level', level);
matePut('description', description); }

 }
/// class SingleActivator with Diagnosticable, MenuSerializableShortcut implements ShortcutActivator
class SingleActivator$Mate extends SingleActivator with Mate {/// SingleActivator SingleActivator(LogicalKeyboardKey trigger, {bool control = false, bool shift = false, bool alt = false, bool meta = false, bool includeRepeats = true})
SingleActivator$Mate(/// requiredParameters: LogicalKeyboardKey trigger 
LogicalKeyboardKey trigger, {/// optionalParameters: {bool control = false} , hasDefaultValue:true, defaultValueCode:false
required bool control, /// optionalParameters: {bool shift = false} , hasDefaultValue:true, defaultValueCode:false
required bool shift, /// optionalParameters: {bool alt = false} , hasDefaultValue:true, defaultValueCode:false
required bool alt, /// optionalParameters: {bool meta = false} , hasDefaultValue:true, defaultValueCode:false
required bool meta, /// optionalParameters: {bool includeRepeats = true} , hasDefaultValue:true, defaultValueCode:true
required bool includeRepeats, }) : super(trigger, control: control, shift: shift, alt: alt, meta: meta, includeRepeats: includeRepeats, ) { mateBuilder = (p) => SingleActivator$Mate(p.get('trigger').value, control: p.get('control').build(), shift: p.get('shift').build(), alt: p.get('alt').build(), meta: p.get('meta').build(), includeRepeats: p.get('includeRepeats').build(), );
matePut('trigger', trigger);
matePut('control', control);
matePut('shift', shift);
matePut('alt', alt);
matePut('meta', meta);
matePut('includeRepeats', includeRepeats); }

 }
/// class CharacterActivator with Diagnosticable, MenuSerializableShortcut implements ShortcutActivator
class CharacterActivator$Mate extends CharacterActivator with Mate {/// CharacterActivator CharacterActivator(String character, {bool alt = false, bool control = false, bool meta = false, bool includeRepeats = true})
CharacterActivator$Mate(/// requiredParameters: String character 
String character, {/// optionalParameters: {bool alt = false} , hasDefaultValue:true, defaultValueCode:false
required bool alt, /// optionalParameters: {bool control = false} , hasDefaultValue:true, defaultValueCode:false
required bool control, /// optionalParameters: {bool meta = false} , hasDefaultValue:true, defaultValueCode:false
required bool meta, /// optionalParameters: {bool includeRepeats = true} , hasDefaultValue:true, defaultValueCode:true
required bool includeRepeats, }) : super(character, alt: alt, control: control, meta: meta, includeRepeats: includeRepeats, ) { mateBuilder = (p) => CharacterActivator$Mate(p.get('character').value, alt: p.get('alt').build(), control: p.get('control').build(), meta: p.get('meta').build(), includeRepeats: p.get('includeRepeats').build(), );
matePut('character', character);
matePut('alt', alt);
matePut('control', control);
matePut('meta', meta);
matePut('includeRepeats', includeRepeats); }

 }
/// class ShortcutManager with Diagnosticable, ChangeNotifier
class ShortcutManager$Mate extends ShortcutManager with Mate {/// ShortcutManager ShortcutManager({Map<ShortcutActivator, Intent> shortcuts = const <ShortcutActivator, Intent>{}, bool modal = false})
ShortcutManager$Mate({/// optionalParameters: {Map<ShortcutActivator, Intent> shortcuts = const <ShortcutActivator, Intent>{}} , hasDefaultValue:true, defaultValueCode:const <ShortcutActivator, Intent>{}
required Map<ShortcutActivator,Intent> shortcuts, /// optionalParameters: {bool modal = false} , hasDefaultValue:true, defaultValueCode:false
required bool modal, }) : super(shortcuts: shortcuts, modal: modal, ) { mateBuilder = (p) => ShortcutManager$Mate(shortcuts: p.get('shortcuts').build(), modal: p.get('modal').build(), );
matePut('shortcuts', shortcuts);
matePut('modal', modal); }

 }
/// class Shortcuts extends StatefulWidget
class Shortcuts$Mate extends Shortcuts with Mate {/// Shortcuts Shortcuts({Key? key, required Map<ShortcutActivator, Intent> shortcuts, required Widget child, String? debugLabel})
Shortcuts$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Map<ShortcutActivator, Intent> shortcuts} , hasDefaultValue:false, defaultValueCode:null
required Map<ShortcutActivator,Intent> shortcuts, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
String? debugLabel, }) : super(key: key, shortcuts: shortcuts, child: child, debugLabel: debugLabel, ) { mateBuilder = (p) => Shortcuts$Mate(key: p.get('key').build(), shortcuts: p.get('shortcuts').build(), child: p.get('child').build(), debugLabel: p.get('debugLabel').build(), );
matePut('key', key);
matePut('shortcuts', shortcuts);
matePut('child', child);
matePut('debugLabel', debugLabel); }

/// Shortcuts Shortcuts.manager({Key? key, required ShortcutManager manager, required Widget child, String? debugLabel})
Shortcuts$Mate.manager({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required ShortcutManager manager} , hasDefaultValue:false, defaultValueCode:null
required ShortcutManager manager, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
String? debugLabel, }) : super.manager(key: key, manager: manager, child: child, debugLabel: debugLabel, ) { mateBuilder = (p) => Shortcuts$Mate.manager(key: p.get('key').build(), manager: p.get('manager').build(), child: p.get('child').build(), debugLabel: p.get('debugLabel').build(), );
matePut('key', key);
matePut('manager', manager);
matePut('child', child);
matePut('debugLabel', debugLabel); }

 }
/// class CallbackShortcuts extends StatelessWidget
class CallbackShortcuts$Mate extends CallbackShortcuts with Mate {/// CallbackShortcuts CallbackShortcuts({Key? key, required Map<ShortcutActivator, void Function()> bindings, required Widget child})
CallbackShortcuts$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Map<ShortcutActivator, void Function()> bindings} , hasDefaultValue:false, defaultValueCode:null
required Map<ShortcutActivator,VoidCallback> bindings, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, bindings: bindings, child: child, ) { mateBuilder = (p) => CallbackShortcuts$Mate(key: p.get('key').build(), bindings: p.get('bindings').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('bindings', bindings);
matePut('child', child); }

 }
/// class ShortcutRegistrar extends StatefulWidget
class ShortcutRegistrar$Mate extends ShortcutRegistrar with Mate {/// ShortcutRegistrar ShortcutRegistrar({Key? key, required Widget child})
ShortcutRegistrar$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, child: child, ) { mateBuilder = (p) => ShortcutRegistrar$Mate(key: p.get('key').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('child', child); }

 }
