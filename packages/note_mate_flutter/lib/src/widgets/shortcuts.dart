// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/keyboard_key.g.dart' as _i1;
import 'package:flutter/src/widgets/shortcuts.dart' as _i2;
import 'package:note/mate.dart' as _i3;
import 'package:flutter/src/widgets/actions.dart' as _i4;
import 'package:flutter/src/foundation/diagnostics.dart' as _i5;
import 'package:flutter/foundation.dart' as _i6;
import 'package:flutter/src/foundation/key.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i8;
import 'dart:ui' as _i9;

/// class KeySet<T extends KeyboardKey>
class KeySet$Mate<T extends _i1.KeyboardKey> extends _i2.KeySet<T> with _i3.Mate {
  /// KeySet<T> KeySet(T key1, [T? key2, T? key3, T? key4])
  KeySet$Mate(
    /// requiredParameters: T key1
    T key1,

    /// requiredParameters: [T? key2]
    T? key2,

    /// requiredParameters: [T? key3]
    T? key3,

    /// requiredParameters: [T? key4]
    T? key4,
  ) : super(
          key1,
          key2,
          key3,
          key4,
        ) {
    mateBuilderName = 'KeySet';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => KeySet$Mate<T>(
          p.get('key1').value,
          p.get('key2').value,
          p.get('key3').value,
          p.get('key4').value,
        );
    mateUse(
      'key1',
      key1,
      isNamed: false,
    );
    mateUse(
      'key2',
      key2,
      isNamed: false,
    );
    mateUse(
      'key3',
      key3,
      isNamed: false,
    );
    mateUse(
      'key4',
      key4,
      isNamed: false,
    );
  }

  /// KeySet<T> KeySet.fromSet(Set<T> keys)
  KeySet$Mate.fromSet(

      /// requiredParameters: Set<T> keys
      Set<T> keys)
      : super.fromSet(keys) {
    mateBuilderName = 'KeySet.fromSet';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => KeySet$Mate<T>.fromSet(p.get('keys').value);
    mateUse(
      'keys',
      keys,
      isNamed: false,
    );
  }
}

/// class LogicalKeySet extends KeySet<LogicalKeyboardKey> with Diagnosticable implements ShortcutActivator
class LogicalKeySet$Mate extends _i2.LogicalKeySet with _i3.Mate {
  /// LogicalKeySet LogicalKeySet(LogicalKeyboardKey key1, [LogicalKeyboardKey? key2, LogicalKeyboardKey? key3, LogicalKeyboardKey? key4])
  LogicalKeySet$Mate(
    /// requiredParameters: LogicalKeyboardKey key1
    _i1.LogicalKeyboardKey key1,

    /// requiredParameters: [LogicalKeyboardKey? key2]
    _i1.LogicalKeyboardKey? key2,

    /// requiredParameters: [LogicalKeyboardKey? key3]
    _i1.LogicalKeyboardKey? key3,

    /// requiredParameters: [LogicalKeyboardKey? key4]
    _i1.LogicalKeyboardKey? key4,
  ) : super(
          key1,
          key2,
          key3,
          key4,
        ) {
    mateBuilderName = 'LogicalKeySet';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LogicalKeySet$Mate(
          p.get('key1').value,
          p.get('key2').value,
          p.get('key3').value,
          p.get('key4').value,
        );
    mateUse(
      'key1',
      key1,
      isNamed: false,
    );
    mateUse(
      'key2',
      key2,
      isNamed: false,
    );
    mateUse(
      'key3',
      key3,
      isNamed: false,
    );
    mateUse(
      'key4',
      key4,
      isNamed: false,
    );
  }

  /// LogicalKeySet LogicalKeySet.fromSet(Set<LogicalKeyboardKey> keys)
  LogicalKeySet$Mate.fromSet(

      /// requiredParameters: Set<LogicalKeyboardKey> keys
      Set<_i1.LogicalKeyboardKey> keys)
      : super.fromSet(keys) {
    mateBuilderName = 'LogicalKeySet.fromSet';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LogicalKeySet$Mate.fromSet(p.get('keys').value);
    mateUse(
      'keys',
      keys,
      isNamed: false,
    );
  }
}

/// class ShortcutMapProperty extends DiagnosticsProperty<Map<ShortcutActivator, Intent>>
class ShortcutMapProperty$Mate extends _i2.ShortcutMapProperty with _i3.Mate {
  /// ShortcutMapProperty ShortcutMapProperty(String name, Map<ShortcutActivator, Intent> value, {bool showName = true, Object defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info, String? description})
  ShortcutMapProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Map<ShortcutActivator, Intent> value
    Map<_i2.ShortcutActivator, _i4.Intent> value, {
    /// optionalParameters: {bool showName = true} , default:processed=BooleanLiteralImpl
    bool showName = true,

    /// optionalParameters: {Object defaultValue = kNoDefaultValue} , default:unprocessed=SimpleIdentifierImpl
    required Object defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , default:processed=PrefixedIdentifierImpl
    _i5.DiagnosticLevel level = _i6.DiagnosticLevel.info,

    /// optionalParameters: {String? description} , default:none
    String? description,
  }) : super(
          name,
          value,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
          description: description,
        ) {
    mateBuilderName = 'ShortcutMapProperty';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShortcutMapProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          showName: p.get('showName').build(),
          defaultValue: p.get('defaultValue').build(),
          level: p.get('level').build(),
          description: p.get('description').build(),
        );
    mateUse(
      'name',
      name,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
    mateUse(
      'showName',
      showName,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'defaultValue',
      defaultValue,
      isNamed: true,
    );
    mateUse(
      'level',
      level,
      isNamed: true,
      defaultValue: _i6.DiagnosticLevel.info,
    );
    mateUse(
      'description',
      description,
      isNamed: true,
    );
  }
}

/// class SingleActivator with Diagnosticable, MenuSerializableShortcut implements ShortcutActivator
class SingleActivator$Mate extends _i2.SingleActivator with _i3.Mate {
  /// SingleActivator SingleActivator(LogicalKeyboardKey trigger, {bool control = false, bool shift = false, bool alt = false, bool meta = false, bool includeRepeats = true})
  SingleActivator$Mate(
    /// requiredParameters: LogicalKeyboardKey trigger
    _i1.LogicalKeyboardKey trigger, {
    /// optionalParameters: {bool control = false} , default:processed=BooleanLiteralImpl
    bool control = false,

    /// optionalParameters: {bool shift = false} , default:processed=BooleanLiteralImpl
    bool shift = false,

    /// optionalParameters: {bool alt = false} , default:processed=BooleanLiteralImpl
    bool alt = false,

    /// optionalParameters: {bool meta = false} , default:processed=BooleanLiteralImpl
    bool meta = false,

    /// optionalParameters: {bool includeRepeats = true} , default:processed=BooleanLiteralImpl
    bool includeRepeats = true,
  }) : super(
          trigger,
          control: control,
          shift: shift,
          alt: alt,
          meta: meta,
          includeRepeats: includeRepeats,
        ) {
    mateBuilderName = 'SingleActivator';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SingleActivator$Mate(
          p.get('trigger').value,
          control: p.get('control').build(),
          shift: p.get('shift').build(),
          alt: p.get('alt').build(),
          meta: p.get('meta').build(),
          includeRepeats: p.get('includeRepeats').build(),
        );
    mateUse(
      'trigger',
      trigger,
      isNamed: false,
    );
    mateUse(
      'control',
      control,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'shift',
      shift,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'alt',
      alt,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'meta',
      meta,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'includeRepeats',
      includeRepeats,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class CharacterActivator with Diagnosticable, MenuSerializableShortcut implements ShortcutActivator
class CharacterActivator$Mate extends _i2.CharacterActivator with _i3.Mate {
  /// CharacterActivator CharacterActivator(String character, {bool alt = false, bool control = false, bool meta = false, bool includeRepeats = true})
  CharacterActivator$Mate(
    /// requiredParameters: String character
    String character, {
    /// optionalParameters: {bool alt = false} , default:processed=BooleanLiteralImpl
    bool alt = false,

    /// optionalParameters: {bool control = false} , default:processed=BooleanLiteralImpl
    bool control = false,

    /// optionalParameters: {bool meta = false} , default:processed=BooleanLiteralImpl
    bool meta = false,

    /// optionalParameters: {bool includeRepeats = true} , default:processed=BooleanLiteralImpl
    bool includeRepeats = true,
  }) : super(
          character,
          alt: alt,
          control: control,
          meta: meta,
          includeRepeats: includeRepeats,
        ) {
    mateBuilderName = 'CharacterActivator';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CharacterActivator$Mate(
          p.get('character').value,
          alt: p.get('alt').build(),
          control: p.get('control').build(),
          meta: p.get('meta').build(),
          includeRepeats: p.get('includeRepeats').build(),
        );
    mateUse(
      'character',
      character,
      isNamed: false,
    );
    mateUse(
      'alt',
      alt,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'control',
      control,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'meta',
      meta,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'includeRepeats',
      includeRepeats,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class ShortcutManager with Diagnosticable, ChangeNotifier
class ShortcutManager$Mate extends _i2.ShortcutManager with _i3.Mate {
  /// ShortcutManager ShortcutManager({Map<ShortcutActivator, Intent> shortcuts = const <ShortcutActivator, Intent>{}, bool modal = false})
  ShortcutManager$Mate({
    /// optionalParameters: {Map<ShortcutActivator, Intent> shortcuts = const <ShortcutActivator, Intent>{}} , default:unprocessed=SetOrMapLiteralImpl
    required Map<_i2.ShortcutActivator, _i4.Intent> shortcuts,

    /// optionalParameters: {bool modal = false} , default:processed=BooleanLiteralImpl
    bool modal = false,
  }) : super(
          shortcuts: shortcuts,
          modal: modal,
        ) {
    mateBuilderName = 'ShortcutManager';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShortcutManager$Mate(
          shortcuts: p.get('shortcuts').build(),
          modal: p.get('modal').build(),
        );
    mateUse(
      'shortcuts',
      shortcuts,
      isNamed: true,
    );
    mateUse(
      'modal',
      modal,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class Shortcuts extends StatefulWidget
class Shortcuts$Mate extends _i2.Shortcuts with _i3.Mate {
  /// Shortcuts Shortcuts({Key? key, required Map<ShortcutActivator, Intent> shortcuts, required Widget child, String? debugLabel})
  Shortcuts$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i7.Key? key,

    /// optionalParameters: {required Map<ShortcutActivator, Intent> shortcuts} , default:none
    required Map<_i2.ShortcutActivator, _i4.Intent> shortcuts,

    /// optionalParameters: {required Widget child} , default:none
    required _i8.Widget child,

    /// optionalParameters: {String? debugLabel} , default:none
    String? debugLabel,
  }) : super(
          key: key,
          shortcuts: shortcuts,
          child: child,
          debugLabel: debugLabel,
        ) {
    mateBuilderName = 'Shortcuts';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Shortcuts$Mate(
          key: p.get('key').build(),
          shortcuts: p.get('shortcuts').build(),
          child: p.get('child').build(),
          debugLabel: p.get('debugLabel').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'shortcuts',
      shortcuts,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'debugLabel',
      debugLabel,
      isNamed: true,
    );
  }

  /// Shortcuts Shortcuts.manager({Key? key, required ShortcutManager manager, required Widget child, String? debugLabel})
  Shortcuts$Mate.manager({
    /// optionalParameters: {Key? key} , default:none
    _i7.Key? key,

    /// optionalParameters: {required ShortcutManager manager} , default:none
    required _i2.ShortcutManager manager,

    /// optionalParameters: {required Widget child} , default:none
    required _i8.Widget child,

    /// optionalParameters: {String? debugLabel} , default:none
    String? debugLabel,
  }) : super.manager(
          key: key,
          manager: manager,
          child: child,
          debugLabel: debugLabel,
        ) {
    mateBuilderName = 'Shortcuts.manager';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Shortcuts$Mate.manager(
          key: p.get('key').build(),
          manager: p.get('manager').build(),
          child: p.get('child').build(),
          debugLabel: p.get('debugLabel').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'manager',
      manager,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'debugLabel',
      debugLabel,
      isNamed: true,
    );
  }
}

/// class CallbackShortcuts extends StatelessWidget
class CallbackShortcuts$Mate extends _i2.CallbackShortcuts with _i3.Mate {
  /// CallbackShortcuts CallbackShortcuts({Key? key, required Map<ShortcutActivator, void Function()> bindings, required Widget child})
  CallbackShortcuts$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i7.Key? key,

    /// optionalParameters: {required Map<ShortcutActivator, void Function()> bindings} , default:none
    required Map<_i2.ShortcutActivator, _i9.VoidCallback> bindings,

    /// optionalParameters: {required Widget child} , default:none
    required _i8.Widget child,
  }) : super(
          key: key,
          bindings: bindings,
          child: child,
        ) {
    mateBuilderName = 'CallbackShortcuts';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CallbackShortcuts$Mate(
          key: p.get('key').build(),
          bindings: p.get('bindings').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'bindings',
      bindings,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ShortcutRegistrar extends StatefulWidget
class ShortcutRegistrar$Mate extends _i2.ShortcutRegistrar with _i3.Mate {
  /// ShortcutRegistrar ShortcutRegistrar({Key? key, required Widget child})
  ShortcutRegistrar$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i7.Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i8.Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'ShortcutRegistrar';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShortcutRegistrar$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
