// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/animated_scroll_view.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'package:flutter/src/rendering/sliver_grid.dart';
import 'package:flutter/src/widgets/sliver.dart';

/// class AnimatedList extends _AnimatedScrollView
class AnimatedList$Mate extends AnimatedList with Mate {
  /// AnimatedList AnimatedList({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, int initialItemCount = 0, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, Clip clipBehavior = Clip.hardEdge})
  AnimatedList$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {int initialItemCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int initialItemCount,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          initialItemCount: initialItemCount,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => AnimatedList$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          initialItemCount: p.get('initialItemCount').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    matePut('key', key);
    matePut('itemBuilder', itemBuilder);
    matePut('initialItemCount', initialItemCount);
    matePut('scrollDirection', scrollDirection);
    matePut('reverse', reverse);
    matePut('controller', controller);
    matePut('primary', primary);
    matePut('physics', physics);
    matePut('shrinkWrap', shrinkWrap);
    matePut('padding', padding);
    matePut('clipBehavior', clipBehavior);
  }
}

/// class AnimatedGrid extends _AnimatedScrollView
class AnimatedGrid$Mate extends AnimatedGrid with Mate {
  /// AnimatedGrid AnimatedGrid({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, required SliverGridDelegate gridDelegate, int initialItemCount = 0, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, EdgeInsetsGeometry? padding, Clip clipBehavior = Clip.hardEdge})
  AnimatedGrid$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {int initialItemCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int initialItemCount,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          gridDelegate: gridDelegate,
          initialItemCount: initialItemCount,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          padding: padding,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => AnimatedGrid$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          gridDelegate: p.get('gridDelegate').build(),
          initialItemCount: p.get('initialItemCount').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          padding: p.get('padding').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    matePut('key', key);
    matePut('itemBuilder', itemBuilder);
    matePut('gridDelegate', gridDelegate);
    matePut('initialItemCount', initialItemCount);
    matePut('scrollDirection', scrollDirection);
    matePut('reverse', reverse);
    matePut('controller', controller);
    matePut('primary', primary);
    matePut('physics', physics);
    matePut('padding', padding);
    matePut('clipBehavior', clipBehavior);
  }
}

/// class SliverAnimatedList extends _SliverAnimatedMultiBoxAdaptor
class SliverAnimatedList$Mate extends SliverAnimatedList with Mate {
  /// SliverAnimatedList SliverAnimatedList({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, int? Function(Key)? findChildIndexCallback, int initialItemCount = 0})
  SliverAnimatedList$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int initialItemCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int initialItemCount,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          initialItemCount: initialItemCount,
        ) {
    mateBuilder = (p) => SliverAnimatedList$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          initialItemCount: p.get('initialItemCount').build(),
        );
    matePut('key', key);
    matePut('itemBuilder', itemBuilder);
    matePut('findChildIndexCallback', findChildIndexCallback);
    matePut('initialItemCount', initialItemCount);
  }
}

/// class SliverAnimatedGrid extends _SliverAnimatedMultiBoxAdaptor
class SliverAnimatedGrid$Mate extends SliverAnimatedGrid with Mate {
  /// SliverAnimatedGrid SliverAnimatedGrid({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, required SliverGridDelegate gridDelegate, int? Function(Key)? findChildIndexCallback, int initialItemCount = 0})
  SliverAnimatedGrid$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int initialItemCount = 0} , hasDefaultValue:true, defaultValueCode:0
    required int initialItemCount,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          gridDelegate: gridDelegate,
          findChildIndexCallback: findChildIndexCallback,
          initialItemCount: initialItemCount,
        ) {
    mateBuilder = (p) => SliverAnimatedGrid$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          gridDelegate: p.get('gridDelegate').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          initialItemCount: p.get('initialItemCount').build(),
        );
    matePut('key', key);
    matePut('itemBuilder', itemBuilder);
    matePut('gridDelegate', gridDelegate);
    matePut('findChildIndexCallback', findChildIndexCallback);
    matePut('initialItemCount', initialItemCount);
  }
}
