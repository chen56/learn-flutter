// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/animated_scroll_view.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/basic_types.dart' as _i4;
import 'package:flutter/cupertino.dart' as _i5;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i6;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i7;
import 'package:flutter/src/painting/edge_insets.dart' as _i8;
import 'dart:ui' as _i9;
import 'package:flutter/src/rendering/sliver_grid.dart' as _i10;
import 'package:flutter/src/widgets/scroll_delegate.dart' as _i11;

/// class AnimatedList extends _AnimatedScrollView
class AnimatedList$Mate extends _i1.AnimatedList with _i2.Mate {
  /// AnimatedList AnimatedList({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, int initialItemCount = 0, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, Clip clipBehavior = Clip.hardEdge})
  AnimatedList$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , default:none
    required _i1.AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {int initialItemCount = 0} , default:processed=IntegerLiteralImpl
    int initialItemCount = 0,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , default:processed=PrefixedIdentifierImpl
    _i4.Axis scrollDirection = _i5.Axis.vertical,

    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , default:none
    _i6.ScrollController? controller,

    /// optionalParameters: {bool? primary} , default:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    _i7.ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , default:processed=BooleanLiteralImpl
    bool shrinkWrap = false,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i8.EdgeInsetsGeometry? padding,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i9.Clip clipBehavior = _i9.Clip.hardEdge,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          initialItemCount: initialItemCount,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'AnimatedList';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedList$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          initialItemCount: p.get('initialItemCount').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          shrinkWrap: p.get('shrinkWrap').build(),
          padding: p.get('padding').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'itemBuilder',
      itemBuilder,
      isNamed: true,
    );
    mateUse(
      'initialItemCount',
      initialItemCount,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'scrollDirection',
      scrollDirection,
      isNamed: true,
      defaultValue: _i5.Axis.vertical,
    );
    mateUse(
      'reverse',
      reverse,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'shrinkWrap',
      shrinkWrap,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i9.Clip.hardEdge,
    );
  }
}

/// class AnimatedGrid extends _AnimatedScrollView
class AnimatedGrid$Mate extends _i1.AnimatedGrid with _i2.Mate {
  /// AnimatedGrid AnimatedGrid({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, required SliverGridDelegate gridDelegate, int initialItemCount = 0, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, EdgeInsetsGeometry? padding, Clip clipBehavior = Clip.hardEdge})
  AnimatedGrid$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , default:none
    required _i1.AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , default:none
    required _i10.SliverGridDelegate gridDelegate,

    /// optionalParameters: {int initialItemCount = 0} , default:processed=IntegerLiteralImpl
    int initialItemCount = 0,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , default:processed=PrefixedIdentifierImpl
    _i4.Axis scrollDirection = _i5.Axis.vertical,

    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , default:none
    _i6.ScrollController? controller,

    /// optionalParameters: {bool? primary} , default:none
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    _i7.ScrollPhysics? physics,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    _i8.EdgeInsetsGeometry? padding,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i9.Clip clipBehavior = _i9.Clip.hardEdge,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          gridDelegate: gridDelegate,
          initialItemCount: initialItemCount,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          padding: padding,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'AnimatedGrid';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedGrid$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          gridDelegate: p.get('gridDelegate').build(),
          initialItemCount: p.get('initialItemCount').build(),
          scrollDirection: p.get('scrollDirection').build(),
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          physics: p.get('physics').build(),
          padding: p.get('padding').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'itemBuilder',
      itemBuilder,
      isNamed: true,
    );
    mateUse(
      'gridDelegate',
      gridDelegate,
      isNamed: true,
    );
    mateUse(
      'initialItemCount',
      initialItemCount,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'scrollDirection',
      scrollDirection,
      isNamed: true,
      defaultValue: _i5.Axis.vertical,
    );
    mateUse(
      'reverse',
      reverse,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'primary',
      primary,
      isNamed: true,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i9.Clip.hardEdge,
    );
  }
}

/// class SliverAnimatedList extends _SliverAnimatedMultiBoxAdaptor
class SliverAnimatedList$Mate extends _i1.SliverAnimatedList with _i2.Mate {
  /// SliverAnimatedList SliverAnimatedList({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, int? Function(Key)? findChildIndexCallback, int initialItemCount = 0})
  SliverAnimatedList$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , default:none
    required _i1.AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , default:none
    _i11.ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int initialItemCount = 0} , default:processed=IntegerLiteralImpl
    int initialItemCount = 0,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          initialItemCount: initialItemCount,
        ) {
    mateBuilderName = 'SliverAnimatedList';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverAnimatedList$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          initialItemCount: p.get('initialItemCount').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'itemBuilder',
      itemBuilder,
      isNamed: true,
    );
    mateUse(
      'findChildIndexCallback',
      findChildIndexCallback,
      isNamed: true,
    );
    mateUse(
      'initialItemCount',
      initialItemCount,
      isNamed: true,
      defaultValue: 0,
    );
  }
}

/// class SliverAnimatedGrid extends _SliverAnimatedMultiBoxAdaptor
class SliverAnimatedGrid$Mate extends _i1.SliverAnimatedGrid with _i2.Mate {
  /// SliverAnimatedGrid SliverAnimatedGrid({Key? key, required Widget Function(BuildContext, int, Animation<double>) itemBuilder, required SliverGridDelegate gridDelegate, int? Function(Key)? findChildIndexCallback, int initialItemCount = 0})
  SliverAnimatedGrid$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, int, Animation<double>) itemBuilder} , default:none
    required _i1.AnimatedItemBuilder itemBuilder,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , default:none
    required _i10.SliverGridDelegate gridDelegate,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , default:none
    _i11.ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int initialItemCount = 0} , default:processed=IntegerLiteralImpl
    int initialItemCount = 0,
  }) : super(
          key: key,
          itemBuilder: itemBuilder,
          gridDelegate: gridDelegate,
          findChildIndexCallback: findChildIndexCallback,
          initialItemCount: initialItemCount,
        ) {
    mateBuilderName = 'SliverAnimatedGrid';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverAnimatedGrid$Mate(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          gridDelegate: p.get('gridDelegate').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          initialItemCount: p.get('initialItemCount').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'itemBuilder',
      itemBuilder,
      isNamed: true,
    );
    mateUse(
      'gridDelegate',
      gridDelegate,
      isNamed: true,
    );
    mateUse(
      'findChildIndexCallback',
      findChildIndexCallback,
      isNamed: true,
    );
    mateUse(
      'initialItemCount',
      initialItemCount,
      isNamed: true,
      defaultValue: 0,
    );
  }
}
