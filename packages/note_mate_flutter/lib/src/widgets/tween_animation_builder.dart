// /// Generated by gen_maters.dart, please don't edit!

import 'dart:core';
import 'package:flutter/src/widgets/tween_animation_builder.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/animation/tween.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/widgets/value_listenable_builder.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';

/// class TweenAnimationBuilder<T extends Object?> extends ImplicitlyAnimatedWidget
class TweenAnimationBuilder$Mate<T extends Object?>
    extends TweenAnimationBuilder<T> with Mate {
  /// TweenAnimationBuilder<T> TweenAnimationBuilder({Key? key, required Tween<T> tween, required Duration duration, Curve curve = Curves.linear, required Widget Function(BuildContext, T, Widget?) builder, void Function()? onEnd, Widget? child})
  TweenAnimationBuilder$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Tween<T> tween} , defaultValue:none
    required Tween<T> tween,

    /// optionalParameters: {required Duration duration} , defaultValue:none
    required Duration duration,

    /// optionalParameters: {Curve curve = Curves.linear} , defaultValue:unprocessed
    required Curve curve,

    /// optionalParameters: {required Widget Function(BuildContext, T, Widget?) builder} , defaultValue:none
    required ValueWidgetBuilder<T> builder,

    /// optionalParameters: {void Function()? onEnd} , defaultValue:none
    VoidCallback? onEnd,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          tween: tween,
          duration: duration,
          curve: curve,
          builder: builder,
          onEnd: onEnd,
          child: child,
        ) {
    mateBuilder = (p) => TweenAnimationBuilder$Mate<T>(
          key: p.get('key').build(),
          tween: p.get('tween').build(),
          duration: p.get('duration').build(),
          curve: p.get('curve').build(),
          builder: p.get('builder').build(),
          onEnd: p.get('onEnd').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('tween', tween);
    mateUse('duration', duration);
    mateUse('curve', curve);
    mateUse('builder', builder);
    mateUse('onEnd', onEnd);
    mateUse('child', child);
  }
}
