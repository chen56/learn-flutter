// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/gestures/recognizer.dart' as _i1;
import 'package:flutter/src/widgets/gesture_detector.dart' as _i2;
import 'package:note/mate.dart' as _i3;
import 'package:flutter/src/foundation/key.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/gestures/tap.dart' as _i6;
import 'package:flutter/src/gestures/long_press.dart' as _i7;
import 'package:flutter/src/gestures/drag_details.dart' as _i8;
import 'package:flutter/src/gestures/monodrag.dart' as _i9;
import 'package:flutter/src/gestures/force_press.dart' as _i10;
import 'package:flutter/src/gestures/scale.dart' as _i11;
import 'package:flutter/src/rendering/proxy_box.dart' as _i12;
import 'package:flutter/gestures.dart' as _i13;
import 'dart:ui' as _i14;

/// class GestureRecognizerFactoryWithHandlers<T extends GestureRecognizer> extends GestureRecognizerFactory<T>
class GestureRecognizerFactoryWithHandlers$Mate<T extends _i1.GestureRecognizer>
    extends _i2.GestureRecognizerFactoryWithHandlers<T> with _i3.Mate {
  /// GestureRecognizerFactoryWithHandlers<T> GestureRecognizerFactoryWithHandlers(T Function() _constructor, void Function(T) _initializer)
  GestureRecognizerFactoryWithHandlers$Mate(
    /// requiredParameters: T Function() _constructor
    super._constructor,

    /// requiredParameters: void Function(T) _initializer
    super._initializer,
  )   : mateParams = {
          '_constructor': _i3.BuilderArg<_i2.GestureRecognizerFactoryConstructor<T>>(
            name: '_constructor',
            init: _constructor,
            isNamed: false,
          ),
          '_initializer': _i3.BuilderArg<_i2.GestureRecognizerFactoryInitializer<T>>(
            name: '_initializer',
            init: _initializer,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'GestureRecognizerFactoryWithHandlers';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => GestureRecognizerFactoryWithHandlers$Mate<T>(
          p.get('_constructor').value,
          p.get('_initializer').value,
        );
  }

  @override
  final Map<String, _i3.BuilderArg> mateParams;
}

/// class GestureDetector extends StatelessWidget
class GestureDetector$Mate extends _i2.GestureDetector with _i3.Mate {
  /// GestureDetector GestureDetector({Key? key, Widget? child, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTap, void Function()? onTapCancel, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapUpDetails)? onSecondaryTapUp, void Function()? onSecondaryTapCancel, void Function(TapDownDetails)? onTertiaryTapDown, void Function(TapUpDetails)? onTertiaryTapUp, void Function()? onTertiaryTapCancel, void Function(TapDownDetails)? onDoubleTapDown, void Function()? onDoubleTap, void Function()? onDoubleTapCancel, void Function(LongPressDownDetails)? onLongPressDown, void Function()? onLongPressCancel, void Function()? onLongPress, void Function(LongPressStartDetails)? onLongPressStart, void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate, void Function()? onLongPressUp, void Function(LongPressEndDetails)? onLongPressEnd, void Function(LongPressDownDetails)? onSecondaryLongPressDown, void Function()? onSecondaryLongPressCancel, void Function()? onSecondaryLongPress, void Function(LongPressStartDetails)? onSecondaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate, void Function()? onSecondaryLongPressUp, void Function(LongPressEndDetails)? onSecondaryLongPressEnd, void Function(LongPressDownDetails)? onTertiaryLongPressDown, void Function()? onTertiaryLongPressCancel, void Function()? onTertiaryLongPress, void Function(LongPressStartDetails)? onTertiaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate, void Function()? onTertiaryLongPressUp, void Function(LongPressEndDetails)? onTertiaryLongPressEnd, void Function(DragDownDetails)? onVerticalDragDown, void Function(DragStartDetails)? onVerticalDragStart, void Function(DragUpdateDetails)? onVerticalDragUpdate, void Function(DragEndDetails)? onVerticalDragEnd, void Function()? onVerticalDragCancel, void Function(DragDownDetails)? onHorizontalDragDown, void Function(DragStartDetails)? onHorizontalDragStart, void Function(DragUpdateDetails)? onHorizontalDragUpdate, void Function(DragEndDetails)? onHorizontalDragEnd, void Function()? onHorizontalDragCancel, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressPeak, void Function(ForcePressDetails)? onForcePressUpdate, void Function(ForcePressDetails)? onForcePressEnd, void Function(DragDownDetails)? onPanDown, void Function(DragStartDetails)? onPanStart, void Function(DragUpdateDetails)? onPanUpdate, void Function(DragEndDetails)? onPanEnd, void Function()? onPanCancel, void Function(ScaleStartDetails)? onScaleStart, void Function(ScaleUpdateDetails)? onScaleUpdate, void Function(ScaleEndDetails)? onScaleEnd, HitTestBehavior? behavior, bool excludeFromSemantics = false, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool trackpadScrollCausesScale = false, Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor, Set<PointerDeviceKind>? supportedDevices})
  GestureDetector$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , default:none
    super.onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , default:none
    super.onTapUp,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {void Function()? onTapCancel} , default:none
    super.onTapCancel,

    /// optionalParameters: {void Function()? onSecondaryTap} , default:none
    super.onSecondaryTap,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , default:none
    super.onSecondaryTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onSecondaryTapUp} , default:none
    super.onSecondaryTapUp,

    /// optionalParameters: {void Function()? onSecondaryTapCancel} , default:none
    super.onSecondaryTapCancel,

    /// optionalParameters: {void Function(TapDownDetails)? onTertiaryTapDown} , default:none
    super.onTertiaryTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTertiaryTapUp} , default:none
    super.onTertiaryTapUp,

    /// optionalParameters: {void Function()? onTertiaryTapCancel} , default:none
    super.onTertiaryTapCancel,

    /// optionalParameters: {void Function(TapDownDetails)? onDoubleTapDown} , default:none
    super.onDoubleTapDown,

    /// optionalParameters: {void Function()? onDoubleTap} , default:none
    super.onDoubleTap,

    /// optionalParameters: {void Function()? onDoubleTapCancel} , default:none
    super.onDoubleTapCancel,

    /// optionalParameters: {void Function(LongPressDownDetails)? onLongPressDown} , default:none
    super.onLongPressDown,

    /// optionalParameters: {void Function()? onLongPressCancel} , default:none
    super.onLongPressCancel,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    super.onLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onLongPressStart} , default:none
    super.onLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate} , default:none
    super.onLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onLongPressUp} , default:none
    super.onLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onLongPressEnd} , default:none
    super.onLongPressEnd,

    /// optionalParameters: {void Function(LongPressDownDetails)? onSecondaryLongPressDown} , default:none
    super.onSecondaryLongPressDown,

    /// optionalParameters: {void Function()? onSecondaryLongPressCancel} , default:none
    super.onSecondaryLongPressCancel,

    /// optionalParameters: {void Function()? onSecondaryLongPress} , default:none
    super.onSecondaryLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onSecondaryLongPressStart} , default:none
    super.onSecondaryLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate} , default:none
    super.onSecondaryLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onSecondaryLongPressUp} , default:none
    super.onSecondaryLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onSecondaryLongPressEnd} , default:none
    super.onSecondaryLongPressEnd,

    /// optionalParameters: {void Function(LongPressDownDetails)? onTertiaryLongPressDown} , default:none
    super.onTertiaryLongPressDown,

    /// optionalParameters: {void Function()? onTertiaryLongPressCancel} , default:none
    super.onTertiaryLongPressCancel,

    /// optionalParameters: {void Function()? onTertiaryLongPress} , default:none
    super.onTertiaryLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onTertiaryLongPressStart} , default:none
    super.onTertiaryLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate} , default:none
    super.onTertiaryLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onTertiaryLongPressUp} , default:none
    super.onTertiaryLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onTertiaryLongPressEnd} , default:none
    super.onTertiaryLongPressEnd,

    /// optionalParameters: {void Function(DragDownDetails)? onVerticalDragDown} , default:none
    super.onVerticalDragDown,

    /// optionalParameters: {void Function(DragStartDetails)? onVerticalDragStart} , default:none
    super.onVerticalDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onVerticalDragUpdate} , default:none
    super.onVerticalDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onVerticalDragEnd} , default:none
    super.onVerticalDragEnd,

    /// optionalParameters: {void Function()? onVerticalDragCancel} , default:none
    super.onVerticalDragCancel,

    /// optionalParameters: {void Function(DragDownDetails)? onHorizontalDragDown} , default:none
    super.onHorizontalDragDown,

    /// optionalParameters: {void Function(DragStartDetails)? onHorizontalDragStart} , default:none
    super.onHorizontalDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onHorizontalDragUpdate} , default:none
    super.onHorizontalDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onHorizontalDragEnd} , default:none
    super.onHorizontalDragEnd,

    /// optionalParameters: {void Function()? onHorizontalDragCancel} , default:none
    super.onHorizontalDragCancel,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , default:none
    super.onForcePressStart,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressPeak} , default:none
    super.onForcePressPeak,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressUpdate} , default:none
    super.onForcePressUpdate,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , default:none
    super.onForcePressEnd,

    /// optionalParameters: {void Function(DragDownDetails)? onPanDown} , default:none
    super.onPanDown,

    /// optionalParameters: {void Function(DragStartDetails)? onPanStart} , default:none
    super.onPanStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onPanUpdate} , default:none
    super.onPanUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onPanEnd} , default:none
    super.onPanEnd,

    /// optionalParameters: {void Function()? onPanCancel} , default:none
    super.onPanCancel,

    /// optionalParameters: {void Function(ScaleStartDetails)? onScaleStart} , default:none
    super.onScaleStart,

    /// optionalParameters: {void Function(ScaleUpdateDetails)? onScaleUpdate} , default:none
    super.onScaleUpdate,

    /// optionalParameters: {void Function(ScaleEndDetails)? onScaleEnd} , default:none
    super.onScaleEnd,

    /// optionalParameters: {HitTestBehavior? behavior} , default:none
    super.behavior,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {bool trackpadScrollCausesScale = false} , default:processed=BooleanLiteralImpl
    super.trackpadScrollCausesScale,

    /// optionalParameters: {Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor} , default:unprocessed=SimpleIdentifierImpl
    super.trackpadScrollToScaleFactor,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , default:none
    super.supportedDevices,
  })  : mateParams = {
          'key': _i3.BuilderArg<_i4.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i3.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'onTapDown': _i3.BuilderArg<_i6.GestureTapDownCallback?>(
            name: 'onTapDown',
            init: onTapDown,
            isNamed: true,
          ),
          'onTapUp': _i3.BuilderArg<_i6.GestureTapUpCallback?>(
            name: 'onTapUp',
            init: onTapUp,
            isNamed: true,
          ),
          'onTap': _i3.BuilderArg<_i6.GestureTapCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'onTapCancel': _i3.BuilderArg<_i6.GestureTapCancelCallback?>(
            name: 'onTapCancel',
            init: onTapCancel,
            isNamed: true,
          ),
          'onSecondaryTap': _i3.BuilderArg<_i6.GestureTapCallback?>(
            name: 'onSecondaryTap',
            init: onSecondaryTap,
            isNamed: true,
          ),
          'onSecondaryTapDown': _i3.BuilderArg<_i6.GestureTapDownCallback?>(
            name: 'onSecondaryTapDown',
            init: onSecondaryTapDown,
            isNamed: true,
          ),
          'onSecondaryTapUp': _i3.BuilderArg<_i6.GestureTapUpCallback?>(
            name: 'onSecondaryTapUp',
            init: onSecondaryTapUp,
            isNamed: true,
          ),
          'onSecondaryTapCancel': _i3.BuilderArg<_i6.GestureTapCancelCallback?>(
            name: 'onSecondaryTapCancel',
            init: onSecondaryTapCancel,
            isNamed: true,
          ),
          'onTertiaryTapDown': _i3.BuilderArg<_i6.GestureTapDownCallback?>(
            name: 'onTertiaryTapDown',
            init: onTertiaryTapDown,
            isNamed: true,
          ),
          'onTertiaryTapUp': _i3.BuilderArg<_i6.GestureTapUpCallback?>(
            name: 'onTertiaryTapUp',
            init: onTertiaryTapUp,
            isNamed: true,
          ),
          'onTertiaryTapCancel': _i3.BuilderArg<_i6.GestureTapCancelCallback?>(
            name: 'onTertiaryTapCancel',
            init: onTertiaryTapCancel,
            isNamed: true,
          ),
          'onDoubleTapDown': _i3.BuilderArg<_i6.GestureTapDownCallback?>(
            name: 'onDoubleTapDown',
            init: onDoubleTapDown,
            isNamed: true,
          ),
          'onDoubleTap': _i3.BuilderArg<_i6.GestureTapCallback?>(
            name: 'onDoubleTap',
            init: onDoubleTap,
            isNamed: true,
          ),
          'onDoubleTapCancel': _i3.BuilderArg<_i6.GestureTapCancelCallback?>(
            name: 'onDoubleTapCancel',
            init: onDoubleTapCancel,
            isNamed: true,
          ),
          'onLongPressDown': _i3.BuilderArg<_i7.GestureLongPressDownCallback?>(
            name: 'onLongPressDown',
            init: onLongPressDown,
            isNamed: true,
          ),
          'onLongPressCancel': _i3.BuilderArg<_i7.GestureLongPressCancelCallback?>(
            name: 'onLongPressCancel',
            init: onLongPressCancel,
            isNamed: true,
          ),
          'onLongPress': _i3.BuilderArg<_i7.GestureLongPressCallback?>(
            name: 'onLongPress',
            init: onLongPress,
            isNamed: true,
          ),
          'onLongPressStart': _i3.BuilderArg<_i7.GestureLongPressStartCallback?>(
            name: 'onLongPressStart',
            init: onLongPressStart,
            isNamed: true,
          ),
          'onLongPressMoveUpdate': _i3.BuilderArg<_i7.GestureLongPressMoveUpdateCallback?>(
            name: 'onLongPressMoveUpdate',
            init: onLongPressMoveUpdate,
            isNamed: true,
          ),
          'onLongPressUp': _i3.BuilderArg<_i7.GestureLongPressUpCallback?>(
            name: 'onLongPressUp',
            init: onLongPressUp,
            isNamed: true,
          ),
          'onLongPressEnd': _i3.BuilderArg<_i7.GestureLongPressEndCallback?>(
            name: 'onLongPressEnd',
            init: onLongPressEnd,
            isNamed: true,
          ),
          'onSecondaryLongPressDown': _i3.BuilderArg<_i7.GestureLongPressDownCallback?>(
            name: 'onSecondaryLongPressDown',
            init: onSecondaryLongPressDown,
            isNamed: true,
          ),
          'onSecondaryLongPressCancel': _i3.BuilderArg<_i7.GestureLongPressCancelCallback?>(
            name: 'onSecondaryLongPressCancel',
            init: onSecondaryLongPressCancel,
            isNamed: true,
          ),
          'onSecondaryLongPress': _i3.BuilderArg<_i7.GestureLongPressCallback?>(
            name: 'onSecondaryLongPress',
            init: onSecondaryLongPress,
            isNamed: true,
          ),
          'onSecondaryLongPressStart': _i3.BuilderArg<_i7.GestureLongPressStartCallback?>(
            name: 'onSecondaryLongPressStart',
            init: onSecondaryLongPressStart,
            isNamed: true,
          ),
          'onSecondaryLongPressMoveUpdate': _i3.BuilderArg<_i7.GestureLongPressMoveUpdateCallback?>(
            name: 'onSecondaryLongPressMoveUpdate',
            init: onSecondaryLongPressMoveUpdate,
            isNamed: true,
          ),
          'onSecondaryLongPressUp': _i3.BuilderArg<_i7.GestureLongPressUpCallback?>(
            name: 'onSecondaryLongPressUp',
            init: onSecondaryLongPressUp,
            isNamed: true,
          ),
          'onSecondaryLongPressEnd': _i3.BuilderArg<_i7.GestureLongPressEndCallback?>(
            name: 'onSecondaryLongPressEnd',
            init: onSecondaryLongPressEnd,
            isNamed: true,
          ),
          'onTertiaryLongPressDown': _i3.BuilderArg<_i7.GestureLongPressDownCallback?>(
            name: 'onTertiaryLongPressDown',
            init: onTertiaryLongPressDown,
            isNamed: true,
          ),
          'onTertiaryLongPressCancel': _i3.BuilderArg<_i7.GestureLongPressCancelCallback?>(
            name: 'onTertiaryLongPressCancel',
            init: onTertiaryLongPressCancel,
            isNamed: true,
          ),
          'onTertiaryLongPress': _i3.BuilderArg<_i7.GestureLongPressCallback?>(
            name: 'onTertiaryLongPress',
            init: onTertiaryLongPress,
            isNamed: true,
          ),
          'onTertiaryLongPressStart': _i3.BuilderArg<_i7.GestureLongPressStartCallback?>(
            name: 'onTertiaryLongPressStart',
            init: onTertiaryLongPressStart,
            isNamed: true,
          ),
          'onTertiaryLongPressMoveUpdate': _i3.BuilderArg<_i7.GestureLongPressMoveUpdateCallback?>(
            name: 'onTertiaryLongPressMoveUpdate',
            init: onTertiaryLongPressMoveUpdate,
            isNamed: true,
          ),
          'onTertiaryLongPressUp': _i3.BuilderArg<_i7.GestureLongPressUpCallback?>(
            name: 'onTertiaryLongPressUp',
            init: onTertiaryLongPressUp,
            isNamed: true,
          ),
          'onTertiaryLongPressEnd': _i3.BuilderArg<_i7.GestureLongPressEndCallback?>(
            name: 'onTertiaryLongPressEnd',
            init: onTertiaryLongPressEnd,
            isNamed: true,
          ),
          'onVerticalDragDown': _i3.BuilderArg<_i8.GestureDragDownCallback?>(
            name: 'onVerticalDragDown',
            init: onVerticalDragDown,
            isNamed: true,
          ),
          'onVerticalDragStart': _i3.BuilderArg<_i8.GestureDragStartCallback?>(
            name: 'onVerticalDragStart',
            init: onVerticalDragStart,
            isNamed: true,
          ),
          'onVerticalDragUpdate': _i3.BuilderArg<_i8.GestureDragUpdateCallback?>(
            name: 'onVerticalDragUpdate',
            init: onVerticalDragUpdate,
            isNamed: true,
          ),
          'onVerticalDragEnd': _i3.BuilderArg<_i9.GestureDragEndCallback?>(
            name: 'onVerticalDragEnd',
            init: onVerticalDragEnd,
            isNamed: true,
          ),
          'onVerticalDragCancel': _i3.BuilderArg<_i9.GestureDragCancelCallback?>(
            name: 'onVerticalDragCancel',
            init: onVerticalDragCancel,
            isNamed: true,
          ),
          'onHorizontalDragDown': _i3.BuilderArg<_i8.GestureDragDownCallback?>(
            name: 'onHorizontalDragDown',
            init: onHorizontalDragDown,
            isNamed: true,
          ),
          'onHorizontalDragStart': _i3.BuilderArg<_i8.GestureDragStartCallback?>(
            name: 'onHorizontalDragStart',
            init: onHorizontalDragStart,
            isNamed: true,
          ),
          'onHorizontalDragUpdate': _i3.BuilderArg<_i8.GestureDragUpdateCallback?>(
            name: 'onHorizontalDragUpdate',
            init: onHorizontalDragUpdate,
            isNamed: true,
          ),
          'onHorizontalDragEnd': _i3.BuilderArg<_i9.GestureDragEndCallback?>(
            name: 'onHorizontalDragEnd',
            init: onHorizontalDragEnd,
            isNamed: true,
          ),
          'onHorizontalDragCancel': _i3.BuilderArg<_i9.GestureDragCancelCallback?>(
            name: 'onHorizontalDragCancel',
            init: onHorizontalDragCancel,
            isNamed: true,
          ),
          'onForcePressStart': _i3.BuilderArg<_i10.GestureForcePressStartCallback?>(
            name: 'onForcePressStart',
            init: onForcePressStart,
            isNamed: true,
          ),
          'onForcePressPeak': _i3.BuilderArg<_i10.GestureForcePressPeakCallback?>(
            name: 'onForcePressPeak',
            init: onForcePressPeak,
            isNamed: true,
          ),
          'onForcePressUpdate': _i3.BuilderArg<_i10.GestureForcePressUpdateCallback?>(
            name: 'onForcePressUpdate',
            init: onForcePressUpdate,
            isNamed: true,
          ),
          'onForcePressEnd': _i3.BuilderArg<_i10.GestureForcePressEndCallback?>(
            name: 'onForcePressEnd',
            init: onForcePressEnd,
            isNamed: true,
          ),
          'onPanDown': _i3.BuilderArg<_i8.GestureDragDownCallback?>(
            name: 'onPanDown',
            init: onPanDown,
            isNamed: true,
          ),
          'onPanStart': _i3.BuilderArg<_i8.GestureDragStartCallback?>(
            name: 'onPanStart',
            init: onPanStart,
            isNamed: true,
          ),
          'onPanUpdate': _i3.BuilderArg<_i8.GestureDragUpdateCallback?>(
            name: 'onPanUpdate',
            init: onPanUpdate,
            isNamed: true,
          ),
          'onPanEnd': _i3.BuilderArg<_i9.GestureDragEndCallback?>(
            name: 'onPanEnd',
            init: onPanEnd,
            isNamed: true,
          ),
          'onPanCancel': _i3.BuilderArg<_i9.GestureDragCancelCallback?>(
            name: 'onPanCancel',
            init: onPanCancel,
            isNamed: true,
          ),
          'onScaleStart': _i3.BuilderArg<_i11.GestureScaleStartCallback?>(
            name: 'onScaleStart',
            init: onScaleStart,
            isNamed: true,
          ),
          'onScaleUpdate': _i3.BuilderArg<_i11.GestureScaleUpdateCallback?>(
            name: 'onScaleUpdate',
            init: onScaleUpdate,
            isNamed: true,
          ),
          'onScaleEnd': _i3.BuilderArg<_i11.GestureScaleEndCallback?>(
            name: 'onScaleEnd',
            init: onScaleEnd,
            isNamed: true,
          ),
          'behavior': _i3.BuilderArg<_i12.HitTestBehavior?>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
          ),
          'excludeFromSemantics': _i3.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'dragStartBehavior': _i3.BuilderArg<_i1.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i13.DragStartBehavior.start,
          ),
          'trackpadScrollCausesScale': _i3.BuilderArg<bool>(
            name: 'trackpadScrollCausesScale',
            init: trackpadScrollCausesScale,
            isNamed: true,
            defaultValue: false,
          ),
          'trackpadScrollToScaleFactor': _i3.BuilderArg<_i14.Offset>(
            name: 'trackpadScrollToScaleFactor',
            init: trackpadScrollToScaleFactor,
            isNamed: true,
          ),
          'supportedDevices': _i3.BuilderArg<Set<_i14.PointerDeviceKind>?>(
            name: 'supportedDevices',
            init: supportedDevices,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'GestureDetector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => GestureDetector$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTapDown: p.get('onTapDown').build(),
          onTapUp: p.get('onTapUp').build(),
          onTap: p.get('onTap').build(),
          onTapCancel: p.get('onTapCancel').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSecondaryTapUp: p.get('onSecondaryTapUp').build(),
          onSecondaryTapCancel: p.get('onSecondaryTapCancel').build(),
          onTertiaryTapDown: p.get('onTertiaryTapDown').build(),
          onTertiaryTapUp: p.get('onTertiaryTapUp').build(),
          onTertiaryTapCancel: p.get('onTertiaryTapCancel').build(),
          onDoubleTapDown: p.get('onDoubleTapDown').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onDoubleTapCancel: p.get('onDoubleTapCancel').build(),
          onLongPressDown: p.get('onLongPressDown').build(),
          onLongPressCancel: p.get('onLongPressCancel').build(),
          onLongPress: p.get('onLongPress').build(),
          onLongPressStart: p.get('onLongPressStart').build(),
          onLongPressMoveUpdate: p.get('onLongPressMoveUpdate').build(),
          onLongPressUp: p.get('onLongPressUp').build(),
          onLongPressEnd: p.get('onLongPressEnd').build(),
          onSecondaryLongPressDown: p.get('onSecondaryLongPressDown').build(),
          onSecondaryLongPressCancel: p.get('onSecondaryLongPressCancel').build(),
          onSecondaryLongPress: p.get('onSecondaryLongPress').build(),
          onSecondaryLongPressStart: p.get('onSecondaryLongPressStart').build(),
          onSecondaryLongPressMoveUpdate: p.get('onSecondaryLongPressMoveUpdate').build(),
          onSecondaryLongPressUp: p.get('onSecondaryLongPressUp').build(),
          onSecondaryLongPressEnd: p.get('onSecondaryLongPressEnd').build(),
          onTertiaryLongPressDown: p.get('onTertiaryLongPressDown').build(),
          onTertiaryLongPressCancel: p.get('onTertiaryLongPressCancel').build(),
          onTertiaryLongPress: p.get('onTertiaryLongPress').build(),
          onTertiaryLongPressStart: p.get('onTertiaryLongPressStart').build(),
          onTertiaryLongPressMoveUpdate: p.get('onTertiaryLongPressMoveUpdate').build(),
          onTertiaryLongPressUp: p.get('onTertiaryLongPressUp').build(),
          onTertiaryLongPressEnd: p.get('onTertiaryLongPressEnd').build(),
          onVerticalDragDown: p.get('onVerticalDragDown').build(),
          onVerticalDragStart: p.get('onVerticalDragStart').build(),
          onVerticalDragUpdate: p.get('onVerticalDragUpdate').build(),
          onVerticalDragEnd: p.get('onVerticalDragEnd').build(),
          onVerticalDragCancel: p.get('onVerticalDragCancel').build(),
          onHorizontalDragDown: p.get('onHorizontalDragDown').build(),
          onHorizontalDragStart: p.get('onHorizontalDragStart').build(),
          onHorizontalDragUpdate: p.get('onHorizontalDragUpdate').build(),
          onHorizontalDragEnd: p.get('onHorizontalDragEnd').build(),
          onHorizontalDragCancel: p.get('onHorizontalDragCancel').build(),
          onForcePressStart: p.get('onForcePressStart').build(),
          onForcePressPeak: p.get('onForcePressPeak').build(),
          onForcePressUpdate: p.get('onForcePressUpdate').build(),
          onForcePressEnd: p.get('onForcePressEnd').build(),
          onPanDown: p.get('onPanDown').build(),
          onPanStart: p.get('onPanStart').build(),
          onPanUpdate: p.get('onPanUpdate').build(),
          onPanEnd: p.get('onPanEnd').build(),
          onPanCancel: p.get('onPanCancel').build(),
          onScaleStart: p.get('onScaleStart').build(),
          onScaleUpdate: p.get('onScaleUpdate').build(),
          onScaleEnd: p.get('onScaleEnd').build(),
          behavior: p.get('behavior').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          trackpadScrollCausesScale: p.get('trackpadScrollCausesScale').build(),
          trackpadScrollToScaleFactor: p.get('trackpadScrollToScaleFactor').build(),
          supportedDevices: p.get('supportedDevices').build(),
        );
  }

  @override
  final Map<String, _i3.BuilderArg> mateParams;
}

/// class RawGestureDetector extends StatefulWidget
class RawGestureDetector$Mate extends _i2.RawGestureDetector with _i3.Mate {
  /// RawGestureDetector RawGestureDetector({Key? key, Widget? child, Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}, HitTestBehavior? behavior, bool excludeFromSemantics = false, SemanticsGestureDelegate? semantics})
  RawGestureDetector$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}} , default:unprocessed=SetOrMapLiteralImpl
    super.gestures,

    /// optionalParameters: {HitTestBehavior? behavior} , default:none
    super.behavior,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {SemanticsGestureDelegate? semantics} , default:none
    super.semantics,
  })  : mateParams = {
          'key': _i3.BuilderArg<_i4.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i3.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'gestures': _i3.BuilderArg<Map<Type, _i2.GestureRecognizerFactory<_i1.GestureRecognizer>>>(
            name: 'gestures',
            init: gestures,
            isNamed: true,
          ),
          'behavior': _i3.BuilderArg<_i12.HitTestBehavior?>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
          ),
          'excludeFromSemantics': _i3.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'semantics': _i3.BuilderArg<_i2.SemanticsGestureDelegate?>(
            name: 'semantics',
            init: semantics,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RawGestureDetector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RawGestureDetector$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          gestures: p.get('gestures').build(),
          behavior: p.get('behavior').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          semantics: p.get('semantics').build(),
        );
  }

  @override
  final Map<String, _i3.BuilderArg> mateParams;
}
