// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/gesture_detector.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/gestures/drag_details.dart';
import 'package:flutter/src/gestures/monodrag.dart';
import 'package:flutter/src/gestures/force_press.dart';
import 'package:flutter/src/gestures/scale.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'dart:core';
import 'package:flutter/gestures.dart';
import 'dart:ui';

/// class GestureRecognizerFactoryWithHandlers<T extends GestureRecognizer> extends GestureRecognizerFactory<T>
class GestureRecognizerFactoryWithHandlers$Mate<T extends GestureRecognizer>
    extends GestureRecognizerFactoryWithHandlers<T> with Mate {
  /// GestureRecognizerFactoryWithHandlers<T> GestureRecognizerFactoryWithHandlers(T Function() _constructor, void Function(T) _initializer)
  GestureRecognizerFactoryWithHandlers$Mate(
    /// requiredParameters: T Function() _constructor
    GestureRecognizerFactoryConstructor<T> _constructor,

    /// requiredParameters: void Function(T) _initializer
    GestureRecognizerFactoryInitializer<T> _initializer,
  ) : super(
          _constructor,
          _initializer,
        ) {
    mateCreateName = 'GestureRecognizerFactoryWithHandlers';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => GestureRecognizerFactoryWithHandlers$Mate<T>(
          p.get('_constructor').value,
          p.get('_initializer').value,
        );
    mateUse('_constructor', _constructor);
    mateUse('_initializer', _initializer);
  }
}

/// class GestureDetector extends StatelessWidget
class GestureDetector$Mate extends GestureDetector with Mate {
  /// GestureDetector GestureDetector({Key? key, Widget? child, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTap, void Function()? onTapCancel, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapUpDetails)? onSecondaryTapUp, void Function()? onSecondaryTapCancel, void Function(TapDownDetails)? onTertiaryTapDown, void Function(TapUpDetails)? onTertiaryTapUp, void Function()? onTertiaryTapCancel, void Function(TapDownDetails)? onDoubleTapDown, void Function()? onDoubleTap, void Function()? onDoubleTapCancel, void Function(LongPressDownDetails)? onLongPressDown, void Function()? onLongPressCancel, void Function()? onLongPress, void Function(LongPressStartDetails)? onLongPressStart, void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate, void Function()? onLongPressUp, void Function(LongPressEndDetails)? onLongPressEnd, void Function(LongPressDownDetails)? onSecondaryLongPressDown, void Function()? onSecondaryLongPressCancel, void Function()? onSecondaryLongPress, void Function(LongPressStartDetails)? onSecondaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate, void Function()? onSecondaryLongPressUp, void Function(LongPressEndDetails)? onSecondaryLongPressEnd, void Function(LongPressDownDetails)? onTertiaryLongPressDown, void Function()? onTertiaryLongPressCancel, void Function()? onTertiaryLongPress, void Function(LongPressStartDetails)? onTertiaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate, void Function()? onTertiaryLongPressUp, void Function(LongPressEndDetails)? onTertiaryLongPressEnd, void Function(DragDownDetails)? onVerticalDragDown, void Function(DragStartDetails)? onVerticalDragStart, void Function(DragUpdateDetails)? onVerticalDragUpdate, void Function(DragEndDetails)? onVerticalDragEnd, void Function()? onVerticalDragCancel, void Function(DragDownDetails)? onHorizontalDragDown, void Function(DragStartDetails)? onHorizontalDragStart, void Function(DragUpdateDetails)? onHorizontalDragUpdate, void Function(DragEndDetails)? onHorizontalDragEnd, void Function()? onHorizontalDragCancel, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressPeak, void Function(ForcePressDetails)? onForcePressUpdate, void Function(ForcePressDetails)? onForcePressEnd, void Function(DragDownDetails)? onPanDown, void Function(DragStartDetails)? onPanStart, void Function(DragUpdateDetails)? onPanUpdate, void Function(DragEndDetails)? onPanEnd, void Function()? onPanCancel, void Function(ScaleStartDetails)? onScaleStart, void Function(ScaleUpdateDetails)? onScaleUpdate, void Function(ScaleEndDetails)? onScaleEnd, HitTestBehavior? behavior, bool excludeFromSemantics = false, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool trackpadScrollCausesScale = false, Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor, Set<PointerDeviceKind>? supportedDevices})
  GestureDetector$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , defaultValue:none
    GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , defaultValue:none
    GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTap} , defaultValue:none
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onTapCancel} , defaultValue:none
    GestureTapCancelCallback? onTapCancel,

    /// optionalParameters: {void Function()? onSecondaryTap} , defaultValue:none
    GestureTapCallback? onSecondaryTap,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , defaultValue:none
    GestureTapDownCallback? onSecondaryTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onSecondaryTapUp} , defaultValue:none
    GestureTapUpCallback? onSecondaryTapUp,

    /// optionalParameters: {void Function()? onSecondaryTapCancel} , defaultValue:none
    GestureTapCancelCallback? onSecondaryTapCancel,

    /// optionalParameters: {void Function(TapDownDetails)? onTertiaryTapDown} , defaultValue:none
    GestureTapDownCallback? onTertiaryTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTertiaryTapUp} , defaultValue:none
    GestureTapUpCallback? onTertiaryTapUp,

    /// optionalParameters: {void Function()? onTertiaryTapCancel} , defaultValue:none
    GestureTapCancelCallback? onTertiaryTapCancel,

    /// optionalParameters: {void Function(TapDownDetails)? onDoubleTapDown} , defaultValue:none
    GestureTapDownCallback? onDoubleTapDown,

    /// optionalParameters: {void Function()? onDoubleTap} , defaultValue:none
    GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onDoubleTapCancel} , defaultValue:none
    GestureTapCancelCallback? onDoubleTapCancel,

    /// optionalParameters: {void Function(LongPressDownDetails)? onLongPressDown} , defaultValue:none
    GestureLongPressDownCallback? onLongPressDown,

    /// optionalParameters: {void Function()? onLongPressCancel} , defaultValue:none
    GestureLongPressCancelCallback? onLongPressCancel,

    /// optionalParameters: {void Function()? onLongPress} , defaultValue:none
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onLongPressStart} , defaultValue:none
    GestureLongPressStartCallback? onLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate} , defaultValue:none
    GestureLongPressMoveUpdateCallback? onLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onLongPressUp} , defaultValue:none
    GestureLongPressUpCallback? onLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onLongPressEnd} , defaultValue:none
    GestureLongPressEndCallback? onLongPressEnd,

    /// optionalParameters: {void Function(LongPressDownDetails)? onSecondaryLongPressDown} , defaultValue:none
    GestureLongPressDownCallback? onSecondaryLongPressDown,

    /// optionalParameters: {void Function()? onSecondaryLongPressCancel} , defaultValue:none
    GestureLongPressCancelCallback? onSecondaryLongPressCancel,

    /// optionalParameters: {void Function()? onSecondaryLongPress} , defaultValue:none
    GestureLongPressCallback? onSecondaryLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onSecondaryLongPressStart} , defaultValue:none
    GestureLongPressStartCallback? onSecondaryLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate} , defaultValue:none
    GestureLongPressMoveUpdateCallback? onSecondaryLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onSecondaryLongPressUp} , defaultValue:none
    GestureLongPressUpCallback? onSecondaryLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onSecondaryLongPressEnd} , defaultValue:none
    GestureLongPressEndCallback? onSecondaryLongPressEnd,

    /// optionalParameters: {void Function(LongPressDownDetails)? onTertiaryLongPressDown} , defaultValue:none
    GestureLongPressDownCallback? onTertiaryLongPressDown,

    /// optionalParameters: {void Function()? onTertiaryLongPressCancel} , defaultValue:none
    GestureLongPressCancelCallback? onTertiaryLongPressCancel,

    /// optionalParameters: {void Function()? onTertiaryLongPress} , defaultValue:none
    GestureLongPressCallback? onTertiaryLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onTertiaryLongPressStart} , defaultValue:none
    GestureLongPressStartCallback? onTertiaryLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate} , defaultValue:none
    GestureLongPressMoveUpdateCallback? onTertiaryLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onTertiaryLongPressUp} , defaultValue:none
    GestureLongPressUpCallback? onTertiaryLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onTertiaryLongPressEnd} , defaultValue:none
    GestureLongPressEndCallback? onTertiaryLongPressEnd,

    /// optionalParameters: {void Function(DragDownDetails)? onVerticalDragDown} , defaultValue:none
    GestureDragDownCallback? onVerticalDragDown,

    /// optionalParameters: {void Function(DragStartDetails)? onVerticalDragStart} , defaultValue:none
    GestureDragStartCallback? onVerticalDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onVerticalDragUpdate} , defaultValue:none
    GestureDragUpdateCallback? onVerticalDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onVerticalDragEnd} , defaultValue:none
    GestureDragEndCallback? onVerticalDragEnd,

    /// optionalParameters: {void Function()? onVerticalDragCancel} , defaultValue:none
    GestureDragCancelCallback? onVerticalDragCancel,

    /// optionalParameters: {void Function(DragDownDetails)? onHorizontalDragDown} , defaultValue:none
    GestureDragDownCallback? onHorizontalDragDown,

    /// optionalParameters: {void Function(DragStartDetails)? onHorizontalDragStart} , defaultValue:none
    GestureDragStartCallback? onHorizontalDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onHorizontalDragUpdate} , defaultValue:none
    GestureDragUpdateCallback? onHorizontalDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onHorizontalDragEnd} , defaultValue:none
    GestureDragEndCallback? onHorizontalDragEnd,

    /// optionalParameters: {void Function()? onHorizontalDragCancel} , defaultValue:none
    GestureDragCancelCallback? onHorizontalDragCancel,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , defaultValue:none
    GestureForcePressStartCallback? onForcePressStart,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressPeak} , defaultValue:none
    GestureForcePressPeakCallback? onForcePressPeak,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressUpdate} , defaultValue:none
    GestureForcePressUpdateCallback? onForcePressUpdate,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , defaultValue:none
    GestureForcePressEndCallback? onForcePressEnd,

    /// optionalParameters: {void Function(DragDownDetails)? onPanDown} , defaultValue:none
    GestureDragDownCallback? onPanDown,

    /// optionalParameters: {void Function(DragStartDetails)? onPanStart} , defaultValue:none
    GestureDragStartCallback? onPanStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onPanUpdate} , defaultValue:none
    GestureDragUpdateCallback? onPanUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onPanEnd} , defaultValue:none
    GestureDragEndCallback? onPanEnd,

    /// optionalParameters: {void Function()? onPanCancel} , defaultValue:none
    GestureDragCancelCallback? onPanCancel,

    /// optionalParameters: {void Function(ScaleStartDetails)? onScaleStart} , defaultValue:none
    GestureScaleStartCallback? onScaleStart,

    /// optionalParameters: {void Function(ScaleUpdateDetails)? onScaleUpdate} , defaultValue:none
    GestureScaleUpdateCallback? onScaleUpdate,

    /// optionalParameters: {void Function(ScaleEndDetails)? onScaleEnd} , defaultValue:none
    GestureScaleEndCallback? onScaleEnd,

    /// optionalParameters: {HitTestBehavior? behavior} , defaultValue:none
    HitTestBehavior? behavior,

    /// optionalParameters: {bool excludeFromSemantics = false} , defaultValue:Literal
    bool excludeFromSemantics = false,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {bool trackpadScrollCausesScale = false} , defaultValue:Literal
    bool trackpadScrollCausesScale = false,

    /// optionalParameters: {Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor} , defaultValue:unprocessed
    required Offset trackpadScrollToScaleFactor,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,
  }) : super(
          key: key,
          child: child,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTap: onTap,
          onTapCancel: onTapCancel,
          onSecondaryTap: onSecondaryTap,
          onSecondaryTapDown: onSecondaryTapDown,
          onSecondaryTapUp: onSecondaryTapUp,
          onSecondaryTapCancel: onSecondaryTapCancel,
          onTertiaryTapDown: onTertiaryTapDown,
          onTertiaryTapUp: onTertiaryTapUp,
          onTertiaryTapCancel: onTertiaryTapCancel,
          onDoubleTapDown: onDoubleTapDown,
          onDoubleTap: onDoubleTap,
          onDoubleTapCancel: onDoubleTapCancel,
          onLongPressDown: onLongPressDown,
          onLongPressCancel: onLongPressCancel,
          onLongPress: onLongPress,
          onLongPressStart: onLongPressStart,
          onLongPressMoveUpdate: onLongPressMoveUpdate,
          onLongPressUp: onLongPressUp,
          onLongPressEnd: onLongPressEnd,
          onSecondaryLongPressDown: onSecondaryLongPressDown,
          onSecondaryLongPressCancel: onSecondaryLongPressCancel,
          onSecondaryLongPress: onSecondaryLongPress,
          onSecondaryLongPressStart: onSecondaryLongPressStart,
          onSecondaryLongPressMoveUpdate: onSecondaryLongPressMoveUpdate,
          onSecondaryLongPressUp: onSecondaryLongPressUp,
          onSecondaryLongPressEnd: onSecondaryLongPressEnd,
          onTertiaryLongPressDown: onTertiaryLongPressDown,
          onTertiaryLongPressCancel: onTertiaryLongPressCancel,
          onTertiaryLongPress: onTertiaryLongPress,
          onTertiaryLongPressStart: onTertiaryLongPressStart,
          onTertiaryLongPressMoveUpdate: onTertiaryLongPressMoveUpdate,
          onTertiaryLongPressUp: onTertiaryLongPressUp,
          onTertiaryLongPressEnd: onTertiaryLongPressEnd,
          onVerticalDragDown: onVerticalDragDown,
          onVerticalDragStart: onVerticalDragStart,
          onVerticalDragUpdate: onVerticalDragUpdate,
          onVerticalDragEnd: onVerticalDragEnd,
          onVerticalDragCancel: onVerticalDragCancel,
          onHorizontalDragDown: onHorizontalDragDown,
          onHorizontalDragStart: onHorizontalDragStart,
          onHorizontalDragUpdate: onHorizontalDragUpdate,
          onHorizontalDragEnd: onHorizontalDragEnd,
          onHorizontalDragCancel: onHorizontalDragCancel,
          onForcePressStart: onForcePressStart,
          onForcePressPeak: onForcePressPeak,
          onForcePressUpdate: onForcePressUpdate,
          onForcePressEnd: onForcePressEnd,
          onPanDown: onPanDown,
          onPanStart: onPanStart,
          onPanUpdate: onPanUpdate,
          onPanEnd: onPanEnd,
          onPanCancel: onPanCancel,
          onScaleStart: onScaleStart,
          onScaleUpdate: onScaleUpdate,
          onScaleEnd: onScaleEnd,
          behavior: behavior,
          excludeFromSemantics: excludeFromSemantics,
          dragStartBehavior: dragStartBehavior,
          trackpadScrollCausesScale: trackpadScrollCausesScale,
          trackpadScrollToScaleFactor: trackpadScrollToScaleFactor,
          supportedDevices: supportedDevices,
        ) {
    mateCreateName = 'GestureDetector';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => GestureDetector$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTapDown: p.get('onTapDown').build(),
          onTapUp: p.get('onTapUp').build(),
          onTap: p.get('onTap').build(),
          onTapCancel: p.get('onTapCancel').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSecondaryTapUp: p.get('onSecondaryTapUp').build(),
          onSecondaryTapCancel: p.get('onSecondaryTapCancel').build(),
          onTertiaryTapDown: p.get('onTertiaryTapDown').build(),
          onTertiaryTapUp: p.get('onTertiaryTapUp').build(),
          onTertiaryTapCancel: p.get('onTertiaryTapCancel').build(),
          onDoubleTapDown: p.get('onDoubleTapDown').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onDoubleTapCancel: p.get('onDoubleTapCancel').build(),
          onLongPressDown: p.get('onLongPressDown').build(),
          onLongPressCancel: p.get('onLongPressCancel').build(),
          onLongPress: p.get('onLongPress').build(),
          onLongPressStart: p.get('onLongPressStart').build(),
          onLongPressMoveUpdate: p.get('onLongPressMoveUpdate').build(),
          onLongPressUp: p.get('onLongPressUp').build(),
          onLongPressEnd: p.get('onLongPressEnd').build(),
          onSecondaryLongPressDown: p.get('onSecondaryLongPressDown').build(),
          onSecondaryLongPressCancel: p.get('onSecondaryLongPressCancel').build(),
          onSecondaryLongPress: p.get('onSecondaryLongPress').build(),
          onSecondaryLongPressStart: p.get('onSecondaryLongPressStart').build(),
          onSecondaryLongPressMoveUpdate: p.get('onSecondaryLongPressMoveUpdate').build(),
          onSecondaryLongPressUp: p.get('onSecondaryLongPressUp').build(),
          onSecondaryLongPressEnd: p.get('onSecondaryLongPressEnd').build(),
          onTertiaryLongPressDown: p.get('onTertiaryLongPressDown').build(),
          onTertiaryLongPressCancel: p.get('onTertiaryLongPressCancel').build(),
          onTertiaryLongPress: p.get('onTertiaryLongPress').build(),
          onTertiaryLongPressStart: p.get('onTertiaryLongPressStart').build(),
          onTertiaryLongPressMoveUpdate: p.get('onTertiaryLongPressMoveUpdate').build(),
          onTertiaryLongPressUp: p.get('onTertiaryLongPressUp').build(),
          onTertiaryLongPressEnd: p.get('onTertiaryLongPressEnd').build(),
          onVerticalDragDown: p.get('onVerticalDragDown').build(),
          onVerticalDragStart: p.get('onVerticalDragStart').build(),
          onVerticalDragUpdate: p.get('onVerticalDragUpdate').build(),
          onVerticalDragEnd: p.get('onVerticalDragEnd').build(),
          onVerticalDragCancel: p.get('onVerticalDragCancel').build(),
          onHorizontalDragDown: p.get('onHorizontalDragDown').build(),
          onHorizontalDragStart: p.get('onHorizontalDragStart').build(),
          onHorizontalDragUpdate: p.get('onHorizontalDragUpdate').build(),
          onHorizontalDragEnd: p.get('onHorizontalDragEnd').build(),
          onHorizontalDragCancel: p.get('onHorizontalDragCancel').build(),
          onForcePressStart: p.get('onForcePressStart').build(),
          onForcePressPeak: p.get('onForcePressPeak').build(),
          onForcePressUpdate: p.get('onForcePressUpdate').build(),
          onForcePressEnd: p.get('onForcePressEnd').build(),
          onPanDown: p.get('onPanDown').build(),
          onPanStart: p.get('onPanStart').build(),
          onPanUpdate: p.get('onPanUpdate').build(),
          onPanEnd: p.get('onPanEnd').build(),
          onPanCancel: p.get('onPanCancel').build(),
          onScaleStart: p.get('onScaleStart').build(),
          onScaleUpdate: p.get('onScaleUpdate').build(),
          onScaleEnd: p.get('onScaleEnd').build(),
          behavior: p.get('behavior').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          trackpadScrollCausesScale: p.get('trackpadScrollCausesScale').build(),
          trackpadScrollToScaleFactor: p.get('trackpadScrollToScaleFactor').build(),
          supportedDevices: p.get('supportedDevices').build(),
        );
    mateUse('key', key);
    mateUse('child', child);
    mateUse('onTapDown', onTapDown);
    mateUse('onTapUp', onTapUp);
    mateUse('onTap', onTap);
    mateUse('onTapCancel', onTapCancel);
    mateUse('onSecondaryTap', onSecondaryTap);
    mateUse('onSecondaryTapDown', onSecondaryTapDown);
    mateUse('onSecondaryTapUp', onSecondaryTapUp);
    mateUse('onSecondaryTapCancel', onSecondaryTapCancel);
    mateUse('onTertiaryTapDown', onTertiaryTapDown);
    mateUse('onTertiaryTapUp', onTertiaryTapUp);
    mateUse('onTertiaryTapCancel', onTertiaryTapCancel);
    mateUse('onDoubleTapDown', onDoubleTapDown);
    mateUse('onDoubleTap', onDoubleTap);
    mateUse('onDoubleTapCancel', onDoubleTapCancel);
    mateUse('onLongPressDown', onLongPressDown);
    mateUse('onLongPressCancel', onLongPressCancel);
    mateUse('onLongPress', onLongPress);
    mateUse('onLongPressStart', onLongPressStart);
    mateUse('onLongPressMoveUpdate', onLongPressMoveUpdate);
    mateUse('onLongPressUp', onLongPressUp);
    mateUse('onLongPressEnd', onLongPressEnd);
    mateUse('onSecondaryLongPressDown', onSecondaryLongPressDown);
    mateUse('onSecondaryLongPressCancel', onSecondaryLongPressCancel);
    mateUse('onSecondaryLongPress', onSecondaryLongPress);
    mateUse('onSecondaryLongPressStart', onSecondaryLongPressStart);
    mateUse('onSecondaryLongPressMoveUpdate', onSecondaryLongPressMoveUpdate);
    mateUse('onSecondaryLongPressUp', onSecondaryLongPressUp);
    mateUse('onSecondaryLongPressEnd', onSecondaryLongPressEnd);
    mateUse('onTertiaryLongPressDown', onTertiaryLongPressDown);
    mateUse('onTertiaryLongPressCancel', onTertiaryLongPressCancel);
    mateUse('onTertiaryLongPress', onTertiaryLongPress);
    mateUse('onTertiaryLongPressStart', onTertiaryLongPressStart);
    mateUse('onTertiaryLongPressMoveUpdate', onTertiaryLongPressMoveUpdate);
    mateUse('onTertiaryLongPressUp', onTertiaryLongPressUp);
    mateUse('onTertiaryLongPressEnd', onTertiaryLongPressEnd);
    mateUse('onVerticalDragDown', onVerticalDragDown);
    mateUse('onVerticalDragStart', onVerticalDragStart);
    mateUse('onVerticalDragUpdate', onVerticalDragUpdate);
    mateUse('onVerticalDragEnd', onVerticalDragEnd);
    mateUse('onVerticalDragCancel', onVerticalDragCancel);
    mateUse('onHorizontalDragDown', onHorizontalDragDown);
    mateUse('onHorizontalDragStart', onHorizontalDragStart);
    mateUse('onHorizontalDragUpdate', onHorizontalDragUpdate);
    mateUse('onHorizontalDragEnd', onHorizontalDragEnd);
    mateUse('onHorizontalDragCancel', onHorizontalDragCancel);
    mateUse('onForcePressStart', onForcePressStart);
    mateUse('onForcePressPeak', onForcePressPeak);
    mateUse('onForcePressUpdate', onForcePressUpdate);
    mateUse('onForcePressEnd', onForcePressEnd);
    mateUse('onPanDown', onPanDown);
    mateUse('onPanStart', onPanStart);
    mateUse('onPanUpdate', onPanUpdate);
    mateUse('onPanEnd', onPanEnd);
    mateUse('onPanCancel', onPanCancel);
    mateUse('onScaleStart', onScaleStart);
    mateUse('onScaleUpdate', onScaleUpdate);
    mateUse('onScaleEnd', onScaleEnd);
    mateUse('behavior', behavior);
    mateUse('excludeFromSemantics', excludeFromSemantics);
    mateUse('dragStartBehavior', dragStartBehavior);
    mateUse('trackpadScrollCausesScale', trackpadScrollCausesScale);
    mateUse('trackpadScrollToScaleFactor', trackpadScrollToScaleFactor);
    mateUse('supportedDevices', supportedDevices);
  }
}

/// class RawGestureDetector extends StatefulWidget
class RawGestureDetector$Mate extends RawGestureDetector with Mate {
  /// RawGestureDetector RawGestureDetector({Key? key, Widget? child, Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}, HitTestBehavior? behavior, bool excludeFromSemantics = false, SemanticsGestureDelegate? semantics})
  RawGestureDetector$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}} , defaultValue:unprocessed
    required Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures,

    /// optionalParameters: {HitTestBehavior? behavior} , defaultValue:none
    HitTestBehavior? behavior,

    /// optionalParameters: {bool excludeFromSemantics = false} , defaultValue:Literal
    bool excludeFromSemantics = false,

    /// optionalParameters: {SemanticsGestureDelegate? semantics} , defaultValue:none
    SemanticsGestureDelegate? semantics,
  }) : super(
          key: key,
          child: child,
          gestures: gestures,
          behavior: behavior,
          excludeFromSemantics: excludeFromSemantics,
          semantics: semantics,
        ) {
    mateCreateName = 'RawGestureDetector';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RawGestureDetector$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          gestures: p.get('gestures').build(),
          behavior: p.get('behavior').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          semantics: p.get('semantics').build(),
        );
    mateUse('key', key);
    mateUse('child', child);
    mateUse('gestures', gestures);
    mateUse('behavior', behavior);
    mateUse('excludeFromSemantics', excludeFromSemantics);
    mateUse('semantics', semantics);
  }
}
