// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/gestures/recognizer.dart' as _i1;
import 'package:flutter/src/widgets/gesture_detector.dart' as _i2;
import 'package:note/mate.dart' as _i3;
import 'package:flutter/src/foundation/key.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/gestures/tap.dart' as _i6;
import 'package:flutter/src/gestures/long_press.dart' as _i7;
import 'package:flutter/src/gestures/drag_details.dart' as _i8;
import 'package:flutter/src/gestures/monodrag.dart' as _i9;
import 'package:flutter/src/gestures/force_press.dart' as _i10;
import 'package:flutter/src/gestures/scale.dart' as _i11;
import 'package:flutter/src/rendering/proxy_box.dart' as _i12;
import 'package:flutter/gestures.dart' as _i13;
import 'dart:ui' as _i14;

/// class GestureRecognizerFactoryWithHandlers<T extends GestureRecognizer> extends GestureRecognizerFactory<T>
class GestureRecognizerFactoryWithHandlers$Mate<T extends _i1.GestureRecognizer>
    extends _i2.GestureRecognizerFactoryWithHandlers<T> with _i3.Mate {
  /// GestureRecognizerFactoryWithHandlers<T> GestureRecognizerFactoryWithHandlers(T Function() _constructor, void Function(T) _initializer)
  GestureRecognizerFactoryWithHandlers$Mate(
    /// requiredParameters: T Function() _constructor
    _i2.GestureRecognizerFactoryConstructor<T> _constructor,

    /// requiredParameters: void Function(T) _initializer
    _i2.GestureRecognizerFactoryInitializer<T> _initializer,
  ) : super(
          _constructor,
          _initializer,
        ) {
    mateBuilderName = 'GestureRecognizerFactoryWithHandlers';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => GestureRecognizerFactoryWithHandlers$Mate<T>(
          p.get('_constructor').value,
          p.get('_initializer').value,
        );
    mateUse(
      '_constructor',
      _constructor,
      isNamed: false,
    );
    mateUse(
      '_initializer',
      _initializer,
      isNamed: false,
    );
  }
}

/// class GestureDetector extends StatelessWidget
class GestureDetector$Mate extends _i2.GestureDetector with _i3.Mate {
  /// GestureDetector GestureDetector({Key? key, Widget? child, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTap, void Function()? onTapCancel, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapUpDetails)? onSecondaryTapUp, void Function()? onSecondaryTapCancel, void Function(TapDownDetails)? onTertiaryTapDown, void Function(TapUpDetails)? onTertiaryTapUp, void Function()? onTertiaryTapCancel, void Function(TapDownDetails)? onDoubleTapDown, void Function()? onDoubleTap, void Function()? onDoubleTapCancel, void Function(LongPressDownDetails)? onLongPressDown, void Function()? onLongPressCancel, void Function()? onLongPress, void Function(LongPressStartDetails)? onLongPressStart, void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate, void Function()? onLongPressUp, void Function(LongPressEndDetails)? onLongPressEnd, void Function(LongPressDownDetails)? onSecondaryLongPressDown, void Function()? onSecondaryLongPressCancel, void Function()? onSecondaryLongPress, void Function(LongPressStartDetails)? onSecondaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate, void Function()? onSecondaryLongPressUp, void Function(LongPressEndDetails)? onSecondaryLongPressEnd, void Function(LongPressDownDetails)? onTertiaryLongPressDown, void Function()? onTertiaryLongPressCancel, void Function()? onTertiaryLongPress, void Function(LongPressStartDetails)? onTertiaryLongPressStart, void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate, void Function()? onTertiaryLongPressUp, void Function(LongPressEndDetails)? onTertiaryLongPressEnd, void Function(DragDownDetails)? onVerticalDragDown, void Function(DragStartDetails)? onVerticalDragStart, void Function(DragUpdateDetails)? onVerticalDragUpdate, void Function(DragEndDetails)? onVerticalDragEnd, void Function()? onVerticalDragCancel, void Function(DragDownDetails)? onHorizontalDragDown, void Function(DragStartDetails)? onHorizontalDragStart, void Function(DragUpdateDetails)? onHorizontalDragUpdate, void Function(DragEndDetails)? onHorizontalDragEnd, void Function()? onHorizontalDragCancel, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressPeak, void Function(ForcePressDetails)? onForcePressUpdate, void Function(ForcePressDetails)? onForcePressEnd, void Function(DragDownDetails)? onPanDown, void Function(DragStartDetails)? onPanStart, void Function(DragUpdateDetails)? onPanUpdate, void Function(DragEndDetails)? onPanEnd, void Function()? onPanCancel, void Function(ScaleStartDetails)? onScaleStart, void Function(ScaleUpdateDetails)? onScaleUpdate, void Function(ScaleEndDetails)? onScaleEnd, HitTestBehavior? behavior, bool excludeFromSemantics = false, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool trackpadScrollCausesScale = false, Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor, Set<PointerDeviceKind>? supportedDevices})
  GestureDetector$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i4.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , default:none
    _i6.GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , default:none
    _i6.GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i6.GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onTapCancel} , default:none
    _i6.GestureTapCancelCallback? onTapCancel,

    /// optionalParameters: {void Function()? onSecondaryTap} , default:none
    _i6.GestureTapCallback? onSecondaryTap,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , default:none
    _i6.GestureTapDownCallback? onSecondaryTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onSecondaryTapUp} , default:none
    _i6.GestureTapUpCallback? onSecondaryTapUp,

    /// optionalParameters: {void Function()? onSecondaryTapCancel} , default:none
    _i6.GestureTapCancelCallback? onSecondaryTapCancel,

    /// optionalParameters: {void Function(TapDownDetails)? onTertiaryTapDown} , default:none
    _i6.GestureTapDownCallback? onTertiaryTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTertiaryTapUp} , default:none
    _i6.GestureTapUpCallback? onTertiaryTapUp,

    /// optionalParameters: {void Function()? onTertiaryTapCancel} , default:none
    _i6.GestureTapCancelCallback? onTertiaryTapCancel,

    /// optionalParameters: {void Function(TapDownDetails)? onDoubleTapDown} , default:none
    _i6.GestureTapDownCallback? onDoubleTapDown,

    /// optionalParameters: {void Function()? onDoubleTap} , default:none
    _i6.GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onDoubleTapCancel} , default:none
    _i6.GestureTapCancelCallback? onDoubleTapCancel,

    /// optionalParameters: {void Function(LongPressDownDetails)? onLongPressDown} , default:none
    _i7.GestureLongPressDownCallback? onLongPressDown,

    /// optionalParameters: {void Function()? onLongPressCancel} , default:none
    _i7.GestureLongPressCancelCallback? onLongPressCancel,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    _i7.GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onLongPressStart} , default:none
    _i7.GestureLongPressStartCallback? onLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onLongPressMoveUpdate} , default:none
    _i7.GestureLongPressMoveUpdateCallback? onLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onLongPressUp} , default:none
    _i7.GestureLongPressUpCallback? onLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onLongPressEnd} , default:none
    _i7.GestureLongPressEndCallback? onLongPressEnd,

    /// optionalParameters: {void Function(LongPressDownDetails)? onSecondaryLongPressDown} , default:none
    _i7.GestureLongPressDownCallback? onSecondaryLongPressDown,

    /// optionalParameters: {void Function()? onSecondaryLongPressCancel} , default:none
    _i7.GestureLongPressCancelCallback? onSecondaryLongPressCancel,

    /// optionalParameters: {void Function()? onSecondaryLongPress} , default:none
    _i7.GestureLongPressCallback? onSecondaryLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onSecondaryLongPressStart} , default:none
    _i7.GestureLongPressStartCallback? onSecondaryLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSecondaryLongPressMoveUpdate} , default:none
    _i7.GestureLongPressMoveUpdateCallback? onSecondaryLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onSecondaryLongPressUp} , default:none
    _i7.GestureLongPressUpCallback? onSecondaryLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onSecondaryLongPressEnd} , default:none
    _i7.GestureLongPressEndCallback? onSecondaryLongPressEnd,

    /// optionalParameters: {void Function(LongPressDownDetails)? onTertiaryLongPressDown} , default:none
    _i7.GestureLongPressDownCallback? onTertiaryLongPressDown,

    /// optionalParameters: {void Function()? onTertiaryLongPressCancel} , default:none
    _i7.GestureLongPressCancelCallback? onTertiaryLongPressCancel,

    /// optionalParameters: {void Function()? onTertiaryLongPress} , default:none
    _i7.GestureLongPressCallback? onTertiaryLongPress,

    /// optionalParameters: {void Function(LongPressStartDetails)? onTertiaryLongPressStart} , default:none
    _i7.GestureLongPressStartCallback? onTertiaryLongPressStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onTertiaryLongPressMoveUpdate} , default:none
    _i7.GestureLongPressMoveUpdateCallback? onTertiaryLongPressMoveUpdate,

    /// optionalParameters: {void Function()? onTertiaryLongPressUp} , default:none
    _i7.GestureLongPressUpCallback? onTertiaryLongPressUp,

    /// optionalParameters: {void Function(LongPressEndDetails)? onTertiaryLongPressEnd} , default:none
    _i7.GestureLongPressEndCallback? onTertiaryLongPressEnd,

    /// optionalParameters: {void Function(DragDownDetails)? onVerticalDragDown} , default:none
    _i8.GestureDragDownCallback? onVerticalDragDown,

    /// optionalParameters: {void Function(DragStartDetails)? onVerticalDragStart} , default:none
    _i8.GestureDragStartCallback? onVerticalDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onVerticalDragUpdate} , default:none
    _i8.GestureDragUpdateCallback? onVerticalDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onVerticalDragEnd} , default:none
    _i9.GestureDragEndCallback? onVerticalDragEnd,

    /// optionalParameters: {void Function()? onVerticalDragCancel} , default:none
    _i9.GestureDragCancelCallback? onVerticalDragCancel,

    /// optionalParameters: {void Function(DragDownDetails)? onHorizontalDragDown} , default:none
    _i8.GestureDragDownCallback? onHorizontalDragDown,

    /// optionalParameters: {void Function(DragStartDetails)? onHorizontalDragStart} , default:none
    _i8.GestureDragStartCallback? onHorizontalDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onHorizontalDragUpdate} , default:none
    _i8.GestureDragUpdateCallback? onHorizontalDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onHorizontalDragEnd} , default:none
    _i9.GestureDragEndCallback? onHorizontalDragEnd,

    /// optionalParameters: {void Function()? onHorizontalDragCancel} , default:none
    _i9.GestureDragCancelCallback? onHorizontalDragCancel,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , default:none
    _i10.GestureForcePressStartCallback? onForcePressStart,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressPeak} , default:none
    _i10.GestureForcePressPeakCallback? onForcePressPeak,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressUpdate} , default:none
    _i10.GestureForcePressUpdateCallback? onForcePressUpdate,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , default:none
    _i10.GestureForcePressEndCallback? onForcePressEnd,

    /// optionalParameters: {void Function(DragDownDetails)? onPanDown} , default:none
    _i8.GestureDragDownCallback? onPanDown,

    /// optionalParameters: {void Function(DragStartDetails)? onPanStart} , default:none
    _i8.GestureDragStartCallback? onPanStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onPanUpdate} , default:none
    _i8.GestureDragUpdateCallback? onPanUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onPanEnd} , default:none
    _i9.GestureDragEndCallback? onPanEnd,

    /// optionalParameters: {void Function()? onPanCancel} , default:none
    _i9.GestureDragCancelCallback? onPanCancel,

    /// optionalParameters: {void Function(ScaleStartDetails)? onScaleStart} , default:none
    _i11.GestureScaleStartCallback? onScaleStart,

    /// optionalParameters: {void Function(ScaleUpdateDetails)? onScaleUpdate} , default:none
    _i11.GestureScaleUpdateCallback? onScaleUpdate,

    /// optionalParameters: {void Function(ScaleEndDetails)? onScaleEnd} , default:none
    _i11.GestureScaleEndCallback? onScaleEnd,

    /// optionalParameters: {HitTestBehavior? behavior} , default:none
    _i12.HitTestBehavior? behavior,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i1.DragStartBehavior dragStartBehavior = _i13.DragStartBehavior.start,

    /// optionalParameters: {bool trackpadScrollCausesScale = false} , default:processed=BooleanLiteralImpl
    bool trackpadScrollCausesScale = false,

    /// optionalParameters: {Offset trackpadScrollToScaleFactor = kDefaultTrackpadScrollToScaleFactor} , default:unprocessed=SimpleIdentifierImpl
    required _i14.Offset trackpadScrollToScaleFactor,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , default:none
    Set<_i14.PointerDeviceKind>? supportedDevices,
  }) : super(
          key: key,
          child: child,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTap: onTap,
          onTapCancel: onTapCancel,
          onSecondaryTap: onSecondaryTap,
          onSecondaryTapDown: onSecondaryTapDown,
          onSecondaryTapUp: onSecondaryTapUp,
          onSecondaryTapCancel: onSecondaryTapCancel,
          onTertiaryTapDown: onTertiaryTapDown,
          onTertiaryTapUp: onTertiaryTapUp,
          onTertiaryTapCancel: onTertiaryTapCancel,
          onDoubleTapDown: onDoubleTapDown,
          onDoubleTap: onDoubleTap,
          onDoubleTapCancel: onDoubleTapCancel,
          onLongPressDown: onLongPressDown,
          onLongPressCancel: onLongPressCancel,
          onLongPress: onLongPress,
          onLongPressStart: onLongPressStart,
          onLongPressMoveUpdate: onLongPressMoveUpdate,
          onLongPressUp: onLongPressUp,
          onLongPressEnd: onLongPressEnd,
          onSecondaryLongPressDown: onSecondaryLongPressDown,
          onSecondaryLongPressCancel: onSecondaryLongPressCancel,
          onSecondaryLongPress: onSecondaryLongPress,
          onSecondaryLongPressStart: onSecondaryLongPressStart,
          onSecondaryLongPressMoveUpdate: onSecondaryLongPressMoveUpdate,
          onSecondaryLongPressUp: onSecondaryLongPressUp,
          onSecondaryLongPressEnd: onSecondaryLongPressEnd,
          onTertiaryLongPressDown: onTertiaryLongPressDown,
          onTertiaryLongPressCancel: onTertiaryLongPressCancel,
          onTertiaryLongPress: onTertiaryLongPress,
          onTertiaryLongPressStart: onTertiaryLongPressStart,
          onTertiaryLongPressMoveUpdate: onTertiaryLongPressMoveUpdate,
          onTertiaryLongPressUp: onTertiaryLongPressUp,
          onTertiaryLongPressEnd: onTertiaryLongPressEnd,
          onVerticalDragDown: onVerticalDragDown,
          onVerticalDragStart: onVerticalDragStart,
          onVerticalDragUpdate: onVerticalDragUpdate,
          onVerticalDragEnd: onVerticalDragEnd,
          onVerticalDragCancel: onVerticalDragCancel,
          onHorizontalDragDown: onHorizontalDragDown,
          onHorizontalDragStart: onHorizontalDragStart,
          onHorizontalDragUpdate: onHorizontalDragUpdate,
          onHorizontalDragEnd: onHorizontalDragEnd,
          onHorizontalDragCancel: onHorizontalDragCancel,
          onForcePressStart: onForcePressStart,
          onForcePressPeak: onForcePressPeak,
          onForcePressUpdate: onForcePressUpdate,
          onForcePressEnd: onForcePressEnd,
          onPanDown: onPanDown,
          onPanStart: onPanStart,
          onPanUpdate: onPanUpdate,
          onPanEnd: onPanEnd,
          onPanCancel: onPanCancel,
          onScaleStart: onScaleStart,
          onScaleUpdate: onScaleUpdate,
          onScaleEnd: onScaleEnd,
          behavior: behavior,
          excludeFromSemantics: excludeFromSemantics,
          dragStartBehavior: dragStartBehavior,
          trackpadScrollCausesScale: trackpadScrollCausesScale,
          trackpadScrollToScaleFactor: trackpadScrollToScaleFactor,
          supportedDevices: supportedDevices,
        ) {
    mateBuilderName = 'GestureDetector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => GestureDetector$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onTapDown: p.get('onTapDown').build(),
          onTapUp: p.get('onTapUp').build(),
          onTap: p.get('onTap').build(),
          onTapCancel: p.get('onTapCancel').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSecondaryTapUp: p.get('onSecondaryTapUp').build(),
          onSecondaryTapCancel: p.get('onSecondaryTapCancel').build(),
          onTertiaryTapDown: p.get('onTertiaryTapDown').build(),
          onTertiaryTapUp: p.get('onTertiaryTapUp').build(),
          onTertiaryTapCancel: p.get('onTertiaryTapCancel').build(),
          onDoubleTapDown: p.get('onDoubleTapDown').build(),
          onDoubleTap: p.get('onDoubleTap').build(),
          onDoubleTapCancel: p.get('onDoubleTapCancel').build(),
          onLongPressDown: p.get('onLongPressDown').build(),
          onLongPressCancel: p.get('onLongPressCancel').build(),
          onLongPress: p.get('onLongPress').build(),
          onLongPressStart: p.get('onLongPressStart').build(),
          onLongPressMoveUpdate: p.get('onLongPressMoveUpdate').build(),
          onLongPressUp: p.get('onLongPressUp').build(),
          onLongPressEnd: p.get('onLongPressEnd').build(),
          onSecondaryLongPressDown: p.get('onSecondaryLongPressDown').build(),
          onSecondaryLongPressCancel: p.get('onSecondaryLongPressCancel').build(),
          onSecondaryLongPress: p.get('onSecondaryLongPress').build(),
          onSecondaryLongPressStart: p.get('onSecondaryLongPressStart').build(),
          onSecondaryLongPressMoveUpdate: p.get('onSecondaryLongPressMoveUpdate').build(),
          onSecondaryLongPressUp: p.get('onSecondaryLongPressUp').build(),
          onSecondaryLongPressEnd: p.get('onSecondaryLongPressEnd').build(),
          onTertiaryLongPressDown: p.get('onTertiaryLongPressDown').build(),
          onTertiaryLongPressCancel: p.get('onTertiaryLongPressCancel').build(),
          onTertiaryLongPress: p.get('onTertiaryLongPress').build(),
          onTertiaryLongPressStart: p.get('onTertiaryLongPressStart').build(),
          onTertiaryLongPressMoveUpdate: p.get('onTertiaryLongPressMoveUpdate').build(),
          onTertiaryLongPressUp: p.get('onTertiaryLongPressUp').build(),
          onTertiaryLongPressEnd: p.get('onTertiaryLongPressEnd').build(),
          onVerticalDragDown: p.get('onVerticalDragDown').build(),
          onVerticalDragStart: p.get('onVerticalDragStart').build(),
          onVerticalDragUpdate: p.get('onVerticalDragUpdate').build(),
          onVerticalDragEnd: p.get('onVerticalDragEnd').build(),
          onVerticalDragCancel: p.get('onVerticalDragCancel').build(),
          onHorizontalDragDown: p.get('onHorizontalDragDown').build(),
          onHorizontalDragStart: p.get('onHorizontalDragStart').build(),
          onHorizontalDragUpdate: p.get('onHorizontalDragUpdate').build(),
          onHorizontalDragEnd: p.get('onHorizontalDragEnd').build(),
          onHorizontalDragCancel: p.get('onHorizontalDragCancel').build(),
          onForcePressStart: p.get('onForcePressStart').build(),
          onForcePressPeak: p.get('onForcePressPeak').build(),
          onForcePressUpdate: p.get('onForcePressUpdate').build(),
          onForcePressEnd: p.get('onForcePressEnd').build(),
          onPanDown: p.get('onPanDown').build(),
          onPanStart: p.get('onPanStart').build(),
          onPanUpdate: p.get('onPanUpdate').build(),
          onPanEnd: p.get('onPanEnd').build(),
          onPanCancel: p.get('onPanCancel').build(),
          onScaleStart: p.get('onScaleStart').build(),
          onScaleUpdate: p.get('onScaleUpdate').build(),
          onScaleEnd: p.get('onScaleEnd').build(),
          behavior: p.get('behavior').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          trackpadScrollCausesScale: p.get('trackpadScrollCausesScale').build(),
          trackpadScrollToScaleFactor: p.get('trackpadScrollToScaleFactor').build(),
          supportedDevices: p.get('supportedDevices').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'onTapDown',
      onTapDown,
      isNamed: true,
    );
    mateUse(
      'onTapUp',
      onTapUp,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'onTapCancel',
      onTapCancel,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTap',
      onSecondaryTap,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapDown',
      onSecondaryTapDown,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapUp',
      onSecondaryTapUp,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapCancel',
      onSecondaryTapCancel,
      isNamed: true,
    );
    mateUse(
      'onTertiaryTapDown',
      onTertiaryTapDown,
      isNamed: true,
    );
    mateUse(
      'onTertiaryTapUp',
      onTertiaryTapUp,
      isNamed: true,
    );
    mateUse(
      'onTertiaryTapCancel',
      onTertiaryTapCancel,
      isNamed: true,
    );
    mateUse(
      'onDoubleTapDown',
      onDoubleTapDown,
      isNamed: true,
    );
    mateUse(
      'onDoubleTap',
      onDoubleTap,
      isNamed: true,
    );
    mateUse(
      'onDoubleTapCancel',
      onDoubleTapCancel,
      isNamed: true,
    );
    mateUse(
      'onLongPressDown',
      onLongPressDown,
      isNamed: true,
    );
    mateUse(
      'onLongPressCancel',
      onLongPressCancel,
      isNamed: true,
    );
    mateUse(
      'onLongPress',
      onLongPress,
      isNamed: true,
    );
    mateUse(
      'onLongPressStart',
      onLongPressStart,
      isNamed: true,
    );
    mateUse(
      'onLongPressMoveUpdate',
      onLongPressMoveUpdate,
      isNamed: true,
    );
    mateUse(
      'onLongPressUp',
      onLongPressUp,
      isNamed: true,
    );
    mateUse(
      'onLongPressEnd',
      onLongPressEnd,
      isNamed: true,
    );
    mateUse(
      'onSecondaryLongPressDown',
      onSecondaryLongPressDown,
      isNamed: true,
    );
    mateUse(
      'onSecondaryLongPressCancel',
      onSecondaryLongPressCancel,
      isNamed: true,
    );
    mateUse(
      'onSecondaryLongPress',
      onSecondaryLongPress,
      isNamed: true,
    );
    mateUse(
      'onSecondaryLongPressStart',
      onSecondaryLongPressStart,
      isNamed: true,
    );
    mateUse(
      'onSecondaryLongPressMoveUpdate',
      onSecondaryLongPressMoveUpdate,
      isNamed: true,
    );
    mateUse(
      'onSecondaryLongPressUp',
      onSecondaryLongPressUp,
      isNamed: true,
    );
    mateUse(
      'onSecondaryLongPressEnd',
      onSecondaryLongPressEnd,
      isNamed: true,
    );
    mateUse(
      'onTertiaryLongPressDown',
      onTertiaryLongPressDown,
      isNamed: true,
    );
    mateUse(
      'onTertiaryLongPressCancel',
      onTertiaryLongPressCancel,
      isNamed: true,
    );
    mateUse(
      'onTertiaryLongPress',
      onTertiaryLongPress,
      isNamed: true,
    );
    mateUse(
      'onTertiaryLongPressStart',
      onTertiaryLongPressStart,
      isNamed: true,
    );
    mateUse(
      'onTertiaryLongPressMoveUpdate',
      onTertiaryLongPressMoveUpdate,
      isNamed: true,
    );
    mateUse(
      'onTertiaryLongPressUp',
      onTertiaryLongPressUp,
      isNamed: true,
    );
    mateUse(
      'onTertiaryLongPressEnd',
      onTertiaryLongPressEnd,
      isNamed: true,
    );
    mateUse(
      'onVerticalDragDown',
      onVerticalDragDown,
      isNamed: true,
    );
    mateUse(
      'onVerticalDragStart',
      onVerticalDragStart,
      isNamed: true,
    );
    mateUse(
      'onVerticalDragUpdate',
      onVerticalDragUpdate,
      isNamed: true,
    );
    mateUse(
      'onVerticalDragEnd',
      onVerticalDragEnd,
      isNamed: true,
    );
    mateUse(
      'onVerticalDragCancel',
      onVerticalDragCancel,
      isNamed: true,
    );
    mateUse(
      'onHorizontalDragDown',
      onHorizontalDragDown,
      isNamed: true,
    );
    mateUse(
      'onHorizontalDragStart',
      onHorizontalDragStart,
      isNamed: true,
    );
    mateUse(
      'onHorizontalDragUpdate',
      onHorizontalDragUpdate,
      isNamed: true,
    );
    mateUse(
      'onHorizontalDragEnd',
      onHorizontalDragEnd,
      isNamed: true,
    );
    mateUse(
      'onHorizontalDragCancel',
      onHorizontalDragCancel,
      isNamed: true,
    );
    mateUse(
      'onForcePressStart',
      onForcePressStart,
      isNamed: true,
    );
    mateUse(
      'onForcePressPeak',
      onForcePressPeak,
      isNamed: true,
    );
    mateUse(
      'onForcePressUpdate',
      onForcePressUpdate,
      isNamed: true,
    );
    mateUse(
      'onForcePressEnd',
      onForcePressEnd,
      isNamed: true,
    );
    mateUse(
      'onPanDown',
      onPanDown,
      isNamed: true,
    );
    mateUse(
      'onPanStart',
      onPanStart,
      isNamed: true,
    );
    mateUse(
      'onPanUpdate',
      onPanUpdate,
      isNamed: true,
    );
    mateUse(
      'onPanEnd',
      onPanEnd,
      isNamed: true,
    );
    mateUse(
      'onPanCancel',
      onPanCancel,
      isNamed: true,
    );
    mateUse(
      'onScaleStart',
      onScaleStart,
      isNamed: true,
    );
    mateUse(
      'onScaleUpdate',
      onScaleUpdate,
      isNamed: true,
    );
    mateUse(
      'onScaleEnd',
      onScaleEnd,
      isNamed: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i13.DragStartBehavior.start,
    );
    mateUse(
      'trackpadScrollCausesScale',
      trackpadScrollCausesScale,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'trackpadScrollToScaleFactor',
      trackpadScrollToScaleFactor,
      isNamed: true,
    );
    mateUse(
      'supportedDevices',
      supportedDevices,
      isNamed: true,
    );
  }
}

/// class RawGestureDetector extends StatefulWidget
class RawGestureDetector$Mate extends _i2.RawGestureDetector with _i3.Mate {
  /// RawGestureDetector RawGestureDetector({Key? key, Widget? child, Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}, HitTestBehavior? behavior, bool excludeFromSemantics = false, SemanticsGestureDelegate? semantics})
  RawGestureDetector$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i4.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {Map<Type, GestureRecognizerFactory<GestureRecognizer>> gestures = const <Type, GestureRecognizerFactory>{}} , default:unprocessed=SetOrMapLiteralImpl
    required Map<Type, _i2.GestureRecognizerFactory<_i1.GestureRecognizer>> gestures,

    /// optionalParameters: {HitTestBehavior? behavior} , default:none
    _i12.HitTestBehavior? behavior,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {SemanticsGestureDelegate? semantics} , default:none
    _i2.SemanticsGestureDelegate? semantics,
  }) : super(
          key: key,
          child: child,
          gestures: gestures,
          behavior: behavior,
          excludeFromSemantics: excludeFromSemantics,
          semantics: semantics,
        ) {
    mateBuilderName = 'RawGestureDetector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RawGestureDetector$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          gestures: p.get('gestures').build(),
          behavior: p.get('behavior').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          semantics: p.get('semantics').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'gestures',
      gestures,
      isNamed: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'semantics',
      semantics,
      isNamed: true,
    );
  }
}
