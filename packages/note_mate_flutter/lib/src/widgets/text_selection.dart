// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/text_selection.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/services/text_input.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/rendering/layer.dart' as _i5;
import 'package:flutter/src/rendering/editable.dart' as _i6;
import 'package:flutter/src/gestures/recognizer.dart' as _i7;
import 'package:flutter/gestures.dart' as _i8;
import 'dart:ui' as _i9;
import 'package:flutter/src/widgets/magnifier.dart' as _i10;
import 'package:flutter/src/rendering/selection.dart' as _i11;
import 'package:flutter/src/foundation/change_notifier.dart' as _i12;
import 'package:flutter/src/foundation/basic_types.dart' as _i13;
import 'package:flutter/src/gestures/drag_details.dart' as _i14;
import 'package:flutter/cupertino.dart' as _i15;
import 'package:flutter/src/foundation/key.dart' as _i16;
import 'package:flutter/src/widgets/tap_and_drag_gestures.dart' as _i17;
import 'package:flutter/src/gestures/force_press.dart' as _i18;
import 'package:flutter/src/gestures/tap.dart' as _i19;
import 'package:flutter/src/gestures/long_press.dart' as _i20;
import 'package:flutter/src/rendering/proxy_box.dart' as _i21;

/// class TextSelectionOverlay
class TextSelectionOverlay$Mate extends _i1.TextSelectionOverlay with _i2.Mate {
  /// TextSelectionOverlay TextSelectionOverlay({required TextEditingValue value, required BuildContext context, Widget? debugRequiredFor, required LayerLink toolbarLayerLink, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required RenderEditable renderObject, TextSelectionControls? selectionControls, bool handlesVisible = false, required TextSelectionDelegate selectionDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, ClipboardStatusNotifier? clipboardStatus, Widget Function(BuildContext)? contextMenuBuilder, required TextMagnifierConfiguration magnifierConfiguration})
  TextSelectionOverlay$Mate({
    /// optionalParameters: {required TextEditingValue value} , default:none
    required _i3.TextEditingValue value,

    /// optionalParameters: {required BuildContext context} , default:none
    required _i4.BuildContext context,

    /// optionalParameters: {Widget? debugRequiredFor} , default:none
    _i4.Widget? debugRequiredFor,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , default:none
    required _i5.LayerLink toolbarLayerLink,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , default:none
    required _i5.LayerLink startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , default:none
    required _i5.LayerLink endHandleLayerLink,

    /// optionalParameters: {required RenderEditable renderObject} , default:none
    required _i6.RenderEditable renderObject,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    _i1.TextSelectionControls? selectionControls,

    /// optionalParameters: {bool handlesVisible = false} , default:processed=BooleanLiteralImpl
    bool handlesVisible = false,

    /// optionalParameters: {required TextSelectionDelegate selectionDelegate} , default:none
    required _i3.TextSelectionDelegate selectionDelegate,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i7.DragStartBehavior dragStartBehavior = _i8.DragStartBehavior.start,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , default:none
    _i9.VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {ClipboardStatusNotifier? clipboardStatus} , default:none
    _i1.ClipboardStatusNotifier? clipboardStatus,

    /// optionalParameters: {Widget Function(BuildContext)? contextMenuBuilder} , default:none
    _i4.WidgetBuilder? contextMenuBuilder,

    /// optionalParameters: {required TextMagnifierConfiguration magnifierConfiguration} , default:none
    required _i10.TextMagnifierConfiguration magnifierConfiguration,
  }) : super(
          value: value,
          context: context,
          debugRequiredFor: debugRequiredFor,
          toolbarLayerLink: toolbarLayerLink,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          renderObject: renderObject,
          selectionControls: selectionControls,
          handlesVisible: handlesVisible,
          selectionDelegate: selectionDelegate,
          dragStartBehavior: dragStartBehavior,
          onSelectionHandleTapped: onSelectionHandleTapped,
          clipboardStatus: clipboardStatus,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilderName = 'TextSelectionOverlay';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSelectionOverlay$Mate(
          value: p.get('value').build(),
          context: p.get('context').build(),
          debugRequiredFor: p.get('debugRequiredFor').build(),
          toolbarLayerLink: p.get('toolbarLayerLink').build(),
          startHandleLayerLink: p.get('startHandleLayerLink').build(),
          endHandleLayerLink: p.get('endHandleLayerLink').build(),
          renderObject: p.get('renderObject').build(),
          selectionControls: p.get('selectionControls').build(),
          handlesVisible: p.get('handlesVisible').build(),
          selectionDelegate: p.get('selectionDelegate').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'debugRequiredFor',
      debugRequiredFor,
      isNamed: true,
    );
    mateUse(
      'toolbarLayerLink',
      toolbarLayerLink,
      isNamed: true,
    );
    mateUse(
      'startHandleLayerLink',
      startHandleLayerLink,
      isNamed: true,
    );
    mateUse(
      'endHandleLayerLink',
      endHandleLayerLink,
      isNamed: true,
    );
    mateUse(
      'renderObject',
      renderObject,
      isNamed: true,
    );
    mateUse(
      'selectionControls',
      selectionControls,
      isNamed: true,
    );
    mateUse(
      'handlesVisible',
      handlesVisible,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'selectionDelegate',
      selectionDelegate,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i8.DragStartBehavior.start,
    );
    mateUse(
      'onSelectionHandleTapped',
      onSelectionHandleTapped,
      isNamed: true,
    );
    mateUse(
      'clipboardStatus',
      clipboardStatus,
      isNamed: true,
    );
    mateUse(
      'contextMenuBuilder',
      contextMenuBuilder,
      isNamed: true,
    );
    mateUse(
      'magnifierConfiguration',
      magnifierConfiguration,
      isNamed: true,
    );
  }
}

/// class SelectionOverlay
class SelectionOverlay$Mate extends _i1.SelectionOverlay with _i2.Mate {
  /// SelectionOverlay SelectionOverlay({required BuildContext context, Widget? debugRequiredFor, required TextSelectionHandleType startHandleType, required double lineHeightAtStart, ValueListenable<bool>? startHandlesVisible, void Function(DragStartDetails)? onStartHandleDragStart, void Function(DragUpdateDetails)? onStartHandleDragUpdate, void Function(DragEndDetails)? onStartHandleDragEnd, required TextSelectionHandleType endHandleType, required double lineHeightAtEnd, ValueListenable<bool>? endHandlesVisible, void Function(DragStartDetails)? onEndHandleDragStart, void Function(DragUpdateDetails)? onEndHandleDragUpdate, void Function(DragEndDetails)? onEndHandleDragEnd, ValueListenable<bool>? toolbarVisible, required List<TextSelectionPoint> selectionEndpoints, required TextSelectionControls? selectionControls, required TextSelectionDelegate? selectionDelegate, required ClipboardStatusNotifier? clipboardStatus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required LayerLink toolbarLayerLink, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, Offset? toolbarLocation, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
  SelectionOverlay$Mate({
    /// optionalParameters: {required BuildContext context} , default:none
    required _i4.BuildContext context,

    /// optionalParameters: {Widget? debugRequiredFor} , default:none
    _i4.Widget? debugRequiredFor,

    /// optionalParameters: {required TextSelectionHandleType startHandleType} , default:none
    required _i11.TextSelectionHandleType startHandleType,

    /// optionalParameters: {required double lineHeightAtStart} , default:none
    required double lineHeightAtStart,

    /// optionalParameters: {ValueListenable<bool>? startHandlesVisible} , default:none
    _i12.ValueListenable<bool>? startHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onStartHandleDragStart} , default:none
    _i13.ValueChanged<_i14.DragStartDetails>? onStartHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onStartHandleDragUpdate} , default:none
    _i13.ValueChanged<_i14.DragUpdateDetails>? onStartHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onStartHandleDragEnd} , default:none
    _i13.ValueChanged<_i14.DragEndDetails>? onStartHandleDragEnd,

    /// optionalParameters: {required TextSelectionHandleType endHandleType} , default:none
    required _i11.TextSelectionHandleType endHandleType,

    /// optionalParameters: {required double lineHeightAtEnd} , default:none
    required double lineHeightAtEnd,

    /// optionalParameters: {ValueListenable<bool>? endHandlesVisible} , default:none
    _i12.ValueListenable<bool>? endHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onEndHandleDragStart} , default:none
    _i13.ValueChanged<_i14.DragStartDetails>? onEndHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onEndHandleDragUpdate} , default:none
    _i13.ValueChanged<_i14.DragUpdateDetails>? onEndHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onEndHandleDragEnd} , default:none
    _i13.ValueChanged<_i14.DragEndDetails>? onEndHandleDragEnd,

    /// optionalParameters: {ValueListenable<bool>? toolbarVisible} , default:none
    _i12.ValueListenable<bool>? toolbarVisible,

    /// optionalParameters: {required List<TextSelectionPoint> selectionEndpoints} , default:none
    required List<_i6.TextSelectionPoint> selectionEndpoints,

    /// optionalParameters: {required TextSelectionControls? selectionControls} , default:none
    required _i1.TextSelectionControls? selectionControls,

    /// optionalParameters: {required TextSelectionDelegate? selectionDelegate} , default:none
    required _i3.TextSelectionDelegate? selectionDelegate,

    /// optionalParameters: {required ClipboardStatusNotifier? clipboardStatus} , default:none
    required _i1.ClipboardStatusNotifier? clipboardStatus,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , default:none
    required _i5.LayerLink startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , default:none
    required _i5.LayerLink endHandleLayerLink,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , default:none
    required _i5.LayerLink toolbarLayerLink,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i7.DragStartBehavior dragStartBehavior = _i8.DragStartBehavior.start,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , default:none
    _i9.VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled} , default:processed=PrefixedIdentifierImpl
    _i10.TextMagnifierConfiguration magnifierConfiguration = _i15.TextMagnifierConfiguration.disabled,
  }) : super(
          context: context,
          debugRequiredFor: debugRequiredFor,
          startHandleType: startHandleType,
          lineHeightAtStart: lineHeightAtStart,
          startHandlesVisible: startHandlesVisible,
          onStartHandleDragStart: onStartHandleDragStart,
          onStartHandleDragUpdate: onStartHandleDragUpdate,
          onStartHandleDragEnd: onStartHandleDragEnd,
          endHandleType: endHandleType,
          lineHeightAtEnd: lineHeightAtEnd,
          endHandlesVisible: endHandlesVisible,
          onEndHandleDragStart: onEndHandleDragStart,
          onEndHandleDragUpdate: onEndHandleDragUpdate,
          onEndHandleDragEnd: onEndHandleDragEnd,
          toolbarVisible: toolbarVisible,
          selectionEndpoints: selectionEndpoints,
          selectionControls: selectionControls,
          selectionDelegate: selectionDelegate,
          clipboardStatus: clipboardStatus,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          toolbarLayerLink: toolbarLayerLink,
          dragStartBehavior: dragStartBehavior,
          onSelectionHandleTapped: onSelectionHandleTapped,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateBuilderName = 'SelectionOverlay';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SelectionOverlay$Mate(
          context: p.get('context').build(),
          debugRequiredFor: p.get('debugRequiredFor').build(),
          startHandleType: p.get('startHandleType').build(),
          lineHeightAtStart: p.get('lineHeightAtStart').build(),
          startHandlesVisible: p.get('startHandlesVisible').build(),
          onStartHandleDragStart: p.get('onStartHandleDragStart').build(),
          onStartHandleDragUpdate: p.get('onStartHandleDragUpdate').build(),
          onStartHandleDragEnd: p.get('onStartHandleDragEnd').build(),
          endHandleType: p.get('endHandleType').build(),
          lineHeightAtEnd: p.get('lineHeightAtEnd').build(),
          endHandlesVisible: p.get('endHandlesVisible').build(),
          onEndHandleDragStart: p.get('onEndHandleDragStart').build(),
          onEndHandleDragUpdate: p.get('onEndHandleDragUpdate').build(),
          onEndHandleDragEnd: p.get('onEndHandleDragEnd').build(),
          toolbarVisible: p.get('toolbarVisible').build(),
          selectionEndpoints: p.get('selectionEndpoints').build(),
          selectionControls: p.get('selectionControls').build(),
          selectionDelegate: p.get('selectionDelegate').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          startHandleLayerLink: p.get('startHandleLayerLink').build(),
          endHandleLayerLink: p.get('endHandleLayerLink').build(),
          toolbarLayerLink: p.get('toolbarLayerLink').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'debugRequiredFor',
      debugRequiredFor,
      isNamed: true,
    );
    mateUse(
      'startHandleType',
      startHandleType,
      isNamed: true,
    );
    mateUse(
      'lineHeightAtStart',
      lineHeightAtStart,
      isNamed: true,
    );
    mateUse(
      'startHandlesVisible',
      startHandlesVisible,
      isNamed: true,
    );
    mateUse(
      'onStartHandleDragStart',
      onStartHandleDragStart,
      isNamed: true,
    );
    mateUse(
      'onStartHandleDragUpdate',
      onStartHandleDragUpdate,
      isNamed: true,
    );
    mateUse(
      'onStartHandleDragEnd',
      onStartHandleDragEnd,
      isNamed: true,
    );
    mateUse(
      'endHandleType',
      endHandleType,
      isNamed: true,
    );
    mateUse(
      'lineHeightAtEnd',
      lineHeightAtEnd,
      isNamed: true,
    );
    mateUse(
      'endHandlesVisible',
      endHandlesVisible,
      isNamed: true,
    );
    mateUse(
      'onEndHandleDragStart',
      onEndHandleDragStart,
      isNamed: true,
    );
    mateUse(
      'onEndHandleDragUpdate',
      onEndHandleDragUpdate,
      isNamed: true,
    );
    mateUse(
      'onEndHandleDragEnd',
      onEndHandleDragEnd,
      isNamed: true,
    );
    mateUse(
      'toolbarVisible',
      toolbarVisible,
      isNamed: true,
    );
    mateUse(
      'selectionEndpoints',
      selectionEndpoints,
      isNamed: true,
    );
    mateUse(
      'selectionControls',
      selectionControls,
      isNamed: true,
    );
    mateUse(
      'selectionDelegate',
      selectionDelegate,
      isNamed: true,
    );
    mateUse(
      'clipboardStatus',
      clipboardStatus,
      isNamed: true,
    );
    mateUse(
      'startHandleLayerLink',
      startHandleLayerLink,
      isNamed: true,
    );
    mateUse(
      'endHandleLayerLink',
      endHandleLayerLink,
      isNamed: true,
    );
    mateUse(
      'toolbarLayerLink',
      toolbarLayerLink,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i8.DragStartBehavior.start,
    );
    mateUse(
      'onSelectionHandleTapped',
      onSelectionHandleTapped,
      isNamed: true,
    );
    mateUse(
      'magnifierConfiguration',
      magnifierConfiguration,
      isNamed: true,
      defaultValue: _i15.TextMagnifierConfiguration.disabled,
    );
  }
}

/// class TextSelectionGestureDetectorBuilder
class TextSelectionGestureDetectorBuilder$Mate extends _i1.TextSelectionGestureDetectorBuilder with _i2.Mate {
  /// TextSelectionGestureDetectorBuilder TextSelectionGestureDetectorBuilder({required TextSelectionGestureDetectorBuilderDelegate delegate})
  TextSelectionGestureDetectorBuilder$Mate(
      {
      /// optionalParameters: {required TextSelectionGestureDetectorBuilderDelegate delegate} , default:none
      required _i1.TextSelectionGestureDetectorBuilderDelegate delegate})
      : super(delegate: delegate) {
    mateBuilderName = 'TextSelectionGestureDetectorBuilder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSelectionGestureDetectorBuilder$Mate(delegate: p.get('delegate').build());
    mateUse(
      'delegate',
      delegate,
      isNamed: true,
    );
  }
}

/// class TextSelectionGestureDetector extends StatefulWidget
class TextSelectionGestureDetector$Mate extends _i1.TextSelectionGestureDetector with _i2.Mate {
  /// TextSelectionGestureDetector TextSelectionGestureDetector({Key? key, void Function(TapDragDownDetails)? onTapDown, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressEnd, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapDragUpDetails)? onSingleTapUp, void Function()? onSingleTapCancel, void Function(LongPressStartDetails)? onSingleLongTapStart, void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate, void Function(LongPressEndDetails)? onSingleLongTapEnd, void Function(TapDragDownDetails)? onDoubleTapDown, void Function(TapDragDownDetails)? onTripleTapDown, void Function(TapDragStartDetails)? onDragSelectionStart, void Function(TapDragUpdateDetails)? onDragSelectionUpdate, void Function(TapDragEndDetails)? onDragSelectionEnd, HitTestBehavior? behavior, required Widget child})
  TextSelectionGestureDetector$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i16.Key? key,

    /// optionalParameters: {void Function(TapDragDownDetails)? onTapDown} , default:none
    _i17.GestureTapDragDownCallback? onTapDown,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , default:none
    _i18.GestureForcePressStartCallback? onForcePressStart,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , default:none
    _i18.GestureForcePressEndCallback? onForcePressEnd,

    /// optionalParameters: {void Function()? onSecondaryTap} , default:none
    _i19.GestureTapCallback? onSecondaryTap,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , default:none
    _i19.GestureTapDownCallback? onSecondaryTapDown,

    /// optionalParameters: {void Function(TapDragUpDetails)? onSingleTapUp} , default:none
    _i17.GestureTapDragUpCallback? onSingleTapUp,

    /// optionalParameters: {void Function()? onSingleTapCancel} , default:none
    _i17.GestureCancelCallback? onSingleTapCancel,

    /// optionalParameters: {void Function(LongPressStartDetails)? onSingleLongTapStart} , default:none
    _i20.GestureLongPressStartCallback? onSingleLongTapStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate} , default:none
    _i20.GestureLongPressMoveUpdateCallback? onSingleLongTapMoveUpdate,

    /// optionalParameters: {void Function(LongPressEndDetails)? onSingleLongTapEnd} , default:none
    _i20.GestureLongPressEndCallback? onSingleLongTapEnd,

    /// optionalParameters: {void Function(TapDragDownDetails)? onDoubleTapDown} , default:none
    _i17.GestureTapDragDownCallback? onDoubleTapDown,

    /// optionalParameters: {void Function(TapDragDownDetails)? onTripleTapDown} , default:none
    _i17.GestureTapDragDownCallback? onTripleTapDown,

    /// optionalParameters: {void Function(TapDragStartDetails)? onDragSelectionStart} , default:none
    _i17.GestureTapDragStartCallback? onDragSelectionStart,

    /// optionalParameters: {void Function(TapDragUpdateDetails)? onDragSelectionUpdate} , default:none
    _i17.GestureTapDragUpdateCallback? onDragSelectionUpdate,

    /// optionalParameters: {void Function(TapDragEndDetails)? onDragSelectionEnd} , default:none
    _i17.GestureTapDragEndCallback? onDragSelectionEnd,

    /// optionalParameters: {HitTestBehavior? behavior} , default:none
    _i21.HitTestBehavior? behavior,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,
  }) : super(
          key: key,
          onTapDown: onTapDown,
          onForcePressStart: onForcePressStart,
          onForcePressEnd: onForcePressEnd,
          onSecondaryTap: onSecondaryTap,
          onSecondaryTapDown: onSecondaryTapDown,
          onSingleTapUp: onSingleTapUp,
          onSingleTapCancel: onSingleTapCancel,
          onSingleLongTapStart: onSingleLongTapStart,
          onSingleLongTapMoveUpdate: onSingleLongTapMoveUpdate,
          onSingleLongTapEnd: onSingleLongTapEnd,
          onDoubleTapDown: onDoubleTapDown,
          onTripleTapDown: onTripleTapDown,
          onDragSelectionStart: onDragSelectionStart,
          onDragSelectionUpdate: onDragSelectionUpdate,
          onDragSelectionEnd: onDragSelectionEnd,
          behavior: behavior,
          child: child,
        ) {
    mateBuilderName = 'TextSelectionGestureDetector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSelectionGestureDetector$Mate(
          key: p.get('key').build(),
          onTapDown: p.get('onTapDown').build(),
          onForcePressStart: p.get('onForcePressStart').build(),
          onForcePressEnd: p.get('onForcePressEnd').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSingleTapUp: p.get('onSingleTapUp').build(),
          onSingleTapCancel: p.get('onSingleTapCancel').build(),
          onSingleLongTapStart: p.get('onSingleLongTapStart').build(),
          onSingleLongTapMoveUpdate: p.get('onSingleLongTapMoveUpdate').build(),
          onSingleLongTapEnd: p.get('onSingleLongTapEnd').build(),
          onDoubleTapDown: p.get('onDoubleTapDown').build(),
          onTripleTapDown: p.get('onTripleTapDown').build(),
          onDragSelectionStart: p.get('onDragSelectionStart').build(),
          onDragSelectionUpdate: p.get('onDragSelectionUpdate').build(),
          onDragSelectionEnd: p.get('onDragSelectionEnd').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'onTapDown',
      onTapDown,
      isNamed: true,
    );
    mateUse(
      'onForcePressStart',
      onForcePressStart,
      isNamed: true,
    );
    mateUse(
      'onForcePressEnd',
      onForcePressEnd,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTap',
      onSecondaryTap,
      isNamed: true,
    );
    mateUse(
      'onSecondaryTapDown',
      onSecondaryTapDown,
      isNamed: true,
    );
    mateUse(
      'onSingleTapUp',
      onSingleTapUp,
      isNamed: true,
    );
    mateUse(
      'onSingleTapCancel',
      onSingleTapCancel,
      isNamed: true,
    );
    mateUse(
      'onSingleLongTapStart',
      onSingleLongTapStart,
      isNamed: true,
    );
    mateUse(
      'onSingleLongTapMoveUpdate',
      onSingleLongTapMoveUpdate,
      isNamed: true,
    );
    mateUse(
      'onSingleLongTapEnd',
      onSingleLongTapEnd,
      isNamed: true,
    );
    mateUse(
      'onDoubleTapDown',
      onDoubleTapDown,
      isNamed: true,
    );
    mateUse(
      'onTripleTapDown',
      onTripleTapDown,
      isNamed: true,
    );
    mateUse(
      'onDragSelectionStart',
      onDragSelectionStart,
      isNamed: true,
    );
    mateUse(
      'onDragSelectionUpdate',
      onDragSelectionUpdate,
      isNamed: true,
    );
    mateUse(
      'onDragSelectionEnd',
      onDragSelectionEnd,
      isNamed: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ClipboardStatusNotifier extends ValueNotifier<ClipboardStatus> with WidgetsBindingObserver
class ClipboardStatusNotifier$Mate extends _i1.ClipboardStatusNotifier with _i2.Mate {
  /// ClipboardStatusNotifier ClipboardStatusNotifier({ClipboardStatus value = ClipboardStatus.unknown})
  ClipboardStatusNotifier$Mate(
      {
      /// optionalParameters: {ClipboardStatus value = ClipboardStatus.unknown} , default:processed=PrefixedIdentifierImpl
      _i1.ClipboardStatus value = _i15.ClipboardStatus.unknown})
      : super(value: value) {
    mateBuilderName = 'ClipboardStatusNotifier';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipboardStatusNotifier$Mate(value: p.get('value').build());
    mateUse(
      'value',
      value,
      isNamed: true,
      defaultValue: _i15.ClipboardStatus.unknown,
    );
  }
}
