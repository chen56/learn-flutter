// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/text_selection.dart';import 'package:flutter/src/services/text_input.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:flutter/src/rendering/layer.dart';import 'package:flutter/src/rendering/editable.dart';import 'dart:core';import 'package:flutter/src/gestures/recognizer.dart';import 'dart:ui';import 'package:flutter/src/widgets/magnifier.dart';import 'package:flutter/src/rendering/selection.dart';import 'package:flutter/src/foundation/change_notifier.dart';import 'package:flutter/src/foundation/basic_types.dart';import 'package:flutter/src/gestures/drag_details.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';import 'package:flutter/src/gestures/force_press.dart';import 'package:flutter/src/gestures/tap.dart';import 'package:flutter/src/gestures/long_press.dart';import 'package:flutter/src/rendering/proxy_box.dart';import 'package:note/mate.dart' show Mate;/// class TextSelectionOverlay
class TextSelectionOverlay$Mate extends TextSelectionOverlay with Mate {/// TextSelectionOverlay TextSelectionOverlay({required TextEditingValue value, required BuildContext context, Widget? debugRequiredFor, required LayerLink toolbarLayerLink, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required RenderEditable renderObject, TextSelectionControls? selectionControls, bool handlesVisible = false, required TextSelectionDelegate selectionDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, ClipboardStatusNotifier? clipboardStatus, Widget Function(BuildContext)? contextMenuBuilder, required TextMagnifierConfiguration magnifierConfiguration})
TextSelectionOverlay$Mate({/// optionalParameters: {required TextEditingValue value} , hasDefaultValue:false, defaultValueCode:null
required TextEditingValue value, /// optionalParameters: {required BuildContext context} , hasDefaultValue:false, defaultValueCode:null
required BuildContext context, /// optionalParameters: {Widget? debugRequiredFor} , hasDefaultValue:false, defaultValueCode:null
Widget? debugRequiredFor, /// optionalParameters: {required LayerLink toolbarLayerLink} , hasDefaultValue:false, defaultValueCode:null
required LayerLink toolbarLayerLink, /// optionalParameters: {required LayerLink startHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
required LayerLink startHandleLayerLink, /// optionalParameters: {required LayerLink endHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
required LayerLink endHandleLayerLink, /// optionalParameters: {required RenderEditable renderObject} , hasDefaultValue:false, defaultValueCode:null
required RenderEditable renderObject, /// optionalParameters: {TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
TextSelectionControls? selectionControls, /// optionalParameters: {bool handlesVisible = false} , hasDefaultValue:true, defaultValueCode:false
required bool handlesVisible, /// optionalParameters: {required TextSelectionDelegate selectionDelegate} , hasDefaultValue:false, defaultValueCode:null
required TextSelectionDelegate selectionDelegate, /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
required DragStartBehavior dragStartBehavior, /// optionalParameters: {void Function()? onSelectionHandleTapped} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onSelectionHandleTapped, /// optionalParameters: {ClipboardStatusNotifier? clipboardStatus} , hasDefaultValue:false, defaultValueCode:null
ClipboardStatusNotifier? clipboardStatus, /// optionalParameters: {Widget Function(BuildContext)? contextMenuBuilder} , hasDefaultValue:false, defaultValueCode:null
WidgetBuilder? contextMenuBuilder, /// optionalParameters: {required TextMagnifierConfiguration magnifierConfiguration} , hasDefaultValue:false, defaultValueCode:null
required TextMagnifierConfiguration magnifierConfiguration, }) : super(value: value, context: context, debugRequiredFor: debugRequiredFor, toolbarLayerLink: toolbarLayerLink, startHandleLayerLink: startHandleLayerLink, endHandleLayerLink: endHandleLayerLink, renderObject: renderObject, selectionControls: selectionControls, handlesVisible: handlesVisible, selectionDelegate: selectionDelegate, dragStartBehavior: dragStartBehavior, onSelectionHandleTapped: onSelectionHandleTapped, clipboardStatus: clipboardStatus, contextMenuBuilder: contextMenuBuilder, magnifierConfiguration: magnifierConfiguration, ) { mateBuilder = (p) => TextSelectionOverlay$Mate(value: p.get('value').build(), context: p.get('context').build(), debugRequiredFor: p.get('debugRequiredFor').build(), toolbarLayerLink: p.get('toolbarLayerLink').build(), startHandleLayerLink: p.get('startHandleLayerLink').build(), endHandleLayerLink: p.get('endHandleLayerLink').build(), renderObject: p.get('renderObject').build(), selectionControls: p.get('selectionControls').build(), handlesVisible: p.get('handlesVisible').build(), selectionDelegate: p.get('selectionDelegate').build(), dragStartBehavior: p.get('dragStartBehavior').build(), onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(), clipboardStatus: p.get('clipboardStatus').build(), contextMenuBuilder: p.get('contextMenuBuilder').build(), magnifierConfiguration: p.get('magnifierConfiguration').build(), );
matePut('value', value);
matePut('context', context);
matePut('debugRequiredFor', debugRequiredFor);
matePut('toolbarLayerLink', toolbarLayerLink);
matePut('startHandleLayerLink', startHandleLayerLink);
matePut('endHandleLayerLink', endHandleLayerLink);
matePut('renderObject', renderObject);
matePut('selectionControls', selectionControls);
matePut('handlesVisible', handlesVisible);
matePut('selectionDelegate', selectionDelegate);
matePut('dragStartBehavior', dragStartBehavior);
matePut('onSelectionHandleTapped', onSelectionHandleTapped);
matePut('clipboardStatus', clipboardStatus);
matePut('contextMenuBuilder', contextMenuBuilder);
matePut('magnifierConfiguration', magnifierConfiguration); }

 }
/// class SelectionOverlay
class SelectionOverlay$Mate extends SelectionOverlay with Mate {/// SelectionOverlay SelectionOverlay({required BuildContext context, Widget? debugRequiredFor, required TextSelectionHandleType startHandleType, required double lineHeightAtStart, ValueListenable<bool>? startHandlesVisible, void Function(DragStartDetails)? onStartHandleDragStart, void Function(DragUpdateDetails)? onStartHandleDragUpdate, void Function(DragEndDetails)? onStartHandleDragEnd, required TextSelectionHandleType endHandleType, required double lineHeightAtEnd, ValueListenable<bool>? endHandlesVisible, void Function(DragStartDetails)? onEndHandleDragStart, void Function(DragUpdateDetails)? onEndHandleDragUpdate, void Function(DragEndDetails)? onEndHandleDragEnd, ValueListenable<bool>? toolbarVisible, required List<TextSelectionPoint> selectionEndpoints, required TextSelectionControls? selectionControls, required TextSelectionDelegate? selectionDelegate, required ClipboardStatusNotifier? clipboardStatus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required LayerLink toolbarLayerLink, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, Offset? toolbarLocation, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
SelectionOverlay$Mate({/// optionalParameters: {required BuildContext context} , hasDefaultValue:false, defaultValueCode:null
required BuildContext context, /// optionalParameters: {Widget? debugRequiredFor} , hasDefaultValue:false, defaultValueCode:null
Widget? debugRequiredFor, /// optionalParameters: {required TextSelectionHandleType startHandleType} , hasDefaultValue:false, defaultValueCode:null
required TextSelectionHandleType startHandleType, /// optionalParameters: {required double lineHeightAtStart} , hasDefaultValue:false, defaultValueCode:null
required double lineHeightAtStart, /// optionalParameters: {ValueListenable<bool>? startHandlesVisible} , hasDefaultValue:false, defaultValueCode:null
ValueListenable<bool>? startHandlesVisible, /// optionalParameters: {void Function(DragStartDetails)? onStartHandleDragStart} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<DragStartDetails>? onStartHandleDragStart, /// optionalParameters: {void Function(DragUpdateDetails)? onStartHandleDragUpdate} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<DragUpdateDetails>? onStartHandleDragUpdate, /// optionalParameters: {void Function(DragEndDetails)? onStartHandleDragEnd} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<DragEndDetails>? onStartHandleDragEnd, /// optionalParameters: {required TextSelectionHandleType endHandleType} , hasDefaultValue:false, defaultValueCode:null
required TextSelectionHandleType endHandleType, /// optionalParameters: {required double lineHeightAtEnd} , hasDefaultValue:false, defaultValueCode:null
required double lineHeightAtEnd, /// optionalParameters: {ValueListenable<bool>? endHandlesVisible} , hasDefaultValue:false, defaultValueCode:null
ValueListenable<bool>? endHandlesVisible, /// optionalParameters: {void Function(DragStartDetails)? onEndHandleDragStart} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<DragStartDetails>? onEndHandleDragStart, /// optionalParameters: {void Function(DragUpdateDetails)? onEndHandleDragUpdate} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<DragUpdateDetails>? onEndHandleDragUpdate, /// optionalParameters: {void Function(DragEndDetails)? onEndHandleDragEnd} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<DragEndDetails>? onEndHandleDragEnd, /// optionalParameters: {ValueListenable<bool>? toolbarVisible} , hasDefaultValue:false, defaultValueCode:null
ValueListenable<bool>? toolbarVisible, /// optionalParameters: {required List<TextSelectionPoint> selectionEndpoints} , hasDefaultValue:false, defaultValueCode:null
required List<TextSelectionPoint> selectionEndpoints, /// optionalParameters: {required TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
required TextSelectionControls? selectionControls, /// optionalParameters: {required TextSelectionDelegate? selectionDelegate} , hasDefaultValue:false, defaultValueCode:null
required TextSelectionDelegate? selectionDelegate, /// optionalParameters: {required ClipboardStatusNotifier? clipboardStatus} , hasDefaultValue:false, defaultValueCode:null
required ClipboardStatusNotifier? clipboardStatus, /// optionalParameters: {required LayerLink startHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
required LayerLink startHandleLayerLink, /// optionalParameters: {required LayerLink endHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
required LayerLink endHandleLayerLink, /// optionalParameters: {required LayerLink toolbarLayerLink} , hasDefaultValue:false, defaultValueCode:null
required LayerLink toolbarLayerLink, /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
required DragStartBehavior dragStartBehavior, /// optionalParameters: {void Function()? onSelectionHandleTapped} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onSelectionHandleTapped, /// optionalParameters: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled} , hasDefaultValue:true, defaultValueCode:TextMagnifierConfiguration.disabled
required TextMagnifierConfiguration magnifierConfiguration, }) : super(context: context, debugRequiredFor: debugRequiredFor, startHandleType: startHandleType, lineHeightAtStart: lineHeightAtStart, startHandlesVisible: startHandlesVisible, onStartHandleDragStart: onStartHandleDragStart, onStartHandleDragUpdate: onStartHandleDragUpdate, onStartHandleDragEnd: onStartHandleDragEnd, endHandleType: endHandleType, lineHeightAtEnd: lineHeightAtEnd, endHandlesVisible: endHandlesVisible, onEndHandleDragStart: onEndHandleDragStart, onEndHandleDragUpdate: onEndHandleDragUpdate, onEndHandleDragEnd: onEndHandleDragEnd, toolbarVisible: toolbarVisible, selectionEndpoints: selectionEndpoints, selectionControls: selectionControls, selectionDelegate: selectionDelegate, clipboardStatus: clipboardStatus, startHandleLayerLink: startHandleLayerLink, endHandleLayerLink: endHandleLayerLink, toolbarLayerLink: toolbarLayerLink, dragStartBehavior: dragStartBehavior, onSelectionHandleTapped: onSelectionHandleTapped, magnifierConfiguration: magnifierConfiguration, ) { mateBuilder = (p) => SelectionOverlay$Mate(context: p.get('context').build(), debugRequiredFor: p.get('debugRequiredFor').build(), startHandleType: p.get('startHandleType').build(), lineHeightAtStart: p.get('lineHeightAtStart').build(), startHandlesVisible: p.get('startHandlesVisible').build(), onStartHandleDragStart: p.get('onStartHandleDragStart').build(), onStartHandleDragUpdate: p.get('onStartHandleDragUpdate').build(), onStartHandleDragEnd: p.get('onStartHandleDragEnd').build(), endHandleType: p.get('endHandleType').build(), lineHeightAtEnd: p.get('lineHeightAtEnd').build(), endHandlesVisible: p.get('endHandlesVisible').build(), onEndHandleDragStart: p.get('onEndHandleDragStart').build(), onEndHandleDragUpdate: p.get('onEndHandleDragUpdate').build(), onEndHandleDragEnd: p.get('onEndHandleDragEnd').build(), toolbarVisible: p.get('toolbarVisible').build(), selectionEndpoints: p.get('selectionEndpoints').build(), selectionControls: p.get('selectionControls').build(), selectionDelegate: p.get('selectionDelegate').build(), clipboardStatus: p.get('clipboardStatus').build(), startHandleLayerLink: p.get('startHandleLayerLink').build(), endHandleLayerLink: p.get('endHandleLayerLink').build(), toolbarLayerLink: p.get('toolbarLayerLink').build(), dragStartBehavior: p.get('dragStartBehavior').build(), onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(), magnifierConfiguration: p.get('magnifierConfiguration').build(), );
matePut('context', context);
matePut('debugRequiredFor', debugRequiredFor);
matePut('startHandleType', startHandleType);
matePut('lineHeightAtStart', lineHeightAtStart);
matePut('startHandlesVisible', startHandlesVisible);
matePut('onStartHandleDragStart', onStartHandleDragStart);
matePut('onStartHandleDragUpdate', onStartHandleDragUpdate);
matePut('onStartHandleDragEnd', onStartHandleDragEnd);
matePut('endHandleType', endHandleType);
matePut('lineHeightAtEnd', lineHeightAtEnd);
matePut('endHandlesVisible', endHandlesVisible);
matePut('onEndHandleDragStart', onEndHandleDragStart);
matePut('onEndHandleDragUpdate', onEndHandleDragUpdate);
matePut('onEndHandleDragEnd', onEndHandleDragEnd);
matePut('toolbarVisible', toolbarVisible);
matePut('selectionEndpoints', selectionEndpoints);
matePut('selectionControls', selectionControls);
matePut('selectionDelegate', selectionDelegate);
matePut('clipboardStatus', clipboardStatus);
matePut('startHandleLayerLink', startHandleLayerLink);
matePut('endHandleLayerLink', endHandleLayerLink);
matePut('toolbarLayerLink', toolbarLayerLink);
matePut('dragStartBehavior', dragStartBehavior);
matePut('onSelectionHandleTapped', onSelectionHandleTapped);
matePut('magnifierConfiguration', magnifierConfiguration); }

 }
/// class TextSelectionGestureDetectorBuilder
class TextSelectionGestureDetectorBuilder$Mate extends TextSelectionGestureDetectorBuilder with Mate {/// TextSelectionGestureDetectorBuilder TextSelectionGestureDetectorBuilder({required TextSelectionGestureDetectorBuilderDelegate delegate})
TextSelectionGestureDetectorBuilder$Mate({/// optionalParameters: {required TextSelectionGestureDetectorBuilderDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
required TextSelectionGestureDetectorBuilderDelegate delegate}) : super(delegate: delegate) { mateBuilder = (p) => TextSelectionGestureDetectorBuilder$Mate(delegate: p.get('delegate').build());
matePut('delegate', delegate); }

 }
/// class TextSelectionGestureDetector extends StatefulWidget
class TextSelectionGestureDetector$Mate extends TextSelectionGestureDetector with Mate {/// TextSelectionGestureDetector TextSelectionGestureDetector({Key? key, void Function(TapDragDownDetails)? onTapDown, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressEnd, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapDragUpDetails)? onSingleTapUp, void Function()? onSingleTapCancel, void Function(LongPressStartDetails)? onSingleLongTapStart, void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate, void Function(LongPressEndDetails)? onSingleLongTapEnd, void Function(TapDragDownDetails)? onDoubleTapDown, void Function(TapDragStartDetails)? onDragSelectionStart, void Function(TapDragUpdateDetails)? onDragSelectionUpdate, void Function(TapDragEndDetails)? onDragSelectionEnd, HitTestBehavior? behavior, required Widget child})
TextSelectionGestureDetector$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {void Function(TapDragDownDetails)? onTapDown} , hasDefaultValue:false, defaultValueCode:null
GestureTapDragDownCallback? onTapDown, /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , hasDefaultValue:false, defaultValueCode:null
GestureForcePressStartCallback? onForcePressStart, /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , hasDefaultValue:false, defaultValueCode:null
GestureForcePressEndCallback? onForcePressEnd, /// optionalParameters: {void Function()? onSecondaryTap} , hasDefaultValue:false, defaultValueCode:null
GestureTapCallback? onSecondaryTap, /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , hasDefaultValue:false, defaultValueCode:null
GestureTapDownCallback? onSecondaryTapDown, /// optionalParameters: {void Function(TapDragUpDetails)? onSingleTapUp} , hasDefaultValue:false, defaultValueCode:null
GestureTapDragUpCallback? onSingleTapUp, /// optionalParameters: {void Function()? onSingleTapCancel} , hasDefaultValue:false, defaultValueCode:null
GestureCancelCallback? onSingleTapCancel, /// optionalParameters: {void Function(LongPressStartDetails)? onSingleLongTapStart} , hasDefaultValue:false, defaultValueCode:null
GestureLongPressStartCallback? onSingleLongTapStart, /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate} , hasDefaultValue:false, defaultValueCode:null
GestureLongPressMoveUpdateCallback? onSingleLongTapMoveUpdate, /// optionalParameters: {void Function(LongPressEndDetails)? onSingleLongTapEnd} , hasDefaultValue:false, defaultValueCode:null
GestureLongPressEndCallback? onSingleLongTapEnd, /// optionalParameters: {void Function(TapDragDownDetails)? onDoubleTapDown} , hasDefaultValue:false, defaultValueCode:null
GestureTapDragDownCallback? onDoubleTapDown, /// optionalParameters: {void Function(TapDragStartDetails)? onDragSelectionStart} , hasDefaultValue:false, defaultValueCode:null
GestureTapDragStartCallback? onDragSelectionStart, /// optionalParameters: {void Function(TapDragUpdateDetails)? onDragSelectionUpdate} , hasDefaultValue:false, defaultValueCode:null
GestureTapDragUpdateCallback? onDragSelectionUpdate, /// optionalParameters: {void Function(TapDragEndDetails)? onDragSelectionEnd} , hasDefaultValue:false, defaultValueCode:null
GestureTapDragEndCallback? onDragSelectionEnd, /// optionalParameters: {HitTestBehavior? behavior} , hasDefaultValue:false, defaultValueCode:null
HitTestBehavior? behavior, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, onTapDown: onTapDown, onForcePressStart: onForcePressStart, onForcePressEnd: onForcePressEnd, onSecondaryTap: onSecondaryTap, onSecondaryTapDown: onSecondaryTapDown, onSingleTapUp: onSingleTapUp, onSingleTapCancel: onSingleTapCancel, onSingleLongTapStart: onSingleLongTapStart, onSingleLongTapMoveUpdate: onSingleLongTapMoveUpdate, onSingleLongTapEnd: onSingleLongTapEnd, onDoubleTapDown: onDoubleTapDown, onDragSelectionStart: onDragSelectionStart, onDragSelectionUpdate: onDragSelectionUpdate, onDragSelectionEnd: onDragSelectionEnd, behavior: behavior, child: child, ) { mateBuilder = (p) => TextSelectionGestureDetector$Mate(key: p.get('key').build(), onTapDown: p.get('onTapDown').build(), onForcePressStart: p.get('onForcePressStart').build(), onForcePressEnd: p.get('onForcePressEnd').build(), onSecondaryTap: p.get('onSecondaryTap').build(), onSecondaryTapDown: p.get('onSecondaryTapDown').build(), onSingleTapUp: p.get('onSingleTapUp').build(), onSingleTapCancel: p.get('onSingleTapCancel').build(), onSingleLongTapStart: p.get('onSingleLongTapStart').build(), onSingleLongTapMoveUpdate: p.get('onSingleLongTapMoveUpdate').build(), onSingleLongTapEnd: p.get('onSingleLongTapEnd').build(), onDoubleTapDown: p.get('onDoubleTapDown').build(), onDragSelectionStart: p.get('onDragSelectionStart').build(), onDragSelectionUpdate: p.get('onDragSelectionUpdate').build(), onDragSelectionEnd: p.get('onDragSelectionEnd').build(), behavior: p.get('behavior').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('onTapDown', onTapDown);
matePut('onForcePressStart', onForcePressStart);
matePut('onForcePressEnd', onForcePressEnd);
matePut('onSecondaryTap', onSecondaryTap);
matePut('onSecondaryTapDown', onSecondaryTapDown);
matePut('onSingleTapUp', onSingleTapUp);
matePut('onSingleTapCancel', onSingleTapCancel);
matePut('onSingleLongTapStart', onSingleLongTapStart);
matePut('onSingleLongTapMoveUpdate', onSingleLongTapMoveUpdate);
matePut('onSingleLongTapEnd', onSingleLongTapEnd);
matePut('onDoubleTapDown', onDoubleTapDown);
matePut('onDragSelectionStart', onDragSelectionStart);
matePut('onDragSelectionUpdate', onDragSelectionUpdate);
matePut('onDragSelectionEnd', onDragSelectionEnd);
matePut('behavior', behavior);
matePut('child', child); }

 }
/// class ClipboardStatusNotifier extends ValueNotifier<ClipboardStatus> with WidgetsBindingObserver
class ClipboardStatusNotifier$Mate extends ClipboardStatusNotifier with Mate {/// ClipboardStatusNotifier ClipboardStatusNotifier({ClipboardStatus value = ClipboardStatus.unknown})
ClipboardStatusNotifier$Mate({/// optionalParameters: {ClipboardStatus value = ClipboardStatus.unknown} , hasDefaultValue:true, defaultValueCode:ClipboardStatus.unknown
required ClipboardStatus value}) : super(value: value) { mateBuilder = (p) => ClipboardStatusNotifier$Mate(value: p.get('value').build());
matePut('value', value); }

 }
