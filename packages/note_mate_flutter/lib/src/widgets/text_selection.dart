// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/text_selection.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/editable.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/gestures.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/src/rendering/selection.dart';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/drag_details.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';
import 'package:flutter/src/gestures/force_press.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/rendering/proxy_box.dart';

/// class TextSelectionOverlay
class TextSelectionOverlay$Mate extends TextSelectionOverlay with Mate {
  /// TextSelectionOverlay TextSelectionOverlay({required TextEditingValue value, required BuildContext context, Widget? debugRequiredFor, required LayerLink toolbarLayerLink, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required RenderEditable renderObject, TextSelectionControls? selectionControls, bool handlesVisible = false, required TextSelectionDelegate selectionDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, ClipboardStatusNotifier? clipboardStatus, Widget Function(BuildContext)? contextMenuBuilder, required TextMagnifierConfiguration magnifierConfiguration})
  TextSelectionOverlay$Mate({
    /// optionalParameters: {required TextEditingValue value} , defaultValue:none
    required TextEditingValue value,

    /// optionalParameters: {required BuildContext context} , defaultValue:none
    required BuildContext context,

    /// optionalParameters: {Widget? debugRequiredFor} , defaultValue:none
    Widget? debugRequiredFor,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , defaultValue:none
    required LayerLink toolbarLayerLink,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , defaultValue:none
    required LayerLink startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , defaultValue:none
    required LayerLink endHandleLayerLink,

    /// optionalParameters: {required RenderEditable renderObject} , defaultValue:none
    required RenderEditable renderObject,

    /// optionalParameters: {TextSelectionControls? selectionControls} , defaultValue:none
    TextSelectionControls? selectionControls,

    /// optionalParameters: {bool handlesVisible = false} , defaultValue:Literal
    bool handlesVisible = false,

    /// optionalParameters: {required TextSelectionDelegate selectionDelegate} , defaultValue:none
    required TextSelectionDelegate selectionDelegate,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , defaultValue:none
    VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {ClipboardStatusNotifier? clipboardStatus} , defaultValue:none
    ClipboardStatusNotifier? clipboardStatus,

    /// optionalParameters: {Widget Function(BuildContext)? contextMenuBuilder} , defaultValue:none
    WidgetBuilder? contextMenuBuilder,

    /// optionalParameters: {required TextMagnifierConfiguration magnifierConfiguration} , defaultValue:none
    required TextMagnifierConfiguration magnifierConfiguration,
  }) : super(
          value: value,
          context: context,
          debugRequiredFor: debugRequiredFor,
          toolbarLayerLink: toolbarLayerLink,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          renderObject: renderObject,
          selectionControls: selectionControls,
          handlesVisible: handlesVisible,
          selectionDelegate: selectionDelegate,
          dragStartBehavior: dragStartBehavior,
          onSelectionHandleTapped: onSelectionHandleTapped,
          clipboardStatus: clipboardStatus,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateCreateName = 'TextSelectionOverlay';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => TextSelectionOverlay$Mate(
          value: p.get('value').build(),
          context: p.get('context').build(),
          debugRequiredFor: p.get('debugRequiredFor').build(),
          toolbarLayerLink: p.get('toolbarLayerLink').build(),
          startHandleLayerLink: p.get('startHandleLayerLink').build(),
          endHandleLayerLink: p.get('endHandleLayerLink').build(),
          renderObject: p.get('renderObject').build(),
          selectionControls: p.get('selectionControls').build(),
          handlesVisible: p.get('handlesVisible').build(),
          selectionDelegate: p.get('selectionDelegate').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse('value', value, isNamed: true);
    mateUse('context', context, isNamed: true);
    mateUse('debugRequiredFor', debugRequiredFor, isNamed: true);
    mateUse('toolbarLayerLink', toolbarLayerLink, isNamed: true);
    mateUse('startHandleLayerLink', startHandleLayerLink, isNamed: true);
    mateUse('endHandleLayerLink', endHandleLayerLink, isNamed: true);
    mateUse('renderObject', renderObject, isNamed: true);
    mateUse('selectionControls', selectionControls, isNamed: true);
    mateUse('handlesVisible', handlesVisible, isNamed: true);
    mateUse('selectionDelegate', selectionDelegate, isNamed: true);
    mateUse('dragStartBehavior', dragStartBehavior, isNamed: true);
    mateUse('onSelectionHandleTapped', onSelectionHandleTapped, isNamed: true);
    mateUse('clipboardStatus', clipboardStatus, isNamed: true);
    mateUse('contextMenuBuilder', contextMenuBuilder, isNamed: true);
    mateUse('magnifierConfiguration', magnifierConfiguration, isNamed: true);
  }
}

/// class SelectionOverlay
class SelectionOverlay$Mate extends SelectionOverlay with Mate {
  /// SelectionOverlay SelectionOverlay({required BuildContext context, Widget? debugRequiredFor, required TextSelectionHandleType startHandleType, required double lineHeightAtStart, ValueListenable<bool>? startHandlesVisible, void Function(DragStartDetails)? onStartHandleDragStart, void Function(DragUpdateDetails)? onStartHandleDragUpdate, void Function(DragEndDetails)? onStartHandleDragEnd, required TextSelectionHandleType endHandleType, required double lineHeightAtEnd, ValueListenable<bool>? endHandlesVisible, void Function(DragStartDetails)? onEndHandleDragStart, void Function(DragUpdateDetails)? onEndHandleDragUpdate, void Function(DragEndDetails)? onEndHandleDragEnd, ValueListenable<bool>? toolbarVisible, required List<TextSelectionPoint> selectionEndpoints, required TextSelectionControls? selectionControls, required TextSelectionDelegate? selectionDelegate, required ClipboardStatusNotifier? clipboardStatus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required LayerLink toolbarLayerLink, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, Offset? toolbarLocation, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
  SelectionOverlay$Mate({
    /// optionalParameters: {required BuildContext context} , defaultValue:none
    required BuildContext context,

    /// optionalParameters: {Widget? debugRequiredFor} , defaultValue:none
    Widget? debugRequiredFor,

    /// optionalParameters: {required TextSelectionHandleType startHandleType} , defaultValue:none
    required TextSelectionHandleType startHandleType,

    /// optionalParameters: {required double lineHeightAtStart} , defaultValue:none
    required double lineHeightAtStart,

    /// optionalParameters: {ValueListenable<bool>? startHandlesVisible} , defaultValue:none
    ValueListenable<bool>? startHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onStartHandleDragStart} , defaultValue:none
    ValueChanged<DragStartDetails>? onStartHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onStartHandleDragUpdate} , defaultValue:none
    ValueChanged<DragUpdateDetails>? onStartHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onStartHandleDragEnd} , defaultValue:none
    ValueChanged<DragEndDetails>? onStartHandleDragEnd,

    /// optionalParameters: {required TextSelectionHandleType endHandleType} , defaultValue:none
    required TextSelectionHandleType endHandleType,

    /// optionalParameters: {required double lineHeightAtEnd} , defaultValue:none
    required double lineHeightAtEnd,

    /// optionalParameters: {ValueListenable<bool>? endHandlesVisible} , defaultValue:none
    ValueListenable<bool>? endHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onEndHandleDragStart} , defaultValue:none
    ValueChanged<DragStartDetails>? onEndHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onEndHandleDragUpdate} , defaultValue:none
    ValueChanged<DragUpdateDetails>? onEndHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onEndHandleDragEnd} , defaultValue:none
    ValueChanged<DragEndDetails>? onEndHandleDragEnd,

    /// optionalParameters: {ValueListenable<bool>? toolbarVisible} , defaultValue:none
    ValueListenable<bool>? toolbarVisible,

    /// optionalParameters: {required List<TextSelectionPoint> selectionEndpoints} , defaultValue:none
    required List<TextSelectionPoint> selectionEndpoints,

    /// optionalParameters: {required TextSelectionControls? selectionControls} , defaultValue:none
    required TextSelectionControls? selectionControls,

    /// optionalParameters: {required TextSelectionDelegate? selectionDelegate} , defaultValue:none
    required TextSelectionDelegate? selectionDelegate,

    /// optionalParameters: {required ClipboardStatusNotifier? clipboardStatus} , defaultValue:none
    required ClipboardStatusNotifier? clipboardStatus,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , defaultValue:none
    required LayerLink startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , defaultValue:none
    required LayerLink endHandleLayerLink,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , defaultValue:none
    required LayerLink toolbarLayerLink,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , defaultValue:PrefixedIdentifier
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , defaultValue:none
    VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled} , defaultValue:PrefixedIdentifier
    TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled,
  }) : super(
          context: context,
          debugRequiredFor: debugRequiredFor,
          startHandleType: startHandleType,
          lineHeightAtStart: lineHeightAtStart,
          startHandlesVisible: startHandlesVisible,
          onStartHandleDragStart: onStartHandleDragStart,
          onStartHandleDragUpdate: onStartHandleDragUpdate,
          onStartHandleDragEnd: onStartHandleDragEnd,
          endHandleType: endHandleType,
          lineHeightAtEnd: lineHeightAtEnd,
          endHandlesVisible: endHandlesVisible,
          onEndHandleDragStart: onEndHandleDragStart,
          onEndHandleDragUpdate: onEndHandleDragUpdate,
          onEndHandleDragEnd: onEndHandleDragEnd,
          toolbarVisible: toolbarVisible,
          selectionEndpoints: selectionEndpoints,
          selectionControls: selectionControls,
          selectionDelegate: selectionDelegate,
          clipboardStatus: clipboardStatus,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          toolbarLayerLink: toolbarLayerLink,
          dragStartBehavior: dragStartBehavior,
          onSelectionHandleTapped: onSelectionHandleTapped,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateCreateName = 'SelectionOverlay';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => SelectionOverlay$Mate(
          context: p.get('context').build(),
          debugRequiredFor: p.get('debugRequiredFor').build(),
          startHandleType: p.get('startHandleType').build(),
          lineHeightAtStart: p.get('lineHeightAtStart').build(),
          startHandlesVisible: p.get('startHandlesVisible').build(),
          onStartHandleDragStart: p.get('onStartHandleDragStart').build(),
          onStartHandleDragUpdate: p.get('onStartHandleDragUpdate').build(),
          onStartHandleDragEnd: p.get('onStartHandleDragEnd').build(),
          endHandleType: p.get('endHandleType').build(),
          lineHeightAtEnd: p.get('lineHeightAtEnd').build(),
          endHandlesVisible: p.get('endHandlesVisible').build(),
          onEndHandleDragStart: p.get('onEndHandleDragStart').build(),
          onEndHandleDragUpdate: p.get('onEndHandleDragUpdate').build(),
          onEndHandleDragEnd: p.get('onEndHandleDragEnd').build(),
          toolbarVisible: p.get('toolbarVisible').build(),
          selectionEndpoints: p.get('selectionEndpoints').build(),
          selectionControls: p.get('selectionControls').build(),
          selectionDelegate: p.get('selectionDelegate').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          startHandleLayerLink: p.get('startHandleLayerLink').build(),
          endHandleLayerLink: p.get('endHandleLayerLink').build(),
          toolbarLayerLink: p.get('toolbarLayerLink').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
    mateUse('context', context, isNamed: true);
    mateUse('debugRequiredFor', debugRequiredFor, isNamed: true);
    mateUse('startHandleType', startHandleType, isNamed: true);
    mateUse('lineHeightAtStart', lineHeightAtStart, isNamed: true);
    mateUse('startHandlesVisible', startHandlesVisible, isNamed: true);
    mateUse('onStartHandleDragStart', onStartHandleDragStart, isNamed: true);
    mateUse('onStartHandleDragUpdate', onStartHandleDragUpdate, isNamed: true);
    mateUse('onStartHandleDragEnd', onStartHandleDragEnd, isNamed: true);
    mateUse('endHandleType', endHandleType, isNamed: true);
    mateUse('lineHeightAtEnd', lineHeightAtEnd, isNamed: true);
    mateUse('endHandlesVisible', endHandlesVisible, isNamed: true);
    mateUse('onEndHandleDragStart', onEndHandleDragStart, isNamed: true);
    mateUse('onEndHandleDragUpdate', onEndHandleDragUpdate, isNamed: true);
    mateUse('onEndHandleDragEnd', onEndHandleDragEnd, isNamed: true);
    mateUse('toolbarVisible', toolbarVisible, isNamed: true);
    mateUseList('selectionEndpoints', selectionEndpoints, isNamed: true);
    mateUse('selectionControls', selectionControls, isNamed: true);
    mateUse('selectionDelegate', selectionDelegate, isNamed: true);
    mateUse('clipboardStatus', clipboardStatus, isNamed: true);
    mateUse('startHandleLayerLink', startHandleLayerLink, isNamed: true);
    mateUse('endHandleLayerLink', endHandleLayerLink, isNamed: true);
    mateUse('toolbarLayerLink', toolbarLayerLink, isNamed: true);
    mateUse('dragStartBehavior', dragStartBehavior, isNamed: true);
    mateUse('onSelectionHandleTapped', onSelectionHandleTapped, isNamed: true);
    mateUse('magnifierConfiguration', magnifierConfiguration, isNamed: true);
  }
}

/// class TextSelectionGestureDetectorBuilder
class TextSelectionGestureDetectorBuilder$Mate extends TextSelectionGestureDetectorBuilder with Mate {
  /// TextSelectionGestureDetectorBuilder TextSelectionGestureDetectorBuilder({required TextSelectionGestureDetectorBuilderDelegate delegate})
  TextSelectionGestureDetectorBuilder$Mate(
      {
      /// optionalParameters: {required TextSelectionGestureDetectorBuilderDelegate delegate} , defaultValue:none
      required TextSelectionGestureDetectorBuilderDelegate delegate})
      : super(delegate: delegate) {
    mateCreateName = 'TextSelectionGestureDetectorBuilder';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => TextSelectionGestureDetectorBuilder$Mate(delegate: p.get('delegate').build());
    mateUse('delegate', delegate, isNamed: true);
  }
}

/// class TextSelectionGestureDetector extends StatefulWidget
class TextSelectionGestureDetector$Mate extends TextSelectionGestureDetector with Mate {
  /// TextSelectionGestureDetector TextSelectionGestureDetector({Key? key, void Function(TapDragDownDetails)? onTapDown, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressEnd, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapDragUpDetails)? onSingleTapUp, void Function()? onSingleTapCancel, void Function(LongPressStartDetails)? onSingleLongTapStart, void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate, void Function(LongPressEndDetails)? onSingleLongTapEnd, void Function(TapDragDownDetails)? onDoubleTapDown, void Function(TapDragStartDetails)? onDragSelectionStart, void Function(TapDragUpdateDetails)? onDragSelectionUpdate, void Function(TapDragEndDetails)? onDragSelectionEnd, HitTestBehavior? behavior, required Widget child})
  TextSelectionGestureDetector$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {void Function(TapDragDownDetails)? onTapDown} , defaultValue:none
    GestureTapDragDownCallback? onTapDown,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , defaultValue:none
    GestureForcePressStartCallback? onForcePressStart,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , defaultValue:none
    GestureForcePressEndCallback? onForcePressEnd,

    /// optionalParameters: {void Function()? onSecondaryTap} , defaultValue:none
    GestureTapCallback? onSecondaryTap,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , defaultValue:none
    GestureTapDownCallback? onSecondaryTapDown,

    /// optionalParameters: {void Function(TapDragUpDetails)? onSingleTapUp} , defaultValue:none
    GestureTapDragUpCallback? onSingleTapUp,

    /// optionalParameters: {void Function()? onSingleTapCancel} , defaultValue:none
    GestureCancelCallback? onSingleTapCancel,

    /// optionalParameters: {void Function(LongPressStartDetails)? onSingleLongTapStart} , defaultValue:none
    GestureLongPressStartCallback? onSingleLongTapStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate} , defaultValue:none
    GestureLongPressMoveUpdateCallback? onSingleLongTapMoveUpdate,

    /// optionalParameters: {void Function(LongPressEndDetails)? onSingleLongTapEnd} , defaultValue:none
    GestureLongPressEndCallback? onSingleLongTapEnd,

    /// optionalParameters: {void Function(TapDragDownDetails)? onDoubleTapDown} , defaultValue:none
    GestureTapDragDownCallback? onDoubleTapDown,

    /// optionalParameters: {void Function(TapDragStartDetails)? onDragSelectionStart} , defaultValue:none
    GestureTapDragStartCallback? onDragSelectionStart,

    /// optionalParameters: {void Function(TapDragUpdateDetails)? onDragSelectionUpdate} , defaultValue:none
    GestureTapDragUpdateCallback? onDragSelectionUpdate,

    /// optionalParameters: {void Function(TapDragEndDetails)? onDragSelectionEnd} , defaultValue:none
    GestureTapDragEndCallback? onDragSelectionEnd,

    /// optionalParameters: {HitTestBehavior? behavior} , defaultValue:none
    HitTestBehavior? behavior,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          onTapDown: onTapDown,
          onForcePressStart: onForcePressStart,
          onForcePressEnd: onForcePressEnd,
          onSecondaryTap: onSecondaryTap,
          onSecondaryTapDown: onSecondaryTapDown,
          onSingleTapUp: onSingleTapUp,
          onSingleTapCancel: onSingleTapCancel,
          onSingleLongTapStart: onSingleLongTapStart,
          onSingleLongTapMoveUpdate: onSingleLongTapMoveUpdate,
          onSingleLongTapEnd: onSingleLongTapEnd,
          onDoubleTapDown: onDoubleTapDown,
          onDragSelectionStart: onDragSelectionStart,
          onDragSelectionUpdate: onDragSelectionUpdate,
          onDragSelectionEnd: onDragSelectionEnd,
          behavior: behavior,
          child: child,
        ) {
    mateCreateName = 'TextSelectionGestureDetector';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => TextSelectionGestureDetector$Mate(
          key: p.get('key').build(),
          onTapDown: p.get('onTapDown').build(),
          onForcePressStart: p.get('onForcePressStart').build(),
          onForcePressEnd: p.get('onForcePressEnd').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSingleTapUp: p.get('onSingleTapUp').build(),
          onSingleTapCancel: p.get('onSingleTapCancel').build(),
          onSingleLongTapStart: p.get('onSingleLongTapStart').build(),
          onSingleLongTapMoveUpdate: p.get('onSingleLongTapMoveUpdate').build(),
          onSingleLongTapEnd: p.get('onSingleLongTapEnd').build(),
          onDoubleTapDown: p.get('onDoubleTapDown').build(),
          onDragSelectionStart: p.get('onDragSelectionStart').build(),
          onDragSelectionUpdate: p.get('onDragSelectionUpdate').build(),
          onDragSelectionEnd: p.get('onDragSelectionEnd').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('onTapDown', onTapDown, isNamed: true);
    mateUse('onForcePressStart', onForcePressStart, isNamed: true);
    mateUse('onForcePressEnd', onForcePressEnd, isNamed: true);
    mateUse('onSecondaryTap', onSecondaryTap, isNamed: true);
    mateUse('onSecondaryTapDown', onSecondaryTapDown, isNamed: true);
    mateUse('onSingleTapUp', onSingleTapUp, isNamed: true);
    mateUse('onSingleTapCancel', onSingleTapCancel, isNamed: true);
    mateUse('onSingleLongTapStart', onSingleLongTapStart, isNamed: true);
    mateUse('onSingleLongTapMoveUpdate', onSingleLongTapMoveUpdate, isNamed: true);
    mateUse('onSingleLongTapEnd', onSingleLongTapEnd, isNamed: true);
    mateUse('onDoubleTapDown', onDoubleTapDown, isNamed: true);
    mateUse('onDragSelectionStart', onDragSelectionStart, isNamed: true);
    mateUse('onDragSelectionUpdate', onDragSelectionUpdate, isNamed: true);
    mateUse('onDragSelectionEnd', onDragSelectionEnd, isNamed: true);
    mateUse('behavior', behavior, isNamed: true);
    mateUse('child', child, isNamed: true);
  }
}

/// class ClipboardStatusNotifier extends ValueNotifier<ClipboardStatus> with WidgetsBindingObserver
class ClipboardStatusNotifier$Mate extends ClipboardStatusNotifier with Mate {
  /// ClipboardStatusNotifier ClipboardStatusNotifier({ClipboardStatus value = ClipboardStatus.unknown})
  ClipboardStatusNotifier$Mate(
      {
      /// optionalParameters: {ClipboardStatus value = ClipboardStatus.unknown} , defaultValue:PrefixedIdentifier
      ClipboardStatus value = ClipboardStatus.unknown})
      : super(value: value) {
    mateCreateName = 'ClipboardStatusNotifier';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ClipboardStatusNotifier$Mate(value: p.get('value').build());
    mateUse('value', value, isNamed: true);
  }
}
