// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/performance_overlay.dart';import 'package:flutter/src/foundation/key.dart';import 'dart:core';import 'package:note/mate.dart' show Mate;/// class PerformanceOverlay extends LeafRenderObjectWidget
class PerformanceOverlay$Mate extends PerformanceOverlay with Mate {/// PerformanceOverlay PerformanceOverlay({Key? key, int optionsMask = 0, int rasterizerThreshold = 0, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false})
PerformanceOverlay$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {int optionsMask = 0} , hasDefaultValue:true, defaultValueCode:0
required int optionsMask, /// optionalParameters: {int rasterizerThreshold = 0} , hasDefaultValue:true, defaultValueCode:0
required int rasterizerThreshold, /// optionalParameters: {bool checkerboardRasterCacheImages = false} , hasDefaultValue:true, defaultValueCode:false
required bool checkerboardRasterCacheImages, /// optionalParameters: {bool checkerboardOffscreenLayers = false} , hasDefaultValue:true, defaultValueCode:false
required bool checkerboardOffscreenLayers, }) : super(key: key, optionsMask: optionsMask, rasterizerThreshold: rasterizerThreshold, checkerboardRasterCacheImages: checkerboardRasterCacheImages, checkerboardOffscreenLayers: checkerboardOffscreenLayers, ) { mateBuilder = (p) => PerformanceOverlay$Mate(key: p.get('key').build(), optionsMask: p.get('optionsMask').build(), rasterizerThreshold: p.get('rasterizerThreshold').build(), checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(), checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(), );
matePut('key', key);
matePut('optionsMask', optionsMask);
matePut('rasterizerThreshold', rasterizerThreshold);
matePut('checkerboardRasterCacheImages', checkerboardRasterCacheImages);
matePut('checkerboardOffscreenLayers', checkerboardOffscreenLayers); }

/// PerformanceOverlay PerformanceOverlay.allEnabled({Key? key, int rasterizerThreshold = 0, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false})
PerformanceOverlay$Mate.allEnabled({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {int rasterizerThreshold = 0} , hasDefaultValue:true, defaultValueCode:0
required int rasterizerThreshold, /// optionalParameters: {bool checkerboardRasterCacheImages = false} , hasDefaultValue:true, defaultValueCode:false
required bool checkerboardRasterCacheImages, /// optionalParameters: {bool checkerboardOffscreenLayers = false} , hasDefaultValue:true, defaultValueCode:false
required bool checkerboardOffscreenLayers, }) : super.allEnabled(key: key, rasterizerThreshold: rasterizerThreshold, checkerboardRasterCacheImages: checkerboardRasterCacheImages, checkerboardOffscreenLayers: checkerboardOffscreenLayers, ) { mateBuilder = (p) => PerformanceOverlay$Mate.allEnabled(key: p.get('key').build(), rasterizerThreshold: p.get('rasterizerThreshold').build(), checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(), checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(), );
matePut('key', key);
matePut('rasterizerThreshold', rasterizerThreshold);
matePut('checkerboardRasterCacheImages', checkerboardRasterCacheImages);
matePut('checkerboardOffscreenLayers', checkerboardOffscreenLayers); }

 }
