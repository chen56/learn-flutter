// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';import 'dart:ui';import 'dart:core';import 'package:flutter/src/services/keyboard_key.g.dart';import 'package:flutter/src/gestures/velocity_tracker.dart';import 'package:flutter/src/gestures/recognizer.dart';import 'package:note/mate.dart' show Mate;/// class TapDragDownDetails with Diagnosticable
class TapDragDownDetails$Mate extends TapDragDownDetails with Mate {/// TapDragDownDetails TapDragDownDetails({required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
TapDragDownDetails$Mate({/// optionalParameters: {required Offset globalPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset globalPosition, /// optionalParameters: {required Offset localPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset localPosition, /// optionalParameters: {PointerDeviceKind? kind} , hasDefaultValue:false, defaultValueCode:null
PointerDeviceKind? kind, /// optionalParameters: {required int consecutiveTapCount} , hasDefaultValue:false, defaultValueCode:null
required int consecutiveTapCount, /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , hasDefaultValue:false, defaultValueCode:null
required Set<LogicalKeyboardKey> keysPressedOnDown, }) : super(globalPosition: globalPosition, localPosition: localPosition, kind: kind, consecutiveTapCount: consecutiveTapCount, keysPressedOnDown: keysPressedOnDown, ) { mateBuilder = (p) => TapDragDownDetails$Mate(globalPosition: p.get('globalPosition').build(), localPosition: p.get('localPosition').build(), kind: p.get('kind').build(), consecutiveTapCount: p.get('consecutiveTapCount').build(), keysPressedOnDown: p.get('keysPressedOnDown').build(), );
matePut('globalPosition', globalPosition);
matePut('localPosition', localPosition);
matePut('kind', kind);
matePut('consecutiveTapCount', consecutiveTapCount);
matePut('keysPressedOnDown', keysPressedOnDown); }

 }
/// class TapDragUpDetails with Diagnosticable
class TapDragUpDetails$Mate extends TapDragUpDetails with Mate {/// TapDragUpDetails TapDragUpDetails({required PointerDeviceKind kind, required Offset globalPosition, required Offset localPosition, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
TapDragUpDetails$Mate({/// optionalParameters: {required PointerDeviceKind kind} , hasDefaultValue:false, defaultValueCode:null
required PointerDeviceKind kind, /// optionalParameters: {required Offset globalPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset globalPosition, /// optionalParameters: {required Offset localPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset localPosition, /// optionalParameters: {required int consecutiveTapCount} , hasDefaultValue:false, defaultValueCode:null
required int consecutiveTapCount, /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , hasDefaultValue:false, defaultValueCode:null
required Set<LogicalKeyboardKey> keysPressedOnDown, }) : super(kind: kind, globalPosition: globalPosition, localPosition: localPosition, consecutiveTapCount: consecutiveTapCount, keysPressedOnDown: keysPressedOnDown, ) { mateBuilder = (p) => TapDragUpDetails$Mate(kind: p.get('kind').build(), globalPosition: p.get('globalPosition').build(), localPosition: p.get('localPosition').build(), consecutiveTapCount: p.get('consecutiveTapCount').build(), keysPressedOnDown: p.get('keysPressedOnDown').build(), );
matePut('kind', kind);
matePut('globalPosition', globalPosition);
matePut('localPosition', localPosition);
matePut('consecutiveTapCount', consecutiveTapCount);
matePut('keysPressedOnDown', keysPressedOnDown); }

 }
/// class TapDragStartDetails with Diagnosticable
class TapDragStartDetails$Mate extends TapDragStartDetails with Mate {/// TapDragStartDetails TapDragStartDetails({Duration? sourceTimeStamp, required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
TapDragStartDetails$Mate({/// optionalParameters: {Duration? sourceTimeStamp} , hasDefaultValue:false, defaultValueCode:null
Duration? sourceTimeStamp, /// optionalParameters: {required Offset globalPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset globalPosition, /// optionalParameters: {required Offset localPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset localPosition, /// optionalParameters: {PointerDeviceKind? kind} , hasDefaultValue:false, defaultValueCode:null
PointerDeviceKind? kind, /// optionalParameters: {required int consecutiveTapCount} , hasDefaultValue:false, defaultValueCode:null
required int consecutiveTapCount, /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , hasDefaultValue:false, defaultValueCode:null
required Set<LogicalKeyboardKey> keysPressedOnDown, }) : super(sourceTimeStamp: sourceTimeStamp, globalPosition: globalPosition, localPosition: localPosition, kind: kind, consecutiveTapCount: consecutiveTapCount, keysPressedOnDown: keysPressedOnDown, ) { mateBuilder = (p) => TapDragStartDetails$Mate(sourceTimeStamp: p.get('sourceTimeStamp').build(), globalPosition: p.get('globalPosition').build(), localPosition: p.get('localPosition').build(), kind: p.get('kind').build(), consecutiveTapCount: p.get('consecutiveTapCount').build(), keysPressedOnDown: p.get('keysPressedOnDown').build(), );
matePut('sourceTimeStamp', sourceTimeStamp);
matePut('globalPosition', globalPosition);
matePut('localPosition', localPosition);
matePut('kind', kind);
matePut('consecutiveTapCount', consecutiveTapCount);
matePut('keysPressedOnDown', keysPressedOnDown); }

 }
/// class TapDragUpdateDetails with Diagnosticable
class TapDragUpdateDetails$Mate extends TapDragUpdateDetails with Mate {/// TapDragUpdateDetails TapDragUpdateDetails({Duration? sourceTimeStamp, Offset delta = Offset.zero, double? primaryDelta, required Offset globalPosition, PointerDeviceKind? kind, required Offset localPosition, required Offset offsetFromOrigin, required Offset localOffsetFromOrigin, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
TapDragUpdateDetails$Mate({/// optionalParameters: {Duration? sourceTimeStamp} , hasDefaultValue:false, defaultValueCode:null
Duration? sourceTimeStamp, /// optionalParameters: {Offset delta = Offset.zero} , hasDefaultValue:true, defaultValueCode:Offset.zero
required Offset delta, /// optionalParameters: {double? primaryDelta} , hasDefaultValue:false, defaultValueCode:null
double? primaryDelta, /// optionalParameters: {required Offset globalPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset globalPosition, /// optionalParameters: {PointerDeviceKind? kind} , hasDefaultValue:false, defaultValueCode:null
PointerDeviceKind? kind, /// optionalParameters: {required Offset localPosition} , hasDefaultValue:false, defaultValueCode:null
required Offset localPosition, /// optionalParameters: {required Offset offsetFromOrigin} , hasDefaultValue:false, defaultValueCode:null
required Offset offsetFromOrigin, /// optionalParameters: {required Offset localOffsetFromOrigin} , hasDefaultValue:false, defaultValueCode:null
required Offset localOffsetFromOrigin, /// optionalParameters: {required int consecutiveTapCount} , hasDefaultValue:false, defaultValueCode:null
required int consecutiveTapCount, /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , hasDefaultValue:false, defaultValueCode:null
required Set<LogicalKeyboardKey> keysPressedOnDown, }) : super(sourceTimeStamp: sourceTimeStamp, delta: delta, primaryDelta: primaryDelta, globalPosition: globalPosition, kind: kind, localPosition: localPosition, offsetFromOrigin: offsetFromOrigin, localOffsetFromOrigin: localOffsetFromOrigin, consecutiveTapCount: consecutiveTapCount, keysPressedOnDown: keysPressedOnDown, ) { mateBuilder = (p) => TapDragUpdateDetails$Mate(sourceTimeStamp: p.get('sourceTimeStamp').build(), delta: p.get('delta').build(), primaryDelta: p.get('primaryDelta').build(), globalPosition: p.get('globalPosition').build(), kind: p.get('kind').build(), localPosition: p.get('localPosition').build(), offsetFromOrigin: p.get('offsetFromOrigin').build(), localOffsetFromOrigin: p.get('localOffsetFromOrigin').build(), consecutiveTapCount: p.get('consecutiveTapCount').build(), keysPressedOnDown: p.get('keysPressedOnDown').build(), );
matePut('sourceTimeStamp', sourceTimeStamp);
matePut('delta', delta);
matePut('primaryDelta', primaryDelta);
matePut('globalPosition', globalPosition);
matePut('kind', kind);
matePut('localPosition', localPosition);
matePut('offsetFromOrigin', offsetFromOrigin);
matePut('localOffsetFromOrigin', localOffsetFromOrigin);
matePut('consecutiveTapCount', consecutiveTapCount);
matePut('keysPressedOnDown', keysPressedOnDown); }

 }
/// class TapDragEndDetails with Diagnosticable
class TapDragEndDetails$Mate extends TapDragEndDetails with Mate {/// TapDragEndDetails TapDragEndDetails({Velocity velocity = Velocity.zero, double? primaryVelocity, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
TapDragEndDetails$Mate({/// optionalParameters: {Velocity velocity = Velocity.zero} , hasDefaultValue:true, defaultValueCode:Velocity.zero
required Velocity velocity, /// optionalParameters: {double? primaryVelocity} , hasDefaultValue:false, defaultValueCode:null
double? primaryVelocity, /// optionalParameters: {required int consecutiveTapCount} , hasDefaultValue:false, defaultValueCode:null
required int consecutiveTapCount, /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , hasDefaultValue:false, defaultValueCode:null
required Set<LogicalKeyboardKey> keysPressedOnDown, }) : super(velocity: velocity, primaryVelocity: primaryVelocity, consecutiveTapCount: consecutiveTapCount, keysPressedOnDown: keysPressedOnDown, ) { mateBuilder = (p) => TapDragEndDetails$Mate(velocity: p.get('velocity').build(), primaryVelocity: p.get('primaryVelocity').build(), consecutiveTapCount: p.get('consecutiveTapCount').build(), keysPressedOnDown: p.get('keysPressedOnDown').build(), );
matePut('velocity', velocity);
matePut('primaryVelocity', primaryVelocity);
matePut('consecutiveTapCount', consecutiveTapCount);
matePut('keysPressedOnDown', keysPressedOnDown); }

 }
/// class TapAndDragGestureRecognizer extends OneSequenceGestureRecognizer with _TapStatusTrackerMixin
class TapAndDragGestureRecognizer$Mate extends TapAndDragGestureRecognizer with Mate {/// TapAndDragGestureRecognizer TapAndDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
TapAndDragGestureRecognizer$Mate({/// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
Object? debugOwner, /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
Set<PointerDeviceKind>? supportedDevices, /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
AllowedButtonsFilter? allowedButtonsFilter, }) : super(debugOwner: debugOwner, supportedDevices: supportedDevices, allowedButtonsFilter: allowedButtonsFilter, ) { mateBuilder = (p) => TapAndDragGestureRecognizer$Mate(debugOwner: p.get('debugOwner').build(), supportedDevices: p.get('supportedDevices').build(), allowedButtonsFilter: p.get('allowedButtonsFilter').build(), );
matePut('debugOwner', debugOwner);
matePut('supportedDevices', supportedDevices);
matePut('allowedButtonsFilter', allowedButtonsFilter); }

 }
