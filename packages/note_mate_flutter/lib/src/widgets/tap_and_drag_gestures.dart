// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/services/keyboard_key.g.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class TapDragDownDetails with Diagnosticable
class TapDragDownDetails$Mate extends TapDragDownDetails with Mate {
  /// TapDragDownDetails TapDragDownDetails({required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragDownDetails$Mate({
    /// optionalParameters: {required Offset globalPosition} , defaultValue:none
    required Offset globalPosition,

    /// optionalParameters: {required Offset localPosition} , defaultValue:none
    required Offset localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , defaultValue:none
    PointerDeviceKind? kind,

    /// optionalParameters: {required int consecutiveTapCount} , defaultValue:none
    required int consecutiveTapCount,

    /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , defaultValue:none
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {
    mateCreateName = 'TapDragDownDetails';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TapDragDownDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
          consecutiveTapCount: p.get('consecutiveTapCount').build(),
          keysPressedOnDown: p.get('keysPressedOnDown').build(),
        );
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
    mateUse('kind', kind);
    mateUse('consecutiveTapCount', consecutiveTapCount);
    mateUse('keysPressedOnDown', keysPressedOnDown);
  }
}

/// class TapDragUpDetails with Diagnosticable
class TapDragUpDetails$Mate extends TapDragUpDetails with Mate {
  /// TapDragUpDetails TapDragUpDetails({required PointerDeviceKind kind, required Offset globalPosition, required Offset localPosition, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragUpDetails$Mate({
    /// optionalParameters: {required PointerDeviceKind kind} , defaultValue:none
    required PointerDeviceKind kind,

    /// optionalParameters: {required Offset globalPosition} , defaultValue:none
    required Offset globalPosition,

    /// optionalParameters: {required Offset localPosition} , defaultValue:none
    required Offset localPosition,

    /// optionalParameters: {required int consecutiveTapCount} , defaultValue:none
    required int consecutiveTapCount,

    /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , defaultValue:none
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          kind: kind,
          globalPosition: globalPosition,
          localPosition: localPosition,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {
    mateCreateName = 'TapDragUpDetails';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TapDragUpDetails$Mate(
          kind: p.get('kind').build(),
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          consecutiveTapCount: p.get('consecutiveTapCount').build(),
          keysPressedOnDown: p.get('keysPressedOnDown').build(),
        );
    mateUse('kind', kind);
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
    mateUse('consecutiveTapCount', consecutiveTapCount);
    mateUse('keysPressedOnDown', keysPressedOnDown);
  }
}

/// class TapDragStartDetails with Diagnosticable
class TapDragStartDetails$Mate extends TapDragStartDetails with Mate {
  /// TapDragStartDetails TapDragStartDetails({Duration? sourceTimeStamp, required Offset globalPosition, required Offset localPosition, PointerDeviceKind? kind, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragStartDetails$Mate({
    /// optionalParameters: {Duration? sourceTimeStamp} , defaultValue:none
    Duration? sourceTimeStamp,

    /// optionalParameters: {required Offset globalPosition} , defaultValue:none
    required Offset globalPosition,

    /// optionalParameters: {required Offset localPosition} , defaultValue:none
    required Offset localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , defaultValue:none
    PointerDeviceKind? kind,

    /// optionalParameters: {required int consecutiveTapCount} , defaultValue:none
    required int consecutiveTapCount,

    /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , defaultValue:none
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          globalPosition: globalPosition,
          localPosition: localPosition,
          kind: kind,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {
    mateCreateName = 'TapDragStartDetails';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TapDragStartDetails$Mate(
          sourceTimeStamp: p.get('sourceTimeStamp').build(),
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
          consecutiveTapCount: p.get('consecutiveTapCount').build(),
          keysPressedOnDown: p.get('keysPressedOnDown').build(),
        );
    mateUse('sourceTimeStamp', sourceTimeStamp);
    mateUse('globalPosition', globalPosition);
    mateUse('localPosition', localPosition);
    mateUse('kind', kind);
    mateUse('consecutiveTapCount', consecutiveTapCount);
    mateUse('keysPressedOnDown', keysPressedOnDown);
  }
}

/// class TapDragUpdateDetails with Diagnosticable
class TapDragUpdateDetails$Mate extends TapDragUpdateDetails with Mate {
  /// TapDragUpdateDetails TapDragUpdateDetails({Duration? sourceTimeStamp, Offset delta = Offset.zero, double? primaryDelta, required Offset globalPosition, PointerDeviceKind? kind, required Offset localPosition, required Offset offsetFromOrigin, required Offset localOffsetFromOrigin, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragUpdateDetails$Mate({
    /// optionalParameters: {Duration? sourceTimeStamp} , defaultValue:none
    Duration? sourceTimeStamp,

    /// optionalParameters: {Offset delta = Offset.zero} , defaultValue:unprocessed
    required Offset delta,

    /// optionalParameters: {double? primaryDelta} , defaultValue:none
    double? primaryDelta,

    /// optionalParameters: {required Offset globalPosition} , defaultValue:none
    required Offset globalPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , defaultValue:none
    PointerDeviceKind? kind,

    /// optionalParameters: {required Offset localPosition} , defaultValue:none
    required Offset localPosition,

    /// optionalParameters: {required Offset offsetFromOrigin} , defaultValue:none
    required Offset offsetFromOrigin,

    /// optionalParameters: {required Offset localOffsetFromOrigin} , defaultValue:none
    required Offset localOffsetFromOrigin,

    /// optionalParameters: {required int consecutiveTapCount} , defaultValue:none
    required int consecutiveTapCount,

    /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , defaultValue:none
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          sourceTimeStamp: sourceTimeStamp,
          delta: delta,
          primaryDelta: primaryDelta,
          globalPosition: globalPosition,
          kind: kind,
          localPosition: localPosition,
          offsetFromOrigin: offsetFromOrigin,
          localOffsetFromOrigin: localOffsetFromOrigin,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {
    mateCreateName = 'TapDragUpdateDetails';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TapDragUpdateDetails$Mate(
          sourceTimeStamp: p.get('sourceTimeStamp').build(),
          delta: p.get('delta').build(),
          primaryDelta: p.get('primaryDelta').build(),
          globalPosition: p.get('globalPosition').build(),
          kind: p.get('kind').build(),
          localPosition: p.get('localPosition').build(),
          offsetFromOrigin: p.get('offsetFromOrigin').build(),
          localOffsetFromOrigin: p.get('localOffsetFromOrigin').build(),
          consecutiveTapCount: p.get('consecutiveTapCount').build(),
          keysPressedOnDown: p.get('keysPressedOnDown').build(),
        );
    mateUse('sourceTimeStamp', sourceTimeStamp);
    mateUse('delta', delta);
    mateUse('primaryDelta', primaryDelta);
    mateUse('globalPosition', globalPosition);
    mateUse('kind', kind);
    mateUse('localPosition', localPosition);
    mateUse('offsetFromOrigin', offsetFromOrigin);
    mateUse('localOffsetFromOrigin', localOffsetFromOrigin);
    mateUse('consecutiveTapCount', consecutiveTapCount);
    mateUse('keysPressedOnDown', keysPressedOnDown);
  }
}

/// class TapDragEndDetails with Diagnosticable
class TapDragEndDetails$Mate extends TapDragEndDetails with Mate {
  /// TapDragEndDetails TapDragEndDetails({Velocity velocity = Velocity.zero, double? primaryVelocity, required int consecutiveTapCount, required Set<LogicalKeyboardKey> keysPressedOnDown})
  TapDragEndDetails$Mate({
    /// optionalParameters: {Velocity velocity = Velocity.zero} , defaultValue:unprocessed
    required Velocity velocity,

    /// optionalParameters: {double? primaryVelocity} , defaultValue:none
    double? primaryVelocity,

    /// optionalParameters: {required int consecutiveTapCount} , defaultValue:none
    required int consecutiveTapCount,

    /// optionalParameters: {required Set<LogicalKeyboardKey> keysPressedOnDown} , defaultValue:none
    required Set<LogicalKeyboardKey> keysPressedOnDown,
  }) : super(
          velocity: velocity,
          primaryVelocity: primaryVelocity,
          consecutiveTapCount: consecutiveTapCount,
          keysPressedOnDown: keysPressedOnDown,
        ) {
    mateCreateName = 'TapDragEndDetails';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TapDragEndDetails$Mate(
          velocity: p.get('velocity').build(),
          primaryVelocity: p.get('primaryVelocity').build(),
          consecutiveTapCount: p.get('consecutiveTapCount').build(),
          keysPressedOnDown: p.get('keysPressedOnDown').build(),
        );
    mateUse('velocity', velocity);
    mateUse('primaryVelocity', primaryVelocity);
    mateUse('consecutiveTapCount', consecutiveTapCount);
    mateUse('keysPressedOnDown', keysPressedOnDown);
  }
}

/// class TapAndDragGestureRecognizer extends OneSequenceGestureRecognizer with _TapStatusTrackerMixin
class TapAndDragGestureRecognizer$Mate extends TapAndDragGestureRecognizer with Mate {
  /// TapAndDragGestureRecognizer TapAndDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  TapAndDragGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , defaultValue:none
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , defaultValue:none
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , defaultValue:none
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'TapAndDragGestureRecognizer';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => TapAndDragGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('debugOwner', debugOwner);
    mateUse('supportedDevices', supportedDevices);
    mateUse('allowedButtonsFilter', allowedButtonsFilter);
  }
}
