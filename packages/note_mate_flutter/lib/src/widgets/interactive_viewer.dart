// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/interactive_viewer.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:core';
import 'package:flutter/src/gestures/scale.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:vector_math/vector_math_64.dart';

/// class InteractiveViewer extends StatefulWidget
class InteractiveViewer$Mate extends InteractiveViewer with WidgetMate<InteractiveViewer$Mate> {
  /// InteractiveViewer InteractiveViewer({Key? key, Clip clipBehavior = Clip.hardEdge, bool alignPanAxis = false, PanAxis panAxis = PanAxis.free, EdgeInsets boundaryMargin = EdgeInsets.zero, bool constrained = true, double maxScale = 2.5, double minScale = 0.8, double interactionEndFrictionCoefficient = _kDrag, void Function(ScaleEndDetails)? onInteractionEnd, void Function(ScaleStartDetails)? onInteractionStart, void Function(ScaleUpdateDetails)? onInteractionUpdate, bool panEnabled = true, bool scaleEnabled = true, double scaleFactor = kDefaultMouseScrollToScaleFactor, TransformationController? transformationController, Alignment? alignment, bool trackpadScrollCausesScale = false, required Widget child})
  InteractiveViewer$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {PanAxis panAxis = PanAxis.free} , hasDefaultValue:true, defaultValueCode:PanAxis.free
    required PanAxis panAxis,

    /// optionalParameters: {EdgeInsets boundaryMargin = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsets boundaryMargin,

    /// optionalParameters: {bool constrained = true} , hasDefaultValue:true, defaultValueCode:true
    required bool constrained,

    /// optionalParameters: {double maxScale = 2.5} , hasDefaultValue:true, defaultValueCode:2.5
    required double maxScale,

    /// optionalParameters: {double minScale = 0.8} , hasDefaultValue:true, defaultValueCode:0.8
    required double minScale,

    /// optionalParameters: {double interactionEndFrictionCoefficient = _kDrag} , hasDefaultValue:true, defaultValueCode:_kDrag
    required double interactionEndFrictionCoefficient,

    /// optionalParameters: {void Function(ScaleEndDetails)? onInteractionEnd} , hasDefaultValue:false, defaultValueCode:null
    GestureScaleEndCallback? onInteractionEnd,

    /// optionalParameters: {void Function(ScaleStartDetails)? onInteractionStart} , hasDefaultValue:false, defaultValueCode:null
    GestureScaleStartCallback? onInteractionStart,

    /// optionalParameters: {void Function(ScaleUpdateDetails)? onInteractionUpdate} , hasDefaultValue:false, defaultValueCode:null
    GestureScaleUpdateCallback? onInteractionUpdate,

    /// optionalParameters: {bool panEnabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool panEnabled,

    /// optionalParameters: {bool scaleEnabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool scaleEnabled,

    /// optionalParameters: {double scaleFactor = kDefaultMouseScrollToScaleFactor} , hasDefaultValue:true, defaultValueCode:kDefaultMouseScrollToScaleFactor
    required double scaleFactor,

    /// optionalParameters: {TransformationController? transformationController} , hasDefaultValue:false, defaultValueCode:null
    TransformationController? transformationController,

    /// optionalParameters: {Alignment? alignment} , hasDefaultValue:false, defaultValueCode:null
    Alignment? alignment,

    /// optionalParameters: {bool trackpadScrollCausesScale = false} , hasDefaultValue:true, defaultValueCode:false
    required bool trackpadScrollCausesScale,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          clipBehavior: clipBehavior,
          panAxis: panAxis,
          boundaryMargin: boundaryMargin,
          constrained: constrained,
          maxScale: maxScale,
          minScale: minScale,
          interactionEndFrictionCoefficient: interactionEndFrictionCoefficient,
          onInteractionEnd: onInteractionEnd,
          onInteractionStart: onInteractionStart,
          onInteractionUpdate: onInteractionUpdate,
          panEnabled: panEnabled,
          scaleEnabled: scaleEnabled,
          scaleFactor: scaleFactor,
          transformationController: transformationController,
          alignment: alignment,
          trackpadScrollCausesScale: trackpadScrollCausesScale,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InteractiveViewer$Mate(
        key: p.get('key').build(),
        clipBehavior: p.get('clipBehavior').build(),
        panAxis: p.get('panAxis').build(),
        boundaryMargin: p.get('boundaryMargin').build(),
        constrained: p.get('constrained').build(),
        maxScale: p.get('maxScale').build(),
        minScale: p.get('minScale').build(),
        interactionEndFrictionCoefficient: p.get('interactionEndFrictionCoefficient').build(),
        onInteractionEnd: p.get('onInteractionEnd').build(),
        onInteractionStart: p.get('onInteractionStart').build(),
        onInteractionUpdate: p.get('onInteractionUpdate').build(),
        panEnabled: p.get('panEnabled').build(),
        scaleEnabled: p.get('scaleEnabled').build(),
        scaleFactor: p.get('scaleFactor').build(),
        transformationController: p.get('transformationController').build(),
        alignment: p.get('alignment').build(),
        trackpadScrollCausesScale: p.get('trackpadScrollCausesScale').build(),
        child: p.get('child').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('clipBehavior', clipBehavior);
    mateParams.put('panAxis', panAxis);
    mateParams.put('boundaryMargin', boundaryMargin);
    mateParams.put('constrained', constrained);
    mateParams.put('maxScale', maxScale);
    mateParams.put('minScale', minScale);
    mateParams.put('interactionEndFrictionCoefficient', interactionEndFrictionCoefficient);
    mateParams.put('onInteractionEnd', onInteractionEnd);
    mateParams.put('onInteractionStart', onInteractionStart);
    mateParams.put('onInteractionUpdate', onInteractionUpdate);
    mateParams.put('panEnabled', panEnabled);
    mateParams.put('scaleEnabled', scaleEnabled);
    mateParams.put('scaleFactor', scaleFactor);
    mateParams.put('transformationController', transformationController);
    mateParams.put('alignment', alignment);
    mateParams.put('trackpadScrollCausesScale', trackpadScrollCausesScale);
    mateParams.put('child', child);
  }

  /// InteractiveViewer InteractiveViewer.builder({Key? key, Clip clipBehavior = Clip.hardEdge, bool alignPanAxis = false, PanAxis panAxis = PanAxis.free, EdgeInsets boundaryMargin = EdgeInsets.zero, double maxScale = 2.5, double minScale = 0.8, double interactionEndFrictionCoefficient = _kDrag, void Function(ScaleEndDetails)? onInteractionEnd, void Function(ScaleStartDetails)? onInteractionStart, void Function(ScaleUpdateDetails)? onInteractionUpdate, bool panEnabled = true, bool scaleEnabled = true, double scaleFactor = 200.0, TransformationController? transformationController, Alignment? alignment, bool trackpadScrollCausesScale = false, required Widget Function(BuildContext, Quad) builder})
  InteractiveViewer$Mate.builder({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {PanAxis panAxis = PanAxis.free} , hasDefaultValue:true, defaultValueCode:PanAxis.free
    required PanAxis panAxis,

    /// optionalParameters: {EdgeInsets boundaryMargin = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsets boundaryMargin,

    /// optionalParameters: {double maxScale = 2.5} , hasDefaultValue:true, defaultValueCode:2.5
    required double maxScale,

    /// optionalParameters: {double minScale = 0.8} , hasDefaultValue:true, defaultValueCode:0.8
    required double minScale,

    /// optionalParameters: {double interactionEndFrictionCoefficient = _kDrag} , hasDefaultValue:true, defaultValueCode:_kDrag
    required double interactionEndFrictionCoefficient,

    /// optionalParameters: {void Function(ScaleEndDetails)? onInteractionEnd} , hasDefaultValue:false, defaultValueCode:null
    GestureScaleEndCallback? onInteractionEnd,

    /// optionalParameters: {void Function(ScaleStartDetails)? onInteractionStart} , hasDefaultValue:false, defaultValueCode:null
    GestureScaleStartCallback? onInteractionStart,

    /// optionalParameters: {void Function(ScaleUpdateDetails)? onInteractionUpdate} , hasDefaultValue:false, defaultValueCode:null
    GestureScaleUpdateCallback? onInteractionUpdate,

    /// optionalParameters: {bool panEnabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool panEnabled,

    /// optionalParameters: {bool scaleEnabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool scaleEnabled,

    /// optionalParameters: {double scaleFactor = 200.0} , hasDefaultValue:true, defaultValueCode:200.0
    required double scaleFactor,

    /// optionalParameters: {TransformationController? transformationController} , hasDefaultValue:false, defaultValueCode:null
    TransformationController? transformationController,

    /// optionalParameters: {Alignment? alignment} , hasDefaultValue:false, defaultValueCode:null
    Alignment? alignment,

    /// optionalParameters: {bool trackpadScrollCausesScale = false} , hasDefaultValue:true, defaultValueCode:false
    required bool trackpadScrollCausesScale,

    /// optionalParameters: {required Widget Function(BuildContext, Quad) builder} , hasDefaultValue:false, defaultValueCode:null
    required InteractiveViewerWidgetBuilder builder,
  }) : super.builder(
          key: key,
          clipBehavior: clipBehavior,
          panAxis: panAxis,
          boundaryMargin: boundaryMargin,
          maxScale: maxScale,
          minScale: minScale,
          interactionEndFrictionCoefficient: interactionEndFrictionCoefficient,
          onInteractionEnd: onInteractionEnd,
          onInteractionStart: onInteractionStart,
          onInteractionUpdate: onInteractionUpdate,
          panEnabled: panEnabled,
          scaleEnabled: scaleEnabled,
          scaleFactor: scaleFactor,
          transformationController: transformationController,
          alignment: alignment,
          trackpadScrollCausesScale: trackpadScrollCausesScale,
          builder: builder,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InteractiveViewer$Mate.builder(
        key: p.get('key').build(),
        clipBehavior: p.get('clipBehavior').build(),
        panAxis: p.get('panAxis').build(),
        boundaryMargin: p.get('boundaryMargin').build(),
        maxScale: p.get('maxScale').build(),
        minScale: p.get('minScale').build(),
        interactionEndFrictionCoefficient: p.get('interactionEndFrictionCoefficient').build(),
        onInteractionEnd: p.get('onInteractionEnd').build(),
        onInteractionStart: p.get('onInteractionStart').build(),
        onInteractionUpdate: p.get('onInteractionUpdate').build(),
        panEnabled: p.get('panEnabled').build(),
        scaleEnabled: p.get('scaleEnabled').build(),
        scaleFactor: p.get('scaleFactor').build(),
        transformationController: p.get('transformationController').build(),
        alignment: p.get('alignment').build(),
        trackpadScrollCausesScale: p.get('trackpadScrollCausesScale').build(),
        builder: p.get('builder').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('clipBehavior', clipBehavior);
    mateParams.put('panAxis', panAxis);
    mateParams.put('boundaryMargin', boundaryMargin);
    mateParams.put('maxScale', maxScale);
    mateParams.put('minScale', minScale);
    mateParams.put('interactionEndFrictionCoefficient', interactionEndFrictionCoefficient);
    mateParams.put('onInteractionEnd', onInteractionEnd);
    mateParams.put('onInteractionStart', onInteractionStart);
    mateParams.put('onInteractionUpdate', onInteractionUpdate);
    mateParams.put('panEnabled', panEnabled);
    mateParams.put('scaleEnabled', scaleEnabled);
    mateParams.put('scaleFactor', scaleFactor);
    mateParams.put('transformationController', transformationController);
    mateParams.put('alignment', alignment);
    mateParams.put('trackpadScrollCausesScale', trackpadScrollCausesScale);
    mateParams.put('builder', builder);
  }
}

/// class TransformationController extends ValueNotifier<Matrix4>
class TransformationController$Mate extends TransformationController with Mate<TransformationController$Mate> {
  /// TransformationController TransformationController([Matrix4? value])
  TransformationController$Mate(

      /// requiredParameters: [Matrix4? value]
      Matrix4? value)
      : super(value) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TransformationController$Mate(p.get('value').value),
    );
    mateParams.put('value', value);
  }
}
