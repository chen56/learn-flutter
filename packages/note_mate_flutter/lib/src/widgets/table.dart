// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/table.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/decoration.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/rendering/table.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/rendering/table_border.dart' as _i8;
import 'package:flutter/cupertino.dart' as _i9;

/// class TableRow
class TableRow$Mate extends _i1.TableRow with _i2.Mate {
  /// TableRow TableRow({LocalKey? key, Decoration? decoration, List<Widget> children = const <Widget>[]})
  TableRow$Mate({
    /// optionalParameters: {LocalKey? key} , default:none
    _i3.LocalKey? key,

    /// optionalParameters: {Decoration? decoration} , default:none
    _i4.Decoration? decoration,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          decoration: decoration,
          children: children,
        ) {
    mateBuilderName = 'TableRow';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TableRow$Mate(
          key: p.get('key').build(),
          decoration: p.get('decoration').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'decoration',
      decoration,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class Table extends RenderObjectWidget
class Table$Mate extends _i1.Table with _i2.Mate {
  /// Table Table({Key? key, List<TableRow> children = const <TableRow>[], Map<int, TableColumnWidth>? columnWidths, TableColumnWidth defaultColumnWidth = const FlexColumnWidth(), TextDirection? textDirection, TableBorder? border, TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top, TextBaseline? textBaseline})
  Table$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {List<TableRow> children = const <TableRow>[]} , default:unprocessed=ListLiteralImpl
    required List<_i1.TableRow> children,

    /// optionalParameters: {Map<int, TableColumnWidth>? columnWidths} , default:none
    Map<int, _i6.TableColumnWidth>? columnWidths,

    /// optionalParameters: {TableColumnWidth defaultColumnWidth = const FlexColumnWidth()} , default:unprocessed=InstanceCreationExpressionImpl
    required _i6.TableColumnWidth defaultColumnWidth,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i7.TextDirection? textDirection,

    /// optionalParameters: {TableBorder? border} , default:none
    _i8.TableBorder? border,

    /// optionalParameters: {TableCellVerticalAlignment defaultVerticalAlignment = TableCellVerticalAlignment.top} , default:processed=PrefixedIdentifierImpl
    _i6.TableCellVerticalAlignment defaultVerticalAlignment = _i9.TableCellVerticalAlignment.top,

    /// optionalParameters: {TextBaseline? textBaseline} , default:none
    _i7.TextBaseline? textBaseline,
  }) : super(
          key: key,
          children: children,
          columnWidths: columnWidths,
          defaultColumnWidth: defaultColumnWidth,
          textDirection: textDirection,
          border: border,
          defaultVerticalAlignment: defaultVerticalAlignment,
          textBaseline: textBaseline,
        ) {
    mateBuilderName = 'Table';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Table$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          columnWidths: p.get('columnWidths').build(),
          defaultColumnWidth: p.get('defaultColumnWidth').build(),
          textDirection: p.get('textDirection').build(),
          border: p.get('border').build(),
          defaultVerticalAlignment: p.get('defaultVerticalAlignment').build(),
          textBaseline: p.get('textBaseline').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'columnWidths',
      columnWidths,
      isNamed: true,
    );
    mateUse(
      'defaultColumnWidth',
      defaultColumnWidth,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'border',
      border,
      isNamed: true,
    );
    mateUse(
      'defaultVerticalAlignment',
      defaultVerticalAlignment,
      isNamed: true,
      defaultValue: _i9.TableCellVerticalAlignment.top,
    );
    mateUse(
      'textBaseline',
      textBaseline,
      isNamed: true,
    );
  }
}

/// class TableCell extends ParentDataWidget<TableCellParentData>
class TableCell$Mate extends _i1.TableCell with _i2.Mate {
  /// TableCell TableCell({Key? key, TableCellVerticalAlignment? verticalAlignment, required Widget child})
  TableCell$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {TableCellVerticalAlignment? verticalAlignment} , default:none
    _i6.TableCellVerticalAlignment? verticalAlignment,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          verticalAlignment: verticalAlignment,
          child: child,
        ) {
    mateBuilderName = 'TableCell';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TableCell$Mate(
          key: p.get('key').build(),
          verticalAlignment: p.get('verticalAlignment').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'verticalAlignment',
      verticalAlignment,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
