// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/image.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/image_provider.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/animation/animation.dart' as _i6;
import 'package:flutter/src/painting/box_fit.dart' as _i7;
import 'package:flutter/src/painting/alignment.dart' as _i8;
import 'package:flutter/src/painting/decoration_image.dart' as _i9;
import 'dart:io' as _i10;
import 'package:flutter/src/services/asset_bundle.dart' as _i11;
import 'dart:typed_data' as _i12;

/// class Image extends StatefulWidget
class Image$Mate extends _i1.Image with _i2.Mate {
  /// Image Image({Key? key, required ImageProvider<Object> image, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low})
  Image$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ImageProvider<Object> image} , default:none
    required super.image,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , default:none
    super.frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder} , default:none
    super.loadingBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , default:none
    super.errorBuilder,

    /// optionalParameters: {String? semanticLabel} , default:none
    super.semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Animation<double>? opacity} , default:none
    super.opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , default:none
    super.colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , default:none
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:unprocessed=PrefixedIdentifierImpl
    super.repeat,

    /// optionalParameters: {Rect? centerSlice} , default:none
    super.centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    super.matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , default:processed=BooleanLiteralImpl
    super.gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    super.isAntiAlias,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:unprocessed=PrefixedIdentifierImpl
    super.filterQuality,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'image': _i2.BuilderArg<_i4.ImageProvider<Object>>(
            name: 'image',
            init: image,
            isNamed: true,
          ),
          'frameBuilder': _i2.BuilderArg<_i1.ImageFrameBuilder?>(
            name: 'frameBuilder',
            init: frameBuilder,
            isNamed: true,
          ),
          'loadingBuilder': _i2.BuilderArg<_i1.ImageLoadingBuilder?>(
            name: 'loadingBuilder',
            init: loadingBuilder,
            isNamed: true,
          ),
          'errorBuilder': _i2.BuilderArg<_i1.ImageErrorWidgetBuilder?>(
            name: 'errorBuilder',
            init: errorBuilder,
            isNamed: true,
          ),
          'semanticLabel': _i2.BuilderArg<String?>(
            name: 'semanticLabel',
            init: semanticLabel,
            isNamed: true,
          ),
          'excludeFromSemantics': _i2.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<_i6.Animation<double>?>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'colorBlendMode': _i2.BuilderArg<_i5.BlendMode?>(
            name: 'colorBlendMode',
            init: colorBlendMode,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i7.BoxFit?>(
            name: 'fit',
            init: fit,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i8.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'repeat': _i2.BuilderArg<_i9.ImageRepeat>(
            name: 'repeat',
            init: repeat,
            isNamed: true,
          ),
          'centerSlice': _i2.BuilderArg<_i5.Rect?>(
            name: 'centerSlice',
            init: centerSlice,
            isNamed: true,
          ),
          'matchTextDirection': _i2.BuilderArg<bool>(
            name: 'matchTextDirection',
            init: matchTextDirection,
            isNamed: true,
            defaultValue: false,
          ),
          'gaplessPlayback': _i2.BuilderArg<bool>(
            name: 'gaplessPlayback',
            init: gaplessPlayback,
            isNamed: true,
            defaultValue: false,
          ),
          'isAntiAlias': _i2.BuilderArg<bool>(
            name: 'isAntiAlias',
            init: isAntiAlias,
            isNamed: true,
            defaultValue: false,
          ),
          'filterQuality': _i2.BuilderArg<_i5.FilterQuality>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Image';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Image$Mate(
          key: p.get('key').build(),
          image: p.get('image').build(),
          frameBuilder: p.get('frameBuilder').build(),
          loadingBuilder: p.get('loadingBuilder').build(),
          errorBuilder: p.get('errorBuilder').build(),
          semanticLabel: p.get('semanticLabel').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          color: p.get('color').build(),
          opacity: p.get('opacity').build(),
          colorBlendMode: p.get('colorBlendMode').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          centerSlice: p.get('centerSlice').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          gaplessPlayback: p.get('gaplessPlayback').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
          filterQuality: p.get('filterQuality').build(),
        );
  }

  /// Image Image.network(String src, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, FilterQuality filterQuality = FilterQuality.low, bool isAntiAlias = false, Map<String, String>? headers, int? cacheWidth, int? cacheHeight})
  Image$Mate.network(
    /// requiredParameters: String src
    super.src, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    super.scale,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , default:none
    super.frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Widget, ImageChunkEvent?)? loadingBuilder} , default:none
    super.loadingBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , default:none
    super.errorBuilder,

    /// optionalParameters: {String? semanticLabel} , default:none
    super.semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Animation<double>? opacity} , default:none
    super.opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , default:none
    super.colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , default:none
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:unprocessed=PrefixedIdentifierImpl
    super.repeat,

    /// optionalParameters: {Rect? centerSlice} , default:none
    super.centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    super.matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , default:processed=BooleanLiteralImpl
    super.gaplessPlayback,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:unprocessed=PrefixedIdentifierImpl
    super.filterQuality,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    super.isAntiAlias,

    /// optionalParameters: {Map<String, String>? headers} , default:none
    super.headers,

    /// optionalParameters: {int? cacheWidth} , default:none
    super.cacheWidth,

    /// optionalParameters: {int? cacheHeight} , default:none
    super.cacheHeight,
  })  : mateParams = {
          'src': _i2.BuilderArg<String>(
            name: 'src',
            init: src,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'scale': _i2.BuilderArg<double>(
            name: 'scale',
            init: scale,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'frameBuilder': _i2.BuilderArg<_i1.ImageFrameBuilder?>(
            name: 'frameBuilder',
            init: frameBuilder,
            isNamed: true,
          ),
          'loadingBuilder': _i2.BuilderArg<_i1.ImageLoadingBuilder?>(
            name: 'loadingBuilder',
            init: loadingBuilder,
            isNamed: true,
          ),
          'errorBuilder': _i2.BuilderArg<_i1.ImageErrorWidgetBuilder?>(
            name: 'errorBuilder',
            init: errorBuilder,
            isNamed: true,
          ),
          'semanticLabel': _i2.BuilderArg<String?>(
            name: 'semanticLabel',
            init: semanticLabel,
            isNamed: true,
          ),
          'excludeFromSemantics': _i2.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<_i6.Animation<double>?>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'colorBlendMode': _i2.BuilderArg<_i5.BlendMode?>(
            name: 'colorBlendMode',
            init: colorBlendMode,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i7.BoxFit?>(
            name: 'fit',
            init: fit,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i8.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'repeat': _i2.BuilderArg<_i9.ImageRepeat>(
            name: 'repeat',
            init: repeat,
            isNamed: true,
          ),
          'centerSlice': _i2.BuilderArg<_i5.Rect?>(
            name: 'centerSlice',
            init: centerSlice,
            isNamed: true,
          ),
          'matchTextDirection': _i2.BuilderArg<bool>(
            name: 'matchTextDirection',
            init: matchTextDirection,
            isNamed: true,
            defaultValue: false,
          ),
          'gaplessPlayback': _i2.BuilderArg<bool>(
            name: 'gaplessPlayback',
            init: gaplessPlayback,
            isNamed: true,
            defaultValue: false,
          ),
          'filterQuality': _i2.BuilderArg<_i5.FilterQuality>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'isAntiAlias': _i2.BuilderArg<bool>(
            name: 'isAntiAlias',
            init: isAntiAlias,
            isNamed: true,
            defaultValue: false,
          ),
          'headers': _i2.BuilderArg<Map<String, String>?>(
            name: 'headers',
            init: headers,
            isNamed: true,
          ),
          'cacheWidth': _i2.BuilderArg<int?>(
            name: 'cacheWidth',
            init: cacheWidth,
            isNamed: true,
          ),
          'cacheHeight': _i2.BuilderArg<int?>(
            name: 'cacheHeight',
            init: cacheHeight,
            isNamed: true,
          ),
        },
        super.network() {
    mateBuilderName = 'Image.network';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Image$Mate.network(
          p.get('src').value,
          key: p.get('key').build(),
          scale: p.get('scale').build(),
          frameBuilder: p.get('frameBuilder').build(),
          loadingBuilder: p.get('loadingBuilder').build(),
          errorBuilder: p.get('errorBuilder').build(),
          semanticLabel: p.get('semanticLabel').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          color: p.get('color').build(),
          opacity: p.get('opacity').build(),
          colorBlendMode: p.get('colorBlendMode').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          centerSlice: p.get('centerSlice').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          gaplessPlayback: p.get('gaplessPlayback').build(),
          filterQuality: p.get('filterQuality').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
          headers: p.get('headers').build(),
          cacheWidth: p.get('cacheWidth').build(),
          cacheHeight: p.get('cacheHeight').build(),
        );
  }

  /// Image Image.file(File file, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  Image$Mate.file(
    /// requiredParameters: File file
    super.file, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    super.scale,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , default:none
    super.frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , default:none
    super.errorBuilder,

    /// optionalParameters: {String? semanticLabel} , default:none
    super.semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Animation<double>? opacity} , default:none
    super.opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , default:none
    super.colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , default:none
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:unprocessed=PrefixedIdentifierImpl
    super.repeat,

    /// optionalParameters: {Rect? centerSlice} , default:none
    super.centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    super.matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , default:processed=BooleanLiteralImpl
    super.gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    super.isAntiAlias,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:unprocessed=PrefixedIdentifierImpl
    super.filterQuality,

    /// optionalParameters: {int? cacheWidth} , default:none
    super.cacheWidth,

    /// optionalParameters: {int? cacheHeight} , default:none
    super.cacheHeight,
  })  : mateParams = {
          'file': _i2.BuilderArg<_i10.File>(
            name: 'file',
            init: file,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'scale': _i2.BuilderArg<double>(
            name: 'scale',
            init: scale,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'frameBuilder': _i2.BuilderArg<_i1.ImageFrameBuilder?>(
            name: 'frameBuilder',
            init: frameBuilder,
            isNamed: true,
          ),
          'errorBuilder': _i2.BuilderArg<_i1.ImageErrorWidgetBuilder?>(
            name: 'errorBuilder',
            init: errorBuilder,
            isNamed: true,
          ),
          'semanticLabel': _i2.BuilderArg<String?>(
            name: 'semanticLabel',
            init: semanticLabel,
            isNamed: true,
          ),
          'excludeFromSemantics': _i2.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<_i6.Animation<double>?>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'colorBlendMode': _i2.BuilderArg<_i5.BlendMode?>(
            name: 'colorBlendMode',
            init: colorBlendMode,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i7.BoxFit?>(
            name: 'fit',
            init: fit,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i8.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'repeat': _i2.BuilderArg<_i9.ImageRepeat>(
            name: 'repeat',
            init: repeat,
            isNamed: true,
          ),
          'centerSlice': _i2.BuilderArg<_i5.Rect?>(
            name: 'centerSlice',
            init: centerSlice,
            isNamed: true,
          ),
          'matchTextDirection': _i2.BuilderArg<bool>(
            name: 'matchTextDirection',
            init: matchTextDirection,
            isNamed: true,
            defaultValue: false,
          ),
          'gaplessPlayback': _i2.BuilderArg<bool>(
            name: 'gaplessPlayback',
            init: gaplessPlayback,
            isNamed: true,
            defaultValue: false,
          ),
          'isAntiAlias': _i2.BuilderArg<bool>(
            name: 'isAntiAlias',
            init: isAntiAlias,
            isNamed: true,
            defaultValue: false,
          ),
          'filterQuality': _i2.BuilderArg<_i5.FilterQuality>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'cacheWidth': _i2.BuilderArg<int?>(
            name: 'cacheWidth',
            init: cacheWidth,
            isNamed: true,
          ),
          'cacheHeight': _i2.BuilderArg<int?>(
            name: 'cacheHeight',
            init: cacheHeight,
            isNamed: true,
          ),
        },
        super.file() {
    mateBuilderName = 'Image.file';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Image$Mate.file(
          p.get('file').value,
          key: p.get('key').build(),
          scale: p.get('scale').build(),
          frameBuilder: p.get('frameBuilder').build(),
          errorBuilder: p.get('errorBuilder').build(),
          semanticLabel: p.get('semanticLabel').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          color: p.get('color').build(),
          opacity: p.get('opacity').build(),
          colorBlendMode: p.get('colorBlendMode').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          centerSlice: p.get('centerSlice').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          gaplessPlayback: p.get('gaplessPlayback').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
          filterQuality: p.get('filterQuality').build(),
          cacheWidth: p.get('cacheWidth').build(),
          cacheHeight: p.get('cacheHeight').build(),
        );
  }

  /// Image Image.asset(String name, {Key? key, AssetBundle? bundle, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? scale, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, String? package, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  Image$Mate.asset(
    /// requiredParameters: String name
    super.name, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AssetBundle? bundle} , default:none
    super.bundle,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , default:none
    super.frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , default:none
    super.errorBuilder,

    /// optionalParameters: {String? semanticLabel} , default:none
    super.semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {double? scale} , default:none
    super.scale,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Animation<double>? opacity} , default:none
    super.opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , default:none
    super.colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , default:none
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:unprocessed=PrefixedIdentifierImpl
    super.repeat,

    /// optionalParameters: {Rect? centerSlice} , default:none
    super.centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    super.matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , default:processed=BooleanLiteralImpl
    super.gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    super.isAntiAlias,

    /// optionalParameters: {String? package} , default:none
    super.package,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:unprocessed=PrefixedIdentifierImpl
    super.filterQuality,

    /// optionalParameters: {int? cacheWidth} , default:none
    super.cacheWidth,

    /// optionalParameters: {int? cacheHeight} , default:none
    super.cacheHeight,
  })  : mateParams = {
          'name': _i2.BuilderArg<String>(
            name: 'name',
            init: name,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'bundle': _i2.BuilderArg<_i11.AssetBundle?>(
            name: 'bundle',
            init: bundle,
            isNamed: true,
          ),
          'frameBuilder': _i2.BuilderArg<_i1.ImageFrameBuilder?>(
            name: 'frameBuilder',
            init: frameBuilder,
            isNamed: true,
          ),
          'errorBuilder': _i2.BuilderArg<_i1.ImageErrorWidgetBuilder?>(
            name: 'errorBuilder',
            init: errorBuilder,
            isNamed: true,
          ),
          'semanticLabel': _i2.BuilderArg<String?>(
            name: 'semanticLabel',
            init: semanticLabel,
            isNamed: true,
          ),
          'excludeFromSemantics': _i2.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'scale': _i2.BuilderArg<double?>(
            name: 'scale',
            init: scale,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<_i6.Animation<double>?>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'colorBlendMode': _i2.BuilderArg<_i5.BlendMode?>(
            name: 'colorBlendMode',
            init: colorBlendMode,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i7.BoxFit?>(
            name: 'fit',
            init: fit,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i8.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'repeat': _i2.BuilderArg<_i9.ImageRepeat>(
            name: 'repeat',
            init: repeat,
            isNamed: true,
          ),
          'centerSlice': _i2.BuilderArg<_i5.Rect?>(
            name: 'centerSlice',
            init: centerSlice,
            isNamed: true,
          ),
          'matchTextDirection': _i2.BuilderArg<bool>(
            name: 'matchTextDirection',
            init: matchTextDirection,
            isNamed: true,
            defaultValue: false,
          ),
          'gaplessPlayback': _i2.BuilderArg<bool>(
            name: 'gaplessPlayback',
            init: gaplessPlayback,
            isNamed: true,
            defaultValue: false,
          ),
          'isAntiAlias': _i2.BuilderArg<bool>(
            name: 'isAntiAlias',
            init: isAntiAlias,
            isNamed: true,
            defaultValue: false,
          ),
          'package': _i2.BuilderArg<String?>(
            name: 'package',
            init: package,
            isNamed: true,
          ),
          'filterQuality': _i2.BuilderArg<_i5.FilterQuality>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'cacheWidth': _i2.BuilderArg<int?>(
            name: 'cacheWidth',
            init: cacheWidth,
            isNamed: true,
          ),
          'cacheHeight': _i2.BuilderArg<int?>(
            name: 'cacheHeight',
            init: cacheHeight,
            isNamed: true,
          ),
        },
        super.asset() {
    mateBuilderName = 'Image.asset';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Image$Mate.asset(
          p.get('name').value,
          key: p.get('key').build(),
          bundle: p.get('bundle').build(),
          frameBuilder: p.get('frameBuilder').build(),
          errorBuilder: p.get('errorBuilder').build(),
          semanticLabel: p.get('semanticLabel').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          scale: p.get('scale').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          color: p.get('color').build(),
          opacity: p.get('opacity').build(),
          colorBlendMode: p.get('colorBlendMode').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          centerSlice: p.get('centerSlice').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          gaplessPlayback: p.get('gaplessPlayback').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
          package: p.get('package').build(),
          filterQuality: p.get('filterQuality').build(),
          cacheWidth: p.get('cacheWidth').build(),
          cacheHeight: p.get('cacheHeight').build(),
        );
  }

  /// Image Image.memory(Uint8List bytes, {Key? key, double scale = 1.0, Widget Function(BuildContext, Widget, int?, bool)? frameBuilder, Widget Function(BuildContext, Object, StackTrace?)? errorBuilder, String? semanticLabel, bool excludeFromSemantics = false, double? width, double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool gaplessPlayback = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low, int? cacheWidth, int? cacheHeight})
  Image$Mate.memory(
    /// requiredParameters: Uint8List bytes
    super.bytes, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    super.scale,

    /// optionalParameters: {Widget Function(BuildContext, Widget, int?, bool)? frameBuilder} , default:none
    super.frameBuilder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? errorBuilder} , default:none
    super.errorBuilder,

    /// optionalParameters: {String? semanticLabel} , default:none
    super.semanticLabel,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Animation<double>? opacity} , default:none
    super.opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , default:none
    super.colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , default:none
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:unprocessed=PrefixedIdentifierImpl
    super.repeat,

    /// optionalParameters: {Rect? centerSlice} , default:none
    super.centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    super.matchTextDirection,

    /// optionalParameters: {bool gaplessPlayback = false} , default:processed=BooleanLiteralImpl
    super.gaplessPlayback,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    super.isAntiAlias,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:unprocessed=PrefixedIdentifierImpl
    super.filterQuality,

    /// optionalParameters: {int? cacheWidth} , default:none
    super.cacheWidth,

    /// optionalParameters: {int? cacheHeight} , default:none
    super.cacheHeight,
  })  : mateParams = {
          'bytes': _i2.BuilderArg<_i12.Uint8List>(
            name: 'bytes',
            init: bytes,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'scale': _i2.BuilderArg<double>(
            name: 'scale',
            init: scale,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'frameBuilder': _i2.BuilderArg<_i1.ImageFrameBuilder?>(
            name: 'frameBuilder',
            init: frameBuilder,
            isNamed: true,
          ),
          'errorBuilder': _i2.BuilderArg<_i1.ImageErrorWidgetBuilder?>(
            name: 'errorBuilder',
            init: errorBuilder,
            isNamed: true,
          ),
          'semanticLabel': _i2.BuilderArg<String?>(
            name: 'semanticLabel',
            init: semanticLabel,
            isNamed: true,
          ),
          'excludeFromSemantics': _i2.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<_i6.Animation<double>?>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'colorBlendMode': _i2.BuilderArg<_i5.BlendMode?>(
            name: 'colorBlendMode',
            init: colorBlendMode,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i7.BoxFit?>(
            name: 'fit',
            init: fit,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i8.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'repeat': _i2.BuilderArg<_i9.ImageRepeat>(
            name: 'repeat',
            init: repeat,
            isNamed: true,
          ),
          'centerSlice': _i2.BuilderArg<_i5.Rect?>(
            name: 'centerSlice',
            init: centerSlice,
            isNamed: true,
          ),
          'matchTextDirection': _i2.BuilderArg<bool>(
            name: 'matchTextDirection',
            init: matchTextDirection,
            isNamed: true,
            defaultValue: false,
          ),
          'gaplessPlayback': _i2.BuilderArg<bool>(
            name: 'gaplessPlayback',
            init: gaplessPlayback,
            isNamed: true,
            defaultValue: false,
          ),
          'isAntiAlias': _i2.BuilderArg<bool>(
            name: 'isAntiAlias',
            init: isAntiAlias,
            isNamed: true,
            defaultValue: false,
          ),
          'filterQuality': _i2.BuilderArg<_i5.FilterQuality>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'cacheWidth': _i2.BuilderArg<int?>(
            name: 'cacheWidth',
            init: cacheWidth,
            isNamed: true,
          ),
          'cacheHeight': _i2.BuilderArg<int?>(
            name: 'cacheHeight',
            init: cacheHeight,
            isNamed: true,
          ),
        },
        super.memory() {
    mateBuilderName = 'Image.memory';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Image$Mate.memory(
          p.get('bytes').value,
          key: p.get('key').build(),
          scale: p.get('scale').build(),
          frameBuilder: p.get('frameBuilder').build(),
          errorBuilder: p.get('errorBuilder').build(),
          semanticLabel: p.get('semanticLabel').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          color: p.get('color').build(),
          opacity: p.get('opacity').build(),
          colorBlendMode: p.get('colorBlendMode').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          centerSlice: p.get('centerSlice').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          gaplessPlayback: p.get('gaplessPlayback').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
          filterQuality: p.get('filterQuality').build(),
          cacheWidth: p.get('cacheWidth').build(),
          cacheHeight: p.get('cacheHeight').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
