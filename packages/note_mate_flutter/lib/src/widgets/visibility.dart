// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/visibility.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';

/// class Visibility extends StatelessWidget
class Visibility$Mate extends Visibility with Mate {
  /// Visibility Visibility({Key? key, required Widget child, Widget replacement = const SizedBox.shrink(), bool visible = true, bool maintainState = false, bool maintainAnimation = false, bool maintainSize = false, bool maintainSemantics = false, bool maintainInteractivity = false})
  Visibility$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {Widget replacement = const SizedBox.shrink()} , hasDefaultValue:true, defaultValueCode:const SizedBox.shrink()
    required Widget replacement,

    /// optionalParameters: {bool visible = true} , hasDefaultValue:true, defaultValueCode:true
    required bool visible,

    /// optionalParameters: {bool maintainState = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainState,

    /// optionalParameters: {bool maintainAnimation = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainAnimation,

    /// optionalParameters: {bool maintainSize = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainSize,

    /// optionalParameters: {bool maintainSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainSemantics,

    /// optionalParameters: {bool maintainInteractivity = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainInteractivity,
  }) : super(
          key: key,
          child: child,
          replacement: replacement,
          visible: visible,
          maintainState: maintainState,
          maintainAnimation: maintainAnimation,
          maintainSize: maintainSize,
          maintainSemantics: maintainSemantics,
          maintainInteractivity: maintainInteractivity,
        ) {
    mateBuilder = (p) => Visibility$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          replacement: p.get('replacement').build(),
          visible: p.get('visible').build(),
          maintainState: p.get('maintainState').build(),
          maintainAnimation: p.get('maintainAnimation').build(),
          maintainSize: p.get('maintainSize').build(),
          maintainSemantics: p.get('maintainSemantics').build(),
          maintainInteractivity: p.get('maintainInteractivity').build(),
        );
    matePut('key', key);
    matePut('child', child);
    matePut('replacement', replacement);
    matePut('visible', visible);
    matePut('maintainState', maintainState);
    matePut('maintainAnimation', maintainAnimation);
    matePut('maintainSize', maintainSize);
    matePut('maintainSemantics', maintainSemantics);
    matePut('maintainInteractivity', maintainInteractivity);
  }

  /// Visibility Visibility.maintain({Key? key, required Widget child, Widget replacement = const SizedBox.shrink(), bool visible = true})
  Visibility$Mate.maintain({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {Widget replacement = const SizedBox.shrink()} , hasDefaultValue:true, defaultValueCode:const SizedBox.shrink()
    required Widget replacement,

    /// optionalParameters: {bool visible = true} , hasDefaultValue:true, defaultValueCode:true
    required bool visible,
  }) : super.maintain(
          key: key,
          child: child,
          replacement: replacement,
          visible: visible,
        ) {
    mateBuilder = (p) => Visibility$Mate.maintain(
          key: p.get('key').build(),
          child: p.get('child').build(),
          replacement: p.get('replacement').build(),
          visible: p.get('visible').build(),
        );
    matePut('key', key);
    matePut('child', child);
    matePut('replacement', replacement);
    matePut('visible', visible);
  }
}

/// class SliverVisibility extends StatelessWidget
class SliverVisibility$Mate extends SliverVisibility with Mate {
  /// SliverVisibility SliverVisibility({Key? key, required Widget sliver, Widget replacementSliver = const SliverToBoxAdapter(), bool visible = true, bool maintainState = false, bool maintainAnimation = false, bool maintainSize = false, bool maintainSemantics = false, bool maintainInteractivity = false})
  SliverVisibility$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget sliver} , hasDefaultValue:false, defaultValueCode:null
    required Widget sliver,

    /// optionalParameters: {Widget replacementSliver = const SliverToBoxAdapter()} , hasDefaultValue:true, defaultValueCode:const SliverToBoxAdapter()
    required Widget replacementSliver,

    /// optionalParameters: {bool visible = true} , hasDefaultValue:true, defaultValueCode:true
    required bool visible,

    /// optionalParameters: {bool maintainState = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainState,

    /// optionalParameters: {bool maintainAnimation = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainAnimation,

    /// optionalParameters: {bool maintainSize = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainSize,

    /// optionalParameters: {bool maintainSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainSemantics,

    /// optionalParameters: {bool maintainInteractivity = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainInteractivity,
  }) : super(
          key: key,
          sliver: sliver,
          replacementSliver: replacementSliver,
          visible: visible,
          maintainState: maintainState,
          maintainAnimation: maintainAnimation,
          maintainSize: maintainSize,
          maintainSemantics: maintainSemantics,
          maintainInteractivity: maintainInteractivity,
        ) {
    mateBuilder = (p) => SliverVisibility$Mate(
          key: p.get('key').build(),
          sliver: p.get('sliver').build(),
          replacementSliver: p.get('replacementSliver').build(),
          visible: p.get('visible').build(),
          maintainState: p.get('maintainState').build(),
          maintainAnimation: p.get('maintainAnimation').build(),
          maintainSize: p.get('maintainSize').build(),
          maintainSemantics: p.get('maintainSemantics').build(),
          maintainInteractivity: p.get('maintainInteractivity').build(),
        );
    matePut('key', key);
    matePut('sliver', sliver);
    matePut('replacementSliver', replacementSliver);
    matePut('visible', visible);
    matePut('maintainState', maintainState);
    matePut('maintainAnimation', maintainAnimation);
    matePut('maintainSize', maintainSize);
    matePut('maintainSemantics', maintainSemantics);
    matePut('maintainInteractivity', maintainInteractivity);
  }

  /// SliverVisibility SliverVisibility.maintain({Key? key, required Widget sliver, Widget replacementSliver = const SliverToBoxAdapter(), bool visible = true})
  SliverVisibility$Mate.maintain({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget sliver} , hasDefaultValue:false, defaultValueCode:null
    required Widget sliver,

    /// optionalParameters: {Widget replacementSliver = const SliverToBoxAdapter()} , hasDefaultValue:true, defaultValueCode:const SliverToBoxAdapter()
    required Widget replacementSliver,

    /// optionalParameters: {bool visible = true} , hasDefaultValue:true, defaultValueCode:true
    required bool visible,
  }) : super.maintain(
          key: key,
          sliver: sliver,
          replacementSliver: replacementSliver,
          visible: visible,
        ) {
    mateBuilder = (p) => SliverVisibility$Mate.maintain(
          key: p.get('key').build(),
          sliver: p.get('sliver').build(),
          replacementSliver: p.get('replacementSliver').build(),
          visible: p.get('visible').build(),
        );
    matePut('key', key);
    matePut('sliver', sliver);
    matePut('replacementSliver', replacementSliver);
    matePut('visible', visible);
  }
}
