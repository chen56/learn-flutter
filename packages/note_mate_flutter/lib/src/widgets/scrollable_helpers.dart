// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/scrollable_helpers.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/painting/basic_types.dart' as _i3;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i4;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/src/widgets/scrollable.dart' as _i7;
import 'package:flutter/src/widgets/scroll_metrics.dart' as _i8;
import 'package:flutter/cupertino.dart' as _i9;

/// class ScrollableDetails
class ScrollableDetails$Mate extends _i1.ScrollableDetails with _i2.Mate {
  /// ScrollableDetails ScrollableDetails({required AxisDirection direction, ScrollController? controller, ScrollPhysics? physics, Clip? clipBehavior, Clip? decorationClipBehavior})
  ScrollableDetails$Mate({
    /// optionalParameters: {required AxisDirection direction} , default:none
    required _i3.AxisDirection direction,

    /// optionalParameters: {ScrollController? controller} , default:none
    _i4.ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    _i5.ScrollPhysics? physics,

    /// optionalParameters: {Clip? decorationClipBehavior} , default:none
    _i6.Clip? decorationClipBehavior,
  }) : super(
          direction: direction,
          controller: controller,
          physics: physics,
          decorationClipBehavior: decorationClipBehavior,
        ) {
    mateBuilderName = 'ScrollableDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollableDetails$Mate(
          direction: p.get('direction').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          decorationClipBehavior: p.get('decorationClipBehavior').build(),
        );
    mateUse(
      'direction',
      direction,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'decorationClipBehavior',
      decorationClipBehavior,
      isNamed: true,
    );
  }

  /// ScrollableDetails ScrollableDetails.vertical({bool reverse = false, ScrollController? controller, ScrollPhysics? physics, Clip? decorationClipBehavior})
  ScrollableDetails$Mate.vertical({
    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , default:none
    _i4.ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    _i5.ScrollPhysics? physics,

    /// optionalParameters: {Clip? decorationClipBehavior} , default:none
    _i6.Clip? decorationClipBehavior,
  }) : super.vertical(
          reverse: reverse,
          controller: controller,
          physics: physics,
          decorationClipBehavior: decorationClipBehavior,
        ) {
    mateBuilderName = 'ScrollableDetails.vertical';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollableDetails$Mate.vertical(
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          decorationClipBehavior: p.get('decorationClipBehavior').build(),
        );
    mateUse(
      'reverse',
      reverse,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'decorationClipBehavior',
      decorationClipBehavior,
      isNamed: true,
    );
  }

  /// ScrollableDetails ScrollableDetails.horizontal({bool reverse = false, ScrollController? controller, ScrollPhysics? physics, Clip? decorationClipBehavior})
  ScrollableDetails$Mate.horizontal({
    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    bool reverse = false,

    /// optionalParameters: {ScrollController? controller} , default:none
    _i4.ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    _i5.ScrollPhysics? physics,

    /// optionalParameters: {Clip? decorationClipBehavior} , default:none
    _i6.Clip? decorationClipBehavior,
  }) : super.horizontal(
          reverse: reverse,
          controller: controller,
          physics: physics,
          decorationClipBehavior: decorationClipBehavior,
        ) {
    mateBuilderName = 'ScrollableDetails.horizontal';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollableDetails$Mate.horizontal(
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          decorationClipBehavior: p.get('decorationClipBehavior').build(),
        );
    mateUse(
      'reverse',
      reverse,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'decorationClipBehavior',
      decorationClipBehavior,
      isNamed: true,
    );
  }
}

/// class EdgeDraggingAutoScroller
class EdgeDraggingAutoScroller$Mate extends _i1.EdgeDraggingAutoScroller with _i2.Mate {
  /// EdgeDraggingAutoScroller EdgeDraggingAutoScroller(ScrollableState scrollable, {void Function()? onScrollViewScrolled, double velocityScalar = _kDefaultAutoScrollVelocityScalar})
  EdgeDraggingAutoScroller$Mate(
    /// requiredParameters: ScrollableState scrollable
    _i7.ScrollableState scrollable, {
    /// optionalParameters: {void Function()? onScrollViewScrolled} , default:none
    _i6.VoidCallback? onScrollViewScrolled,

    /// optionalParameters: {double velocityScalar = _kDefaultAutoScrollVelocityScalar} , default:unprocessed=SimpleIdentifierImpl
    required double velocityScalar,
  }) : super(
          scrollable,
          onScrollViewScrolled: onScrollViewScrolled,
          velocityScalar: velocityScalar,
        ) {
    mateBuilderName = 'EdgeDraggingAutoScroller';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => EdgeDraggingAutoScroller$Mate(
          p.get('scrollable').value,
          onScrollViewScrolled: p.get('onScrollViewScrolled').build(),
          velocityScalar: p.get('velocityScalar').build(),
        );
    mateUse(
      'scrollable',
      scrollable,
      isNamed: false,
    );
    mateUse(
      'onScrollViewScrolled',
      onScrollViewScrolled,
      isNamed: true,
    );
    mateUse(
      'velocityScalar',
      velocityScalar,
      isNamed: true,
    );
  }
}

/// class ScrollIncrementDetails
class ScrollIncrementDetails$Mate extends _i1.ScrollIncrementDetails with _i2.Mate {
  /// ScrollIncrementDetails ScrollIncrementDetails({required ScrollIncrementType type, required ScrollMetrics metrics})
  ScrollIncrementDetails$Mate({
    /// optionalParameters: {required ScrollIncrementType type} , default:none
    required _i1.ScrollIncrementType type,

    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required _i8.ScrollMetrics metrics,
  }) : super(
          type: type,
          metrics: metrics,
        ) {
    mateBuilderName = 'ScrollIncrementDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollIncrementDetails$Mate(
          type: p.get('type').build(),
          metrics: p.get('metrics').build(),
        );
    mateUse(
      'type',
      type,
      isNamed: true,
    );
    mateUse(
      'metrics',
      metrics,
      isNamed: true,
    );
  }
}

/// class ScrollIntent extends Intent
class ScrollIntent$Mate extends _i1.ScrollIntent with _i2.Mate {
  /// ScrollIntent ScrollIntent({required AxisDirection direction, ScrollIncrementType type = ScrollIncrementType.line})
  ScrollIntent$Mate({
    /// optionalParameters: {required AxisDirection direction} , default:none
    required _i3.AxisDirection direction,

    /// optionalParameters: {ScrollIncrementType type = ScrollIncrementType.line} , default:processed=PrefixedIdentifierImpl
    _i1.ScrollIncrementType type = _i9.ScrollIncrementType.line,
  }) : super(
          direction: direction,
          type: type,
        ) {
    mateBuilderName = 'ScrollIntent';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollIntent$Mate(
          direction: p.get('direction').build(),
          type: p.get('type').build(),
        );
    mateUse(
      'direction',
      direction,
      isNamed: true,
    );
    mateUse(
      'type',
      type,
      isNamed: true,
      defaultValue: _i9.ScrollIncrementType.line,
    );
  }
}
