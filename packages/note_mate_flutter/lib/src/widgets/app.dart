// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/app.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/navigator.dart' as _i5;
import 'package:flutter/src/painting/text_style.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/widgets/localizations.dart' as _i8;
import 'package:flutter/src/widgets/widget_inspector.dart' as _i9;
import 'package:flutter/src/widgets/shortcuts.dart' as _i10;
import 'package:flutter/src/widgets/actions.dart' as _i11;
import 'package:flutter/src/widgets/router.dart' as _i12;

/// class WidgetsApp extends StatefulWidget
class WidgetsApp$Mate extends _i1.WidgetsApp with _i2.Mate {
  /// WidgetsApp WidgetsApp({Key? key, GlobalKey<NavigatorState>? navigatorKey, Route<dynamic>? Function(RouteSettings)? onGenerateRoute, List<Route<dynamic>> Function(String)? onGenerateInitialRoutes, Route<dynamic>? Function(RouteSettings)? onUnknownRoute, List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[], String? initialRoute, PageRoute<T> Function<T>(RouteSettings, Widget Function(BuildContext))? pageRouteBuilder, Widget? home, Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}, Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, TextStyle? textStyle, required Color color, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowWidgetInspector = false, bool debugShowCheckedModeBanner = true, Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, bool useInheritedMediaQuery = false})
  WidgetsApp$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {GlobalKey<NavigatorState>? navigatorKey} , default:none
    _i4.GlobalKey<_i5.NavigatorState>? navigatorKey,

    /// optionalParameters: {Route<dynamic>? Function(RouteSettings)? onGenerateRoute} , default:none
    _i5.RouteFactory? onGenerateRoute,

    /// optionalParameters: {List<Route<dynamic>> Function(String)? onGenerateInitialRoutes} , default:none
    _i1.InitialRouteListFactory? onGenerateInitialRoutes,

    /// optionalParameters: {Route<dynamic>? Function(RouteSettings)? onUnknownRoute} , default:none
    _i5.RouteFactory? onUnknownRoute,

    /// optionalParameters: {List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.NavigatorObserver> navigatorObservers,

    /// optionalParameters: {String? initialRoute} , default:none
    String? initialRoute,

    /// optionalParameters: {PageRoute<T> Function<T>(RouteSettings, Widget Function(BuildContext))? pageRouteBuilder} , default:none
    _i1.PageRouteFactory? pageRouteBuilder,

    /// optionalParameters: {Widget? home} , default:none
    _i4.Widget? home,

    /// optionalParameters: {Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}} , default:unprocessed=SetOrMapLiteralImpl
    required Map<String, _i4.WidgetBuilder> routes,

    /// optionalParameters: {Widget Function(BuildContext, Widget?)? builder} , default:none
    _i4.TransitionBuilder? builder,

    /// optionalParameters: {String title = ''} , default:processed=SimpleStringLiteralImpl
    String title = '',

    /// optionalParameters: {String Function(BuildContext)? onGenerateTitle} , default:none
    _i1.GenerateAppTitle? onGenerateTitle,

    /// optionalParameters: {TextStyle? textStyle} , default:none
    _i6.TextStyle? textStyle,

    /// optionalParameters: {required Color color} , default:none
    required _i7.Color color,

    /// optionalParameters: {Locale? locale} , default:none
    _i7.Locale? locale,

    /// optionalParameters: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates} , default:none
    Iterable<_i8.LocalizationsDelegate<dynamic>>? localizationsDelegates,

    /// optionalParameters: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback} , default:none
    _i1.LocaleListResolutionCallback? localeListResolutionCallback,

    /// optionalParameters: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback} , default:none
    _i1.LocaleResolutionCallback? localeResolutionCallback,

    /// optionalParameters: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]} , default:unprocessed=ListLiteralImpl
    required Iterable<_i7.Locale> supportedLocales,

    /// optionalParameters: {bool showPerformanceOverlay = false} , default:processed=BooleanLiteralImpl
    bool showPerformanceOverlay = false,

    /// optionalParameters: {bool checkerboardRasterCacheImages = false} , default:processed=BooleanLiteralImpl
    bool checkerboardRasterCacheImages = false,

    /// optionalParameters: {bool checkerboardOffscreenLayers = false} , default:processed=BooleanLiteralImpl
    bool checkerboardOffscreenLayers = false,

    /// optionalParameters: {bool showSemanticsDebugger = false} , default:processed=BooleanLiteralImpl
    bool showSemanticsDebugger = false,

    /// optionalParameters: {bool debugShowWidgetInspector = false} , default:processed=BooleanLiteralImpl
    bool debugShowWidgetInspector = false,

    /// optionalParameters: {bool debugShowCheckedModeBanner = true} , default:processed=BooleanLiteralImpl
    bool debugShowCheckedModeBanner = true,

    /// optionalParameters: {Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder} , default:none
    _i9.InspectorSelectButtonBuilder? inspectorSelectButtonBuilder,

    /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , default:none
    Map<_i10.ShortcutActivator, _i11.Intent>? shortcuts,

    /// optionalParameters: {Map<Type, Action<Intent>>? actions} , default:none
    Map<Type, _i11.Action<_i11.Intent>>? actions,

    /// optionalParameters: {String? restorationScopeId} , default:none
    String? restorationScopeId,
  }) : super(
          key: key,
          navigatorKey: navigatorKey,
          onGenerateRoute: onGenerateRoute,
          onGenerateInitialRoutes: onGenerateInitialRoutes,
          onUnknownRoute: onUnknownRoute,
          navigatorObservers: navigatorObservers,
          initialRoute: initialRoute,
          pageRouteBuilder: pageRouteBuilder,
          home: home,
          routes: routes,
          builder: builder,
          title: title,
          onGenerateTitle: onGenerateTitle,
          textStyle: textStyle,
          color: color,
          locale: locale,
          localizationsDelegates: localizationsDelegates,
          localeListResolutionCallback: localeListResolutionCallback,
          localeResolutionCallback: localeResolutionCallback,
          supportedLocales: supportedLocales,
          showPerformanceOverlay: showPerformanceOverlay,
          checkerboardRasterCacheImages: checkerboardRasterCacheImages,
          checkerboardOffscreenLayers: checkerboardOffscreenLayers,
          showSemanticsDebugger: showSemanticsDebugger,
          debugShowWidgetInspector: debugShowWidgetInspector,
          debugShowCheckedModeBanner: debugShowCheckedModeBanner,
          inspectorSelectButtonBuilder: inspectorSelectButtonBuilder,
          shortcuts: shortcuts,
          actions: actions,
          restorationScopeId: restorationScopeId,
        ) {
    mateBuilderName = 'WidgetsApp';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => WidgetsApp$Mate(
          key: p.get('key').build(),
          navigatorKey: p.get('navigatorKey').build(),
          onGenerateRoute: p.get('onGenerateRoute').build(),
          onGenerateInitialRoutes: p.get('onGenerateInitialRoutes').build(),
          onUnknownRoute: p.get('onUnknownRoute').build(),
          navigatorObservers: p.get('navigatorObservers').build(),
          initialRoute: p.get('initialRoute').build(),
          pageRouteBuilder: p.get('pageRouteBuilder').build(),
          home: p.get('home').build(),
          routes: p.get('routes').build(),
          builder: p.get('builder').build(),
          title: p.get('title').build(),
          onGenerateTitle: p.get('onGenerateTitle').build(),
          textStyle: p.get('textStyle').build(),
          color: p.get('color').build(),
          locale: p.get('locale').build(),
          localizationsDelegates: p.get('localizationsDelegates').build(),
          localeListResolutionCallback: p.get('localeListResolutionCallback').build(),
          localeResolutionCallback: p.get('localeResolutionCallback').build(),
          supportedLocales: p.get('supportedLocales').build(),
          showPerformanceOverlay: p.get('showPerformanceOverlay').build(),
          checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(),
          checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(),
          showSemanticsDebugger: p.get('showSemanticsDebugger').build(),
          debugShowWidgetInspector: p.get('debugShowWidgetInspector').build(),
          debugShowCheckedModeBanner: p.get('debugShowCheckedModeBanner').build(),
          inspectorSelectButtonBuilder: p.get('inspectorSelectButtonBuilder').build(),
          shortcuts: p.get('shortcuts').build(),
          actions: p.get('actions').build(),
          restorationScopeId: p.get('restorationScopeId').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'navigatorKey',
      navigatorKey,
      isNamed: true,
    );
    mateUse(
      'onGenerateRoute',
      onGenerateRoute,
      isNamed: true,
    );
    mateUse(
      'onGenerateInitialRoutes',
      onGenerateInitialRoutes,
      isNamed: true,
    );
    mateUse(
      'onUnknownRoute',
      onUnknownRoute,
      isNamed: true,
    );
    mateUse(
      'navigatorObservers',
      navigatorObservers,
      isNamed: true,
    );
    mateUse(
      'initialRoute',
      initialRoute,
      isNamed: true,
    );
    mateUse(
      'pageRouteBuilder',
      pageRouteBuilder,
      isNamed: true,
    );
    mateUse(
      'home',
      home,
      isNamed: true,
    );
    mateUse(
      'routes',
      routes,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
    mateUse(
      'title',
      title,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'onGenerateTitle',
      onGenerateTitle,
      isNamed: true,
    );
    mateUse(
      'textStyle',
      textStyle,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'locale',
      locale,
      isNamed: true,
    );
    mateUse(
      'localizationsDelegates',
      localizationsDelegates,
      isNamed: true,
    );
    mateUse(
      'localeListResolutionCallback',
      localeListResolutionCallback,
      isNamed: true,
    );
    mateUse(
      'localeResolutionCallback',
      localeResolutionCallback,
      isNamed: true,
    );
    mateUse(
      'supportedLocales',
      supportedLocales,
      isNamed: true,
    );
    mateUse(
      'showPerformanceOverlay',
      showPerformanceOverlay,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'checkerboardRasterCacheImages',
      checkerboardRasterCacheImages,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'checkerboardOffscreenLayers',
      checkerboardOffscreenLayers,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'showSemanticsDebugger',
      showSemanticsDebugger,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'debugShowWidgetInspector',
      debugShowWidgetInspector,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'debugShowCheckedModeBanner',
      debugShowCheckedModeBanner,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'inspectorSelectButtonBuilder',
      inspectorSelectButtonBuilder,
      isNamed: true,
    );
    mateUse(
      'shortcuts',
      shortcuts,
      isNamed: true,
    );
    mateUse(
      'actions',
      actions,
      isNamed: true,
    );
    mateUse(
      'restorationScopeId',
      restorationScopeId,
      isNamed: true,
    );
  }

  /// WidgetsApp WidgetsApp.router({Key? key, RouteInformationProvider? routeInformationProvider, RouteInformationParser<Object>? routeInformationParser, RouterDelegate<Object>? routerDelegate, RouterConfig<Object>? routerConfig, BackButtonDispatcher? backButtonDispatcher, Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, TextStyle? textStyle, required Color color, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowWidgetInspector = false, bool debugShowCheckedModeBanner = true, Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, bool useInheritedMediaQuery = false})
  WidgetsApp$Mate.router({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {RouteInformationProvider? routeInformationProvider} , default:none
    _i12.RouteInformationProvider? routeInformationProvider,

    /// optionalParameters: {RouteInformationParser<Object>? routeInformationParser} , default:none
    _i12.RouteInformationParser<Object>? routeInformationParser,

    /// optionalParameters: {RouterDelegate<Object>? routerDelegate} , default:none
    _i12.RouterDelegate<Object>? routerDelegate,

    /// optionalParameters: {RouterConfig<Object>? routerConfig} , default:none
    _i12.RouterConfig<Object>? routerConfig,

    /// optionalParameters: {BackButtonDispatcher? backButtonDispatcher} , default:none
    _i12.BackButtonDispatcher? backButtonDispatcher,

    /// optionalParameters: {Widget Function(BuildContext, Widget?)? builder} , default:none
    _i4.TransitionBuilder? builder,

    /// optionalParameters: {String title = ''} , default:processed=SimpleStringLiteralImpl
    String title = '',

    /// optionalParameters: {String Function(BuildContext)? onGenerateTitle} , default:none
    _i1.GenerateAppTitle? onGenerateTitle,

    /// optionalParameters: {TextStyle? textStyle} , default:none
    _i6.TextStyle? textStyle,

    /// optionalParameters: {required Color color} , default:none
    required _i7.Color color,

    /// optionalParameters: {Locale? locale} , default:none
    _i7.Locale? locale,

    /// optionalParameters: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates} , default:none
    Iterable<_i8.LocalizationsDelegate<dynamic>>? localizationsDelegates,

    /// optionalParameters: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback} , default:none
    _i1.LocaleListResolutionCallback? localeListResolutionCallback,

    /// optionalParameters: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback} , default:none
    _i1.LocaleResolutionCallback? localeResolutionCallback,

    /// optionalParameters: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]} , default:unprocessed=ListLiteralImpl
    required Iterable<_i7.Locale> supportedLocales,

    /// optionalParameters: {bool showPerformanceOverlay = false} , default:processed=BooleanLiteralImpl
    bool showPerformanceOverlay = false,

    /// optionalParameters: {bool checkerboardRasterCacheImages = false} , default:processed=BooleanLiteralImpl
    bool checkerboardRasterCacheImages = false,

    /// optionalParameters: {bool checkerboardOffscreenLayers = false} , default:processed=BooleanLiteralImpl
    bool checkerboardOffscreenLayers = false,

    /// optionalParameters: {bool showSemanticsDebugger = false} , default:processed=BooleanLiteralImpl
    bool showSemanticsDebugger = false,

    /// optionalParameters: {bool debugShowWidgetInspector = false} , default:processed=BooleanLiteralImpl
    bool debugShowWidgetInspector = false,

    /// optionalParameters: {bool debugShowCheckedModeBanner = true} , default:processed=BooleanLiteralImpl
    bool debugShowCheckedModeBanner = true,

    /// optionalParameters: {Widget Function(BuildContext, void Function())? inspectorSelectButtonBuilder} , default:none
    _i9.InspectorSelectButtonBuilder? inspectorSelectButtonBuilder,

    /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , default:none
    Map<_i10.ShortcutActivator, _i11.Intent>? shortcuts,

    /// optionalParameters: {Map<Type, Action<Intent>>? actions} , default:none
    Map<Type, _i11.Action<_i11.Intent>>? actions,

    /// optionalParameters: {String? restorationScopeId} , default:none
    String? restorationScopeId,
  }) : super.router(
          key: key,
          routeInformationProvider: routeInformationProvider,
          routeInformationParser: routeInformationParser,
          routerDelegate: routerDelegate,
          routerConfig: routerConfig,
          backButtonDispatcher: backButtonDispatcher,
          builder: builder,
          title: title,
          onGenerateTitle: onGenerateTitle,
          textStyle: textStyle,
          color: color,
          locale: locale,
          localizationsDelegates: localizationsDelegates,
          localeListResolutionCallback: localeListResolutionCallback,
          localeResolutionCallback: localeResolutionCallback,
          supportedLocales: supportedLocales,
          showPerformanceOverlay: showPerformanceOverlay,
          checkerboardRasterCacheImages: checkerboardRasterCacheImages,
          checkerboardOffscreenLayers: checkerboardOffscreenLayers,
          showSemanticsDebugger: showSemanticsDebugger,
          debugShowWidgetInspector: debugShowWidgetInspector,
          debugShowCheckedModeBanner: debugShowCheckedModeBanner,
          inspectorSelectButtonBuilder: inspectorSelectButtonBuilder,
          shortcuts: shortcuts,
          actions: actions,
          restorationScopeId: restorationScopeId,
        ) {
    mateBuilderName = 'WidgetsApp.router';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => WidgetsApp$Mate.router(
          key: p.get('key').build(),
          routeInformationProvider: p.get('routeInformationProvider').build(),
          routeInformationParser: p.get('routeInformationParser').build(),
          routerDelegate: p.get('routerDelegate').build(),
          routerConfig: p.get('routerConfig').build(),
          backButtonDispatcher: p.get('backButtonDispatcher').build(),
          builder: p.get('builder').build(),
          title: p.get('title').build(),
          onGenerateTitle: p.get('onGenerateTitle').build(),
          textStyle: p.get('textStyle').build(),
          color: p.get('color').build(),
          locale: p.get('locale').build(),
          localizationsDelegates: p.get('localizationsDelegates').build(),
          localeListResolutionCallback: p.get('localeListResolutionCallback').build(),
          localeResolutionCallback: p.get('localeResolutionCallback').build(),
          supportedLocales: p.get('supportedLocales').build(),
          showPerformanceOverlay: p.get('showPerformanceOverlay').build(),
          checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(),
          checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(),
          showSemanticsDebugger: p.get('showSemanticsDebugger').build(),
          debugShowWidgetInspector: p.get('debugShowWidgetInspector').build(),
          debugShowCheckedModeBanner: p.get('debugShowCheckedModeBanner').build(),
          inspectorSelectButtonBuilder: p.get('inspectorSelectButtonBuilder').build(),
          shortcuts: p.get('shortcuts').build(),
          actions: p.get('actions').build(),
          restorationScopeId: p.get('restorationScopeId').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'routeInformationProvider',
      routeInformationProvider,
      isNamed: true,
    );
    mateUse(
      'routeInformationParser',
      routeInformationParser,
      isNamed: true,
    );
    mateUse(
      'routerDelegate',
      routerDelegate,
      isNamed: true,
    );
    mateUse(
      'routerConfig',
      routerConfig,
      isNamed: true,
    );
    mateUse(
      'backButtonDispatcher',
      backButtonDispatcher,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
    mateUse(
      'title',
      title,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'onGenerateTitle',
      onGenerateTitle,
      isNamed: true,
    );
    mateUse(
      'textStyle',
      textStyle,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'locale',
      locale,
      isNamed: true,
    );
    mateUse(
      'localizationsDelegates',
      localizationsDelegates,
      isNamed: true,
    );
    mateUse(
      'localeListResolutionCallback',
      localeListResolutionCallback,
      isNamed: true,
    );
    mateUse(
      'localeResolutionCallback',
      localeResolutionCallback,
      isNamed: true,
    );
    mateUse(
      'supportedLocales',
      supportedLocales,
      isNamed: true,
    );
    mateUse(
      'showPerformanceOverlay',
      showPerformanceOverlay,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'checkerboardRasterCacheImages',
      checkerboardRasterCacheImages,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'checkerboardOffscreenLayers',
      checkerboardOffscreenLayers,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'showSemanticsDebugger',
      showSemanticsDebugger,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'debugShowWidgetInspector',
      debugShowWidgetInspector,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'debugShowCheckedModeBanner',
      debugShowCheckedModeBanner,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'inspectorSelectButtonBuilder',
      inspectorSelectButtonBuilder,
      isNamed: true,
    );
    mateUse(
      'shortcuts',
      shortcuts,
      isNamed: true,
    );
    mateUse(
      'actions',
      actions,
      isNamed: true,
    );
    mateUse(
      'restorationScopeId',
      restorationScopeId,
      isNamed: true,
    );
  }
}
