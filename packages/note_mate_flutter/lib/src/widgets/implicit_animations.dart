// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/implicit_animations.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/rendering/box.dart' as _i3;
import 'package:flutter/src/painting/decoration.dart' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/painting/border_radius.dart' as _i6;
import 'package:flutter/src/painting/box_border.dart' as _i7;
import 'package:vector_math/vector_math_64.dart' as _i8;
import 'package:flutter/src/painting/text_style.dart' as _i9;
import 'package:flutter/src/foundation/key.dart' as _i10;
import 'package:flutter/src/painting/alignment.dart' as _i11;
import 'dart:ui' as _i12;
import 'package:flutter/src/widgets/framework.dart' as _i13;
import 'package:flutter/src/animation/curves.dart' as _i14;
import 'package:flutter/src/painting/text_painter.dart' as _i15;

/// class BoxConstraintsTween extends Tween<BoxConstraints>
class BoxConstraintsTween$Mate extends _i1.BoxConstraintsTween with _i2.Mate {
  /// BoxConstraintsTween BoxConstraintsTween({BoxConstraints? begin, BoxConstraints? end})
  BoxConstraintsTween$Mate({
    /// optionalParameters: {BoxConstraints? begin} , default:none
    super.begin,

    /// optionalParameters: {BoxConstraints? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i3.BoxConstraints?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i3.BoxConstraints?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'BoxConstraintsTween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BoxConstraintsTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DecorationTween extends Tween<Decoration>
class DecorationTween$Mate extends _i1.DecorationTween with _i2.Mate {
  /// DecorationTween DecorationTween({Decoration? begin, Decoration? end})
  DecorationTween$Mate({
    /// optionalParameters: {Decoration? begin} , default:none
    super.begin,

    /// optionalParameters: {Decoration? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i4.Decoration?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i4.Decoration?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DecorationTween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DecorationTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class EdgeInsetsTween extends Tween<EdgeInsets>
class EdgeInsetsTween$Mate extends _i1.EdgeInsetsTween with _i2.Mate {
  /// EdgeInsetsTween EdgeInsetsTween({EdgeInsets? begin, EdgeInsets? end})
  EdgeInsetsTween$Mate({
    /// optionalParameters: {EdgeInsets? begin} , default:none
    super.begin,

    /// optionalParameters: {EdgeInsets? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i5.EdgeInsets?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i5.EdgeInsets?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'EdgeInsetsTween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => EdgeInsetsTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class EdgeInsetsGeometryTween extends Tween<EdgeInsetsGeometry>
class EdgeInsetsGeometryTween$Mate extends _i1.EdgeInsetsGeometryTween with _i2.Mate {
  /// EdgeInsetsGeometryTween EdgeInsetsGeometryTween({EdgeInsetsGeometry? begin, EdgeInsetsGeometry? end})
  EdgeInsetsGeometryTween$Mate({
    /// optionalParameters: {EdgeInsetsGeometry? begin} , default:none
    super.begin,

    /// optionalParameters: {EdgeInsetsGeometry? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'EdgeInsetsGeometryTween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => EdgeInsetsGeometryTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class BorderRadiusTween extends Tween<BorderRadius?>
class BorderRadiusTween$Mate extends _i1.BorderRadiusTween with _i2.Mate {
  /// BorderRadiusTween BorderRadiusTween({BorderRadius? begin, BorderRadius? end})
  BorderRadiusTween$Mate({
    /// optionalParameters: {BorderRadius? begin} , default:none
    super.begin,

    /// optionalParameters: {BorderRadius? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i6.BorderRadius?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i6.BorderRadius?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'BorderRadiusTween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BorderRadiusTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class BorderTween extends Tween<Border?>
class BorderTween$Mate extends _i1.BorderTween with _i2.Mate {
  /// BorderTween BorderTween({Border? begin, Border? end})
  BorderTween$Mate({
    /// optionalParameters: {Border? begin} , default:none
    super.begin,

    /// optionalParameters: {Border? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i7.Border?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i7.Border?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'BorderTween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BorderTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Matrix4Tween extends Tween<Matrix4>
class Matrix4Tween$Mate extends _i1.Matrix4Tween with _i2.Mate {
  /// Matrix4Tween Matrix4Tween({Matrix4? begin, Matrix4? end})
  Matrix4Tween$Mate({
    /// optionalParameters: {Matrix4? begin} , default:none
    super.begin,

    /// optionalParameters: {Matrix4? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i8.Matrix4?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i8.Matrix4?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Matrix4Tween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Matrix4Tween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TextStyleTween extends Tween<TextStyle>
class TextStyleTween$Mate extends _i1.TextStyleTween with _i2.Mate {
  /// TextStyleTween TextStyleTween({TextStyle? begin, TextStyle? end})
  TextStyleTween$Mate({
    /// optionalParameters: {TextStyle? begin} , default:none
    super.begin,

    /// optionalParameters: {TextStyle? end} , default:none
    super.end,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i9.TextStyle?>(
            name: 'begin',
            init: begin,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<_i9.TextStyle?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TextStyleTween';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextStyleTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedContainer extends ImplicitlyAnimatedWidget
class AnimatedContainer$Mate extends _i1.AnimatedContainer with _i2.Mate {
  /// AnimatedContainer AnimatedContainer({Key? key, AlignmentGeometry? alignment, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, Decoration? foregroundDecoration, double? width, double? height, BoxConstraints? constraints, EdgeInsetsGeometry? margin, Matrix4? transform, AlignmentGeometry? transformAlignment, Widget? child, Clip clipBehavior = Clip.none, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedContainer$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    super.alignment,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Decoration? decoration} , default:none
    super.decoration,

    /// optionalParameters: {Decoration? foregroundDecoration} , default:none
    super.foregroundDecoration,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , default:none
    super.margin,

    /// optionalParameters: {Matrix4? transform} , default:none
    super.transform,

    /// optionalParameters: {AlignmentGeometry? transformAlignment} , default:none
    super.transformAlignment,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:unprocessed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i11.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i12.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'decoration': _i2.BuilderArg<_i4.Decoration?>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'foregroundDecoration': _i2.BuilderArg<_i4.Decoration?>(
            name: 'foregroundDecoration',
            init: foregroundDecoration,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i3.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'margin': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'margin',
            init: margin,
            isNamed: true,
          ),
          'transform': _i2.BuilderArg<_i8.Matrix4?>(
            name: 'transform',
            init: transform,
            isNamed: true,
          ),
          'transformAlignment': _i2.BuilderArg<_i11.AlignmentGeometry?>(
            name: 'transformAlignment',
            init: transformAlignment,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i12.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedContainer';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedContainer$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          padding: p.get('padding').build(),
          color: p.get('color').build(),
          decoration: p.get('decoration').build(),
          foregroundDecoration: p.get('foregroundDecoration').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          constraints: p.get('constraints').build(),
          margin: p.get('margin').build(),
          transform: p.get('transform').build(),
          transformAlignment: p.get('transformAlignment').build(),
          child: p.get('child').build(),
          clipBehavior: p.get('clipBehavior').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedPadding extends ImplicitlyAnimatedWidget
class AnimatedPadding$Mate extends _i1.AnimatedPadding with _i2.Mate {
  /// AnimatedPadding AnimatedPadding({Key? key, required EdgeInsetsGeometry padding, Widget? child, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPadding$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required EdgeInsetsGeometry padding} , default:none
    required super.padding,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedPadding';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedPadding$Mate(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          child: p.get('child').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedAlign extends ImplicitlyAnimatedWidget
class AnimatedAlign$Mate extends _i1.AnimatedAlign with _i2.Mate {
  /// AnimatedAlign AnimatedAlign({Key? key, required AlignmentGeometry alignment, Widget? child, double? heightFactor, double? widthFactor, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedAlign$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required AlignmentGeometry alignment} , default:none
    required super.alignment,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {double? heightFactor} , default:none
    super.heightFactor,

    /// optionalParameters: {double? widthFactor} , default:none
    super.widthFactor,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i11.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'heightFactor': _i2.BuilderArg<double?>(
            name: 'heightFactor',
            init: heightFactor,
            isNamed: true,
          ),
          'widthFactor': _i2.BuilderArg<double?>(
            name: 'widthFactor',
            init: widthFactor,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedAlign';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedAlign$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
          heightFactor: p.get('heightFactor').build(),
          widthFactor: p.get('widthFactor').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedPositioned extends ImplicitlyAnimatedWidget
class AnimatedPositioned$Mate extends _i1.AnimatedPositioned with _i2.Mate {
  /// AnimatedPositioned AnimatedPositioned({Key? key, required Widget child, double? left, double? top, double? right, double? bottom, double? width, double? height, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositioned$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {double? left} , default:none
    super.left,

    /// optionalParameters: {double? top} , default:none
    super.top,

    /// optionalParameters: {double? right} , default:none
    super.right,

    /// optionalParameters: {double? bottom} , default:none
    super.bottom,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'left': _i2.BuilderArg<double?>(
            name: 'left',
            init: left,
            isNamed: true,
          ),
          'top': _i2.BuilderArg<double?>(
            name: 'top',
            init: top,
            isNamed: true,
          ),
          'right': _i2.BuilderArg<double?>(
            name: 'right',
            init: right,
            isNamed: true,
          ),
          'bottom': _i2.BuilderArg<double?>(
            name: 'bottom',
            init: bottom,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedPositioned';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedPositioned$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  /// AnimatedPositioned AnimatedPositioned.fromRect({Key? key, required Widget child, required Rect rect, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositioned$Mate.fromRect({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {required Rect rect} , default:none
    required super.rect,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'rect': _i2.BuilderArg<_i12.Rect>(
            name: 'rect',
            init: rect,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super.fromRect() {
    mateBuilderName = 'AnimatedPositioned.fromRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedPositioned$Mate.fromRect(
          key: p.get('key').build(),
          child: p.get('child').build(),
          rect: p.get('rect').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedPositionedDirectional extends ImplicitlyAnimatedWidget
class AnimatedPositionedDirectional$Mate extends _i1.AnimatedPositionedDirectional with _i2.Mate {
  /// AnimatedPositionedDirectional AnimatedPositionedDirectional({Key? key, required Widget child, double? start, double? top, double? end, double? bottom, double? width, double? height, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositionedDirectional$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {double? start} , default:none
    super.start,

    /// optionalParameters: {double? top} , default:none
    super.top,

    /// optionalParameters: {double? end} , default:none
    super.end,

    /// optionalParameters: {double? bottom} , default:none
    super.bottom,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'start': _i2.BuilderArg<double?>(
            name: 'start',
            init: start,
            isNamed: true,
          ),
          'top': _i2.BuilderArg<double?>(
            name: 'top',
            init: top,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<double?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
          'bottom': _i2.BuilderArg<double?>(
            name: 'bottom',
            init: bottom,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedPositionedDirectional';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedPositionedDirectional$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          start: p.get('start').build(),
          top: p.get('top').build(),
          end: p.get('end').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedScale extends ImplicitlyAnimatedWidget
class AnimatedScale$Mate extends _i1.AnimatedScale with _i2.Mate {
  /// AnimatedScale AnimatedScale({Key? key, Widget? child, required double scale, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedScale$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {required double scale} , default:none
    required super.scale,

    /// optionalParameters: {Alignment alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'scale': _i2.BuilderArg<double>(
            name: 'scale',
            init: scale,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i11.Alignment>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'filterQuality': _i2.BuilderArg<_i12.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedScale';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedScale$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          scale: p.get('scale').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedRotation extends ImplicitlyAnimatedWidget
class AnimatedRotation$Mate extends _i1.AnimatedRotation with _i2.Mate {
  /// AnimatedRotation AnimatedRotation({Key? key, Widget? child, required double turns, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedRotation$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {required double turns} , default:none
    required super.turns,

    /// optionalParameters: {Alignment alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'turns': _i2.BuilderArg<double>(
            name: 'turns',
            init: turns,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i11.Alignment>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'filterQuality': _i2.BuilderArg<_i12.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedRotation';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedRotation$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          turns: p.get('turns').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedSlide extends ImplicitlyAnimatedWidget
class AnimatedSlide$Mate extends _i1.AnimatedSlide with _i2.Mate {
  /// AnimatedSlide AnimatedSlide({Key? key, Widget? child, required Offset offset, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedSlide$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {required Offset offset} , default:none
    required super.offset,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'offset': _i2.BuilderArg<_i12.Offset>(
            name: 'offset',
            init: offset,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedSlide';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedSlide$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          offset: p.get('offset').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedOpacity extends ImplicitlyAnimatedWidget
class AnimatedOpacity$Mate extends _i1.AnimatedOpacity with _i2.Mate {
  /// AnimatedOpacity AnimatedOpacity({Key? key, Widget? child, required double opacity, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd, bool alwaysIncludeSemantics = false})
  AnimatedOpacity$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {required double opacity} , default:none
    required super.opacity,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.alwaysIncludeSemantics,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<double>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
          'alwaysIncludeSemantics': _i2.BuilderArg<bool>(
            name: 'alwaysIncludeSemantics',
            init: alwaysIncludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedOpacity';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedOpacity$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          opacity: p.get('opacity').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverAnimatedOpacity extends ImplicitlyAnimatedWidget
class SliverAnimatedOpacity$Mate extends _i1.SliverAnimatedOpacity with _i2.Mate {
  /// SliverAnimatedOpacity SliverAnimatedOpacity({Key? key, Widget? sliver, required double opacity, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd, bool alwaysIncludeSemantics = false})
  SliverAnimatedOpacity$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? sliver} , default:none
    super.sliver,

    /// optionalParameters: {required double opacity} , default:none
    required super.opacity,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.alwaysIncludeSemantics,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'sliver': _i2.BuilderArg<_i13.Widget?>(
            name: 'sliver',
            init: sliver,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<double>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
          'alwaysIncludeSemantics': _i2.BuilderArg<bool>(
            name: 'alwaysIncludeSemantics',
            init: alwaysIncludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'SliverAnimatedOpacity';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverAnimatedOpacity$Mate(
          key: p.get('key').build(),
          sliver: p.get('sliver').build(),
          opacity: p.get('opacity').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedDefaultTextStyle extends ImplicitlyAnimatedWidget
class AnimatedDefaultTextStyle$Mate extends _i1.AnimatedDefaultTextStyle with _i2.Mate {
  /// AnimatedDefaultTextStyle AnimatedDefaultTextStyle({Key? key, required Widget child, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedDefaultTextStyle$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {required TextStyle style} , default:none
    required super.style,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    super.textAlign,

    /// optionalParameters: {bool softWrap = true} , default:processed=BooleanLiteralImpl
    super.softWrap,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , default:unprocessed=PrefixedIdentifierImpl
    super.overflow,

    /// optionalParameters: {int? maxLines} , default:none
    super.maxLines,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:unprocessed=PrefixedIdentifierImpl
    super.textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i9.TextStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i12.TextAlign?>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
          ),
          'softWrap': _i2.BuilderArg<bool>(
            name: 'softWrap',
            init: softWrap,
            isNamed: true,
            defaultValue: true,
          ),
          'overflow': _i2.BuilderArg<_i15.TextOverflow>(
            name: 'overflow',
            init: overflow,
            isNamed: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i15.TextWidthBasis>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i12.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedDefaultTextStyle';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedDefaultTextStyle$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          style: p.get('style').build(),
          textAlign: p.get('textAlign').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          maxLines: p.get('maxLines').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedPhysicalModel extends ImplicitlyAnimatedWidget
class AnimatedPhysicalModel$Mate extends _i1.AnimatedPhysicalModel with _i2.Mate {
  /// AnimatedPhysicalModel AnimatedPhysicalModel({Key? key, required Widget child, required BoxShape shape, Clip clipBehavior = Clip.none, BorderRadius borderRadius = BorderRadius.zero, required double elevation, required Color color, bool animateColor = true, required Color shadowColor, bool animateShadowColor = true, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPhysicalModel$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {required BoxShape shape} , default:none
    required super.shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:unprocessed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {BorderRadius borderRadius = BorderRadius.zero} , default:unprocessed=PrefixedIdentifierImpl
    super.borderRadius,

    /// optionalParameters: {required double elevation} , default:none
    required super.elevation,

    /// optionalParameters: {required Color color} , default:none
    required super.color,

    /// optionalParameters: {bool animateColor = true} , default:processed=BooleanLiteralImpl
    super.animateColor,

    /// optionalParameters: {required Color shadowColor} , default:none
    required super.shadowColor,

    /// optionalParameters: {bool animateShadowColor = true} , default:processed=BooleanLiteralImpl
    super.animateShadowColor,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i7.BoxShape>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i12.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i6.BorderRadius>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i12.Color>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'animateColor': _i2.BuilderArg<bool>(
            name: 'animateColor',
            init: animateColor,
            isNamed: true,
            defaultValue: true,
          ),
          'shadowColor': _i2.BuilderArg<_i12.Color>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'animateShadowColor': _i2.BuilderArg<bool>(
            name: 'animateShadowColor',
            init: animateShadowColor,
            isNamed: true,
            defaultValue: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedPhysicalModel';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedPhysicalModel$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          borderRadius: p.get('borderRadius').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          animateColor: p.get('animateColor').build(),
          shadowColor: p.get('shadowColor').build(),
          animateShadowColor: p.get('animateShadowColor').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimatedFractionallySizedBox extends ImplicitlyAnimatedWidget
class AnimatedFractionallySizedBox$Mate extends _i1.AnimatedFractionallySizedBox with _i2.Mate {
  /// AnimatedFractionallySizedBox AnimatedFractionallySizedBox({Key? key, AlignmentGeometry alignment = Alignment.center, Widget? child, double? heightFactor, double? widthFactor, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedFractionallySizedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:unprocessed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {double? heightFactor} , default:none
    super.heightFactor,

    /// optionalParameters: {double? widthFactor} , default:none
    super.widthFactor,

    /// optionalParameters: {Curve curve = Curves.linear} , default:unprocessed=PrefixedIdentifierImpl
    super.curve,

    /// optionalParameters: {required Duration duration} , default:none
    required super.duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    super.onEnd,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i10.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i11.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i13.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'heightFactor': _i2.BuilderArg<double?>(
            name: 'heightFactor',
            init: heightFactor,
            isNamed: true,
          ),
          'widthFactor': _i2.BuilderArg<double?>(
            name: 'widthFactor',
            init: widthFactor,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i14.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'onEnd': _i2.BuilderArg<_i12.VoidCallback?>(
            name: 'onEnd',
            init: onEnd,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimatedFractionallySizedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedFractionallySizedBox$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
          heightFactor: p.get('heightFactor').build(),
          widthFactor: p.get('widthFactor').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
