// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/implicit_animations.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:vector_math/vector_math_64.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/painting/text_painter.dart';

/// class BoxConstraintsTween extends Tween<BoxConstraints>
class BoxConstraintsTween$Mate extends BoxConstraintsTween with Mate {
  /// BoxConstraintsTween BoxConstraintsTween({BoxConstraints? begin, BoxConstraints? end})
  BoxConstraintsTween$Mate({
    /// optionalParameters: {BoxConstraints? begin} , default:none
    BoxConstraints? begin,

    /// optionalParameters: {BoxConstraints? end} , default:none
    BoxConstraints? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'BoxConstraintsTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => BoxConstraintsTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class DecorationTween extends Tween<Decoration>
class DecorationTween$Mate extends DecorationTween with Mate {
  /// DecorationTween DecorationTween({Decoration? begin, Decoration? end})
  DecorationTween$Mate({
    /// optionalParameters: {Decoration? begin} , default:none
    Decoration? begin,

    /// optionalParameters: {Decoration? end} , default:none
    Decoration? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'DecorationTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DecorationTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class EdgeInsetsTween extends Tween<EdgeInsets>
class EdgeInsetsTween$Mate extends EdgeInsetsTween with Mate {
  /// EdgeInsetsTween EdgeInsetsTween({EdgeInsets? begin, EdgeInsets? end})
  EdgeInsetsTween$Mate({
    /// optionalParameters: {EdgeInsets? begin} , default:none
    EdgeInsets? begin,

    /// optionalParameters: {EdgeInsets? end} , default:none
    EdgeInsets? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'EdgeInsetsTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => EdgeInsetsTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class EdgeInsetsGeometryTween extends Tween<EdgeInsetsGeometry>
class EdgeInsetsGeometryTween$Mate extends EdgeInsetsGeometryTween with Mate {
  /// EdgeInsetsGeometryTween EdgeInsetsGeometryTween({EdgeInsetsGeometry? begin, EdgeInsetsGeometry? end})
  EdgeInsetsGeometryTween$Mate({
    /// optionalParameters: {EdgeInsetsGeometry? begin} , default:none
    EdgeInsetsGeometry? begin,

    /// optionalParameters: {EdgeInsetsGeometry? end} , default:none
    EdgeInsetsGeometry? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'EdgeInsetsGeometryTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => EdgeInsetsGeometryTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class BorderRadiusTween extends Tween<BorderRadius?>
class BorderRadiusTween$Mate extends BorderRadiusTween with Mate {
  /// BorderRadiusTween BorderRadiusTween({BorderRadius? begin, BorderRadius? end})
  BorderRadiusTween$Mate({
    /// optionalParameters: {BorderRadius? begin} , default:none
    BorderRadius? begin,

    /// optionalParameters: {BorderRadius? end} , default:none
    BorderRadius? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'BorderRadiusTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => BorderRadiusTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class BorderTween extends Tween<Border?>
class BorderTween$Mate extends BorderTween with Mate {
  /// BorderTween BorderTween({Border? begin, Border? end})
  BorderTween$Mate({
    /// optionalParameters: {Border? begin} , default:none
    Border? begin,

    /// optionalParameters: {Border? end} , default:none
    Border? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'BorderTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => BorderTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class Matrix4Tween extends Tween<Matrix4>
class Matrix4Tween$Mate extends Matrix4Tween with Mate {
  /// Matrix4Tween Matrix4Tween({Matrix4? begin, Matrix4? end})
  Matrix4Tween$Mate({
    /// optionalParameters: {Matrix4? begin} , default:none
    Matrix4? begin,

    /// optionalParameters: {Matrix4? end} , default:none
    Matrix4? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'Matrix4Tween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => Matrix4Tween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class TextStyleTween extends Tween<TextStyle>
class TextStyleTween$Mate extends TextStyleTween with Mate {
  /// TextStyleTween TextStyleTween({TextStyle? begin, TextStyle? end})
  TextStyleTween$Mate({
    /// optionalParameters: {TextStyle? begin} , default:none
    TextStyle? begin,

    /// optionalParameters: {TextStyle? end} , default:none
    TextStyle? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'TextStyleTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => TextStyleTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class AnimatedContainer extends ImplicitlyAnimatedWidget
class AnimatedContainer$Mate extends AnimatedContainer with Mate {
  /// AnimatedContainer AnimatedContainer({Key? key, AlignmentGeometry? alignment, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, Decoration? foregroundDecoration, double? width, double? height, BoxConstraints? constraints, EdgeInsetsGeometry? margin, Matrix4? transform, AlignmentGeometry? transformAlignment, Widget? child, Clip clipBehavior = Clip.none, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedContainer$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    AlignmentGeometry? alignment,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color? color} , default:none
    Color? color,

    /// optionalParameters: {Decoration? decoration} , default:none
    Decoration? decoration,

    /// optionalParameters: {Decoration? foregroundDecoration} , default:none
    Decoration? foregroundDecoration,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    BoxConstraints? constraints,

    /// optionalParameters: {EdgeInsetsGeometry? margin} , default:none
    EdgeInsetsGeometry? margin,

    /// optionalParameters: {Matrix4? transform} , default:none
    Matrix4? transform,

    /// optionalParameters: {AlignmentGeometry? transformAlignment} , default:none
    AlignmentGeometry? transformAlignment,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.none,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          alignment: alignment,
          padding: padding,
          color: color,
          decoration: decoration,
          foregroundDecoration: foregroundDecoration,
          width: width,
          height: height,
          constraints: constraints,
          margin: margin,
          transform: transform,
          transformAlignment: transformAlignment,
          child: child,
          clipBehavior: clipBehavior,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedContainer';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedContainer$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          padding: p.get('padding').build(),
          color: p.get('color').build(),
          decoration: p.get('decoration').build(),
          foregroundDecoration: p.get('foregroundDecoration').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          constraints: p.get('constraints').build(),
          margin: p.get('margin').build(),
          transform: p.get('transform').build(),
          transformAlignment: p.get('transformAlignment').build(),
          child: p.get('child').build(),
          clipBehavior: p.get('clipBehavior').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'decoration',
      decoration,
      isNamed: true,
    );
    mateUse(
      'foregroundDecoration',
      foregroundDecoration,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'constraints',
      constraints,
      isNamed: true,
    );
    mateUse(
      'margin',
      margin,
      isNamed: true,
    );
    mateUse(
      'transform',
      transform,
      isNamed: true,
    );
    mateUse(
      'transformAlignment',
      transformAlignment,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.none,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedPadding extends ImplicitlyAnimatedWidget
class AnimatedPadding$Mate extends AnimatedPadding with Mate {
  /// AnimatedPadding AnimatedPadding({Key? key, required EdgeInsetsGeometry padding, Widget? child, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPadding$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required EdgeInsetsGeometry padding} , default:none
    required EdgeInsetsGeometry padding,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          padding: padding,
          child: child,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedPadding';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedPadding$Mate(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          child: p.get('child').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedAlign extends ImplicitlyAnimatedWidget
class AnimatedAlign$Mate extends AnimatedAlign with Mate {
  /// AnimatedAlign AnimatedAlign({Key? key, required AlignmentGeometry alignment, Widget? child, double? heightFactor, double? widthFactor, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedAlign$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required AlignmentGeometry alignment} , default:none
    required AlignmentGeometry alignment,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {double? heightFactor} , default:none
    double? heightFactor,

    /// optionalParameters: {double? widthFactor} , default:none
    double? widthFactor,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          alignment: alignment,
          child: child,
          heightFactor: heightFactor,
          widthFactor: widthFactor,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedAlign';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedAlign$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
          heightFactor: p.get('heightFactor').build(),
          widthFactor: p.get('widthFactor').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'heightFactor',
      heightFactor,
      isNamed: true,
    );
    mateUse(
      'widthFactor',
      widthFactor,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedPositioned extends ImplicitlyAnimatedWidget
class AnimatedPositioned$Mate extends AnimatedPositioned with Mate {
  /// AnimatedPositioned AnimatedPositioned({Key? key, required Widget child, double? left, double? top, double? right, double? bottom, double? width, double? height, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositioned$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {double? left} , default:none
    double? left,

    /// optionalParameters: {double? top} , default:none
    double? top,

    /// optionalParameters: {double? right} , default:none
    double? right,

    /// optionalParameters: {double? bottom} , default:none
    double? bottom,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          child: child,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          width: width,
          height: height,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedPositioned';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedPositioned$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'left',
      left,
      isNamed: true,
    );
    mateUse(
      'top',
      top,
      isNamed: true,
    );
    mateUse(
      'right',
      right,
      isNamed: true,
    );
    mateUse(
      'bottom',
      bottom,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }

  /// AnimatedPositioned AnimatedPositioned.fromRect({Key? key, required Widget child, required Rect rect, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositioned$Mate.fromRect({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {required Rect rect} , default:none
    required Rect rect,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super.fromRect(
          key: key,
          child: child,
          rect: rect,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedPositioned.fromRect';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedPositioned$Mate.fromRect(
          key: p.get('key').build(),
          child: p.get('child').build(),
          rect: p.get('rect').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'rect',
      rect,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedPositionedDirectional extends ImplicitlyAnimatedWidget
class AnimatedPositionedDirectional$Mate extends AnimatedPositionedDirectional
    with Mate {
  /// AnimatedPositionedDirectional AnimatedPositionedDirectional({Key? key, required Widget child, double? start, double? top, double? end, double? bottom, double? width, double? height, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPositionedDirectional$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {double? start} , default:none
    double? start,

    /// optionalParameters: {double? top} , default:none
    double? top,

    /// optionalParameters: {double? end} , default:none
    double? end,

    /// optionalParameters: {double? bottom} , default:none
    double? bottom,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          child: child,
          start: start,
          top: top,
          end: end,
          bottom: bottom,
          width: width,
          height: height,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedPositionedDirectional';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedPositionedDirectional$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          start: p.get('start').build(),
          top: p.get('top').build(),
          end: p.get('end').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'start',
      start,
      isNamed: true,
    );
    mateUse(
      'top',
      top,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
    mateUse(
      'bottom',
      bottom,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedScale extends ImplicitlyAnimatedWidget
class AnimatedScale$Mate extends AnimatedScale with Mate {
  /// AnimatedScale AnimatedScale({Key? key, Widget? child, required double scale, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedScale$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {required double scale} , default:none
    required double scale,

    /// optionalParameters: {Alignment alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    Alignment alignment = Alignment.center,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    FilterQuality? filterQuality,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          child: child,
          scale: scale,
          alignment: alignment,
          filterQuality: filterQuality,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedScale';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedScale$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          scale: p.get('scale').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'scale',
      scale,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedRotation extends ImplicitlyAnimatedWidget
class AnimatedRotation$Mate extends AnimatedRotation with Mate {
  /// AnimatedRotation AnimatedRotation({Key? key, Widget? child, required double turns, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedRotation$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {required double turns} , default:none
    required double turns,

    /// optionalParameters: {Alignment alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    Alignment alignment = Alignment.center,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    FilterQuality? filterQuality,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          child: child,
          turns: turns,
          alignment: alignment,
          filterQuality: filterQuality,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedRotation';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedRotation$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          turns: p.get('turns').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'turns',
      turns,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedSlide extends ImplicitlyAnimatedWidget
class AnimatedSlide$Mate extends AnimatedSlide with Mate {
  /// AnimatedSlide AnimatedSlide({Key? key, Widget? child, required Offset offset, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedSlide$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {required Offset offset} , default:none
    required Offset offset,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          child: child,
          offset: offset,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedSlide';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedSlide$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          offset: p.get('offset').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'offset',
      offset,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedOpacity extends ImplicitlyAnimatedWidget
class AnimatedOpacity$Mate extends AnimatedOpacity with Mate {
  /// AnimatedOpacity AnimatedOpacity({Key? key, Widget? child, required double opacity, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd, bool alwaysIncludeSemantics = false})
  AnimatedOpacity$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {required double opacity} , default:none
    required double opacity,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    bool alwaysIncludeSemantics = false,
  }) : super(
          key: key,
          child: child,
          opacity: opacity,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
        ) {
    mateBuilderName = 'AnimatedOpacity';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedOpacity$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          opacity: p.get('opacity').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
    mateUse(
      'alwaysIncludeSemantics',
      alwaysIncludeSemantics,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class SliverAnimatedOpacity extends ImplicitlyAnimatedWidget
class SliverAnimatedOpacity$Mate extends SliverAnimatedOpacity with Mate {
  /// SliverAnimatedOpacity SliverAnimatedOpacity({Key? key, Widget? sliver, required double opacity, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd, bool alwaysIncludeSemantics = false})
  SliverAnimatedOpacity$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Widget? sliver} , default:none
    Widget? sliver,

    /// optionalParameters: {required double opacity} , default:none
    required double opacity,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    bool alwaysIncludeSemantics = false,
  }) : super(
          key: key,
          sliver: sliver,
          opacity: opacity,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
        ) {
    mateBuilderName = 'SliverAnimatedOpacity';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => SliverAnimatedOpacity$Mate(
          key: p.get('key').build(),
          sliver: p.get('sliver').build(),
          opacity: p.get('opacity').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'sliver',
      sliver,
      isNamed: true,
    );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
    mateUse(
      'alwaysIncludeSemantics',
      alwaysIncludeSemantics,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class AnimatedDefaultTextStyle extends ImplicitlyAnimatedWidget
class AnimatedDefaultTextStyle$Mate extends AnimatedDefaultTextStyle with Mate {
  /// AnimatedDefaultTextStyle AnimatedDefaultTextStyle({Key? key, required Widget child, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedDefaultTextStyle$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {required TextStyle style} , default:none
    required TextStyle style,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    TextAlign? textAlign,

    /// optionalParameters: {bool softWrap = true} , default:processed=BooleanLiteralImpl
    bool softWrap = true,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , default:processed=PrefixedIdentifierImpl
    TextOverflow overflow = TextOverflow.clip,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:processed=PrefixedIdentifierImpl
    TextWidthBasis textWidthBasis = TextWidthBasis.parent,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          child: child,
          style: style,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedDefaultTextStyle';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedDefaultTextStyle$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          style: p.get('style').build(),
          textAlign: p.get('textAlign').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          maxLines: p.get('maxLines').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
    );
    mateUse(
      'softWrap',
      softWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'overflow',
      overflow,
      isNamed: true,
      defaultValue: TextOverflow.clip,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
      defaultValue: TextWidthBasis.parent,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedPhysicalModel extends ImplicitlyAnimatedWidget
class AnimatedPhysicalModel$Mate extends AnimatedPhysicalModel with Mate {
  /// AnimatedPhysicalModel AnimatedPhysicalModel({Key? key, required Widget child, required BoxShape shape, Clip clipBehavior = Clip.none, BorderRadius borderRadius = BorderRadius.zero, required double elevation, required Color color, bool animateColor = true, required Color shadowColor, bool animateShadowColor = true, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedPhysicalModel$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {required BoxShape shape} , default:none
    required BoxShape shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.none,

    /// optionalParameters: {BorderRadius borderRadius = BorderRadius.zero} , default:processed=PrefixedIdentifierImpl
    BorderRadius borderRadius = BorderRadius.zero,

    /// optionalParameters: {required double elevation} , default:none
    required double elevation,

    /// optionalParameters: {required Color color} , default:none
    required Color color,

    /// optionalParameters: {bool animateColor = true} , default:processed=BooleanLiteralImpl
    bool animateColor = true,

    /// optionalParameters: {required Color shadowColor} , default:none
    required Color shadowColor,

    /// optionalParameters: {bool animateShadowColor = true} , default:processed=BooleanLiteralImpl
    bool animateShadowColor = true,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          child: child,
          shape: shape,
          clipBehavior: clipBehavior,
          borderRadius: borderRadius,
          elevation: elevation,
          color: color,
          animateColor: animateColor,
          shadowColor: shadowColor,
          animateShadowColor: animateShadowColor,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedPhysicalModel';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedPhysicalModel$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          borderRadius: p.get('borderRadius').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          animateColor: p.get('animateColor').build(),
          shadowColor: p.get('shadowColor').build(),
          animateShadowColor: p.get('animateShadowColor').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.none,
    );
    mateUse(
      'borderRadius',
      borderRadius,
      isNamed: true,
      defaultValue: BorderRadius.zero,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'animateColor',
      animateColor,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'shadowColor',
      shadowColor,
      isNamed: true,
    );
    mateUse(
      'animateShadowColor',
      animateShadowColor,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}

/// class AnimatedFractionallySizedBox extends ImplicitlyAnimatedWidget
class AnimatedFractionallySizedBox$Mate extends AnimatedFractionallySizedBox
    with Mate {
  /// AnimatedFractionallySizedBox AnimatedFractionallySizedBox({Key? key, AlignmentGeometry alignment = Alignment.center, Widget? child, double? heightFactor, double? widthFactor, Curve curve = Curves.linear, required Duration duration, void Function()? onEnd})
  AnimatedFractionallySizedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry alignment = Alignment.center,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,

    /// optionalParameters: {double? heightFactor} , default:none
    double? heightFactor,

    /// optionalParameters: {double? widthFactor} , default:none
    double? widthFactor,

    /// optionalParameters: {Curve curve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    Curve curve = Curves.linear,

    /// optionalParameters: {required Duration duration} , default:none
    required Duration duration,

    /// optionalParameters: {void Function()? onEnd} , default:none
    VoidCallback? onEnd,
  }) : super(
          key: key,
          alignment: alignment,
          child: child,
          heightFactor: heightFactor,
          widthFactor: widthFactor,
          curve: curve,
          duration: duration,
          onEnd: onEnd,
        ) {
    mateBuilderName = 'AnimatedFractionallySizedBox';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedFractionallySizedBox$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
          heightFactor: p.get('heightFactor').build(),
          widthFactor: p.get('widthFactor').build(),
          curve: p.get('curve').build(),
          duration: p.get('duration').build(),
          onEnd: p.get('onEnd').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'heightFactor',
      heightFactor,
      isNamed: true,
    );
    mateUse(
      'widthFactor',
      widthFactor,
      isNamed: true,
    );
    mateUse(
      'curve',
      curve,
      isNamed: true,
      defaultValue: Curves.linear,
    );
    mateUse(
      'duration',
      duration,
      isNamed: true,
    );
    mateUse(
      'onEnd',
      onEnd,
      isNamed: true,
    );
  }
}
