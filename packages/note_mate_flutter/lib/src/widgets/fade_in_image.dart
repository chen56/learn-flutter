// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/fade_in_image.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/image_provider.dart';
import 'dart:core';
import 'package:flutter/src/widgets/image.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/animation.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'dart:ui';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'dart:typed_data';
import 'package:flutter/src/services/asset_bundle.dart';

/// class FadeInImage extends StatefulWidget
class FadeInImage$Mate extends FadeInImage with Mate {
  /// FadeInImage FadeInImage({Key? key, required ImageProvider<Object> placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required ImageProvider<Object> image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false})
  FadeInImage$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required ImageProvider<Object> placeholder} , default:none
    required ImageProvider<Object> placeholder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder} , default:none
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// optionalParameters: {required ImageProvider<Object> image} , default:none
    required ImageProvider<Object> image,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder} , default:none
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {String? imageSemanticLabel} , default:none
    String? imageSemanticLabel,

    /// optionalParameters: {Duration fadeOutDuration = const Duration(milliseconds: 300)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration fadeOutDuration,

    /// optionalParameters: {Curve fadeOutCurve = Curves.easeOut} , default:processed=PrefixedIdentifierImpl
    Curve fadeOutCurve = Curves.easeOut,

    /// optionalParameters: {Duration fadeInDuration = const Duration(milliseconds: 700)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration fadeInDuration,

    /// optionalParameters: {Curve fadeInCurve = Curves.easeIn} , default:processed=PrefixedIdentifierImpl
    Curve fadeInCurve = Curves.easeIn,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {BoxFit? fit} , default:none
    BoxFit? fit,

    /// optionalParameters: {BoxFit? placeholderFit} , default:none
    BoxFit? placeholderFit,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:processed=PrefixedIdentifierImpl
    FilterQuality filterQuality = FilterQuality.low,

    /// optionalParameters: {FilterQuality? placeholderFilterQuality} , default:none
    FilterQuality? placeholderFilterQuality,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry alignment = Alignment.center,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:processed=PrefixedIdentifierImpl
    ImageRepeat repeat = ImageRepeat.noRepeat,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    bool matchTextDirection = false,
  }) : super(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
        ) {
    mateCreateName = 'FadeInImage';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => FadeInImage$Mate(
          key: p.get('key').build(),
          placeholder: p.get('placeholder').build(),
          placeholderErrorBuilder: p.get('placeholderErrorBuilder').build(),
          image: p.get('image').build(),
          imageErrorBuilder: p.get('imageErrorBuilder').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          imageSemanticLabel: p.get('imageSemanticLabel').build(),
          fadeOutDuration: p.get('fadeOutDuration').build(),
          fadeOutCurve: p.get('fadeOutCurve').build(),
          fadeInDuration: p.get('fadeInDuration').build(),
          fadeInCurve: p.get('fadeInCurve').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          fit: p.get('fit').build(),
          placeholderFit: p.get('placeholderFit').build(),
          filterQuality: p.get('filterQuality').build(),
          placeholderFilterQuality: p.get('placeholderFilterQuality').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'placeholder',
      placeholder,
      isNamed: true,
    );
    mateUse(
      'placeholderErrorBuilder',
      placeholderErrorBuilder,
      isNamed: true,
    );
    mateUse(
      'image',
      image,
      isNamed: true,
    );
    mateUse(
      'imageErrorBuilder',
      imageErrorBuilder,
      isNamed: true,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'imageSemanticLabel',
      imageSemanticLabel,
      isNamed: true,
    );
    mateUse(
      'fadeOutDuration',
      fadeOutDuration,
      isNamed: true,
    );
    mateUse(
      'fadeOutCurve',
      fadeOutCurve,
      isNamed: true,
      defaultValue: Curves.easeOut,
    );
    mateUse(
      'fadeInDuration',
      fadeInDuration,
      isNamed: true,
    );
    mateUse(
      'fadeInCurve',
      fadeInCurve,
      isNamed: true,
      defaultValue: Curves.easeIn,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
    );
    mateUse(
      'placeholderFit',
      placeholderFit,
      isNamed: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
      defaultValue: FilterQuality.low,
    );
    mateUse(
      'placeholderFilterQuality',
      placeholderFilterQuality,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'repeat',
      repeat,
      isNamed: true,
      defaultValue: ImageRepeat.noRepeat,
    );
    mateUse(
      'matchTextDirection',
      matchTextDirection,
      isNamed: true,
      defaultValue: false,
    );
  }

  /// FadeInImage FadeInImage.memoryNetwork({Key? key, required Uint8List placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required String image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, double placeholderScale = 1.0, double imageScale = 1.0, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, int? placeholderCacheWidth, int? placeholderCacheHeight, int? imageCacheWidth, int? imageCacheHeight})
  FadeInImage$Mate.memoryNetwork({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Uint8List placeholder} , default:none
    required Uint8List placeholder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder} , default:none
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// optionalParameters: {required String image} , default:none
    required String image,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder} , default:none
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// optionalParameters: {double placeholderScale = 1.0} , default:processed=DoubleLiteralImpl
    double placeholderScale = 1.0,

    /// optionalParameters: {double imageScale = 1.0} , default:processed=DoubleLiteralImpl
    double imageScale = 1.0,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {String? imageSemanticLabel} , default:none
    String? imageSemanticLabel,

    /// optionalParameters: {Duration fadeOutDuration = const Duration(milliseconds: 300)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration fadeOutDuration,

    /// optionalParameters: {Curve fadeOutCurve = Curves.easeOut} , default:processed=PrefixedIdentifierImpl
    Curve fadeOutCurve = Curves.easeOut,

    /// optionalParameters: {Duration fadeInDuration = const Duration(milliseconds: 700)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration fadeInDuration,

    /// optionalParameters: {Curve fadeInCurve = Curves.easeIn} , default:processed=PrefixedIdentifierImpl
    Curve fadeInCurve = Curves.easeIn,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {BoxFit? fit} , default:none
    BoxFit? fit,

    /// optionalParameters: {BoxFit? placeholderFit} , default:none
    BoxFit? placeholderFit,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:processed=PrefixedIdentifierImpl
    FilterQuality filterQuality = FilterQuality.low,

    /// optionalParameters: {FilterQuality? placeholderFilterQuality} , default:none
    FilterQuality? placeholderFilterQuality,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry alignment = Alignment.center,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:processed=PrefixedIdentifierImpl
    ImageRepeat repeat = ImageRepeat.noRepeat,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    bool matchTextDirection = false,

    /// optionalParameters: {int? placeholderCacheWidth} , default:none
    int? placeholderCacheWidth,

    /// optionalParameters: {int? placeholderCacheHeight} , default:none
    int? placeholderCacheHeight,

    /// optionalParameters: {int? imageCacheWidth} , default:none
    int? imageCacheWidth,

    /// optionalParameters: {int? imageCacheHeight} , default:none
    int? imageCacheHeight,
  }) : super.memoryNetwork(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          placeholderScale: placeholderScale,
          imageScale: imageScale,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          placeholderCacheWidth: placeholderCacheWidth,
          placeholderCacheHeight: placeholderCacheHeight,
          imageCacheWidth: imageCacheWidth,
          imageCacheHeight: imageCacheHeight,
        ) {
    mateCreateName = 'FadeInImage.memoryNetwork';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => FadeInImage$Mate.memoryNetwork(
          key: p.get('key').build(),
          placeholder: p.get('placeholder').build(),
          placeholderErrorBuilder: p.get('placeholderErrorBuilder').build(),
          image: p.get('image').build(),
          imageErrorBuilder: p.get('imageErrorBuilder').build(),
          placeholderScale: p.get('placeholderScale').build(),
          imageScale: p.get('imageScale').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          imageSemanticLabel: p.get('imageSemanticLabel').build(),
          fadeOutDuration: p.get('fadeOutDuration').build(),
          fadeOutCurve: p.get('fadeOutCurve').build(),
          fadeInDuration: p.get('fadeInDuration').build(),
          fadeInCurve: p.get('fadeInCurve').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          fit: p.get('fit').build(),
          placeholderFit: p.get('placeholderFit').build(),
          filterQuality: p.get('filterQuality').build(),
          placeholderFilterQuality: p.get('placeholderFilterQuality').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          placeholderCacheWidth: p.get('placeholderCacheWidth').build(),
          placeholderCacheHeight: p.get('placeholderCacheHeight').build(),
          imageCacheWidth: p.get('imageCacheWidth').build(),
          imageCacheHeight: p.get('imageCacheHeight').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'placeholder',
      placeholder,
      isNamed: true,
    );
    mateUse(
      'placeholderErrorBuilder',
      placeholderErrorBuilder,
      isNamed: true,
    );
    mateUse(
      'image',
      image,
      isNamed: true,
    );
    mateUse(
      'imageErrorBuilder',
      imageErrorBuilder,
      isNamed: true,
    );
    mateUse(
      'placeholderScale',
      placeholderScale,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'imageScale',
      imageScale,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'imageSemanticLabel',
      imageSemanticLabel,
      isNamed: true,
    );
    mateUse(
      'fadeOutDuration',
      fadeOutDuration,
      isNamed: true,
    );
    mateUse(
      'fadeOutCurve',
      fadeOutCurve,
      isNamed: true,
      defaultValue: Curves.easeOut,
    );
    mateUse(
      'fadeInDuration',
      fadeInDuration,
      isNamed: true,
    );
    mateUse(
      'fadeInCurve',
      fadeInCurve,
      isNamed: true,
      defaultValue: Curves.easeIn,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
    );
    mateUse(
      'placeholderFit',
      placeholderFit,
      isNamed: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
      defaultValue: FilterQuality.low,
    );
    mateUse(
      'placeholderFilterQuality',
      placeholderFilterQuality,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'repeat',
      repeat,
      isNamed: true,
      defaultValue: ImageRepeat.noRepeat,
    );
    mateUse(
      'matchTextDirection',
      matchTextDirection,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'placeholderCacheWidth',
      placeholderCacheWidth,
      isNamed: true,
    );
    mateUse(
      'placeholderCacheHeight',
      placeholderCacheHeight,
      isNamed: true,
    );
    mateUse(
      'imageCacheWidth',
      imageCacheWidth,
      isNamed: true,
    );
    mateUse(
      'imageCacheHeight',
      imageCacheHeight,
      isNamed: true,
    );
  }

  /// FadeInImage FadeInImage.assetNetwork({Key? key, required String placeholder, Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder, required String image, Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder, AssetBundle? bundle, double? placeholderScale, double imageScale = 1.0, bool excludeFromSemantics = false, String? imageSemanticLabel, Duration fadeOutDuration = const Duration(milliseconds: 300), Curve fadeOutCurve = Curves.easeOut, Duration fadeInDuration = const Duration(milliseconds: 700), Curve fadeInCurve = Curves.easeIn, double? width, double? height, BoxFit? fit, BoxFit? placeholderFit, FilterQuality filterQuality = FilterQuality.low, FilterQuality? placeholderFilterQuality, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, int? placeholderCacheWidth, int? placeholderCacheHeight, int? imageCacheWidth, int? imageCacheHeight})
  FadeInImage$Mate.assetNetwork({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required String placeholder} , default:none
    required String placeholder,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? placeholderErrorBuilder} , default:none
    ImageErrorWidgetBuilder? placeholderErrorBuilder,

    /// optionalParameters: {required String image} , default:none
    required String image,

    /// optionalParameters: {Widget Function(BuildContext, Object, StackTrace?)? imageErrorBuilder} , default:none
    ImageErrorWidgetBuilder? imageErrorBuilder,

    /// optionalParameters: {AssetBundle? bundle} , default:none
    AssetBundle? bundle,

    /// optionalParameters: {double? placeholderScale} , default:none
    double? placeholderScale,

    /// optionalParameters: {double imageScale = 1.0} , default:processed=DoubleLiteralImpl
    double imageScale = 1.0,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {String? imageSemanticLabel} , default:none
    String? imageSemanticLabel,

    /// optionalParameters: {Duration fadeOutDuration = const Duration(milliseconds: 300)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration fadeOutDuration,

    /// optionalParameters: {Curve fadeOutCurve = Curves.easeOut} , default:processed=PrefixedIdentifierImpl
    Curve fadeOutCurve = Curves.easeOut,

    /// optionalParameters: {Duration fadeInDuration = const Duration(milliseconds: 700)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration fadeInDuration,

    /// optionalParameters: {Curve fadeInCurve = Curves.easeIn} , default:processed=PrefixedIdentifierImpl
    Curve fadeInCurve = Curves.easeIn,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {BoxFit? fit} , default:none
    BoxFit? fit,

    /// optionalParameters: {BoxFit? placeholderFit} , default:none
    BoxFit? placeholderFit,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:processed=PrefixedIdentifierImpl
    FilterQuality filterQuality = FilterQuality.low,

    /// optionalParameters: {FilterQuality? placeholderFilterQuality} , default:none
    FilterQuality? placeholderFilterQuality,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    AlignmentGeometry alignment = Alignment.center,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:processed=PrefixedIdentifierImpl
    ImageRepeat repeat = ImageRepeat.noRepeat,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    bool matchTextDirection = false,

    /// optionalParameters: {int? placeholderCacheWidth} , default:none
    int? placeholderCacheWidth,

    /// optionalParameters: {int? placeholderCacheHeight} , default:none
    int? placeholderCacheHeight,

    /// optionalParameters: {int? imageCacheWidth} , default:none
    int? imageCacheWidth,

    /// optionalParameters: {int? imageCacheHeight} , default:none
    int? imageCacheHeight,
  }) : super.assetNetwork(
          key: key,
          placeholder: placeholder,
          placeholderErrorBuilder: placeholderErrorBuilder,
          image: image,
          imageErrorBuilder: imageErrorBuilder,
          bundle: bundle,
          placeholderScale: placeholderScale,
          imageScale: imageScale,
          excludeFromSemantics: excludeFromSemantics,
          imageSemanticLabel: imageSemanticLabel,
          fadeOutDuration: fadeOutDuration,
          fadeOutCurve: fadeOutCurve,
          fadeInDuration: fadeInDuration,
          fadeInCurve: fadeInCurve,
          width: width,
          height: height,
          fit: fit,
          placeholderFit: placeholderFit,
          filterQuality: filterQuality,
          placeholderFilterQuality: placeholderFilterQuality,
          alignment: alignment,
          repeat: repeat,
          matchTextDirection: matchTextDirection,
          placeholderCacheWidth: placeholderCacheWidth,
          placeholderCacheHeight: placeholderCacheHeight,
          imageCacheWidth: imageCacheWidth,
          imageCacheHeight: imageCacheHeight,
        ) {
    mateCreateName = 'FadeInImage.assetNetwork';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => FadeInImage$Mate.assetNetwork(
          key: p.get('key').build(),
          placeholder: p.get('placeholder').build(),
          placeholderErrorBuilder: p.get('placeholderErrorBuilder').build(),
          image: p.get('image').build(),
          imageErrorBuilder: p.get('imageErrorBuilder').build(),
          bundle: p.get('bundle').build(),
          placeholderScale: p.get('placeholderScale').build(),
          imageScale: p.get('imageScale').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          imageSemanticLabel: p.get('imageSemanticLabel').build(),
          fadeOutDuration: p.get('fadeOutDuration').build(),
          fadeOutCurve: p.get('fadeOutCurve').build(),
          fadeInDuration: p.get('fadeInDuration').build(),
          fadeInCurve: p.get('fadeInCurve').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          fit: p.get('fit').build(),
          placeholderFit: p.get('placeholderFit').build(),
          filterQuality: p.get('filterQuality').build(),
          placeholderFilterQuality: p.get('placeholderFilterQuality').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          placeholderCacheWidth: p.get('placeholderCacheWidth').build(),
          placeholderCacheHeight: p.get('placeholderCacheHeight').build(),
          imageCacheWidth: p.get('imageCacheWidth').build(),
          imageCacheHeight: p.get('imageCacheHeight').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'placeholder',
      placeholder,
      isNamed: true,
    );
    mateUse(
      'placeholderErrorBuilder',
      placeholderErrorBuilder,
      isNamed: true,
    );
    mateUse(
      'image',
      image,
      isNamed: true,
    );
    mateUse(
      'imageErrorBuilder',
      imageErrorBuilder,
      isNamed: true,
    );
    mateUse(
      'bundle',
      bundle,
      isNamed: true,
    );
    mateUse(
      'placeholderScale',
      placeholderScale,
      isNamed: true,
    );
    mateUse(
      'imageScale',
      imageScale,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'imageSemanticLabel',
      imageSemanticLabel,
      isNamed: true,
    );
    mateUse(
      'fadeOutDuration',
      fadeOutDuration,
      isNamed: true,
    );
    mateUse(
      'fadeOutCurve',
      fadeOutCurve,
      isNamed: true,
      defaultValue: Curves.easeOut,
    );
    mateUse(
      'fadeInDuration',
      fadeInDuration,
      isNamed: true,
    );
    mateUse(
      'fadeInCurve',
      fadeInCurve,
      isNamed: true,
      defaultValue: Curves.easeIn,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
    );
    mateUse(
      'placeholderFit',
      placeholderFit,
      isNamed: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
      defaultValue: FilterQuality.low,
    );
    mateUse(
      'placeholderFilterQuality',
      placeholderFilterQuality,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'repeat',
      repeat,
      isNamed: true,
      defaultValue: ImageRepeat.noRepeat,
    );
    mateUse(
      'matchTextDirection',
      matchTextDirection,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'placeholderCacheWidth',
      placeholderCacheWidth,
      isNamed: true,
    );
    mateUse(
      'placeholderCacheHeight',
      placeholderCacheHeight,
      isNamed: true,
    );
    mateUse(
      'imageCacheWidth',
      imageCacheWidth,
      isNamed: true,
    );
    mateUse(
      'imageCacheHeight',
      imageCacheHeight,
      isNamed: true,
    );
  }
}
