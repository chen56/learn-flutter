// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/transitions.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/animation/animation.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/stack.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/foundation/change_notifier.dart';

/// class SlideTransition extends AnimatedWidget
class SlideTransition$Mate extends SlideTransition with Mate {
  /// SlideTransition SlideTransition({Key? key, required Animation<Offset> position, bool transformHitTests = true, TextDirection? textDirection, Widget? child})
  SlideTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<Offset> position} , defaultValue:none
    required Animation<Offset> position,

    /// optionalParameters: {bool transformHitTests = true} , defaultValue:Literal
    bool transformHitTests = true,

    /// optionalParameters: {TextDirection? textDirection} , defaultValue:none
    TextDirection? textDirection,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          position: position,
          transformHitTests: transformHitTests,
          textDirection: textDirection,
          child: child,
        ) {
    mateCreateName = 'SlideTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SlideTransition$Mate(
          key: p.get('key').build(),
          position: p.get('position').build(),
          transformHitTests: p.get('transformHitTests').build(),
          textDirection: p.get('textDirection').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('position', position);
    mateUse('transformHitTests', transformHitTests);
    mateUse('textDirection', textDirection);
    mateUse('child', child);
  }
}

/// class ScaleTransition extends AnimatedWidget
class ScaleTransition$Mate extends ScaleTransition with Mate {
  /// ScaleTransition ScaleTransition({Key? key, required Animation<double> scale, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  ScaleTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<double> scale} , defaultValue:none
    required Animation<double> scale,

    /// optionalParameters: {Alignment alignment = Alignment.center} , defaultValue:unprocessed
    required Alignment alignment,

    /// optionalParameters: {FilterQuality? filterQuality} , defaultValue:none
    FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          scale: scale,
          alignment: alignment,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateCreateName = 'ScaleTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ScaleTransition$Mate(
          key: p.get('key').build(),
          scale: p.get('scale').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('scale', scale);
    mateUse('alignment', alignment);
    mateUse('filterQuality', filterQuality);
    mateUse('child', child);
  }
}

/// class RotationTransition extends AnimatedWidget
class RotationTransition$Mate extends RotationTransition with Mate {
  /// RotationTransition RotationTransition({Key? key, required Animation<double> turns, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  RotationTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<double> turns} , defaultValue:none
    required Animation<double> turns,

    /// optionalParameters: {Alignment alignment = Alignment.center} , defaultValue:unprocessed
    required Alignment alignment,

    /// optionalParameters: {FilterQuality? filterQuality} , defaultValue:none
    FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          turns: turns,
          alignment: alignment,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateCreateName = 'RotationTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RotationTransition$Mate(
          key: p.get('key').build(),
          turns: p.get('turns').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('turns', turns);
    mateUse('alignment', alignment);
    mateUse('filterQuality', filterQuality);
    mateUse('child', child);
  }
}

/// class SizeTransition extends AnimatedWidget
class SizeTransition$Mate extends SizeTransition with Mate {
  /// SizeTransition SizeTransition({Key? key, Axis axis = Axis.vertical, required Animation<double> sizeFactor, double axisAlignment = 0.0, Widget? child})
  SizeTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Axis axis = Axis.vertical} , defaultValue:unprocessed
    required Axis axis,

    /// optionalParameters: {required Animation<double> sizeFactor} , defaultValue:none
    required Animation<double> sizeFactor,

    /// optionalParameters: {double axisAlignment = 0.0} , defaultValue:Literal
    double axisAlignment = 0.0,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          axis: axis,
          sizeFactor: sizeFactor,
          axisAlignment: axisAlignment,
          child: child,
        ) {
    mateCreateName = 'SizeTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SizeTransition$Mate(
          key: p.get('key').build(),
          axis: p.get('axis').build(),
          sizeFactor: p.get('sizeFactor').build(),
          axisAlignment: p.get('axisAlignment').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('axis', axis);
    mateUse('sizeFactor', sizeFactor);
    mateUse('axisAlignment', axisAlignment);
    mateUse('child', child);
  }
}

/// class FadeTransition extends SingleChildRenderObjectWidget
class FadeTransition$Mate extends FadeTransition with Mate {
  /// FadeTransition FadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? child})
  FadeTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<double> opacity} , defaultValue:none
    required Animation<double> opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , defaultValue:Literal
    bool alwaysIncludeSemantics = false,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          child: child,
        ) {
    mateCreateName = 'FadeTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => FadeTransition$Mate(
          key: p.get('key').build(),
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('opacity', opacity);
    mateUse('alwaysIncludeSemantics', alwaysIncludeSemantics);
    mateUse('child', child);
  }
}

/// class SliverFadeTransition extends SingleChildRenderObjectWidget
class SliverFadeTransition$Mate extends SliverFadeTransition with Mate {
  /// SliverFadeTransition SliverFadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? sliver})
  SliverFadeTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<double> opacity} , defaultValue:none
    required Animation<double> opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , defaultValue:Literal
    bool alwaysIncludeSemantics = false,

    /// optionalParameters: {Widget? sliver} , defaultValue:none
    Widget? sliver,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          sliver: sliver,
        ) {
    mateCreateName = 'SliverFadeTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliverFadeTransition$Mate(
          key: p.get('key').build(),
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse('key', key);
    mateUse('opacity', opacity);
    mateUse('alwaysIncludeSemantics', alwaysIncludeSemantics);
    mateUse('sliver', sliver);
  }
}

/// class RelativeRectTween extends Tween<RelativeRect>
class RelativeRectTween$Mate extends RelativeRectTween with Mate {
  /// RelativeRectTween RelativeRectTween({RelativeRect? begin, RelativeRect? end})
  RelativeRectTween$Mate({
    /// optionalParameters: {RelativeRect? begin} , defaultValue:none
    RelativeRect? begin,

    /// optionalParameters: {RelativeRect? end} , defaultValue:none
    RelativeRect? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateCreateName = 'RelativeRectTween';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RelativeRectTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse('begin', begin);
    mateUse('end', end);
  }
}

/// class PositionedTransition extends AnimatedWidget
class PositionedTransition$Mate extends PositionedTransition with Mate {
  /// PositionedTransition PositionedTransition({Key? key, required Animation<RelativeRect> rect, required Widget child})
  PositionedTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<RelativeRect> rect} , defaultValue:none
    required Animation<RelativeRect> rect,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          rect: rect,
          child: child,
        ) {
    mateCreateName = 'PositionedTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PositionedTransition$Mate(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('rect', rect);
    mateUse('child', child);
  }
}

/// class RelativePositionedTransition extends AnimatedWidget
class RelativePositionedTransition$Mate extends RelativePositionedTransition with Mate {
  /// RelativePositionedTransition RelativePositionedTransition({Key? key, required Animation<Rect?> rect, required Size size, required Widget child})
  RelativePositionedTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<Rect?> rect} , defaultValue:none
    required Animation<Rect?> rect,

    /// optionalParameters: {required Size size} , defaultValue:none
    required Size size,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          rect: rect,
          size: size,
          child: child,
        ) {
    mateCreateName = 'RelativePositionedTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RelativePositionedTransition$Mate(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          size: p.get('size').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('rect', rect);
    mateUse('size', size);
    mateUse('child', child);
  }
}

/// class DecoratedBoxTransition extends AnimatedWidget
class DecoratedBoxTransition$Mate extends DecoratedBoxTransition with Mate {
  /// DecoratedBoxTransition DecoratedBoxTransition({Key? key, required Animation<Decoration> decoration, DecorationPosition position = DecorationPosition.background, required Widget child})
  DecoratedBoxTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<Decoration> decoration} , defaultValue:none
    required Animation<Decoration> decoration,

    /// optionalParameters: {DecorationPosition position = DecorationPosition.background} , defaultValue:unprocessed
    required DecorationPosition position,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          decoration: decoration,
          position: position,
          child: child,
        ) {
    mateCreateName = 'DecoratedBoxTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DecoratedBoxTransition$Mate(
          key: p.get('key').build(),
          decoration: p.get('decoration').build(),
          position: p.get('position').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('decoration', decoration);
    mateUse('position', position);
    mateUse('child', child);
  }
}

/// class AlignTransition extends AnimatedWidget
class AlignTransition$Mate extends AlignTransition with Mate {
  /// AlignTransition AlignTransition({Key? key, required Animation<AlignmentGeometry> alignment, required Widget child, double? widthFactor, double? heightFactor})
  AlignTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<AlignmentGeometry> alignment} , defaultValue:none
    required Animation<AlignmentGeometry> alignment,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {double? widthFactor} , defaultValue:none
    double? widthFactor,

    /// optionalParameters: {double? heightFactor} , defaultValue:none
    double? heightFactor,
  }) : super(
          key: key,
          alignment: alignment,
          child: child,
          widthFactor: widthFactor,
          heightFactor: heightFactor,
        ) {
    mateCreateName = 'AlignTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => AlignTransition$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
        );
    mateUse('key', key);
    mateUse('alignment', alignment);
    mateUse('child', child);
    mateUse('widthFactor', widthFactor);
    mateUse('heightFactor', heightFactor);
  }
}

/// class DefaultTextStyleTransition extends AnimatedWidget
class DefaultTextStyleTransition$Mate extends DefaultTextStyleTransition with Mate {
  /// DefaultTextStyleTransition DefaultTextStyleTransition({Key? key, required Animation<TextStyle> style, required Widget child, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines})
  DefaultTextStyleTransition$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<TextStyle> style} , defaultValue:none
    required Animation<TextStyle> style,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {TextAlign? textAlign} , defaultValue:none
    TextAlign? textAlign,

    /// optionalParameters: {bool softWrap = true} , defaultValue:Literal
    bool softWrap = true,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , defaultValue:unprocessed
    required TextOverflow overflow,

    /// optionalParameters: {int? maxLines} , defaultValue:none
    int? maxLines,
  }) : super(
          key: key,
          style: style,
          child: child,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
        ) {
    mateCreateName = 'DefaultTextStyleTransition';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => DefaultTextStyleTransition$Mate(
          key: p.get('key').build(),
          style: p.get('style').build(),
          child: p.get('child').build(),
          textAlign: p.get('textAlign').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          maxLines: p.get('maxLines').build(),
        );
    mateUse('key', key);
    mateUse('style', style);
    mateUse('child', child);
    mateUse('textAlign', textAlign);
    mateUse('softWrap', softWrap);
    mateUse('overflow', overflow);
    mateUse('maxLines', maxLines);
  }
}

/// class ListenableBuilder extends AnimatedWidget
class ListenableBuilder$Mate extends ListenableBuilder with Mate {
  /// ListenableBuilder ListenableBuilder({Key? key, required Listenable listenable, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  ListenableBuilder$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Listenable listenable} , defaultValue:none
    required Listenable listenable,

    /// optionalParameters: {required Widget Function(BuildContext, Widget?) builder} , defaultValue:none
    required TransitionBuilder builder,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          listenable: listenable,
          builder: builder,
          child: child,
        ) {
    mateCreateName = 'ListenableBuilder';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ListenableBuilder$Mate(
          key: p.get('key').build(),
          listenable: p.get('listenable').build(),
          builder: p.get('builder').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('listenable', listenable);
    mateUse('builder', builder);
    mateUse('child', child);
  }
}

/// class AnimatedBuilder extends ListenableBuilder
class AnimatedBuilder$Mate extends AnimatedBuilder with Mate {
  /// AnimatedBuilder AnimatedBuilder({Key? key, required Listenable animation, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  AnimatedBuilder$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Listenable animation} , defaultValue:none
    required Listenable animation,

    /// optionalParameters: {required Widget Function(BuildContext, Widget?) builder} , defaultValue:none
    required TransitionBuilder builder,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          animation: animation,
          builder: builder,
          child: child,
        ) {
    mateCreateName = 'AnimatedBuilder';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => AnimatedBuilder$Mate(
          key: p.get('key').build(),
          animation: p.get('animation').build(),
          builder: p.get('builder').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('animation', animation);
    mateUse('builder', builder);
    mateUse('child', child);
  }
}
