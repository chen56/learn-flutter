// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/transitions.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/animation/animation.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/stack.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/foundation/change_notifier.dart';

/// class SlideTransition extends AnimatedWidget
class SlideTransition$Mate extends SlideTransition with Mate {
  /// SlideTransition SlideTransition({Key? key, required Animation<Offset> position, bool transformHitTests = true, TextDirection? textDirection, Widget? child})
  SlideTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<Offset> position} , default:none
    required Animation<Offset> position,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    bool transformHitTests = true,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    TextDirection? textDirection,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          position: position,
          transformHitTests: transformHitTests,
          textDirection: textDirection,
          child: child,
        ) {
    mateBuilderName = 'SlideTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => SlideTransition$Mate(
          key: p.get('key').build(),
          position: p.get('position').build(),
          transformHitTests: p.get('transformHitTests').build(),
          textDirection: p.get('textDirection').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
    );
    mateUse(
      'transformHitTests',
      transformHitTests,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ScaleTransition extends AnimatedWidget
class ScaleTransition$Mate extends ScaleTransition with Mate {
  /// ScaleTransition ScaleTransition({Key? key, required Animation<double> scale, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  ScaleTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<double> scale} , default:none
    required Animation<double> scale,

    /// optionalParameters: {Alignment alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    Alignment alignment = Alignment.center,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          scale: scale,
          alignment: alignment,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateBuilderName = 'ScaleTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScaleTransition$Mate(
          key: p.get('key').build(),
          scale: p.get('scale').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'scale',
      scale,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class RotationTransition extends AnimatedWidget
class RotationTransition$Mate extends RotationTransition with Mate {
  /// RotationTransition RotationTransition({Key? key, required Animation<double> turns, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  RotationTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<double> turns} , default:none
    required Animation<double> turns,

    /// optionalParameters: {Alignment alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    Alignment alignment = Alignment.center,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          turns: turns,
          alignment: alignment,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateBuilderName = 'RotationTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RotationTransition$Mate(
          key: p.get('key').build(),
          turns: p.get('turns').build(),
          alignment: p.get('alignment').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'turns',
      turns,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: Alignment.center,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class SizeTransition extends AnimatedWidget
class SizeTransition$Mate extends SizeTransition with Mate {
  /// SizeTransition SizeTransition({Key? key, Axis axis = Axis.vertical, required Animation<double> sizeFactor, double axisAlignment = 0.0, Widget? child})
  SizeTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {Axis axis = Axis.vertical} , default:processed=PrefixedIdentifierImpl
    Axis axis = Axis.vertical,

    /// optionalParameters: {required Animation<double> sizeFactor} , default:none
    required Animation<double> sizeFactor,

    /// optionalParameters: {double axisAlignment = 0.0} , default:processed=DoubleLiteralImpl
    double axisAlignment = 0.0,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          axis: axis,
          sizeFactor: sizeFactor,
          axisAlignment: axisAlignment,
          child: child,
        ) {
    mateBuilderName = 'SizeTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => SizeTransition$Mate(
          key: p.get('key').build(),
          axis: p.get('axis').build(),
          sizeFactor: p.get('sizeFactor').build(),
          axisAlignment: p.get('axisAlignment').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'axis',
      axis,
      isNamed: true,
      defaultValue: Axis.vertical,
    );
    mateUse(
      'sizeFactor',
      sizeFactor,
      isNamed: true,
    );
    mateUse(
      'axisAlignment',
      axisAlignment,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class FadeTransition extends SingleChildRenderObjectWidget
class FadeTransition$Mate extends FadeTransition with Mate {
  /// FadeTransition FadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? child})
  FadeTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<double> opacity} , default:none
    required Animation<double> opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    bool alwaysIncludeSemantics = false,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          child: child,
        ) {
    mateBuilderName = 'FadeTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => FadeTransition$Mate(
          key: p.get('key').build(),
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
    );
    mateUse(
      'alwaysIncludeSemantics',
      alwaysIncludeSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class SliverFadeTransition extends SingleChildRenderObjectWidget
class SliverFadeTransition$Mate extends SliverFadeTransition with Mate {
  /// SliverFadeTransition SliverFadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? sliver})
  SliverFadeTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<double> opacity} , default:none
    required Animation<double> opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    bool alwaysIncludeSemantics = false,

    /// optionalParameters: {Widget? sliver} , default:none
    Widget? sliver,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          sliver: sliver,
        ) {
    mateBuilderName = 'SliverFadeTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => SliverFadeTransition$Mate(
          key: p.get('key').build(),
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
    );
    mateUse(
      'alwaysIncludeSemantics',
      alwaysIncludeSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'sliver',
      sliver,
      isNamed: true,
    );
  }
}

/// class RelativeRectTween extends Tween<RelativeRect>
class RelativeRectTween$Mate extends RelativeRectTween with Mate {
  /// RelativeRectTween RelativeRectTween({RelativeRect? begin, RelativeRect? end})
  RelativeRectTween$Mate({
    /// optionalParameters: {RelativeRect? begin} , default:none
    RelativeRect? begin,

    /// optionalParameters: {RelativeRect? end} , default:none
    RelativeRect? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateBuilderName = 'RelativeRectTween';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RelativeRectTween$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
        );
    mateUse(
      'begin',
      begin,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
  }
}

/// class PositionedTransition extends AnimatedWidget
class PositionedTransition$Mate extends PositionedTransition with Mate {
  /// PositionedTransition PositionedTransition({Key? key, required Animation<RelativeRect> rect, required Widget child})
  PositionedTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<RelativeRect> rect} , default:none
    required Animation<RelativeRect> rect,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          rect: rect,
          child: child,
        ) {
    mateBuilderName = 'PositionedTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PositionedTransition$Mate(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'rect',
      rect,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class RelativePositionedTransition extends AnimatedWidget
class RelativePositionedTransition$Mate extends RelativePositionedTransition
    with Mate {
  /// RelativePositionedTransition RelativePositionedTransition({Key? key, required Animation<Rect?> rect, required Size size, required Widget child})
  RelativePositionedTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<Rect?> rect} , default:none
    required Animation<Rect?> rect,

    /// optionalParameters: {required Size size} , default:none
    required Size size,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          rect: rect,
          size: size,
          child: child,
        ) {
    mateBuilderName = 'RelativePositionedTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RelativePositionedTransition$Mate(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          size: p.get('size').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'rect',
      rect,
      isNamed: true,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class DecoratedBoxTransition extends AnimatedWidget
class DecoratedBoxTransition$Mate extends DecoratedBoxTransition with Mate {
  /// DecoratedBoxTransition DecoratedBoxTransition({Key? key, required Animation<Decoration> decoration, DecorationPosition position = DecorationPosition.background, required Widget child})
  DecoratedBoxTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<Decoration> decoration} , default:none
    required Animation<Decoration> decoration,

    /// optionalParameters: {DecorationPosition position = DecorationPosition.background} , default:processed=PrefixedIdentifierImpl
    DecorationPosition position = DecorationPosition.background,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          decoration: decoration,
          position: position,
          child: child,
        ) {
    mateBuilderName = 'DecoratedBoxTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DecoratedBoxTransition$Mate(
          key: p.get('key').build(),
          decoration: p.get('decoration').build(),
          position: p.get('position').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'decoration',
      decoration,
      isNamed: true,
    );
    mateUse(
      'position',
      position,
      isNamed: true,
      defaultValue: DecorationPosition.background,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class AlignTransition extends AnimatedWidget
class AlignTransition$Mate extends AlignTransition with Mate {
  /// AlignTransition AlignTransition({Key? key, required Animation<AlignmentGeometry> alignment, required Widget child, double? widthFactor, double? heightFactor})
  AlignTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<AlignmentGeometry> alignment} , default:none
    required Animation<AlignmentGeometry> alignment,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {double? widthFactor} , default:none
    double? widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    double? heightFactor,
  }) : super(
          key: key,
          alignment: alignment,
          child: child,
          widthFactor: widthFactor,
          heightFactor: heightFactor,
        ) {
    mateBuilderName = 'AlignTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AlignTransition$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'widthFactor',
      widthFactor,
      isNamed: true,
    );
    mateUse(
      'heightFactor',
      heightFactor,
      isNamed: true,
    );
  }
}

/// class DefaultTextStyleTransition extends AnimatedWidget
class DefaultTextStyleTransition$Mate extends DefaultTextStyleTransition
    with Mate {
  /// DefaultTextStyleTransition DefaultTextStyleTransition({Key? key, required Animation<TextStyle> style, required Widget child, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines})
  DefaultTextStyleTransition$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Animation<TextStyle> style} , default:none
    required Animation<TextStyle> style,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    TextAlign? textAlign,

    /// optionalParameters: {bool softWrap = true} , default:processed=BooleanLiteralImpl
    bool softWrap = true,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , default:processed=PrefixedIdentifierImpl
    TextOverflow overflow = TextOverflow.clip,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,
  }) : super(
          key: key,
          style: style,
          child: child,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
        ) {
    mateBuilderName = 'DefaultTextStyleTransition';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DefaultTextStyleTransition$Mate(
          key: p.get('key').build(),
          style: p.get('style').build(),
          child: p.get('child').build(),
          textAlign: p.get('textAlign').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          maxLines: p.get('maxLines').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
    );
    mateUse(
      'softWrap',
      softWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'overflow',
      overflow,
      isNamed: true,
      defaultValue: TextOverflow.clip,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
  }
}

/// class ListenableBuilder extends AnimatedWidget
class ListenableBuilder$Mate extends ListenableBuilder with Mate {
  /// ListenableBuilder ListenableBuilder({Key? key, required Listenable listenable, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  ListenableBuilder$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Listenable listenable} , default:none
    required Listenable listenable,

    /// optionalParameters: {required Widget Function(BuildContext, Widget?) builder} , default:none
    required TransitionBuilder builder,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          listenable: listenable,
          builder: builder,
          child: child,
        ) {
    mateBuilderName = 'ListenableBuilder';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ListenableBuilder$Mate(
          key: p.get('key').build(),
          listenable: p.get('listenable').build(),
          builder: p.get('builder').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'listenable',
      listenable,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class AnimatedBuilder extends ListenableBuilder
class AnimatedBuilder$Mate extends AnimatedBuilder with Mate {
  /// AnimatedBuilder AnimatedBuilder({Key? key, required Listenable animation, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  AnimatedBuilder$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Listenable animation} , default:none
    required Listenable animation,

    /// optionalParameters: {required Widget Function(BuildContext, Widget?) builder} , default:none
    required TransitionBuilder builder,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          animation: animation,
          builder: builder,
          child: child,
        ) {
    mateBuilderName = 'AnimatedBuilder';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedBuilder$Mate(
          key: p.get('key').build(),
          animation: p.get('animation').build(),
          builder: p.get('builder').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'animation',
      animation,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
