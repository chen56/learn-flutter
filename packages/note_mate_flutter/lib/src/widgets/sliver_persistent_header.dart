// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/sliver_persistent_header.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;

/// class SliverPersistentHeader extends StatelessWidget
class SliverPersistentHeader$Mate extends _i1.SliverPersistentHeader
    with _i2.Mate {
  /// SliverPersistentHeader SliverPersistentHeader({Key? key, required SliverPersistentHeaderDelegate delegate, bool pinned = false, bool floating = false})
  SliverPersistentHeader$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required SliverPersistentHeaderDelegate delegate} , default:none
    required super.delegate,

    /// optionalParameters: {bool pinned = false} , default:processed=BooleanLiteralImpl
    super.pinned,

    /// optionalParameters: {bool floating = false} , default:processed=BooleanLiteralImpl
    super.floating,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i1.SliverPersistentHeaderDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
          'pinned': _i2.BuilderArg<bool>(
            name: 'pinned',
            init: pinned,
            isNamed: true,
            defaultValue: false,
          ),
          'floating': _i2.BuilderArg<bool>(
            name: 'floating',
            init: floating,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'SliverPersistentHeader';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverPersistentHeader$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          pinned: p.get('pinned').build(),
          floating: p.get('floating').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
