// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scrollable.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_metrics.dart';

/// class Scrollable extends StatefulWidget
class Scrollable$Mate extends Scrollable with Mate {
  /// Scrollable Scrollable({Key? key, AxisDirection axisDirection = AxisDirection.down, ScrollController? controller, ScrollPhysics? physics, required Widget Function(BuildContext, ViewportOffset) viewportBuilder, double Function(ScrollIncrementDetails)? incrementCalculator, bool excludeFromSemantics = false, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, String? restorationId, ScrollBehavior? scrollBehavior, Clip clipBehavior = Clip.hardEdge})
  Scrollable$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , hasDefaultValue:true, defaultValueCode:AxisDirection.down
    required AxisDirection axisDirection,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {required Widget Function(BuildContext, ViewportOffset) viewportBuilder} , hasDefaultValue:false, defaultValueCode:null
    required ViewportBuilder viewportBuilder,

    /// optionalParameters: {double Function(ScrollIncrementDetails)? incrementCalculator} , hasDefaultValue:false, defaultValueCode:null
    ScrollIncrementCalculator? incrementCalculator,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , hasDefaultValue:false, defaultValueCode:null
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          controller: controller,
          physics: physics,
          viewportBuilder: viewportBuilder,
          incrementCalculator: incrementCalculator,
          excludeFromSemantics: excludeFromSemantics,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => Scrollable$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          viewportBuilder: p.get('viewportBuilder').build(),
          incrementCalculator: p.get('incrementCalculator').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    matePut('key', key);
    matePut('axisDirection', axisDirection);
    matePut('controller', controller);
    matePut('physics', physics);
    matePut('viewportBuilder', viewportBuilder);
    matePut('incrementCalculator', incrementCalculator);
    matePut('excludeFromSemantics', excludeFromSemantics);
    matePut('semanticChildCount', semanticChildCount);
    matePut('dragStartBehavior', dragStartBehavior);
    matePut('restorationId', restorationId);
    matePut('scrollBehavior', scrollBehavior);
    matePut('clipBehavior', clipBehavior);
  }
}

/// class EdgeDraggingAutoScroller
class EdgeDraggingAutoScroller$Mate extends EdgeDraggingAutoScroller with Mate {
  /// EdgeDraggingAutoScroller EdgeDraggingAutoScroller(ScrollableState scrollable, {void Function()? onScrollViewScrolled, double velocityScalar = _kDefaultAutoScrollVelocityScalar})
  EdgeDraggingAutoScroller$Mate(
    /// requiredParameters: ScrollableState scrollable
    ScrollableState scrollable, {
    /// optionalParameters: {void Function()? onScrollViewScrolled} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onScrollViewScrolled,

    /// optionalParameters: {double velocityScalar = _kDefaultAutoScrollVelocityScalar} , hasDefaultValue:true, defaultValueCode:_kDefaultAutoScrollVelocityScalar
    required double velocityScalar,
  }) : super(
          scrollable,
          onScrollViewScrolled: onScrollViewScrolled,
          velocityScalar: velocityScalar,
        ) {
    mateBuilder = (p) => EdgeDraggingAutoScroller$Mate(
          p.get('scrollable').value,
          onScrollViewScrolled: p.get('onScrollViewScrolled').build(),
          velocityScalar: p.get('velocityScalar').build(),
        );
    matePut('scrollable', scrollable);
    matePut('onScrollViewScrolled', onScrollViewScrolled);
    matePut('velocityScalar', velocityScalar);
  }
}

/// class ScrollableDetails
class ScrollableDetails$Mate extends ScrollableDetails with Mate {
  /// ScrollableDetails ScrollableDetails({required AxisDirection direction, required ScrollController controller, Clip? clipBehavior})
  ScrollableDetails$Mate({
    /// optionalParameters: {required AxisDirection direction} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection direction,

    /// optionalParameters: {required ScrollController controller} , hasDefaultValue:false, defaultValueCode:null
    required ScrollController controller,

    /// optionalParameters: {Clip? clipBehavior} , hasDefaultValue:false, defaultValueCode:null
    Clip? clipBehavior,
  }) : super(
          direction: direction,
          controller: controller,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => ScrollableDetails$Mate(
          direction: p.get('direction').build(),
          controller: p.get('controller').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    matePut('direction', direction);
    matePut('controller', controller);
    matePut('clipBehavior', clipBehavior);
  }
}

/// class ScrollIncrementDetails
class ScrollIncrementDetails$Mate extends ScrollIncrementDetails with Mate {
  /// ScrollIncrementDetails ScrollIncrementDetails({required ScrollIncrementType type, required ScrollMetrics metrics})
  ScrollIncrementDetails$Mate({
    /// optionalParameters: {required ScrollIncrementType type} , hasDefaultValue:false, defaultValueCode:null
    required ScrollIncrementType type,

    /// optionalParameters: {required ScrollMetrics metrics} , hasDefaultValue:false, defaultValueCode:null
    required ScrollMetrics metrics,
  }) : super(
          type: type,
          metrics: metrics,
        ) {
    mateBuilder = (p) => ScrollIncrementDetails$Mate(
          type: p.get('type').build(),
          metrics: p.get('metrics').build(),
        );
    matePut('type', type);
    matePut('metrics', metrics);
  }
}

/// class ScrollIntent extends Intent
class ScrollIntent$Mate extends ScrollIntent with Mate {
  /// ScrollIntent ScrollIntent({required AxisDirection direction, ScrollIncrementType type = ScrollIncrementType.line})
  ScrollIntent$Mate({
    /// optionalParameters: {required AxisDirection direction} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection direction,

    /// optionalParameters: {ScrollIncrementType type = ScrollIncrementType.line} , hasDefaultValue:true, defaultValueCode:ScrollIncrementType.line
    required ScrollIncrementType type,
  }) : super(
          direction: direction,
          type: type,
        ) {
    mateBuilder = (p) => ScrollIntent$Mate(
          direction: p.get('direction').build(),
          type: p.get('type').build(),
        );
    matePut('direction', direction);
    matePut('type', type);
  }
}
