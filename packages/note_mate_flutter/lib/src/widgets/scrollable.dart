// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scrollable.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/widgets.dart';

/// class Scrollable extends StatefulWidget
class Scrollable$Mate extends Scrollable with Mate {
  /// Scrollable Scrollable({Key? key, AxisDirection axisDirection = AxisDirection.down, ScrollController? controller, ScrollPhysics? physics, required Widget Function(BuildContext, ViewportOffset) viewportBuilder, double Function(ScrollIncrementDetails)? incrementCalculator, bool excludeFromSemantics = false, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, String? restorationId, ScrollBehavior? scrollBehavior, Clip clipBehavior = Clip.hardEdge})
  Scrollable$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , default:processed=PrefixedIdentifierImpl
    AxisDirection axisDirection = AxisDirection.down,

    /// optionalParameters: {ScrollController? controller} , default:none
    ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    ScrollPhysics? physics,

    /// optionalParameters: {required Widget Function(BuildContext, ViewportOffset) viewportBuilder} , default:none
    required ViewportBuilder viewportBuilder,

    /// optionalParameters: {double Function(ScrollIncrementDetails)? incrementCalculator} , default:none
    ScrollIncrementCalculator? incrementCalculator,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeFromSemantics = false,

    /// optionalParameters: {int? semanticChildCount} , default:none
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    DragStartBehavior dragStartBehavior = DragStartBehavior.start,

    /// optionalParameters: {String? restorationId} , default:none
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , default:none
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.hardEdge,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          controller: controller,
          physics: physics,
          viewportBuilder: viewportBuilder,
          incrementCalculator: incrementCalculator,
          excludeFromSemantics: excludeFromSemantics,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'Scrollable';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => Scrollable$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          viewportBuilder: p.get('viewportBuilder').build(),
          incrementCalculator: p.get('incrementCalculator').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'axisDirection',
      axisDirection,
      isNamed: true,
      defaultValue: AxisDirection.down,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'physics',
      physics,
      isNamed: true,
    );
    mateUse(
      'viewportBuilder',
      viewportBuilder,
      isNamed: true,
    );
    mateUse(
      'incrementCalculator',
      incrementCalculator,
      isNamed: true,
    );
    mateUse(
      'excludeFromSemantics',
      excludeFromSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'semanticChildCount',
      semanticChildCount,
      isNamed: true,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: DragStartBehavior.start,
    );
    mateUse(
      'restorationId',
      restorationId,
      isNamed: true,
    );
    mateUse(
      'scrollBehavior',
      scrollBehavior,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.hardEdge,
    );
  }
}

/// class EdgeDraggingAutoScroller
class EdgeDraggingAutoScroller$Mate extends EdgeDraggingAutoScroller with Mate {
  /// EdgeDraggingAutoScroller EdgeDraggingAutoScroller(ScrollableState scrollable, {void Function()? onScrollViewScrolled, double velocityScalar = _kDefaultAutoScrollVelocityScalar})
  EdgeDraggingAutoScroller$Mate(
    /// requiredParameters: ScrollableState scrollable
    ScrollableState scrollable, {
    /// optionalParameters: {void Function()? onScrollViewScrolled} , default:none
    VoidCallback? onScrollViewScrolled,

    /// optionalParameters: {double velocityScalar = _kDefaultAutoScrollVelocityScalar} , default:unprocessed=SimpleIdentifierImpl
    required double velocityScalar,
  }) : super(
          scrollable,
          onScrollViewScrolled: onScrollViewScrolled,
          velocityScalar: velocityScalar,
        ) {
    mateBuilderName = 'EdgeDraggingAutoScroller';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => EdgeDraggingAutoScroller$Mate(
          p.get('scrollable').value,
          onScrollViewScrolled: p.get('onScrollViewScrolled').build(),
          velocityScalar: p.get('velocityScalar').build(),
        );
    mateUse(
      'scrollable',
      scrollable,
      isNamed: false,
    );
    mateUse(
      'onScrollViewScrolled',
      onScrollViewScrolled,
      isNamed: true,
    );
    mateUse(
      'velocityScalar',
      velocityScalar,
      isNamed: true,
    );
  }
}

/// class ScrollableDetails
class ScrollableDetails$Mate extends ScrollableDetails with Mate {
  /// ScrollableDetails ScrollableDetails({required AxisDirection direction, required ScrollController controller, Clip? clipBehavior})
  ScrollableDetails$Mate({
    /// optionalParameters: {required AxisDirection direction} , default:none
    required AxisDirection direction,

    /// optionalParameters: {required ScrollController controller} , default:none
    required ScrollController controller,

    /// optionalParameters: {Clip? clipBehavior} , default:none
    Clip? clipBehavior,
  }) : super(
          direction: direction,
          controller: controller,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'ScrollableDetails';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollableDetails$Mate(
          direction: p.get('direction').build(),
          controller: p.get('controller').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'direction',
      direction,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
    );
  }
}

/// class ScrollIncrementDetails
class ScrollIncrementDetails$Mate extends ScrollIncrementDetails with Mate {
  /// ScrollIncrementDetails ScrollIncrementDetails({required ScrollIncrementType type, required ScrollMetrics metrics})
  ScrollIncrementDetails$Mate({
    /// optionalParameters: {required ScrollIncrementType type} , default:none
    required ScrollIncrementType type,

    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required ScrollMetrics metrics,
  }) : super(
          type: type,
          metrics: metrics,
        ) {
    mateBuilderName = 'ScrollIncrementDetails';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollIncrementDetails$Mate(
          type: p.get('type').build(),
          metrics: p.get('metrics').build(),
        );
    mateUse(
      'type',
      type,
      isNamed: true,
    );
    mateUse(
      'metrics',
      metrics,
      isNamed: true,
    );
  }
}

/// class ScrollIntent extends Intent
class ScrollIntent$Mate extends ScrollIntent with Mate {
  /// ScrollIntent ScrollIntent({required AxisDirection direction, ScrollIncrementType type = ScrollIncrementType.line})
  ScrollIntent$Mate({
    /// optionalParameters: {required AxisDirection direction} , default:none
    required AxisDirection direction,

    /// optionalParameters: {ScrollIncrementType type = ScrollIncrementType.line} , default:processed=PrefixedIdentifierImpl
    ScrollIncrementType type = ScrollIncrementType.line,
  }) : super(
          direction: direction,
          type: type,
        ) {
    mateBuilderName = 'ScrollIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollIntent$Mate(
          direction: p.get('direction').build(),
          type: p.get('type').build(),
        );
    mateUse(
      'direction',
      direction,
      isNamed: true,
    );
    mateUse(
      'type',
      type,
      isNamed: true,
      defaultValue: ScrollIncrementType.line,
    );
  }
}
