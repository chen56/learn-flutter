// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/scroll_simulation.dart';import 'dart:core';import 'package:flutter/src/physics/spring_simulation.dart';import 'package:flutter/src/physics/tolerance.dart';import 'package:note/mate.dart' show Mate;/// class BouncingScrollSimulation extends Simulation
class BouncingScrollSimulation$Mate extends BouncingScrollSimulation with Mate {/// BouncingScrollSimulation BouncingScrollSimulation({required double position, required double velocity, required double leadingExtent, required double trailingExtent, required SpringDescription spring, double constantDeceleration = 0, Tolerance tolerance = Tolerance.defaultTolerance})
BouncingScrollSimulation$Mate({/// optionalParameters: {required double position} , hasDefaultValue:false, defaultValueCode:null
required double position, /// optionalParameters: {required double velocity} , hasDefaultValue:false, defaultValueCode:null
required double velocity, /// optionalParameters: {required double leadingExtent} , hasDefaultValue:false, defaultValueCode:null
required double leadingExtent, /// optionalParameters: {required double trailingExtent} , hasDefaultValue:false, defaultValueCode:null
required double trailingExtent, /// optionalParameters: {required SpringDescription spring} , hasDefaultValue:false, defaultValueCode:null
required SpringDescription spring, /// optionalParameters: {double constantDeceleration = 0} , hasDefaultValue:true, defaultValueCode:0
required double constantDeceleration, /// optionalParameters: {Tolerance tolerance = Tolerance.defaultTolerance} , hasDefaultValue:true, defaultValueCode:Tolerance.defaultTolerance
required Tolerance tolerance, }) : super(position: position, velocity: velocity, leadingExtent: leadingExtent, trailingExtent: trailingExtent, spring: spring, constantDeceleration: constantDeceleration, tolerance: tolerance, ) { mateBuilder = (p) => BouncingScrollSimulation$Mate(position: p.get('position').build(), velocity: p.get('velocity').build(), leadingExtent: p.get('leadingExtent').build(), trailingExtent: p.get('trailingExtent').build(), spring: p.get('spring').build(), constantDeceleration: p.get('constantDeceleration').build(), tolerance: p.get('tolerance').build(), );
matePut('position', position);
matePut('velocity', velocity);
matePut('leadingExtent', leadingExtent);
matePut('trailingExtent', trailingExtent);
matePut('spring', spring);
matePut('constantDeceleration', constantDeceleration);
matePut('tolerance', tolerance); }

 }
/// class ClampingScrollSimulation extends Simulation
class ClampingScrollSimulation$Mate extends ClampingScrollSimulation with Mate {/// ClampingScrollSimulation ClampingScrollSimulation({required double position, required double velocity, double friction = 0.015, Tolerance tolerance = Tolerance.defaultTolerance})
ClampingScrollSimulation$Mate({/// optionalParameters: {required double position} , hasDefaultValue:false, defaultValueCode:null
required double position, /// optionalParameters: {required double velocity} , hasDefaultValue:false, defaultValueCode:null
required double velocity, /// optionalParameters: {double friction = 0.015} , hasDefaultValue:true, defaultValueCode:0.015
required double friction, /// optionalParameters: {Tolerance tolerance = Tolerance.defaultTolerance} , hasDefaultValue:true, defaultValueCode:Tolerance.defaultTolerance
required Tolerance tolerance, }) : super(position: position, velocity: velocity, friction: friction, tolerance: tolerance, ) { mateBuilder = (p) => ClampingScrollSimulation$Mate(position: p.get('position').build(), velocity: p.get('velocity').build(), friction: p.get('friction').build(), tolerance: p.get('tolerance').build(), );
matePut('position', position);
matePut('velocity', velocity);
matePut('friction', friction);
matePut('tolerance', tolerance); }

 }
