// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/texture.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;

/// class Texture extends LeafRenderObjectWidget
class Texture$Mate extends _i1.Texture with _i2.Mate {
  /// Texture Texture({Key? key, required int textureId, bool freeze = false, FilterQuality filterQuality = FilterQuality.low})
  Texture$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required int textureId} , default:none
    required super.textureId,

    /// optionalParameters: {bool freeze = false} , default:processed=BooleanLiteralImpl
    super.freeze,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:unprocessed=PrefixedIdentifierImpl
    super.filterQuality,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'textureId': _i2.BuilderArg<int>(
            name: 'textureId',
            init: textureId,
            isNamed: true,
          ),
          'freeze': _i2.BuilderArg<bool>(
            name: 'freeze',
            init: freeze,
            isNamed: true,
            defaultValue: false,
          ),
          'filterQuality': _i2.BuilderArg<_i4.FilterQuality>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Texture';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Texture$Mate(
          key: p.get('key').build(),
          textureId: p.get('textureId').build(),
          freeze: p.get('freeze').build(),
          filterQuality: p.get('filterQuality').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
