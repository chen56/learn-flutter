// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/overscroll_indicator.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class GlowingOverscrollIndicator extends StatefulWidget
class GlowingOverscrollIndicator$Mate extends GlowingOverscrollIndicator with Mate<GlowingOverscrollIndicator$Mate> {
  /// GlowingOverscrollIndicator GlowingOverscrollIndicator({Key? key, bool showLeading = true, bool showTrailing = true, required AxisDirection axisDirection, required Color color, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Widget? child})
  GlowingOverscrollIndicator$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {bool showLeading = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showLeading,

    /// optionalParameters: {bool showTrailing = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showTrailing,

    /// optionalParameters: {required AxisDirection axisDirection} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection axisDirection,

    /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
    required Color color,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , hasDefaultValue:true, defaultValueCode:defaultScrollNotificationPredicate
    required ScrollNotificationPredicate notificationPredicate,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          showLeading: showLeading,
          showTrailing: showTrailing,
          axisDirection: axisDirection,
          color: color,
          notificationPredicate: notificationPredicate,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => GlowingOverscrollIndicator$Mate(
        key: p.get('key').build(),
        showLeading: p.get('showLeading').build(),
        showTrailing: p.get('showTrailing').build(),
        axisDirection: p.get('axisDirection').build(),
        color: p.get('color').build(),
        notificationPredicate: p.get('notificationPredicate').build(),
        child: p.get('child').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('showLeading', showLeading);
    mateParams.put('showTrailing', showTrailing);
    mateParams.put('axisDirection', axisDirection);
    mateParams.put('color', color);
    mateParams.put('notificationPredicate', notificationPredicate);
    mateParams.put('child', child);
  }
}

/// class StretchingOverscrollIndicator extends StatefulWidget
class StretchingOverscrollIndicator$Mate extends StretchingOverscrollIndicator
    with Mate<StretchingOverscrollIndicator$Mate> {
  /// StretchingOverscrollIndicator StretchingOverscrollIndicator({Key? key, required AxisDirection axisDirection, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Clip clipBehavior = Clip.hardEdge, Widget? child})
  StretchingOverscrollIndicator$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required AxisDirection axisDirection} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection axisDirection,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , hasDefaultValue:true, defaultValueCode:defaultScrollNotificationPredicate
    required ScrollNotificationPredicate notificationPredicate,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          notificationPredicate: notificationPredicate,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => StretchingOverscrollIndicator$Mate(
        key: p.get('key').build(),
        axisDirection: p.get('axisDirection').build(),
        notificationPredicate: p.get('notificationPredicate').build(),
        clipBehavior: p.get('clipBehavior').build(),
        child: p.get('child').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('axisDirection', axisDirection);
    mateParams.put('notificationPredicate', notificationPredicate);
    mateParams.put('clipBehavior', clipBehavior);
    mateParams.put('child', child);
  }
}

/// class OverscrollIndicatorNotification extends Notification with ViewportNotificationMixin
class OverscrollIndicatorNotification$Mate extends OverscrollIndicatorNotification
    with Mate<OverscrollIndicatorNotification$Mate> {
  /// OverscrollIndicatorNotification OverscrollIndicatorNotification({required bool leading})
  OverscrollIndicatorNotification$Mate(
      {
      /// optionalParameters: {required bool leading} , hasDefaultValue:false, defaultValueCode:null
      required bool leading})
      : super(leading: leading) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => OverscrollIndicatorNotification$Mate(leading: p.get('leading').build()),
    );
    mateParams.put('leading', leading);
  }
}
