// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/overscroll_indicator.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class GlowingOverscrollIndicator extends StatefulWidget
class GlowingOverscrollIndicator$Mate extends GlowingOverscrollIndicator with Mate {
  /// GlowingOverscrollIndicator GlowingOverscrollIndicator({Key? key, bool showLeading = true, bool showTrailing = true, required AxisDirection axisDirection, required Color color, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Widget? child})
  GlowingOverscrollIndicator$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {bool showLeading = true} , default:processed=BooleanLiteralImpl
    bool showLeading = true,

    /// optionalParameters: {bool showTrailing = true} , default:processed=BooleanLiteralImpl
    bool showTrailing = true,

    /// optionalParameters: {required AxisDirection axisDirection} , default:none
    required AxisDirection axisDirection,

    /// optionalParameters: {required Color color} , default:none
    required Color color,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , default:unprocessed=SimpleIdentifierImpl
    required ScrollNotificationPredicate notificationPredicate,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          showLeading: showLeading,
          showTrailing: showTrailing,
          axisDirection: axisDirection,
          color: color,
          notificationPredicate: notificationPredicate,
          child: child,
        ) {
    mateBuilderName = 'GlowingOverscrollIndicator';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => GlowingOverscrollIndicator$Mate(
          key: p.get('key').build(),
          showLeading: p.get('showLeading').build(),
          showTrailing: p.get('showTrailing').build(),
          axisDirection: p.get('axisDirection').build(),
          color: p.get('color').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'showLeading',
      showLeading,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'showTrailing',
      showTrailing,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'axisDirection',
      axisDirection,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'notificationPredicate',
      notificationPredicate,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class StretchingOverscrollIndicator extends StatefulWidget
class StretchingOverscrollIndicator$Mate extends StretchingOverscrollIndicator with Mate {
  /// StretchingOverscrollIndicator StretchingOverscrollIndicator({Key? key, required AxisDirection axisDirection, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Clip clipBehavior = Clip.hardEdge, Widget? child})
  StretchingOverscrollIndicator$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required AxisDirection axisDirection} , default:none
    required AxisDirection axisDirection,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , default:unprocessed=SimpleIdentifierImpl
    required ScrollNotificationPredicate notificationPredicate,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.hardEdge,

    /// optionalParameters: {Widget? child} , default:none
    Widget? child,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          notificationPredicate: notificationPredicate,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateBuilderName = 'StretchingOverscrollIndicator';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => StretchingOverscrollIndicator$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'axisDirection',
      axisDirection,
      isNamed: true,
    );
    mateUse(
      'notificationPredicate',
      notificationPredicate,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.hardEdge,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class OverscrollIndicatorNotification extends Notification with ViewportNotificationMixin
class OverscrollIndicatorNotification$Mate extends OverscrollIndicatorNotification with Mate {
  /// OverscrollIndicatorNotification OverscrollIndicatorNotification({required bool leading})
  OverscrollIndicatorNotification$Mate(
      {
      /// optionalParameters: {required bool leading} , default:none
      required bool leading})
      : super(leading: leading) {
    mateBuilderName = 'OverscrollIndicatorNotification';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => OverscrollIndicatorNotification$Mate(leading: p.get('leading').build());
    mateUse(
      'leading',
      leading,
      isNamed: true,
    );
  }
}
