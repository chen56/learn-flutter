// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/overlay.dart';import 'package:flutter/src/widgets/framework.dart';import 'dart:core';import 'package:flutter/src/foundation/key.dart';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class OverlayEntry implements Listenable
class OverlayEntry$Mate extends OverlayEntry with Mate {/// OverlayEntry OverlayEntry({required Widget Function(BuildContext) builder, bool opaque = false, bool maintainState = false})
OverlayEntry$Mate({/// optionalParameters: {required Widget Function(BuildContext) builder} , hasDefaultValue:false, defaultValueCode:null
required WidgetBuilder builder, /// optionalParameters: {bool opaque = false} , hasDefaultValue:true, defaultValueCode:false
required bool opaque, /// optionalParameters: {bool maintainState = false} , hasDefaultValue:true, defaultValueCode:false
required bool maintainState, }) : super(builder: builder, opaque: opaque, maintainState: maintainState, ) { mateBuilder = (p) => OverlayEntry$Mate(builder: p.get('builder').build(), opaque: p.get('opaque').build(), maintainState: p.get('maintainState').build(), );
matePut('builder', builder);
matePut('opaque', opaque);
matePut('maintainState', maintainState); }

 }
/// class Overlay extends StatefulWidget
class Overlay$Mate extends Overlay with Mate {/// Overlay Overlay({Key? key, List<OverlayEntry> initialEntries = const <OverlayEntry>[], Clip clipBehavior = Clip.hardEdge})
Overlay$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {List<OverlayEntry> initialEntries = const <OverlayEntry>[]} , hasDefaultValue:true, defaultValueCode:const <OverlayEntry>[]
required List<OverlayEntry> initialEntries, /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
required Clip clipBehavior, }) : super(key: key, initialEntries: initialEntries, clipBehavior: clipBehavior, ) { mateBuilder = (p) => Overlay$Mate(key: p.get('key').build(), initialEntries: p.get('initialEntries').build(), clipBehavior: p.get('clipBehavior').build(), );
matePut('key', key);
matePut('initialEntries', initialEntries);
matePut('clipBehavior', clipBehavior); }

 }
/// class OverlayPortalController
class OverlayPortalController$Mate extends OverlayPortalController with Mate {/// OverlayPortalController OverlayPortalController({String? debugLabel})
OverlayPortalController$Mate({/// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
String? debugLabel}) : super(debugLabel: debugLabel) { mateBuilder = (p) => OverlayPortalController$Mate(debugLabel: p.get('debugLabel').build());
matePut('debugLabel', debugLabel); }

 }
/// class OverlayPortal extends StatefulWidget
class OverlayPortal$Mate extends OverlayPortal with Mate {/// OverlayPortal OverlayPortal({Key? key, required OverlayPortalController controller, required Widget Function(BuildContext) overlayChildBuilder, Widget? child})
OverlayPortal$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required OverlayPortalController controller} , hasDefaultValue:false, defaultValueCode:null
required OverlayPortalController controller, /// optionalParameters: {required Widget Function(BuildContext) overlayChildBuilder} , hasDefaultValue:false, defaultValueCode:null
required WidgetBuilder overlayChildBuilder, /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
Widget? child, }) : super(key: key, controller: controller, overlayChildBuilder: overlayChildBuilder, child: child, ) { mateBuilder = (p) => OverlayPortal$Mate(key: p.get('key').build(), controller: p.get('controller').build(), overlayChildBuilder: p.get('overlayChildBuilder').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('controller', controller);
matePut('overlayChildBuilder', overlayChildBuilder);
matePut('child', child); }

/// OverlayPortal OverlayPortal.targetsRootOverlay({Key? key, required OverlayPortalController controller, required Widget Function(BuildContext) overlayChildBuilder, Widget? child})
OverlayPortal$Mate.targetsRootOverlay({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required OverlayPortalController controller} , hasDefaultValue:false, defaultValueCode:null
required OverlayPortalController controller, /// optionalParameters: {required Widget Function(BuildContext) overlayChildBuilder} , hasDefaultValue:false, defaultValueCode:null
required WidgetBuilder overlayChildBuilder, /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
Widget? child, }) : super.targetsRootOverlay(key: key, controller: controller, overlayChildBuilder: overlayChildBuilder, child: child, ) { mateBuilder = (p) => OverlayPortal$Mate.targetsRootOverlay(key: p.get('key').build(), controller: p.get('controller').build(), overlayChildBuilder: p.get('overlayChildBuilder').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('controller', controller);
matePut('overlayChildBuilder', overlayChildBuilder);
matePut('child', child); }

 }
