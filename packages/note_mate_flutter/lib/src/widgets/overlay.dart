// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/overlay.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';

/// class OverlayEntry implements Listenable
class OverlayEntry$Mate extends OverlayEntry with Mate {
  /// OverlayEntry OverlayEntry({required Widget Function(BuildContext) builder, bool opaque = false, bool maintainState = false})
  OverlayEntry$Mate({
    /// optionalParameters: {required Widget Function(BuildContext) builder} , defaultValue:none
    required WidgetBuilder builder,

    /// optionalParameters: {bool opaque = false} , defaultValue:Literal
    bool opaque = false,

    /// optionalParameters: {bool maintainState = false} , defaultValue:Literal
    bool maintainState = false,
  }) : super(
          builder: builder,
          opaque: opaque,
          maintainState: maintainState,
        ) {
    mateBuilder = (p) => OverlayEntry$Mate(
          builder: p.get('builder').build(),
          opaque: p.get('opaque').build(),
          maintainState: p.get('maintainState').build(),
        );
    mateUse('builder', builder);
    mateUse('opaque', opaque);
    mateUse('maintainState', maintainState);
  }
}

/// class Overlay extends StatefulWidget
class Overlay$Mate extends Overlay with Mate {
  /// Overlay Overlay({Key? key, List<OverlayEntry> initialEntries = const <OverlayEntry>[], Clip clipBehavior = Clip.hardEdge})
  Overlay$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {List<OverlayEntry> initialEntries = const <OverlayEntry>[]} , defaultValue:unprocessed
    required List<OverlayEntry> initialEntries,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , defaultValue:unprocessed
    required Clip clipBehavior,
  }) : super(
          key: key,
          initialEntries: initialEntries,
          clipBehavior: clipBehavior,
        ) {
    mateBuilder = (p) => Overlay$Mate(
          key: p.get('key').build(),
          initialEntries: p.get('initialEntries').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse('key', key);
    mateUse('initialEntries', initialEntries);
    mateUse('clipBehavior', clipBehavior);
  }
}

/// class OverlayPortalController
class OverlayPortalController$Mate extends OverlayPortalController with Mate {
  /// OverlayPortalController OverlayPortalController({String? debugLabel})
  OverlayPortalController$Mate(
      {
      /// optionalParameters: {String? debugLabel} , defaultValue:none
      String? debugLabel})
      : super(debugLabel: debugLabel) {
    mateBuilder = (p) =>
        OverlayPortalController$Mate(debugLabel: p.get('debugLabel').build());
    mateUse('debugLabel', debugLabel);
  }
}

/// class OverlayPortal extends StatefulWidget
class OverlayPortal$Mate extends OverlayPortal with Mate {
  /// OverlayPortal OverlayPortal({Key? key, required OverlayPortalController controller, required Widget Function(BuildContext) overlayChildBuilder, Widget? child})
  OverlayPortal$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required OverlayPortalController controller} , defaultValue:none
    required OverlayPortalController controller,

    /// optionalParameters: {required Widget Function(BuildContext) overlayChildBuilder} , defaultValue:none
    required WidgetBuilder overlayChildBuilder,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super(
          key: key,
          controller: controller,
          overlayChildBuilder: overlayChildBuilder,
          child: child,
        ) {
    mateBuilder = (p) => OverlayPortal$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          overlayChildBuilder: p.get('overlayChildBuilder').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('overlayChildBuilder', overlayChildBuilder);
    mateUse('child', child);
  }

  /// OverlayPortal OverlayPortal.targetsRootOverlay({Key? key, required OverlayPortalController controller, required Widget Function(BuildContext) overlayChildBuilder, Widget? child})
  OverlayPortal$Mate.targetsRootOverlay({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required OverlayPortalController controller} , defaultValue:none
    required OverlayPortalController controller,

    /// optionalParameters: {required Widget Function(BuildContext) overlayChildBuilder} , defaultValue:none
    required WidgetBuilder overlayChildBuilder,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,
  }) : super.targetsRootOverlay(
          key: key,
          controller: controller,
          overlayChildBuilder: overlayChildBuilder,
          child: child,
        ) {
    mateBuilder = (p) => OverlayPortal$Mate.targetsRootOverlay(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          overlayChildBuilder: p.get('overlayChildBuilder').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('controller', controller);
    mateUse('overlayChildBuilder', overlayChildBuilder);
    mateUse('child', child);
  }
}
