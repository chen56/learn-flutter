// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/basic.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/rendering/proxy_box.dart' as _i6;
import 'package:flutter/src/rendering/custom_paint.dart' as _i7;
import 'package:flutter/animation.dart' as _i8;
import 'package:flutter/src/painting/border_radius.dart' as _i9;
import 'package:flutter/cupertino.dart' as _i10;
import 'package:flutter/src/painting/box_border.dart' as _i11;
import 'package:vector_math/vector_math_64.dart' as _i12;
import 'package:flutter/src/painting/alignment.dart' as _i13;
import 'package:flutter/src/rendering/layer.dart' as _i14;
import 'package:flutter/src/painting/box_fit.dart' as _i15;
import 'package:flutter/src/painting/edge_insets.dart' as _i16;
import 'package:flutter/src/rendering/shifted_box.dart' as _i17;
import 'package:flutter/src/rendering/custom_layout.dart' as _i18;
import 'package:flutter/src/rendering/box.dart' as _i19;
import 'package:flutter/src/painting/basic_types.dart' as _i20;
import 'package:flutter/src/rendering/stack.dart' as _i21;
import 'package:flutter/src/rendering/flex.dart' as _i22;
import 'package:flutter/src/rendering/wrap.dart' as _i23;
import 'package:flutter/src/rendering/flow.dart' as _i24;
import 'package:flutter/src/painting/inline_span.dart' as _i25;
import 'package:flutter/src/painting/text_painter.dart' as _i26;
import 'package:flutter/src/painting/strut_style.dart' as _i27;
import 'package:flutter/src/rendering/selection.dart' as _i28;
import 'package:flutter/src/animation/animation.dart' as _i29;
import 'package:flutter/src/painting/decoration_image.dart' as _i30;
import 'package:flutter/src/services/asset_bundle.dart' as _i31;
import 'package:flutter/src/services/mouse_tracking.dart' as _i32;
import 'package:flutter/src/services/mouse_cursor.dart' as _i33;
import 'package:flutter/src/semantics/semantics.dart' as _i34;
export 'package:flutter/animation.dart';
export 'package:flutter/painting.dart';

/// class Directionality extends _UbiquitousInheritedWidget
class Directionality$Mate extends _i1.Directionality with _i2.Mate {
  /// Directionality Directionality({Key? key, required TextDirection textDirection, required Widget child})
  Directionality$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required TextDirection textDirection} , default:none
    required _i4.TextDirection textDirection,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          textDirection: textDirection,
          child: child,
        ) {
    mateBuilderName = 'Directionality';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Directionality$Mate(
          key: p.get('key').build(),
          textDirection: p.get('textDirection').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Opacity extends SingleChildRenderObjectWidget
class Opacity$Mate extends _i1.Opacity with _i2.Mate {
  /// Opacity Opacity({Key? key, required double opacity, bool alwaysIncludeSemantics = false, Widget? child})
  Opacity$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required double opacity} , default:none
    required double opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    bool alwaysIncludeSemantics = false,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          child: child,
        ) {
    mateBuilderName = 'Opacity';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Opacity$Mate(
          key: p.get('key').build(),
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
    );
    mateUse(
      'alwaysIncludeSemantics',
      alwaysIncludeSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ShaderMask extends SingleChildRenderObjectWidget
class ShaderMask$Mate extends _i1.ShaderMask with _i2.Mate {
  /// ShaderMask ShaderMask({Key? key, required Shader Function(Rect) shaderCallback, BlendMode blendMode = BlendMode.modulate, Widget? child})
  ShaderMask$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Shader Function(Rect) shaderCallback} , default:none
    required _i6.ShaderCallback shaderCallback,

    /// optionalParameters: {BlendMode blendMode = BlendMode.modulate} , default:processed=PrefixedIdentifierImpl
    _i4.BlendMode blendMode = _i4.BlendMode.modulate,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          shaderCallback: shaderCallback,
          blendMode: blendMode,
          child: child,
        ) {
    mateBuilderName = 'ShaderMask';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShaderMask$Mate(
          key: p.get('key').build(),
          shaderCallback: p.get('shaderCallback').build(),
          blendMode: p.get('blendMode').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'shaderCallback',
      shaderCallback,
      isNamed: true,
    );
    mateUse(
      'blendMode',
      blendMode,
      isNamed: true,
      defaultValue: _i4.BlendMode.modulate,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class BackdropFilter extends SingleChildRenderObjectWidget
class BackdropFilter$Mate extends _i1.BackdropFilter with _i2.Mate {
  /// BackdropFilter BackdropFilter({Key? key, required ImageFilter filter, Widget? child, BlendMode blendMode = BlendMode.srcOver})
  BackdropFilter$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required ImageFilter filter} , default:none
    required _i4.ImageFilter filter,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {BlendMode blendMode = BlendMode.srcOver} , default:processed=PrefixedIdentifierImpl
    _i4.BlendMode blendMode = _i4.BlendMode.srcOver,
  }) : super(
          key: key,
          filter: filter,
          child: child,
          blendMode: blendMode,
        ) {
    mateBuilderName = 'BackdropFilter';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BackdropFilter$Mate(
          key: p.get('key').build(),
          filter: p.get('filter').build(),
          child: p.get('child').build(),
          blendMode: p.get('blendMode').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'filter',
      filter,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'blendMode',
      blendMode,
      isNamed: true,
      defaultValue: _i4.BlendMode.srcOver,
    );
  }
}

/// class CustomPaint extends SingleChildRenderObjectWidget
class CustomPaint$Mate extends _i1.CustomPaint with _i2.Mate {
  /// CustomPaint CustomPaint({Key? key, CustomPainter? painter, CustomPainter? foregroundPainter, Size size = Size.zero, bool isComplex = false, bool willChange = false, Widget? child})
  CustomPaint$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {CustomPainter? painter} , default:none
    _i7.CustomPainter? painter,

    /// optionalParameters: {CustomPainter? foregroundPainter} , default:none
    _i7.CustomPainter? foregroundPainter,

    /// optionalParameters: {Size size = Size.zero} , default:processed=PrefixedIdentifierImpl
    _i4.Size size = _i8.Size.zero,

    /// optionalParameters: {bool isComplex = false} , default:processed=BooleanLiteralImpl
    bool isComplex = false,

    /// optionalParameters: {bool willChange = false} , default:processed=BooleanLiteralImpl
    bool willChange = false,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          painter: painter,
          foregroundPainter: foregroundPainter,
          size: size,
          isComplex: isComplex,
          willChange: willChange,
          child: child,
        ) {
    mateBuilderName = 'CustomPaint';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CustomPaint$Mate(
          key: p.get('key').build(),
          painter: p.get('painter').build(),
          foregroundPainter: p.get('foregroundPainter').build(),
          size: p.get('size').build(),
          isComplex: p.get('isComplex').build(),
          willChange: p.get('willChange').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'painter',
      painter,
      isNamed: true,
    );
    mateUse(
      'foregroundPainter',
      foregroundPainter,
      isNamed: true,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
      defaultValue: _i8.Size.zero,
    );
    mateUse(
      'isComplex',
      isComplex,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'willChange',
      willChange,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ClipRect extends SingleChildRenderObjectWidget
class ClipRect$Mate extends _i1.ClipRect with _i2.Mate {
  /// ClipRect ClipRect({Key? key, CustomClipper<Rect>? clipper, Clip clipBehavior = Clip.hardEdge, Widget? child})
  ClipRect$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {CustomClipper<Rect>? clipper} , default:none
    _i6.CustomClipper<_i4.Rect>? clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.hardEdge,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          clipper: clipper,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateBuilderName = 'ClipRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipRect$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'clipper',
      clipper,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.hardEdge,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ClipRRect extends SingleChildRenderObjectWidget
class ClipRRect$Mate extends _i1.ClipRRect with _i2.Mate {
  /// ClipRRect ClipRRect({Key? key, BorderRadiusGeometry? borderRadius = BorderRadius.zero, CustomClipper<RRect>? clipper, Clip clipBehavior = Clip.antiAlias, Widget? child})
  ClipRRect$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {BorderRadiusGeometry? borderRadius = BorderRadius.zero} , default:processed=PrefixedIdentifierImpl
    _i9.BorderRadiusGeometry? borderRadius = _i10.BorderRadius.zero,

    /// optionalParameters: {CustomClipper<RRect>? clipper} , default:none
    _i6.CustomClipper<_i4.RRect>? clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.antiAlias,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          borderRadius: borderRadius,
          clipper: clipper,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateBuilderName = 'ClipRRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipRRect$Mate(
          key: p.get('key').build(),
          borderRadius: p.get('borderRadius').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'borderRadius',
      borderRadius,
      isNamed: true,
      defaultValue: _i10.BorderRadius.zero,
    );
    mateUse(
      'clipper',
      clipper,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.antiAlias,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ClipOval extends SingleChildRenderObjectWidget
class ClipOval$Mate extends _i1.ClipOval with _i2.Mate {
  /// ClipOval ClipOval({Key? key, CustomClipper<Rect>? clipper, Clip clipBehavior = Clip.antiAlias, Widget? child})
  ClipOval$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {CustomClipper<Rect>? clipper} , default:none
    _i6.CustomClipper<_i4.Rect>? clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.antiAlias,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          clipper: clipper,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateBuilderName = 'ClipOval';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipOval$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'clipper',
      clipper,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.antiAlias,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ClipPath extends SingleChildRenderObjectWidget
class ClipPath$Mate extends _i1.ClipPath with _i2.Mate {
  /// ClipPath ClipPath({Key? key, CustomClipper<Path>? clipper, Clip clipBehavior = Clip.antiAlias, Widget? child})
  ClipPath$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {CustomClipper<Path>? clipper} , default:none
    _i6.CustomClipper<_i4.Path>? clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.antiAlias,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          clipper: clipper,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateBuilderName = 'ClipPath';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipPath$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'clipper',
      clipper,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.antiAlias,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class PhysicalModel extends SingleChildRenderObjectWidget
class PhysicalModel$Mate extends _i1.PhysicalModel with _i2.Mate {
  /// PhysicalModel PhysicalModel({Key? key, BoxShape shape = BoxShape.rectangle, Clip clipBehavior = Clip.none, BorderRadius? borderRadius, double elevation = 0.0, required Color color, Color shadowColor = const Color(0xFF000000), Widget? child})
  PhysicalModel$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {BoxShape shape = BoxShape.rectangle} , default:processed=PrefixedIdentifierImpl
    _i11.BoxShape shape = _i10.BoxShape.rectangle,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    _i9.BorderRadius? borderRadius,

    /// optionalParameters: {double elevation = 0.0} , default:processed=DoubleLiteralImpl
    double elevation = 0.0,

    /// optionalParameters: {required Color color} , default:none
    required _i4.Color color,

    /// optionalParameters: {Color shadowColor = const Color(0xFF000000)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i4.Color shadowColor,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          shape: shape,
          clipBehavior: clipBehavior,
          borderRadius: borderRadius,
          elevation: elevation,
          color: color,
          shadowColor: shadowColor,
          child: child,
        ) {
    mateBuilderName = 'PhysicalModel';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PhysicalModel$Mate(
          key: p.get('key').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          borderRadius: p.get('borderRadius').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          shadowColor: p.get('shadowColor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
      defaultValue: _i10.BoxShape.rectangle,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
    mateUse(
      'borderRadius',
      borderRadius,
      isNamed: true,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'shadowColor',
      shadowColor,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class PhysicalShape extends SingleChildRenderObjectWidget
class PhysicalShape$Mate extends _i1.PhysicalShape with _i2.Mate {
  /// PhysicalShape PhysicalShape({Key? key, required CustomClipper<Path> clipper, Clip clipBehavior = Clip.none, double elevation = 0.0, required Color color, Color shadowColor = const Color(0xFF000000), Widget? child})
  PhysicalShape$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required CustomClipper<Path> clipper} , default:none
    required _i6.CustomClipper<_i4.Path> clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,

    /// optionalParameters: {double elevation = 0.0} , default:processed=DoubleLiteralImpl
    double elevation = 0.0,

    /// optionalParameters: {required Color color} , default:none
    required _i4.Color color,

    /// optionalParameters: {Color shadowColor = const Color(0xFF000000)} , default:unprocessed=InstanceCreationExpressionImpl
    required _i4.Color shadowColor,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          clipper: clipper,
          clipBehavior: clipBehavior,
          elevation: elevation,
          color: color,
          shadowColor: shadowColor,
          child: child,
        ) {
    mateBuilderName = 'PhysicalShape';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PhysicalShape$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          shadowColor: p.get('shadowColor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'clipper',
      clipper,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
    mateUse(
      'elevation',
      elevation,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'shadowColor',
      shadowColor,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Transform extends SingleChildRenderObjectWidget
class Transform$Mate extends _i1.Transform with _i2.Mate {
  /// Transform Transform({Key? key, required Matrix4 transform, Offset? origin, AlignmentGeometry? alignment, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Matrix4 transform} , default:none
    required _i12.Matrix4 transform,

    /// optionalParameters: {Offset? origin} , default:none
    _i4.Offset? origin,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    _i13.AlignmentGeometry? alignment,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    bool transformHitTests = true,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    _i4.FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          transform: transform,
          origin: origin,
          alignment: alignment,
          transformHitTests: transformHitTests,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateBuilderName = 'Transform';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate(
          key: p.get('key').build(),
          transform: p.get('transform').build(),
          origin: p.get('origin').build(),
          alignment: p.get('alignment').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'transform',
      transform,
      isNamed: true,
    );
    mateUse(
      'origin',
      origin,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
    );
    mateUse(
      'transformHitTests',
      transformHitTests,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// Transform Transform.rotate({Key? key, required double angle, Offset? origin, AlignmentGeometry? alignment = Alignment.center, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.rotate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required double angle} , default:none
    required double angle,

    /// optionalParameters: {Offset? origin} , default:none
    _i4.Offset? origin,

    /// optionalParameters: {AlignmentGeometry? alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry? alignment = _i10.Alignment.center,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    bool transformHitTests = true,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    _i4.FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super.rotate(
          key: key,
          angle: angle,
          origin: origin,
          alignment: alignment,
          transformHitTests: transformHitTests,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateBuilderName = 'Transform.rotate';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.rotate(
          key: p.get('key').build(),
          angle: p.get('angle').build(),
          origin: p.get('origin').build(),
          alignment: p.get('alignment').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'angle',
      angle,
      isNamed: true,
    );
    mateUse(
      'origin',
      origin,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'transformHitTests',
      transformHitTests,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// Transform Transform.translate({Key? key, required Offset offset, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.translate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Offset offset} , default:none
    required _i4.Offset offset,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    bool transformHitTests = true,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    _i4.FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super.translate(
          key: key,
          offset: offset,
          transformHitTests: transformHitTests,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateBuilderName = 'Transform.translate';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.translate(
          key: p.get('key').build(),
          offset: p.get('offset').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'offset',
      offset,
      isNamed: true,
    );
    mateUse(
      'transformHitTests',
      transformHitTests,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// Transform Transform.scale({Key? key, double? scale, double? scaleX, double? scaleY, Offset? origin, AlignmentGeometry? alignment = Alignment.center, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.scale({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? scale} , default:none
    double? scale,

    /// optionalParameters: {double? scaleX} , default:none
    double? scaleX,

    /// optionalParameters: {double? scaleY} , default:none
    double? scaleY,

    /// optionalParameters: {Offset? origin} , default:none
    _i4.Offset? origin,

    /// optionalParameters: {AlignmentGeometry? alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry? alignment = _i10.Alignment.center,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    bool transformHitTests = true,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    _i4.FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super.scale(
          key: key,
          scale: scale,
          scaleX: scaleX,
          scaleY: scaleY,
          origin: origin,
          alignment: alignment,
          transformHitTests: transformHitTests,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateBuilderName = 'Transform.scale';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.scale(
          key: p.get('key').build(),
          scale: p.get('scale').build(),
          scaleX: p.get('scaleX').build(),
          scaleY: p.get('scaleY').build(),
          origin: p.get('origin').build(),
          alignment: p.get('alignment').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'scale',
      scale,
      isNamed: true,
    );
    mateUse(
      'scaleX',
      scaleX,
      isNamed: true,
    );
    mateUse(
      'scaleY',
      scaleY,
      isNamed: true,
    );
    mateUse(
      'origin',
      origin,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'transformHitTests',
      transformHitTests,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// Transform Transform.flip({Key? key, bool flipX = false, bool flipY = false, Offset? origin, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.flip({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {bool flipX = false} , default:processed=BooleanLiteralImpl
    bool flipX = false,

    /// optionalParameters: {bool flipY = false} , default:processed=BooleanLiteralImpl
    bool flipY = false,

    /// optionalParameters: {Offset? origin} , default:none
    _i4.Offset? origin,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    bool transformHitTests = true,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    _i4.FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super.flip(
          key: key,
          flipX: flipX,
          flipY: flipY,
          origin: origin,
          transformHitTests: transformHitTests,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateBuilderName = 'Transform.flip';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.flip(
          key: p.get('key').build(),
          flipX: p.get('flipX').build(),
          flipY: p.get('flipY').build(),
          origin: p.get('origin').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'flipX',
      flipX,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'flipY',
      flipY,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'origin',
      origin,
      isNamed: true,
    );
    mateUse(
      'transformHitTests',
      transformHitTests,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class CompositedTransformTarget extends SingleChildRenderObjectWidget
class CompositedTransformTarget$Mate extends _i1.CompositedTransformTarget with _i2.Mate {
  /// CompositedTransformTarget CompositedTransformTarget({Key? key, required LayerLink link, Widget? child})
  CompositedTransformTarget$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required LayerLink link} , default:none
    required _i14.LayerLink link,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          link: link,
          child: child,
        ) {
    mateBuilderName = 'CompositedTransformTarget';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CompositedTransformTarget$Mate(
          key: p.get('key').build(),
          link: p.get('link').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'link',
      link,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class CompositedTransformFollower extends SingleChildRenderObjectWidget
class CompositedTransformFollower$Mate extends _i1.CompositedTransformFollower with _i2.Mate {
  /// CompositedTransformFollower CompositedTransformFollower({Key? key, required LayerLink link, bool showWhenUnlinked = true, Offset offset = Offset.zero, Alignment targetAnchor = Alignment.topLeft, Alignment followerAnchor = Alignment.topLeft, Widget? child})
  CompositedTransformFollower$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required LayerLink link} , default:none
    required _i14.LayerLink link,

    /// optionalParameters: {bool showWhenUnlinked = true} , default:processed=BooleanLiteralImpl
    bool showWhenUnlinked = true,

    /// optionalParameters: {Offset offset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i4.Offset offset = _i8.Offset.zero,

    /// optionalParameters: {Alignment targetAnchor = Alignment.topLeft} , default:processed=PrefixedIdentifierImpl
    _i13.Alignment targetAnchor = _i10.Alignment.topLeft,

    /// optionalParameters: {Alignment followerAnchor = Alignment.topLeft} , default:processed=PrefixedIdentifierImpl
    _i13.Alignment followerAnchor = _i10.Alignment.topLeft,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          link: link,
          showWhenUnlinked: showWhenUnlinked,
          offset: offset,
          targetAnchor: targetAnchor,
          followerAnchor: followerAnchor,
          child: child,
        ) {
    mateBuilderName = 'CompositedTransformFollower';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CompositedTransformFollower$Mate(
          key: p.get('key').build(),
          link: p.get('link').build(),
          showWhenUnlinked: p.get('showWhenUnlinked').build(),
          offset: p.get('offset').build(),
          targetAnchor: p.get('targetAnchor').build(),
          followerAnchor: p.get('followerAnchor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'link',
      link,
      isNamed: true,
    );
    mateUse(
      'showWhenUnlinked',
      showWhenUnlinked,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'offset',
      offset,
      isNamed: true,
      defaultValue: _i8.Offset.zero,
    );
    mateUse(
      'targetAnchor',
      targetAnchor,
      isNamed: true,
      defaultValue: _i10.Alignment.topLeft,
    );
    mateUse(
      'followerAnchor',
      followerAnchor,
      isNamed: true,
      defaultValue: _i10.Alignment.topLeft,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class FittedBox extends SingleChildRenderObjectWidget
class FittedBox$Mate extends _i1.FittedBox with _i2.Mate {
  /// FittedBox FittedBox({Key? key, BoxFit fit = BoxFit.contain, AlignmentGeometry alignment = Alignment.center, Clip clipBehavior = Clip.none, Widget? child})
  FittedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {BoxFit fit = BoxFit.contain} , default:processed=PrefixedIdentifierImpl
    _i15.BoxFit fit = _i10.BoxFit.contain,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          fit: fit,
          alignment: alignment,
          clipBehavior: clipBehavior,
          child: child,
        ) {
    mateBuilderName = 'FittedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FittedBox$Mate(
          key: p.get('key').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
      defaultValue: _i10.BoxFit.contain,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class FractionalTranslation extends SingleChildRenderObjectWidget
class FractionalTranslation$Mate extends _i1.FractionalTranslation with _i2.Mate {
  /// FractionalTranslation FractionalTranslation({Key? key, required Offset translation, bool transformHitTests = true, Widget? child})
  FractionalTranslation$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Offset translation} , default:none
    required _i4.Offset translation,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    bool transformHitTests = true,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          translation: translation,
          transformHitTests: transformHitTests,
          child: child,
        ) {
    mateBuilderName = 'FractionalTranslation';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FractionalTranslation$Mate(
          key: p.get('key').build(),
          translation: p.get('translation').build(),
          transformHitTests: p.get('transformHitTests').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'translation',
      translation,
      isNamed: true,
    );
    mateUse(
      'transformHitTests',
      transformHitTests,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class RotatedBox extends SingleChildRenderObjectWidget
class RotatedBox$Mate extends _i1.RotatedBox with _i2.Mate {
  /// RotatedBox RotatedBox({Key? key, required int quarterTurns, Widget? child})
  RotatedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required int quarterTurns} , default:none
    required int quarterTurns,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          quarterTurns: quarterTurns,
          child: child,
        ) {
    mateBuilderName = 'RotatedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RotatedBox$Mate(
          key: p.get('key').build(),
          quarterTurns: p.get('quarterTurns').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'quarterTurns',
      quarterTurns,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Padding extends SingleChildRenderObjectWidget
class Padding$Mate extends _i1.Padding with _i2.Mate {
  /// Padding Padding({Key? key, required EdgeInsetsGeometry padding, Widget? child})
  Padding$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required EdgeInsetsGeometry padding} , default:none
    required _i16.EdgeInsetsGeometry padding,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          padding: padding,
          child: child,
        ) {
    mateBuilderName = 'Padding';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Padding$Mate(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Align extends SingleChildRenderObjectWidget
class Align$Mate extends _i1.Align with _i2.Mate {
  /// Align Align({Key? key, AlignmentGeometry alignment = Alignment.center, double? widthFactor, double? heightFactor, Widget? child})
  Align$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {double? widthFactor} , default:none
    double? widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    double? heightFactor,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          alignment: alignment,
          widthFactor: widthFactor,
          heightFactor: heightFactor,
          child: child,
        ) {
    mateBuilderName = 'Align';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Align$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'widthFactor',
      widthFactor,
      isNamed: true,
    );
    mateUse(
      'heightFactor',
      heightFactor,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Center extends Align
class Center$Mate extends _i1.Center with _i2.Mate {
  /// Center Center({Key? key, double? widthFactor, double? heightFactor, Widget? child})
  Center$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? widthFactor} , default:none
    double? widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    double? heightFactor,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          widthFactor: widthFactor,
          heightFactor: heightFactor,
          child: child,
        ) {
    mateBuilderName = 'Center';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Center$Mate(
          key: p.get('key').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'widthFactor',
      widthFactor,
      isNamed: true,
    );
    mateUse(
      'heightFactor',
      heightFactor,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class CustomSingleChildLayout extends SingleChildRenderObjectWidget
class CustomSingleChildLayout$Mate extends _i1.CustomSingleChildLayout with _i2.Mate {
  /// CustomSingleChildLayout CustomSingleChildLayout({Key? key, required SingleChildLayoutDelegate delegate, Widget? child})
  CustomSingleChildLayout$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required SingleChildLayoutDelegate delegate} , default:none
    required _i17.SingleChildLayoutDelegate delegate,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          delegate: delegate,
          child: child,
        ) {
    mateBuilderName = 'CustomSingleChildLayout';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CustomSingleChildLayout$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'delegate',
      delegate,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class LayoutId extends ParentDataWidget<MultiChildLayoutParentData>
class LayoutId$Mate extends _i1.LayoutId with _i2.Mate {
  /// LayoutId LayoutId({Key? key, required Object id, required Widget child})
  LayoutId$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Object id} , default:none
    required Object id,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          id: id,
          child: child,
        ) {
    mateBuilderName = 'LayoutId';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LayoutId$Mate(
          key: p.get('key').build(),
          id: p.get('id').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'id',
      id,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class CustomMultiChildLayout extends MultiChildRenderObjectWidget
class CustomMultiChildLayout$Mate extends _i1.CustomMultiChildLayout with _i2.Mate {
  /// CustomMultiChildLayout CustomMultiChildLayout({Key? key, required MultiChildLayoutDelegate delegate, List<Widget> children = const <Widget>[]})
  CustomMultiChildLayout$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required MultiChildLayoutDelegate delegate} , default:none
    required _i18.MultiChildLayoutDelegate delegate,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          delegate: delegate,
          children: children,
        ) {
    mateBuilderName = 'CustomMultiChildLayout';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CustomMultiChildLayout$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'delegate',
      delegate,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class SizedBox extends SingleChildRenderObjectWidget
class SizedBox$Mate extends _i1.SizedBox with _i2.Mate {
  /// SizedBox SizedBox({Key? key, double? width, double? height, Widget? child})
  SizedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          width: width,
          height: height,
          child: child,
        ) {
    mateBuilderName = 'SizedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate(
          key: p.get('key').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// SizedBox SizedBox.expand({Key? key, Widget? child})
  SizedBox$Mate.expand({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super.expand(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'SizedBox.expand';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.expand(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// SizedBox SizedBox.shrink({Key? key, Widget? child})
  SizedBox$Mate.shrink({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super.shrink(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'SizedBox.shrink';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.shrink(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// SizedBox SizedBox.fromSize({Key? key, Widget? child, Size? size})
  SizedBox$Mate.fromSize({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {Size? size} , default:none
    _i4.Size? size,
  }) : super.fromSize(
          key: key,
          child: child,
          size: size,
        ) {
    mateBuilderName = 'SizedBox.fromSize';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.fromSize(
          key: p.get('key').build(),
          child: p.get('child').build(),
          size: p.get('size').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
    );
  }

  /// SizedBox SizedBox.square({Key? key, Widget? child, double? dimension})
  SizedBox$Mate.square({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {double? dimension} , default:none
    double? dimension,
  }) : super.square(
          key: key,
          child: child,
          dimension: dimension,
        ) {
    mateBuilderName = 'SizedBox.square';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.square(
          key: p.get('key').build(),
          child: p.get('child').build(),
          dimension: p.get('dimension').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'dimension',
      dimension,
      isNamed: true,
    );
  }
}

/// class ConstrainedBox extends SingleChildRenderObjectWidget
class ConstrainedBox$Mate extends _i1.ConstrainedBox with _i2.Mate {
  /// ConstrainedBox ConstrainedBox({Key? key, required BoxConstraints constraints, Widget? child})
  ConstrainedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required BoxConstraints constraints} , default:none
    required _i19.BoxConstraints constraints,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          constraints: constraints,
          child: child,
        ) {
    mateBuilderName = 'ConstrainedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ConstrainedBox$Mate(
          key: p.get('key').build(),
          constraints: p.get('constraints').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'constraints',
      constraints,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ConstraintsTransformBox extends SingleChildRenderObjectWidget
class ConstraintsTransformBox$Mate extends _i1.ConstraintsTransformBox with _i2.Mate {
  /// ConstraintsTransformBox ConstraintsTransformBox({Key? key, Widget? child, TextDirection? textDirection, AlignmentGeometry alignment = Alignment.center, required BoxConstraints Function(BoxConstraints) constraintsTransform, Clip clipBehavior = Clip.none, String debugTransformType = ''})
  ConstraintsTransformBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {required BoxConstraints Function(BoxConstraints) constraintsTransform} , default:none
    required _i17.BoxConstraintsTransform constraintsTransform,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,

    /// optionalParameters: {String debugTransformType = ''} , default:processed=SimpleStringLiteralImpl
    String debugTransformType = '',
  }) : super(
          key: key,
          child: child,
          textDirection: textDirection,
          alignment: alignment,
          constraintsTransform: constraintsTransform,
          clipBehavior: clipBehavior,
          debugTransformType: debugTransformType,
        ) {
    mateBuilderName = 'ConstraintsTransformBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ConstraintsTransformBox$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          textDirection: p.get('textDirection').build(),
          alignment: p.get('alignment').build(),
          constraintsTransform: p.get('constraintsTransform').build(),
          clipBehavior: p.get('clipBehavior').build(),
          debugTransformType: p.get('debugTransformType').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'constraintsTransform',
      constraintsTransform,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
    mateUse(
      'debugTransformType',
      debugTransformType,
      isNamed: true,
      defaultValue: '',
    );
  }
}

/// class UnconstrainedBox extends StatelessWidget
class UnconstrainedBox$Mate extends _i1.UnconstrainedBox with _i2.Mate {
  /// UnconstrainedBox UnconstrainedBox({Key? key, Widget? child, TextDirection? textDirection, AlignmentGeometry alignment = Alignment.center, Axis? constrainedAxis, Clip clipBehavior = Clip.none})
  UnconstrainedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {Axis? constrainedAxis} , default:none
    _i20.Axis? constrainedAxis,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,
  }) : super(
          key: key,
          child: child,
          textDirection: textDirection,
          alignment: alignment,
          constrainedAxis: constrainedAxis,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'UnconstrainedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => UnconstrainedBox$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          textDirection: p.get('textDirection').build(),
          alignment: p.get('alignment').build(),
          constrainedAxis: p.get('constrainedAxis').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'constrainedAxis',
      constrainedAxis,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
  }
}

/// class FractionallySizedBox extends SingleChildRenderObjectWidget
class FractionallySizedBox$Mate extends _i1.FractionallySizedBox with _i2.Mate {
  /// FractionallySizedBox FractionallySizedBox({Key? key, AlignmentGeometry alignment = Alignment.center, double? widthFactor, double? heightFactor, Widget? child})
  FractionallySizedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {double? widthFactor} , default:none
    double? widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    double? heightFactor,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          alignment: alignment,
          widthFactor: widthFactor,
          heightFactor: heightFactor,
          child: child,
        ) {
    mateBuilderName = 'FractionallySizedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FractionallySizedBox$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'widthFactor',
      widthFactor,
      isNamed: true,
    );
    mateUse(
      'heightFactor',
      heightFactor,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class LimitedBox extends SingleChildRenderObjectWidget
class LimitedBox$Mate extends _i1.LimitedBox with _i2.Mate {
  /// LimitedBox LimitedBox({Key? key, double maxWidth = double.infinity, double maxHeight = double.infinity, Widget? child})
  LimitedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double maxWidth = double.infinity} , default:processed=PrefixedIdentifierImpl
    double maxWidth = double.infinity,

    /// optionalParameters: {double maxHeight = double.infinity} , default:processed=PrefixedIdentifierImpl
    double maxHeight = double.infinity,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          maxWidth: maxWidth,
          maxHeight: maxHeight,
          child: child,
        ) {
    mateBuilderName = 'LimitedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LimitedBox$Mate(
          key: p.get('key').build(),
          maxWidth: p.get('maxWidth').build(),
          maxHeight: p.get('maxHeight').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'maxWidth',
      maxWidth,
      isNamed: true,
      defaultValue: double.infinity,
    );
    mateUse(
      'maxHeight',
      maxHeight,
      isNamed: true,
      defaultValue: double.infinity,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class OverflowBox extends SingleChildRenderObjectWidget
class OverflowBox$Mate extends _i1.OverflowBox with _i2.Mate {
  /// OverflowBox OverflowBox({Key? key, AlignmentGeometry alignment = Alignment.center, double? minWidth, double? maxWidth, double? minHeight, double? maxHeight, Widget? child})
  OverflowBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {double? minWidth} , default:none
    double? minWidth,

    /// optionalParameters: {double? maxWidth} , default:none
    double? maxWidth,

    /// optionalParameters: {double? minHeight} , default:none
    double? minHeight,

    /// optionalParameters: {double? maxHeight} , default:none
    double? maxHeight,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          alignment: alignment,
          minWidth: minWidth,
          maxWidth: maxWidth,
          minHeight: minHeight,
          maxHeight: maxHeight,
          child: child,
        ) {
    mateBuilderName = 'OverflowBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => OverflowBox$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          minWidth: p.get('minWidth').build(),
          maxWidth: p.get('maxWidth').build(),
          minHeight: p.get('minHeight').build(),
          maxHeight: p.get('maxHeight').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'minWidth',
      minWidth,
      isNamed: true,
    );
    mateUse(
      'maxWidth',
      maxWidth,
      isNamed: true,
    );
    mateUse(
      'minHeight',
      minHeight,
      isNamed: true,
    );
    mateUse(
      'maxHeight',
      maxHeight,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class SizedOverflowBox extends SingleChildRenderObjectWidget
class SizedOverflowBox$Mate extends _i1.SizedOverflowBox with _i2.Mate {
  /// SizedOverflowBox SizedOverflowBox({Key? key, required Size size, AlignmentGeometry alignment = Alignment.center, Widget? child})
  SizedOverflowBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Size size} , default:none
    required _i4.Size size,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          size: size,
          alignment: alignment,
          child: child,
        ) {
    mateBuilderName = 'SizedOverflowBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedOverflowBox$Mate(
          key: p.get('key').build(),
          size: p.get('size').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Offstage extends SingleChildRenderObjectWidget
class Offstage$Mate extends _i1.Offstage with _i2.Mate {
  /// Offstage Offstage({Key? key, bool offstage = true, Widget? child})
  Offstage$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {bool offstage = true} , default:processed=BooleanLiteralImpl
    bool offstage = true,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          offstage: offstage,
          child: child,
        ) {
    mateBuilderName = 'Offstage';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Offstage$Mate(
          key: p.get('key').build(),
          offstage: p.get('offstage').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'offstage',
      offstage,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class AspectRatio extends SingleChildRenderObjectWidget
class AspectRatio$Mate extends _i1.AspectRatio with _i2.Mate {
  /// AspectRatio AspectRatio({Key? key, required double aspectRatio, Widget? child})
  AspectRatio$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required double aspectRatio} , default:none
    required double aspectRatio,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          aspectRatio: aspectRatio,
          child: child,
        ) {
    mateBuilderName = 'AspectRatio';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AspectRatio$Mate(
          key: p.get('key').build(),
          aspectRatio: p.get('aspectRatio').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'aspectRatio',
      aspectRatio,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class IntrinsicWidth extends SingleChildRenderObjectWidget
class IntrinsicWidth$Mate extends _i1.IntrinsicWidth with _i2.Mate {
  /// IntrinsicWidth IntrinsicWidth({Key? key, double? stepWidth, double? stepHeight, Widget? child})
  IntrinsicWidth$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? stepWidth} , default:none
    double? stepWidth,

    /// optionalParameters: {double? stepHeight} , default:none
    double? stepHeight,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          stepWidth: stepWidth,
          stepHeight: stepHeight,
          child: child,
        ) {
    mateBuilderName = 'IntrinsicWidth';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IntrinsicWidth$Mate(
          key: p.get('key').build(),
          stepWidth: p.get('stepWidth').build(),
          stepHeight: p.get('stepHeight').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'stepWidth',
      stepWidth,
      isNamed: true,
    );
    mateUse(
      'stepHeight',
      stepHeight,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class IntrinsicHeight extends SingleChildRenderObjectWidget
class IntrinsicHeight$Mate extends _i1.IntrinsicHeight with _i2.Mate {
  /// IntrinsicHeight IntrinsicHeight({Key? key, Widget? child})
  IntrinsicHeight$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'IntrinsicHeight';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IntrinsicHeight$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Baseline extends SingleChildRenderObjectWidget
class Baseline$Mate extends _i1.Baseline with _i2.Mate {
  /// Baseline Baseline({Key? key, required double baseline, required TextBaseline baselineType, Widget? child})
  Baseline$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required double baseline} , default:none
    required double baseline,

    /// optionalParameters: {required TextBaseline baselineType} , default:none
    required _i4.TextBaseline baselineType,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          baseline: baseline,
          baselineType: baselineType,
          child: child,
        ) {
    mateBuilderName = 'Baseline';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Baseline$Mate(
          key: p.get('key').build(),
          baseline: p.get('baseline').build(),
          baselineType: p.get('baselineType').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'baseline',
      baseline,
      isNamed: true,
    );
    mateUse(
      'baselineType',
      baselineType,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class SliverToBoxAdapter extends SingleChildRenderObjectWidget
class SliverToBoxAdapter$Mate extends _i1.SliverToBoxAdapter with _i2.Mate {
  /// SliverToBoxAdapter SliverToBoxAdapter({Key? key, Widget? child})
  SliverToBoxAdapter$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'SliverToBoxAdapter';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverToBoxAdapter$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class SliverPadding extends SingleChildRenderObjectWidget
class SliverPadding$Mate extends _i1.SliverPadding with _i2.Mate {
  /// SliverPadding SliverPadding({Key? key, required EdgeInsetsGeometry padding, Widget? sliver})
  SliverPadding$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required EdgeInsetsGeometry padding} , default:none
    required _i16.EdgeInsetsGeometry padding,

    /// optionalParameters: {Widget? sliver} , default:none
    _i5.Widget? sliver,
  }) : super(
          key: key,
          padding: padding,
          sliver: sliver,
        ) {
    mateBuilderName = 'SliverPadding';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverPadding$Mate(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          sliver: p.get('sliver').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
    mateUse(
      'sliver',
      sliver,
      isNamed: true,
    );
  }
}

/// class ListBody extends MultiChildRenderObjectWidget
class ListBody$Mate extends _i1.ListBody with _i2.Mate {
  /// ListBody ListBody({Key? key, Axis mainAxis = Axis.vertical, bool reverse = false, List<Widget> children = const <Widget>[]})
  ListBody$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Axis mainAxis = Axis.vertical} , default:processed=PrefixedIdentifierImpl
    _i20.Axis mainAxis = _i10.Axis.vertical,

    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    bool reverse = false,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          mainAxis: mainAxis,
          reverse: reverse,
          children: children,
        ) {
    mateBuilderName = 'ListBody';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ListBody$Mate(
          key: p.get('key').build(),
          mainAxis: p.get('mainAxis').build(),
          reverse: p.get('reverse').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'mainAxis',
      mainAxis,
      isNamed: true,
      defaultValue: _i10.Axis.vertical,
    );
    mateUse(
      'reverse',
      reverse,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class Stack extends MultiChildRenderObjectWidget
class Stack$Mate extends _i1.Stack with _i2.Mate {
  /// Stack Stack({Key? key, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, StackFit fit = StackFit.loose, Clip clipBehavior = Clip.hardEdge, List<Widget> children = const <Widget>[]})
  Stack$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.AlignmentDirectional.topStart,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {StackFit fit = StackFit.loose} , default:processed=PrefixedIdentifierImpl
    _i21.StackFit fit = _i10.StackFit.loose,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.hardEdge,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          alignment: alignment,
          textDirection: textDirection,
          fit: fit,
          clipBehavior: clipBehavior,
          children: children,
        ) {
    mateBuilderName = 'Stack';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Stack$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          fit: p.get('fit').build(),
          clipBehavior: p.get('clipBehavior').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.AlignmentDirectional.topStart,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
      defaultValue: _i10.StackFit.loose,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.hardEdge,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class IndexedStack extends StatelessWidget
class IndexedStack$Mate extends _i1.IndexedStack with _i2.Mate {
  /// IndexedStack IndexedStack({Key? key, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, Clip clipBehavior = Clip.hardEdge, StackFit sizing = StackFit.loose, int? index = 0, List<Widget> children = const <Widget>[]})
  IndexedStack$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.AlignmentDirectional.topStart,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.hardEdge,

    /// optionalParameters: {StackFit sizing = StackFit.loose} , default:processed=PrefixedIdentifierImpl
    _i21.StackFit sizing = _i10.StackFit.loose,

    /// optionalParameters: {int? index = 0} , default:processed=IntegerLiteralImpl
    int? index = 0,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          alignment: alignment,
          textDirection: textDirection,
          clipBehavior: clipBehavior,
          sizing: sizing,
          index: index,
          children: children,
        ) {
    mateBuilderName = 'IndexedStack';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IndexedStack$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          clipBehavior: p.get('clipBehavior').build(),
          sizing: p.get('sizing').build(),
          index: p.get('index').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.AlignmentDirectional.topStart,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.hardEdge,
    );
    mateUse(
      'sizing',
      sizing,
      isNamed: true,
      defaultValue: _i10.StackFit.loose,
    );
    mateUse(
      'index',
      index,
      isNamed: true,
      defaultValue: 0,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class Positioned extends ParentDataWidget<StackParentData>
class Positioned$Mate extends _i1.Positioned with _i2.Mate {
  /// Positioned Positioned({Key? key, double? left, double? top, double? right, double? bottom, double? width, double? height, required Widget child})
  Positioned$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? left} , default:none
    double? left,

    /// optionalParameters: {double? top} , default:none
    double? top,

    /// optionalParameters: {double? right} , default:none
    double? right,

    /// optionalParameters: {double? bottom} , default:none
    double? bottom,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          width: width,
          height: height,
          child: child,
        ) {
    mateBuilderName = 'Positioned';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate(
          key: p.get('key').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'left',
      left,
      isNamed: true,
    );
    mateUse(
      'top',
      top,
      isNamed: true,
    );
    mateUse(
      'right',
      right,
      isNamed: true,
    );
    mateUse(
      'bottom',
      bottom,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// Positioned Positioned.fromRect({Key? key, required Rect rect, required Widget child})
  Positioned$Mate.fromRect({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Rect rect} , default:none
    required _i4.Rect rect,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super.fromRect(
          key: key,
          rect: rect,
          child: child,
        ) {
    mateBuilderName = 'Positioned.fromRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate.fromRect(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'rect',
      rect,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// Positioned Positioned.fromRelativeRect({Key? key, required RelativeRect rect, required Widget child})
  Positioned$Mate.fromRelativeRect({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required RelativeRect rect} , default:none
    required _i21.RelativeRect rect,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super.fromRelativeRect(
          key: key,
          rect: rect,
          child: child,
        ) {
    mateBuilderName = 'Positioned.fromRelativeRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate.fromRelativeRect(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'rect',
      rect,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// Positioned Positioned.fill({Key? key, double? left = 0.0, double? top = 0.0, double? right = 0.0, double? bottom = 0.0, required Widget child})
  Positioned$Mate.fill({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? left = 0.0} , default:processed=DoubleLiteralImpl
    double? left = 0.0,

    /// optionalParameters: {double? top = 0.0} , default:processed=DoubleLiteralImpl
    double? top = 0.0,

    /// optionalParameters: {double? right = 0.0} , default:processed=DoubleLiteralImpl
    double? right = 0.0,

    /// optionalParameters: {double? bottom = 0.0} , default:processed=DoubleLiteralImpl
    double? bottom = 0.0,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super.fill(
          key: key,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          child: child,
        ) {
    mateBuilderName = 'Positioned.fill';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate.fill(
          key: p.get('key').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'left',
      left,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'top',
      top,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'right',
      right,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'bottom',
      bottom,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class PositionedDirectional extends StatelessWidget
class PositionedDirectional$Mate extends _i1.PositionedDirectional with _i2.Mate {
  /// PositionedDirectional PositionedDirectional({Key? key, double? start, double? top, double? end, double? bottom, double? width, double? height, required Widget child})
  PositionedDirectional$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {double? start} , default:none
    double? start,

    /// optionalParameters: {double? top} , default:none
    double? top,

    /// optionalParameters: {double? end} , default:none
    double? end,

    /// optionalParameters: {double? bottom} , default:none
    double? bottom,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          start: start,
          top: top,
          end: end,
          bottom: bottom,
          width: width,
          height: height,
          child: child,
        ) {
    mateBuilderName = 'PositionedDirectional';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PositionedDirectional$Mate(
          key: p.get('key').build(),
          start: p.get('start').build(),
          top: p.get('top').build(),
          end: p.get('end').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'start',
      start,
      isNamed: true,
    );
    mateUse(
      'top',
      top,
      isNamed: true,
    );
    mateUse(
      'end',
      end,
      isNamed: true,
    );
    mateUse(
      'bottom',
      bottom,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Flex extends MultiChildRenderObjectWidget
class Flex$Mate extends _i1.Flex with _i2.Mate {
  /// Flex Flex({Key? key, required Axis direction, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.max, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline? textBaseline, Clip clipBehavior = Clip.none, List<Widget> children = const <Widget>[]})
  Flex$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Axis direction} , default:none
    required _i20.Axis direction,

    /// optionalParameters: {MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start} , default:processed=PrefixedIdentifierImpl
    _i22.MainAxisAlignment mainAxisAlignment = _i10.MainAxisAlignment.start,

    /// optionalParameters: {MainAxisSize mainAxisSize = MainAxisSize.max} , default:processed=PrefixedIdentifierImpl
    _i22.MainAxisSize mainAxisSize = _i10.MainAxisSize.max,

    /// optionalParameters: {CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center} , default:processed=PrefixedIdentifierImpl
    _i22.CrossAxisAlignment crossAxisAlignment = _i10.CrossAxisAlignment.center,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    _i20.VerticalDirection verticalDirection = _i10.VerticalDirection.down,

    /// optionalParameters: {TextBaseline? textBaseline} , default:none
    _i4.TextBaseline? textBaseline,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          direction: direction,
          mainAxisAlignment: mainAxisAlignment,
          mainAxisSize: mainAxisSize,
          crossAxisAlignment: crossAxisAlignment,
          textDirection: textDirection,
          verticalDirection: verticalDirection,
          textBaseline: textBaseline,
          clipBehavior: clipBehavior,
          children: children,
        ) {
    mateBuilderName = 'Flex';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flex$Mate(
          key: p.get('key').build(),
          direction: p.get('direction').build(),
          mainAxisAlignment: p.get('mainAxisAlignment').build(),
          mainAxisSize: p.get('mainAxisSize').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          textBaseline: p.get('textBaseline').build(),
          clipBehavior: p.get('clipBehavior').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'direction',
      direction,
      isNamed: true,
    );
    mateUse(
      'mainAxisAlignment',
      mainAxisAlignment,
      isNamed: true,
      defaultValue: _i10.MainAxisAlignment.start,
    );
    mateUse(
      'mainAxisSize',
      mainAxisSize,
      isNamed: true,
      defaultValue: _i10.MainAxisSize.max,
    );
    mateUse(
      'crossAxisAlignment',
      crossAxisAlignment,
      isNamed: true,
      defaultValue: _i10.CrossAxisAlignment.center,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'verticalDirection',
      verticalDirection,
      isNamed: true,
      defaultValue: _i10.VerticalDirection.down,
    );
    mateUse(
      'textBaseline',
      textBaseline,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class Row extends Flex
class Row$Mate extends _i1.Row with _i2.Mate {
  /// Row Row({Key? key, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.max, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline? textBaseline, List<Widget> children = const <Widget>[]})
  Row$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start} , default:processed=PrefixedIdentifierImpl
    _i22.MainAxisAlignment mainAxisAlignment = _i10.MainAxisAlignment.start,

    /// optionalParameters: {MainAxisSize mainAxisSize = MainAxisSize.max} , default:processed=PrefixedIdentifierImpl
    _i22.MainAxisSize mainAxisSize = _i10.MainAxisSize.max,

    /// optionalParameters: {CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center} , default:processed=PrefixedIdentifierImpl
    _i22.CrossAxisAlignment crossAxisAlignment = _i10.CrossAxisAlignment.center,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    _i20.VerticalDirection verticalDirection = _i10.VerticalDirection.down,

    /// optionalParameters: {TextBaseline? textBaseline} , default:none
    _i4.TextBaseline? textBaseline,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          mainAxisAlignment: mainAxisAlignment,
          mainAxisSize: mainAxisSize,
          crossAxisAlignment: crossAxisAlignment,
          textDirection: textDirection,
          verticalDirection: verticalDirection,
          textBaseline: textBaseline,
          children: children,
        ) {
    mateBuilderName = 'Row';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Row$Mate(
          key: p.get('key').build(),
          mainAxisAlignment: p.get('mainAxisAlignment').build(),
          mainAxisSize: p.get('mainAxisSize').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          textBaseline: p.get('textBaseline').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'mainAxisAlignment',
      mainAxisAlignment,
      isNamed: true,
      defaultValue: _i10.MainAxisAlignment.start,
    );
    mateUse(
      'mainAxisSize',
      mainAxisSize,
      isNamed: true,
      defaultValue: _i10.MainAxisSize.max,
    );
    mateUse(
      'crossAxisAlignment',
      crossAxisAlignment,
      isNamed: true,
      defaultValue: _i10.CrossAxisAlignment.center,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'verticalDirection',
      verticalDirection,
      isNamed: true,
      defaultValue: _i10.VerticalDirection.down,
    );
    mateUse(
      'textBaseline',
      textBaseline,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class Column extends Flex
class Column$Mate extends _i1.Column with _i2.Mate {
  /// Column Column({Key? key, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.max, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline? textBaseline, List<Widget> children = const <Widget>[]})
  Column$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start} , default:processed=PrefixedIdentifierImpl
    _i22.MainAxisAlignment mainAxisAlignment = _i10.MainAxisAlignment.start,

    /// optionalParameters: {MainAxisSize mainAxisSize = MainAxisSize.max} , default:processed=PrefixedIdentifierImpl
    _i22.MainAxisSize mainAxisSize = _i10.MainAxisSize.max,

    /// optionalParameters: {CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center} , default:processed=PrefixedIdentifierImpl
    _i22.CrossAxisAlignment crossAxisAlignment = _i10.CrossAxisAlignment.center,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    _i20.VerticalDirection verticalDirection = _i10.VerticalDirection.down,

    /// optionalParameters: {TextBaseline? textBaseline} , default:none
    _i4.TextBaseline? textBaseline,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          mainAxisAlignment: mainAxisAlignment,
          mainAxisSize: mainAxisSize,
          crossAxisAlignment: crossAxisAlignment,
          textDirection: textDirection,
          verticalDirection: verticalDirection,
          textBaseline: textBaseline,
          children: children,
        ) {
    mateBuilderName = 'Column';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Column$Mate(
          key: p.get('key').build(),
          mainAxisAlignment: p.get('mainAxisAlignment').build(),
          mainAxisSize: p.get('mainAxisSize').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          textBaseline: p.get('textBaseline').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'mainAxisAlignment',
      mainAxisAlignment,
      isNamed: true,
      defaultValue: _i10.MainAxisAlignment.start,
    );
    mateUse(
      'mainAxisSize',
      mainAxisSize,
      isNamed: true,
      defaultValue: _i10.MainAxisSize.max,
    );
    mateUse(
      'crossAxisAlignment',
      crossAxisAlignment,
      isNamed: true,
      defaultValue: _i10.CrossAxisAlignment.center,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'verticalDirection',
      verticalDirection,
      isNamed: true,
      defaultValue: _i10.VerticalDirection.down,
    );
    mateUse(
      'textBaseline',
      textBaseline,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class Flexible extends ParentDataWidget<FlexParentData>
class Flexible$Mate extends _i1.Flexible with _i2.Mate {
  /// Flexible Flexible({Key? key, int flex = 1, FlexFit fit = FlexFit.loose, required Widget child})
  Flexible$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {int flex = 1} , default:processed=IntegerLiteralImpl
    int flex = 1,

    /// optionalParameters: {FlexFit fit = FlexFit.loose} , default:processed=PrefixedIdentifierImpl
    _i22.FlexFit fit = _i10.FlexFit.loose,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          flex: flex,
          fit: fit,
          child: child,
        ) {
    mateBuilderName = 'Flexible';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flexible$Mate(
          key: p.get('key').build(),
          flex: p.get('flex').build(),
          fit: p.get('fit').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'flex',
      flex,
      isNamed: true,
      defaultValue: 1,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
      defaultValue: _i10.FlexFit.loose,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Expanded extends Flexible
class Expanded$Mate extends _i1.Expanded with _i2.Mate {
  /// Expanded Expanded({Key? key, int flex = 1, required Widget child})
  Expanded$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {int flex = 1} , default:processed=IntegerLiteralImpl
    int flex = 1,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          flex: flex,
          child: child,
        ) {
    mateBuilderName = 'Expanded';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Expanded$Mate(
          key: p.get('key').build(),
          flex: p.get('flex').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'flex',
      flex,
      isNamed: true,
      defaultValue: 1,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Wrap extends MultiChildRenderObjectWidget
class Wrap$Mate extends _i1.Wrap with _i2.Mate {
  /// Wrap Wrap({Key? key, Axis direction = Axis.horizontal, WrapAlignment alignment = WrapAlignment.start, double spacing = 0.0, WrapAlignment runAlignment = WrapAlignment.start, double runSpacing = 0.0, WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, Clip clipBehavior = Clip.none, List<Widget> children = const <Widget>[]})
  Wrap$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Axis direction = Axis.horizontal} , default:processed=PrefixedIdentifierImpl
    _i20.Axis direction = _i10.Axis.horizontal,

    /// optionalParameters: {WrapAlignment alignment = WrapAlignment.start} , default:processed=PrefixedIdentifierImpl
    _i23.WrapAlignment alignment = _i10.WrapAlignment.start,

    /// optionalParameters: {double spacing = 0.0} , default:processed=DoubleLiteralImpl
    double spacing = 0.0,

    /// optionalParameters: {WrapAlignment runAlignment = WrapAlignment.start} , default:processed=PrefixedIdentifierImpl
    _i23.WrapAlignment runAlignment = _i10.WrapAlignment.start,

    /// optionalParameters: {double runSpacing = 0.0} , default:processed=DoubleLiteralImpl
    double runSpacing = 0.0,

    /// optionalParameters: {WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start} , default:processed=PrefixedIdentifierImpl
    _i23.WrapCrossAlignment crossAxisAlignment = _i10.WrapCrossAlignment.start,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    _i20.VerticalDirection verticalDirection = _i10.VerticalDirection.down,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.none,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,
  }) : super(
          key: key,
          direction: direction,
          alignment: alignment,
          spacing: spacing,
          runAlignment: runAlignment,
          runSpacing: runSpacing,
          crossAxisAlignment: crossAxisAlignment,
          textDirection: textDirection,
          verticalDirection: verticalDirection,
          clipBehavior: clipBehavior,
          children: children,
        ) {
    mateBuilderName = 'Wrap';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Wrap$Mate(
          key: p.get('key').build(),
          direction: p.get('direction').build(),
          alignment: p.get('alignment').build(),
          spacing: p.get('spacing').build(),
          runAlignment: p.get('runAlignment').build(),
          runSpacing: p.get('runSpacing').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          clipBehavior: p.get('clipBehavior').build(),
          children: p.get('children').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'direction',
      direction,
      isNamed: true,
      defaultValue: _i10.Axis.horizontal,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.WrapAlignment.start,
    );
    mateUse(
      'spacing',
      spacing,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'runAlignment',
      runAlignment,
      isNamed: true,
      defaultValue: _i10.WrapAlignment.start,
    );
    mateUse(
      'runSpacing',
      runSpacing,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'crossAxisAlignment',
      crossAxisAlignment,
      isNamed: true,
      defaultValue: _i10.WrapCrossAlignment.start,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'verticalDirection',
      verticalDirection,
      isNamed: true,
      defaultValue: _i10.VerticalDirection.down,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.none,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
  }
}

/// class Flow extends MultiChildRenderObjectWidget
class Flow$Mate extends _i1.Flow with _i2.Mate {
  /// Flow Flow({Key? key, required FlowDelegate delegate, List<Widget> children = const <Widget>[], Clip clipBehavior = Clip.hardEdge})
  Flow$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required FlowDelegate delegate} , default:none
    required _i24.FlowDelegate delegate,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.hardEdge,
  }) : super(
          key: key,
          delegate: delegate,
          children: children,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'Flow';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flow$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          children: p.get('children').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'delegate',
      delegate,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.hardEdge,
    );
  }

  /// Flow Flow.unwrapped({Key? key, required FlowDelegate delegate, List<Widget> children = const <Widget>[], Clip clipBehavior = Clip.hardEdge})
  Flow$Mate.unwrapped({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required FlowDelegate delegate} , default:none
    required _i24.FlowDelegate delegate,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    required List<_i5.Widget> children,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    _i4.Clip clipBehavior = _i4.Clip.hardEdge,
  }) : super.unwrapped(
          key: key,
          delegate: delegate,
          children: children,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'Flow.unwrapped';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flow$Mate.unwrapped(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          children: p.get('children').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'delegate',
      delegate,
      isNamed: true,
    );
    mateUse(
      'children',
      children,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: _i4.Clip.hardEdge,
    );
  }
}

/// class RichText extends MultiChildRenderObjectWidget
class RichText$Mate extends _i1.RichText with _i2.Mate {
  /// RichText RichText({Key? key, required InlineSpan text, TextAlign textAlign = TextAlign.start, TextDirection? textDirection, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, double textScaleFactor = 1.0, int? maxLines, Locale? locale, StrutStyle? strutStyle, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, SelectionRegistrar? selectionRegistrar, Color? selectionColor})
  RichText$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required InlineSpan text} , default:none
    required _i25.InlineSpan text,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , default:processed=PrefixedIdentifierImpl
    _i4.TextAlign textAlign = _i4.TextAlign.start,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {bool softWrap = true} , default:processed=BooleanLiteralImpl
    bool softWrap = true,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , default:processed=PrefixedIdentifierImpl
    _i26.TextOverflow overflow = _i10.TextOverflow.clip,

    /// optionalParameters: {double textScaleFactor = 1.0} , default:processed=DoubleLiteralImpl
    double textScaleFactor = 1.0,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,

    /// optionalParameters: {Locale? locale} , default:none
    _i4.Locale? locale,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    _i27.StrutStyle? strutStyle,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:processed=PrefixedIdentifierImpl
    _i26.TextWidthBasis textWidthBasis = _i10.TextWidthBasis.parent,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    _i4.TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {SelectionRegistrar? selectionRegistrar} , default:none
    _i28.SelectionRegistrar? selectionRegistrar,

    /// optionalParameters: {Color? selectionColor} , default:none
    _i4.Color? selectionColor,
  }) : super(
          key: key,
          text: text,
          textAlign: textAlign,
          textDirection: textDirection,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          locale: locale,
          strutStyle: strutStyle,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionRegistrar: selectionRegistrar,
          selectionColor: selectionColor,
        ) {
    mateBuilderName = 'RichText';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RichText$Mate(
          key: p.get('key').build(),
          text: p.get('text').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          locale: p.get('locale').build(),
          strutStyle: p.get('strutStyle').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionRegistrar: p.get('selectionRegistrar').build(),
          selectionColor: p.get('selectionColor').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'text',
      text,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
      defaultValue: _i4.TextAlign.start,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'softWrap',
      softWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'overflow',
      overflow,
      isNamed: true,
      defaultValue: _i10.TextOverflow.clip,
    );
    mateUse(
      'textScaleFactor',
      textScaleFactor,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
    mateUse(
      'locale',
      locale,
      isNamed: true,
    );
    mateUse(
      'strutStyle',
      strutStyle,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
      defaultValue: _i10.TextWidthBasis.parent,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'selectionRegistrar',
      selectionRegistrar,
      isNamed: true,
    );
    mateUse(
      'selectionColor',
      selectionColor,
      isNamed: true,
    );
  }
}

/// class RawImage extends LeafRenderObjectWidget
class RawImage$Mate extends _i1.RawImage with _i2.Mate {
  /// RawImage RawImage({Key? key, Image? image, String? debugImageLabel, double? width, double? height, double scale = 1.0, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool invertColors = false, FilterQuality filterQuality = FilterQuality.low, bool isAntiAlias = false})
  RawImage$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Image? image} , default:none
    _i4.Image? image,

    /// optionalParameters: {String? debugImageLabel} , default:none
    String? debugImageLabel,

    /// optionalParameters: {double? width} , default:none
    double? width,

    /// optionalParameters: {double? height} , default:none
    double? height,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    double scale = 1.0,

    /// optionalParameters: {Color? color} , default:none
    _i4.Color? color,

    /// optionalParameters: {Animation<double>? opacity} , default:none
    _i29.Animation<double>? opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , default:none
    _i4.BlendMode? colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , default:none
    _i15.BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    _i13.AlignmentGeometry alignment = _i10.Alignment.center,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:processed=PrefixedIdentifierImpl
    _i30.ImageRepeat repeat = _i10.ImageRepeat.noRepeat,

    /// optionalParameters: {Rect? centerSlice} , default:none
    _i4.Rect? centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    bool matchTextDirection = false,

    /// optionalParameters: {bool invertColors = false} , default:processed=BooleanLiteralImpl
    bool invertColors = false,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:processed=PrefixedIdentifierImpl
    _i4.FilterQuality filterQuality = _i4.FilterQuality.low,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    bool isAntiAlias = false,
  }) : super(
          key: key,
          image: image,
          debugImageLabel: debugImageLabel,
          width: width,
          height: height,
          scale: scale,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          invertColors: invertColors,
          filterQuality: filterQuality,
          isAntiAlias: isAntiAlias,
        ) {
    mateBuilderName = 'RawImage';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RawImage$Mate(
          key: p.get('key').build(),
          image: p.get('image').build(),
          debugImageLabel: p.get('debugImageLabel').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          scale: p.get('scale').build(),
          color: p.get('color').build(),
          opacity: p.get('opacity').build(),
          colorBlendMode: p.get('colorBlendMode').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          centerSlice: p.get('centerSlice').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          invertColors: p.get('invertColors').build(),
          filterQuality: p.get('filterQuality').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'image',
      image,
      isNamed: true,
    );
    mateUse(
      'debugImageLabel',
      debugImageLabel,
      isNamed: true,
    );
    mateUse(
      'width',
      width,
      isNamed: true,
    );
    mateUse(
      'height',
      height,
      isNamed: true,
    );
    mateUse(
      'scale',
      scale,
      isNamed: true,
      defaultValue: 1.0,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
    );
    mateUse(
      'colorBlendMode',
      colorBlendMode,
      isNamed: true,
    );
    mateUse(
      'fit',
      fit,
      isNamed: true,
    );
    mateUse(
      'alignment',
      alignment,
      isNamed: true,
      defaultValue: _i10.Alignment.center,
    );
    mateUse(
      'repeat',
      repeat,
      isNamed: true,
      defaultValue: _i10.ImageRepeat.noRepeat,
    );
    mateUse(
      'centerSlice',
      centerSlice,
      isNamed: true,
    );
    mateUse(
      'matchTextDirection',
      matchTextDirection,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'invertColors',
      invertColors,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'filterQuality',
      filterQuality,
      isNamed: true,
      defaultValue: _i4.FilterQuality.low,
    );
    mateUse(
      'isAntiAlias',
      isAntiAlias,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class DefaultAssetBundle extends InheritedWidget
class DefaultAssetBundle$Mate extends _i1.DefaultAssetBundle with _i2.Mate {
  /// DefaultAssetBundle DefaultAssetBundle({Key? key, required AssetBundle bundle, required Widget child})
  DefaultAssetBundle$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required AssetBundle bundle} , default:none
    required _i31.AssetBundle bundle,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          bundle: bundle,
          child: child,
        ) {
    mateBuilderName = 'DefaultAssetBundle';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultAssetBundle$Mate(
          key: p.get('key').build(),
          bundle: p.get('bundle').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'bundle',
      bundle,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class WidgetToRenderBoxAdapter extends LeafRenderObjectWidget
class WidgetToRenderBoxAdapter$Mate extends _i1.WidgetToRenderBoxAdapter with _i2.Mate {
  /// WidgetToRenderBoxAdapter WidgetToRenderBoxAdapter({required RenderBox renderBox, void Function()? onBuild, void Function()? onUnmount})
  WidgetToRenderBoxAdapter$Mate({
    /// optionalParameters: {required RenderBox renderBox} , default:none
    required _i19.RenderBox renderBox,

    /// optionalParameters: {void Function()? onBuild} , default:none
    _i4.VoidCallback? onBuild,

    /// optionalParameters: {void Function()? onUnmount} , default:none
    _i4.VoidCallback? onUnmount,
  }) : super(
          renderBox: renderBox,
          onBuild: onBuild,
          onUnmount: onUnmount,
        ) {
    mateBuilderName = 'WidgetToRenderBoxAdapter';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => WidgetToRenderBoxAdapter$Mate(
          renderBox: p.get('renderBox').build(),
          onBuild: p.get('onBuild').build(),
          onUnmount: p.get('onUnmount').build(),
        );
    mateUse(
      'renderBox',
      renderBox,
      isNamed: true,
    );
    mateUse(
      'onBuild',
      onBuild,
      isNamed: true,
    );
    mateUse(
      'onUnmount',
      onUnmount,
      isNamed: true,
    );
  }
}

/// class Listener extends SingleChildRenderObjectWidget
class Listener$Mate extends _i1.Listener with _i2.Mate {
  /// Listener Listener({Key? key, void Function(PointerDownEvent)? onPointerDown, void Function(PointerMoveEvent)? onPointerMove, void Function(PointerUpEvent)? onPointerUp, void Function(PointerHoverEvent)? onPointerHover, void Function(PointerCancelEvent)? onPointerCancel, void Function(PointerPanZoomStartEvent)? onPointerPanZoomStart, void Function(PointerPanZoomUpdateEvent)? onPointerPanZoomUpdate, void Function(PointerPanZoomEndEvent)? onPointerPanZoomEnd, void Function(PointerSignalEvent)? onPointerSignal, HitTestBehavior behavior = HitTestBehavior.deferToChild, Widget? child})
  Listener$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {void Function(PointerDownEvent)? onPointerDown} , default:none
    _i6.PointerDownEventListener? onPointerDown,

    /// optionalParameters: {void Function(PointerMoveEvent)? onPointerMove} , default:none
    _i6.PointerMoveEventListener? onPointerMove,

    /// optionalParameters: {void Function(PointerUpEvent)? onPointerUp} , default:none
    _i6.PointerUpEventListener? onPointerUp,

    /// optionalParameters: {void Function(PointerHoverEvent)? onPointerHover} , default:none
    _i32.PointerHoverEventListener? onPointerHover,

    /// optionalParameters: {void Function(PointerCancelEvent)? onPointerCancel} , default:none
    _i6.PointerCancelEventListener? onPointerCancel,

    /// optionalParameters: {void Function(PointerPanZoomStartEvent)? onPointerPanZoomStart} , default:none
    _i6.PointerPanZoomStartEventListener? onPointerPanZoomStart,

    /// optionalParameters: {void Function(PointerPanZoomUpdateEvent)? onPointerPanZoomUpdate} , default:none
    _i6.PointerPanZoomUpdateEventListener? onPointerPanZoomUpdate,

    /// optionalParameters: {void Function(PointerPanZoomEndEvent)? onPointerPanZoomEnd} , default:none
    _i6.PointerPanZoomEndEventListener? onPointerPanZoomEnd,

    /// optionalParameters: {void Function(PointerSignalEvent)? onPointerSignal} , default:none
    _i6.PointerSignalEventListener? onPointerSignal,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    _i6.HitTestBehavior behavior = _i10.HitTestBehavior.deferToChild,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          onPointerDown: onPointerDown,
          onPointerMove: onPointerMove,
          onPointerUp: onPointerUp,
          onPointerHover: onPointerHover,
          onPointerCancel: onPointerCancel,
          onPointerPanZoomStart: onPointerPanZoomStart,
          onPointerPanZoomUpdate: onPointerPanZoomUpdate,
          onPointerPanZoomEnd: onPointerPanZoomEnd,
          onPointerSignal: onPointerSignal,
          behavior: behavior,
          child: child,
        ) {
    mateBuilderName = 'Listener';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Listener$Mate(
          key: p.get('key').build(),
          onPointerDown: p.get('onPointerDown').build(),
          onPointerMove: p.get('onPointerMove').build(),
          onPointerUp: p.get('onPointerUp').build(),
          onPointerHover: p.get('onPointerHover').build(),
          onPointerCancel: p.get('onPointerCancel').build(),
          onPointerPanZoomStart: p.get('onPointerPanZoomStart').build(),
          onPointerPanZoomUpdate: p.get('onPointerPanZoomUpdate').build(),
          onPointerPanZoomEnd: p.get('onPointerPanZoomEnd').build(),
          onPointerSignal: p.get('onPointerSignal').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'onPointerDown',
      onPointerDown,
      isNamed: true,
    );
    mateUse(
      'onPointerMove',
      onPointerMove,
      isNamed: true,
    );
    mateUse(
      'onPointerUp',
      onPointerUp,
      isNamed: true,
    );
    mateUse(
      'onPointerHover',
      onPointerHover,
      isNamed: true,
    );
    mateUse(
      'onPointerCancel',
      onPointerCancel,
      isNamed: true,
    );
    mateUse(
      'onPointerPanZoomStart',
      onPointerPanZoomStart,
      isNamed: true,
    );
    mateUse(
      'onPointerPanZoomUpdate',
      onPointerPanZoomUpdate,
      isNamed: true,
    );
    mateUse(
      'onPointerPanZoomEnd',
      onPointerPanZoomEnd,
      isNamed: true,
    );
    mateUse(
      'onPointerSignal',
      onPointerSignal,
      isNamed: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
      defaultValue: _i10.HitTestBehavior.deferToChild,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class MouseRegion extends SingleChildRenderObjectWidget
class MouseRegion$Mate extends _i1.MouseRegion with _i2.Mate {
  /// MouseRegion MouseRegion({Key? key, void Function(PointerEnterEvent)? onEnter, void Function(PointerExitEvent)? onExit, void Function(PointerHoverEvent)? onHover, MouseCursor cursor = MouseCursor.defer, bool opaque = true, HitTestBehavior? hitTestBehavior, Widget? child})
  MouseRegion$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {void Function(PointerEnterEvent)? onEnter} , default:none
    _i32.PointerEnterEventListener? onEnter,

    /// optionalParameters: {void Function(PointerExitEvent)? onExit} , default:none
    _i32.PointerExitEventListener? onExit,

    /// optionalParameters: {void Function(PointerHoverEvent)? onHover} , default:none
    _i32.PointerHoverEventListener? onHover,

    /// optionalParameters: {MouseCursor cursor = MouseCursor.defer} , default:processed=PrefixedIdentifierImpl
    _i33.MouseCursor cursor = _i10.MouseCursor.defer,

    /// optionalParameters: {bool opaque = true} , default:processed=BooleanLiteralImpl
    bool opaque = true,

    /// optionalParameters: {HitTestBehavior? hitTestBehavior} , default:none
    _i6.HitTestBehavior? hitTestBehavior,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          onEnter: onEnter,
          onExit: onExit,
          onHover: onHover,
          cursor: cursor,
          opaque: opaque,
          hitTestBehavior: hitTestBehavior,
          child: child,
        ) {
    mateBuilderName = 'MouseRegion';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MouseRegion$Mate(
          key: p.get('key').build(),
          onEnter: p.get('onEnter').build(),
          onExit: p.get('onExit').build(),
          onHover: p.get('onHover').build(),
          cursor: p.get('cursor').build(),
          opaque: p.get('opaque').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'onEnter',
      onEnter,
      isNamed: true,
    );
    mateUse(
      'onExit',
      onExit,
      isNamed: true,
    );
    mateUse(
      'onHover',
      onHover,
      isNamed: true,
    );
    mateUse(
      'cursor',
      cursor,
      isNamed: true,
      defaultValue: _i10.MouseCursor.defer,
    );
    mateUse(
      'opaque',
      opaque,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'hitTestBehavior',
      hitTestBehavior,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class RepaintBoundary extends SingleChildRenderObjectWidget
class RepaintBoundary$Mate extends _i1.RepaintBoundary with _i2.Mate {
  /// RepaintBoundary RepaintBoundary({Key? key, Widget? child})
  RepaintBoundary$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'RepaintBoundary';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RepaintBoundary$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class IgnorePointer extends SingleChildRenderObjectWidget
class IgnorePointer$Mate extends _i1.IgnorePointer with _i2.Mate {
  /// IgnorePointer IgnorePointer({Key? key, bool ignoring = true, bool? ignoringSemantics, Widget? child})
  IgnorePointer$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {bool ignoring = true} , default:processed=BooleanLiteralImpl
    bool ignoring = true,

    /// optionalParameters: {bool? ignoringSemantics} , default:none
    bool? ignoringSemantics,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          ignoring: ignoring,
          ignoringSemantics: ignoringSemantics,
          child: child,
        ) {
    mateBuilderName = 'IgnorePointer';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IgnorePointer$Mate(
          key: p.get('key').build(),
          ignoring: p.get('ignoring').build(),
          ignoringSemantics: p.get('ignoringSemantics').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'ignoring',
      ignoring,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'ignoringSemantics',
      ignoringSemantics,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class AbsorbPointer extends SingleChildRenderObjectWidget
class AbsorbPointer$Mate extends _i1.AbsorbPointer with _i2.Mate {
  /// AbsorbPointer AbsorbPointer({Key? key, bool absorbing = true, Widget? child, bool? ignoringSemantics})
  AbsorbPointer$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {bool absorbing = true} , default:processed=BooleanLiteralImpl
    bool absorbing = true,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {bool? ignoringSemantics} , default:none
    bool? ignoringSemantics,
  }) : super(
          key: key,
          absorbing: absorbing,
          child: child,
          ignoringSemantics: ignoringSemantics,
        ) {
    mateBuilderName = 'AbsorbPointer';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AbsorbPointer$Mate(
          key: p.get('key').build(),
          absorbing: p.get('absorbing').build(),
          child: p.get('child').build(),
          ignoringSemantics: p.get('ignoringSemantics').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'absorbing',
      absorbing,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'ignoringSemantics',
      ignoringSemantics,
      isNamed: true,
    );
  }
}

/// class MetaData extends SingleChildRenderObjectWidget
class MetaData$Mate extends _i1.MetaData with _i2.Mate {
  /// MetaData MetaData({Key? key, dynamic metaData, HitTestBehavior behavior = HitTestBehavior.deferToChild, Widget? child})
  MetaData$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {dynamic metaData} , default:none
    dynamic metaData,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    _i6.HitTestBehavior behavior = _i10.HitTestBehavior.deferToChild,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          metaData: metaData,
          behavior: behavior,
          child: child,
        ) {
    mateBuilderName = 'MetaData';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MetaData$Mate(
          key: p.get('key').build(),
          metaData: p.get('metaData').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'metaData',
      metaData,
      isNamed: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
      defaultValue: _i10.HitTestBehavior.deferToChild,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Semantics extends SingleChildRenderObjectWidget
class Semantics$Mate extends _i1.Semantics with _i2.Mate {
  /// Semantics Semantics({Key? key, Widget? child, bool container = false, bool explicitChildNodes = false, bool excludeSemantics = false, bool? enabled, bool? checked, bool? mixed, bool? selected, bool? toggled, bool? button, bool? slider, bool? keyboardKey, bool? link, bool? header, bool? textField, bool? readOnly, bool? focusable, bool? focused, bool? inMutuallyExclusiveGroup, bool? obscured, bool? multiline, bool? scopesRoute, bool? namesRoute, bool? hidden, bool? image, bool? liveRegion, int? maxValueLength, int? currentValueLength, String? label, AttributedString? attributedLabel, String? value, AttributedString? attributedValue, String? increasedValue, AttributedString? attributedIncreasedValue, String? decreasedValue, AttributedString? attributedDecreasedValue, String? hint, AttributedString? attributedHint, String? tooltip, String? onTapHint, String? onLongPressHint, TextDirection? textDirection, SemanticsSortKey? sortKey, SemanticsTag? tagForChildren, void Function()? onTap, void Function()? onLongPress, void Function()? onScrollLeft, void Function()? onScrollRight, void Function()? onScrollUp, void Function()? onScrollDown, void Function()? onIncrease, void Function()? onDecrease, void Function()? onCopy, void Function()? onCut, void Function()? onPaste, void Function()? onDismiss, void Function(bool)? onMoveCursorForwardByCharacter, void Function(bool)? onMoveCursorBackwardByCharacter, void Function(TextSelection)? onSetSelection, void Function(String)? onSetText, void Function()? onDidGainAccessibilityFocus, void Function()? onDidLoseAccessibilityFocus, Map<CustomSemanticsAction, void Function()>? customSemanticsActions})
  Semantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {bool container = false} , default:processed=BooleanLiteralImpl
    bool container = false,

    /// optionalParameters: {bool explicitChildNodes = false} , default:processed=BooleanLiteralImpl
    bool explicitChildNodes = false,

    /// optionalParameters: {bool excludeSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeSemantics = false,

    /// optionalParameters: {bool? enabled} , default:none
    bool? enabled,

    /// optionalParameters: {bool? checked} , default:none
    bool? checked,

    /// optionalParameters: {bool? mixed} , default:none
    bool? mixed,

    /// optionalParameters: {bool? selected} , default:none
    bool? selected,

    /// optionalParameters: {bool? toggled} , default:none
    bool? toggled,

    /// optionalParameters: {bool? button} , default:none
    bool? button,

    /// optionalParameters: {bool? slider} , default:none
    bool? slider,

    /// optionalParameters: {bool? keyboardKey} , default:none
    bool? keyboardKey,

    /// optionalParameters: {bool? link} , default:none
    bool? link,

    /// optionalParameters: {bool? header} , default:none
    bool? header,

    /// optionalParameters: {bool? textField} , default:none
    bool? textField,

    /// optionalParameters: {bool? readOnly} , default:none
    bool? readOnly,

    /// optionalParameters: {bool? focusable} , default:none
    bool? focusable,

    /// optionalParameters: {bool? focused} , default:none
    bool? focused,

    /// optionalParameters: {bool? inMutuallyExclusiveGroup} , default:none
    bool? inMutuallyExclusiveGroup,

    /// optionalParameters: {bool? obscured} , default:none
    bool? obscured,

    /// optionalParameters: {bool? multiline} , default:none
    bool? multiline,

    /// optionalParameters: {bool? scopesRoute} , default:none
    bool? scopesRoute,

    /// optionalParameters: {bool? namesRoute} , default:none
    bool? namesRoute,

    /// optionalParameters: {bool? hidden} , default:none
    bool? hidden,

    /// optionalParameters: {bool? image} , default:none
    bool? image,

    /// optionalParameters: {bool? liveRegion} , default:none
    bool? liveRegion,

    /// optionalParameters: {int? maxValueLength} , default:none
    int? maxValueLength,

    /// optionalParameters: {int? currentValueLength} , default:none
    int? currentValueLength,

    /// optionalParameters: {String? label} , default:none
    String? label,

    /// optionalParameters: {AttributedString? attributedLabel} , default:none
    _i34.AttributedString? attributedLabel,

    /// optionalParameters: {String? value} , default:none
    String? value,

    /// optionalParameters: {AttributedString? attributedValue} , default:none
    _i34.AttributedString? attributedValue,

    /// optionalParameters: {String? increasedValue} , default:none
    String? increasedValue,

    /// optionalParameters: {AttributedString? attributedIncreasedValue} , default:none
    _i34.AttributedString? attributedIncreasedValue,

    /// optionalParameters: {String? decreasedValue} , default:none
    String? decreasedValue,

    /// optionalParameters: {AttributedString? attributedDecreasedValue} , default:none
    _i34.AttributedString? attributedDecreasedValue,

    /// optionalParameters: {String? hint} , default:none
    String? hint,

    /// optionalParameters: {AttributedString? attributedHint} , default:none
    _i34.AttributedString? attributedHint,

    /// optionalParameters: {String? tooltip} , default:none
    String? tooltip,

    /// optionalParameters: {String? onTapHint} , default:none
    String? onTapHint,

    /// optionalParameters: {String? onLongPressHint} , default:none
    String? onLongPressHint,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i4.TextDirection? textDirection,

    /// optionalParameters: {SemanticsSortKey? sortKey} , default:none
    _i34.SemanticsSortKey? sortKey,

    /// optionalParameters: {SemanticsTag? tagForChildren} , default:none
    _i34.SemanticsTag? tagForChildren,

    /// optionalParameters: {void Function()? onTap} , default:none
    _i4.VoidCallback? onTap,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    _i4.VoidCallback? onLongPress,

    /// optionalParameters: {void Function()? onScrollLeft} , default:none
    _i4.VoidCallback? onScrollLeft,

    /// optionalParameters: {void Function()? onScrollRight} , default:none
    _i4.VoidCallback? onScrollRight,

    /// optionalParameters: {void Function()? onScrollUp} , default:none
    _i4.VoidCallback? onScrollUp,

    /// optionalParameters: {void Function()? onScrollDown} , default:none
    _i4.VoidCallback? onScrollDown,

    /// optionalParameters: {void Function()? onIncrease} , default:none
    _i4.VoidCallback? onIncrease,

    /// optionalParameters: {void Function()? onDecrease} , default:none
    _i4.VoidCallback? onDecrease,

    /// optionalParameters: {void Function()? onCopy} , default:none
    _i4.VoidCallback? onCopy,

    /// optionalParameters: {void Function()? onCut} , default:none
    _i4.VoidCallback? onCut,

    /// optionalParameters: {void Function()? onPaste} , default:none
    _i4.VoidCallback? onPaste,

    /// optionalParameters: {void Function()? onDismiss} , default:none
    _i4.VoidCallback? onDismiss,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByCharacter} , default:none
    _i34.MoveCursorHandler? onMoveCursorForwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByCharacter} , default:none
    _i34.MoveCursorHandler? onMoveCursorBackwardByCharacter,

    /// optionalParameters: {void Function(TextSelection)? onSetSelection} , default:none
    _i34.SetSelectionHandler? onSetSelection,

    /// optionalParameters: {void Function(String)? onSetText} , default:none
    _i34.SetTextHandler? onSetText,

    /// optionalParameters: {void Function()? onDidGainAccessibilityFocus} , default:none
    _i4.VoidCallback? onDidGainAccessibilityFocus,

    /// optionalParameters: {void Function()? onDidLoseAccessibilityFocus} , default:none
    _i4.VoidCallback? onDidLoseAccessibilityFocus,

    /// optionalParameters: {Map<CustomSemanticsAction, void Function()>? customSemanticsActions} , default:none
    Map<_i34.CustomSemanticsAction, _i4.VoidCallback>? customSemanticsActions,
  }) : super(
          key: key,
          child: child,
          container: container,
          explicitChildNodes: explicitChildNodes,
          excludeSemantics: excludeSemantics,
          enabled: enabled,
          checked: checked,
          mixed: mixed,
          selected: selected,
          toggled: toggled,
          button: button,
          slider: slider,
          keyboardKey: keyboardKey,
          link: link,
          header: header,
          textField: textField,
          readOnly: readOnly,
          focusable: focusable,
          focused: focused,
          inMutuallyExclusiveGroup: inMutuallyExclusiveGroup,
          obscured: obscured,
          multiline: multiline,
          scopesRoute: scopesRoute,
          namesRoute: namesRoute,
          hidden: hidden,
          image: image,
          liveRegion: liveRegion,
          maxValueLength: maxValueLength,
          currentValueLength: currentValueLength,
          label: label,
          attributedLabel: attributedLabel,
          value: value,
          attributedValue: attributedValue,
          increasedValue: increasedValue,
          attributedIncreasedValue: attributedIncreasedValue,
          decreasedValue: decreasedValue,
          attributedDecreasedValue: attributedDecreasedValue,
          hint: hint,
          attributedHint: attributedHint,
          tooltip: tooltip,
          onTapHint: onTapHint,
          onLongPressHint: onLongPressHint,
          textDirection: textDirection,
          sortKey: sortKey,
          tagForChildren: tagForChildren,
          onTap: onTap,
          onLongPress: onLongPress,
          onScrollLeft: onScrollLeft,
          onScrollRight: onScrollRight,
          onScrollUp: onScrollUp,
          onScrollDown: onScrollDown,
          onIncrease: onIncrease,
          onDecrease: onDecrease,
          onCopy: onCopy,
          onCut: onCut,
          onPaste: onPaste,
          onDismiss: onDismiss,
          onMoveCursorForwardByCharacter: onMoveCursorForwardByCharacter,
          onMoveCursorBackwardByCharacter: onMoveCursorBackwardByCharacter,
          onSetSelection: onSetSelection,
          onSetText: onSetText,
          onDidGainAccessibilityFocus: onDidGainAccessibilityFocus,
          onDidLoseAccessibilityFocus: onDidLoseAccessibilityFocus,
          customSemanticsActions: customSemanticsActions,
        ) {
    mateBuilderName = 'Semantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Semantics$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          container: p.get('container').build(),
          explicitChildNodes: p.get('explicitChildNodes').build(),
          excludeSemantics: p.get('excludeSemantics').build(),
          enabled: p.get('enabled').build(),
          checked: p.get('checked').build(),
          mixed: p.get('mixed').build(),
          selected: p.get('selected').build(),
          toggled: p.get('toggled').build(),
          button: p.get('button').build(),
          slider: p.get('slider').build(),
          keyboardKey: p.get('keyboardKey').build(),
          link: p.get('link').build(),
          header: p.get('header').build(),
          textField: p.get('textField').build(),
          readOnly: p.get('readOnly').build(),
          focusable: p.get('focusable').build(),
          focused: p.get('focused').build(),
          inMutuallyExclusiveGroup: p.get('inMutuallyExclusiveGroup').build(),
          obscured: p.get('obscured').build(),
          multiline: p.get('multiline').build(),
          scopesRoute: p.get('scopesRoute').build(),
          namesRoute: p.get('namesRoute').build(),
          hidden: p.get('hidden').build(),
          image: p.get('image').build(),
          liveRegion: p.get('liveRegion').build(),
          maxValueLength: p.get('maxValueLength').build(),
          currentValueLength: p.get('currentValueLength').build(),
          label: p.get('label').build(),
          attributedLabel: p.get('attributedLabel').build(),
          value: p.get('value').build(),
          attributedValue: p.get('attributedValue').build(),
          increasedValue: p.get('increasedValue').build(),
          attributedIncreasedValue: p.get('attributedIncreasedValue').build(),
          decreasedValue: p.get('decreasedValue').build(),
          attributedDecreasedValue: p.get('attributedDecreasedValue').build(),
          hint: p.get('hint').build(),
          attributedHint: p.get('attributedHint').build(),
          tooltip: p.get('tooltip').build(),
          onTapHint: p.get('onTapHint').build(),
          onLongPressHint: p.get('onLongPressHint').build(),
          textDirection: p.get('textDirection').build(),
          sortKey: p.get('sortKey').build(),
          tagForChildren: p.get('tagForChildren').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onScrollLeft: p.get('onScrollLeft').build(),
          onScrollRight: p.get('onScrollRight').build(),
          onScrollUp: p.get('onScrollUp').build(),
          onScrollDown: p.get('onScrollDown').build(),
          onIncrease: p.get('onIncrease').build(),
          onDecrease: p.get('onDecrease').build(),
          onCopy: p.get('onCopy').build(),
          onCut: p.get('onCut').build(),
          onPaste: p.get('onPaste').build(),
          onDismiss: p.get('onDismiss').build(),
          onMoveCursorForwardByCharacter: p.get('onMoveCursorForwardByCharacter').build(),
          onMoveCursorBackwardByCharacter: p.get('onMoveCursorBackwardByCharacter').build(),
          onSetSelection: p.get('onSetSelection').build(),
          onSetText: p.get('onSetText').build(),
          onDidGainAccessibilityFocus: p.get('onDidGainAccessibilityFocus').build(),
          onDidLoseAccessibilityFocus: p.get('onDidLoseAccessibilityFocus').build(),
          customSemanticsActions: p.get('customSemanticsActions').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'container',
      container,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'explicitChildNodes',
      explicitChildNodes,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'excludeSemantics',
      excludeSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
    );
    mateUse(
      'checked',
      checked,
      isNamed: true,
    );
    mateUse(
      'mixed',
      mixed,
      isNamed: true,
    );
    mateUse(
      'selected',
      selected,
      isNamed: true,
    );
    mateUse(
      'toggled',
      toggled,
      isNamed: true,
    );
    mateUse(
      'button',
      button,
      isNamed: true,
    );
    mateUse(
      'slider',
      slider,
      isNamed: true,
    );
    mateUse(
      'keyboardKey',
      keyboardKey,
      isNamed: true,
    );
    mateUse(
      'link',
      link,
      isNamed: true,
    );
    mateUse(
      'header',
      header,
      isNamed: true,
    );
    mateUse(
      'textField',
      textField,
      isNamed: true,
    );
    mateUse(
      'readOnly',
      readOnly,
      isNamed: true,
    );
    mateUse(
      'focusable',
      focusable,
      isNamed: true,
    );
    mateUse(
      'focused',
      focused,
      isNamed: true,
    );
    mateUse(
      'inMutuallyExclusiveGroup',
      inMutuallyExclusiveGroup,
      isNamed: true,
    );
    mateUse(
      'obscured',
      obscured,
      isNamed: true,
    );
    mateUse(
      'multiline',
      multiline,
      isNamed: true,
    );
    mateUse(
      'scopesRoute',
      scopesRoute,
      isNamed: true,
    );
    mateUse(
      'namesRoute',
      namesRoute,
      isNamed: true,
    );
    mateUse(
      'hidden',
      hidden,
      isNamed: true,
    );
    mateUse(
      'image',
      image,
      isNamed: true,
    );
    mateUse(
      'liveRegion',
      liveRegion,
      isNamed: true,
    );
    mateUse(
      'maxValueLength',
      maxValueLength,
      isNamed: true,
    );
    mateUse(
      'currentValueLength',
      currentValueLength,
      isNamed: true,
    );
    mateUse(
      'label',
      label,
      isNamed: true,
    );
    mateUse(
      'attributedLabel',
      attributedLabel,
      isNamed: true,
    );
    mateUse(
      'value',
      value,
      isNamed: true,
    );
    mateUse(
      'attributedValue',
      attributedValue,
      isNamed: true,
    );
    mateUse(
      'increasedValue',
      increasedValue,
      isNamed: true,
    );
    mateUse(
      'attributedIncreasedValue',
      attributedIncreasedValue,
      isNamed: true,
    );
    mateUse(
      'decreasedValue',
      decreasedValue,
      isNamed: true,
    );
    mateUse(
      'attributedDecreasedValue',
      attributedDecreasedValue,
      isNamed: true,
    );
    mateUse(
      'hint',
      hint,
      isNamed: true,
    );
    mateUse(
      'attributedHint',
      attributedHint,
      isNamed: true,
    );
    mateUse(
      'tooltip',
      tooltip,
      isNamed: true,
    );
    mateUse(
      'onTapHint',
      onTapHint,
      isNamed: true,
    );
    mateUse(
      'onLongPressHint',
      onLongPressHint,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'sortKey',
      sortKey,
      isNamed: true,
    );
    mateUse(
      'tagForChildren',
      tagForChildren,
      isNamed: true,
    );
    mateUse(
      'onTap',
      onTap,
      isNamed: true,
    );
    mateUse(
      'onLongPress',
      onLongPress,
      isNamed: true,
    );
    mateUse(
      'onScrollLeft',
      onScrollLeft,
      isNamed: true,
    );
    mateUse(
      'onScrollRight',
      onScrollRight,
      isNamed: true,
    );
    mateUse(
      'onScrollUp',
      onScrollUp,
      isNamed: true,
    );
    mateUse(
      'onScrollDown',
      onScrollDown,
      isNamed: true,
    );
    mateUse(
      'onIncrease',
      onIncrease,
      isNamed: true,
    );
    mateUse(
      'onDecrease',
      onDecrease,
      isNamed: true,
    );
    mateUse(
      'onCopy',
      onCopy,
      isNamed: true,
    );
    mateUse(
      'onCut',
      onCut,
      isNamed: true,
    );
    mateUse(
      'onPaste',
      onPaste,
      isNamed: true,
    );
    mateUse(
      'onDismiss',
      onDismiss,
      isNamed: true,
    );
    mateUse(
      'onMoveCursorForwardByCharacter',
      onMoveCursorForwardByCharacter,
      isNamed: true,
    );
    mateUse(
      'onMoveCursorBackwardByCharacter',
      onMoveCursorBackwardByCharacter,
      isNamed: true,
    );
    mateUse(
      'onSetSelection',
      onSetSelection,
      isNamed: true,
    );
    mateUse(
      'onSetText',
      onSetText,
      isNamed: true,
    );
    mateUse(
      'onDidGainAccessibilityFocus',
      onDidGainAccessibilityFocus,
      isNamed: true,
    );
    mateUse(
      'onDidLoseAccessibilityFocus',
      onDidLoseAccessibilityFocus,
      isNamed: true,
    );
    mateUse(
      'customSemanticsActions',
      customSemanticsActions,
      isNamed: true,
    );
  }

  /// Semantics Semantics.fromProperties({Key? key, Widget? child, bool container = false, bool explicitChildNodes = false, bool excludeSemantics = false, required SemanticsProperties properties})
  Semantics$Mate.fromProperties({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {bool container = false} , default:processed=BooleanLiteralImpl
    bool container = false,

    /// optionalParameters: {bool explicitChildNodes = false} , default:processed=BooleanLiteralImpl
    bool explicitChildNodes = false,

    /// optionalParameters: {bool excludeSemantics = false} , default:processed=BooleanLiteralImpl
    bool excludeSemantics = false,

    /// optionalParameters: {required SemanticsProperties properties} , default:none
    required _i34.SemanticsProperties properties,
  }) : super.fromProperties(
          key: key,
          child: child,
          container: container,
          explicitChildNodes: explicitChildNodes,
          excludeSemantics: excludeSemantics,
          properties: properties,
        ) {
    mateBuilderName = 'Semantics.fromProperties';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Semantics$Mate.fromProperties(
          key: p.get('key').build(),
          child: p.get('child').build(),
          container: p.get('container').build(),
          explicitChildNodes: p.get('explicitChildNodes').build(),
          excludeSemantics: p.get('excludeSemantics').build(),
          properties: p.get('properties').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'container',
      container,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'explicitChildNodes',
      explicitChildNodes,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'excludeSemantics',
      excludeSemantics,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'properties',
      properties,
      isNamed: true,
    );
  }
}

/// class MergeSemantics extends SingleChildRenderObjectWidget
class MergeSemantics$Mate extends _i1.MergeSemantics with _i2.Mate {
  /// MergeSemantics MergeSemantics({Key? key, Widget? child})
  MergeSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'MergeSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MergeSemantics$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class BlockSemantics extends SingleChildRenderObjectWidget
class BlockSemantics$Mate extends _i1.BlockSemantics with _i2.Mate {
  /// BlockSemantics BlockSemantics({Key? key, bool blocking = true, Widget? child})
  BlockSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {bool blocking = true} , default:processed=BooleanLiteralImpl
    bool blocking = true,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          blocking: blocking,
          child: child,
        ) {
    mateBuilderName = 'BlockSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BlockSemantics$Mate(
          key: p.get('key').build(),
          blocking: p.get('blocking').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'blocking',
      blocking,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class ExcludeSemantics extends SingleChildRenderObjectWidget
class ExcludeSemantics$Mate extends _i1.ExcludeSemantics with _i2.Mate {
  /// ExcludeSemantics ExcludeSemantics({Key? key, bool excluding = true, Widget? child})
  ExcludeSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {bool excluding = true} , default:processed=BooleanLiteralImpl
    bool excluding = true,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          excluding: excluding,
          child: child,
        ) {
    mateBuilderName = 'ExcludeSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ExcludeSemantics$Mate(
          key: p.get('key').build(),
          excluding: p.get('excluding').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'excluding',
      excluding,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class IndexedSemantics extends SingleChildRenderObjectWidget
class IndexedSemantics$Mate extends _i1.IndexedSemantics with _i2.Mate {
  /// IndexedSemantics IndexedSemantics({Key? key, required int index, Widget? child})
  IndexedSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required int index} , default:none
    required int index,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          index: index,
          child: child,
        ) {
    mateBuilderName = 'IndexedSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IndexedSemantics$Mate(
          key: p.get('key').build(),
          index: p.get('index').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'index',
      index,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class KeyedSubtree extends StatelessWidget
class KeyedSubtree$Mate extends _i1.KeyedSubtree with _i2.Mate {
  /// KeyedSubtree KeyedSubtree({Key? key, required Widget child})
  KeyedSubtree$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i5.Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'KeyedSubtree';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => KeyedSubtree$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Builder extends StatelessWidget
class Builder$Mate extends _i1.Builder with _i2.Mate {
  /// Builder Builder({Key? key, required Widget Function(BuildContext) builder})
  Builder$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget Function(BuildContext) builder} , default:none
    required _i5.WidgetBuilder builder,
  }) : super(
          key: key,
          builder: builder,
        ) {
    mateBuilderName = 'Builder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Builder$Mate(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
  }
}

/// class StatefulBuilder extends StatefulWidget
class StatefulBuilder$Mate extends _i1.StatefulBuilder with _i2.Mate {
  /// StatefulBuilder StatefulBuilder({Key? key, required Widget Function(BuildContext, void Function(void Function())) builder})
  StatefulBuilder$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, void Function(void Function())) builder} , default:none
    required _i1.StatefulWidgetBuilder builder,
  }) : super(
          key: key,
          builder: builder,
        ) {
    mateBuilderName = 'StatefulBuilder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => StatefulBuilder$Mate(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
  }
}

/// class ColoredBox extends SingleChildRenderObjectWidget
class ColoredBox$Mate extends _i1.ColoredBox with _i2.Mate {
  /// ColoredBox ColoredBox({required Color color, Widget? child, Key? key})
  ColoredBox$Mate({
    /// optionalParameters: {required Color color} , default:none
    required _i4.Color color,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,

    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,
  }) : super(
          color: color,
          child: child,
          key: key,
        ) {
    mateBuilderName = 'ColoredBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ColoredBox$Mate(
          color: p.get('color').build(),
          child: p.get('child').build(),
          key: p.get('key').build(),
        );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
  }
}
