// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/animated_cross_fade.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/animation/curves.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:core';

/// class AnimatedCrossFade extends StatefulWidget
class AnimatedCrossFade$Mate extends AnimatedCrossFade with Mate {
  /// AnimatedCrossFade AnimatedCrossFade({Key? key, required Widget firstChild, required Widget secondChild, Curve firstCurve = Curves.linear, Curve secondCurve = Curves.linear, Curve sizeCurve = Curves.linear, AlignmentGeometry alignment = Alignment.topCenter, required CrossFadeState crossFadeState, required Duration duration, Duration? reverseDuration, Widget Function(Widget, Key, Widget, Key) layoutBuilder = defaultLayoutBuilder, bool excludeBottomFocus = true})
  AnimatedCrossFade$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget firstChild} , hasDefaultValue:false, defaultValueCode:null
    required Widget firstChild,

    /// optionalParameters: {required Widget secondChild} , hasDefaultValue:false, defaultValueCode:null
    required Widget secondChild,

    /// optionalParameters: {Curve firstCurve = Curves.linear} , hasDefaultValue:true, defaultValueCode:Curves.linear
    required Curve firstCurve,

    /// optionalParameters: {Curve secondCurve = Curves.linear} , hasDefaultValue:true, defaultValueCode:Curves.linear
    required Curve secondCurve,

    /// optionalParameters: {Curve sizeCurve = Curves.linear} , hasDefaultValue:true, defaultValueCode:Curves.linear
    required Curve sizeCurve,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.topCenter} , hasDefaultValue:true, defaultValueCode:Alignment.topCenter
    required AlignmentGeometry alignment,

    /// optionalParameters: {required CrossFadeState crossFadeState} , hasDefaultValue:false, defaultValueCode:null
    required CrossFadeState crossFadeState,

    /// optionalParameters: {required Duration duration} , hasDefaultValue:false, defaultValueCode:null
    required Duration duration,

    /// optionalParameters: {Duration? reverseDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? reverseDuration,

    /// optionalParameters: {Widget Function(Widget, Key, Widget, Key) layoutBuilder = defaultLayoutBuilder} , hasDefaultValue:true, defaultValueCode:defaultLayoutBuilder
    required AnimatedCrossFadeBuilder layoutBuilder,

    /// optionalParameters: {bool excludeBottomFocus = true} , hasDefaultValue:true, defaultValueCode:true
    required bool excludeBottomFocus,
  }) : super(
          key: key,
          firstChild: firstChild,
          secondChild: secondChild,
          firstCurve: firstCurve,
          secondCurve: secondCurve,
          sizeCurve: sizeCurve,
          alignment: alignment,
          crossFadeState: crossFadeState,
          duration: duration,
          reverseDuration: reverseDuration,
          layoutBuilder: layoutBuilder,
          excludeBottomFocus: excludeBottomFocus,
        ) {
    mateBuilder = (p) => AnimatedCrossFade$Mate(
          key: p.get('key').build(),
          firstChild: p.get('firstChild').build(),
          secondChild: p.get('secondChild').build(),
          firstCurve: p.get('firstCurve').build(),
          secondCurve: p.get('secondCurve').build(),
          sizeCurve: p.get('sizeCurve').build(),
          alignment: p.get('alignment').build(),
          crossFadeState: p.get('crossFadeState').build(),
          duration: p.get('duration').build(),
          reverseDuration: p.get('reverseDuration').build(),
          layoutBuilder: p.get('layoutBuilder').build(),
          excludeBottomFocus: p.get('excludeBottomFocus').build(),
        );
    matePut('key', key);
    matePut('firstChild', firstChild);
    matePut('secondChild', secondChild);
    matePut('firstCurve', firstCurve);
    matePut('secondCurve', secondCurve);
    matePut('sizeCurve', sizeCurve);
    matePut('alignment', alignment);
    matePut('crossFadeState', crossFadeState);
    matePut('duration', duration);
    matePut('reverseDuration', reverseDuration);
    matePut('layoutBuilder', layoutBuilder);
    matePut('excludeBottomFocus', excludeBottomFocus);
  }
}
