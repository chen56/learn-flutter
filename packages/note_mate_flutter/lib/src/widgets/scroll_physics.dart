// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:note/mate.dart';

/// class ScrollPhysics
class ScrollPhysics$Mate extends ScrollPhysics with Mate<ScrollPhysics$Mate> {
  /// ScrollPhysics ScrollPhysics({ScrollPhysics? parent})
  ScrollPhysics$Mate(
      {
      /// optionalParameters: {ScrollPhysics? parent} , hasDefaultValue:false, defaultValueCode:null
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScrollPhysics$Mate(parent: p.get('parent').build()),
    );
    mateParams.put('parent', parent);
  }
}

/// class RangeMaintainingScrollPhysics extends ScrollPhysics
class RangeMaintainingScrollPhysics$Mate extends RangeMaintainingScrollPhysics
    with Mate<RangeMaintainingScrollPhysics$Mate> {
  /// RangeMaintainingScrollPhysics RangeMaintainingScrollPhysics({ScrollPhysics? parent})
  RangeMaintainingScrollPhysics$Mate(
      {
      /// optionalParameters: {ScrollPhysics? parent} , hasDefaultValue:false, defaultValueCode:null
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RangeMaintainingScrollPhysics$Mate(parent: p.get('parent').build()),
    );
    mateParams.put('parent', parent);
  }
}

/// class BouncingScrollPhysics extends ScrollPhysics
class BouncingScrollPhysics$Mate extends BouncingScrollPhysics with Mate<BouncingScrollPhysics$Mate> {
  /// BouncingScrollPhysics BouncingScrollPhysics({ScrollDecelerationRate decelerationRate = ScrollDecelerationRate.normal, ScrollPhysics? parent})
  BouncingScrollPhysics$Mate({
    /// optionalParameters: {ScrollDecelerationRate decelerationRate = ScrollDecelerationRate.normal} , hasDefaultValue:true, defaultValueCode:ScrollDecelerationRate.normal
    required ScrollDecelerationRate decelerationRate,

    /// optionalParameters: {ScrollPhysics? parent} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? parent,
  }) : super(
          decelerationRate: decelerationRate,
          parent: parent,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => BouncingScrollPhysics$Mate(
        decelerationRate: p.get('decelerationRate').build(),
        parent: p.get('parent').build(),
      ),
    );
    mateParams.put('decelerationRate', decelerationRate);
    mateParams.put('parent', parent);
  }
}

/// class ClampingScrollPhysics extends ScrollPhysics
class ClampingScrollPhysics$Mate extends ClampingScrollPhysics with Mate<ClampingScrollPhysics$Mate> {
  /// ClampingScrollPhysics ClampingScrollPhysics({ScrollPhysics? parent})
  ClampingScrollPhysics$Mate(
      {
      /// optionalParameters: {ScrollPhysics? parent} , hasDefaultValue:false, defaultValueCode:null
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ClampingScrollPhysics$Mate(parent: p.get('parent').build()),
    );
    mateParams.put('parent', parent);
  }
}

/// class AlwaysScrollableScrollPhysics extends ScrollPhysics
class AlwaysScrollableScrollPhysics$Mate extends AlwaysScrollableScrollPhysics
    with Mate<AlwaysScrollableScrollPhysics$Mate> {
  /// AlwaysScrollableScrollPhysics AlwaysScrollableScrollPhysics({ScrollPhysics? parent})
  AlwaysScrollableScrollPhysics$Mate(
      {
      /// optionalParameters: {ScrollPhysics? parent} , hasDefaultValue:false, defaultValueCode:null
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AlwaysScrollableScrollPhysics$Mate(parent: p.get('parent').build()),
    );
    mateParams.put('parent', parent);
  }
}

/// class NeverScrollableScrollPhysics extends ScrollPhysics
class NeverScrollableScrollPhysics$Mate extends NeverScrollableScrollPhysics
    with Mate<NeverScrollableScrollPhysics$Mate> {
  /// NeverScrollableScrollPhysics NeverScrollableScrollPhysics({ScrollPhysics? parent})
  NeverScrollableScrollPhysics$Mate(
      {
      /// optionalParameters: {ScrollPhysics? parent} , hasDefaultValue:false, defaultValueCode:null
      ScrollPhysics? parent})
      : super(parent: parent) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NeverScrollableScrollPhysics$Mate(parent: p.get('parent').build()),
    );
    mateParams.put('parent', parent);
  }
}
