// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/router.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:async';

/// class RouteInformation
class RouteInformation$Mate extends RouteInformation with Mate {
  /// RouteInformation RouteInformation({String? location, Object? state})
  RouteInformation$Mate({
    /// optionalParameters: {String? location} , defaultValue:none
    String? location,

    /// optionalParameters: {Object? state} , defaultValue:none
    Object? state,
  }) : super(
          location: location,
          state: state,
        ) {
    mateCreateName = 'RouteInformation';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RouteInformation$Mate(
          location: p.get('location').build(),
          state: p.get('state').build(),
        );
    mateUse('location', location);
    mateUse('state', state);
  }
}

/// class RouterConfig<T>
class RouterConfig$Mate<T> extends RouterConfig<T> with Mate {
  /// RouterConfig<T> RouterConfig({RouteInformationProvider? routeInformationProvider, RouteInformationParser<T>? routeInformationParser, required RouterDelegate<T> routerDelegate, BackButtonDispatcher? backButtonDispatcher})
  RouterConfig$Mate({
    /// optionalParameters: {RouteInformationProvider? routeInformationProvider} , defaultValue:none
    RouteInformationProvider? routeInformationProvider,

    /// optionalParameters: {RouteInformationParser<T>? routeInformationParser} , defaultValue:none
    RouteInformationParser<T>? routeInformationParser,

    /// optionalParameters: {required RouterDelegate<T> routerDelegate} , defaultValue:none
    required RouterDelegate<T> routerDelegate,

    /// optionalParameters: {BackButtonDispatcher? backButtonDispatcher} , defaultValue:none
    BackButtonDispatcher? backButtonDispatcher,
  }) : super(
          routeInformationProvider: routeInformationProvider,
          routeInformationParser: routeInformationParser,
          routerDelegate: routerDelegate,
          backButtonDispatcher: backButtonDispatcher,
        ) {
    mateCreateName = 'RouterConfig';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RouterConfig$Mate<T>(
          routeInformationProvider: p.get('routeInformationProvider').build(),
          routeInformationParser: p.get('routeInformationParser').build(),
          routerDelegate: p.get('routerDelegate').build(),
          backButtonDispatcher: p.get('backButtonDispatcher').build(),
        );
    mateUse('routeInformationProvider', routeInformationProvider);
    mateUse('routeInformationParser', routeInformationParser);
    mateUse('routerDelegate', routerDelegate);
    mateUse('backButtonDispatcher', backButtonDispatcher);
  }
}

/// class Router<T> extends StatefulWidget
class Router$Mate<T> extends Router<T> with Mate {
  /// Router<T> Router({Key? key, RouteInformationProvider? routeInformationProvider, RouteInformationParser<T>? routeInformationParser, required RouterDelegate<T> routerDelegate, BackButtonDispatcher? backButtonDispatcher, String? restorationScopeId})
  Router$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {RouteInformationProvider? routeInformationProvider} , defaultValue:none
    RouteInformationProvider? routeInformationProvider,

    /// optionalParameters: {RouteInformationParser<T>? routeInformationParser} , defaultValue:none
    RouteInformationParser<T>? routeInformationParser,

    /// optionalParameters: {required RouterDelegate<T> routerDelegate} , defaultValue:none
    required RouterDelegate<T> routerDelegate,

    /// optionalParameters: {BackButtonDispatcher? backButtonDispatcher} , defaultValue:none
    BackButtonDispatcher? backButtonDispatcher,

    /// optionalParameters: {String? restorationScopeId} , defaultValue:none
    String? restorationScopeId,
  }) : super(
          key: key,
          routeInformationProvider: routeInformationProvider,
          routeInformationParser: routeInformationParser,
          routerDelegate: routerDelegate,
          backButtonDispatcher: backButtonDispatcher,
          restorationScopeId: restorationScopeId,
        ) {
    mateCreateName = 'Router';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => Router$Mate<T>(
          key: p.get('key').build(),
          routeInformationProvider: p.get('routeInformationProvider').build(),
          routeInformationParser: p.get('routeInformationParser').build(),
          routerDelegate: p.get('routerDelegate').build(),
          backButtonDispatcher: p.get('backButtonDispatcher').build(),
          restorationScopeId: p.get('restorationScopeId').build(),
        );
    mateUse('key', key);
    mateUse('routeInformationProvider', routeInformationProvider);
    mateUse('routeInformationParser', routeInformationParser);
    mateUse('routerDelegate', routerDelegate);
    mateUse('backButtonDispatcher', backButtonDispatcher);
    mateUse('restorationScopeId', restorationScopeId);
  }
}

/// class ChildBackButtonDispatcher extends BackButtonDispatcher
class ChildBackButtonDispatcher$Mate extends ChildBackButtonDispatcher with Mate {
  /// ChildBackButtonDispatcher ChildBackButtonDispatcher(BackButtonDispatcher parent)
  ChildBackButtonDispatcher$Mate(

      /// requiredParameters: BackButtonDispatcher parent
      BackButtonDispatcher parent)
      : super(parent) {
    mateCreateName = 'ChildBackButtonDispatcher';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ChildBackButtonDispatcher$Mate(p.get('parent').value);
    mateUse('parent', parent);
  }
}

/// class BackButtonListener extends StatefulWidget
class BackButtonListener$Mate extends BackButtonListener with Mate {
  /// BackButtonListener BackButtonListener({Key? key, required Widget child, required Future<bool> Function() onBackButtonPressed})
  BackButtonListener$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {required Future<bool> Function() onBackButtonPressed} , defaultValue:none
    required ValueGetter<Future<bool>> onBackButtonPressed,
  }) : super(
          key: key,
          child: child,
          onBackButtonPressed: onBackButtonPressed,
        ) {
    mateCreateName = 'BackButtonListener';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => BackButtonListener$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onBackButtonPressed: p.get('onBackButtonPressed').build(),
        );
    mateUse('key', key);
    mateUse('child', child);
    mateUse('onBackButtonPressed', onBackButtonPressed);
  }
}

/// class PlatformRouteInformationProvider extends RouteInformationProvider with WidgetsBindingObserver, ChangeNotifier
class PlatformRouteInformationProvider$Mate extends PlatformRouteInformationProvider with Mate {
  /// PlatformRouteInformationProvider PlatformRouteInformationProvider({required RouteInformation initialRouteInformation})
  PlatformRouteInformationProvider$Mate(
      {
      /// optionalParameters: {required RouteInformation initialRouteInformation} , defaultValue:none
      required RouteInformation initialRouteInformation})
      : super(initialRouteInformation: initialRouteInformation) {
    mateCreateName = 'PlatformRouteInformationProvider';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder =
        (p) => PlatformRouteInformationProvider$Mate(initialRouteInformation: p.get('initialRouteInformation').build());
    mateUse('initialRouteInformation', initialRouteInformation);
  }
}
