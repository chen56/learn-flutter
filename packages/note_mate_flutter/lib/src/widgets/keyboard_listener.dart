// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/keyboard_listener.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/hardware_keyboard.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class KeyboardListener extends StatelessWidget
class KeyboardListener$Mate extends KeyboardListener with WidgetMate<KeyboardListener$Mate> {
  /// KeyboardListener KeyboardListener({Key? key, required FocusNode focusNode, bool autofocus = false, bool includeSemantics = true, void Function(KeyEvent)? onKeyEvent, required Widget child})
  KeyboardListener$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required FocusNode focusNode} , hasDefaultValue:false, defaultValueCode:null
    required FocusNode focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {bool includeSemantics = true} , hasDefaultValue:true, defaultValueCode:true
    required bool includeSemantics,

    /// optionalParameters: {void Function(KeyEvent)? onKeyEvent} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<KeyEvent>? onKeyEvent,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          focusNode: focusNode,
          autofocus: autofocus,
          includeSemantics: includeSemantics,
          onKeyEvent: onKeyEvent,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => KeyboardListener$Mate(
        key: p.get('key').build(),
        focusNode: p.get('focusNode').build(),
        autofocus: p.get('autofocus').build(),
        includeSemantics: p.get('includeSemantics').build(),
        onKeyEvent: p.get('onKeyEvent').build(),
        child: p.get('child').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('focusNode', focusNode);
    mateParams.put('autofocus', autofocus);
    mateParams.put('includeSemantics', includeSemantics);
    mateParams.put('onKeyEvent', onKeyEvent);
    mateParams.put('child', child);
  }
}
