// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/foundation/assertions.dart';
import 'package:flutter/src/rendering/object.dart';

/// class ObjectKey extends LocalKey
class ObjectKey$Mate extends ObjectKey with Mate {
  /// ObjectKey ObjectKey(Object? value)
  ObjectKey$Mate(

      /// requiredParameters: Object? value
      Object? value)
      : super(value) {
    mateBuilderName = 'ObjectKey';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ObjectKey$Mate(p.get('value').value);
    mateUse(
      'value',
      value,
      isNamed: false,
    );
  }
}

/// class LabeledGlobalKey<T extends State<StatefulWidget>> extends GlobalKey<T>
class LabeledGlobalKey$Mate<T extends State<StatefulWidget>> extends LabeledGlobalKey<T> with Mate {
  /// LabeledGlobalKey<T> LabeledGlobalKey(String? _debugLabel)
  LabeledGlobalKey$Mate(

      /// requiredParameters: String? _debugLabel
      String? _debugLabel)
      : super(_debugLabel) {
    mateBuilderName = 'LabeledGlobalKey';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => LabeledGlobalKey$Mate<T>(p.get('_debugLabel').value);
    mateUse(
      '_debugLabel',
      _debugLabel,
      isNamed: false,
    );
  }
}

/// class GlobalObjectKey<T extends State<StatefulWidget>> extends GlobalKey<T>
class GlobalObjectKey$Mate<T extends State<StatefulWidget>> extends GlobalObjectKey<T> with Mate {
  /// GlobalObjectKey<T> GlobalObjectKey(Object value)
  GlobalObjectKey$Mate(

      /// requiredParameters: Object value
      Object value)
      : super(value) {
    mateBuilderName = 'GlobalObjectKey';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => GlobalObjectKey$Mate<T>(p.get('value').value);
    mateUse(
      'value',
      value,
      isNamed: false,
    );
  }
}

/// class BuildOwner
class BuildOwner$Mate extends BuildOwner with Mate {
  /// BuildOwner BuildOwner({void Function()? onBuildScheduled, FocusManager? focusManager})
  BuildOwner$Mate({
    /// optionalParameters: {void Function()? onBuildScheduled} , default:none
    VoidCallback? onBuildScheduled,

    /// optionalParameters: {FocusManager? focusManager} , default:none
    FocusManager? focusManager,
  }) : super(
          onBuildScheduled: onBuildScheduled,
          focusManager: focusManager,
        ) {
    mateBuilderName = 'BuildOwner';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => BuildOwner$Mate(
          onBuildScheduled: p.get('onBuildScheduled').build(),
          focusManager: p.get('focusManager').build(),
        );
    mateUse(
      'onBuildScheduled',
      onBuildScheduled,
      isNamed: true,
    );
    mateUse(
      'focusManager',
      focusManager,
      isNamed: true,
    );
  }
}

/// class ErrorWidget extends LeafRenderObjectWidget
class ErrorWidget$Mate extends ErrorWidget with Mate {
  /// ErrorWidget ErrorWidget(Object exception)
  ErrorWidget$Mate(

      /// requiredParameters: Object exception
      Object exception)
      : super(exception) {
    mateBuilderName = 'ErrorWidget';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ErrorWidget$Mate(p.get('exception').value);
    mateUse(
      'exception',
      exception,
      isNamed: false,
    );
  }

  /// ErrorWidget ErrorWidget.withDetails({String message = '', FlutterError? error})
  ErrorWidget$Mate.withDetails({
    /// optionalParameters: {String message = ''} , default:processed=SimpleStringLiteralImpl
    String message = '',

    /// optionalParameters: {FlutterError? error} , default:none
    FlutterError? error,
  }) : super.withDetails(
          message: message,
          error: error,
        ) {
    mateBuilderName = 'ErrorWidget.withDetails';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ErrorWidget$Mate.withDetails(
          message: p.get('message').build(),
          error: p.get('error').build(),
        );
    mateUse(
      'message',
      message,
      isNamed: true,
      defaultValue: '',
    );
    mateUse(
      'error',
      error,
      isNamed: true,
    );
  }
}

/// class StatelessElement extends ComponentElement
class StatelessElement$Mate extends StatelessElement with Mate {
  /// StatelessElement StatelessElement(StatelessWidget widget)
  StatelessElement$Mate(

      /// requiredParameters: StatelessWidget widget
      StatelessWidget widget)
      : super(widget) {
    mateBuilderName = 'StatelessElement';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => StatelessElement$Mate(p.get('widget').value);
    mateUse(
      'widget',
      widget,
      isNamed: false,
    );
  }
}

/// class StatefulElement extends ComponentElement
class StatefulElement$Mate extends StatefulElement with Mate {
  /// StatefulElement StatefulElement(StatefulWidget widget)
  StatefulElement$Mate(

      /// requiredParameters: StatefulWidget widget
      StatefulWidget widget)
      : super(widget) {
    mateBuilderName = 'StatefulElement';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => StatefulElement$Mate(p.get('widget').value);
    mateUse(
      'widget',
      widget,
      isNamed: false,
    );
  }
}

/// class ParentDataElement<T extends ParentData> extends ProxyElement
class ParentDataElement$Mate<T extends ParentData> extends ParentDataElement<T> with Mate {
  /// ParentDataElement<T> ParentDataElement(ParentDataWidget<T> widget)
  ParentDataElement$Mate(

      /// requiredParameters: ParentDataWidget<T> widget
      ParentDataWidget<T> widget)
      : super(widget) {
    mateBuilderName = 'ParentDataElement';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ParentDataElement$Mate<T>(p.get('widget').value);
    mateUse(
      'widget',
      widget,
      isNamed: false,
    );
  }
}

/// class InheritedElement extends ProxyElement
class InheritedElement$Mate extends InheritedElement with Mate {
  /// InheritedElement InheritedElement(InheritedWidget widget)
  InheritedElement$Mate(

      /// requiredParameters: InheritedWidget widget
      InheritedWidget widget)
      : super(widget) {
    mateBuilderName = 'InheritedElement';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => InheritedElement$Mate(p.get('widget').value);
    mateUse(
      'widget',
      widget,
      isNamed: false,
    );
  }
}

/// class LeafRenderObjectElement extends RenderObjectElement
class LeafRenderObjectElement$Mate extends LeafRenderObjectElement with Mate {
  /// LeafRenderObjectElement LeafRenderObjectElement(LeafRenderObjectWidget widget)
  LeafRenderObjectElement$Mate(

      /// requiredParameters: LeafRenderObjectWidget widget
      LeafRenderObjectWidget widget)
      : super(widget) {
    mateBuilderName = 'LeafRenderObjectElement';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => LeafRenderObjectElement$Mate(p.get('widget').value);
    mateUse(
      'widget',
      widget,
      isNamed: false,
    );
  }
}

/// class SingleChildRenderObjectElement extends RenderObjectElement
class SingleChildRenderObjectElement$Mate extends SingleChildRenderObjectElement with Mate {
  /// SingleChildRenderObjectElement SingleChildRenderObjectElement(SingleChildRenderObjectWidget widget)
  SingleChildRenderObjectElement$Mate(

      /// requiredParameters: SingleChildRenderObjectWidget widget
      SingleChildRenderObjectWidget widget)
      : super(widget) {
    mateBuilderName = 'SingleChildRenderObjectElement';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => SingleChildRenderObjectElement$Mate(p.get('widget').value);
    mateUse(
      'widget',
      widget,
      isNamed: false,
    );
  }
}

/// class MultiChildRenderObjectElement extends RenderObjectElement
class MultiChildRenderObjectElement$Mate extends MultiChildRenderObjectElement with Mate {
  /// MultiChildRenderObjectElement MultiChildRenderObjectElement(MultiChildRenderObjectWidget widget)
  MultiChildRenderObjectElement$Mate(

      /// requiredParameters: MultiChildRenderObjectWidget widget
      MultiChildRenderObjectWidget widget)
      : super(widget) {
    mateBuilderName = 'MultiChildRenderObjectElement';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => MultiChildRenderObjectElement$Mate(p.get('widget').value);
    mateUse(
      'widget',
      widget,
      isNamed: false,
    );
  }
}

/// class DebugCreator
class DebugCreator$Mate extends DebugCreator with Mate {
  /// DebugCreator DebugCreator(Element element)
  DebugCreator$Mate(

      /// requiredParameters: Element element
      Element element)
      : super(element) {
    mateBuilderName = 'DebugCreator';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DebugCreator$Mate(p.get('element').value);
    mateUse(
      'element',
      element,
      isNamed: false,
    );
  }
}

/// class IndexedSlot<T extends Element?>
class IndexedSlot$Mate<T extends Element?> extends IndexedSlot<T> with Mate {
  /// IndexedSlot<T> IndexedSlot(int index, T value)
  IndexedSlot$Mate(
    /// requiredParameters: int index
    int index,

    /// requiredParameters: T value
    T value,
  ) : super(
          index,
          value,
        ) {
    mateBuilderName = 'IndexedSlot';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => IndexedSlot$Mate<T>(
          p.get('index').value,
          p.get('value').value,
        );
    mateUse(
      'index',
      index,
      isNamed: false,
    );
    mateUse(
      'value',
      value,
      isNamed: false,
    );
  }
}
