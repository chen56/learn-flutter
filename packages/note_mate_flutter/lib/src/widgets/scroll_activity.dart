// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scroll_activity.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/drag_details.dart';
import 'dart:core';
import 'package:flutter/src/physics/simulation.dart';
import 'package:flutter/src/scheduler/ticker.dart';
import 'package:flutter/src/animation/curves.dart';

/// class IdleScrollActivity extends ScrollActivity
class IdleScrollActivity$Mate extends IdleScrollActivity with Mate {
  /// IdleScrollActivity IdleScrollActivity(ScrollActivityDelegate delegate)
  IdleScrollActivity$Mate(

      /// requiredParameters: ScrollActivityDelegate delegate
      ScrollActivityDelegate delegate)
      : super(delegate) {
    mateCreateName = 'IdleScrollActivity';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => IdleScrollActivity$Mate(p.get('delegate').value);
    mateUse('delegate', delegate, isNamed: false);
  }
}

/// class HoldScrollActivity extends ScrollActivity implements ScrollHoldController
class HoldScrollActivity$Mate extends HoldScrollActivity with Mate {
  /// HoldScrollActivity HoldScrollActivity({required ScrollActivityDelegate delegate, void Function()? onHoldCanceled})
  HoldScrollActivity$Mate({
    /// optionalParameters: {required ScrollActivityDelegate delegate} , defaultValue:none
    required ScrollActivityDelegate delegate,

    /// optionalParameters: {void Function()? onHoldCanceled} , defaultValue:none
    VoidCallback? onHoldCanceled,
  }) : super(
          delegate: delegate,
          onHoldCanceled: onHoldCanceled,
        ) {
    mateCreateName = 'HoldScrollActivity';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => HoldScrollActivity$Mate(
          delegate: p.get('delegate').build(),
          onHoldCanceled: p.get('onHoldCanceled').build(),
        );
    mateUse('delegate', delegate, isNamed: true);
    mateUse('onHoldCanceled', onHoldCanceled, isNamed: true);
  }
}

/// class ScrollDragController implements Drag
class ScrollDragController$Mate extends ScrollDragController with Mate {
  /// ScrollDragController ScrollDragController({required ScrollActivityDelegate delegate, required DragStartDetails details, void Function()? onDragCanceled, double? carriedVelocity, double? motionStartDistanceThreshold})
  ScrollDragController$Mate({
    /// optionalParameters: {required ScrollActivityDelegate delegate} , defaultValue:none
    required ScrollActivityDelegate delegate,

    /// optionalParameters: {required DragStartDetails details} , defaultValue:none
    required DragStartDetails details,

    /// optionalParameters: {void Function()? onDragCanceled} , defaultValue:none
    VoidCallback? onDragCanceled,

    /// optionalParameters: {double? carriedVelocity} , defaultValue:none
    double? carriedVelocity,

    /// optionalParameters: {double? motionStartDistanceThreshold} , defaultValue:none
    double? motionStartDistanceThreshold,
  }) : super(
          delegate: delegate,
          details: details,
          onDragCanceled: onDragCanceled,
          carriedVelocity: carriedVelocity,
          motionStartDistanceThreshold: motionStartDistanceThreshold,
        ) {
    mateCreateName = 'ScrollDragController';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollDragController$Mate(
          delegate: p.get('delegate').build(),
          details: p.get('details').build(),
          onDragCanceled: p.get('onDragCanceled').build(),
          carriedVelocity: p.get('carriedVelocity').build(),
          motionStartDistanceThreshold: p.get('motionStartDistanceThreshold').build(),
        );
    mateUse('delegate', delegate, isNamed: true);
    mateUse('details', details, isNamed: true);
    mateUse('onDragCanceled', onDragCanceled, isNamed: true);
    mateUse('carriedVelocity', carriedVelocity, isNamed: true);
    mateUse('motionStartDistanceThreshold', motionStartDistanceThreshold, isNamed: true);
  }
}

/// class DragScrollActivity extends ScrollActivity
class DragScrollActivity$Mate extends DragScrollActivity with Mate {
  /// DragScrollActivity DragScrollActivity(ScrollActivityDelegate delegate, ScrollDragController controller)
  DragScrollActivity$Mate(
    /// requiredParameters: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate,

    /// requiredParameters: ScrollDragController controller
    ScrollDragController controller,
  ) : super(
          delegate,
          controller,
        ) {
    mateCreateName = 'DragScrollActivity';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DragScrollActivity$Mate(
          p.get('delegate').value,
          p.get('controller').value,
        );
    mateUse('delegate', delegate, isNamed: false);
    mateUse('controller', controller, isNamed: false);
  }
}

/// class BallisticScrollActivity extends ScrollActivity
class BallisticScrollActivity$Mate extends BallisticScrollActivity with Mate {
  /// BallisticScrollActivity BallisticScrollActivity(ScrollActivityDelegate delegate, Simulation simulation, TickerProvider vsync, bool shouldIgnorePointer)
  BallisticScrollActivity$Mate(
    /// requiredParameters: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate,

    /// requiredParameters: Simulation simulation
    Simulation simulation,

    /// requiredParameters: TickerProvider vsync
    TickerProvider vsync,

    /// requiredParameters: bool shouldIgnorePointer
    bool shouldIgnorePointer,
  ) : super(
          delegate,
          simulation,
          vsync,
          shouldIgnorePointer,
        ) {
    mateCreateName = 'BallisticScrollActivity';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => BallisticScrollActivity$Mate(
          p.get('delegate').value,
          p.get('simulation').value,
          p.get('vsync').value,
          p.get('shouldIgnorePointer').value,
        );
    mateUse('delegate', delegate, isNamed: false);
    mateUse('simulation', simulation, isNamed: false);
    mateUse('vsync', vsync, isNamed: false);
    mateUse('shouldIgnorePointer', shouldIgnorePointer, isNamed: false);
  }
}

/// class DrivenScrollActivity extends ScrollActivity
class DrivenScrollActivity$Mate extends DrivenScrollActivity with Mate {
  /// DrivenScrollActivity DrivenScrollActivity(ScrollActivityDelegate delegate, {required double from, required double to, required Duration duration, required Curve curve, required TickerProvider vsync})
  DrivenScrollActivity$Mate(
    /// requiredParameters: ScrollActivityDelegate delegate
    ScrollActivityDelegate delegate, {
    /// optionalParameters: {required double from} , defaultValue:none
    required double from,

    /// optionalParameters: {required double to} , defaultValue:none
    required double to,

    /// optionalParameters: {required Duration duration} , defaultValue:none
    required Duration duration,

    /// optionalParameters: {required Curve curve} , defaultValue:none
    required Curve curve,

    /// optionalParameters: {required TickerProvider vsync} , defaultValue:none
    required TickerProvider vsync,
  }) : super(
          delegate,
          from: from,
          to: to,
          duration: duration,
          curve: curve,
          vsync: vsync,
        ) {
    mateCreateName = 'DrivenScrollActivity';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DrivenScrollActivity$Mate(
          p.get('delegate').value,
          from: p.get('from').build(),
          to: p.get('to').build(),
          duration: p.get('duration').build(),
          curve: p.get('curve').build(),
          vsync: p.get('vsync').build(),
        );
    mateUse('delegate', delegate, isNamed: false);
    mateUse('from', from, isNamed: true);
    mateUse('to', to, isNamed: true);
    mateUse('duration', duration, isNamed: true);
    mateUse('curve', curve, isNamed: true);
    mateUse('vsync', vsync, isNamed: true);
  }
}
