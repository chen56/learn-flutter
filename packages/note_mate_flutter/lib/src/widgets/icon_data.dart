// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/icon_data.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class IconDataProperty extends DiagnosticsProperty<IconData>
class IconDataProperty$Mate extends IconDataProperty with Mate {
  /// IconDataProperty IconDataProperty(String name, IconData? value, {String? ifNull, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IconDataProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: IconData? value
    IconData? value, {
    /// optionalParameters: {String? ifNull} , defaultValue:none
    String? ifNull,

    /// optionalParameters: {bool showName = true} , defaultValue:is!ConstVariableElement
    required bool showName,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , defaultValue:is!ConstVariableElement
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , defaultValue:is!ConstVariableElement
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          showName: showName,
          style: style,
          level: level,
        ) {
    mateCreateName = 'IconDataProperty';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => IconDataProperty$Mate(
          p.get('name').value,
          p.get('value').value,
          ifNull: p.get('ifNull').build(),
          showName: p.get('showName').build(),
          style: p.get('style').build(),
          level: p.get('level').build(),
        );
    mateUse('name', name, isNamed: false);
    mateUse('value', value, isNamed: false);
    mateUse('ifNull', ifNull, isNamed: true);
    mateUse('showName', showName, isNamed: true);
    mateUse('style', style, isNamed: true);
    mateUse('level', level, isNamed: true);
  }
}
