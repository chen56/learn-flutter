// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/dismissible.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/cupertino.dart' as _i6;
import 'package:flutter/src/gestures/recognizer.dart' as _i7;
import 'package:flutter/gestures.dart' as _i8;
import 'package:flutter/src/rendering/proxy_box.dart' as _i9;

/// class Dismissible extends StatefulWidget
class Dismissible$Mate extends _i1.Dismissible with _i2.Mate {
  /// Dismissible Dismissible({required Key key, required Widget child, Widget? background, Widget? secondaryBackground, Future<bool?> Function(DismissDirection)? confirmDismiss, void Function()? onResize, void Function(DismissUpdateDetails)? onUpdate, void Function(DismissDirection)? onDismissed, DismissDirection direction = DismissDirection.horizontal, Duration? resizeDuration = const Duration(milliseconds: 300), Map<DismissDirection, double> dismissThresholds = const <DismissDirection, double>{}, Duration movementDuration = const Duration(milliseconds: 200), double crossAxisEndOffset = 0.0, DragStartBehavior dragStartBehavior = DragStartBehavior.start, HitTestBehavior behavior = HitTestBehavior.opaque})
  Dismissible$Mate({
    /// optionalParameters: {required Key key} , default:none
    required _i3.Key key,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,

    /// optionalParameters: {Widget? background} , default:none
    _i4.Widget? background,

    /// optionalParameters: {Widget? secondaryBackground} , default:none
    _i4.Widget? secondaryBackground,

    /// optionalParameters: {Future<bool?> Function(DismissDirection)? confirmDismiss} , default:none
    _i1.ConfirmDismissCallback? confirmDismiss,

    /// optionalParameters: {void Function()? onResize} , default:none
    _i5.VoidCallback? onResize,

    /// optionalParameters: {void Function(DismissUpdateDetails)? onUpdate} , default:none
    _i1.DismissUpdateCallback? onUpdate,

    /// optionalParameters: {void Function(DismissDirection)? onDismissed} , default:none
    _i1.DismissDirectionCallback? onDismissed,

    /// optionalParameters: {DismissDirection direction = DismissDirection.horizontal} , default:processed=PrefixedIdentifierImpl
    _i1.DismissDirection direction = _i6.DismissDirection.horizontal,

    /// optionalParameters: {Duration? resizeDuration = const Duration(milliseconds: 300)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration? resizeDuration,

    /// optionalParameters: {Map<DismissDirection, double> dismissThresholds = const <DismissDirection, double>{}} , default:unprocessed=SetOrMapLiteralImpl
    required Map<_i1.DismissDirection, double> dismissThresholds,

    /// optionalParameters: {Duration movementDuration = const Duration(milliseconds: 200)} , default:unprocessed=InstanceCreationExpressionImpl
    required Duration movementDuration,

    /// optionalParameters: {double crossAxisEndOffset = 0.0} , default:processed=DoubleLiteralImpl
    double crossAxisEndOffset = 0.0,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    _i7.DragStartBehavior dragStartBehavior = _i8.DragStartBehavior.start,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.opaque} , default:processed=PrefixedIdentifierImpl
    _i9.HitTestBehavior behavior = _i6.HitTestBehavior.opaque,
  }) : super(
          key: key,
          child: child,
          background: background,
          secondaryBackground: secondaryBackground,
          confirmDismiss: confirmDismiss,
          onResize: onResize,
          onUpdate: onUpdate,
          onDismissed: onDismissed,
          direction: direction,
          resizeDuration: resizeDuration,
          dismissThresholds: dismissThresholds,
          movementDuration: movementDuration,
          crossAxisEndOffset: crossAxisEndOffset,
          dragStartBehavior: dragStartBehavior,
          behavior: behavior,
        ) {
    mateBuilderName = 'Dismissible';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Dismissible$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          background: p.get('background').build(),
          secondaryBackground: p.get('secondaryBackground').build(),
          confirmDismiss: p.get('confirmDismiss').build(),
          onResize: p.get('onResize').build(),
          onUpdate: p.get('onUpdate').build(),
          onDismissed: p.get('onDismissed').build(),
          direction: p.get('direction').build(),
          resizeDuration: p.get('resizeDuration').build(),
          dismissThresholds: p.get('dismissThresholds').build(),
          movementDuration: p.get('movementDuration').build(),
          crossAxisEndOffset: p.get('crossAxisEndOffset').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          behavior: p.get('behavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'background',
      background,
      isNamed: true,
    );
    mateUse(
      'secondaryBackground',
      secondaryBackground,
      isNamed: true,
    );
    mateUse(
      'confirmDismiss',
      confirmDismiss,
      isNamed: true,
    );
    mateUse(
      'onResize',
      onResize,
      isNamed: true,
    );
    mateUse(
      'onUpdate',
      onUpdate,
      isNamed: true,
    );
    mateUse(
      'onDismissed',
      onDismissed,
      isNamed: true,
    );
    mateUse(
      'direction',
      direction,
      isNamed: true,
      defaultValue: _i6.DismissDirection.horizontal,
    );
    mateUse(
      'resizeDuration',
      resizeDuration,
      isNamed: true,
    );
    mateUse(
      'dismissThresholds',
      dismissThresholds,
      isNamed: true,
    );
    mateUse(
      'movementDuration',
      movementDuration,
      isNamed: true,
    );
    mateUse(
      'crossAxisEndOffset',
      crossAxisEndOffset,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'dragStartBehavior',
      dragStartBehavior,
      isNamed: true,
      defaultValue: _i8.DragStartBehavior.start,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
      defaultValue: _i6.HitTestBehavior.opaque,
    );
  }
}

/// class DismissUpdateDetails
class DismissUpdateDetails$Mate extends _i1.DismissUpdateDetails with _i2.Mate {
  /// DismissUpdateDetails DismissUpdateDetails({DismissDirection direction = DismissDirection.horizontal, bool reached = false, bool previousReached = false, double progress = 0.0})
  DismissUpdateDetails$Mate({
    /// optionalParameters: {DismissDirection direction = DismissDirection.horizontal} , default:processed=PrefixedIdentifierImpl
    _i1.DismissDirection direction = _i6.DismissDirection.horizontal,

    /// optionalParameters: {bool reached = false} , default:processed=BooleanLiteralImpl
    bool reached = false,

    /// optionalParameters: {bool previousReached = false} , default:processed=BooleanLiteralImpl
    bool previousReached = false,

    /// optionalParameters: {double progress = 0.0} , default:processed=DoubleLiteralImpl
    double progress = 0.0,
  }) : super(
          direction: direction,
          reached: reached,
          previousReached: previousReached,
          progress: progress,
        ) {
    mateBuilderName = 'DismissUpdateDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DismissUpdateDetails$Mate(
          direction: p.get('direction').build(),
          reached: p.get('reached').build(),
          previousReached: p.get('previousReached').build(),
          progress: p.get('progress').build(),
        );
    mateUse(
      'direction',
      direction,
      isNamed: true,
      defaultValue: _i6.DismissDirection.horizontal,
    );
    mateUse(
      'reached',
      reached,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'previousReached',
      previousReached,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'progress',
      progress,
      isNamed: true,
      defaultValue: 0.0,
    );
  }
}
