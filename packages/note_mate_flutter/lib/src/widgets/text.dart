// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/text.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/text_style.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/text_painter.dart' as _i6;
import 'package:flutter/cupertino.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i8;
import 'package:flutter/src/painting/strut_style.dart' as _i9;
import 'package:flutter/src/painting/inline_span.dart' as _i10;

/// class DefaultTextStyle extends InheritedTheme
class DefaultTextStyle$Mate extends _i1.DefaultTextStyle with _i2.Mate {
  /// DefaultTextStyle DefaultTextStyle({Key? key, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, required Widget child})
  DefaultTextStyle$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required TextStyle style} , default:none
    required _i4.TextStyle style,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    _i5.TextAlign? textAlign,

    /// optionalParameters: {bool softWrap = true} , default:processed=BooleanLiteralImpl
    bool softWrap = true,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , default:processed=PrefixedIdentifierImpl
    _i6.TextOverflow overflow = _i7.TextOverflow.clip,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:processed=PrefixedIdentifierImpl
    _i6.TextWidthBasis textWidthBasis = _i7.TextWidthBasis.parent,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    _i5.TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {required Widget child} , default:none
    required _i8.Widget child,
  }) : super(
          key: key,
          style: style,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {
    mateBuilderName = 'DefaultTextStyle';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultTextStyle$Mate(
          key: p.get('key').build(),
          style: p.get('style').build(),
          textAlign: p.get('textAlign').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          maxLines: p.get('maxLines').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
    );
    mateUse(
      'softWrap',
      softWrap,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'overflow',
      overflow,
      isNamed: true,
      defaultValue: _i7.TextOverflow.clip,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
      defaultValue: _i7.TextWidthBasis.parent,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }

  /// DefaultTextStyle DefaultTextStyle.fallback({Key? key})
  DefaultTextStyle$Mate.fallback(
      {
      /// optionalParameters: {Key? key} , default:none
      _i3.Key? key})
      : super.fallback(key: key) {
    mateBuilderName = 'DefaultTextStyle.fallback';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultTextStyle$Mate.fallback(key: p.get('key').build());
    mateUse(
      'key',
      key,
      isNamed: true,
    );
  }
}

/// class DefaultTextHeightBehavior extends InheritedTheme
class DefaultTextHeightBehavior$Mate extends _i1.DefaultTextHeightBehavior with _i2.Mate {
  /// DefaultTextHeightBehavior DefaultTextHeightBehavior({Key? key, required TextHeightBehavior textHeightBehavior, required Widget child})
  DefaultTextHeightBehavior$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required TextHeightBehavior textHeightBehavior} , default:none
    required _i5.TextHeightBehavior textHeightBehavior,

    /// optionalParameters: {required Widget child} , default:none
    required _i8.Widget child,
  }) : super(
          key: key,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {
    mateBuilderName = 'DefaultTextHeightBehavior';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultTextHeightBehavior$Mate(
          key: p.get('key').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class Text extends StatelessWidget
class Text$Mate extends _i1.Text with _i2.Mate {
  /// Text Text(String data, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate(
    /// requiredParameters: String data
    String data, {
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {TextStyle? style} , default:none
    _i4.TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    _i9.StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    _i5.TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i5.TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , default:none
    _i5.Locale? locale,

    /// optionalParameters: {bool? softWrap} , default:none
    bool? softWrap,

    /// optionalParameters: {TextOverflow? overflow} , default:none
    _i6.TextOverflow? overflow,

    /// optionalParameters: {double? textScaleFactor} , default:none
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,

    /// optionalParameters: {String? semanticsLabel} , default:none
    String? semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    _i6.TextWidthBasis? textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    _i5.TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , default:none
    _i5.Color? selectionColor,
  }) : super(
          data,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {
    mateBuilderName = 'Text';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Text$Mate(
          p.get('data').value,
          key: p.get('key').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          locale: p.get('locale').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionColor: p.get('selectionColor').build(),
        );
    mateUse(
      'data',
      data,
      isNamed: false,
    );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'strutStyle',
      strutStyle,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'locale',
      locale,
      isNamed: true,
    );
    mateUse(
      'softWrap',
      softWrap,
      isNamed: true,
    );
    mateUse(
      'overflow',
      overflow,
      isNamed: true,
    );
    mateUse(
      'textScaleFactor',
      textScaleFactor,
      isNamed: true,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
    mateUse(
      'semanticsLabel',
      semanticsLabel,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'selectionColor',
      selectionColor,
      isNamed: true,
    );
  }

  /// Text Text.rich(InlineSpan textSpan, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate.rich(
    /// requiredParameters: InlineSpan textSpan
    _i10.InlineSpan textSpan, {
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {TextStyle? style} , default:none
    _i4.TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    _i9.StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    _i5.TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    _i5.TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , default:none
    _i5.Locale? locale,

    /// optionalParameters: {bool? softWrap} , default:none
    bool? softWrap,

    /// optionalParameters: {TextOverflow? overflow} , default:none
    _i6.TextOverflow? overflow,

    /// optionalParameters: {double? textScaleFactor} , default:none
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines} , default:none
    int? maxLines,

    /// optionalParameters: {String? semanticsLabel} , default:none
    String? semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    _i6.TextWidthBasis? textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    _i5.TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , default:none
    _i5.Color? selectionColor,
  }) : super.rich(
          textSpan,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {
    mateBuilderName = 'Text.rich';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Text$Mate.rich(
          p.get('textSpan').value,
          key: p.get('key').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          locale: p.get('locale').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionColor: p.get('selectionColor').build(),
        );
    mateUse(
      'textSpan',
      textSpan,
      isNamed: false,
    );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'style',
      style,
      isNamed: true,
    );
    mateUse(
      'strutStyle',
      strutStyle,
      isNamed: true,
    );
    mateUse(
      'textAlign',
      textAlign,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'locale',
      locale,
      isNamed: true,
    );
    mateUse(
      'softWrap',
      softWrap,
      isNamed: true,
    );
    mateUse(
      'overflow',
      overflow,
      isNamed: true,
    );
    mateUse(
      'textScaleFactor',
      textScaleFactor,
      isNamed: true,
    );
    mateUse(
      'maxLines',
      maxLines,
      isNamed: true,
    );
    mateUse(
      'semanticsLabel',
      semanticsLabel,
      isNamed: true,
    );
    mateUse(
      'textWidthBasis',
      textWidthBasis,
      isNamed: true,
    );
    mateUse(
      'textHeightBehavior',
      textHeightBehavior,
      isNamed: true,
    );
    mateUse(
      'selectionColor',
      selectionColor,
      isNamed: true,
    );
  }
}
