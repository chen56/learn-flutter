// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/text.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/text_style.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/text_painter.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i7;
import 'package:flutter/src/painting/strut_style.dart' as _i8;
import 'package:flutter/src/painting/inline_span.dart' as _i9;

/// class DefaultTextStyle extends InheritedTheme
class DefaultTextStyle$Mate extends _i1.DefaultTextStyle with _i2.Mate {
  /// DefaultTextStyle DefaultTextStyle({Key? key, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, required Widget child})
  DefaultTextStyle$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required TextStyle style} , default:none
    required super.style,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    super.textAlign,

    /// optionalParameters: {bool softWrap = true} , default:processed=BooleanLiteralImpl
    super.softWrap,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , default:unprocessed=PrefixedIdentifierImpl
    super.overflow,

    /// optionalParameters: {int? maxLines} , default:none
    super.maxLines,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:unprocessed=PrefixedIdentifierImpl
    super.textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i4.TextStyle>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i5.TextAlign?>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
          ),
          'softWrap': _i2.BuilderArg<bool>(
            name: 'softWrap',
            init: softWrap,
            isNamed: true,
            defaultValue: true,
          ),
          'overflow': _i2.BuilderArg<_i6.TextOverflow>(
            name: 'overflow',
            init: overflow,
            isNamed: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i6.TextWidthBasis>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i5.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i7.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DefaultTextStyle';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultTextStyle$Mate(
          key: p.get('key').build(),
          style: p.get('style').build(),
          textAlign: p.get('textAlign').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          maxLines: p.get('maxLines').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          child: p.get('child').build(),
        );
  }

  /// DefaultTextStyle DefaultTextStyle.fallback({Key? key})
  DefaultTextStyle$Mate.fallback(
      {
      /// optionalParameters: {Key? key} , default:none
      super.key})
      : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          )
        },
        super.fallback() {
    mateBuilderName = 'DefaultTextStyle.fallback';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultTextStyle$Mate.fallback(key: p.get('key').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DefaultTextHeightBehavior extends InheritedTheme
class DefaultTextHeightBehavior$Mate extends _i1.DefaultTextHeightBehavior with _i2.Mate {
  /// DefaultTextHeightBehavior DefaultTextHeightBehavior({Key? key, required TextHeightBehavior textHeightBehavior, required Widget child})
  DefaultTextHeightBehavior$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required TextHeightBehavior textHeightBehavior} , default:none
    required super.textHeightBehavior,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i5.TextHeightBehavior>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i7.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DefaultTextHeightBehavior';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultTextHeightBehavior$Mate(
          key: p.get('key').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Text extends StatelessWidget
class Text$Mate extends _i1.Text with _i2.Mate {
  /// Text Text(String data, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate(
    /// requiredParameters: String data
    super.data, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    super.textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {Locale? locale} , default:none
    super.locale,

    /// optionalParameters: {bool? softWrap} , default:none
    super.softWrap,

    /// optionalParameters: {TextOverflow? overflow} , default:none
    super.overflow,

    /// optionalParameters: {double? textScaleFactor} , default:none
    super.textScaleFactor,

    /// optionalParameters: {int? maxLines} , default:none
    super.maxLines,

    /// optionalParameters: {String? semanticsLabel} , default:none
    super.semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    super.textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , default:none
    super.selectionColor,
  })  : mateParams = {
          'data': _i2.BuilderArg<String>(
            name: 'data',
            init: data,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'strutStyle': _i2.BuilderArg<_i8.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i5.TextAlign?>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'locale': _i2.BuilderArg<_i5.Locale?>(
            name: 'locale',
            init: locale,
            isNamed: true,
          ),
          'softWrap': _i2.BuilderArg<bool?>(
            name: 'softWrap',
            init: softWrap,
            isNamed: true,
          ),
          'overflow': _i2.BuilderArg<_i6.TextOverflow?>(
            name: 'overflow',
            init: overflow,
            isNamed: true,
          ),
          'textScaleFactor': _i2.BuilderArg<double?>(
            name: 'textScaleFactor',
            init: textScaleFactor,
            isNamed: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
          ),
          'semanticsLabel': _i2.BuilderArg<String?>(
            name: 'semanticsLabel',
            init: semanticsLabel,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i6.TextWidthBasis?>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i5.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'selectionColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectionColor',
            init: selectionColor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Text';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Text$Mate(
          p.get('data').value,
          key: p.get('key').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          locale: p.get('locale').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionColor: p.get('selectionColor').build(),
        );
  }

  /// Text Text.rich(InlineSpan textSpan, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate.rich(
    /// requiredParameters: InlineSpan textSpan
    super.textSpan, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    super.textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {Locale? locale} , default:none
    super.locale,

    /// optionalParameters: {bool? softWrap} , default:none
    super.softWrap,

    /// optionalParameters: {TextOverflow? overflow} , default:none
    super.overflow,

    /// optionalParameters: {double? textScaleFactor} , default:none
    super.textScaleFactor,

    /// optionalParameters: {int? maxLines} , default:none
    super.maxLines,

    /// optionalParameters: {String? semanticsLabel} , default:none
    super.semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    super.textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , default:none
    super.selectionColor,
  })  : mateParams = {
          'textSpan': _i2.BuilderArg<_i9.InlineSpan>(
            name: 'textSpan',
            init: textSpan,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i4.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'strutStyle': _i2.BuilderArg<_i8.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i5.TextAlign?>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'locale': _i2.BuilderArg<_i5.Locale?>(
            name: 'locale',
            init: locale,
            isNamed: true,
          ),
          'softWrap': _i2.BuilderArg<bool?>(
            name: 'softWrap',
            init: softWrap,
            isNamed: true,
          ),
          'overflow': _i2.BuilderArg<_i6.TextOverflow?>(
            name: 'overflow',
            init: overflow,
            isNamed: true,
          ),
          'textScaleFactor': _i2.BuilderArg<double?>(
            name: 'textScaleFactor',
            init: textScaleFactor,
            isNamed: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
          ),
          'semanticsLabel': _i2.BuilderArg<String?>(
            name: 'semanticsLabel',
            init: semanticsLabel,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i6.TextWidthBasis?>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i5.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'selectionColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectionColor',
            init: selectionColor,
            isNamed: true,
          ),
        },
        super.rich() {
    mateBuilderName = 'Text.rich';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Text$Mate.rich(
          p.get('textSpan').value,
          key: p.get('key').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          locale: p.get('locale').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionColor: p.get('selectionColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
