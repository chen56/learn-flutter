// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/text.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/inline_span.dart';

/// class DefaultTextStyle extends InheritedTheme
class DefaultTextStyle$Mate extends DefaultTextStyle with Mate {
  /// DefaultTextStyle DefaultTextStyle({Key? key, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, required Widget child})
  DefaultTextStyle$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required TextStyle style} , hasDefaultValue:false, defaultValueCode:null
    required TextStyle style,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {bool softWrap = true} , hasDefaultValue:true, defaultValueCode:true
    required bool softWrap,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , hasDefaultValue:true, defaultValueCode:TextOverflow.clip
    required TextOverflow overflow,

    /// optionalParameters: {int? maxLines} , hasDefaultValue:false, defaultValueCode:null
    int? maxLines,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , hasDefaultValue:true, defaultValueCode:TextWidthBasis.parent
    required TextWidthBasis textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          style: style,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {
    mateBuilder = (p) => DefaultTextStyle$Mate(
          key: p.get('key').build(),
          style: p.get('style').build(),
          textAlign: p.get('textAlign').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          maxLines: p.get('maxLines').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          child: p.get('child').build(),
        );
    matePut('key', key);
    matePut('style', style);
    matePut('textAlign', textAlign);
    matePut('softWrap', softWrap);
    matePut('overflow', overflow);
    matePut('maxLines', maxLines);
    matePut('textWidthBasis', textWidthBasis);
    matePut('textHeightBehavior', textHeightBehavior);
    matePut('child', child);
  }

  /// DefaultTextStyle DefaultTextStyle.fallback({Key? key})
  DefaultTextStyle$Mate.fallback(
      {
      /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
      Key? key})
      : super.fallback(key: key) {
    mateBuilder = (p) => DefaultTextStyle$Mate.fallback(key: p.get('key').build());
    matePut('key', key);
  }
}

/// class DefaultTextHeightBehavior extends InheritedTheme
class DefaultTextHeightBehavior$Mate extends DefaultTextHeightBehavior with Mate {
  /// DefaultTextHeightBehavior DefaultTextHeightBehavior({Key? key, required TextHeightBehavior textHeightBehavior, required Widget child})
  DefaultTextHeightBehavior$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required TextHeightBehavior textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    required TextHeightBehavior textHeightBehavior,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {
    mateBuilder = (p) => DefaultTextHeightBehavior$Mate(
          key: p.get('key').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          child: p.get('child').build(),
        );
    matePut('key', key);
    matePut('textHeightBehavior', textHeightBehavior);
    matePut('child', child);
  }
}

/// class Text extends StatelessWidget
class Text$Mate extends Text with Mate {
  /// Text Text(String data, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate(
    /// requiredParameters: String data
    String data, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , hasDefaultValue:false, defaultValueCode:null
    Locale? locale,

    /// optionalParameters: {bool? softWrap} , hasDefaultValue:false, defaultValueCode:null
    bool? softWrap,

    /// optionalParameters: {TextOverflow? overflow} , hasDefaultValue:false, defaultValueCode:null
    TextOverflow? overflow,

    /// optionalParameters: {double? textScaleFactor} , hasDefaultValue:false, defaultValueCode:null
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines} , hasDefaultValue:false, defaultValueCode:null
    int? maxLines,

    /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , hasDefaultValue:false, defaultValueCode:null
    TextWidthBasis? textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectionColor,
  }) : super(
          data,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {
    mateBuilder = (p) => Text$Mate(
          p.get('data').value,
          key: p.get('key').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          locale: p.get('locale').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionColor: p.get('selectionColor').build(),
        );
    matePut('data', data);
    matePut('key', key);
    matePut('style', style);
    matePut('strutStyle', strutStyle);
    matePut('textAlign', textAlign);
    matePut('textDirection', textDirection);
    matePut('locale', locale);
    matePut('softWrap', softWrap);
    matePut('overflow', overflow);
    matePut('textScaleFactor', textScaleFactor);
    matePut('maxLines', maxLines);
    matePut('semanticsLabel', semanticsLabel);
    matePut('textWidthBasis', textWidthBasis);
    matePut('textHeightBehavior', textHeightBehavior);
    matePut('selectionColor', selectionColor);
  }

  /// Text Text.rich(InlineSpan textSpan, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate.rich(
    /// requiredParameters: InlineSpan textSpan
    InlineSpan textSpan, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , hasDefaultValue:false, defaultValueCode:null
    Locale? locale,

    /// optionalParameters: {bool? softWrap} , hasDefaultValue:false, defaultValueCode:null
    bool? softWrap,

    /// optionalParameters: {TextOverflow? overflow} , hasDefaultValue:false, defaultValueCode:null
    TextOverflow? overflow,

    /// optionalParameters: {double? textScaleFactor} , hasDefaultValue:false, defaultValueCode:null
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines} , hasDefaultValue:false, defaultValueCode:null
    int? maxLines,

    /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , hasDefaultValue:false, defaultValueCode:null
    TextWidthBasis? textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectionColor,
  }) : super.rich(
          textSpan,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {
    mateBuilder = (p) => Text$Mate.rich(
          p.get('textSpan').value,
          key: p.get('key').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          locale: p.get('locale').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          maxLines: p.get('maxLines').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionColor: p.get('selectionColor').build(),
        );
    matePut('textSpan', textSpan);
    matePut('key', key);
    matePut('style', style);
    matePut('strutStyle', strutStyle);
    matePut('textAlign', textAlign);
    matePut('textDirection', textDirection);
    matePut('locale', locale);
    matePut('softWrap', softWrap);
    matePut('overflow', overflow);
    matePut('textScaleFactor', textScaleFactor);
    matePut('maxLines', maxLines);
    matePut('semanticsLabel', semanticsLabel);
    matePut('textWidthBasis', textWidthBasis);
    matePut('textHeightBehavior', textHeightBehavior);
    matePut('selectionColor', selectionColor);
  }
}
