// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/form.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/navigator.dart' as _i5;
import 'dart:ui' as _i6;

/// class Form extends StatefulWidget
class Form$Mate extends _i1.Form with _i2.Mate {
  /// Form Form({Key? key, required Widget child, Future<bool> Function()? onWillPop, void Function()? onChanged, AutovalidateMode? autovalidateMode})
  Form$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,

    /// optionalParameters: {Future<bool> Function()? onWillPop} , default:none
    _i5.WillPopCallback? onWillPop,

    /// optionalParameters: {void Function()? onChanged} , default:none
    _i6.VoidCallback? onChanged,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , default:none
    _i1.AutovalidateMode? autovalidateMode,
  }) : super(
          key: key,
          child: child,
          onWillPop: onWillPop,
          onChanged: onChanged,
          autovalidateMode: autovalidateMode,
        ) {
    mateBuilderName = 'Form';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Form$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          onWillPop: p.get('onWillPop').build(),
          onChanged: p.get('onChanged').build(),
          autovalidateMode: p.get('autovalidateMode').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'onWillPop',
      onWillPop,
      isNamed: true,
    );
    mateUse(
      'onChanged',
      onChanged,
      isNamed: true,
    );
    mateUse(
      'autovalidateMode',
      autovalidateMode,
      isNamed: true,
    );
  }
}

/// class FormField<T> extends StatefulWidget
class FormField$Mate<T> extends _i1.FormField<T> with _i2.Mate {
  /// FormField<T> FormField({Key? key, required Widget Function(FormFieldState<T>) builder, void Function(T?)? onSaved, String? Function(T?)? validator, T? initialValue, bool enabled = true, AutovalidateMode? autovalidateMode, String? restorationId})
  FormField$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget Function(FormFieldState<T>) builder} , default:none
    required _i1.FormFieldBuilder<T> builder,

    /// optionalParameters: {void Function(T?)? onSaved} , default:none
    _i1.FormFieldSetter<T>? onSaved,

    /// optionalParameters: {String? Function(T?)? validator} , default:none
    _i1.FormFieldValidator<T>? validator,

    /// optionalParameters: {T? initialValue} , default:none
    T? initialValue,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , default:none
    _i1.AutovalidateMode? autovalidateMode,

    /// optionalParameters: {String? restorationId} , default:none
    String? restorationId,
  }) : super(
          key: key,
          builder: builder,
          onSaved: onSaved,
          validator: validator,
          initialValue: initialValue,
          enabled: enabled,
          autovalidateMode: autovalidateMode,
          restorationId: restorationId,
        ) {
    mateBuilderName = 'FormField';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FormField$Mate<T>(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
          onSaved: p.get('onSaved').build(),
          validator: p.get('validator').build(),
          initialValue: p.get('initialValue').build(),
          enabled: p.get('enabled').build(),
          autovalidateMode: p.get('autovalidateMode').build(),
          restorationId: p.get('restorationId').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'builder',
      builder,
      isNamed: true,
    );
    mateUse(
      'onSaved',
      onSaved,
      isNamed: true,
    );
    mateUse(
      'validator',
      validator,
      isNamed: true,
    );
    mateUse(
      'initialValue',
      initialValue,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'autovalidateMode',
      autovalidateMode,
      isNamed: true,
    );
    mateUse(
      'restorationId',
      restorationId,
      isNamed: true,
    );
  }
}
