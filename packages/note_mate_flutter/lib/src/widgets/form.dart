// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/form.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'package:flutter/src/widgets/navigator.dart';import 'dart:ui';import 'dart:core';import 'package:note/mate.dart' show Mate;/// class Form extends StatefulWidget
class Form$Mate extends Form with Mate {/// Form Form({Key? key, required Widget child, Future<bool> Function()? onWillPop, void Function()? onChanged, AutovalidateMode? autovalidateMode})
Form$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, /// optionalParameters: {Future<bool> Function()? onWillPop} , hasDefaultValue:false, defaultValueCode:null
WillPopCallback? onWillPop, /// optionalParameters: {void Function()? onChanged} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onChanged, /// optionalParameters: {AutovalidateMode? autovalidateMode} , hasDefaultValue:false, defaultValueCode:null
AutovalidateMode? autovalidateMode, }) : super(key: key, child: child, onWillPop: onWillPop, onChanged: onChanged, autovalidateMode: autovalidateMode, ) { mateBuilder = (p) => Form$Mate(key: p.get('key').build(), child: p.get('child').build(), onWillPop: p.get('onWillPop').build(), onChanged: p.get('onChanged').build(), autovalidateMode: p.get('autovalidateMode').build(), );
matePut('key', key);
matePut('child', child);
matePut('onWillPop', onWillPop);
matePut('onChanged', onChanged);
matePut('autovalidateMode', autovalidateMode); }

 }
/// class FormField<T> extends StatefulWidget
class FormField$Mate<T> extends FormField<T> with Mate {/// FormField<T> FormField({Key? key, required Widget Function(FormFieldState<T>) builder, void Function(T?)? onSaved, String? Function(T?)? validator, T? initialValue, bool enabled = true, AutovalidateMode? autovalidateMode, String? restorationId})
FormField$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Widget Function(FormFieldState<T>) builder} , hasDefaultValue:false, defaultValueCode:null
required FormFieldBuilder<T> builder, /// optionalParameters: {void Function(T?)? onSaved} , hasDefaultValue:false, defaultValueCode:null
FormFieldSetter<T>? onSaved, /// optionalParameters: {String? Function(T?)? validator} , hasDefaultValue:false, defaultValueCode:null
FormFieldValidator<T>? validator, /// optionalParameters: {T? initialValue} , hasDefaultValue:false, defaultValueCode:null
T? initialValue, /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
required bool enabled, /// optionalParameters: {AutovalidateMode? autovalidateMode} , hasDefaultValue:false, defaultValueCode:null
AutovalidateMode? autovalidateMode, /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
String? restorationId, }) : super(key: key, builder: builder, onSaved: onSaved, validator: validator, initialValue: initialValue, enabled: enabled, autovalidateMode: autovalidateMode, restorationId: restorationId, ) { mateBuilder = (p) => FormField$Mate<T>(key: p.get('key').build(), builder: p.get('builder').build(), onSaved: p.get('onSaved').build(), validator: p.get('validator').build(), initialValue: p.get('initialValue').build(), enabled: p.get('enabled').build(), autovalidateMode: p.get('autovalidateMode').build(), restorationId: p.get('restorationId').build(), );
matePut('key', key);
matePut('builder', builder);
matePut('onSaved', onSaved);
matePut('validator', validator);
matePut('initialValue', initialValue);
matePut('enabled', enabled);
matePut('autovalidateMode', autovalidateMode);
matePut('restorationId', restorationId); }

 }
