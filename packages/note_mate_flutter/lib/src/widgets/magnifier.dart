// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/magnifier.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/animation/animation_controller.dart';
import 'package:flutter/src/painting/box_shadow.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class MagnifierInfo
class MagnifierInfo$Mate extends MagnifierInfo with Mate {
  /// MagnifierInfo MagnifierInfo({required Offset globalGesturePosition, required Rect caretRect, required Rect fieldBounds, required Rect currentLineBoundaries})
  MagnifierInfo$Mate({
    /// optionalParameters: {required Offset globalGesturePosition} , defaultValue:none
    required Offset globalGesturePosition,

    /// optionalParameters: {required Rect caretRect} , defaultValue:none
    required Rect caretRect,

    /// optionalParameters: {required Rect fieldBounds} , defaultValue:none
    required Rect fieldBounds,

    /// optionalParameters: {required Rect currentLineBoundaries} , defaultValue:none
    required Rect currentLineBoundaries,
  }) : super(
          globalGesturePosition: globalGesturePosition,
          caretRect: caretRect,
          fieldBounds: fieldBounds,
          currentLineBoundaries: currentLineBoundaries,
        ) {
    mateBuilder = (p) => MagnifierInfo$Mate(
          globalGesturePosition: p.get('globalGesturePosition').build(),
          caretRect: p.get('caretRect').build(),
          fieldBounds: p.get('fieldBounds').build(),
          currentLineBoundaries: p.get('currentLineBoundaries').build(),
        );
    mateDeclare('globalGesturePosition', globalGesturePosition);
    mateDeclare('caretRect', caretRect);
    mateDeclare('fieldBounds', fieldBounds);
    mateDeclare('currentLineBoundaries', currentLineBoundaries);
  }
}

/// class TextMagnifierConfiguration
class TextMagnifierConfiguration$Mate extends TextMagnifierConfiguration with Mate {
  /// TextMagnifierConfiguration TextMagnifierConfiguration({Widget? Function(BuildContext, MagnifierController, ValueNotifier<MagnifierInfo>)? magnifierBuilder, bool shouldDisplayHandlesInMagnifier = true})
  TextMagnifierConfiguration$Mate({
    /// optionalParameters: {Widget? Function(BuildContext, MagnifierController, ValueNotifier<MagnifierInfo>)? magnifierBuilder} , defaultValue:none
    MagnifierBuilder? magnifierBuilder,

    /// optionalParameters: {bool shouldDisplayHandlesInMagnifier = true} , defaultValue:Literal
    bool shouldDisplayHandlesInMagnifier = true,
  }) : super(
          magnifierBuilder: magnifierBuilder,
          shouldDisplayHandlesInMagnifier: shouldDisplayHandlesInMagnifier,
        ) {
    mateBuilder = (p) => TextMagnifierConfiguration$Mate(
          magnifierBuilder: p.get('magnifierBuilder').build(),
          shouldDisplayHandlesInMagnifier: p.get('shouldDisplayHandlesInMagnifier').build(),
        );
    mateDeclare('magnifierBuilder', magnifierBuilder);
    mateDeclare('shouldDisplayHandlesInMagnifier', shouldDisplayHandlesInMagnifier);
  }
}

/// class MagnifierController
class MagnifierController$Mate extends MagnifierController with Mate {
  /// MagnifierController MagnifierController({AnimationController? animationController})
  MagnifierController$Mate(
      {
      /// optionalParameters: {AnimationController? animationController} , defaultValue:none
      AnimationController? animationController})
      : super(animationController: animationController) {
    mateBuilder = (p) => MagnifierController$Mate(animationController: p.get('animationController').build());
    mateDeclare('animationController', animationController);
  }
}

/// class MagnifierDecoration extends ShapeDecoration
class MagnifierDecoration$Mate extends MagnifierDecoration with Mate {
  /// MagnifierDecoration MagnifierDecoration({double opacity = 1, List<BoxShadow>? shadows, ShapeBorder shape = const RoundedRectangleBorder()})
  MagnifierDecoration$Mate({
    /// optionalParameters: {double opacity = 1} , defaultValue:Literal
    double opacity = 1,

    /// optionalParameters: {List<BoxShadow>? shadows} , defaultValue:none
    List<BoxShadow>? shadows,

    /// optionalParameters: {ShapeBorder shape = const RoundedRectangleBorder()} , defaultValue:none
    required ShapeBorder shape,
  }) : super(
          opacity: opacity,
          shadows: shadows,
          shape: shape,
        ) {
    mateBuilder = (p) => MagnifierDecoration$Mate(
          opacity: p.get('opacity').build(),
          shadows: p.get('shadows').build(),
          shape: p.get('shape').build(),
        );
    mateDeclare('opacity', opacity);
    mateDeclare('shadows', shadows);
    mateDeclare('shape', shape);
  }
}

/// class RawMagnifier extends StatelessWidget
class RawMagnifier$Mate extends RawMagnifier with Mate {
  /// RawMagnifier RawMagnifier({Key? key, Widget? child, MagnifierDecoration decoration = const MagnifierDecoration(), Offset focalPointOffset = Offset.zero, double magnificationScale = 1, required Size size})
  RawMagnifier$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Widget? child} , defaultValue:none
    Widget? child,

    /// optionalParameters: {MagnifierDecoration decoration = const MagnifierDecoration()} , defaultValue:unprocessed
    required MagnifierDecoration decoration,

    /// optionalParameters: {Offset focalPointOffset = Offset.zero} , defaultValue:unprocessed
    required Offset focalPointOffset,

    /// optionalParameters: {double magnificationScale = 1} , defaultValue:Literal
    double magnificationScale = 1,

    /// optionalParameters: {required Size size} , defaultValue:none
    required Size size,
  }) : super(
          key: key,
          child: child,
          decoration: decoration,
          focalPointOffset: focalPointOffset,
          magnificationScale: magnificationScale,
          size: size,
        ) {
    mateBuilder = (p) => RawMagnifier$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          decoration: p.get('decoration').build(),
          focalPointOffset: p.get('focalPointOffset').build(),
          magnificationScale: p.get('magnificationScale').build(),
          size: p.get('size').build(),
        );
    mateDeclare('key', key);
    mateDeclare('child', child);
    mateDeclare('decoration', decoration);
    mateDeclare('focalPointOffset', focalPointOffset);
    mateDeclare('magnificationScale', magnificationScale);
    mateDeclare('size', size);
  }
}
