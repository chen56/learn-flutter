// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/magnifier.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/animation/animation_controller.dart' as _i4;
import 'package:flutter/src/painting/box_shadow.dart' as _i5;
import 'package:flutter/src/painting/borders.dart' as _i6;
import 'package:flutter/src/foundation/key.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i8;
import 'package:flutter/animation.dart' as _i9;

/// class MagnifierInfo
class MagnifierInfo$Mate extends _i1.MagnifierInfo with _i2.Mate {
  /// MagnifierInfo MagnifierInfo({required Offset globalGesturePosition, required Rect caretRect, required Rect fieldBounds, required Rect currentLineBoundaries})
  MagnifierInfo$Mate({
    /// optionalParameters: {required Offset globalGesturePosition} , default:none
    required _i3.Offset globalGesturePosition,

    /// optionalParameters: {required Rect caretRect} , default:none
    required _i3.Rect caretRect,

    /// optionalParameters: {required Rect fieldBounds} , default:none
    required _i3.Rect fieldBounds,

    /// optionalParameters: {required Rect currentLineBoundaries} , default:none
    required _i3.Rect currentLineBoundaries,
  }) : super(
          globalGesturePosition: globalGesturePosition,
          caretRect: caretRect,
          fieldBounds: fieldBounds,
          currentLineBoundaries: currentLineBoundaries,
        ) {
    mateBuilderName = 'MagnifierInfo';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MagnifierInfo$Mate(
          globalGesturePosition: p.get('globalGesturePosition').build(),
          caretRect: p.get('caretRect').build(),
          fieldBounds: p.get('fieldBounds').build(),
          currentLineBoundaries: p.get('currentLineBoundaries').build(),
        );
    mateUse(
      'globalGesturePosition',
      globalGesturePosition,
      isNamed: true,
    );
    mateUse(
      'caretRect',
      caretRect,
      isNamed: true,
    );
    mateUse(
      'fieldBounds',
      fieldBounds,
      isNamed: true,
    );
    mateUse(
      'currentLineBoundaries',
      currentLineBoundaries,
      isNamed: true,
    );
  }
}

/// class TextMagnifierConfiguration
class TextMagnifierConfiguration$Mate extends _i1.TextMagnifierConfiguration with _i2.Mate {
  /// TextMagnifierConfiguration TextMagnifierConfiguration({Widget? Function(BuildContext, MagnifierController, ValueNotifier<MagnifierInfo>)? magnifierBuilder, bool shouldDisplayHandlesInMagnifier = true})
  TextMagnifierConfiguration$Mate({
    /// optionalParameters: {Widget? Function(BuildContext, MagnifierController, ValueNotifier<MagnifierInfo>)? magnifierBuilder} , default:none
    _i1.MagnifierBuilder? magnifierBuilder,

    /// optionalParameters: {bool shouldDisplayHandlesInMagnifier = true} , default:processed=BooleanLiteralImpl
    bool shouldDisplayHandlesInMagnifier = true,
  }) : super(
          magnifierBuilder: magnifierBuilder,
          shouldDisplayHandlesInMagnifier: shouldDisplayHandlesInMagnifier,
        ) {
    mateBuilderName = 'TextMagnifierConfiguration';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextMagnifierConfiguration$Mate(
          magnifierBuilder: p.get('magnifierBuilder').build(),
          shouldDisplayHandlesInMagnifier: p.get('shouldDisplayHandlesInMagnifier').build(),
        );
    mateUse(
      'magnifierBuilder',
      magnifierBuilder,
      isNamed: true,
    );
    mateUse(
      'shouldDisplayHandlesInMagnifier',
      shouldDisplayHandlesInMagnifier,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class MagnifierController
class MagnifierController$Mate extends _i1.MagnifierController with _i2.Mate {
  /// MagnifierController MagnifierController({AnimationController? animationController})
  MagnifierController$Mate(
      {
      /// optionalParameters: {AnimationController? animationController} , default:none
      _i4.AnimationController? animationController})
      : super(animationController: animationController) {
    mateBuilderName = 'MagnifierController';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MagnifierController$Mate(animationController: p.get('animationController').build());
    mateUse(
      'animationController',
      animationController,
      isNamed: true,
    );
  }
}

/// class MagnifierDecoration extends ShapeDecoration
class MagnifierDecoration$Mate extends _i1.MagnifierDecoration with _i2.Mate {
  /// MagnifierDecoration MagnifierDecoration({double opacity = 1, List<BoxShadow>? shadows, ShapeBorder shape = const RoundedRectangleBorder()})
  MagnifierDecoration$Mate({
    /// optionalParameters: {double opacity = 1} , default:processed=IntegerLiteralImpl
    double opacity = 1,

    /// optionalParameters: {List<BoxShadow>? shadows} , default:none
    List<_i5.BoxShadow>? shadows,

    /// optionalParameters: {ShapeBorder shape = const RoundedRectangleBorder()} , default:unprocessed=InstanceCreationExpressionImpl
    required _i6.ShapeBorder shape,
  }) : super(
          opacity: opacity,
          shadows: shadows,
          shape: shape,
        ) {
    mateBuilderName = 'MagnifierDecoration';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MagnifierDecoration$Mate(
          opacity: p.get('opacity').build(),
          shadows: p.get('shadows').build(),
          shape: p.get('shape').build(),
        );
    mateUse(
      'opacity',
      opacity,
      isNamed: true,
      defaultValue: 1,
    );
    mateUse(
      'shadows',
      shadows,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
  }
}

/// class RawMagnifier extends StatelessWidget
class RawMagnifier$Mate extends _i1.RawMagnifier with _i2.Mate {
  /// RawMagnifier RawMagnifier({Key? key, Widget? child, MagnifierDecoration decoration = const MagnifierDecoration(), Offset focalPointOffset = Offset.zero, double magnificationScale = 1, required Size size})
  RawMagnifier$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i7.Key? key,

    /// optionalParameters: {Widget? child} , default:none
    _i8.Widget? child,

    /// optionalParameters: {MagnifierDecoration decoration = const MagnifierDecoration()} , default:unprocessed=InstanceCreationExpressionImpl
    required _i1.MagnifierDecoration decoration,

    /// optionalParameters: {Offset focalPointOffset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    _i3.Offset focalPointOffset = _i9.Offset.zero,

    /// optionalParameters: {double magnificationScale = 1} , default:processed=IntegerLiteralImpl
    double magnificationScale = 1,

    /// optionalParameters: {required Size size} , default:none
    required _i3.Size size,
  }) : super(
          key: key,
          child: child,
          decoration: decoration,
          focalPointOffset: focalPointOffset,
          magnificationScale: magnificationScale,
          size: size,
        ) {
    mateBuilderName = 'RawMagnifier';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RawMagnifier$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          decoration: p.get('decoration').build(),
          focalPointOffset: p.get('focalPointOffset').build(),
          magnificationScale: p.get('magnificationScale').build(),
          size: p.get('size').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'decoration',
      decoration,
      isNamed: true,
    );
    mateUse(
      'focalPointOffset',
      focalPointOffset,
      isNamed: true,
      defaultValue: _i9.Offset.zero,
    );
    mateUse(
      'magnificationScale',
      magnificationScale,
      isNamed: true,
      defaultValue: 1,
    );
    mateUse(
      'size',
      size,
      isNamed: true,
    );
  }
}
