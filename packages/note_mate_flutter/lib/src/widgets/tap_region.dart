// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/tap_region.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/rendering/proxy_box.dart' as _i5;
import 'package:flutter/cupertino.dart' as _i6;

/// class TapRegionSurface extends SingleChildRenderObjectWidget
class TapRegionSurface$Mate extends _i1.TapRegionSurface with _i2.Mate {
  /// TapRegionSurface TapRegionSurface({Key? key, required Widget child})
  TapRegionSurface$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateBuilderName = 'TapRegionSurface';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TapRegionSurface$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class TapRegion extends SingleChildRenderObjectWidget
class TapRegion$Mate extends _i1.TapRegion with _i2.Mate {
  /// TapRegion TapRegion({Key? key, required Widget? child, bool enabled = true, HitTestBehavior behavior = HitTestBehavior.deferToChild, void Function(PointerDownEvent)? onTapOutside, void Function(PointerDownEvent)? onTapInside, Object? groupId, String? debugLabel})
  TapRegion$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget? child} , default:none
    required _i4.Widget? child,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    _i5.HitTestBehavior behavior = _i6.HitTestBehavior.deferToChild,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , default:none
    _i1.TapRegionCallback? onTapOutside,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapInside} , default:none
    _i1.TapRegionCallback? onTapInside,

    /// optionalParameters: {Object? groupId} , default:none
    Object? groupId,

    /// optionalParameters: {String? debugLabel} , default:none
    String? debugLabel,
  }) : super(
          key: key,
          child: child,
          enabled: enabled,
          behavior: behavior,
          onTapOutside: onTapOutside,
          onTapInside: onTapInside,
          groupId: groupId,
          debugLabel: debugLabel,
        ) {
    mateBuilderName = 'TapRegion';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TapRegion$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          enabled: p.get('enabled').build(),
          behavior: p.get('behavior').build(),
          onTapOutside: p.get('onTapOutside').build(),
          onTapInside: p.get('onTapInside').build(),
          groupId: p.get('groupId').build(),
          debugLabel: p.get('debugLabel').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
      defaultValue: _i6.HitTestBehavior.deferToChild,
    );
    mateUse(
      'onTapOutside',
      onTapOutside,
      isNamed: true,
    );
    mateUse(
      'onTapInside',
      onTapInside,
      isNamed: true,
    );
    mateUse(
      'groupId',
      groupId,
      isNamed: true,
    );
    mateUse(
      'debugLabel',
      debugLabel,
      isNamed: true,
    );
  }
}

/// class RenderTapRegion extends RenderProxyBoxWithHitTestBehavior
class RenderTapRegion$Mate extends _i1.RenderTapRegion with _i2.Mate {
  /// RenderTapRegion RenderTapRegion({TapRegionRegistry? registry, bool enabled = true, void Function(PointerDownEvent)? onTapOutside, void Function(PointerDownEvent)? onTapInside, HitTestBehavior behavior = HitTestBehavior.deferToChild, Object? groupId, String? debugLabel})
  RenderTapRegion$Mate({
    /// optionalParameters: {TapRegionRegistry? registry} , default:none
    _i1.TapRegionRegistry? registry,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , default:none
    _i1.TapRegionCallback? onTapOutside,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapInside} , default:none
    _i1.TapRegionCallback? onTapInside,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    _i5.HitTestBehavior behavior = _i6.HitTestBehavior.deferToChild,

    /// optionalParameters: {Object? groupId} , default:none
    Object? groupId,

    /// optionalParameters: {String? debugLabel} , default:none
    String? debugLabel,
  }) : super(
          registry: registry,
          enabled: enabled,
          onTapOutside: onTapOutside,
          onTapInside: onTapInside,
          behavior: behavior,
          groupId: groupId,
          debugLabel: debugLabel,
        ) {
    mateBuilderName = 'RenderTapRegion';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RenderTapRegion$Mate(
          registry: p.get('registry').build(),
          enabled: p.get('enabled').build(),
          onTapOutside: p.get('onTapOutside').build(),
          onTapInside: p.get('onTapInside').build(),
          behavior: p.get('behavior').build(),
          groupId: p.get('groupId').build(),
          debugLabel: p.get('debugLabel').build(),
        );
    mateUse(
      'registry',
      registry,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onTapOutside',
      onTapOutside,
      isNamed: true,
    );
    mateUse(
      'onTapInside',
      onTapInside,
      isNamed: true,
    );
    mateUse(
      'behavior',
      behavior,
      isNamed: true,
      defaultValue: _i6.HitTestBehavior.deferToChild,
    );
    mateUse(
      'groupId',
      groupId,
      isNamed: true,
    );
    mateUse(
      'debugLabel',
      debugLabel,
      isNamed: true,
    );
  }
}

/// class TextFieldTapRegion extends TapRegion
class TextFieldTapRegion$Mate extends _i1.TextFieldTapRegion with _i2.Mate {
  /// TextFieldTapRegion TextFieldTapRegion({Key? key, required Widget? child, bool enabled = true, void Function(PointerDownEvent)? onTapOutside, void Function(PointerDownEvent)? onTapInside, String? debugLabel})
  TextFieldTapRegion$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Widget? child} , default:none
    required _i4.Widget? child,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , default:none
    _i1.TapRegionCallback? onTapOutside,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapInside} , default:none
    _i1.TapRegionCallback? onTapInside,

    /// optionalParameters: {String? debugLabel} , default:none
    String? debugLabel,
  }) : super(
          key: key,
          child: child,
          enabled: enabled,
          onTapOutside: onTapOutside,
          onTapInside: onTapInside,
          debugLabel: debugLabel,
        ) {
    mateBuilderName = 'TextFieldTapRegion';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextFieldTapRegion$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          enabled: p.get('enabled').build(),
          onTapOutside: p.get('onTapOutside').build(),
          onTapInside: p.get('onTapInside').build(),
          debugLabel: p.get('debugLabel').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onTapOutside',
      onTapOutside,
      isNamed: true,
    );
    mateUse(
      'onTapInside',
      onTapInside,
      isNamed: true,
    );
    mateUse(
      'debugLabel',
      debugLabel,
      isNamed: true,
    );
  }
}
