// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/focus_traversal.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/focus_manager.dart' as _i5;

/// class NumericFocusOrder extends FocusOrder
class NumericFocusOrder$Mate extends _i1.NumericFocusOrder with _i2.Mate {
  /// NumericFocusOrder NumericFocusOrder(double order)
  NumericFocusOrder$Mate(

      /// requiredParameters: double order
      double order)
      : super(order) {
    mateBuilderName = 'NumericFocusOrder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => NumericFocusOrder$Mate(p.get('order').value);
    mateUse(
      'order',
      order,
      isNamed: false,
    );
  }
}

/// class LexicalFocusOrder extends FocusOrder
class LexicalFocusOrder$Mate extends _i1.LexicalFocusOrder with _i2.Mate {
  /// LexicalFocusOrder LexicalFocusOrder(String order)
  LexicalFocusOrder$Mate(

      /// requiredParameters: String order
      String order)
      : super(order) {
    mateBuilderName = 'LexicalFocusOrder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LexicalFocusOrder$Mate(p.get('order').value);
    mateUse(
      'order',
      order,
      isNamed: false,
    );
  }
}

/// class OrderedTraversalPolicy extends FocusTraversalPolicy with DirectionalFocusTraversalPolicyMixin
class OrderedTraversalPolicy$Mate extends _i1.OrderedTraversalPolicy with _i2.Mate {
  /// OrderedTraversalPolicy OrderedTraversalPolicy({FocusTraversalPolicy? secondary})
  OrderedTraversalPolicy$Mate(
      {
      /// optionalParameters: {FocusTraversalPolicy? secondary} , default:none
      _i1.FocusTraversalPolicy? secondary})
      : super(secondary: secondary) {
    mateBuilderName = 'OrderedTraversalPolicy';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => OrderedTraversalPolicy$Mate(secondary: p.get('secondary').build());
    mateUse(
      'secondary',
      secondary,
      isNamed: true,
    );
  }
}

/// class FocusTraversalOrder extends InheritedWidget
class FocusTraversalOrder$Mate extends _i1.FocusTraversalOrder with _i2.Mate {
  /// FocusTraversalOrder FocusTraversalOrder({Key? key, required FocusOrder order, required Widget child})
  FocusTraversalOrder$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required FocusOrder order} , default:none
    required _i1.FocusOrder order,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,
  }) : super(
          key: key,
          order: order,
          child: child,
        ) {
    mateBuilderName = 'FocusTraversalOrder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FocusTraversalOrder$Mate(
          key: p.get('key').build(),
          order: p.get('order').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'order',
      order,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class FocusTraversalGroup extends StatefulWidget
class FocusTraversalGroup$Mate extends _i1.FocusTraversalGroup with _i2.Mate {
  /// FocusTraversalGroup FocusTraversalGroup({Key? key, FocusTraversalPolicy? policy, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, required Widget child})
  FocusTraversalGroup$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {FocusTraversalPolicy? policy} , default:none
    _i1.FocusTraversalPolicy? policy,

    /// optionalParameters: {bool descendantsAreFocusable = true} , default:processed=BooleanLiteralImpl
    bool descendantsAreFocusable = true,

    /// optionalParameters: {bool descendantsAreTraversable = true} , default:processed=BooleanLiteralImpl
    bool descendantsAreTraversable = true,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,
  }) : super(
          key: key,
          policy: policy,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          child: child,
        ) {
    mateBuilderName = 'FocusTraversalGroup';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FocusTraversalGroup$Mate(
          key: p.get('key').build(),
          policy: p.get('policy').build(),
          descendantsAreFocusable: p.get('descendantsAreFocusable').build(),
          descendantsAreTraversable: p.get('descendantsAreTraversable').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'policy',
      policy,
      isNamed: true,
    );
    mateUse(
      'descendantsAreFocusable',
      descendantsAreFocusable,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'descendantsAreTraversable',
      descendantsAreTraversable,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class RequestFocusIntent extends Intent
class RequestFocusIntent$Mate extends _i1.RequestFocusIntent with _i2.Mate {
  /// RequestFocusIntent RequestFocusIntent(FocusNode focusNode)
  RequestFocusIntent$Mate(

      /// requiredParameters: FocusNode focusNode
      _i5.FocusNode focusNode)
      : super(focusNode) {
    mateBuilderName = 'RequestFocusIntent';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RequestFocusIntent$Mate(p.get('focusNode').value);
    mateUse(
      'focusNode',
      focusNode,
      isNamed: false,
    );
  }
}

/// class DirectionalFocusIntent extends Intent
class DirectionalFocusIntent$Mate extends _i1.DirectionalFocusIntent with _i2.Mate {
  /// DirectionalFocusIntent DirectionalFocusIntent(TraversalDirection direction, {bool ignoreTextFields = true})
  DirectionalFocusIntent$Mate(
    /// requiredParameters: TraversalDirection direction
    _i1.TraversalDirection direction, {
    /// optionalParameters: {bool ignoreTextFields = true} , default:processed=BooleanLiteralImpl
    bool ignoreTextFields = true,
  }) : super(
          direction,
          ignoreTextFields: ignoreTextFields,
        ) {
    mateBuilderName = 'DirectionalFocusIntent';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DirectionalFocusIntent$Mate(
          p.get('direction').value,
          ignoreTextFields: p.get('ignoreTextFields').build(),
        );
    mateUse(
      'direction',
      direction,
      isNamed: false,
    );
    mateUse(
      'ignoreTextFields',
      ignoreTextFields,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class ExcludeFocusTraversal extends StatelessWidget
class ExcludeFocusTraversal$Mate extends _i1.ExcludeFocusTraversal with _i2.Mate {
  /// ExcludeFocusTraversal ExcludeFocusTraversal({Key? key, bool excluding = true, required Widget child})
  ExcludeFocusTraversal$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {bool excluding = true} , default:processed=BooleanLiteralImpl
    bool excluding = true,

    /// optionalParameters: {required Widget child} , default:none
    required _i4.Widget child,
  }) : super(
          key: key,
          excluding: excluding,
          child: child,
        ) {
    mateBuilderName = 'ExcludeFocusTraversal';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ExcludeFocusTraversal$Mate(
          key: p.get('key').build(),
          excluding: p.get('excluding').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'excluding',
      excluding,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
