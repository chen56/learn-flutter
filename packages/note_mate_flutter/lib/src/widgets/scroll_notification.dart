// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/scroll_metrics.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/drag_details.dart';
import 'dart:core';
import 'package:flutter/src/rendering/viewport_offset.dart';

/// class ScrollStartNotification extends ScrollNotification
class ScrollStartNotification$Mate extends ScrollStartNotification with Mate {
  /// ScrollStartNotification ScrollStartNotification({required ScrollMetrics metrics, required BuildContext? context, DragStartDetails? dragDetails})
  ScrollStartNotification$Mate({
    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required ScrollMetrics metrics,

    /// optionalParameters: {required BuildContext? context} , default:none
    required BuildContext? context,

    /// optionalParameters: {DragStartDetails? dragDetails} , default:none
    DragStartDetails? dragDetails,
  }) : super(
          metrics: metrics,
          context: context,
          dragDetails: dragDetails,
        ) {
    mateCreateName = 'ScrollStartNotification';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollStartNotification$Mate(
          metrics: p.get('metrics').build(),
          context: p.get('context').build(),
          dragDetails: p.get('dragDetails').build(),
        );
    mateUse(
      'metrics',
      metrics,
      isNamed: true,
    );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'dragDetails',
      dragDetails,
      isNamed: true,
    );
  }
}

/// class ScrollUpdateNotification extends ScrollNotification
class ScrollUpdateNotification$Mate extends ScrollUpdateNotification with Mate {
  /// ScrollUpdateNotification ScrollUpdateNotification({required ScrollMetrics metrics, required BuildContext context, DragUpdateDetails? dragDetails, double? scrollDelta, int? depth})
  ScrollUpdateNotification$Mate({
    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required ScrollMetrics metrics,

    /// optionalParameters: {required BuildContext context} , default:none
    required BuildContext context,

    /// optionalParameters: {DragUpdateDetails? dragDetails} , default:none
    DragUpdateDetails? dragDetails,

    /// optionalParameters: {double? scrollDelta} , default:none
    double? scrollDelta,

    /// optionalParameters: {int? depth} , default:none
    int? depth,
  }) : super(
          metrics: metrics,
          context: context,
          dragDetails: dragDetails,
          scrollDelta: scrollDelta,
          depth: depth,
        ) {
    mateCreateName = 'ScrollUpdateNotification';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollUpdateNotification$Mate(
          metrics: p.get('metrics').build(),
          context: p.get('context').build(),
          dragDetails: p.get('dragDetails').build(),
          scrollDelta: p.get('scrollDelta').build(),
          depth: p.get('depth').build(),
        );
    mateUse(
      'metrics',
      metrics,
      isNamed: true,
    );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'dragDetails',
      dragDetails,
      isNamed: true,
    );
    mateUse(
      'scrollDelta',
      scrollDelta,
      isNamed: true,
    );
    mateUse(
      'depth',
      depth,
      isNamed: true,
    );
  }
}

/// class OverscrollNotification extends ScrollNotification
class OverscrollNotification$Mate extends OverscrollNotification with Mate {
  /// OverscrollNotification OverscrollNotification({required ScrollMetrics metrics, required BuildContext context, DragUpdateDetails? dragDetails, required double overscroll, double velocity = 0.0})
  OverscrollNotification$Mate({
    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required ScrollMetrics metrics,

    /// optionalParameters: {required BuildContext context} , default:none
    required BuildContext context,

    /// optionalParameters: {DragUpdateDetails? dragDetails} , default:none
    DragUpdateDetails? dragDetails,

    /// optionalParameters: {required double overscroll} , default:none
    required double overscroll,

    /// optionalParameters: {double velocity = 0.0} , default:processed=DoubleLiteralImpl
    double velocity = 0.0,
  }) : super(
          metrics: metrics,
          context: context,
          dragDetails: dragDetails,
          overscroll: overscroll,
          velocity: velocity,
        ) {
    mateCreateName = 'OverscrollNotification';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => OverscrollNotification$Mate(
          metrics: p.get('metrics').build(),
          context: p.get('context').build(),
          dragDetails: p.get('dragDetails').build(),
          overscroll: p.get('overscroll').build(),
          velocity: p.get('velocity').build(),
        );
    mateUse(
      'metrics',
      metrics,
      isNamed: true,
    );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'dragDetails',
      dragDetails,
      isNamed: true,
    );
    mateUse(
      'overscroll',
      overscroll,
      isNamed: true,
    );
    mateUse(
      'velocity',
      velocity,
      isNamed: true,
      defaultValue: 0.0,
    );
  }
}

/// class ScrollEndNotification extends ScrollNotification
class ScrollEndNotification$Mate extends ScrollEndNotification with Mate {
  /// ScrollEndNotification ScrollEndNotification({required ScrollMetrics metrics, required BuildContext context, DragEndDetails? dragDetails})
  ScrollEndNotification$Mate({
    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required ScrollMetrics metrics,

    /// optionalParameters: {required BuildContext context} , default:none
    required BuildContext context,

    /// optionalParameters: {DragEndDetails? dragDetails} , default:none
    DragEndDetails? dragDetails,
  }) : super(
          metrics: metrics,
          context: context,
          dragDetails: dragDetails,
        ) {
    mateCreateName = 'ScrollEndNotification';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollEndNotification$Mate(
          metrics: p.get('metrics').build(),
          context: p.get('context').build(),
          dragDetails: p.get('dragDetails').build(),
        );
    mateUse(
      'metrics',
      metrics,
      isNamed: true,
    );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'dragDetails',
      dragDetails,
      isNamed: true,
    );
  }
}

/// class UserScrollNotification extends ScrollNotification
class UserScrollNotification$Mate extends UserScrollNotification with Mate {
  /// UserScrollNotification UserScrollNotification({required ScrollMetrics metrics, required BuildContext context, required ScrollDirection direction})
  UserScrollNotification$Mate({
    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required ScrollMetrics metrics,

    /// optionalParameters: {required BuildContext context} , default:none
    required BuildContext context,

    /// optionalParameters: {required ScrollDirection direction} , default:none
    required ScrollDirection direction,
  }) : super(
          metrics: metrics,
          context: context,
          direction: direction,
        ) {
    mateCreateName = 'UserScrollNotification';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => UserScrollNotification$Mate(
          metrics: p.get('metrics').build(),
          context: p.get('context').build(),
          direction: p.get('direction').build(),
        );
    mateUse(
      'metrics',
      metrics,
      isNamed: true,
    );
    mateUse(
      'context',
      context,
      isNamed: true,
    );
    mateUse(
      'direction',
      direction,
      isNamed: true,
    );
  }
}
