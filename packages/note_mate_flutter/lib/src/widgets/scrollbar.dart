// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scrollbar.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/painting.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';

/// class ScrollbarPainter extends ChangeNotifier implements CustomPainter
class ScrollbarPainter$Mate extends ScrollbarPainter with Mate {
  /// ScrollbarPainter ScrollbarPainter({required Color color, required Animation<double> fadeoutOpacityAnimation, Color trackColor = const Color(0x00000000), Color trackBorderColor = const Color(0x00000000), TextDirection? textDirection, double thickness = _kScrollbarThickness, EdgeInsets padding = EdgeInsets.zero, double mainAxisMargin = 0.0, double crossAxisMargin = 0.0, Radius? radius, Radius? trackRadius, OutlinedBorder? shape, double minLength = _kMinThumbExtent, double? minOverscrollLength, ScrollbarOrientation? scrollbarOrientation, bool ignorePointer = false})
  ScrollbarPainter$Mate({
    /// optionalParameters: {required Color color} , default:none
    required Color color,

    /// optionalParameters: {required Animation<double> fadeoutOpacityAnimation} , default:none
    required Animation<double> fadeoutOpacityAnimation,

    /// optionalParameters: {Color trackColor = const Color(0x00000000)} , default:unprocessed=InstanceCreationExpressionImpl
    required Color trackColor,

    /// optionalParameters: {Color trackBorderColor = const Color(0x00000000)} , default:unprocessed=InstanceCreationExpressionImpl
    required Color trackBorderColor,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    TextDirection? textDirection,

    /// optionalParameters: {double thickness = _kScrollbarThickness} , default:unprocessed=SimpleIdentifierImpl
    required double thickness,

    /// optionalParameters: {EdgeInsets padding = EdgeInsets.zero} , default:processed=PrefixedIdentifierImpl
    EdgeInsets padding = EdgeInsets.zero,

    /// optionalParameters: {double mainAxisMargin = 0.0} , default:processed=DoubleLiteralImpl
    double mainAxisMargin = 0.0,

    /// optionalParameters: {double crossAxisMargin = 0.0} , default:processed=DoubleLiteralImpl
    double crossAxisMargin = 0.0,

    /// optionalParameters: {Radius? radius} , default:none
    Radius? radius,

    /// optionalParameters: {Radius? trackRadius} , default:none
    Radius? trackRadius,

    /// optionalParameters: {OutlinedBorder? shape} , default:none
    OutlinedBorder? shape,

    /// optionalParameters: {double minLength = _kMinThumbExtent} , default:unprocessed=SimpleIdentifierImpl
    required double minLength,

    /// optionalParameters: {double? minOverscrollLength} , default:none
    double? minOverscrollLength,

    /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , default:none
    ScrollbarOrientation? scrollbarOrientation,

    /// optionalParameters: {bool ignorePointer = false} , default:processed=BooleanLiteralImpl
    bool ignorePointer = false,
  }) : super(
          color: color,
          fadeoutOpacityAnimation: fadeoutOpacityAnimation,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          textDirection: textDirection,
          thickness: thickness,
          padding: padding,
          mainAxisMargin: mainAxisMargin,
          crossAxisMargin: crossAxisMargin,
          radius: radius,
          trackRadius: trackRadius,
          shape: shape,
          minLength: minLength,
          minOverscrollLength: minOverscrollLength,
          scrollbarOrientation: scrollbarOrientation,
          ignorePointer: ignorePointer,
        ) {
    mateCreateName = 'ScrollbarPainter';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollbarPainter$Mate(
          color: p.get('color').build(),
          fadeoutOpacityAnimation: p.get('fadeoutOpacityAnimation').build(),
          trackColor: p.get('trackColor').build(),
          trackBorderColor: p.get('trackBorderColor').build(),
          textDirection: p.get('textDirection').build(),
          thickness: p.get('thickness').build(),
          padding: p.get('padding').build(),
          mainAxisMargin: p.get('mainAxisMargin').build(),
          crossAxisMargin: p.get('crossAxisMargin').build(),
          radius: p.get('radius').build(),
          trackRadius: p.get('trackRadius').build(),
          shape: p.get('shape').build(),
          minLength: p.get('minLength').build(),
          minOverscrollLength: p.get('minOverscrollLength').build(),
          scrollbarOrientation: p.get('scrollbarOrientation').build(),
          ignorePointer: p.get('ignorePointer').build(),
        );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'fadeoutOpacityAnimation',
      fadeoutOpacityAnimation,
      isNamed: true,
    );
    mateUse(
      'trackColor',
      trackColor,
      isNamed: true,
    );
    mateUse(
      'trackBorderColor',
      trackBorderColor,
      isNamed: true,
    );
    mateUse(
      'textDirection',
      textDirection,
      isNamed: true,
    );
    mateUse(
      'thickness',
      thickness,
      isNamed: true,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
      defaultValue: EdgeInsets.zero,
    );
    mateUse(
      'mainAxisMargin',
      mainAxisMargin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'crossAxisMargin',
      crossAxisMargin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'radius',
      radius,
      isNamed: true,
    );
    mateUse(
      'trackRadius',
      trackRadius,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'minLength',
      minLength,
      isNamed: true,
    );
    mateUse(
      'minOverscrollLength',
      minOverscrollLength,
      isNamed: true,
    );
    mateUse(
      'scrollbarOrientation',
      scrollbarOrientation,
      isNamed: true,
    );
    mateUse(
      'ignorePointer',
      ignorePointer,
      isNamed: true,
      defaultValue: false,
    );
  }
}

/// class RawScrollbar extends StatefulWidget
class RawScrollbar$Mate extends RawScrollbar with Mate {
  /// RawScrollbar RawScrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, OutlinedBorder? shape, Radius? radius, double? thickness, Color? thumbColor, double minThumbLength = _kMinThumbExtent, double? minOverscrollLength, bool? trackVisibility, Radius? trackRadius, Color? trackColor, Color? trackBorderColor, Duration fadeDuration = _kScrollbarFadeDuration, Duration timeToFade = _kScrollbarTimeToFade, Duration pressDuration = Duration.zero, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, bool? interactive, ScrollbarOrientation? scrollbarOrientation, double mainAxisMargin = 0.0, double crossAxisMargin = 0.0, EdgeInsets? padding, bool? isAlwaysShown})
  RawScrollbar$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,

    /// optionalParameters: {ScrollController? controller} , default:none
    ScrollController? controller,

    /// optionalParameters: {bool? thumbVisibility} , default:none
    bool? thumbVisibility,

    /// optionalParameters: {OutlinedBorder? shape} , default:none
    OutlinedBorder? shape,

    /// optionalParameters: {Radius? radius} , default:none
    Radius? radius,

    /// optionalParameters: {double? thickness} , default:none
    double? thickness,

    /// optionalParameters: {Color? thumbColor} , default:none
    Color? thumbColor,

    /// optionalParameters: {double minThumbLength = _kMinThumbExtent} , default:unprocessed=SimpleIdentifierImpl
    required double minThumbLength,

    /// optionalParameters: {double? minOverscrollLength} , default:none
    double? minOverscrollLength,

    /// optionalParameters: {bool? trackVisibility} , default:none
    bool? trackVisibility,

    /// optionalParameters: {Radius? trackRadius} , default:none
    Radius? trackRadius,

    /// optionalParameters: {Color? trackColor} , default:none
    Color? trackColor,

    /// optionalParameters: {Color? trackBorderColor} , default:none
    Color? trackBorderColor,

    /// optionalParameters: {Duration fadeDuration = _kScrollbarFadeDuration} , default:unprocessed=SimpleIdentifierImpl
    required Duration fadeDuration,

    /// optionalParameters: {Duration timeToFade = _kScrollbarTimeToFade} , default:unprocessed=SimpleIdentifierImpl
    required Duration timeToFade,

    /// optionalParameters: {Duration pressDuration = Duration.zero} , default:processed=PrefixedIdentifierImpl
    Duration pressDuration = Duration.zero,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , default:unprocessed=SimpleIdentifierImpl
    required ScrollNotificationPredicate notificationPredicate,

    /// optionalParameters: {bool? interactive} , default:none
    bool? interactive,

    /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , default:none
    ScrollbarOrientation? scrollbarOrientation,

    /// optionalParameters: {double mainAxisMargin = 0.0} , default:processed=DoubleLiteralImpl
    double mainAxisMargin = 0.0,

    /// optionalParameters: {double crossAxisMargin = 0.0} , default:processed=DoubleLiteralImpl
    double crossAxisMargin = 0.0,

    /// optionalParameters: {EdgeInsets? padding} , default:none
    EdgeInsets? padding,
  }) : super(
          key: key,
          child: child,
          controller: controller,
          thumbVisibility: thumbVisibility,
          shape: shape,
          radius: radius,
          thickness: thickness,
          thumbColor: thumbColor,
          minThumbLength: minThumbLength,
          minOverscrollLength: minOverscrollLength,
          trackVisibility: trackVisibility,
          trackRadius: trackRadius,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          fadeDuration: fadeDuration,
          timeToFade: timeToFade,
          pressDuration: pressDuration,
          notificationPredicate: notificationPredicate,
          interactive: interactive,
          scrollbarOrientation: scrollbarOrientation,
          mainAxisMargin: mainAxisMargin,
          crossAxisMargin: crossAxisMargin,
          padding: padding,
        ) {
    mateCreateName = 'RawScrollbar';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RawScrollbar$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          controller: p.get('controller').build(),
          thumbVisibility: p.get('thumbVisibility').build(),
          shape: p.get('shape').build(),
          radius: p.get('radius').build(),
          thickness: p.get('thickness').build(),
          thumbColor: p.get('thumbColor').build(),
          minThumbLength: p.get('minThumbLength').build(),
          minOverscrollLength: p.get('minOverscrollLength').build(),
          trackVisibility: p.get('trackVisibility').build(),
          trackRadius: p.get('trackRadius').build(),
          trackColor: p.get('trackColor').build(),
          trackBorderColor: p.get('trackBorderColor').build(),
          fadeDuration: p.get('fadeDuration').build(),
          timeToFade: p.get('timeToFade').build(),
          pressDuration: p.get('pressDuration').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          interactive: p.get('interactive').build(),
          scrollbarOrientation: p.get('scrollbarOrientation').build(),
          mainAxisMargin: p.get('mainAxisMargin').build(),
          crossAxisMargin: p.get('crossAxisMargin').build(),
          padding: p.get('padding').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'thumbVisibility',
      thumbVisibility,
      isNamed: true,
    );
    mateUse(
      'shape',
      shape,
      isNamed: true,
    );
    mateUse(
      'radius',
      radius,
      isNamed: true,
    );
    mateUse(
      'thickness',
      thickness,
      isNamed: true,
    );
    mateUse(
      'thumbColor',
      thumbColor,
      isNamed: true,
    );
    mateUse(
      'minThumbLength',
      minThumbLength,
      isNamed: true,
    );
    mateUse(
      'minOverscrollLength',
      minOverscrollLength,
      isNamed: true,
    );
    mateUse(
      'trackVisibility',
      trackVisibility,
      isNamed: true,
    );
    mateUse(
      'trackRadius',
      trackRadius,
      isNamed: true,
    );
    mateUse(
      'trackColor',
      trackColor,
      isNamed: true,
    );
    mateUse(
      'trackBorderColor',
      trackBorderColor,
      isNamed: true,
    );
    mateUse(
      'fadeDuration',
      fadeDuration,
      isNamed: true,
    );
    mateUse(
      'timeToFade',
      timeToFade,
      isNamed: true,
    );
    mateUse(
      'pressDuration',
      pressDuration,
      isNamed: true,
      defaultValue: Duration.zero,
    );
    mateUse(
      'notificationPredicate',
      notificationPredicate,
      isNamed: true,
    );
    mateUse(
      'interactive',
      interactive,
      isNamed: true,
    );
    mateUse(
      'scrollbarOrientation',
      scrollbarOrientation,
      isNamed: true,
    );
    mateUse(
      'mainAxisMargin',
      mainAxisMargin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'crossAxisMargin',
      crossAxisMargin,
      isNamed: true,
      defaultValue: 0.0,
    );
    mateUse(
      'padding',
      padding,
      isNamed: true,
    );
  }
}
