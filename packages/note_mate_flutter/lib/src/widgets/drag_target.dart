// /// Generated by gen_maters.dart, please don't edit!

import 'dart:core';
import 'package:flutter/src/widgets/drag_target.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:ui';
import 'package:flutter/animation.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/gestures/velocity_tracker.dart';

/// class Draggable<T extends Object> extends StatefulWidget
class Draggable$Mate<T extends Object> extends Draggable<T> with Mate {
  /// Draggable<T> Draggable({Key? key, required Widget child, required Widget feedback, T? data, Axis? axis, Widget? childWhenDragging, Offset feedbackOffset = Offset.zero, Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy, Axis? affinity, int? maxSimultaneousDrags, void Function()? onDragStarted, void Function(DragUpdateDetails)? onDragUpdate, void Function(Velocity, Offset)? onDraggableCanceled, void Function(DraggableDetails)? onDragEnd, void Function()? onDragCompleted, bool ignoringFeedbackSemantics = true, bool ignoringFeedbackPointer = true, bool rootOverlay = false, HitTestBehavior hitTestBehavior = HitTestBehavior.deferToChild, bool Function(int)? allowedButtonsFilter})
  Draggable$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {required Widget feedback} , defaultValue:none
    required Widget feedback,

    /// optionalParameters: {T? data} , defaultValue:none
    T? data,

    /// optionalParameters: {Axis? axis} , defaultValue:none
    Axis? axis,

    /// optionalParameters: {Widget? childWhenDragging} , defaultValue:none
    Widget? childWhenDragging,

    /// optionalParameters: {Offset feedbackOffset = Offset.zero} , defaultValue:PrefixedIdentifier
    Offset feedbackOffset = Offset.zero,

    /// optionalParameters: {Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy} , defaultValue:unprocessed
    required DragAnchorStrategy dragAnchorStrategy,

    /// optionalParameters: {Axis? affinity} , defaultValue:none
    Axis? affinity,

    /// optionalParameters: {int? maxSimultaneousDrags} , defaultValue:none
    int? maxSimultaneousDrags,

    /// optionalParameters: {void Function()? onDragStarted} , defaultValue:none
    VoidCallback? onDragStarted,

    /// optionalParameters: {void Function(DragUpdateDetails)? onDragUpdate} , defaultValue:none
    DragUpdateCallback? onDragUpdate,

    /// optionalParameters: {void Function(Velocity, Offset)? onDraggableCanceled} , defaultValue:none
    DraggableCanceledCallback? onDraggableCanceled,

    /// optionalParameters: {void Function(DraggableDetails)? onDragEnd} , defaultValue:none
    DragEndCallback? onDragEnd,

    /// optionalParameters: {void Function()? onDragCompleted} , defaultValue:none
    VoidCallback? onDragCompleted,

    /// optionalParameters: {bool ignoringFeedbackSemantics = true} , defaultValue:Literal
    bool ignoringFeedbackSemantics = true,

    /// optionalParameters: {bool ignoringFeedbackPointer = true} , defaultValue:Literal
    bool ignoringFeedbackPointer = true,

    /// optionalParameters: {bool rootOverlay = false} , defaultValue:Literal
    bool rootOverlay = false,

    /// optionalParameters: {HitTestBehavior hitTestBehavior = HitTestBehavior.deferToChild} , defaultValue:PrefixedIdentifier
    HitTestBehavior hitTestBehavior = HitTestBehavior.deferToChild,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , defaultValue:none
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          key: key,
          child: child,
          feedback: feedback,
          data: data,
          axis: axis,
          childWhenDragging: childWhenDragging,
          feedbackOffset: feedbackOffset,
          dragAnchorStrategy: dragAnchorStrategy,
          affinity: affinity,
          maxSimultaneousDrags: maxSimultaneousDrags,
          onDragStarted: onDragStarted,
          onDragUpdate: onDragUpdate,
          onDraggableCanceled: onDraggableCanceled,
          onDragEnd: onDragEnd,
          onDragCompleted: onDragCompleted,
          ignoringFeedbackSemantics: ignoringFeedbackSemantics,
          ignoringFeedbackPointer: ignoringFeedbackPointer,
          rootOverlay: rootOverlay,
          hitTestBehavior: hitTestBehavior,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'Draggable';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => Draggable$Mate<T>(
          key: p.get('key').build(),
          child: p.get('child').build(),
          feedback: p.get('feedback').build(),
          data: p.get('data').build(),
          axis: p.get('axis').build(),
          childWhenDragging: p.get('childWhenDragging').build(),
          feedbackOffset: p.get('feedbackOffset').build(),
          dragAnchorStrategy: p.get('dragAnchorStrategy').build(),
          affinity: p.get('affinity').build(),
          maxSimultaneousDrags: p.get('maxSimultaneousDrags').build(),
          onDragStarted: p.get('onDragStarted').build(),
          onDragUpdate: p.get('onDragUpdate').build(),
          onDraggableCanceled: p.get('onDraggableCanceled').build(),
          onDragEnd: p.get('onDragEnd').build(),
          onDragCompleted: p.get('onDragCompleted').build(),
          ignoringFeedbackSemantics: p.get('ignoringFeedbackSemantics').build(),
          ignoringFeedbackPointer: p.get('ignoringFeedbackPointer').build(),
          rootOverlay: p.get('rootOverlay').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('child', child, isNamed: true);
    mateUse('feedback', feedback, isNamed: true);
    mateUse('data', data, isNamed: true);
    mateUse('axis', axis, isNamed: true);
    mateUse('childWhenDragging', childWhenDragging, isNamed: true);
    mateUse('feedbackOffset', feedbackOffset, isNamed: true);
    mateUse('dragAnchorStrategy', dragAnchorStrategy, isNamed: true);
    mateUse('affinity', affinity, isNamed: true);
    mateUse('maxSimultaneousDrags', maxSimultaneousDrags, isNamed: true);
    mateUse('onDragStarted', onDragStarted, isNamed: true);
    mateUse('onDragUpdate', onDragUpdate, isNamed: true);
    mateUse('onDraggableCanceled', onDraggableCanceled, isNamed: true);
    mateUse('onDragEnd', onDragEnd, isNamed: true);
    mateUse('onDragCompleted', onDragCompleted, isNamed: true);
    mateUse('ignoringFeedbackSemantics', ignoringFeedbackSemantics, isNamed: true);
    mateUse('ignoringFeedbackPointer', ignoringFeedbackPointer, isNamed: true);
    mateUse('rootOverlay', rootOverlay, isNamed: true);
    mateUse('hitTestBehavior', hitTestBehavior, isNamed: true);
    mateUse('allowedButtonsFilter', allowedButtonsFilter, isNamed: true);
  }
}

/// class LongPressDraggable<T extends Object> extends Draggable<T>
class LongPressDraggable$Mate<T extends Object> extends LongPressDraggable<T> with Mate {
  /// LongPressDraggable<T> LongPressDraggable({Key? key, required Widget child, required Widget feedback, T? data, Axis? axis, Widget? childWhenDragging, Offset feedbackOffset = Offset.zero, Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy, int? maxSimultaneousDrags, void Function()? onDragStarted, void Function(DragUpdateDetails)? onDragUpdate, void Function(Velocity, Offset)? onDraggableCanceled, void Function(DraggableDetails)? onDragEnd, void Function()? onDragCompleted, bool hapticFeedbackOnStart = true, bool ignoringFeedbackSemantics = true, bool ignoringFeedbackPointer = true, Duration delay = kLongPressTimeout, bool Function(int)? allowedButtonsFilter})
  LongPressDraggable$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,

    /// optionalParameters: {required Widget feedback} , defaultValue:none
    required Widget feedback,

    /// optionalParameters: {T? data} , defaultValue:none
    T? data,

    /// optionalParameters: {Axis? axis} , defaultValue:none
    Axis? axis,

    /// optionalParameters: {Widget? childWhenDragging} , defaultValue:none
    Widget? childWhenDragging,

    /// optionalParameters: {Offset feedbackOffset = Offset.zero} , defaultValue:is!ConstVariableElement
    required Offset feedbackOffset,

    /// optionalParameters: {Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy} , defaultValue:is!ConstVariableElement
    required DragAnchorStrategy dragAnchorStrategy,

    /// optionalParameters: {int? maxSimultaneousDrags} , defaultValue:none
    int? maxSimultaneousDrags,

    /// optionalParameters: {void Function()? onDragStarted} , defaultValue:none
    VoidCallback? onDragStarted,

    /// optionalParameters: {void Function(DragUpdateDetails)? onDragUpdate} , defaultValue:none
    DragUpdateCallback? onDragUpdate,

    /// optionalParameters: {void Function(Velocity, Offset)? onDraggableCanceled} , defaultValue:none
    DraggableCanceledCallback? onDraggableCanceled,

    /// optionalParameters: {void Function(DraggableDetails)? onDragEnd} , defaultValue:none
    DragEndCallback? onDragEnd,

    /// optionalParameters: {void Function()? onDragCompleted} , defaultValue:none
    VoidCallback? onDragCompleted,

    /// optionalParameters: {bool hapticFeedbackOnStart = true} , defaultValue:Literal
    bool hapticFeedbackOnStart = true,

    /// optionalParameters: {bool ignoringFeedbackSemantics = true} , defaultValue:is!ConstVariableElement
    required bool ignoringFeedbackSemantics,

    /// optionalParameters: {bool ignoringFeedbackPointer = true} , defaultValue:is!ConstVariableElement
    required bool ignoringFeedbackPointer,

    /// optionalParameters: {Duration delay = kLongPressTimeout} , defaultValue:unprocessed
    required Duration delay,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , defaultValue:none
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          key: key,
          child: child,
          feedback: feedback,
          data: data,
          axis: axis,
          childWhenDragging: childWhenDragging,
          feedbackOffset: feedbackOffset,
          dragAnchorStrategy: dragAnchorStrategy,
          maxSimultaneousDrags: maxSimultaneousDrags,
          onDragStarted: onDragStarted,
          onDragUpdate: onDragUpdate,
          onDraggableCanceled: onDraggableCanceled,
          onDragEnd: onDragEnd,
          onDragCompleted: onDragCompleted,
          hapticFeedbackOnStart: hapticFeedbackOnStart,
          ignoringFeedbackSemantics: ignoringFeedbackSemantics,
          ignoringFeedbackPointer: ignoringFeedbackPointer,
          delay: delay,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateCreateName = 'LongPressDraggable';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => LongPressDraggable$Mate<T>(
          key: p.get('key').build(),
          child: p.get('child').build(),
          feedback: p.get('feedback').build(),
          data: p.get('data').build(),
          axis: p.get('axis').build(),
          childWhenDragging: p.get('childWhenDragging').build(),
          feedbackOffset: p.get('feedbackOffset').build(),
          dragAnchorStrategy: p.get('dragAnchorStrategy').build(),
          maxSimultaneousDrags: p.get('maxSimultaneousDrags').build(),
          onDragStarted: p.get('onDragStarted').build(),
          onDragUpdate: p.get('onDragUpdate').build(),
          onDraggableCanceled: p.get('onDraggableCanceled').build(),
          onDragEnd: p.get('onDragEnd').build(),
          onDragCompleted: p.get('onDragCompleted').build(),
          hapticFeedbackOnStart: p.get('hapticFeedbackOnStart').build(),
          ignoringFeedbackSemantics: p.get('ignoringFeedbackSemantics').build(),
          ignoringFeedbackPointer: p.get('ignoringFeedbackPointer').build(),
          delay: p.get('delay').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('child', child, isNamed: true);
    mateUse('feedback', feedback, isNamed: true);
    mateUse('data', data, isNamed: true);
    mateUse('axis', axis, isNamed: true);
    mateUse('childWhenDragging', childWhenDragging, isNamed: true);
    mateUse('feedbackOffset', feedbackOffset, isNamed: true);
    mateUse('dragAnchorStrategy', dragAnchorStrategy, isNamed: true);
    mateUse('maxSimultaneousDrags', maxSimultaneousDrags, isNamed: true);
    mateUse('onDragStarted', onDragStarted, isNamed: true);
    mateUse('onDragUpdate', onDragUpdate, isNamed: true);
    mateUse('onDraggableCanceled', onDraggableCanceled, isNamed: true);
    mateUse('onDragEnd', onDragEnd, isNamed: true);
    mateUse('onDragCompleted', onDragCompleted, isNamed: true);
    mateUse('hapticFeedbackOnStart', hapticFeedbackOnStart, isNamed: true);
    mateUse('ignoringFeedbackSemantics', ignoringFeedbackSemantics, isNamed: true);
    mateUse('ignoringFeedbackPointer', ignoringFeedbackPointer, isNamed: true);
    mateUse('delay', delay, isNamed: true);
    mateUse('allowedButtonsFilter', allowedButtonsFilter, isNamed: true);
  }
}

/// class DraggableDetails
class DraggableDetails$Mate extends DraggableDetails with Mate {
  /// DraggableDetails DraggableDetails({bool wasAccepted = false, required Velocity velocity, required Offset offset})
  DraggableDetails$Mate({
    /// optionalParameters: {bool wasAccepted = false} , defaultValue:Literal
    bool wasAccepted = false,

    /// optionalParameters: {required Velocity velocity} , defaultValue:none
    required Velocity velocity,

    /// optionalParameters: {required Offset offset} , defaultValue:none
    required Offset offset,
  }) : super(
          wasAccepted: wasAccepted,
          velocity: velocity,
          offset: offset,
        ) {
    mateCreateName = 'DraggableDetails';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DraggableDetails$Mate(
          wasAccepted: p.get('wasAccepted').build(),
          velocity: p.get('velocity').build(),
          offset: p.get('offset').build(),
        );
    mateUse('wasAccepted', wasAccepted, isNamed: true);
    mateUse('velocity', velocity, isNamed: true);
    mateUse('offset', offset, isNamed: true);
  }
}

/// class DragTargetDetails<T>
class DragTargetDetails$Mate<T> extends DragTargetDetails<T> with Mate {
  /// DragTargetDetails<T> DragTargetDetails({required T data, required Offset offset})
  DragTargetDetails$Mate({
    /// optionalParameters: {required T data} , defaultValue:none
    required T data,

    /// optionalParameters: {required Offset offset} , defaultValue:none
    required Offset offset,
  }) : super(
          data: data,
          offset: offset,
        ) {
    mateCreateName = 'DragTargetDetails';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DragTargetDetails$Mate<T>(
          data: p.get('data').build(),
          offset: p.get('offset').build(),
        );
    mateUse('data', data, isNamed: true);
    mateUse('offset', offset, isNamed: true);
  }
}

/// class DragTarget<T extends Object> extends StatefulWidget
class DragTarget$Mate<T extends Object> extends DragTarget<T> with Mate {
  /// DragTarget<T> DragTarget({Key? key, required Widget Function(BuildContext, List<T?>, List<dynamic>) builder, bool Function(T?)? onWillAccept, void Function(T)? onAccept, void Function(DragTargetDetails<T>)? onAcceptWithDetails, void Function(T?)? onLeave, void Function(DragTargetDetails<T>)? onMove, HitTestBehavior hitTestBehavior = HitTestBehavior.translucent})
  DragTarget$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, List<T?>, List<dynamic>) builder} , defaultValue:none
    required DragTargetBuilder<T> builder,

    /// optionalParameters: {bool Function(T?)? onWillAccept} , defaultValue:none
    DragTargetWillAccept<T>? onWillAccept,

    /// optionalParameters: {void Function(T)? onAccept} , defaultValue:none
    DragTargetAccept<T>? onAccept,

    /// optionalParameters: {void Function(DragTargetDetails<T>)? onAcceptWithDetails} , defaultValue:none
    DragTargetAcceptWithDetails<T>? onAcceptWithDetails,

    /// optionalParameters: {void Function(T?)? onLeave} , defaultValue:none
    DragTargetLeave<T>? onLeave,

    /// optionalParameters: {void Function(DragTargetDetails<T>)? onMove} , defaultValue:none
    DragTargetMove<T>? onMove,

    /// optionalParameters: {HitTestBehavior hitTestBehavior = HitTestBehavior.translucent} , defaultValue:PrefixedIdentifier
    HitTestBehavior hitTestBehavior = HitTestBehavior.translucent,
  }) : super(
          key: key,
          builder: builder,
          onWillAccept: onWillAccept,
          onAccept: onAccept,
          onAcceptWithDetails: onAcceptWithDetails,
          onLeave: onLeave,
          onMove: onMove,
          hitTestBehavior: hitTestBehavior,
        ) {
    mateCreateName = 'DragTarget';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DragTarget$Mate<T>(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
          onWillAccept: p.get('onWillAccept').build(),
          onAccept: p.get('onAccept').build(),
          onAcceptWithDetails: p.get('onAcceptWithDetails').build(),
          onLeave: p.get('onLeave').build(),
          onMove: p.get('onMove').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
        );
    mateUse('key', key, isNamed: true);
    mateUse('builder', builder, isNamed: true);
    mateUse('onWillAccept', onWillAccept, isNamed: true);
    mateUse('onAccept', onAccept, isNamed: true);
    mateUse('onAcceptWithDetails', onAcceptWithDetails, isNamed: true);
    mateUse('onLeave', onLeave, isNamed: true);
    mateUse('onMove', onMove, isNamed: true);
    mateUse('hitTestBehavior', hitTestBehavior, isNamed: true);
  }
}
