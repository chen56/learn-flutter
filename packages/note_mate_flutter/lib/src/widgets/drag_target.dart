// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/drag_target.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/painting/basic_types.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/src/rendering/proxy_box.dart' as _i7;
import 'package:flutter/src/gestures/recognizer.dart' as _i8;
import 'package:flutter/src/gestures/velocity_tracker.dart' as _i9;

/// class Draggable<T extends Object> extends StatefulWidget
class Draggable$Mate<T extends Object> extends _i1.Draggable<T> with _i2.Mate {
  /// Draggable<T> Draggable({Key? key, required Widget child, required Widget feedback, T? data, Axis? axis, Widget? childWhenDragging, Offset feedbackOffset = Offset.zero, Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy, Axis? affinity, int? maxSimultaneousDrags, void Function()? onDragStarted, void Function(DragUpdateDetails)? onDragUpdate, void Function(Velocity, Offset)? onDraggableCanceled, void Function(DraggableDetails)? onDragEnd, void Function()? onDragCompleted, bool ignoringFeedbackSemantics = true, bool ignoringFeedbackPointer = true, bool rootOverlay = false, HitTestBehavior hitTestBehavior = HitTestBehavior.deferToChild, bool Function(int)? allowedButtonsFilter})
  Draggable$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {required Widget feedback} , default:none
    required super.feedback,

    /// optionalParameters: {T? data} , default:none
    super.data,

    /// optionalParameters: {Axis? axis} , default:none
    super.axis,

    /// optionalParameters: {Widget? childWhenDragging} , default:none
    super.childWhenDragging,

    /// optionalParameters: {Offset feedbackOffset = Offset.zero} , default:unprocessed=PrefixedIdentifierImpl
    super.feedbackOffset,

    /// optionalParameters: {Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy} , default:unprocessed=SimpleIdentifierImpl
    super.dragAnchorStrategy,

    /// optionalParameters: {Axis? affinity} , default:none
    super.affinity,

    /// optionalParameters: {int? maxSimultaneousDrags} , default:none
    super.maxSimultaneousDrags,

    /// optionalParameters: {void Function()? onDragStarted} , default:none
    super.onDragStarted,

    /// optionalParameters: {void Function(DragUpdateDetails)? onDragUpdate} , default:none
    super.onDragUpdate,

    /// optionalParameters: {void Function(Velocity, Offset)? onDraggableCanceled} , default:none
    super.onDraggableCanceled,

    /// optionalParameters: {void Function(DraggableDetails)? onDragEnd} , default:none
    super.onDragEnd,

    /// optionalParameters: {void Function()? onDragCompleted} , default:none
    super.onDragCompleted,

    /// optionalParameters: {bool ignoringFeedbackSemantics = true} , default:processed=BooleanLiteralImpl
    super.ignoringFeedbackSemantics,

    /// optionalParameters: {bool ignoringFeedbackPointer = true} , default:processed=BooleanLiteralImpl
    super.ignoringFeedbackPointer,

    /// optionalParameters: {bool rootOverlay = false} , default:processed=BooleanLiteralImpl
    super.rootOverlay,

    /// optionalParameters: {HitTestBehavior hitTestBehavior = HitTestBehavior.deferToChild} , default:unprocessed=PrefixedIdentifierImpl
    super.hitTestBehavior,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , default:none
    super.allowedButtonsFilter,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'feedback': _i2.BuilderArg<_i4.Widget>(
            name: 'feedback',
            init: feedback,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<T?>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'axis': _i2.BuilderArg<_i5.Axis?>(
            name: 'axis',
            init: axis,
            isNamed: true,
          ),
          'childWhenDragging': _i2.BuilderArg<_i4.Widget?>(
            name: 'childWhenDragging',
            init: childWhenDragging,
            isNamed: true,
          ),
          'feedbackOffset': _i2.BuilderArg<_i6.Offset>(
            name: 'feedbackOffset',
            init: feedbackOffset,
            isNamed: true,
          ),
          'dragAnchorStrategy': _i2.BuilderArg<_i1.DragAnchorStrategy>(
            name: 'dragAnchorStrategy',
            init: dragAnchorStrategy,
            isNamed: true,
          ),
          'affinity': _i2.BuilderArg<_i5.Axis?>(
            name: 'affinity',
            init: affinity,
            isNamed: true,
          ),
          'maxSimultaneousDrags': _i2.BuilderArg<int?>(
            name: 'maxSimultaneousDrags',
            init: maxSimultaneousDrags,
            isNamed: true,
          ),
          'onDragStarted': _i2.BuilderArg<_i6.VoidCallback?>(
            name: 'onDragStarted',
            init: onDragStarted,
            isNamed: true,
          ),
          'onDragUpdate': _i2.BuilderArg<_i1.DragUpdateCallback?>(
            name: 'onDragUpdate',
            init: onDragUpdate,
            isNamed: true,
          ),
          'onDraggableCanceled': _i2.BuilderArg<_i1.DraggableCanceledCallback?>(
            name: 'onDraggableCanceled',
            init: onDraggableCanceled,
            isNamed: true,
          ),
          'onDragEnd': _i2.BuilderArg<_i1.DragEndCallback?>(
            name: 'onDragEnd',
            init: onDragEnd,
            isNamed: true,
          ),
          'onDragCompleted': _i2.BuilderArg<_i6.VoidCallback?>(
            name: 'onDragCompleted',
            init: onDragCompleted,
            isNamed: true,
          ),
          'ignoringFeedbackSemantics': _i2.BuilderArg<bool>(
            name: 'ignoringFeedbackSemantics',
            init: ignoringFeedbackSemantics,
            isNamed: true,
            defaultValue: true,
          ),
          'ignoringFeedbackPointer': _i2.BuilderArg<bool>(
            name: 'ignoringFeedbackPointer',
            init: ignoringFeedbackPointer,
            isNamed: true,
            defaultValue: true,
          ),
          'rootOverlay': _i2.BuilderArg<bool>(
            name: 'rootOverlay',
            init: rootOverlay,
            isNamed: true,
            defaultValue: false,
          ),
          'hitTestBehavior': _i2.BuilderArg<_i7.HitTestBehavior>(
            name: 'hitTestBehavior',
            init: hitTestBehavior,
            isNamed: true,
          ),
          'allowedButtonsFilter': _i2.BuilderArg<_i8.AllowedButtonsFilter?>(
            name: 'allowedButtonsFilter',
            init: allowedButtonsFilter,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Draggable';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Draggable$Mate<T>(
          key: p.get('key').build(),
          child: p.get('child').build(),
          feedback: p.get('feedback').build(),
          data: p.get('data').build(),
          axis: p.get('axis').build(),
          childWhenDragging: p.get('childWhenDragging').build(),
          feedbackOffset: p.get('feedbackOffset').build(),
          dragAnchorStrategy: p.get('dragAnchorStrategy').build(),
          affinity: p.get('affinity').build(),
          maxSimultaneousDrags: p.get('maxSimultaneousDrags').build(),
          onDragStarted: p.get('onDragStarted').build(),
          onDragUpdate: p.get('onDragUpdate').build(),
          onDraggableCanceled: p.get('onDraggableCanceled').build(),
          onDragEnd: p.get('onDragEnd').build(),
          onDragCompleted: p.get('onDragCompleted').build(),
          ignoringFeedbackSemantics: p.get('ignoringFeedbackSemantics').build(),
          ignoringFeedbackPointer: p.get('ignoringFeedbackPointer').build(),
          rootOverlay: p.get('rootOverlay').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class LongPressDraggable<T extends Object> extends Draggable<T>
class LongPressDraggable$Mate<T extends Object> extends _i1.LongPressDraggable<T> with _i2.Mate {
  /// LongPressDraggable<T> LongPressDraggable({Key? key, required Widget child, required Widget feedback, T? data, Axis? axis, Widget? childWhenDragging, Offset feedbackOffset = Offset.zero, Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy, int? maxSimultaneousDrags, void Function()? onDragStarted, void Function(DragUpdateDetails)? onDragUpdate, void Function(Velocity, Offset)? onDraggableCanceled, void Function(DraggableDetails)? onDragEnd, void Function()? onDragCompleted, bool hapticFeedbackOnStart = true, bool ignoringFeedbackSemantics = true, bool ignoringFeedbackPointer = true, Duration delay = kLongPressTimeout, bool Function(int)? allowedButtonsFilter})
  LongPressDraggable$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {required Widget feedback} , default:none
    required super.feedback,

    /// optionalParameters: {T? data} , default:none
    super.data,

    /// optionalParameters: {Axis? axis} , default:none
    super.axis,

    /// optionalParameters: {Widget? childWhenDragging} , default:none
    super.childWhenDragging,

    /// optionalParameters: {Offset feedbackOffset = Offset.zero} , default:unprocessed=PrefixedIdentifierImpl
    super.feedbackOffset,

    /// optionalParameters: {Offset Function(Draggable<Object>, BuildContext, Offset) dragAnchorStrategy = childDragAnchorStrategy} , default:unprocessed=SimpleIdentifierImpl
    super.dragAnchorStrategy,

    /// optionalParameters: {int? maxSimultaneousDrags} , default:none
    super.maxSimultaneousDrags,

    /// optionalParameters: {void Function()? onDragStarted} , default:none
    super.onDragStarted,

    /// optionalParameters: {void Function(DragUpdateDetails)? onDragUpdate} , default:none
    super.onDragUpdate,

    /// optionalParameters: {void Function(Velocity, Offset)? onDraggableCanceled} , default:none
    super.onDraggableCanceled,

    /// optionalParameters: {void Function(DraggableDetails)? onDragEnd} , default:none
    super.onDragEnd,

    /// optionalParameters: {void Function()? onDragCompleted} , default:none
    super.onDragCompleted,

    /// optionalParameters: {bool hapticFeedbackOnStart = true} , default:processed=BooleanLiteralImpl
    super.hapticFeedbackOnStart,

    /// optionalParameters: {bool ignoringFeedbackSemantics = true} , default:processed=BooleanLiteralImpl
    super.ignoringFeedbackSemantics,

    /// optionalParameters: {bool ignoringFeedbackPointer = true} , default:processed=BooleanLiteralImpl
    super.ignoringFeedbackPointer,

    /// optionalParameters: {Duration delay = kLongPressTimeout} , default:unprocessed=SimpleIdentifierImpl
    super.delay,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , default:none
    super.allowedButtonsFilter,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'feedback': _i2.BuilderArg<_i4.Widget>(
            name: 'feedback',
            init: feedback,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<T?>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'axis': _i2.BuilderArg<_i5.Axis?>(
            name: 'axis',
            init: axis,
            isNamed: true,
          ),
          'childWhenDragging': _i2.BuilderArg<_i4.Widget?>(
            name: 'childWhenDragging',
            init: childWhenDragging,
            isNamed: true,
          ),
          'feedbackOffset': _i2.BuilderArg<_i6.Offset>(
            name: 'feedbackOffset',
            init: feedbackOffset,
            isNamed: true,
          ),
          'dragAnchorStrategy': _i2.BuilderArg<_i1.DragAnchorStrategy>(
            name: 'dragAnchorStrategy',
            init: dragAnchorStrategy,
            isNamed: true,
          ),
          'maxSimultaneousDrags': _i2.BuilderArg<int?>(
            name: 'maxSimultaneousDrags',
            init: maxSimultaneousDrags,
            isNamed: true,
          ),
          'onDragStarted': _i2.BuilderArg<_i6.VoidCallback?>(
            name: 'onDragStarted',
            init: onDragStarted,
            isNamed: true,
          ),
          'onDragUpdate': _i2.BuilderArg<_i1.DragUpdateCallback?>(
            name: 'onDragUpdate',
            init: onDragUpdate,
            isNamed: true,
          ),
          'onDraggableCanceled': _i2.BuilderArg<_i1.DraggableCanceledCallback?>(
            name: 'onDraggableCanceled',
            init: onDraggableCanceled,
            isNamed: true,
          ),
          'onDragEnd': _i2.BuilderArg<_i1.DragEndCallback?>(
            name: 'onDragEnd',
            init: onDragEnd,
            isNamed: true,
          ),
          'onDragCompleted': _i2.BuilderArg<_i6.VoidCallback?>(
            name: 'onDragCompleted',
            init: onDragCompleted,
            isNamed: true,
          ),
          'hapticFeedbackOnStart': _i2.BuilderArg<bool>(
            name: 'hapticFeedbackOnStart',
            init: hapticFeedbackOnStart,
            isNamed: true,
            defaultValue: true,
          ),
          'ignoringFeedbackSemantics': _i2.BuilderArg<bool>(
            name: 'ignoringFeedbackSemantics',
            init: ignoringFeedbackSemantics,
            isNamed: true,
            defaultValue: true,
          ),
          'ignoringFeedbackPointer': _i2.BuilderArg<bool>(
            name: 'ignoringFeedbackPointer',
            init: ignoringFeedbackPointer,
            isNamed: true,
            defaultValue: true,
          ),
          'delay': _i2.BuilderArg<Duration>(
            name: 'delay',
            init: delay,
            isNamed: true,
          ),
          'allowedButtonsFilter': _i2.BuilderArg<_i8.AllowedButtonsFilter?>(
            name: 'allowedButtonsFilter',
            init: allowedButtonsFilter,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'LongPressDraggable';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LongPressDraggable$Mate<T>(
          key: p.get('key').build(),
          child: p.get('child').build(),
          feedback: p.get('feedback').build(),
          data: p.get('data').build(),
          axis: p.get('axis').build(),
          childWhenDragging: p.get('childWhenDragging').build(),
          feedbackOffset: p.get('feedbackOffset').build(),
          dragAnchorStrategy: p.get('dragAnchorStrategy').build(),
          maxSimultaneousDrags: p.get('maxSimultaneousDrags').build(),
          onDragStarted: p.get('onDragStarted').build(),
          onDragUpdate: p.get('onDragUpdate').build(),
          onDraggableCanceled: p.get('onDraggableCanceled').build(),
          onDragEnd: p.get('onDragEnd').build(),
          onDragCompleted: p.get('onDragCompleted').build(),
          hapticFeedbackOnStart: p.get('hapticFeedbackOnStart').build(),
          ignoringFeedbackSemantics: p.get('ignoringFeedbackSemantics').build(),
          ignoringFeedbackPointer: p.get('ignoringFeedbackPointer').build(),
          delay: p.get('delay').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DraggableDetails
class DraggableDetails$Mate extends _i1.DraggableDetails with _i2.Mate {
  /// DraggableDetails DraggableDetails({bool wasAccepted = false, required Velocity velocity, required Offset offset})
  DraggableDetails$Mate({
    /// optionalParameters: {bool wasAccepted = false} , default:processed=BooleanLiteralImpl
    super.wasAccepted,

    /// optionalParameters: {required Velocity velocity} , default:none
    required super.velocity,

    /// optionalParameters: {required Offset offset} , default:none
    required super.offset,
  })  : mateParams = {
          'wasAccepted': _i2.BuilderArg<bool>(
            name: 'wasAccepted',
            init: wasAccepted,
            isNamed: true,
            defaultValue: false,
          ),
          'velocity': _i2.BuilderArg<_i9.Velocity>(
            name: 'velocity',
            init: velocity,
            isNamed: true,
          ),
          'offset': _i2.BuilderArg<_i6.Offset>(
            name: 'offset',
            init: offset,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DraggableDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DraggableDetails$Mate(
          wasAccepted: p.get('wasAccepted').build(),
          velocity: p.get('velocity').build(),
          offset: p.get('offset').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DragTargetDetails<T>
class DragTargetDetails$Mate<T> extends _i1.DragTargetDetails<T> with _i2.Mate {
  /// DragTargetDetails<T> DragTargetDetails({required T data, required Offset offset})
  DragTargetDetails$Mate({
    /// optionalParameters: {required T data} , default:none
    required super.data,

    /// optionalParameters: {required Offset offset} , default:none
    required super.offset,
  })  : mateParams = {
          'data': _i2.BuilderArg<T>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'offset': _i2.BuilderArg<_i6.Offset>(
            name: 'offset',
            init: offset,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DragTargetDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DragTargetDetails$Mate<T>(
          data: p.get('data').build(),
          offset: p.get('offset').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DragTarget<T extends Object> extends StatefulWidget
class DragTarget$Mate<T extends Object> extends _i1.DragTarget<T> with _i2.Mate {
  /// DragTarget<T> DragTarget({Key? key, required Widget Function(BuildContext, List<T?>, List<dynamic>) builder, bool Function(T?)? onWillAccept, void Function(T)? onAccept, void Function(DragTargetDetails<T>)? onAcceptWithDetails, void Function(T?)? onLeave, void Function(DragTargetDetails<T>)? onMove, HitTestBehavior hitTestBehavior = HitTestBehavior.translucent})
  DragTarget$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget Function(BuildContext, List<T?>, List<dynamic>) builder} , default:none
    required super.builder,

    /// optionalParameters: {bool Function(T?)? onWillAccept} , default:none
    super.onWillAccept,

    /// optionalParameters: {void Function(T)? onAccept} , default:none
    super.onAccept,

    /// optionalParameters: {void Function(DragTargetDetails<T>)? onAcceptWithDetails} , default:none
    super.onAcceptWithDetails,

    /// optionalParameters: {void Function(T?)? onLeave} , default:none
    super.onLeave,

    /// optionalParameters: {void Function(DragTargetDetails<T>)? onMove} , default:none
    super.onMove,

    /// optionalParameters: {HitTestBehavior hitTestBehavior = HitTestBehavior.translucent} , default:unprocessed=PrefixedIdentifierImpl
    super.hitTestBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'builder': _i2.BuilderArg<_i1.DragTargetBuilder<T>>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
          'onWillAccept': _i2.BuilderArg<_i1.DragTargetWillAccept<T>?>(
            name: 'onWillAccept',
            init: onWillAccept,
            isNamed: true,
          ),
          'onAccept': _i2.BuilderArg<_i1.DragTargetAccept<T>?>(
            name: 'onAccept',
            init: onAccept,
            isNamed: true,
          ),
          'onAcceptWithDetails': _i2.BuilderArg<_i1.DragTargetAcceptWithDetails<T>?>(
            name: 'onAcceptWithDetails',
            init: onAcceptWithDetails,
            isNamed: true,
          ),
          'onLeave': _i2.BuilderArg<_i1.DragTargetLeave<T>?>(
            name: 'onLeave',
            init: onLeave,
            isNamed: true,
          ),
          'onMove': _i2.BuilderArg<_i1.DragTargetMove<T>?>(
            name: 'onMove',
            init: onMove,
            isNamed: true,
          ),
          'hitTestBehavior': _i2.BuilderArg<_i7.HitTestBehavior>(
            name: 'hitTestBehavior',
            init: hitTestBehavior,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DragTarget';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DragTarget$Mate<T>(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
          onWillAccept: p.get('onWillAccept').build(),
          onAccept: p.get('onAccept').build(),
          onAcceptWithDetails: p.get('onAcceptWithDetails').build(),
          onLeave: p.get('onLeave').build(),
          onMove: p.get('onMove').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
