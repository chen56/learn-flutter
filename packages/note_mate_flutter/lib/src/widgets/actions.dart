// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/actions.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/services.dart';
import 'dart:ui';

/// class ActionListener extends StatefulWidget
class ActionListener$Mate extends ActionListener with Mate {
  /// ActionListener ActionListener({Key? key, required void Function(Action<Intent>) listener, required Action<Intent> action, required Widget child})
  ActionListener$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required void Function(Action<Intent>) listener} , default:none
    required ActionListenerCallback listener,

    /// optionalParameters: {required Action<Intent> action} , default:none
    required Action<Intent> action,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          listener: listener,
          action: action,
          child: child,
        ) {
    mateCreateName = 'ActionListener';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ActionListener$Mate(
          key: p.get('key').build(),
          listener: p.get('listener').build(),
          action: p.get('action').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'listener',
      listener,
      isNamed: true,
    );
    mateUse(
      'action',
      action,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class CallbackAction<T extends Intent> extends Action<T>
class CallbackAction$Mate<T extends Intent> extends CallbackAction<T> with Mate {
  /// CallbackAction<T> CallbackAction({required Object? Function(T) onInvoke})
  CallbackAction$Mate(
      {
      /// optionalParameters: {required Object? Function(T) onInvoke} , default:none
      required OnInvokeCallback<T> onInvoke})
      : super(onInvoke: onInvoke) {
    mateCreateName = 'CallbackAction';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => CallbackAction$Mate<T>(onInvoke: p.get('onInvoke').build());
    mateUse(
      'onInvoke',
      onInvoke,
      isNamed: true,
    );
  }
}

/// class Actions extends StatefulWidget
class Actions$Mate extends Actions with Mate {
  /// Actions Actions({Key? key, ActionDispatcher? dispatcher, required Map<Type, Action<Intent>> actions, required Widget child})
  Actions$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {ActionDispatcher? dispatcher} , default:none
    ActionDispatcher? dispatcher,

    /// optionalParameters: {required Map<Type, Action<Intent>> actions} , default:none
    required Map<Type, Action<Intent>> actions,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          dispatcher: dispatcher,
          actions: actions,
          child: child,
        ) {
    mateCreateName = 'Actions';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => Actions$Mate(
          key: p.get('key').build(),
          dispatcher: p.get('dispatcher').build(),
          actions: p.get('actions').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'dispatcher',
      dispatcher,
      isNamed: true,
    );
    mateUse(
      'actions',
      actions,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class FocusableActionDetector extends StatefulWidget
class FocusableActionDetector$Mate extends FocusableActionDetector with Mate {
  /// FocusableActionDetector FocusableActionDetector({Key? key, bool enabled = true, FocusNode? focusNode, bool autofocus = false, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, void Function(bool)? onShowFocusHighlight, void Function(bool)? onShowHoverHighlight, void Function(bool)? onFocusChange, MouseCursor mouseCursor = MouseCursor.defer, bool includeFocusSemantics = true, required Widget child})
  FocusableActionDetector$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    bool enabled = true,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    bool autofocus = false,

    /// optionalParameters: {bool descendantsAreFocusable = true} , default:processed=BooleanLiteralImpl
    bool descendantsAreFocusable = true,

    /// optionalParameters: {bool descendantsAreTraversable = true} , default:processed=BooleanLiteralImpl
    bool descendantsAreTraversable = true,

    /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , default:none
    Map<ShortcutActivator, Intent>? shortcuts,

    /// optionalParameters: {Map<Type, Action<Intent>>? actions} , default:none
    Map<Type, Action<Intent>>? actions,

    /// optionalParameters: {void Function(bool)? onShowFocusHighlight} , default:none
    ValueChanged<bool>? onShowFocusHighlight,

    /// optionalParameters: {void Function(bool)? onShowHoverHighlight} , default:none
    ValueChanged<bool>? onShowHoverHighlight,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {MouseCursor mouseCursor = MouseCursor.defer} , default:processed=PrefixedIdentifierImpl
    MouseCursor mouseCursor = MouseCursor.defer,

    /// optionalParameters: {bool includeFocusSemantics = true} , default:processed=BooleanLiteralImpl
    bool includeFocusSemantics = true,

    /// optionalParameters: {required Widget child} , default:none
    required Widget child,
  }) : super(
          key: key,
          enabled: enabled,
          focusNode: focusNode,
          autofocus: autofocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          shortcuts: shortcuts,
          actions: actions,
          onShowFocusHighlight: onShowFocusHighlight,
          onShowHoverHighlight: onShowHoverHighlight,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          includeFocusSemantics: includeFocusSemantics,
          child: child,
        ) {
    mateCreateName = 'FocusableActionDetector';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => FocusableActionDetector$Mate(
          key: p.get('key').build(),
          enabled: p.get('enabled').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          descendantsAreFocusable: p.get('descendantsAreFocusable').build(),
          descendantsAreTraversable: p.get('descendantsAreTraversable').build(),
          shortcuts: p.get('shortcuts').build(),
          actions: p.get('actions').build(),
          onShowFocusHighlight: p.get('onShowFocusHighlight').build(),
          onShowHoverHighlight: p.get('onShowHoverHighlight').build(),
          onFocusChange: p.get('onFocusChange').build(),
          mouseCursor: p.get('mouseCursor').build(),
          includeFocusSemantics: p.get('includeFocusSemantics').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'enabled',
      enabled,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'focusNode',
      focusNode,
      isNamed: true,
    );
    mateUse(
      'autofocus',
      autofocus,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'descendantsAreFocusable',
      descendantsAreFocusable,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'descendantsAreTraversable',
      descendantsAreTraversable,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'shortcuts',
      shortcuts,
      isNamed: true,
    );
    mateUse(
      'actions',
      actions,
      isNamed: true,
    );
    mateUse(
      'onShowFocusHighlight',
      onShowFocusHighlight,
      isNamed: true,
    );
    mateUse(
      'onShowHoverHighlight',
      onShowHoverHighlight,
      isNamed: true,
    );
    mateUse(
      'onFocusChange',
      onFocusChange,
      isNamed: true,
    );
    mateUse(
      'mouseCursor',
      mouseCursor,
      isNamed: true,
      defaultValue: MouseCursor.defer,
    );
    mateUse(
      'includeFocusSemantics',
      includeFocusSemantics,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}

/// class VoidCallbackIntent extends Intent
class VoidCallbackIntent$Mate extends VoidCallbackIntent with Mate {
  /// VoidCallbackIntent VoidCallbackIntent(void Function() callback)
  VoidCallbackIntent$Mate(

      /// requiredParameters: void Function() callback
      VoidCallback callback)
      : super(callback) {
    mateCreateName = 'VoidCallbackIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => VoidCallbackIntent$Mate(p.get('callback').value);
    mateUse(
      'callback',
      callback,
      isNamed: false,
    );
  }
}

/// class DoNothingAction extends Action<Intent>
class DoNothingAction$Mate extends DoNothingAction with Mate {
  /// DoNothingAction DoNothingAction({bool consumesKey = true})
  DoNothingAction$Mate(
      {
      /// optionalParameters: {bool consumesKey = true} , default:processed=BooleanLiteralImpl
      bool consumesKey = true})
      : super(consumesKey: consumesKey) {
    mateCreateName = 'DoNothingAction';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DoNothingAction$Mate(consumesKey: p.get('consumesKey').build());
    mateUse(
      'consumesKey',
      consumesKey,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class PrioritizedIntents extends Intent
class PrioritizedIntents$Mate extends PrioritizedIntents with Mate {
  /// PrioritizedIntents PrioritizedIntents({required List<Intent> orderedIntents})
  PrioritizedIntents$Mate(
      {
      /// optionalParameters: {required List<Intent> orderedIntents} , default:none
      required List<Intent> orderedIntents})
      : super(orderedIntents: orderedIntents) {
    mateCreateName = 'PrioritizedIntents';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PrioritizedIntents$Mate(orderedIntents: p.get('orderedIntents').build());
    mateUseList(
      'orderedIntents',
      orderedIntents,
      isNamed: true,
    );
  }
}
