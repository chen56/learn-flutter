// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/actions.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';

/// class ActionListener extends StatefulWidget
class ActionListener$Mate extends ActionListener with Mate {
  /// ActionListener ActionListener({Key? key, required void Function(Action<Intent>) listener, required Action<Intent> action, required Widget child})
  ActionListener$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required void Function(Action<Intent>) listener} , defaultValue:none
    required ActionListenerCallback listener,

    /// optionalParameters: {required Action<Intent> action} , defaultValue:none
    required Action<Intent> action,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          listener: listener,
          action: action,
          child: child,
        ) {
    mateBuilder = (p) => ActionListener$Mate(
          key: p.get('key').build(),
          listener: p.get('listener').build(),
          action: p.get('action').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('listener', listener);
    mateUse('action', action);
    mateUse('child', child);
  }
}

/// class CallbackAction<T extends Intent> extends Action<T>
class CallbackAction$Mate<T extends Intent> extends CallbackAction<T>
    with Mate {
  /// CallbackAction<T> CallbackAction({required Object? Function(T) onInvoke})
  CallbackAction$Mate(
      {
      /// optionalParameters: {required Object? Function(T) onInvoke} , defaultValue:none
      required OnInvokeCallback<T> onInvoke})
      : super(onInvoke: onInvoke) {
    mateBuilder =
        (p) => CallbackAction$Mate<T>(onInvoke: p.get('onInvoke').build());
    mateUse('onInvoke', onInvoke);
  }
}

/// class Actions extends StatefulWidget
class Actions$Mate extends Actions with Mate {
  /// Actions Actions({Key? key, ActionDispatcher? dispatcher, required Map<Type, Action<Intent>> actions, required Widget child})
  Actions$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {ActionDispatcher? dispatcher} , defaultValue:none
    ActionDispatcher? dispatcher,

    /// optionalParameters: {required Map<Type, Action<Intent>> actions} , defaultValue:none
    required Map<Type, Action<Intent>> actions,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          dispatcher: dispatcher,
          actions: actions,
          child: child,
        ) {
    mateBuilder = (p) => Actions$Mate(
          key: p.get('key').build(),
          dispatcher: p.get('dispatcher').build(),
          actions: p.get('actions').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('dispatcher', dispatcher);
    mateUse('actions', actions);
    mateUse('child', child);
  }
}

/// class FocusableActionDetector extends StatefulWidget
class FocusableActionDetector$Mate extends FocusableActionDetector with Mate {
  /// FocusableActionDetector FocusableActionDetector({Key? key, bool enabled = true, FocusNode? focusNode, bool autofocus = false, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, void Function(bool)? onShowFocusHighlight, void Function(bool)? onShowHoverHighlight, void Function(bool)? onFocusChange, MouseCursor mouseCursor = MouseCursor.defer, bool includeFocusSemantics = true, required Widget child})
  FocusableActionDetector$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {bool enabled = true} , defaultValue:Literal
    bool enabled = true,

    /// optionalParameters: {FocusNode? focusNode} , defaultValue:none
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , defaultValue:Literal
    bool autofocus = false,

    /// optionalParameters: {bool descendantsAreFocusable = true} , defaultValue:Literal
    bool descendantsAreFocusable = true,

    /// optionalParameters: {bool descendantsAreTraversable = true} , defaultValue:Literal
    bool descendantsAreTraversable = true,

    /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , defaultValue:none
    Map<ShortcutActivator, Intent>? shortcuts,

    /// optionalParameters: {Map<Type, Action<Intent>>? actions} , defaultValue:none
    Map<Type, Action<Intent>>? actions,

    /// optionalParameters: {void Function(bool)? onShowFocusHighlight} , defaultValue:none
    ValueChanged<bool>? onShowFocusHighlight,

    /// optionalParameters: {void Function(bool)? onShowHoverHighlight} , defaultValue:none
    ValueChanged<bool>? onShowHoverHighlight,

    /// optionalParameters: {void Function(bool)? onFocusChange} , defaultValue:none
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {MouseCursor mouseCursor = MouseCursor.defer} , defaultValue:unprocessed
    required MouseCursor mouseCursor,

    /// optionalParameters: {bool includeFocusSemantics = true} , defaultValue:Literal
    bool includeFocusSemantics = true,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          enabled: enabled,
          focusNode: focusNode,
          autofocus: autofocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          shortcuts: shortcuts,
          actions: actions,
          onShowFocusHighlight: onShowFocusHighlight,
          onShowHoverHighlight: onShowHoverHighlight,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          includeFocusSemantics: includeFocusSemantics,
          child: child,
        ) {
    mateBuilder = (p) => FocusableActionDetector$Mate(
          key: p.get('key').build(),
          enabled: p.get('enabled').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
          descendantsAreFocusable: p.get('descendantsAreFocusable').build(),
          descendantsAreTraversable: p.get('descendantsAreTraversable').build(),
          shortcuts: p.get('shortcuts').build(),
          actions: p.get('actions').build(),
          onShowFocusHighlight: p.get('onShowFocusHighlight').build(),
          onShowHoverHighlight: p.get('onShowHoverHighlight').build(),
          onFocusChange: p.get('onFocusChange').build(),
          mouseCursor: p.get('mouseCursor').build(),
          includeFocusSemantics: p.get('includeFocusSemantics').build(),
          child: p.get('child').build(),
        );
    mateUse('key', key);
    mateUse('enabled', enabled);
    mateUse('focusNode', focusNode);
    mateUse('autofocus', autofocus);
    mateUse('descendantsAreFocusable', descendantsAreFocusable);
    mateUse('descendantsAreTraversable', descendantsAreTraversable);
    mateUse('shortcuts', shortcuts);
    mateUse('actions', actions);
    mateUse('onShowFocusHighlight', onShowFocusHighlight);
    mateUse('onShowHoverHighlight', onShowHoverHighlight);
    mateUse('onFocusChange', onFocusChange);
    mateUse('mouseCursor', mouseCursor);
    mateUse('includeFocusSemantics', includeFocusSemantics);
    mateUse('child', child);
  }
}

/// class VoidCallbackIntent extends Intent
class VoidCallbackIntent$Mate extends VoidCallbackIntent with Mate {
  /// VoidCallbackIntent VoidCallbackIntent(void Function() callback)
  VoidCallbackIntent$Mate(

      /// requiredParameters: void Function() callback
      VoidCallback callback)
      : super(callback) {
    mateBuilder = (p) => VoidCallbackIntent$Mate(p.get('callback').value);
    mateUse('callback', callback);
  }
}

/// class DoNothingAction extends Action<Intent>
class DoNothingAction$Mate extends DoNothingAction with Mate {
  /// DoNothingAction DoNothingAction({bool consumesKey = true})
  DoNothingAction$Mate(
      {
      /// optionalParameters: {bool consumesKey = true} , defaultValue:Literal
      bool consumesKey = true})
      : super(consumesKey: consumesKey) {
    mateBuilder =
        (p) => DoNothingAction$Mate(consumesKey: p.get('consumesKey').build());
    mateUse('consumesKey', consumesKey);
  }
}

/// class PrioritizedIntents extends Intent
class PrioritizedIntents$Mate extends PrioritizedIntents with Mate {
  /// PrioritizedIntents PrioritizedIntents({required List<Intent> orderedIntents})
  PrioritizedIntents$Mate(
      {
      /// optionalParameters: {required List<Intent> orderedIntents} , defaultValue:none
      required List<Intent> orderedIntents})
      : super(orderedIntents: orderedIntents) {
    mateBuilder = (p) => PrioritizedIntents$Mate(
        orderedIntents: p.get('orderedIntents').build());
    mateUse('orderedIntents', orderedIntents);
  }
}
