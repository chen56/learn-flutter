// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/actions.dart';import 'package:flutter/src/foundation/key.dart';import 'package:flutter/src/widgets/framework.dart';import 'dart:core';import 'package:flutter/src/widgets/focus_manager.dart';import 'package:flutter/src/widgets/shortcuts.dart';import 'package:flutter/src/foundation/basic_types.dart';import 'package:flutter/src/services/mouse_cursor.dart';import 'dart:ui';import 'package:note/mate.dart' show Mate;/// class ActionListener extends StatefulWidget
class ActionListener$Mate extends ActionListener with Mate {/// ActionListener ActionListener({Key? key, required void Function(Action<Intent>) listener, required Action<Intent> action, required Widget child})
ActionListener$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required void Function(Action<Intent>) listener} , hasDefaultValue:false, defaultValueCode:null
required ActionListenerCallback listener, /// optionalParameters: {required Action<Intent> action} , hasDefaultValue:false, defaultValueCode:null
required Action<Intent> action, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, listener: listener, action: action, child: child, ) { mateBuilder = (p) => ActionListener$Mate(key: p.get('key').build(), listener: p.get('listener').build(), action: p.get('action').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('listener', listener);
matePut('action', action);
matePut('child', child); }

 }
/// class CallbackAction<T extends Intent> extends Action<T>
class CallbackAction$Mate<T extends Intent> extends CallbackAction<T> with Mate {/// CallbackAction<T> CallbackAction({required Object? Function(T) onInvoke})
CallbackAction$Mate({/// optionalParameters: {required Object? Function(T) onInvoke} , hasDefaultValue:false, defaultValueCode:null
required OnInvokeCallback<T> onInvoke}) : super(onInvoke: onInvoke) { mateBuilder = (p) => CallbackAction$Mate<T>(onInvoke: p.get('onInvoke').build());
matePut('onInvoke', onInvoke); }

 }
/// class Actions extends StatefulWidget
class Actions$Mate extends Actions with Mate {/// Actions Actions({Key? key, ActionDispatcher? dispatcher, required Map<Type, Action<Intent>> actions, required Widget child})
Actions$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {ActionDispatcher? dispatcher} , hasDefaultValue:false, defaultValueCode:null
ActionDispatcher? dispatcher, /// optionalParameters: {required Map<Type, Action<Intent>> actions} , hasDefaultValue:false, defaultValueCode:null
required Map<Type,Action<Intent>> actions, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, dispatcher: dispatcher, actions: actions, child: child, ) { mateBuilder = (p) => Actions$Mate(key: p.get('key').build(), dispatcher: p.get('dispatcher').build(), actions: p.get('actions').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('dispatcher', dispatcher);
matePut('actions', actions);
matePut('child', child); }

 }
/// class FocusableActionDetector extends StatefulWidget
class FocusableActionDetector$Mate extends FocusableActionDetector with Mate {/// FocusableActionDetector FocusableActionDetector({Key? key, bool enabled = true, FocusNode? focusNode, bool autofocus = false, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, void Function(bool)? onShowFocusHighlight, void Function(bool)? onShowHoverHighlight, void Function(bool)? onFocusChange, MouseCursor mouseCursor = MouseCursor.defer, bool includeFocusSemantics = true, required Widget child})
FocusableActionDetector$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
required bool enabled, /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
FocusNode? focusNode, /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
required bool autofocus, /// optionalParameters: {bool descendantsAreFocusable = true} , hasDefaultValue:true, defaultValueCode:true
required bool descendantsAreFocusable, /// optionalParameters: {bool descendantsAreTraversable = true} , hasDefaultValue:true, defaultValueCode:true
required bool descendantsAreTraversable, /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , hasDefaultValue:false, defaultValueCode:null
Map<ShortcutActivator,Intent>? shortcuts, /// optionalParameters: {Map<Type, Action<Intent>>? actions} , hasDefaultValue:false, defaultValueCode:null
Map<Type,Action<Intent>>? actions, /// optionalParameters: {void Function(bool)? onShowFocusHighlight} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool>? onShowFocusHighlight, /// optionalParameters: {void Function(bool)? onShowHoverHighlight} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool>? onShowHoverHighlight, /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
ValueChanged<bool>? onFocusChange, /// optionalParameters: {MouseCursor mouseCursor = MouseCursor.defer} , hasDefaultValue:true, defaultValueCode:MouseCursor.defer
required MouseCursor mouseCursor, /// optionalParameters: {bool includeFocusSemantics = true} , hasDefaultValue:true, defaultValueCode:true
required bool includeFocusSemantics, /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
required Widget child, }) : super(key: key, enabled: enabled, focusNode: focusNode, autofocus: autofocus, descendantsAreFocusable: descendantsAreFocusable, descendantsAreTraversable: descendantsAreTraversable, shortcuts: shortcuts, actions: actions, onShowFocusHighlight: onShowFocusHighlight, onShowHoverHighlight: onShowHoverHighlight, onFocusChange: onFocusChange, mouseCursor: mouseCursor, includeFocusSemantics: includeFocusSemantics, child: child, ) { mateBuilder = (p) => FocusableActionDetector$Mate(key: p.get('key').build(), enabled: p.get('enabled').build(), focusNode: p.get('focusNode').build(), autofocus: p.get('autofocus').build(), descendantsAreFocusable: p.get('descendantsAreFocusable').build(), descendantsAreTraversable: p.get('descendantsAreTraversable').build(), shortcuts: p.get('shortcuts').build(), actions: p.get('actions').build(), onShowFocusHighlight: p.get('onShowFocusHighlight').build(), onShowHoverHighlight: p.get('onShowHoverHighlight').build(), onFocusChange: p.get('onFocusChange').build(), mouseCursor: p.get('mouseCursor').build(), includeFocusSemantics: p.get('includeFocusSemantics').build(), child: p.get('child').build(), );
matePut('key', key);
matePut('enabled', enabled);
matePut('focusNode', focusNode);
matePut('autofocus', autofocus);
matePut('descendantsAreFocusable', descendantsAreFocusable);
matePut('descendantsAreTraversable', descendantsAreTraversable);
matePut('shortcuts', shortcuts);
matePut('actions', actions);
matePut('onShowFocusHighlight', onShowFocusHighlight);
matePut('onShowHoverHighlight', onShowHoverHighlight);
matePut('onFocusChange', onFocusChange);
matePut('mouseCursor', mouseCursor);
matePut('includeFocusSemantics', includeFocusSemantics);
matePut('child', child); }

 }
/// class VoidCallbackIntent extends Intent
class VoidCallbackIntent$Mate extends VoidCallbackIntent with Mate {/// VoidCallbackIntent VoidCallbackIntent(void Function() callback)
VoidCallbackIntent$Mate(/// requiredParameters: void Function() callback 
VoidCallback callback) : super(callback) { mateBuilder = (p) => VoidCallbackIntent$Mate(p.get('callback').value);
matePut('callback', callback); }

 }
/// class DoNothingAction extends Action<Intent>
class DoNothingAction$Mate extends DoNothingAction with Mate {/// DoNothingAction DoNothingAction({bool consumesKey = true})
DoNothingAction$Mate({/// optionalParameters: {bool consumesKey = true} , hasDefaultValue:true, defaultValueCode:true
required bool consumesKey}) : super(consumesKey: consumesKey) { mateBuilder = (p) => DoNothingAction$Mate(consumesKey: p.get('consumesKey').build());
matePut('consumesKey', consumesKey); }

 }
/// class PrioritizedIntents extends Intent
class PrioritizedIntents$Mate extends PrioritizedIntents with Mate {/// PrioritizedIntents PrioritizedIntents({required List<Intent> orderedIntents})
PrioritizedIntents$Mate({/// optionalParameters: {required List<Intent> orderedIntents} , hasDefaultValue:false, defaultValueCode:null
required List<Intent> orderedIntents}) : super(orderedIntents: orderedIntents) { mateBuilder = (p) => PrioritizedIntents$Mate(orderedIntents: p.get('orderedIntents').build());
matePut('orderedIntents', orderedIntents); }

 }
