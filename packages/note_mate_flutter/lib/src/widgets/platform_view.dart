// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/platform_view.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/services/platform_views.dart';
import 'package:flutter/src/rendering/platform_view.dart';
import 'package:flutter/rendering.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/services/message_codec.dart';

/// class AndroidView extends StatefulWidget
class AndroidView$Mate extends AndroidView with Mate {
  /// AndroidView AndroidView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated, PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque, TextDirection? layoutDirection, Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers, dynamic creationParams, MessageCodec<dynamic>? creationParamsCodec, Clip clipBehavior = Clip.hardEdge})
  AndroidView$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required String viewType} , default:none
    required String viewType,

    /// optionalParameters: {void Function(int)? onPlatformViewCreated} , default:none
    PlatformViewCreatedCallback? onPlatformViewCreated,

    /// optionalParameters: {PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque} , default:processed=PrefixedIdentifierImpl
    PlatformViewHitTestBehavior hitTestBehavior =
        PlatformViewHitTestBehavior.opaque,

    /// optionalParameters: {TextDirection? layoutDirection} , default:none
    TextDirection? layoutDirection,

    /// optionalParameters: {Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers} , default:none
    Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers,

    /// optionalParameters: {dynamic creationParams} , default:none
    dynamic creationParams,

    /// optionalParameters: {MessageCodec<dynamic>? creationParamsCodec} , default:none
    MessageCodec<dynamic>? creationParamsCodec,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    Clip clipBehavior = Clip.hardEdge,
  }) : super(
          key: key,
          viewType: viewType,
          onPlatformViewCreated: onPlatformViewCreated,
          hitTestBehavior: hitTestBehavior,
          layoutDirection: layoutDirection,
          gestureRecognizers: gestureRecognizers,
          creationParams: creationParams,
          creationParamsCodec: creationParamsCodec,
          clipBehavior: clipBehavior,
        ) {
    mateBuilderName = 'AndroidView';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AndroidView$Mate(
          key: p.get('key').build(),
          viewType: p.get('viewType').build(),
          onPlatformViewCreated: p.get('onPlatformViewCreated').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          layoutDirection: p.get('layoutDirection').build(),
          gestureRecognizers: p.get('gestureRecognizers').build(),
          creationParams: p.get('creationParams').build(),
          creationParamsCodec: p.get('creationParamsCodec').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'viewType',
      viewType,
      isNamed: true,
    );
    mateUse(
      'onPlatformViewCreated',
      onPlatformViewCreated,
      isNamed: true,
    );
    mateUse(
      'hitTestBehavior',
      hitTestBehavior,
      isNamed: true,
      defaultValue: PlatformViewHitTestBehavior.opaque,
    );
    mateUse(
      'layoutDirection',
      layoutDirection,
      isNamed: true,
    );
    mateUse(
      'gestureRecognizers',
      gestureRecognizers,
      isNamed: true,
    );
    mateUse(
      'creationParams',
      creationParams,
      isNamed: true,
    );
    mateUse(
      'creationParamsCodec',
      creationParamsCodec,
      isNamed: true,
    );
    mateUse(
      'clipBehavior',
      clipBehavior,
      isNamed: true,
      defaultValue: Clip.hardEdge,
    );
  }
}

/// class UiKitView extends StatefulWidget
class UiKitView$Mate extends UiKitView with Mate {
  /// UiKitView UiKitView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated, PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque, TextDirection? layoutDirection, dynamic creationParams, MessageCodec<dynamic>? creationParamsCodec, Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers})
  UiKitView$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required String viewType} , default:none
    required String viewType,

    /// optionalParameters: {void Function(int)? onPlatformViewCreated} , default:none
    PlatformViewCreatedCallback? onPlatformViewCreated,

    /// optionalParameters: {PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque} , default:processed=PrefixedIdentifierImpl
    PlatformViewHitTestBehavior hitTestBehavior =
        PlatformViewHitTestBehavior.opaque,

    /// optionalParameters: {TextDirection? layoutDirection} , default:none
    TextDirection? layoutDirection,

    /// optionalParameters: {dynamic creationParams} , default:none
    dynamic creationParams,

    /// optionalParameters: {MessageCodec<dynamic>? creationParamsCodec} , default:none
    MessageCodec<dynamic>? creationParamsCodec,

    /// optionalParameters: {Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers} , default:none
    Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers,
  }) : super(
          key: key,
          viewType: viewType,
          onPlatformViewCreated: onPlatformViewCreated,
          hitTestBehavior: hitTestBehavior,
          layoutDirection: layoutDirection,
          creationParams: creationParams,
          creationParamsCodec: creationParamsCodec,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateBuilderName = 'UiKitView';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => UiKitView$Mate(
          key: p.get('key').build(),
          viewType: p.get('viewType').build(),
          onPlatformViewCreated: p.get('onPlatformViewCreated').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          layoutDirection: p.get('layoutDirection').build(),
          creationParams: p.get('creationParams').build(),
          creationParamsCodec: p.get('creationParamsCodec').build(),
          gestureRecognizers: p.get('gestureRecognizers').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'viewType',
      viewType,
      isNamed: true,
    );
    mateUse(
      'onPlatformViewCreated',
      onPlatformViewCreated,
      isNamed: true,
    );
    mateUse(
      'hitTestBehavior',
      hitTestBehavior,
      isNamed: true,
      defaultValue: PlatformViewHitTestBehavior.opaque,
    );
    mateUse(
      'layoutDirection',
      layoutDirection,
      isNamed: true,
    );
    mateUse(
      'creationParams',
      creationParams,
      isNamed: true,
    );
    mateUse(
      'creationParamsCodec',
      creationParamsCodec,
      isNamed: true,
    );
    mateUse(
      'gestureRecognizers',
      gestureRecognizers,
      isNamed: true,
    );
  }
}

/// class HtmlElementView extends StatelessWidget
class HtmlElementView$Mate extends HtmlElementView with Mate {
  /// HtmlElementView HtmlElementView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated})
  HtmlElementView$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required String viewType} , default:none
    required String viewType,

    /// optionalParameters: {void Function(int)? onPlatformViewCreated} , default:none
    PlatformViewCreatedCallback? onPlatformViewCreated,
  }) : super(
          key: key,
          viewType: viewType,
          onPlatformViewCreated: onPlatformViewCreated,
        ) {
    mateBuilderName = 'HtmlElementView';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => HtmlElementView$Mate(
          key: p.get('key').build(),
          viewType: p.get('viewType').build(),
          onPlatformViewCreated: p.get('onPlatformViewCreated').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'viewType',
      viewType,
      isNamed: true,
    );
    mateUse(
      'onPlatformViewCreated',
      onPlatformViewCreated,
      isNamed: true,
    );
  }
}

/// class PlatformViewLink extends StatefulWidget
class PlatformViewLink$Mate extends PlatformViewLink with Mate {
  /// PlatformViewLink PlatformViewLink({Key? key, required Widget Function(BuildContext, PlatformViewController) surfaceFactory, required PlatformViewController Function(PlatformViewCreationParams) onCreatePlatformView, required String viewType})
  PlatformViewLink$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, PlatformViewController) surfaceFactory} , default:none
    required PlatformViewSurfaceFactory surfaceFactory,

    /// optionalParameters: {required PlatformViewController Function(PlatformViewCreationParams) onCreatePlatformView} , default:none
    required CreatePlatformViewCallback onCreatePlatformView,

    /// optionalParameters: {required String viewType} , default:none
    required String viewType,
  }) : super(
          key: key,
          surfaceFactory: surfaceFactory,
          onCreatePlatformView: onCreatePlatformView,
          viewType: viewType,
        ) {
    mateBuilderName = 'PlatformViewLink';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PlatformViewLink$Mate(
          key: p.get('key').build(),
          surfaceFactory: p.get('surfaceFactory').build(),
          onCreatePlatformView: p.get('onCreatePlatformView').build(),
          viewType: p.get('viewType').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'surfaceFactory',
      surfaceFactory,
      isNamed: true,
    );
    mateUse(
      'onCreatePlatformView',
      onCreatePlatformView,
      isNamed: true,
    );
    mateUse(
      'viewType',
      viewType,
      isNamed: true,
    );
  }
}

/// class PlatformViewSurface extends LeafRenderObjectWidget
class PlatformViewSurface$Mate extends PlatformViewSurface with Mate {
  /// PlatformViewSurface PlatformViewSurface({Key? key, required PlatformViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  PlatformViewSurface$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required PlatformViewController controller} , default:none
    required PlatformViewController controller,

    /// optionalParameters: {required PlatformViewHitTestBehavior hitTestBehavior} , default:none
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// optionalParameters: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers} , default:none
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) : super(
          key: key,
          controller: controller,
          hitTestBehavior: hitTestBehavior,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateBuilderName = 'PlatformViewSurface';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PlatformViewSurface$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          gestureRecognizers: p.get('gestureRecognizers').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'hitTestBehavior',
      hitTestBehavior,
      isNamed: true,
    );
    mateUse(
      'gestureRecognizers',
      gestureRecognizers,
      isNamed: true,
    );
  }
}

/// class AndroidViewSurface extends StatefulWidget
class AndroidViewSurface$Mate extends AndroidViewSurface with Mate {
  /// AndroidViewSurface AndroidViewSurface({Key? key, required AndroidViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  AndroidViewSurface$Mate({
    /// optionalParameters: {Key? key} , default:none
    Key? key,

    /// optionalParameters: {required AndroidViewController controller} , default:none
    required AndroidViewController controller,

    /// optionalParameters: {required PlatformViewHitTestBehavior hitTestBehavior} , default:none
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// optionalParameters: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers} , default:none
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) : super(
          key: key,
          controller: controller,
          hitTestBehavior: hitTestBehavior,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateBuilderName = 'AndroidViewSurface';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AndroidViewSurface$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          gestureRecognizers: p.get('gestureRecognizers').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'controller',
      controller,
      isNamed: true,
    );
    mateUse(
      'hitTestBehavior',
      hitTestBehavior,
      isNamed: true,
    );
    mateUse(
      'gestureRecognizers',
      gestureRecognizers,
      isNamed: true,
    );
  }
}
