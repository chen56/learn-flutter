// /// Generated by gen_maters.dart, please don't edit! 

import 'package:flutter/src/widgets/modal_barrier.dart';import 'package:flutter/src/foundation/key.dart';import 'dart:ui';import 'dart:core';import 'package:flutter/src/foundation/change_notifier.dart';import 'package:flutter/src/painting/edge_insets.dart';import 'package:flutter/src/animation/animation.dart';import 'package:note/mate.dart' show Mate;/// class ModalBarrier extends StatelessWidget
class ModalBarrier$Mate extends ModalBarrier with Mate {/// ModalBarrier ModalBarrier({Key? key, Color? color, bool dismissible = true, void Function()? onDismiss, String? semanticsLabel, bool? barrierSemanticsDismissible = true, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
ModalBarrier$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
Color? color, /// optionalParameters: {bool dismissible = true} , hasDefaultValue:true, defaultValueCode:true
required bool dismissible, /// optionalParameters: {void Function()? onDismiss} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onDismiss, /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
String? semanticsLabel, /// optionalParameters: {bool? barrierSemanticsDismissible = true} , hasDefaultValue:true, defaultValueCode:true
bool? barrierSemanticsDismissible, /// optionalParameters: {ValueNotifier<EdgeInsets>? clipDetailsNotifier} , hasDefaultValue:false, defaultValueCode:null
ValueNotifier<EdgeInsets>? clipDetailsNotifier, /// optionalParameters: {String? semanticsOnTapHint} , hasDefaultValue:false, defaultValueCode:null
String? semanticsOnTapHint, }) : super(key: key, color: color, dismissible: dismissible, onDismiss: onDismiss, semanticsLabel: semanticsLabel, barrierSemanticsDismissible: barrierSemanticsDismissible, clipDetailsNotifier: clipDetailsNotifier, semanticsOnTapHint: semanticsOnTapHint, ) { mateBuilder = (p) => ModalBarrier$Mate(key: p.get('key').build(), color: p.get('color').build(), dismissible: p.get('dismissible').build(), onDismiss: p.get('onDismiss').build(), semanticsLabel: p.get('semanticsLabel').build(), barrierSemanticsDismissible: p.get('barrierSemanticsDismissible').build(), clipDetailsNotifier: p.get('clipDetailsNotifier').build(), semanticsOnTapHint: p.get('semanticsOnTapHint').build(), );
matePut('key', key);
matePut('color', color);
matePut('dismissible', dismissible);
matePut('onDismiss', onDismiss);
matePut('semanticsLabel', semanticsLabel);
matePut('barrierSemanticsDismissible', barrierSemanticsDismissible);
matePut('clipDetailsNotifier', clipDetailsNotifier);
matePut('semanticsOnTapHint', semanticsOnTapHint); }

 }
/// class AnimatedModalBarrier extends AnimatedWidget
class AnimatedModalBarrier$Mate extends AnimatedModalBarrier with Mate {/// AnimatedModalBarrier AnimatedModalBarrier({Key? key, required Animation<Color?> color, bool dismissible = true, String? semanticsLabel, bool? barrierSemanticsDismissible, void Function()? onDismiss, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
AnimatedModalBarrier$Mate({/// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
Key? key, /// optionalParameters: {required Animation<Color?> color} , hasDefaultValue:false, defaultValueCode:null
required Animation<Color?> color, /// optionalParameters: {bool dismissible = true} , hasDefaultValue:true, defaultValueCode:true
required bool dismissible, /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
String? semanticsLabel, /// optionalParameters: {bool? barrierSemanticsDismissible} , hasDefaultValue:false, defaultValueCode:null
bool? barrierSemanticsDismissible, /// optionalParameters: {void Function()? onDismiss} , hasDefaultValue:false, defaultValueCode:null
VoidCallback? onDismiss, /// optionalParameters: {ValueNotifier<EdgeInsets>? clipDetailsNotifier} , hasDefaultValue:false, defaultValueCode:null
ValueNotifier<EdgeInsets>? clipDetailsNotifier, /// optionalParameters: {String? semanticsOnTapHint} , hasDefaultValue:false, defaultValueCode:null
String? semanticsOnTapHint, }) : super(key: key, color: color, dismissible: dismissible, semanticsLabel: semanticsLabel, barrierSemanticsDismissible: barrierSemanticsDismissible, onDismiss: onDismiss, clipDetailsNotifier: clipDetailsNotifier, semanticsOnTapHint: semanticsOnTapHint, ) { mateBuilder = (p) => AnimatedModalBarrier$Mate(key: p.get('key').build(), color: p.get('color').build(), dismissible: p.get('dismissible').build(), semanticsLabel: p.get('semanticsLabel').build(), barrierSemanticsDismissible: p.get('barrierSemanticsDismissible').build(), onDismiss: p.get('onDismiss').build(), clipDetailsNotifier: p.get('clipDetailsNotifier').build(), semanticsOnTapHint: p.get('semanticsOnTapHint').build(), );
matePut('key', key);
matePut('color', color);
matePut('dismissible', dismissible);
matePut('semanticsLabel', semanticsLabel);
matePut('barrierSemanticsDismissible', barrierSemanticsDismissible);
matePut('onDismiss', onDismiss);
matePut('clipDetailsNotifier', clipDetailsNotifier);
matePut('semanticsOnTapHint', semanticsOnTapHint); }

 }
