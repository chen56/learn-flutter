// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/modal_barrier.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/foundation/change_notifier.dart' as _i5;
import 'package:flutter/src/painting/edge_insets.dart' as _i6;
import 'package:flutter/src/animation/animation.dart' as _i7;

/// class ModalBarrier extends StatelessWidget
class ModalBarrier$Mate extends _i1.ModalBarrier with _i2.Mate {
  /// ModalBarrier ModalBarrier({Key? key, Color? color, bool dismissible = true, void Function()? onDismiss, String? semanticsLabel, bool? barrierSemanticsDismissible = true, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
  ModalBarrier$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {Color? color} , default:none
    _i4.Color? color,

    /// optionalParameters: {bool dismissible = true} , default:processed=BooleanLiteralImpl
    bool dismissible = true,

    /// optionalParameters: {void Function()? onDismiss} , default:none
    _i4.VoidCallback? onDismiss,

    /// optionalParameters: {String? semanticsLabel} , default:none
    String? semanticsLabel,

    /// optionalParameters: {bool? barrierSemanticsDismissible = true} , default:processed=BooleanLiteralImpl
    bool? barrierSemanticsDismissible = true,

    /// optionalParameters: {ValueNotifier<EdgeInsets>? clipDetailsNotifier} , default:none
    _i5.ValueNotifier<_i6.EdgeInsets>? clipDetailsNotifier,

    /// optionalParameters: {String? semanticsOnTapHint} , default:none
    String? semanticsOnTapHint,
  }) : super(
          key: key,
          color: color,
          dismissible: dismissible,
          onDismiss: onDismiss,
          semanticsLabel: semanticsLabel,
          barrierSemanticsDismissible: barrierSemanticsDismissible,
          clipDetailsNotifier: clipDetailsNotifier,
          semanticsOnTapHint: semanticsOnTapHint,
        ) {
    mateBuilderName = 'ModalBarrier';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ModalBarrier$Mate(
          key: p.get('key').build(),
          color: p.get('color').build(),
          dismissible: p.get('dismissible').build(),
          onDismiss: p.get('onDismiss').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          barrierSemanticsDismissible: p.get('barrierSemanticsDismissible').build(),
          clipDetailsNotifier: p.get('clipDetailsNotifier').build(),
          semanticsOnTapHint: p.get('semanticsOnTapHint').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'dismissible',
      dismissible,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'onDismiss',
      onDismiss,
      isNamed: true,
    );
    mateUse(
      'semanticsLabel',
      semanticsLabel,
      isNamed: true,
    );
    mateUse(
      'barrierSemanticsDismissible',
      barrierSemanticsDismissible,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'clipDetailsNotifier',
      clipDetailsNotifier,
      isNamed: true,
    );
    mateUse(
      'semanticsOnTapHint',
      semanticsOnTapHint,
      isNamed: true,
    );
  }
}

/// class AnimatedModalBarrier extends AnimatedWidget
class AnimatedModalBarrier$Mate extends _i1.AnimatedModalBarrier with _i2.Mate {
  /// AnimatedModalBarrier AnimatedModalBarrier({Key? key, required Animation<Color?> color, bool dismissible = true, String? semanticsLabel, bool? barrierSemanticsDismissible, void Function()? onDismiss, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
  AnimatedModalBarrier$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Animation<Color?> color} , default:none
    required _i7.Animation<_i4.Color?> color,

    /// optionalParameters: {bool dismissible = true} , default:processed=BooleanLiteralImpl
    bool dismissible = true,

    /// optionalParameters: {String? semanticsLabel} , default:none
    String? semanticsLabel,

    /// optionalParameters: {bool? barrierSemanticsDismissible} , default:none
    bool? barrierSemanticsDismissible,

    /// optionalParameters: {void Function()? onDismiss} , default:none
    _i4.VoidCallback? onDismiss,

    /// optionalParameters: {ValueNotifier<EdgeInsets>? clipDetailsNotifier} , default:none
    _i5.ValueNotifier<_i6.EdgeInsets>? clipDetailsNotifier,

    /// optionalParameters: {String? semanticsOnTapHint} , default:none
    String? semanticsOnTapHint,
  }) : super(
          key: key,
          color: color,
          dismissible: dismissible,
          semanticsLabel: semanticsLabel,
          barrierSemanticsDismissible: barrierSemanticsDismissible,
          onDismiss: onDismiss,
          clipDetailsNotifier: clipDetailsNotifier,
          semanticsOnTapHint: semanticsOnTapHint,
        ) {
    mateBuilderName = 'AnimatedModalBarrier';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AnimatedModalBarrier$Mate(
          key: p.get('key').build(),
          color: p.get('color').build(),
          dismissible: p.get('dismissible').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          barrierSemanticsDismissible: p.get('barrierSemanticsDismissible').build(),
          onDismiss: p.get('onDismiss').build(),
          clipDetailsNotifier: p.get('clipDetailsNotifier').build(),
          semanticsOnTapHint: p.get('semanticsOnTapHint').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'color',
      color,
      isNamed: true,
    );
    mateUse(
      'dismissible',
      dismissible,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'semanticsLabel',
      semanticsLabel,
      isNamed: true,
    );
    mateUse(
      'barrierSemanticsDismissible',
      barrierSemanticsDismissible,
      isNamed: true,
    );
    mateUse(
      'onDismiss',
      onDismiss,
      isNamed: true,
    );
    mateUse(
      'clipDetailsNotifier',
      clipDetailsNotifier,
      isNamed: true,
    );
    mateUse(
      'semanticsOnTapHint',
      semanticsOnTapHint,
      isNamed: true,
    );
  }
}
