// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/modal_barrier.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/animation/animation.dart';

/// class ModalBarrier extends StatelessWidget
class ModalBarrier$Mate extends ModalBarrier with Mate {
  /// ModalBarrier ModalBarrier({Key? key, Color? color, bool dismissible = true, void Function()? onDismiss, String? semanticsLabel, bool? barrierSemanticsDismissible = true, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
  ModalBarrier$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {Color? color} , defaultValue:none
    Color? color,

    /// optionalParameters: {bool dismissible = true} , defaultValue:Literal
    bool dismissible = true,

    /// optionalParameters: {void Function()? onDismiss} , defaultValue:none
    VoidCallback? onDismiss,

    /// optionalParameters: {String? semanticsLabel} , defaultValue:none
    String? semanticsLabel,

    /// optionalParameters: {bool? barrierSemanticsDismissible = true} , defaultValue:Literal
    bool? barrierSemanticsDismissible = true,

    /// optionalParameters: {ValueNotifier<EdgeInsets>? clipDetailsNotifier} , defaultValue:none
    ValueNotifier<EdgeInsets>? clipDetailsNotifier,

    /// optionalParameters: {String? semanticsOnTapHint} , defaultValue:none
    String? semanticsOnTapHint,
  }) : super(
          key: key,
          color: color,
          dismissible: dismissible,
          onDismiss: onDismiss,
          semanticsLabel: semanticsLabel,
          barrierSemanticsDismissible: barrierSemanticsDismissible,
          clipDetailsNotifier: clipDetailsNotifier,
          semanticsOnTapHint: semanticsOnTapHint,
        ) {
    mateCreateName = 'ModalBarrier';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ModalBarrier$Mate(
          key: p.get('key').build(),
          color: p.get('color').build(),
          dismissible: p.get('dismissible').build(),
          onDismiss: p.get('onDismiss').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          barrierSemanticsDismissible: p.get('barrierSemanticsDismissible').build(),
          clipDetailsNotifier: p.get('clipDetailsNotifier').build(),
          semanticsOnTapHint: p.get('semanticsOnTapHint').build(),
        );
    mateUse('key', key);
    mateUse('color', color);
    mateUse('dismissible', dismissible);
    mateUse('onDismiss', onDismiss);
    mateUse('semanticsLabel', semanticsLabel);
    mateUse('barrierSemanticsDismissible', barrierSemanticsDismissible);
    mateUse('clipDetailsNotifier', clipDetailsNotifier);
    mateUse('semanticsOnTapHint', semanticsOnTapHint);
  }
}

/// class AnimatedModalBarrier extends AnimatedWidget
class AnimatedModalBarrier$Mate extends AnimatedModalBarrier with Mate {
  /// AnimatedModalBarrier AnimatedModalBarrier({Key? key, required Animation<Color?> color, bool dismissible = true, String? semanticsLabel, bool? barrierSemanticsDismissible, void Function()? onDismiss, ValueNotifier<EdgeInsets>? clipDetailsNotifier, String? semanticsOnTapHint})
  AnimatedModalBarrier$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {required Animation<Color?> color} , defaultValue:none
    required Animation<Color?> color,

    /// optionalParameters: {bool dismissible = true} , defaultValue:Literal
    bool dismissible = true,

    /// optionalParameters: {String? semanticsLabel} , defaultValue:none
    String? semanticsLabel,

    /// optionalParameters: {bool? barrierSemanticsDismissible} , defaultValue:none
    bool? barrierSemanticsDismissible,

    /// optionalParameters: {void Function()? onDismiss} , defaultValue:none
    VoidCallback? onDismiss,

    /// optionalParameters: {ValueNotifier<EdgeInsets>? clipDetailsNotifier} , defaultValue:none
    ValueNotifier<EdgeInsets>? clipDetailsNotifier,

    /// optionalParameters: {String? semanticsOnTapHint} , defaultValue:none
    String? semanticsOnTapHint,
  }) : super(
          key: key,
          color: color,
          dismissible: dismissible,
          semanticsLabel: semanticsLabel,
          barrierSemanticsDismissible: barrierSemanticsDismissible,
          onDismiss: onDismiss,
          clipDetailsNotifier: clipDetailsNotifier,
          semanticsOnTapHint: semanticsOnTapHint,
        ) {
    mateCreateName = 'AnimatedModalBarrier';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => AnimatedModalBarrier$Mate(
          key: p.get('key').build(),
          color: p.get('color').build(),
          dismissible: p.get('dismissible').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          barrierSemanticsDismissible: p.get('barrierSemanticsDismissible').build(),
          onDismiss: p.get('onDismiss').build(),
          clipDetailsNotifier: p.get('clipDetailsNotifier').build(),
          semanticsOnTapHint: p.get('semanticsOnTapHint').build(),
        );
    mateUse('key', key);
    mateUse('color', color);
    mateUse('dismissible', dismissible);
    mateUse('semanticsLabel', semanticsLabel);
    mateUse('barrierSemanticsDismissible', barrierSemanticsDismissible);
    mateUse('onDismiss', onDismiss);
    mateUse('clipDetailsNotifier', clipDetailsNotifier);
    mateUse('semanticsOnTapHint', semanticsOnTapHint);
  }
}
