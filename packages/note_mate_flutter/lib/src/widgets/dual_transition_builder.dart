// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/dual_transition_builder.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/animation/animation.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;

/// class DualTransitionBuilder extends StatefulWidget
class DualTransitionBuilder$Mate extends _i1.DualTransitionBuilder with _i2.Mate {
  /// DualTransitionBuilder DualTransitionBuilder({Key? key, required Animation<double> animation, required Widget Function(BuildContext, Animation<double>, Widget?) forwardBuilder, required Widget Function(BuildContext, Animation<double>, Widget?) reverseBuilder, Widget? child})
  DualTransitionBuilder$Mate({
    /// optionalParameters: {Key? key} , default:none
    _i3.Key? key,

    /// optionalParameters: {required Animation<double> animation} , default:none
    required _i4.Animation<double> animation,

    /// optionalParameters: {required Widget Function(BuildContext, Animation<double>, Widget?) forwardBuilder} , default:none
    required _i1.AnimatedTransitionBuilder forwardBuilder,

    /// optionalParameters: {required Widget Function(BuildContext, Animation<double>, Widget?) reverseBuilder} , default:none
    required _i1.AnimatedTransitionBuilder reverseBuilder,

    /// optionalParameters: {Widget? child} , default:none
    _i5.Widget? child,
  }) : super(
          key: key,
          animation: animation,
          forwardBuilder: forwardBuilder,
          reverseBuilder: reverseBuilder,
          child: child,
        ) {
    mateBuilderName = 'DualTransitionBuilder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DualTransitionBuilder$Mate(
          key: p.get('key').build(),
          animation: p.get('animation').build(),
          forwardBuilder: p.get('forwardBuilder').build(),
          reverseBuilder: p.get('reverseBuilder').build(),
          child: p.get('child').build(),
        );
    mateUse(
      'key',
      key,
      isNamed: true,
    );
    mateUse(
      'animation',
      animation,
      isNamed: true,
    );
    mateUse(
      'forwardBuilder',
      forwardBuilder,
      isNamed: true,
    );
    mateUse(
      'reverseBuilder',
      reverseBuilder,
      isNamed: true,
    );
    mateUse(
      'child',
      child,
      isNamed: true,
    );
  }
}
