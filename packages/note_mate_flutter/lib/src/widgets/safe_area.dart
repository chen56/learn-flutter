// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/safe_area.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class SafeArea extends StatelessWidget
class SafeArea$Mate extends SafeArea with Mate {
  /// SafeArea SafeArea({Key? key, bool left = true, bool top = true, bool right = true, bool bottom = true, EdgeInsets minimum = EdgeInsets.zero, bool maintainBottomViewPadding = false, required Widget child})
  SafeArea$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {bool left = true} , defaultValue:Literal
    bool left = true,

    /// optionalParameters: {bool top = true} , defaultValue:Literal
    bool top = true,

    /// optionalParameters: {bool right = true} , defaultValue:Literal
    bool right = true,

    /// optionalParameters: {bool bottom = true} , defaultValue:Literal
    bool bottom = true,

    /// optionalParameters: {EdgeInsets minimum = EdgeInsets.zero} , defaultValue:unprocessed
    required EdgeInsets minimum,

    /// optionalParameters: {bool maintainBottomViewPadding = false} , defaultValue:Literal
    bool maintainBottomViewPadding = false,

    /// optionalParameters: {required Widget child} , defaultValue:none
    required Widget child,
  }) : super(
          key: key,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          minimum: minimum,
          maintainBottomViewPadding: maintainBottomViewPadding,
          child: child,
        ) {
    mateBuilder = (p) => SafeArea$Mate(
          key: p.get('key').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          minimum: p.get('minimum').build(),
          maintainBottomViewPadding: p.get('maintainBottomViewPadding').build(),
          child: p.get('child').build(),
        );
    mateDeclare('key', key);
    mateDeclare('left', left);
    mateDeclare('top', top);
    mateDeclare('right', right);
    mateDeclare('bottom', bottom);
    mateDeclare('minimum', minimum);
    mateDeclare('maintainBottomViewPadding', maintainBottomViewPadding);
    mateDeclare('child', child);
  }
}

/// class SliverSafeArea extends StatelessWidget
class SliverSafeArea$Mate extends SliverSafeArea with Mate {
  /// SliverSafeArea SliverSafeArea({Key? key, bool left = true, bool top = true, bool right = true, bool bottom = true, EdgeInsets minimum = EdgeInsets.zero, required Widget sliver})
  SliverSafeArea$Mate({
    /// optionalParameters: {Key? key} , defaultValue:none
    Key? key,

    /// optionalParameters: {bool left = true} , defaultValue:Literal
    bool left = true,

    /// optionalParameters: {bool top = true} , defaultValue:Literal
    bool top = true,

    /// optionalParameters: {bool right = true} , defaultValue:Literal
    bool right = true,

    /// optionalParameters: {bool bottom = true} , defaultValue:Literal
    bool bottom = true,

    /// optionalParameters: {EdgeInsets minimum = EdgeInsets.zero} , defaultValue:unprocessed
    required EdgeInsets minimum,

    /// optionalParameters: {required Widget sliver} , defaultValue:none
    required Widget sliver,
  }) : super(
          key: key,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          minimum: minimum,
          sliver: sliver,
        ) {
    mateBuilder = (p) => SliverSafeArea$Mate(
          key: p.get('key').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          minimum: p.get('minimum').build(),
          sliver: p.get('sliver').build(),
        );
    mateDeclare('key', key);
    mateDeclare('left', left);
    mateDeclare('top', top);
    mateDeclare('right', right);
    mateDeclare('bottom', bottom);
    mateDeclare('minimum', minimum);
    mateDeclare('sliver', sliver);
  }
}
