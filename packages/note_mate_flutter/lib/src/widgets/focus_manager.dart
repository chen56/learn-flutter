// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/focus_manager.dart' as _i1;
import 'package:note/mate.dart' as _i2;
import 'package:flutter/src/widgets/focus_traversal.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i4;

/// class FocusNode with DiagnosticableTreeMixin, ChangeNotifier
class FocusNode$Mate extends _i1.FocusNode with _i2.Mate {
  /// FocusNode FocusNode({String? debugLabel, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, bool skipTraversal = false, bool canRequestFocus = true, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true})
  FocusNode$Mate({
    /// optionalParameters: {String? debugLabel} , default:none
    String? debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , default:none
    _i1.FocusOnKeyCallback? onKey,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , default:none
    _i1.FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {bool skipTraversal = false} , default:processed=BooleanLiteralImpl
    bool skipTraversal = false,

    /// optionalParameters: {bool canRequestFocus = true} , default:processed=BooleanLiteralImpl
    bool canRequestFocus = true,

    /// optionalParameters: {bool descendantsAreFocusable = true} , default:processed=BooleanLiteralImpl
    bool descendantsAreFocusable = true,

    /// optionalParameters: {bool descendantsAreTraversable = true} , default:processed=BooleanLiteralImpl
    bool descendantsAreTraversable = true,
  }) : super(
          debugLabel: debugLabel,
          onKey: onKey,
          onKeyEvent: onKeyEvent,
          skipTraversal: skipTraversal,
          canRequestFocus: canRequestFocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
        ) {
    mateBuilderName = 'FocusNode';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FocusNode$Mate(
          debugLabel: p.get('debugLabel').build(),
          onKey: p.get('onKey').build(),
          onKeyEvent: p.get('onKeyEvent').build(),
          skipTraversal: p.get('skipTraversal').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          descendantsAreFocusable: p.get('descendantsAreFocusable').build(),
          descendantsAreTraversable: p.get('descendantsAreTraversable').build(),
        );
    mateUse(
      'debugLabel',
      debugLabel,
      isNamed: true,
    );
    mateUse(
      'onKey',
      onKey,
      isNamed: true,
    );
    mateUse(
      'onKeyEvent',
      onKeyEvent,
      isNamed: true,
    );
    mateUse(
      'skipTraversal',
      skipTraversal,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'canRequestFocus',
      canRequestFocus,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'descendantsAreFocusable',
      descendantsAreFocusable,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'descendantsAreTraversable',
      descendantsAreTraversable,
      isNamed: true,
      defaultValue: true,
    );
  }
}

/// class FocusScopeNode extends FocusNode
class FocusScopeNode$Mate extends _i1.FocusScopeNode with _i2.Mate {
  /// FocusScopeNode FocusScopeNode({String? debugLabel, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool skipTraversal = false, bool canRequestFocus = true, TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop})
  FocusScopeNode$Mate({
    /// optionalParameters: {String? debugLabel} , default:none
    String? debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , default:none
    _i1.FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , default:none
    _i1.FocusOnKeyCallback? onKey,

    /// optionalParameters: {bool skipTraversal = false} , default:processed=BooleanLiteralImpl
    bool skipTraversal = false,

    /// optionalParameters: {bool canRequestFocus = true} , default:processed=BooleanLiteralImpl
    bool canRequestFocus = true,

    /// optionalParameters: {TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop} , default:processed=PrefixedIdentifierImpl
    _i3.TraversalEdgeBehavior traversalEdgeBehavior = _i4.TraversalEdgeBehavior.closedLoop,
  }) : super(
          debugLabel: debugLabel,
          onKeyEvent: onKeyEvent,
          onKey: onKey,
          skipTraversal: skipTraversal,
          canRequestFocus: canRequestFocus,
          traversalEdgeBehavior: traversalEdgeBehavior,
        ) {
    mateBuilderName = 'FocusScopeNode';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FocusScopeNode$Mate(
          debugLabel: p.get('debugLabel').build(),
          onKeyEvent: p.get('onKeyEvent').build(),
          onKey: p.get('onKey').build(),
          skipTraversal: p.get('skipTraversal').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          traversalEdgeBehavior: p.get('traversalEdgeBehavior').build(),
        );
    mateUse(
      'debugLabel',
      debugLabel,
      isNamed: true,
    );
    mateUse(
      'onKeyEvent',
      onKeyEvent,
      isNamed: true,
    );
    mateUse(
      'onKey',
      onKey,
      isNamed: true,
    );
    mateUse(
      'skipTraversal',
      skipTraversal,
      isNamed: true,
      defaultValue: false,
    );
    mateUse(
      'canRequestFocus',
      canRequestFocus,
      isNamed: true,
      defaultValue: true,
    );
    mateUse(
      'traversalEdgeBehavior',
      traversalEdgeBehavior,
      isNamed: true,
      defaultValue: _i4.TraversalEdgeBehavior.closedLoop,
    );
  }
}
