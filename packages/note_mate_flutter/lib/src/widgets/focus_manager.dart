// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_traversal.dart';

/// class FocusNode with DiagnosticableTreeMixin, ChangeNotifier
class FocusNode$Mate extends FocusNode with Mate {
  /// FocusNode FocusNode({String? debugLabel, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, bool skipTraversal = false, bool canRequestFocus = true, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true})
  FocusNode$Mate({
    /// optionalParameters: {String? debugLabel} , defaultValue:none
    String? debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , defaultValue:none
    FocusOnKeyCallback? onKey,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , defaultValue:none
    FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {bool skipTraversal = false} , defaultValue:Literal
    bool skipTraversal = false,

    /// optionalParameters: {bool canRequestFocus = true} , defaultValue:Literal
    bool canRequestFocus = true,

    /// optionalParameters: {bool descendantsAreFocusable = true} , defaultValue:Literal
    bool descendantsAreFocusable = true,

    /// optionalParameters: {bool descendantsAreTraversable = true} , defaultValue:Literal
    bool descendantsAreTraversable = true,
  }) : super(
          debugLabel: debugLabel,
          onKey: onKey,
          onKeyEvent: onKeyEvent,
          skipTraversal: skipTraversal,
          canRequestFocus: canRequestFocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
        ) {
    mateBuilder = (p) => FocusNode$Mate(
          debugLabel: p.get('debugLabel').build(),
          onKey: p.get('onKey').build(),
          onKeyEvent: p.get('onKeyEvent').build(),
          skipTraversal: p.get('skipTraversal').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          descendantsAreFocusable: p.get('descendantsAreFocusable').build(),
          descendantsAreTraversable: p.get('descendantsAreTraversable').build(),
        );
    mateUse('debugLabel', debugLabel);
    mateUse('onKey', onKey);
    mateUse('onKeyEvent', onKeyEvent);
    mateUse('skipTraversal', skipTraversal);
    mateUse('canRequestFocus', canRequestFocus);
    mateUse('descendantsAreFocusable', descendantsAreFocusable);
    mateUse('descendantsAreTraversable', descendantsAreTraversable);
  }
}

/// class FocusScopeNode extends FocusNode
class FocusScopeNode$Mate extends FocusScopeNode with Mate {
  /// FocusScopeNode FocusScopeNode({String? debugLabel, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool skipTraversal = false, bool canRequestFocus = true, TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop})
  FocusScopeNode$Mate({
    /// optionalParameters: {String? debugLabel} , defaultValue:none
    String? debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , defaultValue:none
    FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , defaultValue:none
    FocusOnKeyCallback? onKey,

    /// optionalParameters: {bool skipTraversal = false} , defaultValue:Literal
    bool skipTraversal = false,

    /// optionalParameters: {bool canRequestFocus = true} , defaultValue:Literal
    bool canRequestFocus = true,

    /// optionalParameters: {TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop} , defaultValue:unprocessed
    required TraversalEdgeBehavior traversalEdgeBehavior,
  }) : super(
          debugLabel: debugLabel,
          onKeyEvent: onKeyEvent,
          onKey: onKey,
          skipTraversal: skipTraversal,
          canRequestFocus: canRequestFocus,
          traversalEdgeBehavior: traversalEdgeBehavior,
        ) {
    mateBuilder = (p) => FocusScopeNode$Mate(
          debugLabel: p.get('debugLabel').build(),
          onKeyEvent: p.get('onKeyEvent').build(),
          onKey: p.get('onKey').build(),
          skipTraversal: p.get('skipTraversal').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          traversalEdgeBehavior: p.get('traversalEdgeBehavior').build(),
        );
    mateUse('debugLabel', debugLabel);
    mateUse('onKeyEvent', onKeyEvent);
    mateUse('onKey', onKey);
    mateUse('skipTraversal', skipTraversal);
    mateUse('canRequestFocus', canRequestFocus);
    mateUse('traversalEdgeBehavior', traversalEdgeBehavior);
  }
}
