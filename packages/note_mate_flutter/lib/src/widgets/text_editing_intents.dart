// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/text_editing_intents.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/services/text_input.dart';
import 'dart:ui';
import 'package:flutter/src/services/text_editing.dart';

/// class DeleteCharacterIntent extends DirectionalTextEditingIntent
class DeleteCharacterIntent$Mate extends DeleteCharacterIntent with Mate {
  /// DeleteCharacterIntent DeleteCharacterIntent({required bool forward})
  DeleteCharacterIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'DeleteCharacterIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DeleteCharacterIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class DeleteToNextWordBoundaryIntent extends DirectionalTextEditingIntent
class DeleteToNextWordBoundaryIntent$Mate extends DeleteToNextWordBoundaryIntent with Mate {
  /// DeleteToNextWordBoundaryIntent DeleteToNextWordBoundaryIntent({required bool forward})
  DeleteToNextWordBoundaryIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'DeleteToNextWordBoundaryIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DeleteToNextWordBoundaryIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class DeleteToLineBreakIntent extends DirectionalTextEditingIntent
class DeleteToLineBreakIntent$Mate extends DeleteToLineBreakIntent with Mate {
  /// DeleteToLineBreakIntent DeleteToLineBreakIntent({required bool forward})
  DeleteToLineBreakIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'DeleteToLineBreakIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => DeleteToLineBreakIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class ExtendSelectionByCharacterIntent extends DirectionalCaretMovementIntent
class ExtendSelectionByCharacterIntent$Mate extends ExtendSelectionByCharacterIntent with Mate {
  /// ExtendSelectionByCharacterIntent ExtendSelectionByCharacterIntent({required bool forward, required bool collapseSelection})
  ExtendSelectionByCharacterIntent$Mate({
    /// optionalParameters: {required bool forward} , defaultValue:none
    required bool forward,

    /// optionalParameters: {required bool collapseSelection} , defaultValue:none
    required bool collapseSelection,
  }) : super(
          forward: forward,
          collapseSelection: collapseSelection,
        ) {
    mateCreateName = 'ExtendSelectionByCharacterIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionByCharacterIntent$Mate(
          forward: p.get('forward').build(),
          collapseSelection: p.get('collapseSelection').build(),
        );
    mateUse('forward', forward, isNamed: true);
    mateUse('collapseSelection', collapseSelection, isNamed: true);
  }
}

/// class ExtendSelectionToNextWordBoundaryIntent extends DirectionalCaretMovementIntent
class ExtendSelectionToNextWordBoundaryIntent$Mate extends ExtendSelectionToNextWordBoundaryIntent with Mate {
  /// ExtendSelectionToNextWordBoundaryIntent ExtendSelectionToNextWordBoundaryIntent({required bool forward, required bool collapseSelection})
  ExtendSelectionToNextWordBoundaryIntent$Mate({
    /// optionalParameters: {required bool forward} , defaultValue:none
    required bool forward,

    /// optionalParameters: {required bool collapseSelection} , defaultValue:none
    required bool collapseSelection,
  }) : super(
          forward: forward,
          collapseSelection: collapseSelection,
        ) {
    mateCreateName = 'ExtendSelectionToNextWordBoundaryIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionToNextWordBoundaryIntent$Mate(
          forward: p.get('forward').build(),
          collapseSelection: p.get('collapseSelection').build(),
        );
    mateUse('forward', forward, isNamed: true);
    mateUse('collapseSelection', collapseSelection, isNamed: true);
  }
}

/// class ExtendSelectionToNextWordBoundaryOrCaretLocationIntent extends DirectionalCaretMovementIntent
class ExtendSelectionToNextWordBoundaryOrCaretLocationIntent$Mate
    extends ExtendSelectionToNextWordBoundaryOrCaretLocationIntent with Mate {
  /// ExtendSelectionToNextWordBoundaryOrCaretLocationIntent ExtendSelectionToNextWordBoundaryOrCaretLocationIntent({required bool forward})
  ExtendSelectionToNextWordBoundaryOrCaretLocationIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'ExtendSelectionToNextWordBoundaryOrCaretLocationIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionToNextWordBoundaryOrCaretLocationIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class ExpandSelectionToDocumentBoundaryIntent extends DirectionalCaretMovementIntent
class ExpandSelectionToDocumentBoundaryIntent$Mate extends ExpandSelectionToDocumentBoundaryIntent with Mate {
  /// ExpandSelectionToDocumentBoundaryIntent ExpandSelectionToDocumentBoundaryIntent({required bool forward})
  ExpandSelectionToDocumentBoundaryIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'ExpandSelectionToDocumentBoundaryIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExpandSelectionToDocumentBoundaryIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class ExpandSelectionToLineBreakIntent extends DirectionalCaretMovementIntent
class ExpandSelectionToLineBreakIntent$Mate extends ExpandSelectionToLineBreakIntent with Mate {
  /// ExpandSelectionToLineBreakIntent ExpandSelectionToLineBreakIntent({required bool forward})
  ExpandSelectionToLineBreakIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'ExpandSelectionToLineBreakIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExpandSelectionToLineBreakIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class ExtendSelectionToLineBreakIntent extends DirectionalCaretMovementIntent
class ExtendSelectionToLineBreakIntent$Mate extends ExtendSelectionToLineBreakIntent with Mate {
  /// ExtendSelectionToLineBreakIntent ExtendSelectionToLineBreakIntent({required bool forward, required bool collapseSelection, bool collapseAtReversal = false, bool continuesAtWrap = false})
  ExtendSelectionToLineBreakIntent$Mate({
    /// optionalParameters: {required bool forward} , defaultValue:none
    required bool forward,

    /// optionalParameters: {required bool collapseSelection} , defaultValue:none
    required bool collapseSelection,

    /// optionalParameters: {bool collapseAtReversal = false} , defaultValue:Literal
    bool collapseAtReversal = false,

    /// optionalParameters: {bool continuesAtWrap = false} , defaultValue:Literal
    bool continuesAtWrap = false,
  }) : super(
          forward: forward,
          collapseSelection: collapseSelection,
          collapseAtReversal: collapseAtReversal,
          continuesAtWrap: continuesAtWrap,
        ) {
    mateCreateName = 'ExtendSelectionToLineBreakIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionToLineBreakIntent$Mate(
          forward: p.get('forward').build(),
          collapseSelection: p.get('collapseSelection').build(),
          collapseAtReversal: p.get('collapseAtReversal').build(),
          continuesAtWrap: p.get('continuesAtWrap').build(),
        );
    mateUse('forward', forward, isNamed: true);
    mateUse('collapseSelection', collapseSelection, isNamed: true);
    mateUse('collapseAtReversal', collapseAtReversal, isNamed: true);
    mateUse('continuesAtWrap', continuesAtWrap, isNamed: true);
  }
}

/// class ExtendSelectionVerticallyToAdjacentLineIntent extends DirectionalCaretMovementIntent
class ExtendSelectionVerticallyToAdjacentLineIntent$Mate extends ExtendSelectionVerticallyToAdjacentLineIntent
    with Mate {
  /// ExtendSelectionVerticallyToAdjacentLineIntent ExtendSelectionVerticallyToAdjacentLineIntent({required bool forward, required bool collapseSelection})
  ExtendSelectionVerticallyToAdjacentLineIntent$Mate({
    /// optionalParameters: {required bool forward} , defaultValue:none
    required bool forward,

    /// optionalParameters: {required bool collapseSelection} , defaultValue:none
    required bool collapseSelection,
  }) : super(
          forward: forward,
          collapseSelection: collapseSelection,
        ) {
    mateCreateName = 'ExtendSelectionVerticallyToAdjacentLineIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionVerticallyToAdjacentLineIntent$Mate(
          forward: p.get('forward').build(),
          collapseSelection: p.get('collapseSelection').build(),
        );
    mateUse('forward', forward, isNamed: true);
    mateUse('collapseSelection', collapseSelection, isNamed: true);
  }
}

/// class ExtendSelectionVerticallyToAdjacentPageIntent extends DirectionalCaretMovementIntent
class ExtendSelectionVerticallyToAdjacentPageIntent$Mate extends ExtendSelectionVerticallyToAdjacentPageIntent
    with Mate {
  /// ExtendSelectionVerticallyToAdjacentPageIntent ExtendSelectionVerticallyToAdjacentPageIntent({required bool forward, required bool collapseSelection})
  ExtendSelectionVerticallyToAdjacentPageIntent$Mate({
    /// optionalParameters: {required bool forward} , defaultValue:none
    required bool forward,

    /// optionalParameters: {required bool collapseSelection} , defaultValue:none
    required bool collapseSelection,
  }) : super(
          forward: forward,
          collapseSelection: collapseSelection,
        ) {
    mateCreateName = 'ExtendSelectionVerticallyToAdjacentPageIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionVerticallyToAdjacentPageIntent$Mate(
          forward: p.get('forward').build(),
          collapseSelection: p.get('collapseSelection').build(),
        );
    mateUse('forward', forward, isNamed: true);
    mateUse('collapseSelection', collapseSelection, isNamed: true);
  }
}

/// class ExtendSelectionToNextParagraphBoundaryIntent extends DirectionalCaretMovementIntent
class ExtendSelectionToNextParagraphBoundaryIntent$Mate extends ExtendSelectionToNextParagraphBoundaryIntent with Mate {
  /// ExtendSelectionToNextParagraphBoundaryIntent ExtendSelectionToNextParagraphBoundaryIntent({required bool forward, required bool collapseSelection})
  ExtendSelectionToNextParagraphBoundaryIntent$Mate({
    /// optionalParameters: {required bool forward} , defaultValue:none
    required bool forward,

    /// optionalParameters: {required bool collapseSelection} , defaultValue:none
    required bool collapseSelection,
  }) : super(
          forward: forward,
          collapseSelection: collapseSelection,
        ) {
    mateCreateName = 'ExtendSelectionToNextParagraphBoundaryIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionToNextParagraphBoundaryIntent$Mate(
          forward: p.get('forward').build(),
          collapseSelection: p.get('collapseSelection').build(),
        );
    mateUse('forward', forward, isNamed: true);
    mateUse('collapseSelection', collapseSelection, isNamed: true);
  }
}

/// class ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent extends DirectionalCaretMovementIntent
class ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent$Mate
    extends ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent with Mate {
  /// ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent({required bool forward})
  ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder =
        (p) => ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class ExtendSelectionToDocumentBoundaryIntent extends DirectionalCaretMovementIntent
class ExtendSelectionToDocumentBoundaryIntent$Mate extends ExtendSelectionToDocumentBoundaryIntent with Mate {
  /// ExtendSelectionToDocumentBoundaryIntent ExtendSelectionToDocumentBoundaryIntent({required bool forward, required bool collapseSelection})
  ExtendSelectionToDocumentBoundaryIntent$Mate({
    /// optionalParameters: {required bool forward} , defaultValue:none
    required bool forward,

    /// optionalParameters: {required bool collapseSelection} , defaultValue:none
    required bool collapseSelection,
  }) : super(
          forward: forward,
          collapseSelection: collapseSelection,
        ) {
    mateCreateName = 'ExtendSelectionToDocumentBoundaryIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionToDocumentBoundaryIntent$Mate(
          forward: p.get('forward').build(),
          collapseSelection: p.get('collapseSelection').build(),
        );
    mateUse('forward', forward, isNamed: true);
    mateUse('collapseSelection', collapseSelection, isNamed: true);
  }
}

/// class ScrollToDocumentBoundaryIntent extends DirectionalTextEditingIntent
class ScrollToDocumentBoundaryIntent$Mate extends ScrollToDocumentBoundaryIntent with Mate {
  /// ScrollToDocumentBoundaryIntent ScrollToDocumentBoundaryIntent({required bool forward})
  ScrollToDocumentBoundaryIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'ScrollToDocumentBoundaryIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ScrollToDocumentBoundaryIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class ExtendSelectionByPageIntent extends DirectionalTextEditingIntent
class ExtendSelectionByPageIntent$Mate extends ExtendSelectionByPageIntent with Mate {
  /// ExtendSelectionByPageIntent ExtendSelectionByPageIntent({required bool forward})
  ExtendSelectionByPageIntent$Mate(
      {
      /// optionalParameters: {required bool forward} , defaultValue:none
      required bool forward})
      : super(forward: forward) {
    mateCreateName = 'ExtendSelectionByPageIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ExtendSelectionByPageIntent$Mate(forward: p.get('forward').build());
    mateUse('forward', forward, isNamed: true);
  }
}

/// class SelectAllTextIntent extends Intent
class SelectAllTextIntent$Mate extends SelectAllTextIntent with Mate {
  /// SelectAllTextIntent SelectAllTextIntent(SelectionChangedCause cause)
  SelectAllTextIntent$Mate(

      /// requiredParameters: SelectionChangedCause cause
      SelectionChangedCause cause)
      : super(cause) {
    mateCreateName = 'SelectAllTextIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => SelectAllTextIntent$Mate(p.get('cause').value);
    mateUse('cause', cause, isNamed: false);
  }
}

/// class CopySelectionTextIntent extends Intent
class CopySelectionTextIntent$Mate extends CopySelectionTextIntent with Mate {
  /// CopySelectionTextIntent CopySelectionTextIntent.cut(SelectionChangedCause cause)
  CopySelectionTextIntent$Mate.cut(

      /// requiredParameters: SelectionChangedCause cause
      SelectionChangedCause cause)
      : super.cut(cause) {
    mateCreateName = 'CopySelectionTextIntent.cut';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => CopySelectionTextIntent$Mate.cut(p.get('cause').value);
    mateUse('cause', cause, isNamed: false);
  }
}

/// class PasteTextIntent extends Intent
class PasteTextIntent$Mate extends PasteTextIntent with Mate {
  /// PasteTextIntent PasteTextIntent(SelectionChangedCause cause)
  PasteTextIntent$Mate(

      /// requiredParameters: SelectionChangedCause cause
      SelectionChangedCause cause)
      : super(cause) {
    mateCreateName = 'PasteTextIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => PasteTextIntent$Mate(p.get('cause').value);
    mateUse('cause', cause, isNamed: false);
  }
}

/// class RedoTextIntent extends Intent
class RedoTextIntent$Mate extends RedoTextIntent with Mate {
  /// RedoTextIntent RedoTextIntent(SelectionChangedCause cause)
  RedoTextIntent$Mate(

      /// requiredParameters: SelectionChangedCause cause
      SelectionChangedCause cause)
      : super(cause) {
    mateCreateName = 'RedoTextIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => RedoTextIntent$Mate(p.get('cause').value);
    mateUse('cause', cause, isNamed: false);
  }
}

/// class ReplaceTextIntent extends Intent
class ReplaceTextIntent$Mate extends ReplaceTextIntent with Mate {
  /// ReplaceTextIntent ReplaceTextIntent(TextEditingValue currentTextEditingValue, String replacementText, TextRange replacementRange, SelectionChangedCause cause)
  ReplaceTextIntent$Mate(
    /// requiredParameters: TextEditingValue currentTextEditingValue
    TextEditingValue currentTextEditingValue,

    /// requiredParameters: String replacementText
    String replacementText,

    /// requiredParameters: TextRange replacementRange
    TextRange replacementRange,

    /// requiredParameters: SelectionChangedCause cause
    SelectionChangedCause cause,
  ) : super(
          currentTextEditingValue,
          replacementText,
          replacementRange,
          cause,
        ) {
    mateCreateName = 'ReplaceTextIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => ReplaceTextIntent$Mate(
          p.get('currentTextEditingValue').value,
          p.get('replacementText').value,
          p.get('replacementRange').value,
          p.get('cause').value,
        );
    mateUse('currentTextEditingValue', currentTextEditingValue, isNamed: false);
    mateUse('replacementText', replacementText, isNamed: false);
    mateUse('replacementRange', replacementRange, isNamed: false);
    mateUse('cause', cause, isNamed: false);
  }
}

/// class UndoTextIntent extends Intent
class UndoTextIntent$Mate extends UndoTextIntent with Mate {
  /// UndoTextIntent UndoTextIntent(SelectionChangedCause cause)
  UndoTextIntent$Mate(

      /// requiredParameters: SelectionChangedCause cause
      SelectionChangedCause cause)
      : super(cause) {
    mateCreateName = 'UndoTextIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => UndoTextIntent$Mate(p.get('cause').value);
    mateUse('cause', cause, isNamed: false);
  }
}

/// class UpdateSelectionIntent extends Intent
class UpdateSelectionIntent$Mate extends UpdateSelectionIntent with Mate {
  /// UpdateSelectionIntent UpdateSelectionIntent(TextEditingValue currentTextEditingValue, TextSelection newSelection, SelectionChangedCause cause)
  UpdateSelectionIntent$Mate(
    /// requiredParameters: TextEditingValue currentTextEditingValue
    TextEditingValue currentTextEditingValue,

    /// requiredParameters: TextSelection newSelection
    TextSelection newSelection,

    /// requiredParameters: SelectionChangedCause cause
    SelectionChangedCause cause,
  ) : super(
          currentTextEditingValue,
          newSelection,
          cause,
        ) {
    mateCreateName = 'UpdateSelectionIntent';
    matePackageUrl = 'package:flutter/widgets.dart';
    mateBuilder = (p) => UpdateSelectionIntent$Mate(
          p.get('currentTextEditingValue').value,
          p.get('newSelection').value,
          p.get('cause').value,
        );
    mateUse('currentTextEditingValue', currentTextEditingValue, isNamed: false);
    mateUse('newSelection', newSelection, isNamed: false);
    mateUse('cause', cause, isNamed: false);
  }
}
