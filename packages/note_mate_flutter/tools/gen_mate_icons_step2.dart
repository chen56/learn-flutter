import 'package:code_builder/code_builder.dart';
import 'package:dart_style/dart_style.dart';
import 'package:file/file.dart';
import 'package:file/local.dart';
import 'package:note/mate.dart';
import 'package:note_mate_flutter/mate_icons.g.dart';
import "package:path/path.dart" as path;
import 'package:note/env.dart';

// run: flutter test thisfile.dart
// 暂时放弃，生成的代码200多K，太大了，且codepoint有重复
// ref: ElementDisplayStringBuilder 代码生成
main() async {
  _log("## main");
  var env = Env();

  genAll(
    env: env,
    // writeFS: MemoryFileSystem(),
    writeFS: const LocalFileSystem(),
    emitter: DartEmitter(
        allocator: Allocator.simplePrefixing(), useNullSafetySyntax: true),
    dartFormatter: DartFormatter(pageWidth: 120),
  );
}

// /// Generated by mate, please don't edit!
//
// const icons = {
//   0xe000: 'ten_k',
// };
Future<void> genAll({
  required Env env,
  required FileSystem writeFS,
  required DartEmitter emitter,
  required DartFormatter dartFormatter, //void Function(LibraryBuilder) updates
}) async {
  _log("## resolve entry lib");

  _log("## gen icon register:");

  IconRegister iconRegister = registerIcon();

  var icons = declareConst('icons').assign(literalConstMap(
    Map.fromEntries(iconRegister.icons.entries.map(
        (e) => MapEntry(literalNum(e.key.codePoint), literalString(e.value)))),
    refer("int"),
    refer("String"),
  ));
  Library lib = Library((b) => b
    ..comments.addAll(["/// Generated by mate, please don't edit! "])
    ..body.add(icons));

  var toFile = ("lib/mate_icon_names.g.dart");
  _log("## gen icon register: ${path.absolute(toFile)}");

  String writeContent = lib.accept(emitter).toString();
  // writeContent = dartFormatter.format(writeContent);
  writeFS.directory(path.dirname(toFile)).createSync(recursive: true);
  writeFS.file(toFile).writeAsStringSync(writeContent);

  _log("## gen icon register: end");
}

_log(Object? o) {
  // ignore: avoid_print
  print("${DateTime.now()} - $o");
}
