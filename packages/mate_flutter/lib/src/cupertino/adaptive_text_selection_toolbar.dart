// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/cupertino/adaptive_text_selection_toolbar.dart'
    as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/text_selection_toolbar_anchors.dart' as _i5;
import 'package:flutter/src/widgets/context_menu_button_item.dart' as _i6;
import 'package:flutter/src/widgets/text_selection.dart' as _i7;
import 'dart:ui' as _i8;
import 'package:flutter/src/widgets/editable_text.dart' as _i9;
import 'package:flutter/src/rendering/selection.dart' as _i10;

/// class CupertinoAdaptiveTextSelectionToolbar extends StatelessWidget
class CupertinoAdaptiveTextSelectionToolbar$Mate
    extends _i1.CupertinoAdaptiveTextSelectionToolbar with _i2.Mate {
  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar({Key? key, required List<Widget>? children, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget>? children} , default:none
    required super.children,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , default:none
    required super.anchors,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i4.Widget>?>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'anchors': _i2.BuilderArg<_i5.TextSelectionToolbarAnchors>(
            name: 'anchors',
            init: anchors,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CupertinoAdaptiveTextSelectionToolbar';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          anchors: p.get('anchors').build(),
        );
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.buttonItems({Key? key, required List<ContextMenuButtonItem>? buttonItems, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.buttonItems({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<ContextMenuButtonItem>? buttonItems} , default:none
    required super.buttonItems,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , default:none
    required super.anchors,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'buttonItems': _i2.BuilderArg<List<_i6.ContextMenuButtonItem>?>(
            name: 'buttonItems',
            init: buttonItems,
            isNamed: true,
          ),
          'anchors': _i2.BuilderArg<_i5.TextSelectionToolbarAnchors>(
            name: 'anchors',
            init: anchors,
            isNamed: true,
          ),
        },
        super.buttonItems() {
    mateBuilderName = 'CupertinoAdaptiveTextSelectionToolbar.buttonItems';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.buttonItems(
          key: p.get('key').build(),
          buttonItems: p.get('buttonItems').build(),
          anchors: p.get('anchors').build(),
        );
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.editable({Key? key, required ClipboardStatus clipboardStatus, required void Function()? onCopy, required void Function()? onCut, required void Function()? onPaste, required void Function()? onSelectAll, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.editable({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ClipboardStatus clipboardStatus} , default:none
    required super.clipboardStatus,

    /// optionalParameters: {required void Function()? onCopy} , default:none
    required super.onCopy,

    /// optionalParameters: {required void Function()? onCut} , default:none
    required super.onCut,

    /// optionalParameters: {required void Function()? onPaste} , default:none
    required super.onPaste,

    /// optionalParameters: {required void Function()? onSelectAll} , default:none
    required super.onSelectAll,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , default:none
    required super.anchors,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'clipboardStatus': _i2.BuilderArg<_i7.ClipboardStatus>(
            name: 'clipboardStatus',
            init: clipboardStatus,
            isNamed: true,
          ),
          'onCopy': _i2.BuilderArg<_i8.VoidCallback?>(
            name: 'onCopy',
            init: onCopy,
            isNamed: true,
          ),
          'onCut': _i2.BuilderArg<_i8.VoidCallback?>(
            name: 'onCut',
            init: onCut,
            isNamed: true,
          ),
          'onPaste': _i2.BuilderArg<_i8.VoidCallback?>(
            name: 'onPaste',
            init: onPaste,
            isNamed: true,
          ),
          'onSelectAll': _i2.BuilderArg<_i8.VoidCallback?>(
            name: 'onSelectAll',
            init: onSelectAll,
            isNamed: true,
          ),
          'anchors': _i2.BuilderArg<_i5.TextSelectionToolbarAnchors>(
            name: 'anchors',
            init: anchors,
            isNamed: true,
          ),
        },
        super.editable() {
    mateBuilderName = 'CupertinoAdaptiveTextSelectionToolbar.editable';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.editable(
          key: p.get('key').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          onCopy: p.get('onCopy').build(),
          onCut: p.get('onCut').build(),
          onPaste: p.get('onPaste').build(),
          onSelectAll: p.get('onSelectAll').build(),
          anchors: p.get('anchors').build(),
        );
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.editableText({Key? key, required EditableTextState editableTextState})
  CupertinoAdaptiveTextSelectionToolbar$Mate.editableText({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required EditableTextState editableTextState} , default:none
    required super.editableTextState,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'editableTextState': _i2.BuilderArg<_i9.EditableTextState>(
            name: 'editableTextState',
            init: editableTextState,
            isNamed: true,
          ),
        },
        super.editableText() {
    mateBuilderName = 'CupertinoAdaptiveTextSelectionToolbar.editableText';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder =
        (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.editableText(
              key: p.get('key').build(),
              editableTextState: p.get('editableTextState').build(),
            );
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.selectable({Key? key, required void Function() onCopy, required void Function() onSelectAll, required SelectionGeometry selectionGeometry, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.selectable({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required void Function() onCopy} , default:none
    required super.onCopy,

    /// optionalParameters: {required void Function() onSelectAll} , default:none
    required super.onSelectAll,

    /// optionalParameters: {required SelectionGeometry selectionGeometry} , default:none
    required super.selectionGeometry,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , default:none
    required super.anchors,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'onCopy': _i2.BuilderArg<_i8.VoidCallback>(
            name: 'onCopy',
            init: onCopy,
            isNamed: true,
          ),
          'onSelectAll': _i2.BuilderArg<_i8.VoidCallback>(
            name: 'onSelectAll',
            init: onSelectAll,
            isNamed: true,
          ),
          'selectionGeometry': _i2.BuilderArg<_i10.SelectionGeometry>(
            name: 'selectionGeometry',
            init: selectionGeometry,
            isNamed: true,
          ),
          'anchors': _i2.BuilderArg<_i5.TextSelectionToolbarAnchors>(
            name: 'anchors',
            init: anchors,
            isNamed: true,
          ),
        },
        super.selectable() {
    mateBuilderName = 'CupertinoAdaptiveTextSelectionToolbar.selectable';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.selectable(
          key: p.get('key').build(),
          onCopy: p.get('onCopy').build(),
          onSelectAll: p.get('onSelectAll').build(),
          selectionGeometry: p.get('selectionGeometry').build(),
          anchors: p.get('anchors').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
