// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/toggle_buttons.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/services/mouse_cursor.dart' as _i5;
import 'package:flutter/src/material/theme_data.dart' as _i6;
import 'package:flutter/src/painting/text_style.dart' as _i7;
import 'package:flutter/src/rendering/box.dart' as _i8;
import 'dart:ui' as _i9;
import 'package:flutter/src/widgets/focus_manager.dart' as _i10;
import 'package:flutter/src/painting/border_radius.dart' as _i11;
import 'package:flutter/src/painting/basic_types.dart' as _i12;
import 'package:flutter/cupertino.dart' as _i13;

/// class ToggleButtons extends StatelessWidget
class ToggleButtons$Mate extends _i1.ToggleButtons with _i2.Mate {
  /// ToggleButtons ToggleButtons({Key? key, required List<Widget> children, required List<bool> isSelected, void Function(int)? onPressed, MouseCursor? mouseCursor, MaterialTapTargetSize? tapTargetSize, TextStyle? textStyle, BoxConstraints? constraints, Color? color, Color? selectedColor, Color? disabledColor, Color? fillColor, Color? focusColor, Color? highlightColor, Color? hoverColor, Color? splashColor, List<FocusNode>? focusNodes, bool renderBorder = true, Color? borderColor, Color? selectedBorderColor, Color? disabledBorderColor, BorderRadius? borderRadius, double? borderWidth, Axis direction = Axis.horizontal, VerticalDirection verticalDirection = VerticalDirection.down})
  ToggleButtons$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget> children} , default:none
    required super.children,

    /// optionalParameters: {required List<bool> isSelected} , default:none
    required super.isSelected,

    /// optionalParameters: {void Function(int)? onPressed} , default:none
    super.onPressed,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {MaterialTapTargetSize? tapTargetSize} , default:none
    super.tapTargetSize,

    /// optionalParameters: {TextStyle? textStyle} , default:none
    super.textStyle,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? selectedColor} , default:none
    super.selectedColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {Color? fillColor} , default:none
    super.fillColor,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {List<FocusNode>? focusNodes} , default:none
    super.focusNodes,

    /// optionalParameters: {bool renderBorder = true} , default:processed=BooleanLiteralImpl
    super.renderBorder,

    /// optionalParameters: {Color? borderColor} , default:none
    super.borderColor,

    /// optionalParameters: {Color? selectedBorderColor} , default:none
    super.selectedBorderColor,

    /// optionalParameters: {Color? disabledBorderColor} , default:none
    super.disabledBorderColor,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    super.borderRadius,

    /// optionalParameters: {double? borderWidth} , default:none
    super.borderWidth,

    /// optionalParameters: {Axis direction = Axis.horizontal} , default:processed=PrefixedIdentifierImpl
    super.direction,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    super.verticalDirection,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i4.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'isSelected': _i2.BuilderArg<List<bool>>(
            name: 'isSelected',
            init: isSelected,
            isNamed: true,
          ),
          'onPressed': _i2.BuilderArg<void Function(int)?>(
            name: 'onPressed',
            init: onPressed,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i5.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'tapTargetSize': _i2.BuilderArg<_i6.MaterialTapTargetSize?>(
            name: 'tapTargetSize',
            init: tapTargetSize,
            isNamed: true,
          ),
          'textStyle': _i2.BuilderArg<_i7.TextStyle?>(
            name: 'textStyle',
            init: textStyle,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i8.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i9.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'selectedColor': _i2.BuilderArg<_i9.Color?>(
            name: 'selectedColor',
            init: selectedColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i9.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'fillColor': _i2.BuilderArg<_i9.Color?>(
            name: 'fillColor',
            init: fillColor,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i9.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i9.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i9.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i9.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'focusNodes': _i2.BuilderArg<List<_i10.FocusNode>?>(
            name: 'focusNodes',
            init: focusNodes,
            isNamed: true,
          ),
          'renderBorder': _i2.BuilderArg<bool>(
            name: 'renderBorder',
            init: renderBorder,
            isNamed: true,
            defaultValue: true,
          ),
          'borderColor': _i2.BuilderArg<_i9.Color?>(
            name: 'borderColor',
            init: borderColor,
            isNamed: true,
          ),
          'selectedBorderColor': _i2.BuilderArg<_i9.Color?>(
            name: 'selectedBorderColor',
            init: selectedBorderColor,
            isNamed: true,
          ),
          'disabledBorderColor': _i2.BuilderArg<_i9.Color?>(
            name: 'disabledBorderColor',
            init: disabledBorderColor,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i11.BorderRadius?>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'borderWidth': _i2.BuilderArg<double?>(
            name: 'borderWidth',
            init: borderWidth,
            isNamed: true,
          ),
          'direction': _i2.BuilderArg<_i12.Axis>(
            name: 'direction',
            init: direction,
            isNamed: true,
            defaultValue: _i13.Axis.horizontal,
          ),
          'verticalDirection': _i2.BuilderArg<_i12.VerticalDirection>(
            name: 'verticalDirection',
            init: verticalDirection,
            isNamed: true,
            defaultValue: _i13.VerticalDirection.down,
          ),
        },
        super() {
    mateBuilderName = 'ToggleButtons';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ToggleButtons$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          isSelected: p.get('isSelected').build(),
          onPressed: p.get('onPressed').build(),
          mouseCursor: p.get('mouseCursor').build(),
          tapTargetSize: p.get('tapTargetSize').build(),
          textStyle: p.get('textStyle').build(),
          constraints: p.get('constraints').build(),
          color: p.get('color').build(),
          selectedColor: p.get('selectedColor').build(),
          disabledColor: p.get('disabledColor').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          highlightColor: p.get('highlightColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          focusNodes: p.get('focusNodes').build(),
          renderBorder: p.get('renderBorder').build(),
          borderColor: p.get('borderColor').build(),
          selectedBorderColor: p.get('selectedBorderColor').build(),
          disabledBorderColor: p.get('disabledBorderColor').build(),
          borderRadius: p.get('borderRadius').build(),
          borderWidth: p.get('borderWidth').build(),
          direction: p.get('direction').build(),
          verticalDirection: p.get('verticalDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
