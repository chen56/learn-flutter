// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/navigation_drawer.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/borders.dart' as _i6;
import 'package:flutter/src/foundation/basic_types.dart' as _i7;

/// class NavigationDrawer extends StatelessWidget
class NavigationDrawer$Mate extends _i1.NavigationDrawer with _i2.Mate {
  /// NavigationDrawer NavigationDrawer({Key? key, required List<Widget> children, Color? backgroundColor, Color? shadowColor, Color? surfaceTintColor, double? elevation, Color? indicatorColor, ShapeBorder? indicatorShape, void Function(int)? onDestinationSelected, int? selectedIndex = 0})
  NavigationDrawer$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget> children} , default:none
    required super.children,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {Color? shadowColor} , default:none
    super.shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    super.surfaceTintColor,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {Color? indicatorColor} , default:none
    super.indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , default:none
    super.indicatorShape,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , default:none
    super.onDestinationSelected,

    /// optionalParameters: {int? selectedIndex = 0} , default:processed=IntegerLiteralImpl
    super.selectedIndex,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i4.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i5.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i5.Color?>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'surfaceTintColor': _i2.BuilderArg<_i5.Color?>(
            name: 'surfaceTintColor',
            init: surfaceTintColor,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'indicatorColor': _i2.BuilderArg<_i5.Color?>(
            name: 'indicatorColor',
            init: indicatorColor,
            isNamed: true,
          ),
          'indicatorShape': _i2.BuilderArg<_i6.ShapeBorder?>(
            name: 'indicatorShape',
            init: indicatorShape,
            isNamed: true,
          ),
          'onDestinationSelected': _i2.BuilderArg<_i7.ValueChanged<int>?>(
            name: 'onDestinationSelected',
            init: onDestinationSelected,
            isNamed: true,
          ),
          'selectedIndex': _i2.BuilderArg<int?>(
            name: 'selectedIndex',
            init: selectedIndex,
            isNamed: true,
            defaultValue: 0,
          ),
        },
        super() {
    mateBuilderName = 'NavigationDrawer';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationDrawer$Mate(
          key: p.get('key').build(),
          children: p.get('children').build(),
          backgroundColor: p.get('backgroundColor').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          elevation: p.get('elevation').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
          onDestinationSelected: p.get('onDestinationSelected').build(),
          selectedIndex: p.get('selectedIndex').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class NavigationDrawerDestination extends StatelessWidget
class NavigationDrawerDestination$Mate extends _i1.NavigationDrawerDestination
    with _i2.Mate {
  /// NavigationDrawerDestination NavigationDrawerDestination({Key? key, Color? backgroundColor, required Widget icon, Widget? selectedIcon, required Widget label})
  NavigationDrawerDestination$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {required Widget icon} , default:none
    required super.icon,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,

    /// optionalParameters: {required Widget label} , default:none
    required super.label,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i5.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i4.Widget>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i4.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<_i4.Widget>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'NavigationDrawerDestination';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationDrawerDestination$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          icon: p.get('icon').build(),
          selectedIcon: p.get('selectedIcon').build(),
          label: p.get('label').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
