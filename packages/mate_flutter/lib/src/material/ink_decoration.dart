// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/ink_decoration.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/edge_insets.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/decoration.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i7;
import 'package:flutter/src/painting/image_provider.dart' as _i8;
import 'package:flutter/src/painting/image_stream.dart' as _i9;
import 'package:flutter/src/painting/box_fit.dart' as _i10;
import 'package:flutter/src/painting/alignment.dart' as _i11;
import 'package:flutter/cupertino.dart' as _i12;
import 'package:flutter/src/painting/decoration_image.dart' as _i13;
import 'package:flutter/src/material/material.dart' as _i14;
import 'package:flutter/src/rendering/box.dart' as _i15;

/// class Ink extends StatefulWidget
class Ink$Mate extends _i1.Ink with _i2.Mate {
  /// Ink Ink({Key? key, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, double? width, double? height, Widget? child})
  Ink$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Decoration? decoration} , default:none
    super.decoration,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i4.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'decoration': _i2.BuilderArg<_i6.Decoration?>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i7.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Ink';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Ink$Mate(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          color: p.get('color').build(),
          decoration: p.get('decoration').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
  }

  /// Ink Ink.image({Key? key, EdgeInsetsGeometry? padding, required ImageProvider<Object> image, void Function(Object, StackTrace?)? onImageError, ColorFilter? colorFilter, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, Rect? centerSlice, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, double? width, double? height, Widget? child})
  Ink$Mate.image({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {required ImageProvider<Object> image} , default:none
    required super.image,

    /// optionalParameters: {void Function(Object, StackTrace?)? onImageError} , default:none
    super.onImageError,

    /// optionalParameters: {ColorFilter? colorFilter} , default:none
    super.colorFilter,

    /// optionalParameters: {BoxFit? fit} , default:none
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {Rect? centerSlice} , default:none
    super.centerSlice,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:processed=PrefixedIdentifierImpl
    super.repeat,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    super.matchTextDirection,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i4.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'image': _i2.BuilderArg<_i8.ImageProvider<Object>>(
            name: 'image',
            init: image,
            isNamed: true,
          ),
          'onImageError': _i2.BuilderArg<_i9.ImageErrorListener?>(
            name: 'onImageError',
            init: onImageError,
            isNamed: true,
          ),
          'colorFilter': _i2.BuilderArg<_i5.ColorFilter?>(
            name: 'colorFilter',
            init: colorFilter,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i10.BoxFit?>(
            name: 'fit',
            init: fit,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i11.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i12.Alignment.center,
          ),
          'centerSlice': _i2.BuilderArg<_i5.Rect?>(
            name: 'centerSlice',
            init: centerSlice,
            isNamed: true,
          ),
          'repeat': _i2.BuilderArg<_i13.ImageRepeat>(
            name: 'repeat',
            init: repeat,
            isNamed: true,
            defaultValue: _i12.ImageRepeat.noRepeat,
          ),
          'matchTextDirection': _i2.BuilderArg<bool>(
            name: 'matchTextDirection',
            init: matchTextDirection,
            isNamed: true,
            defaultValue: false,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i7.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.image() {
    mateBuilderName = 'Ink.image';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Ink$Mate.image(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          image: p.get('image').build(),
          onImageError: p.get('onImageError').build(),
          colorFilter: p.get('colorFilter').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          centerSlice: p.get('centerSlice').build(),
          repeat: p.get('repeat').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class InkDecoration extends InkFeature
class InkDecoration$Mate extends _i1.InkDecoration with _i2.Mate {
  /// InkDecoration InkDecoration({required Decoration? decoration, bool isVisible = true, required ImageConfiguration configuration, required MaterialInkController controller, required RenderBox referenceBox, void Function()? onRemoved})
  InkDecoration$Mate({
    /// optionalParameters: {required Decoration? decoration} , default:none
    required super.decoration,

    /// optionalParameters: {bool isVisible = true} , default:processed=BooleanLiteralImpl
    super.isVisible,

    /// optionalParameters: {required ImageConfiguration configuration} , default:none
    required super.configuration,

    /// optionalParameters: {required MaterialInkController controller} , default:none
    required super.controller,

    /// optionalParameters: {required RenderBox referenceBox} , default:none
    required super.referenceBox,

    /// optionalParameters: {void Function()? onRemoved} , default:none
    super.onRemoved,
  })  : mateParams = {
          'decoration': _i2.BuilderArg<_i6.Decoration?>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'isVisible': _i2.BuilderArg<bool>(
            name: 'isVisible',
            init: isVisible,
            isNamed: true,
            defaultValue: true,
          ),
          'configuration': _i2.BuilderArg<_i8.ImageConfiguration>(
            name: 'configuration',
            init: configuration,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i14.MaterialInkController>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'referenceBox': _i2.BuilderArg<_i15.RenderBox>(
            name: 'referenceBox',
            init: referenceBox,
            isNamed: true,
          ),
          'onRemoved': _i2.BuilderArg<_i5.VoidCallback?>(
            name: 'onRemoved',
            init: onRemoved,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'InkDecoration';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => InkDecoration$Mate(
          decoration: p.get('decoration').build(),
          isVisible: p.get('isVisible').build(),
          configuration: p.get('configuration').build(),
          controller: p.get('controller').build(),
          referenceBox: p.get('referenceBox').build(),
          onRemoved: p.get('onRemoved').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
