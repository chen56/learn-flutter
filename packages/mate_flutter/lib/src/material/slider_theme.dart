// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/slider_theme.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/text_style.dart' as _i6;
import 'package:flutter/src/material/material_state.dart' as _i7;
import 'package:flutter/src/services/mouse_cursor.dart' as _i8;

/// class SliderTheme extends InheritedTheme
class SliderTheme$Mate extends _i1.SliderTheme with _i2.Mate {
  /// SliderTheme SliderTheme({Key? key, required SliderThemeData data, required Widget child})
  SliderTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required SliderThemeData data} , default:none
    required super.data,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<_i1.SliderThemeData>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliderTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliderTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliderThemeData with Diagnosticable
class SliderThemeData$Mate extends _i1.SliderThemeData with _i2.Mate {
  /// SliderThemeData SliderThemeData({double? trackHeight, Color? activeTrackColor, Color? inactiveTrackColor, Color? secondaryActiveTrackColor, Color? disabledActiveTrackColor, Color? disabledInactiveTrackColor, Color? disabledSecondaryActiveTrackColor, Color? activeTickMarkColor, Color? inactiveTickMarkColor, Color? disabledActiveTickMarkColor, Color? disabledInactiveTickMarkColor, Color? thumbColor, Color? overlappingShapeStrokeColor, Color? disabledThumbColor, Color? overlayColor, Color? valueIndicatorColor, SliderComponentShape? overlayShape, SliderTickMarkShape? tickMarkShape, SliderComponentShape? thumbShape, SliderTrackShape? trackShape, SliderComponentShape? valueIndicatorShape, RangeSliderTickMarkShape? rangeTickMarkShape, RangeSliderThumbShape? rangeThumbShape, RangeSliderTrackShape? rangeTrackShape, RangeSliderValueIndicatorShape? rangeValueIndicatorShape, ShowValueIndicator? showValueIndicator, TextStyle? valueIndicatorTextStyle, double? minThumbSeparation, Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector, MaterialStateProperty<MouseCursor?>? mouseCursor})
  SliderThemeData$Mate({
    /// optionalParameters: {double? trackHeight} , default:none
    super.trackHeight,

    /// optionalParameters: {Color? activeTrackColor} , default:none
    super.activeTrackColor,

    /// optionalParameters: {Color? inactiveTrackColor} , default:none
    super.inactiveTrackColor,

    /// optionalParameters: {Color? secondaryActiveTrackColor} , default:none
    super.secondaryActiveTrackColor,

    /// optionalParameters: {Color? disabledActiveTrackColor} , default:none
    super.disabledActiveTrackColor,

    /// optionalParameters: {Color? disabledInactiveTrackColor} , default:none
    super.disabledInactiveTrackColor,

    /// optionalParameters: {Color? disabledSecondaryActiveTrackColor} , default:none
    super.disabledSecondaryActiveTrackColor,

    /// optionalParameters: {Color? activeTickMarkColor} , default:none
    super.activeTickMarkColor,

    /// optionalParameters: {Color? inactiveTickMarkColor} , default:none
    super.inactiveTickMarkColor,

    /// optionalParameters: {Color? disabledActiveTickMarkColor} , default:none
    super.disabledActiveTickMarkColor,

    /// optionalParameters: {Color? disabledInactiveTickMarkColor} , default:none
    super.disabledInactiveTickMarkColor,

    /// optionalParameters: {Color? thumbColor} , default:none
    super.thumbColor,

    /// optionalParameters: {Color? overlappingShapeStrokeColor} , default:none
    super.overlappingShapeStrokeColor,

    /// optionalParameters: {Color? disabledThumbColor} , default:none
    super.disabledThumbColor,

    /// optionalParameters: {Color? overlayColor} , default:none
    super.overlayColor,

    /// optionalParameters: {Color? valueIndicatorColor} , default:none
    super.valueIndicatorColor,

    /// optionalParameters: {SliderComponentShape? overlayShape} , default:none
    super.overlayShape,

    /// optionalParameters: {SliderTickMarkShape? tickMarkShape} , default:none
    super.tickMarkShape,

    /// optionalParameters: {SliderComponentShape? thumbShape} , default:none
    super.thumbShape,

    /// optionalParameters: {SliderTrackShape? trackShape} , default:none
    super.trackShape,

    /// optionalParameters: {SliderComponentShape? valueIndicatorShape} , default:none
    super.valueIndicatorShape,

    /// optionalParameters: {RangeSliderTickMarkShape? rangeTickMarkShape} , default:none
    super.rangeTickMarkShape,

    /// optionalParameters: {RangeSliderThumbShape? rangeThumbShape} , default:none
    super.rangeThumbShape,

    /// optionalParameters: {RangeSliderTrackShape? rangeTrackShape} , default:none
    super.rangeTrackShape,

    /// optionalParameters: {RangeSliderValueIndicatorShape? rangeValueIndicatorShape} , default:none
    super.rangeValueIndicatorShape,

    /// optionalParameters: {ShowValueIndicator? showValueIndicator} , default:none
    super.showValueIndicator,

    /// optionalParameters: {TextStyle? valueIndicatorTextStyle} , default:none
    super.valueIndicatorTextStyle,

    /// optionalParameters: {double? minThumbSeparation} , default:none
    super.minThumbSeparation,

    /// optionalParameters: {Thumb? Function(TextDirection, RangeValues, double, Size, Size, double)? thumbSelector} , default:none
    super.thumbSelector,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , default:none
    super.mouseCursor,
  })  : mateParams = {
          'trackHeight': _i2.BuilderArg<double?>(
            name: 'trackHeight',
            init: trackHeight,
            isNamed: true,
          ),
          'activeTrackColor': _i2.BuilderArg<_i5.Color?>(
            name: 'activeTrackColor',
            init: activeTrackColor,
            isNamed: true,
          ),
          'inactiveTrackColor': _i2.BuilderArg<_i5.Color?>(
            name: 'inactiveTrackColor',
            init: inactiveTrackColor,
            isNamed: true,
          ),
          'secondaryActiveTrackColor': _i2.BuilderArg<_i5.Color?>(
            name: 'secondaryActiveTrackColor',
            init: secondaryActiveTrackColor,
            isNamed: true,
          ),
          'disabledActiveTrackColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledActiveTrackColor',
            init: disabledActiveTrackColor,
            isNamed: true,
          ),
          'disabledInactiveTrackColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledInactiveTrackColor',
            init: disabledInactiveTrackColor,
            isNamed: true,
          ),
          'disabledSecondaryActiveTrackColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledSecondaryActiveTrackColor',
            init: disabledSecondaryActiveTrackColor,
            isNamed: true,
          ),
          'activeTickMarkColor': _i2.BuilderArg<_i5.Color?>(
            name: 'activeTickMarkColor',
            init: activeTickMarkColor,
            isNamed: true,
          ),
          'inactiveTickMarkColor': _i2.BuilderArg<_i5.Color?>(
            name: 'inactiveTickMarkColor',
            init: inactiveTickMarkColor,
            isNamed: true,
          ),
          'disabledActiveTickMarkColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledActiveTickMarkColor',
            init: disabledActiveTickMarkColor,
            isNamed: true,
          ),
          'disabledInactiveTickMarkColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledInactiveTickMarkColor',
            init: disabledInactiveTickMarkColor,
            isNamed: true,
          ),
          'thumbColor': _i2.BuilderArg<_i5.Color?>(
            name: 'thumbColor',
            init: thumbColor,
            isNamed: true,
          ),
          'overlappingShapeStrokeColor': _i2.BuilderArg<_i5.Color?>(
            name: 'overlappingShapeStrokeColor',
            init: overlappingShapeStrokeColor,
            isNamed: true,
          ),
          'disabledThumbColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledThumbColor',
            init: disabledThumbColor,
            isNamed: true,
          ),
          'overlayColor': _i2.BuilderArg<_i5.Color?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
          'valueIndicatorColor': _i2.BuilderArg<_i5.Color?>(
            name: 'valueIndicatorColor',
            init: valueIndicatorColor,
            isNamed: true,
          ),
          'overlayShape': _i2.BuilderArg<_i1.SliderComponentShape?>(
            name: 'overlayShape',
            init: overlayShape,
            isNamed: true,
          ),
          'tickMarkShape': _i2.BuilderArg<_i1.SliderTickMarkShape?>(
            name: 'tickMarkShape',
            init: tickMarkShape,
            isNamed: true,
          ),
          'thumbShape': _i2.BuilderArg<_i1.SliderComponentShape?>(
            name: 'thumbShape',
            init: thumbShape,
            isNamed: true,
          ),
          'trackShape': _i2.BuilderArg<_i1.SliderTrackShape?>(
            name: 'trackShape',
            init: trackShape,
            isNamed: true,
          ),
          'valueIndicatorShape': _i2.BuilderArg<_i1.SliderComponentShape?>(
            name: 'valueIndicatorShape',
            init: valueIndicatorShape,
            isNamed: true,
          ),
          'rangeTickMarkShape': _i2.BuilderArg<_i1.RangeSliderTickMarkShape?>(
            name: 'rangeTickMarkShape',
            init: rangeTickMarkShape,
            isNamed: true,
          ),
          'rangeThumbShape': _i2.BuilderArg<_i1.RangeSliderThumbShape?>(
            name: 'rangeThumbShape',
            init: rangeThumbShape,
            isNamed: true,
          ),
          'rangeTrackShape': _i2.BuilderArg<_i1.RangeSliderTrackShape?>(
            name: 'rangeTrackShape',
            init: rangeTrackShape,
            isNamed: true,
          ),
          'rangeValueIndicatorShape':
              _i2.BuilderArg<_i1.RangeSliderValueIndicatorShape?>(
            name: 'rangeValueIndicatorShape',
            init: rangeValueIndicatorShape,
            isNamed: true,
          ),
          'showValueIndicator': _i2.BuilderArg<_i1.ShowValueIndicator?>(
            name: 'showValueIndicator',
            init: showValueIndicator,
            isNamed: true,
          ),
          'valueIndicatorTextStyle': _i2.BuilderArg<_i6.TextStyle?>(
            name: 'valueIndicatorTextStyle',
            init: valueIndicatorTextStyle,
            isNamed: true,
          ),
          'minThumbSeparation': _i2.BuilderArg<double?>(
            name: 'minThumbSeparation',
            init: minThumbSeparation,
            isNamed: true,
          ),
          'thumbSelector': _i2.BuilderArg<_i1.RangeThumbSelector?>(
            name: 'thumbSelector',
            init: thumbSelector,
            isNamed: true,
          ),
          'mouseCursor':
              _i2.BuilderArg<_i7.MaterialStateProperty<_i8.MouseCursor?>?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliderThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliderThemeData$Mate(
          trackHeight: p.get('trackHeight').build(),
          activeTrackColor: p.get('activeTrackColor').build(),
          inactiveTrackColor: p.get('inactiveTrackColor').build(),
          secondaryActiveTrackColor: p.get('secondaryActiveTrackColor').build(),
          disabledActiveTrackColor: p.get('disabledActiveTrackColor').build(),
          disabledInactiveTrackColor:
              p.get('disabledInactiveTrackColor').build(),
          disabledSecondaryActiveTrackColor:
              p.get('disabledSecondaryActiveTrackColor').build(),
          activeTickMarkColor: p.get('activeTickMarkColor').build(),
          inactiveTickMarkColor: p.get('inactiveTickMarkColor').build(),
          disabledActiveTickMarkColor:
              p.get('disabledActiveTickMarkColor').build(),
          disabledInactiveTickMarkColor:
              p.get('disabledInactiveTickMarkColor').build(),
          thumbColor: p.get('thumbColor').build(),
          overlappingShapeStrokeColor:
              p.get('overlappingShapeStrokeColor').build(),
          disabledThumbColor: p.get('disabledThumbColor').build(),
          overlayColor: p.get('overlayColor').build(),
          valueIndicatorColor: p.get('valueIndicatorColor').build(),
          overlayShape: p.get('overlayShape').build(),
          tickMarkShape: p.get('tickMarkShape').build(),
          thumbShape: p.get('thumbShape').build(),
          trackShape: p.get('trackShape').build(),
          valueIndicatorShape: p.get('valueIndicatorShape').build(),
          rangeTickMarkShape: p.get('rangeTickMarkShape').build(),
          rangeThumbShape: p.get('rangeThumbShape').build(),
          rangeTrackShape: p.get('rangeTrackShape').build(),
          rangeValueIndicatorShape: p.get('rangeValueIndicatorShape').build(),
          showValueIndicator: p.get('showValueIndicator').build(),
          valueIndicatorTextStyle: p.get('valueIndicatorTextStyle').build(),
          minThumbSeparation: p.get('minThumbSeparation').build(),
          thumbSelector: p.get('thumbSelector').build(),
          mouseCursor: p.get('mouseCursor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RoundSliderTickMarkShape extends SliderTickMarkShape
class RoundSliderTickMarkShape$Mate extends _i1.RoundSliderTickMarkShape
    with _i2.Mate {
  /// RoundSliderTickMarkShape RoundSliderTickMarkShape({double? tickMarkRadius})
  RoundSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , default:none
      super.tickMarkRadius})
      : mateParams = {
          'tickMarkRadius': _i2.BuilderArg<double?>(
            name: 'tickMarkRadius',
            init: tickMarkRadius,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'RoundSliderTickMarkShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundSliderTickMarkShape$Mate(
        tickMarkRadius: p.get('tickMarkRadius').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RoundRangeSliderTickMarkShape extends RangeSliderTickMarkShape
class RoundRangeSliderTickMarkShape$Mate
    extends _i1.RoundRangeSliderTickMarkShape with _i2.Mate {
  /// RoundRangeSliderTickMarkShape RoundRangeSliderTickMarkShape({double? tickMarkRadius})
  RoundRangeSliderTickMarkShape$Mate(
      {
      /// optionalParameters: {double? tickMarkRadius} , default:none
      super.tickMarkRadius})
      : mateParams = {
          'tickMarkRadius': _i2.BuilderArg<double?>(
            name: 'tickMarkRadius',
            init: tickMarkRadius,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'RoundRangeSliderTickMarkShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundRangeSliderTickMarkShape$Mate(
        tickMarkRadius: p.get('tickMarkRadius').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RoundSliderThumbShape extends SliderComponentShape
class RoundSliderThumbShape$Mate extends _i1.RoundSliderThumbShape
    with _i2.Mate {
  /// RoundSliderThumbShape RoundSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , default:processed=DoubleLiteralImpl
    super.enabledThumbRadius,

    /// optionalParameters: {double? disabledThumbRadius} , default:none
    super.disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , default:processed=DoubleLiteralImpl
    super.elevation,

    /// optionalParameters: {double pressedElevation = 6.0} , default:processed=DoubleLiteralImpl
    super.pressedElevation,
  })  : mateParams = {
          'enabledThumbRadius': _i2.BuilderArg<double>(
            name: 'enabledThumbRadius',
            init: enabledThumbRadius,
            isNamed: true,
            defaultValue: 10.0,
          ),
          'disabledThumbRadius': _i2.BuilderArg<double?>(
            name: 'disabledThumbRadius',
            init: disabledThumbRadius,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'pressedElevation': _i2.BuilderArg<double>(
            name: 'pressedElevation',
            init: pressedElevation,
            isNamed: true,
            defaultValue: 6.0,
          ),
        },
        super() {
    mateBuilderName = 'RoundSliderThumbShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundSliderThumbShape$Mate(
          enabledThumbRadius: p.get('enabledThumbRadius').build(),
          disabledThumbRadius: p.get('disabledThumbRadius').build(),
          elevation: p.get('elevation').build(),
          pressedElevation: p.get('pressedElevation').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RoundRangeSliderThumbShape extends RangeSliderThumbShape
class RoundRangeSliderThumbShape$Mate extends _i1.RoundRangeSliderThumbShape
    with _i2.Mate {
  /// RoundRangeSliderThumbShape RoundRangeSliderThumbShape({double enabledThumbRadius = 10.0, double? disabledThumbRadius, double elevation = 1.0, double pressedElevation = 6.0})
  RoundRangeSliderThumbShape$Mate({
    /// optionalParameters: {double enabledThumbRadius = 10.0} , default:processed=DoubleLiteralImpl
    super.enabledThumbRadius,

    /// optionalParameters: {double? disabledThumbRadius} , default:none
    super.disabledThumbRadius,

    /// optionalParameters: {double elevation = 1.0} , default:processed=DoubleLiteralImpl
    super.elevation,

    /// optionalParameters: {double pressedElevation = 6.0} , default:processed=DoubleLiteralImpl
    super.pressedElevation,
  })  : mateParams = {
          'enabledThumbRadius': _i2.BuilderArg<double>(
            name: 'enabledThumbRadius',
            init: enabledThumbRadius,
            isNamed: true,
            defaultValue: 10.0,
          ),
          'disabledThumbRadius': _i2.BuilderArg<double?>(
            name: 'disabledThumbRadius',
            init: disabledThumbRadius,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'pressedElevation': _i2.BuilderArg<double>(
            name: 'pressedElevation',
            init: pressedElevation,
            isNamed: true,
            defaultValue: 6.0,
          ),
        },
        super() {
    mateBuilderName = 'RoundRangeSliderThumbShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundRangeSliderThumbShape$Mate(
          enabledThumbRadius: p.get('enabledThumbRadius').build(),
          disabledThumbRadius: p.get('disabledThumbRadius').build(),
          elevation: p.get('elevation').build(),
          pressedElevation: p.get('pressedElevation').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RoundSliderOverlayShape extends SliderComponentShape
class RoundSliderOverlayShape$Mate extends _i1.RoundSliderOverlayShape
    with _i2.Mate {
  /// RoundSliderOverlayShape RoundSliderOverlayShape({double overlayRadius = 24.0})
  RoundSliderOverlayShape$Mate(
      {
      /// optionalParameters: {double overlayRadius = 24.0} , default:processed=DoubleLiteralImpl
      super.overlayRadius})
      : mateParams = {
          'overlayRadius': _i2.BuilderArg<double>(
            name: 'overlayRadius',
            init: overlayRadius,
            isNamed: true,
            defaultValue: 24.0,
          )
        },
        super() {
    mateBuilderName = 'RoundSliderOverlayShape';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RoundSliderOverlayShape$Mate(
        overlayRadius: p.get('overlayRadius').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RangeValues
class RangeValues$Mate extends _i1.RangeValues with _i2.Mate {
  /// RangeValues RangeValues(double start, double end)
  RangeValues$Mate(
    /// requiredParameters: double start
    super.start,

    /// requiredParameters: double end
    super.end,
  )   : mateParams = {
          'start': _i2.BuilderArg<double>(
            name: 'start',
            init: start,
            isNamed: false,
          ),
          'end': _i2.BuilderArg<double>(
            name: 'end',
            init: end,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'RangeValues';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RangeValues$Mate(
          p.get('start').value,
          p.get('end').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RangeLabels
class RangeLabels$Mate extends _i1.RangeLabels with _i2.Mate {
  /// RangeLabels RangeLabels(String start, String end)
  RangeLabels$Mate(
    /// requiredParameters: String start
    super.start,

    /// requiredParameters: String end
    super.end,
  )   : mateParams = {
          'start': _i2.BuilderArg<String>(
            name: 'start',
            init: start,
            isNamed: false,
          ),
          'end': _i2.BuilderArg<String>(
            name: 'end',
            init: end,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'RangeLabels';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RangeLabels$Mate(
          p.get('start').value,
          p.get('end').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
