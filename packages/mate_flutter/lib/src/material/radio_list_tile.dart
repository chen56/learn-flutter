// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/radio_list_tile.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/foundation/basic_types.dart' as _i4;
import 'package:flutter/src/services/mouse_cursor.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/src/material/material_state.dart' as _i7;
import 'package:flutter/src/material/theme_data.dart' as _i8;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:flutter/src/material/list_tile.dart' as _i10;
import 'package:flutter/material.dart' as _i11;
import 'package:flutter/src/painting/edge_insets.dart' as _i12;
import 'package:flutter/src/painting/borders.dart' as _i13;
import 'package:flutter/src/widgets/focus_manager.dart' as _i14;

/// class RadioListTile<T> extends StatelessWidget
class RadioListTile$Mate<T> extends _i1.RadioListTile<T> with _i2.Mate {
  /// RadioListTile<T> RadioListTile({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, bool autofocus = false, EdgeInsetsGeometry? contentPadding, ShapeBorder? shape, Color? tileColor, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback})
  RadioListTile$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required T value} , default:none
    required super.value,

    /// optionalParameters: {required T? groupValue} , default:none
    required super.groupValue,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required super.onChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {bool toggleable = false} , default:processed=BooleanLiteralImpl
    super.toggleable,

    /// optionalParameters: {Color? activeColor} , default:none
    super.activeColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , default:none
    super.fillColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    super.overlayColor,

    /// optionalParameters: {double? splashRadius} , default:none
    super.splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    super.materialTapTargetSize,

    /// optionalParameters: {Widget? title} , default:none
    super.title,

    /// optionalParameters: {Widget? subtitle} , default:none
    super.subtitle,

    /// optionalParameters: {bool isThreeLine = false} , default:processed=BooleanLiteralImpl
    super.isThreeLine,

    /// optionalParameters: {bool? dense} , default:none
    super.dense,

    /// optionalParameters: {Widget? secondary} , default:none
    super.secondary,

    /// optionalParameters: {bool selected = false} , default:processed=BooleanLiteralImpl
    super.selected,

    /// optionalParameters: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform} , default:processed=PrefixedIdentifierImpl
    super.controlAffinity,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    super.contentPadding,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {Color? tileColor} , default:none
    super.tileColor,

    /// optionalParameters: {Color? selectedTileColor} , default:none
    super.selectedTileColor,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    super.visualDensity,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    super.onFocusChange,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'groupValue': _i2.BuilderArg<T?>(
            name: 'groupValue',
            init: groupValue,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i4.ValueChanged<T?>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i5.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'toggleable': _i2.BuilderArg<bool>(
            name: 'toggleable',
            init: toggleable,
            isNamed: true,
            defaultValue: false,
          ),
          'activeColor': _i2.BuilderArg<_i6.Color?>(
            name: 'activeColor',
            init: activeColor,
            isNamed: true,
          ),
          'fillColor': _i2.BuilderArg<_i7.MaterialStateProperty<_i6.Color?>?>(
            name: 'fillColor',
            init: fillColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i6.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'overlayColor':
              _i2.BuilderArg<_i7.MaterialStateProperty<_i6.Color?>?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
          'splashRadius': _i2.BuilderArg<double?>(
            name: 'splashRadius',
            init: splashRadius,
            isNamed: true,
          ),
          'materialTapTargetSize': _i2.BuilderArg<_i8.MaterialTapTargetSize?>(
            name: 'materialTapTargetSize',
            init: materialTapTargetSize,
            isNamed: true,
          ),
          'title': _i2.BuilderArg<_i9.Widget?>(
            name: 'title',
            init: title,
            isNamed: true,
          ),
          'subtitle': _i2.BuilderArg<_i9.Widget?>(
            name: 'subtitle',
            init: subtitle,
            isNamed: true,
          ),
          'isThreeLine': _i2.BuilderArg<bool>(
            name: 'isThreeLine',
            init: isThreeLine,
            isNamed: true,
            defaultValue: false,
          ),
          'dense': _i2.BuilderArg<bool?>(
            name: 'dense',
            init: dense,
            isNamed: true,
          ),
          'secondary': _i2.BuilderArg<_i9.Widget?>(
            name: 'secondary',
            init: secondary,
            isNamed: true,
          ),
          'selected': _i2.BuilderArg<bool>(
            name: 'selected',
            init: selected,
            isNamed: true,
            defaultValue: false,
          ),
          'controlAffinity': _i2.BuilderArg<_i10.ListTileControlAffinity>(
            name: 'controlAffinity',
            init: controlAffinity,
            isNamed: true,
            defaultValue: _i11.ListTileControlAffinity.platform,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'contentPadding': _i2.BuilderArg<_i12.EdgeInsetsGeometry?>(
            name: 'contentPadding',
            init: contentPadding,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i13.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'tileColor': _i2.BuilderArg<_i6.Color?>(
            name: 'tileColor',
            init: tileColor,
            isNamed: true,
          ),
          'selectedTileColor': _i2.BuilderArg<_i6.Color?>(
            name: 'selectedTileColor',
            init: selectedTileColor,
            isNamed: true,
          ),
          'visualDensity': _i2.BuilderArg<_i8.VisualDensity?>(
            name: 'visualDensity',
            init: visualDensity,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i14.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'onFocusChange': _i2.BuilderArg<_i4.ValueChanged<bool>?>(
            name: 'onFocusChange',
            init: onFocusChange,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RadioListTile';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RadioListTile$Mate<T>(
          key: p.get('key').build(),
          value: p.get('value').build(),
          groupValue: p.get('groupValue').build(),
          onChanged: p.get('onChanged').build(),
          mouseCursor: p.get('mouseCursor').build(),
          toggleable: p.get('toggleable').build(),
          activeColor: p.get('activeColor').build(),
          fillColor: p.get('fillColor').build(),
          hoverColor: p.get('hoverColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          isThreeLine: p.get('isThreeLine').build(),
          dense: p.get('dense').build(),
          secondary: p.get('secondary').build(),
          selected: p.get('selected').build(),
          controlAffinity: p.get('controlAffinity').build(),
          autofocus: p.get('autofocus').build(),
          contentPadding: p.get('contentPadding').build(),
          shape: p.get('shape').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          visualDensity: p.get('visualDensity').build(),
          focusNode: p.get('focusNode').build(),
          onFocusChange: p.get('onFocusChange').build(),
          enableFeedback: p.get('enableFeedback').build(),
        );
  }

  /// RadioListTile<T> RadioListTile.adaptive({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, bool autofocus = false, EdgeInsetsGeometry? contentPadding, ShapeBorder? shape, Color? tileColor, Color? selectedTileColor, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback})
  RadioListTile$Mate.adaptive({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required T value} , default:none
    required super.value,

    /// optionalParameters: {required T? groupValue} , default:none
    required super.groupValue,

    /// optionalParameters: {required void Function(T?)? onChanged} , default:none
    required super.onChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {bool toggleable = false} , default:processed=BooleanLiteralImpl
    super.toggleable,

    /// optionalParameters: {Color? activeColor} , default:none
    super.activeColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , default:none
    super.fillColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    super.overlayColor,

    /// optionalParameters: {double? splashRadius} , default:none
    super.splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    super.materialTapTargetSize,

    /// optionalParameters: {Widget? title} , default:none
    super.title,

    /// optionalParameters: {Widget? subtitle} , default:none
    super.subtitle,

    /// optionalParameters: {bool isThreeLine = false} , default:processed=BooleanLiteralImpl
    super.isThreeLine,

    /// optionalParameters: {bool? dense} , default:none
    super.dense,

    /// optionalParameters: {Widget? secondary} , default:none
    super.secondary,

    /// optionalParameters: {bool selected = false} , default:processed=BooleanLiteralImpl
    super.selected,

    /// optionalParameters: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform} , default:processed=PrefixedIdentifierImpl
    super.controlAffinity,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , default:none
    super.contentPadding,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {Color? tileColor} , default:none
    super.tileColor,

    /// optionalParameters: {Color? selectedTileColor} , default:none
    super.selectedTileColor,

    /// optionalParameters: {VisualDensity? visualDensity} , default:none
    super.visualDensity,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {void Function(bool)? onFocusChange} , default:none
    super.onFocusChange,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'groupValue': _i2.BuilderArg<T?>(
            name: 'groupValue',
            init: groupValue,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i4.ValueChanged<T?>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i5.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'toggleable': _i2.BuilderArg<bool>(
            name: 'toggleable',
            init: toggleable,
            isNamed: true,
            defaultValue: false,
          ),
          'activeColor': _i2.BuilderArg<_i6.Color?>(
            name: 'activeColor',
            init: activeColor,
            isNamed: true,
          ),
          'fillColor': _i2.BuilderArg<_i7.MaterialStateProperty<_i6.Color?>?>(
            name: 'fillColor',
            init: fillColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i6.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'overlayColor':
              _i2.BuilderArg<_i7.MaterialStateProperty<_i6.Color?>?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
          'splashRadius': _i2.BuilderArg<double?>(
            name: 'splashRadius',
            init: splashRadius,
            isNamed: true,
          ),
          'materialTapTargetSize': _i2.BuilderArg<_i8.MaterialTapTargetSize?>(
            name: 'materialTapTargetSize',
            init: materialTapTargetSize,
            isNamed: true,
          ),
          'title': _i2.BuilderArg<_i9.Widget?>(
            name: 'title',
            init: title,
            isNamed: true,
          ),
          'subtitle': _i2.BuilderArg<_i9.Widget?>(
            name: 'subtitle',
            init: subtitle,
            isNamed: true,
          ),
          'isThreeLine': _i2.BuilderArg<bool>(
            name: 'isThreeLine',
            init: isThreeLine,
            isNamed: true,
            defaultValue: false,
          ),
          'dense': _i2.BuilderArg<bool?>(
            name: 'dense',
            init: dense,
            isNamed: true,
          ),
          'secondary': _i2.BuilderArg<_i9.Widget?>(
            name: 'secondary',
            init: secondary,
            isNamed: true,
          ),
          'selected': _i2.BuilderArg<bool>(
            name: 'selected',
            init: selected,
            isNamed: true,
            defaultValue: false,
          ),
          'controlAffinity': _i2.BuilderArg<_i10.ListTileControlAffinity>(
            name: 'controlAffinity',
            init: controlAffinity,
            isNamed: true,
            defaultValue: _i11.ListTileControlAffinity.platform,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'contentPadding': _i2.BuilderArg<_i12.EdgeInsetsGeometry?>(
            name: 'contentPadding',
            init: contentPadding,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i13.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'tileColor': _i2.BuilderArg<_i6.Color?>(
            name: 'tileColor',
            init: tileColor,
            isNamed: true,
          ),
          'selectedTileColor': _i2.BuilderArg<_i6.Color?>(
            name: 'selectedTileColor',
            init: selectedTileColor,
            isNamed: true,
          ),
          'visualDensity': _i2.BuilderArg<_i8.VisualDensity?>(
            name: 'visualDensity',
            init: visualDensity,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i14.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'onFocusChange': _i2.BuilderArg<_i4.ValueChanged<bool>?>(
            name: 'onFocusChange',
            init: onFocusChange,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
        },
        super.adaptive() {
    mateBuilderName = 'RadioListTile.adaptive';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => RadioListTile$Mate<T>.adaptive(
          key: p.get('key').build(),
          value: p.get('value').build(),
          groupValue: p.get('groupValue').build(),
          onChanged: p.get('onChanged').build(),
          mouseCursor: p.get('mouseCursor').build(),
          toggleable: p.get('toggleable').build(),
          activeColor: p.get('activeColor').build(),
          fillColor: p.get('fillColor').build(),
          hoverColor: p.get('hoverColor').build(),
          overlayColor: p.get('overlayColor').build(),
          splashRadius: p.get('splashRadius').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          title: p.get('title').build(),
          subtitle: p.get('subtitle').build(),
          isThreeLine: p.get('isThreeLine').build(),
          dense: p.get('dense').build(),
          secondary: p.get('secondary').build(),
          selected: p.get('selected').build(),
          controlAffinity: p.get('controlAffinity').build(),
          autofocus: p.get('autofocus').build(),
          contentPadding: p.get('contentPadding').build(),
          shape: p.get('shape').build(),
          tileColor: p.get('tileColor').build(),
          selectedTileColor: p.get('selectedTileColor').build(),
          visualDensity: p.get('visualDensity').build(),
          focusNode: p.get('focusNode').build(),
          onFocusChange: p.get('onFocusChange').build(),
          enableFeedback: p.get('enableFeedback').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
