// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/scaffold.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/edge_insets.dart' as _i6;
import 'package:flutter/src/widgets/preferred_size.dart' as _i7;
import 'package:flutter/src/material/floating_action_button_location.dart'
    as _i8;
import 'package:flutter/src/painting/alignment.dart' as _i9;
import 'package:flutter/cupertino.dart' as _i10;
import 'package:flutter/src/material/drawer.dart' as _i11;
import 'package:flutter/src/gestures/recognizer.dart' as _i12;
import 'package:flutter/gestures.dart' as _i13;

/// class ScaffoldMessenger extends StatefulWidget
class ScaffoldMessenger$Mate extends _i1.ScaffoldMessenger with _i2.Mate {
  /// ScaffoldMessenger ScaffoldMessenger({Key? key, required Widget child})
  ScaffoldMessenger$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ScaffoldMessenger';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ScaffoldMessenger$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ScaffoldPrelayoutGeometry
class ScaffoldPrelayoutGeometry$Mate extends _i1.ScaffoldPrelayoutGeometry
    with _i2.Mate {
  /// ScaffoldPrelayoutGeometry ScaffoldPrelayoutGeometry({required Size bottomSheetSize, required double contentBottom, required double contentTop, required Size floatingActionButtonSize, required EdgeInsets minInsets, required EdgeInsets minViewPadding, required Size scaffoldSize, required Size snackBarSize, required Size materialBannerSize, required TextDirection textDirection})
  ScaffoldPrelayoutGeometry$Mate({
    /// optionalParameters: {required Size bottomSheetSize} , default:none
    required super.bottomSheetSize,

    /// optionalParameters: {required double contentBottom} , default:none
    required super.contentBottom,

    /// optionalParameters: {required double contentTop} , default:none
    required super.contentTop,

    /// optionalParameters: {required Size floatingActionButtonSize} , default:none
    required super.floatingActionButtonSize,

    /// optionalParameters: {required EdgeInsets minInsets} , default:none
    required super.minInsets,

    /// optionalParameters: {required EdgeInsets minViewPadding} , default:none
    required super.minViewPadding,

    /// optionalParameters: {required Size scaffoldSize} , default:none
    required super.scaffoldSize,

    /// optionalParameters: {required Size snackBarSize} , default:none
    required super.snackBarSize,

    /// optionalParameters: {required Size materialBannerSize} , default:none
    required super.materialBannerSize,

    /// optionalParameters: {required TextDirection textDirection} , default:none
    required super.textDirection,
  })  : mateParams = {
          'bottomSheetSize': _i2.BuilderArg<_i5.Size>(
            name: 'bottomSheetSize',
            init: bottomSheetSize,
            isNamed: true,
          ),
          'contentBottom': _i2.BuilderArg<double>(
            name: 'contentBottom',
            init: contentBottom,
            isNamed: true,
          ),
          'contentTop': _i2.BuilderArg<double>(
            name: 'contentTop',
            init: contentTop,
            isNamed: true,
          ),
          'floatingActionButtonSize': _i2.BuilderArg<_i5.Size>(
            name: 'floatingActionButtonSize',
            init: floatingActionButtonSize,
            isNamed: true,
          ),
          'minInsets': _i2.BuilderArg<_i6.EdgeInsets>(
            name: 'minInsets',
            init: minInsets,
            isNamed: true,
          ),
          'minViewPadding': _i2.BuilderArg<_i6.EdgeInsets>(
            name: 'minViewPadding',
            init: minViewPadding,
            isNamed: true,
          ),
          'scaffoldSize': _i2.BuilderArg<_i5.Size>(
            name: 'scaffoldSize',
            init: scaffoldSize,
            isNamed: true,
          ),
          'snackBarSize': _i2.BuilderArg<_i5.Size>(
            name: 'snackBarSize',
            init: snackBarSize,
            isNamed: true,
          ),
          'materialBannerSize': _i2.BuilderArg<_i5.Size>(
            name: 'materialBannerSize',
            init: materialBannerSize,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i5.TextDirection>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ScaffoldPrelayoutGeometry';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ScaffoldPrelayoutGeometry$Mate(
          bottomSheetSize: p.get('bottomSheetSize').build(),
          contentBottom: p.get('contentBottom').build(),
          contentTop: p.get('contentTop').build(),
          floatingActionButtonSize: p.get('floatingActionButtonSize').build(),
          minInsets: p.get('minInsets').build(),
          minViewPadding: p.get('minViewPadding').build(),
          scaffoldSize: p.get('scaffoldSize').build(),
          snackBarSize: p.get('snackBarSize').build(),
          materialBannerSize: p.get('materialBannerSize').build(),
          textDirection: p.get('textDirection').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ScaffoldGeometry
class ScaffoldGeometry$Mate extends _i1.ScaffoldGeometry with _i2.Mate {
  /// ScaffoldGeometry ScaffoldGeometry({double? bottomNavigationBarTop, Rect? floatingActionButtonArea})
  ScaffoldGeometry$Mate({
    /// optionalParameters: {double? bottomNavigationBarTop} , default:none
    super.bottomNavigationBarTop,

    /// optionalParameters: {Rect? floatingActionButtonArea} , default:none
    super.floatingActionButtonArea,
  })  : mateParams = {
          'bottomNavigationBarTop': _i2.BuilderArg<double?>(
            name: 'bottomNavigationBarTop',
            init: bottomNavigationBarTop,
            isNamed: true,
          ),
          'floatingActionButtonArea': _i2.BuilderArg<_i5.Rect?>(
            name: 'floatingActionButtonArea',
            init: floatingActionButtonArea,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ScaffoldGeometry';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ScaffoldGeometry$Mate(
          bottomNavigationBarTop: p.get('bottomNavigationBarTop').build(),
          floatingActionButtonArea: p.get('floatingActionButtonArea').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Scaffold extends StatefulWidget
class Scaffold$Mate extends _i1.Scaffold with _i2.Mate {
  /// Scaffold Scaffold({Key? key, PreferredSizeWidget? appBar, Widget? body, Widget? floatingActionButton, FloatingActionButtonLocation? floatingActionButtonLocation, FloatingActionButtonAnimator? floatingActionButtonAnimator, List<Widget>? persistentFooterButtons, AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd, Widget? drawer, void Function(bool)? onDrawerChanged, Widget? endDrawer, void Function(bool)? onEndDrawerChanged, Widget? bottomNavigationBar, Widget? bottomSheet, Color? backgroundColor, bool? resizeToAvoidBottomInset, bool primary = true, DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start, bool extendBody = false, bool extendBodyBehindAppBar = false, Color? drawerScrimColor, double? drawerEdgeDragWidth, bool drawerEnableOpenDragGesture = true, bool endDrawerEnableOpenDragGesture = true, String? restorationId})
  Scaffold$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {PreferredSizeWidget? appBar} , default:none
    super.appBar,

    /// optionalParameters: {Widget? body} , default:none
    super.body,

    /// optionalParameters: {Widget? floatingActionButton} , default:none
    super.floatingActionButton,

    /// optionalParameters: {FloatingActionButtonLocation? floatingActionButtonLocation} , default:none
    super.floatingActionButtonLocation,

    /// optionalParameters: {FloatingActionButtonAnimator? floatingActionButtonAnimator} , default:none
    super.floatingActionButtonAnimator,

    /// optionalParameters: {List<Widget>? persistentFooterButtons} , default:none
    super.persistentFooterButtons,

    /// optionalParameters: {AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd} , default:processed=PrefixedIdentifierImpl
    super.persistentFooterAlignment,

    /// optionalParameters: {Widget? drawer} , default:none
    super.drawer,

    /// optionalParameters: {void Function(bool)? onDrawerChanged} , default:none
    super.onDrawerChanged,

    /// optionalParameters: {Widget? endDrawer} , default:none
    super.endDrawer,

    /// optionalParameters: {void Function(bool)? onEndDrawerChanged} , default:none
    super.onEndDrawerChanged,

    /// optionalParameters: {Widget? bottomNavigationBar} , default:none
    super.bottomNavigationBar,

    /// optionalParameters: {Widget? bottomSheet} , default:none
    super.bottomSheet,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {bool? resizeToAvoidBottomInset} , default:none
    super.resizeToAvoidBottomInset,

    /// optionalParameters: {bool primary = true} , default:processed=BooleanLiteralImpl
    super.primary,

    /// optionalParameters: {DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.drawerDragStartBehavior,

    /// optionalParameters: {bool extendBody = false} , default:processed=BooleanLiteralImpl
    super.extendBody,

    /// optionalParameters: {bool extendBodyBehindAppBar = false} , default:processed=BooleanLiteralImpl
    super.extendBodyBehindAppBar,

    /// optionalParameters: {Color? drawerScrimColor} , default:none
    super.drawerScrimColor,

    /// optionalParameters: {double? drawerEdgeDragWidth} , default:none
    super.drawerEdgeDragWidth,

    /// optionalParameters: {bool drawerEnableOpenDragGesture = true} , default:processed=BooleanLiteralImpl
    super.drawerEnableOpenDragGesture,

    /// optionalParameters: {bool endDrawerEnableOpenDragGesture = true} , default:processed=BooleanLiteralImpl
    super.endDrawerEnableOpenDragGesture,

    /// optionalParameters: {String? restorationId} , default:none
    super.restorationId,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'appBar': _i2.BuilderArg<_i7.PreferredSizeWidget?>(
            name: 'appBar',
            init: appBar,
            isNamed: true,
          ),
          'body': _i2.BuilderArg<_i4.Widget?>(
            name: 'body',
            init: body,
            isNamed: true,
          ),
          'floatingActionButton': _i2.BuilderArg<_i4.Widget?>(
            name: 'floatingActionButton',
            init: floatingActionButton,
            isNamed: true,
          ),
          'floatingActionButtonLocation':
              _i2.BuilderArg<_i8.FloatingActionButtonLocation?>(
            name: 'floatingActionButtonLocation',
            init: floatingActionButtonLocation,
            isNamed: true,
          ),
          'floatingActionButtonAnimator':
              _i2.BuilderArg<_i8.FloatingActionButtonAnimator?>(
            name: 'floatingActionButtonAnimator',
            init: floatingActionButtonAnimator,
            isNamed: true,
          ),
          'persistentFooterButtons': _i2.BuilderArg<List<_i4.Widget>?>(
            name: 'persistentFooterButtons',
            init: persistentFooterButtons,
            isNamed: true,
          ),
          'persistentFooterAlignment': _i2.BuilderArg<_i9.AlignmentDirectional>(
            name: 'persistentFooterAlignment',
            init: persistentFooterAlignment,
            isNamed: true,
            defaultValue: _i10.AlignmentDirectional.centerEnd,
          ),
          'drawer': _i2.BuilderArg<_i4.Widget?>(
            name: 'drawer',
            init: drawer,
            isNamed: true,
          ),
          'onDrawerChanged': _i2.BuilderArg<_i11.DrawerCallback?>(
            name: 'onDrawerChanged',
            init: onDrawerChanged,
            isNamed: true,
          ),
          'endDrawer': _i2.BuilderArg<_i4.Widget?>(
            name: 'endDrawer',
            init: endDrawer,
            isNamed: true,
          ),
          'onEndDrawerChanged': _i2.BuilderArg<_i11.DrawerCallback?>(
            name: 'onEndDrawerChanged',
            init: onEndDrawerChanged,
            isNamed: true,
          ),
          'bottomNavigationBar': _i2.BuilderArg<_i4.Widget?>(
            name: 'bottomNavigationBar',
            init: bottomNavigationBar,
            isNamed: true,
          ),
          'bottomSheet': _i2.BuilderArg<_i4.Widget?>(
            name: 'bottomSheet',
            init: bottomSheet,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i5.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'resizeToAvoidBottomInset': _i2.BuilderArg<bool?>(
            name: 'resizeToAvoidBottomInset',
            init: resizeToAvoidBottomInset,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<bool>(
            name: 'primary',
            init: primary,
            isNamed: true,
            defaultValue: true,
          ),
          'drawerDragStartBehavior': _i2.BuilderArg<_i12.DragStartBehavior>(
            name: 'drawerDragStartBehavior',
            init: drawerDragStartBehavior,
            isNamed: true,
            defaultValue: _i13.DragStartBehavior.start,
          ),
          'extendBody': _i2.BuilderArg<bool>(
            name: 'extendBody',
            init: extendBody,
            isNamed: true,
            defaultValue: false,
          ),
          'extendBodyBehindAppBar': _i2.BuilderArg<bool>(
            name: 'extendBodyBehindAppBar',
            init: extendBodyBehindAppBar,
            isNamed: true,
            defaultValue: false,
          ),
          'drawerScrimColor': _i2.BuilderArg<_i5.Color?>(
            name: 'drawerScrimColor',
            init: drawerScrimColor,
            isNamed: true,
          ),
          'drawerEdgeDragWidth': _i2.BuilderArg<double?>(
            name: 'drawerEdgeDragWidth',
            init: drawerEdgeDragWidth,
            isNamed: true,
          ),
          'drawerEnableOpenDragGesture': _i2.BuilderArg<bool>(
            name: 'drawerEnableOpenDragGesture',
            init: drawerEnableOpenDragGesture,
            isNamed: true,
            defaultValue: true,
          ),
          'endDrawerEnableOpenDragGesture': _i2.BuilderArg<bool>(
            name: 'endDrawerEnableOpenDragGesture',
            init: endDrawerEnableOpenDragGesture,
            isNamed: true,
            defaultValue: true,
          ),
          'restorationId': _i2.BuilderArg<String?>(
            name: 'restorationId',
            init: restorationId,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Scaffold';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Scaffold$Mate(
          key: p.get('key').build(),
          appBar: p.get('appBar').build(),
          body: p.get('body').build(),
          floatingActionButton: p.get('floatingActionButton').build(),
          floatingActionButtonLocation:
              p.get('floatingActionButtonLocation').build(),
          floatingActionButtonAnimator:
              p.get('floatingActionButtonAnimator').build(),
          persistentFooterButtons: p.get('persistentFooterButtons').build(),
          persistentFooterAlignment: p.get('persistentFooterAlignment').build(),
          drawer: p.get('drawer').build(),
          onDrawerChanged: p.get('onDrawerChanged').build(),
          endDrawer: p.get('endDrawer').build(),
          onEndDrawerChanged: p.get('onEndDrawerChanged').build(),
          bottomNavigationBar: p.get('bottomNavigationBar').build(),
          bottomSheet: p.get('bottomSheet').build(),
          backgroundColor: p.get('backgroundColor').build(),
          resizeToAvoidBottomInset: p.get('resizeToAvoidBottomInset').build(),
          primary: p.get('primary').build(),
          drawerDragStartBehavior: p.get('drawerDragStartBehavior').build(),
          extendBody: p.get('extendBody').build(),
          extendBodyBehindAppBar: p.get('extendBodyBehindAppBar').build(),
          drawerScrimColor: p.get('drawerScrimColor').build(),
          drawerEdgeDragWidth: p.get('drawerEdgeDragWidth').build(),
          drawerEnableOpenDragGesture:
              p.get('drawerEnableOpenDragGesture').build(),
          endDrawerEnableOpenDragGesture:
              p.get('endDrawerEnableOpenDragGesture').build(),
          restorationId: p.get('restorationId').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
