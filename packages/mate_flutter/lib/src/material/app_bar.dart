// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/app_bar.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/preferred_size.dart' as _i5;
import 'package:flutter/src/widgets/scroll_notification.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/painting/borders.dart' as _i8;
import 'package:flutter/src/widgets/icon_theme_data.dart' as _i9;
import 'package:flutter/src/painting/text_style.dart' as _i10;
import 'package:flutter/src/services/system_chrome.dart' as _i11;
import 'package:flutter/src/foundation/basic_types.dart' as _i12;

/// class AppBar extends StatefulWidget implements PreferredSizeWidget
class AppBar$Mate extends _i1.AppBar with _i2.Mate {
  /// AppBar AppBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, double? scrolledUnderElevation, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? backgroundColor, Color? foregroundColor, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, bool excludeHeaderSemantics = false, double? titleSpacing, double toolbarOpacity = 1.0, double bottomOpacity = 1.0, double? toolbarHeight, double? leadingWidth, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false, Clip? clipBehavior})
  AppBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? leading} , default:none
    super.leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , default:processed=BooleanLiteralImpl
    super.automaticallyImplyLeading,

    /// optionalParameters: {Widget? title} , default:none
    super.title,

    /// optionalParameters: {List<Widget>? actions} , default:none
    super.actions,

    /// optionalParameters: {Widget? flexibleSpace} , default:none
    super.flexibleSpace,

    /// optionalParameters: {PreferredSizeWidget? bottom} , default:none
    super.bottom,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {double? scrolledUnderElevation} , default:none
    super.scrolledUnderElevation,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , default:unprocessed=SimpleIdentifierImpl
    super.notificationPredicate,

    /// optionalParameters: {Color? shadowColor} , default:none
    super.shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    super.surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {Color? foregroundColor} , default:none
    super.foregroundColor,

    /// optionalParameters: {IconThemeData? iconTheme} , default:none
    super.iconTheme,

    /// optionalParameters: {IconThemeData? actionsIconTheme} , default:none
    super.actionsIconTheme,

    /// optionalParameters: {bool primary = true} , default:processed=BooleanLiteralImpl
    super.primary,

    /// optionalParameters: {bool? centerTitle} , default:none
    super.centerTitle,

    /// optionalParameters: {bool excludeHeaderSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeHeaderSemantics,

    /// optionalParameters: {double? titleSpacing} , default:none
    super.titleSpacing,

    /// optionalParameters: {double toolbarOpacity = 1.0} , default:processed=DoubleLiteralImpl
    super.toolbarOpacity,

    /// optionalParameters: {double bottomOpacity = 1.0} , default:processed=DoubleLiteralImpl
    super.bottomOpacity,

    /// optionalParameters: {double? toolbarHeight} , default:none
    super.toolbarHeight,

    /// optionalParameters: {double? leadingWidth} , default:none
    super.leadingWidth,

    /// optionalParameters: {TextStyle? toolbarTextStyle} , default:none
    super.toolbarTextStyle,

    /// optionalParameters: {TextStyle? titleTextStyle} , default:none
    super.titleTextStyle,

    /// optionalParameters: {SystemUiOverlayStyle? systemOverlayStyle} , default:none
    super.systemOverlayStyle,

    /// optionalParameters: {bool forceMaterialTransparency = false} , default:processed=BooleanLiteralImpl
    super.forceMaterialTransparency,

    /// optionalParameters: {Clip? clipBehavior} , default:none
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'leading': _i2.BuilderArg<_i4.Widget?>(
            name: 'leading',
            init: leading,
            isNamed: true,
          ),
          'automaticallyImplyLeading': _i2.BuilderArg<bool>(
            name: 'automaticallyImplyLeading',
            init: automaticallyImplyLeading,
            isNamed: true,
            defaultValue: true,
          ),
          'title': _i2.BuilderArg<_i4.Widget?>(
            name: 'title',
            init: title,
            isNamed: true,
          ),
          'actions': _i2.BuilderArg<List<_i4.Widget>?>(
            name: 'actions',
            init: actions,
            isNamed: true,
          ),
          'flexibleSpace': _i2.BuilderArg<_i4.Widget?>(
            name: 'flexibleSpace',
            init: flexibleSpace,
            isNamed: true,
          ),
          'bottom': _i2.BuilderArg<_i5.PreferredSizeWidget?>(
            name: 'bottom',
            init: bottom,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'scrolledUnderElevation': _i2.BuilderArg<double?>(
            name: 'scrolledUnderElevation',
            init: scrolledUnderElevation,
            isNamed: true,
          ),
          'notificationPredicate':
              _i2.BuilderArg<_i6.ScrollNotificationPredicate>(
            name: 'notificationPredicate',
            init: notificationPredicate,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i7.Color?>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'surfaceTintColor': _i2.BuilderArg<_i7.Color?>(
            name: 'surfaceTintColor',
            init: surfaceTintColor,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i8.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i7.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'foregroundColor': _i2.BuilderArg<_i7.Color?>(
            name: 'foregroundColor',
            init: foregroundColor,
            isNamed: true,
          ),
          'iconTheme': _i2.BuilderArg<_i9.IconThemeData?>(
            name: 'iconTheme',
            init: iconTheme,
            isNamed: true,
          ),
          'actionsIconTheme': _i2.BuilderArg<_i9.IconThemeData?>(
            name: 'actionsIconTheme',
            init: actionsIconTheme,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<bool>(
            name: 'primary',
            init: primary,
            isNamed: true,
            defaultValue: true,
          ),
          'centerTitle': _i2.BuilderArg<bool?>(
            name: 'centerTitle',
            init: centerTitle,
            isNamed: true,
          ),
          'excludeHeaderSemantics': _i2.BuilderArg<bool>(
            name: 'excludeHeaderSemantics',
            init: excludeHeaderSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'titleSpacing': _i2.BuilderArg<double?>(
            name: 'titleSpacing',
            init: titleSpacing,
            isNamed: true,
          ),
          'toolbarOpacity': _i2.BuilderArg<double>(
            name: 'toolbarOpacity',
            init: toolbarOpacity,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'bottomOpacity': _i2.BuilderArg<double>(
            name: 'bottomOpacity',
            init: bottomOpacity,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'toolbarHeight': _i2.BuilderArg<double?>(
            name: 'toolbarHeight',
            init: toolbarHeight,
            isNamed: true,
          ),
          'leadingWidth': _i2.BuilderArg<double?>(
            name: 'leadingWidth',
            init: leadingWidth,
            isNamed: true,
          ),
          'toolbarTextStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'toolbarTextStyle',
            init: toolbarTextStyle,
            isNamed: true,
          ),
          'titleTextStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'titleTextStyle',
            init: titleTextStyle,
            isNamed: true,
          ),
          'systemOverlayStyle': _i2.BuilderArg<_i11.SystemUiOverlayStyle?>(
            name: 'systemOverlayStyle',
            init: systemOverlayStyle,
            isNamed: true,
          ),
          'forceMaterialTransparency': _i2.BuilderArg<bool>(
            name: 'forceMaterialTransparency',
            init: forceMaterialTransparency,
            isNamed: true,
            defaultValue: false,
          ),
          'clipBehavior': _i2.BuilderArg<_i7.Clip?>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AppBar';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => AppBar$Mate(
          key: p.get('key').build(),
          leading: p.get('leading').build(),
          automaticallyImplyLeading: p.get('automaticallyImplyLeading').build(),
          title: p.get('title').build(),
          actions: p.get('actions').build(),
          flexibleSpace: p.get('flexibleSpace').build(),
          bottom: p.get('bottom').build(),
          elevation: p.get('elevation').build(),
          scrolledUnderElevation: p.get('scrolledUnderElevation').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          shape: p.get('shape').build(),
          backgroundColor: p.get('backgroundColor').build(),
          foregroundColor: p.get('foregroundColor').build(),
          iconTheme: p.get('iconTheme').build(),
          actionsIconTheme: p.get('actionsIconTheme').build(),
          primary: p.get('primary').build(),
          centerTitle: p.get('centerTitle').build(),
          excludeHeaderSemantics: p.get('excludeHeaderSemantics').build(),
          titleSpacing: p.get('titleSpacing').build(),
          toolbarOpacity: p.get('toolbarOpacity').build(),
          bottomOpacity: p.get('bottomOpacity').build(),
          toolbarHeight: p.get('toolbarHeight').build(),
          leadingWidth: p.get('leadingWidth').build(),
          toolbarTextStyle: p.get('toolbarTextStyle').build(),
          titleTextStyle: p.get('titleTextStyle').build(),
          systemOverlayStyle: p.get('systemOverlayStyle').build(),
          forceMaterialTransparency: p.get('forceMaterialTransparency').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverAppBar extends StatefulWidget
class SliverAppBar$Mate extends _i1.SliverAppBar with _i2.Mate {
  /// SliverAppBar SliverAppBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, double? scrolledUnderElevation, Color? shadowColor, Color? surfaceTintColor, bool forceElevated = false, Color? backgroundColor, Color? foregroundColor, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, bool excludeHeaderSemantics = false, double? titleSpacing, double? collapsedHeight, double? expandedHeight, bool floating = false, bool pinned = false, bool snap = false, bool stretch = false, double stretchTriggerOffset = 100.0, Future<void> Function()? onStretchTrigger, ShapeBorder? shape, double toolbarHeight = kToolbarHeight, double? leadingWidth, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false, Clip? clipBehavior})
  SliverAppBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? leading} , default:none
    super.leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , default:processed=BooleanLiteralImpl
    super.automaticallyImplyLeading,

    /// optionalParameters: {Widget? title} , default:none
    super.title,

    /// optionalParameters: {List<Widget>? actions} , default:none
    super.actions,

    /// optionalParameters: {Widget? flexibleSpace} , default:none
    super.flexibleSpace,

    /// optionalParameters: {PreferredSizeWidget? bottom} , default:none
    super.bottom,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {double? scrolledUnderElevation} , default:none
    super.scrolledUnderElevation,

    /// optionalParameters: {Color? shadowColor} , default:none
    super.shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    super.surfaceTintColor,

    /// optionalParameters: {bool forceElevated = false} , default:processed=BooleanLiteralImpl
    super.forceElevated,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {Color? foregroundColor} , default:none
    super.foregroundColor,

    /// optionalParameters: {IconThemeData? iconTheme} , default:none
    super.iconTheme,

    /// optionalParameters: {IconThemeData? actionsIconTheme} , default:none
    super.actionsIconTheme,

    /// optionalParameters: {bool primary = true} , default:processed=BooleanLiteralImpl
    super.primary,

    /// optionalParameters: {bool? centerTitle} , default:none
    super.centerTitle,

    /// optionalParameters: {bool excludeHeaderSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeHeaderSemantics,

    /// optionalParameters: {double? titleSpacing} , default:none
    super.titleSpacing,

    /// optionalParameters: {double? collapsedHeight} , default:none
    super.collapsedHeight,

    /// optionalParameters: {double? expandedHeight} , default:none
    super.expandedHeight,

    /// optionalParameters: {bool floating = false} , default:processed=BooleanLiteralImpl
    super.floating,

    /// optionalParameters: {bool pinned = false} , default:processed=BooleanLiteralImpl
    super.pinned,

    /// optionalParameters: {bool snap = false} , default:processed=BooleanLiteralImpl
    super.snap,

    /// optionalParameters: {bool stretch = false} , default:processed=BooleanLiteralImpl
    super.stretch,

    /// optionalParameters: {double stretchTriggerOffset = 100.0} , default:processed=DoubleLiteralImpl
    super.stretchTriggerOffset,

    /// optionalParameters: {Future<void> Function()? onStretchTrigger} , default:none
    super.onStretchTrigger,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {double toolbarHeight = kToolbarHeight} , default:unprocessed=SimpleIdentifierImpl
    super.toolbarHeight,

    /// optionalParameters: {double? leadingWidth} , default:none
    super.leadingWidth,

    /// optionalParameters: {TextStyle? toolbarTextStyle} , default:none
    super.toolbarTextStyle,

    /// optionalParameters: {TextStyle? titleTextStyle} , default:none
    super.titleTextStyle,

    /// optionalParameters: {SystemUiOverlayStyle? systemOverlayStyle} , default:none
    super.systemOverlayStyle,

    /// optionalParameters: {bool forceMaterialTransparency = false} , default:processed=BooleanLiteralImpl
    super.forceMaterialTransparency,

    /// optionalParameters: {Clip? clipBehavior} , default:none
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'leading': _i2.BuilderArg<_i4.Widget?>(
            name: 'leading',
            init: leading,
            isNamed: true,
          ),
          'automaticallyImplyLeading': _i2.BuilderArg<bool>(
            name: 'automaticallyImplyLeading',
            init: automaticallyImplyLeading,
            isNamed: true,
            defaultValue: true,
          ),
          'title': _i2.BuilderArg<_i4.Widget?>(
            name: 'title',
            init: title,
            isNamed: true,
          ),
          'actions': _i2.BuilderArg<List<_i4.Widget>?>(
            name: 'actions',
            init: actions,
            isNamed: true,
          ),
          'flexibleSpace': _i2.BuilderArg<_i4.Widget?>(
            name: 'flexibleSpace',
            init: flexibleSpace,
            isNamed: true,
          ),
          'bottom': _i2.BuilderArg<_i5.PreferredSizeWidget?>(
            name: 'bottom',
            init: bottom,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'scrolledUnderElevation': _i2.BuilderArg<double?>(
            name: 'scrolledUnderElevation',
            init: scrolledUnderElevation,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i7.Color?>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'surfaceTintColor': _i2.BuilderArg<_i7.Color?>(
            name: 'surfaceTintColor',
            init: surfaceTintColor,
            isNamed: true,
          ),
          'forceElevated': _i2.BuilderArg<bool>(
            name: 'forceElevated',
            init: forceElevated,
            isNamed: true,
            defaultValue: false,
          ),
          'backgroundColor': _i2.BuilderArg<_i7.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'foregroundColor': _i2.BuilderArg<_i7.Color?>(
            name: 'foregroundColor',
            init: foregroundColor,
            isNamed: true,
          ),
          'iconTheme': _i2.BuilderArg<_i9.IconThemeData?>(
            name: 'iconTheme',
            init: iconTheme,
            isNamed: true,
          ),
          'actionsIconTheme': _i2.BuilderArg<_i9.IconThemeData?>(
            name: 'actionsIconTheme',
            init: actionsIconTheme,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<bool>(
            name: 'primary',
            init: primary,
            isNamed: true,
            defaultValue: true,
          ),
          'centerTitle': _i2.BuilderArg<bool?>(
            name: 'centerTitle',
            init: centerTitle,
            isNamed: true,
          ),
          'excludeHeaderSemantics': _i2.BuilderArg<bool>(
            name: 'excludeHeaderSemantics',
            init: excludeHeaderSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'titleSpacing': _i2.BuilderArg<double?>(
            name: 'titleSpacing',
            init: titleSpacing,
            isNamed: true,
          ),
          'collapsedHeight': _i2.BuilderArg<double?>(
            name: 'collapsedHeight',
            init: collapsedHeight,
            isNamed: true,
          ),
          'expandedHeight': _i2.BuilderArg<double?>(
            name: 'expandedHeight',
            init: expandedHeight,
            isNamed: true,
          ),
          'floating': _i2.BuilderArg<bool>(
            name: 'floating',
            init: floating,
            isNamed: true,
            defaultValue: false,
          ),
          'pinned': _i2.BuilderArg<bool>(
            name: 'pinned',
            init: pinned,
            isNamed: true,
            defaultValue: false,
          ),
          'snap': _i2.BuilderArg<bool>(
            name: 'snap',
            init: snap,
            isNamed: true,
            defaultValue: false,
          ),
          'stretch': _i2.BuilderArg<bool>(
            name: 'stretch',
            init: stretch,
            isNamed: true,
            defaultValue: false,
          ),
          'stretchTriggerOffset': _i2.BuilderArg<double>(
            name: 'stretchTriggerOffset',
            init: stretchTriggerOffset,
            isNamed: true,
            defaultValue: 100.0,
          ),
          'onStretchTrigger': _i2.BuilderArg<_i12.AsyncCallback?>(
            name: 'onStretchTrigger',
            init: onStretchTrigger,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i8.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'toolbarHeight': _i2.BuilderArg<double>(
            name: 'toolbarHeight',
            init: toolbarHeight,
            isNamed: true,
          ),
          'leadingWidth': _i2.BuilderArg<double?>(
            name: 'leadingWidth',
            init: leadingWidth,
            isNamed: true,
          ),
          'toolbarTextStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'toolbarTextStyle',
            init: toolbarTextStyle,
            isNamed: true,
          ),
          'titleTextStyle': _i2.BuilderArg<_i10.TextStyle?>(
            name: 'titleTextStyle',
            init: titleTextStyle,
            isNamed: true,
          ),
          'systemOverlayStyle': _i2.BuilderArg<_i11.SystemUiOverlayStyle?>(
            name: 'systemOverlayStyle',
            init: systemOverlayStyle,
            isNamed: true,
          ),
          'forceMaterialTransparency': _i2.BuilderArg<bool>(
            name: 'forceMaterialTransparency',
            init: forceMaterialTransparency,
            isNamed: true,
            defaultValue: false,
          ),
          'clipBehavior': _i2.BuilderArg<_i7.Clip?>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverAppBar';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SliverAppBar$Mate(
          key: p.get('key').build(),
          leading: p.get('leading').build(),
          automaticallyImplyLeading: p.get('automaticallyImplyLeading').build(),
          title: p.get('title').build(),
          actions: p.get('actions').build(),
          flexibleSpace: p.get('flexibleSpace').build(),
          bottom: p.get('bottom').build(),
          elevation: p.get('elevation').build(),
          scrolledUnderElevation: p.get('scrolledUnderElevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          forceElevated: p.get('forceElevated').build(),
          backgroundColor: p.get('backgroundColor').build(),
          foregroundColor: p.get('foregroundColor').build(),
          iconTheme: p.get('iconTheme').build(),
          actionsIconTheme: p.get('actionsIconTheme').build(),
          primary: p.get('primary').build(),
          centerTitle: p.get('centerTitle').build(),
          excludeHeaderSemantics: p.get('excludeHeaderSemantics').build(),
          titleSpacing: p.get('titleSpacing').build(),
          collapsedHeight: p.get('collapsedHeight').build(),
          expandedHeight: p.get('expandedHeight').build(),
          floating: p.get('floating').build(),
          pinned: p.get('pinned').build(),
          snap: p.get('snap').build(),
          stretch: p.get('stretch').build(),
          stretchTriggerOffset: p.get('stretchTriggerOffset').build(),
          onStretchTrigger: p.get('onStretchTrigger').build(),
          shape: p.get('shape').build(),
          toolbarHeight: p.get('toolbarHeight').build(),
          leadingWidth: p.get('leadingWidth').build(),
          toolbarTextStyle: p.get('toolbarTextStyle').build(),
          titleTextStyle: p.get('titleTextStyle').build(),
          systemOverlayStyle: p.get('systemOverlayStyle').build(),
          forceMaterialTransparency: p.get('forceMaterialTransparency').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
