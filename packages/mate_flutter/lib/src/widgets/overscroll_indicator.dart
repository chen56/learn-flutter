// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/overscroll_indicator.dart' as _i1;
import 'package:note/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/basic_types.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/widgets/scroll_notification.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i7;

/// class GlowingOverscrollIndicator extends StatefulWidget
class GlowingOverscrollIndicator$Mate extends _i1.GlowingOverscrollIndicator
    with _i2.Mate {
  /// GlowingOverscrollIndicator GlowingOverscrollIndicator({Key? key, bool showLeading = true, bool showTrailing = true, required AxisDirection axisDirection, required Color color, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Widget? child})
  GlowingOverscrollIndicator$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool showLeading = true} , default:processed=BooleanLiteralImpl
    super.showLeading,

    /// optionalParameters: {bool showTrailing = true} , default:processed=BooleanLiteralImpl
    super.showTrailing,

    /// optionalParameters: {required AxisDirection axisDirection} , default:none
    required super.axisDirection,

    /// optionalParameters: {required Color color} , default:none
    required super.color,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , default:unprocessed=SimpleIdentifierImpl
    super.notificationPredicate,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'showLeading': _i2.BuilderArg<bool>(
            name: 'showLeading',
            init: showLeading,
            isNamed: true,
            defaultValue: true,
          ),
          'showTrailing': _i2.BuilderArg<bool>(
            name: 'showTrailing',
            init: showTrailing,
            isNamed: true,
            defaultValue: true,
          ),
          'axisDirection': _i2.BuilderArg<_i4.AxisDirection>(
            name: 'axisDirection',
            init: axisDirection,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'notificationPredicate':
              _i2.BuilderArg<_i6.ScrollNotificationPredicate>(
            name: 'notificationPredicate',
            init: notificationPredicate,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i7.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'GlowingOverscrollIndicator';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => GlowingOverscrollIndicator$Mate(
          key: p.get('key').build(),
          showLeading: p.get('showLeading').build(),
          showTrailing: p.get('showTrailing').build(),
          axisDirection: p.get('axisDirection').build(),
          color: p.get('color').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class StretchingOverscrollIndicator extends StatefulWidget
class StretchingOverscrollIndicator$Mate
    extends _i1.StretchingOverscrollIndicator with _i2.Mate {
  /// StretchingOverscrollIndicator StretchingOverscrollIndicator({Key? key, required AxisDirection axisDirection, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Clip clipBehavior = Clip.hardEdge, Widget? child})
  StretchingOverscrollIndicator$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required AxisDirection axisDirection} , default:none
    required super.axisDirection,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , default:unprocessed=SimpleIdentifierImpl
    super.notificationPredicate,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'axisDirection': _i2.BuilderArg<_i4.AxisDirection>(
            name: 'axisDirection',
            init: axisDirection,
            isNamed: true,
          ),
          'notificationPredicate':
              _i2.BuilderArg<_i6.ScrollNotificationPredicate>(
            name: 'notificationPredicate',
            init: notificationPredicate,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.hardEdge,
          ),
          'child': _i2.BuilderArg<_i7.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'StretchingOverscrollIndicator';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => StretchingOverscrollIndicator$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          notificationPredicate: p.get('notificationPredicate').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class OverscrollIndicatorNotification extends Notification with ViewportNotificationMixin
class OverscrollIndicatorNotification$Mate
    extends _i1.OverscrollIndicatorNotification with _i2.Mate {
  /// OverscrollIndicatorNotification OverscrollIndicatorNotification({required bool leading})
  OverscrollIndicatorNotification$Mate(
      {
      /// optionalParameters: {required bool leading} , default:none
      required super.leading})
      : mateParams = {
          'leading': _i2.BuilderArg<bool>(
            name: 'leading',
            init: leading,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'OverscrollIndicatorNotification';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) =>
        OverscrollIndicatorNotification$Mate(leading: p.get('leading').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
