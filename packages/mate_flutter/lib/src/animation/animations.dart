// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/animation/animations.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/animation/animation.dart' as _i3;
import 'package:flutter/src/animation/curves.dart' as _i4;
import 'dart:ui' as _i5;

/// class AlwaysStoppedAnimation<T> extends Animation<T>
class AlwaysStoppedAnimation$Mate<T> extends _i1.AlwaysStoppedAnimation<T>
    with _i2.Mate {
  /// AlwaysStoppedAnimation<T> AlwaysStoppedAnimation(T value)
  AlwaysStoppedAnimation$Mate(

      /// requiredParameters: T value
      super.value)
      : mateParams = {
          'value': _i2.BuilderArg<T>(
            name: 'value',
            init: value,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'AlwaysStoppedAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AlwaysStoppedAnimation$Mate<T>(p.get('value').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ProxyAnimation extends Animation<double> with AnimationLazyListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class ProxyAnimation$Mate extends _i1.ProxyAnimation with _i2.Mate {
  /// ProxyAnimation ProxyAnimation([Animation<double>? animation])
  ProxyAnimation$Mate(

      /// requiredParameters: [Animation<double>? animation]
      super.animation)
      : mateParams = {
          'animation': _i2.BuilderArg<_i3.Animation<double>?>(
            name: 'animation',
            init: animation,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'ProxyAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ProxyAnimation$Mate(p.get('animation').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ReverseAnimation extends Animation<double> with AnimationLazyListenerMixin, AnimationLocalStatusListenersMixin
class ReverseAnimation$Mate extends _i1.ReverseAnimation with _i2.Mate {
  /// ReverseAnimation ReverseAnimation(Animation<double> parent)
  ReverseAnimation$Mate(

      /// requiredParameters: Animation<double> parent
      super.parent)
      : mateParams = {
          'parent': _i2.BuilderArg<_i3.Animation<double>>(
            name: 'parent',
            init: parent,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'ReverseAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => ReverseAnimation$Mate(p.get('parent').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CurvedAnimation extends Animation<double> with AnimationWithParentMixin<double>
class CurvedAnimation$Mate extends _i1.CurvedAnimation with _i2.Mate {
  /// CurvedAnimation CurvedAnimation({required Animation<double> parent, required Curve curve, Curve? reverseCurve})
  CurvedAnimation$Mate({
    /// optionalParameters: {required Animation<double> parent} , default:none
    required super.parent,

    /// optionalParameters: {required Curve curve} , default:none
    required super.curve,

    /// optionalParameters: {Curve? reverseCurve} , default:none
    super.reverseCurve,
  })  : mateParams = {
          'parent': _i2.BuilderArg<_i3.Animation<double>>(
            name: 'parent',
            init: parent,
            isNamed: true,
          ),
          'curve': _i2.BuilderArg<_i4.Curve>(
            name: 'curve',
            init: curve,
            isNamed: true,
          ),
          'reverseCurve': _i2.BuilderArg<_i4.Curve?>(
            name: 'reverseCurve',
            init: reverseCurve,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CurvedAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => CurvedAnimation$Mate(
          parent: p.get('parent').build(),
          curve: p.get('curve').build(),
          reverseCurve: p.get('reverseCurve').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TrainHoppingAnimation extends Animation<double> with AnimationEagerListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class TrainHoppingAnimation$Mate extends _i1.TrainHoppingAnimation
    with _i2.Mate {
  /// TrainHoppingAnimation TrainHoppingAnimation(Animation<double> _currentTrain, Animation<double>? _nextTrain, {void Function()? onSwitchedTrain})
  TrainHoppingAnimation$Mate(
    /// requiredParameters: Animation<double> _currentTrain
    super._currentTrain,

    /// requiredParameters: Animation<double>? _nextTrain
    super._nextTrain, {
    /// optionalParameters: {void Function()? onSwitchedTrain} , default:none
    super.onSwitchedTrain,
  })  : mateParams = {
          '_currentTrain': _i2.BuilderArg<_i3.Animation<double>>(
            name: '_currentTrain',
            init: _currentTrain,
            isNamed: false,
          ),
          '_nextTrain': _i2.BuilderArg<_i3.Animation<double>?>(
            name: '_nextTrain',
            init: _nextTrain,
            isNamed: false,
          ),
          'onSwitchedTrain': _i2.BuilderArg<_i5.VoidCallback?>(
            name: 'onSwitchedTrain',
            init: onSwitchedTrain,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TrainHoppingAnimation';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => TrainHoppingAnimation$Mate(
          p.get('_currentTrain').value,
          p.get('_nextTrain').value,
          onSwitchedTrain: p.get('onSwitchedTrain').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimationMean extends CompoundAnimation<double>
class AnimationMean$Mate extends _i1.AnimationMean with _i2.Mate {
  /// AnimationMean AnimationMean({required Animation<double> left, required Animation<double> right})
  AnimationMean$Mate({
    /// optionalParameters: {required Animation<double> left} , default:none
    required super.left,

    /// optionalParameters: {required Animation<double> right} , default:none
    required super.right,
  })  : mateParams = {
          'left': _i2.BuilderArg<_i3.Animation<double>>(
            name: 'left',
            init: left,
            isNamed: true,
          ),
          'right': _i2.BuilderArg<_i3.Animation<double>>(
            name: 'right',
            init: right,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimationMean';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationMean$Mate(
          left: p.get('left').build(),
          right: p.get('right').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimationMax<T extends num> extends CompoundAnimation<T>
class AnimationMax$Mate<T extends num> extends _i1.AnimationMax<T>
    with _i2.Mate {
  /// AnimationMax<T> AnimationMax(Animation<T> first, Animation<T> next)
  AnimationMax$Mate(
    /// requiredParameters: Animation<T> first
    super.first,

    /// requiredParameters: Animation<T> next
    super.next,
  )   : mateParams = {
          'first': _i2.BuilderArg<_i3.Animation<T>>(
            name: 'first',
            init: first,
            isNamed: false,
          ),
          'next': _i2.BuilderArg<_i3.Animation<T>>(
            name: 'next',
            init: next,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'AnimationMax';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationMax$Mate<T>(
          p.get('first').value,
          p.get('next').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AnimationMin<T extends num> extends CompoundAnimation<T>
class AnimationMin$Mate<T extends num> extends _i1.AnimationMin<T>
    with _i2.Mate {
  /// AnimationMin<T> AnimationMin(Animation<T> first, Animation<T> next)
  AnimationMin$Mate(
    /// requiredParameters: Animation<T> first
    super.first,

    /// requiredParameters: Animation<T> next
    super.next,
  )   : mateParams = {
          'first': _i2.BuilderArg<_i3.Animation<T>>(
            name: 'first',
            init: first,
            isNamed: false,
          ),
          'next': _i2.BuilderArg<_i3.Animation<T>>(
            name: 'next',
            init: next,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'AnimationMin';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationMin$Mate<T>(
          p.get('first').value,
          p.get('next').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
