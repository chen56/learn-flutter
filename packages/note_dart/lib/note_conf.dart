// class NoteSpaceConf {
//   List<NoteProjectConf> projects = [];
// }
//
// class NoteProjectConf {
//   late String name;
//   late String path;
//   late String type;
// }

import 'dart:convert';

import 'package:file/file.dart';

// format json
JsonEncoder _encoder = const JsonEncoder.withIndent('  ');

/// notes.g.json
class SpaceConf {
  late Map<String,String> comment ={
    "zh-CN": """由github.com/chen56/note生成，note工具会在笔记根目录生成notes.g.json，用于识别您的笔记项目结构, 本文件应被保存在版本控制中，比如git，不应编辑、移动此文件。 """,
    "en": """Generated by github.com/chen56/note, the note tool will generate a notes.g.json at the root of the note project, which is used to identify the structure of your note item, This file should be saved in version control, such as git, and should not be edited or moved.""",
  };

  late int currentMaxNoteId;

  final Map<String, NoteConf> notes = {};

  SpaceConf.decode(Map<String, dynamic> json) {
    currentMaxNoteId = json["currentMaxNoteId"] ?? 1;

    json["notes"]?.forEach((key, value) {
      notes[key] = NoteConf.decodeJson(value is Map<String, dynamic> ? value : {});
    });
  }

  static Future<SpaceConf> load(File jsonFile) async {
    if (!await jsonFile.exists()) {
      return SpaceConf.decode({});
    }

    Map<String, dynamic> json = jsonDecode(await jsonFile.readAsString());
    return SpaceConf.decode(json);
  }

  SpaceConf.decodeJson(String jsonStr) : this.decode(jsonDecode(jsonStr));

  Map<String, dynamic> encode() {
    return {
      "/* notes.g.json */": comment,
      "currentMaxNoteId": currentMaxNoteId,
      "notes": notes.map(
        (key, value) => MapEntry(key, value.encode()),
      ),
    };
  }

  Future<SpaceConf> save(File file) async {
    await file.writeAsString(_encoder.convert(encode()));
    return this;
  }
}

/// note.json
class NoteConf {
  late String displayName;
  late bool codeExpand;

  // Sorting, small numbers first
  late int order;

  NoteConf._({
    required this.displayName,
    required this.order,
    required this.codeExpand,
  });

  NoteConf.decode(String jsonStr) : this.decodeJson(jsonDecode(jsonStr));

  NoteConf.decodeJson(Map<String, dynamic> json)
      : this._(
          displayName: json["displayName"] ?? "",
          order: json["order"] ?? 100,
          codeExpand: json["codeExpand"] ?? false,
        );

  Map<String, dynamic> encode() {
    return {
      "displayName": displayName,
      "order": order,
      "codeExpand": codeExpand,
    };
  }

  Future<NoteConf> save(File file) async {
    await file.writeAsString(_encoder.convert(encode()));
    return this;
  }

  @override
  String toString() {
    return "${encode()}";
  }
}

/// note.g.json
class NoteGenConf {
  late Map<String,String> comment ={
    "zh-CN": """❗重要配置❗，由github.com/chen56/note生成，一个笔记一个目录，每个目录都生成一个note.g.json，用来记录这篇笔记的重要元数据，比如生成note的uri, 文件应被保存在版本控制中，比如git，不应编辑或移动此文件。 """,
    "en": """❗ Important configuration ❗, generated by the github.com/chen56/note, one directory for each one note, note.g.json to record the important metadata of the note, for example generate the uri of note , the file should be saved in version control, such as git, and this file should not be edited or moved.""",
  };
  late int noteId;

  NoteGenConf({
    required this.noteId,
  });

  NoteGenConf.decode(String jsonStr) : this.decodeJson(jsonDecode(jsonStr));

  NoteGenConf.decodeJson(Map<String, dynamic> json)
      : this(
          noteId: json["noteId"] ?? -1,
        );

  Map<String, dynamic> encode() {
    return {
      "/* note.g.json */": comment,
      "noteId": noteId,
    };
  }

  Future<NoteGenConf> save(File file) async {
    await file.writeAsString(_encoder.convert(encode()));
    return this;
  }

  @override
  String toString() {
    return "${encode()}";
  }
}
