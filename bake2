#!/usr/bin/env bash
set -o errtrace #trap inherited in sub script
set -o errexit
set -o functrace #trap inherited in function
# set -x

# bake == (bash)ake == 去make的bash工具
# v0.2.20230515
# ------------------------------------------------------------------------------
# bake 是个简单的自建命令工具，以替代Makefile的子命令功能
# make工具的主要特点是处理文件依赖进行增量编译，但flutter、golang、java、js项目的build工具
# 太厉害了，这几年唯一还在用Makefile的理由就是他的子命令机制: "make build"、
# "make run", 可以方便的自定义单一入口的父子命令，但Makefile本身的语法套路也很复杂，
# 很多批处理还是要靠bash, 这就尴尬了，工具太多，麻烦！本脚本尝试彻底摆脱使用Makefile。
# 经尝试，代码很少啊 ，公共代码几十行啊，还主要是提取显示子命令帮助的，功能足够了：
#   ./bake       # 列子命令看帮助，
#   ./bake build # 子命令
#   ./bake run   # 子命令
# bake命令规则：
# 1. 定义以斜杠"/"为前缀的function作为子命令，/build、/run、/assets/list、
#    表示命令的其父子关系，执行时去掉斜杠/, 构成父子命令：./bake assets list -x -y -z
# 2. 命令的帮助从命令后跟?shortHelp的函数提取，比如/build?shortHelp
# 3. 除bash外，尽量不依赖其他工具，包括linux coreutils,以便跨平台更简单
# 搞docker那样的命令树，应该也不难，目前和make一样只支持一级子命令，暂时够用。
# ------------------------------------------------------------------------------

#if ((BASH_VERSINFO[0] < 4)); then
#  echo "Error: 您bash版本过低(BASH_VERSINFO: ${BASH_VERSINFO[*]})，请安装bash 4+ 后重启terminal:
#  apt install bash  # ubuntu
#  brew install bash # mac"
#  exit 1
#fi

# copy from flutter
# ----------------------
# On Mac OS, readlink -f doesn't work, so bake.readlink traverses the path one
# link at a time, and then cds into the link destination and find out where it
# ends up.
# The function is enclosed in a subshell to avoid changing the working directory
# of the caller.
function bake.readlink() (
  cd -P "$(dirname -- "$1")"
  file="$PWD/$(basename -- "$1")"
  while [[ -L "$file" ]]; do
    cd -P "$(dirname -- "$file")"
    file="$(readlink -- "$file")"
    cd -P "$(dirname -- "$file")"
    file="$PWD/$(basename -- "$file")"
  done
  echo "$file"
)

##########################################
# bake common init script
# 公共脚本
##########################################

declare BAKE_DIR
BAKE_PATH="$(bake.readlink "${BASH_SOURCE[0]}")"
BAKE_DIR="$(dirname "$BAKE_PATH")"
BAKE_FILE="$(basename "$BAKE_PATH")"

# set workdir
cd "${BAKE_DIR}"

# ref
# https://pub.dev/documentation/args/latest/args/ArgParser-class.html
# https://github.com/spf13/pflag/blob/master/string_array.go
# https://oclif.io/docs/flags


# Simulating object-oriented data structures with flat associative arrays
#{
#   bake:{
#     shortHelp:"./bake",
#     cmds:{
#       pub:{
#         shortHelp:"flutter pub",
#         cmds:{
#          get:{
#            shortHelp:"flutter pub get",
#            options:{
#              verbose:{
#                name:"verbose",
#                abbr:"v",
#              }
#            }
#          }
#         }
#       }
#   }
# }
#}
# The above data structures are flattened into the following variables:
# options define:
#  _data[cmd./.shortHelp]="bake root cmd"
#  _data[cmd./.help]="bake root cmd"
#  _data[cmd./pub.shortHelp]="flutter pub"
#  _data[cmd./pub.options.notes.type]="list"
#  _data[cmd./pub.options.notes.abbr]="n"
#  _data[cmd./pub/get.shortHelp]="flutter pub get"
#  _data[cmd./pub/get.options.verbose.abbr]="v"
# parsed options value:
#  _data[cmd./.options.verbose.value]=true
#  _data[cmd./pub/get.options.notes.value.0]="./lib/note.page"
#  _data[cmd./pub/get.options.notes.value.1]="./lib/a/note.page"
declare -A _data

##########################################
# bake common function
##########################################
bake.on_error() {
  echo "trapped an error: ↑ , trace: ↓" >&2
  bake.print_stack
}

bake.print_stack() {
  local i=0
  local stackInfo
  while true; do
    stackInfo=$(caller $i 2>&1 && true) && true
    if [[ $? != 0 ]]; then break; fi
    echo "  $stackInfo" >&2
    i=$((i + 1))
  done
}
# print first, then run
bake.run() {
  local project
  project=$(basename "$PWD")
  [[ "$PWD" == "$BAKE_DIR" ]] && project="root"
  echo -e "【${project}】▶︎${FUNCNAME[1]} ▶︎ $*"
  "$@"
  return $?
}


bake.project.current(){
  local project
  project=$(basename "$PWD")
  [[ "$PWD" == "$BAKE_DIR" ]] && project="root"
  echo "$project"
}

function bake.data.set() {
  local path=$1
  local value=$2
  _data[$path]="${value}"
}
function bake.data.get() {
  local path=$1
  echo "${_data[$path]}"
}

# bake.data.children cmd
#   -> list data path "cmd" children name
bake.data.children() (
  path=$1

  for key in "${!_data[@]}"; do
    if [[ "$key" == $path.* ]]; then
      # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
      # prefix: remove the "cmds." prefix
      child=${key#$path.}
      # suffix: remove everything after the first dot
      child=${child%%.*}
      echo "$child"
    fi
  done | sort -u
  return
)
function bake.cmd.set() {
  local cmd=$1
  local field=$2
  local value=$3
  _data[cmd.$cmd.$field]=${value}
}
function bake.cmd.get() {
  local cmd=$1
  local field=$2
  echo "${_data[cmd.$cmd.$field]}"
}

function bake.cmd.getKeys() (
  cmd=$1
  field=$2
  cmdDataPath="cmd.$cmd"
  fieldDataPath=$cmdDataPath.$field

  for key in "${!_data[@]}"; do
    if [[ "$key" == $fieldDataPath.* ]]; then
      # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
      # prefix: remove the "cmds." prefix
      option=${key#$cmdDataPath.options.}
      # suffix: remove everything after the first dot
      option=${option%%.*}
      echo "$option"
    fi
    # cat x | sort -u  ==  cat x | sort | uniq
  done | sort -u
)

# traverse up
# /a/b
#   -> /a/b
#   -> /a
#   -> /
function bake.cmd.cmdToList(){
  local cmd
  cmd=$1

  local currentCmd
  currentCmd="${cmd}"
  while [ "$currentCmd" != "" ]
  do
    echo "$currentCmd"
    currentCmd=${currentCmd%/*}
  done
  # 如果是"/" root cmd,上面的循环不会轮到它，补一个
  if [[ "$cmd" != "/" ]]; then
    echo "/"
  fi
}

function bake.cmd.main() {
    # ensure all cmd register
    local cmds
    cmds=$(declare -F | grep -E "^declare -f (\/.*)$" | sed -r 's/^declare -f (\/.*)$/\1/')
    readarray -t cmds <<<"$cmds"
    for cmd in ${cmds[*]}; do
      if [[ ${_data[cmd.$cmd.shortHelp]} == "" ]]; then
        _data[cmd.$cmd.shortHelp]="-";
      fi
    done

    # parse cmd :
    #   ./bake pub get -v -b
    #     -> { cmd:"/pub/get", args:"-v -b" }
    #   ./bake -h
    #     -> { cmd:"/", args:"-h" }
    local cmd=""
    for arg in "$@"; do
      if ( printf '%s\n' "${!_data[@]}" | grep "cmd.$cmd/$arg" ) > /dev/null ; then
        cmd="$cmd/$arg" ;
        shift ;
      else
        break;
      fi
    done
    # if nothing cmd find then root cmd
    if [[ "$cmd" == "" ]] ; then cmd="/"; fi

    # parse options
    for traverseUpCmd in $(bake.cmd.cmdToList "$cmd") ; do
#      for option in $(bake.cmd.getKeys "$traverseUpCmd" options); do
      for option in $(bake.data.children "cmd.$traverseUpCmd.options"); do
        optionAbbr=$(bake.cmd.get $traverseUpCmd options.$option.abbr)
        log "---check cmd:$traverseUpCmd - option:$option abbr:$optionAbbr"
#        for arg in "$@"; do
#           log "---arg:$arg"
#           if [[ "--$option" == "$arg" ]]; then
#             bake.data.set "cmd.$cmd.options.$option.value" true
#           fi
#        done
      done
    done

    if ! declare -f "$cmd" >/dev/null 2>&1; then
      error "Error: 404 ,cmd '${cmd}' not exists, please define cmd function '${cmd}()'"
      exit 1
    fi
    $cmd "$@"
}

##########################################
# app script
# 应用脚本
##########################################

error(){
  echo -e "ERROR -【$(bake.project.current) ▶︎${FUNCNAME[1]}】-︎ $*" >&2
}
log(){
  echo -e "INFO  -【$(bake.project.current) ▶︎${FUNCNAME[1]}】-︎ $*" >&2
}

# cmd settings use bash associative array
# shellcheck disable=SC2034
bake.data.set cmd."/".shortHelp            "[mono project] flutter pub get"
bake.data.set cmd."/".options.help.abbr    h
bake.data.set cmd."/".options.help.type    bool
bake.data.set cmd."/".help                 "$(cat <<- EOF
____ _    _  _ ___ ___ ____ ____    _  _ ____ ___ ____
|___ |    |  |  |   |  |___ |__/ __ |\ | |  |  |  |___
|    |___ |__|  |   |  |___ |  \    | \| |__|  |  |___
Usage:
./${BAKE_FILE} [cmd] [options] [args...]

  ./${BAKE_FILE}       # 列子命令看帮助，
  ./${BAKE_FILE} build # 子命令
  ./${BAKE_FILE} run   # 子命令
EOF
)"

################################################
## pub
################################################

bake.data.set cmd."/pub/get".shortHelp            "[mono project] flutter pub get"
bake.data.set cmd."/pub/get".help                 "[mono project] flutter pub get"
bake.data.set cmd."/pub/get".options.verbose.name verbose
bake.data.set cmd."/pub/get".options.verbose.abbr v
bake.data.set cmd."/pub/get".options.verbose.type bool
/pub/get(){
    bake.run echo "run flutter pub [$*]"
}

################################################
## doctor
################################################
function /doctor()(
  log "# doctor -----------------------------------"
  echo
  log "## list data"
  for key in "${!_data[@]}"; do
    log "$key=${_data[$key]:0:50}"
  done
  echo
  log "## list cmds"
  for cmd in $(bake.data.children cmd); do
    log "cmd: $cmd"
  done
  echo

)

##########################################
# bake common entry script
##########################################
trap " set +x; bake.on_error " ERR

#/doctor
bake.cmd.main "$@"

#bake.cmd.getKeys "/pub/get" options
#bake.data.children "cmd./pub/get.options"