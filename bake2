#!/usr/bin/env bash
set -o errtrace # trap inherited in sub script
set -o errexit
set -o functrace # If set, any trap on DEBUG and RETURN are inherited by shell functions

# bake == (bash)ake == 去make的bash工具
# v0.2.20230515 目前仅在macos上跑过
# ------------------------------------------------------------------------------
# bake 是个简单的自建命令工具，以替代Makefile的子命令功能
# make工具的主要特点是处理文件依赖进行增量编译，但flutter、golang、java、js项目的build工具
# 太厉害了，这几年唯一还在用Makefile的理由就是他的子命令机制: "make build"、
# "make run", 可以方便的自定义单一入口的父子命令，但Makefile本身的语法套路也很复杂，
# 很多批处理还是要靠bash, 这就尴尬了，工具太多，麻烦！本脚本尝试彻底摆脱使用Makefile。
# 经尝试，代码很少啊 ，核心公共代码百十行啊，还主要是提取显示子命令帮助的，功能足够了：
#   ./bake       # 列子命令看帮助，
#   ./bake build # 子命令
#   ./bake run   # 子命令
# bake命令规则：
# 1. 定义以斜杠"/"为前缀的function作为子命令，/build、/run、/assets/list、
#    表示命令的其父子关系，执行时去掉斜杠/, 构成父子命令：./bake assets list -x -y -z
# 2. 除bash外，尽量不依赖其他工具，包括linux coreutils,以便跨平台更简单
# 搞docker那样的命令树，应该也不难，目前和make一样只支持一级子命令，暂时够用。
# ref
# https://pub.dev/documentation/args/latest/args/ArgParser-class.html
# https://github.com/spf13/pflag/blob/master/string_array.go
# https://oclif.io/docs/flags
# ------------------------------------------------------------------------------

if ((BASH_VERSINFO[0] < 4)); then
  echo "Error: 都2082年了，您的bash还是这个版本(BASH_VERSINFO: ${BASH_VERSINFO[*]})，请安装bash 4+ 后重启terminal:
  apt install bash  # ubuntu
  brew install bash # mac"
  exit 1
fi

# copy from flutter
# ----------------------
# On Mac OS, readlink -f doesn't work, so bake.readlink traverses the path one
# link at a time, and then cds into the link destination and find out where it
# ends up.
# The function is enclosed in a subshell to avoid changing the working directory
# of the caller.
function _readlink() (
  cd -P "$(dirname -- "$1")"
  file="$PWD/$(basename -- "$1")"
  while [[ -L "$file" ]]; do
    cd -P "$(dirname -- "$file")"
    file="$(readlink -- "$file")"
    cd -P "$(dirname -- "$file")"
    file="$PWD/$(basename -- "$file")"
  done
  echo "$file"
)

##########################################
# bake common script
##########################################
BAKE_PATH="$(_readlink "${BASH_SOURCE[0]}")"
BAKE_DIR="$(dirname "$BAKE_PATH")"
BAKE_FILE="$(basename "$BAKE_PATH")"

# set workdir
cd "${BAKE_DIR}"

# Simulating object-oriented data structures with flat associative arrays
# options define:
#  _commands[@fields.summary]="bake root cmd"
#  _commands[@fields.help]="bake root cmd"
#  _commands[pub]="type:cmd"
#  _commands[pub.@fields.summary]="flutter pub"
#  _commands[pub.@fields.options.notes]="type:option"
#  _commands[pub.@fields.options.notes.type]="list"
#  _commands[pub.@fields.options.notes.abbr]="n"
#  _commands[pub.get]="type:cmd"
#  _commands[pub.get.@fields.summary]="flutter pub get"
#  _commands[pub.get.@fields.options.verbose]="type:option"
#  _commands[pub.get.@fields.options.verbose.type]="bool"
#  _commands[pub.get.@fields.options.verbose.abbr]="v"
# parsed options value:
#  _commands[@fields.options.verbose.value]=true
#  _commands[pub.get.@fields.options.notes.value.0]="..lib/note.page"
#  _commands[pub.get.@fields.options.notes.value.1]="./lib/a/note.page"
# app script dont use this variable directly, use function access

#  _commands[summary]="bake root cmd"
#  _commands[help]="bake root cmd"
#  _commands[kids.pub]="type:cmd"
#  _commands[kids.pub.summary]="flutter pub"
#  _commands[kids.pub.options.notes]="type:option"
#  _commands[kids.pub.options.notes.type]="list"
#  _commands[kids.pub.options.notes.abbr]="n"
#  _commands[kids.pub.kids.get]="type:cmd"
#  _commands[kids.pub.kids.get.summary]="flutter pub get"
#  _commands[kids.pub.kids.get.options.verbose]="type:option"
#  _commands[kids.pub.kids.get.options.verbose.type]="bool"
#  _commands[kids.pub.kids.get.options.verbose.abbr]="v"
# parsed options value:
#  _commands[options.verbose.value]=true
#  _commands[kids.pub.kids.get.options.notes.value.0]="..lib/note.page"
#  _commands[kids.pub.kids.get.options.notes.value.1]="./lib/a/note.page"

#  _commands[root/summary]="bake root cmd"
#  _commands[root/help]="bake root cmd"
#  _commands[pub]="type:cmd"
#  _commands[pub/summary]="flutter pub"
#  _commands[pub/options/notes]="type:option"
#  _commands[pub/options/notes/type]="list"
#  _commands[pub/options/notes/abbr]="n"
#  _commands[pub.get]="type:cmd"
#  _commands[pub.get/summary]="flutter pub get"
#  _commands[pub.get/options/verbose]="type:option"
#  _commands[pub.get/options/verbose/type]="bool"
#  _commands[pub.get/options/verbose/abbr]="v"
# parsed options value:
#  _commands[root/options/verbose/value]=true
#  _commands[pub.get/options/notes/value/0]="..lib/note.page"
#  _commands[pub.get/options/notes/value/1]="./lib/a/note.page"

declare -A _commands
declare -A _data
TYPE_CMD="type:cmd"

##########################################
# bake common function
##########################################
function bake.cmd.set() {
  local cmd; cmd=$1 ; local value; value=$2 ;
  _commands[$cmd]="${value}"
}
function bake.cmd.get() (
  path="$1"
  printf '%s' "${_commands[$path]}"
)
function bake.cmd.toDataPath() (
  cmd="$1"
  readarray -t arr < <(printf '%s' "$(bake.split "$cmd" ".")")
  printf "%s.cmds" ${arr[@]}
)

# Usage: bake.cmd.data_children <dataPath>
#   return <dataPath> children name
bake.cmd.data_children() (
  path="$1"
  for key in "${!_commands[@]}"; do
    if [[ "$key" == $path* ]]; then
      # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
      # prefix: remove the "cmds." prefix
      child=${key#$path.}
      # suffix: remove everything after the first dot
      child=${child%%.*}
      printf '%s\n' " $child"
    fi
  done | sort -u
)

function bake.cmd.list()(
  contextCmd=$1
  doctor
#  showList=()
#  maxLengthOfCmd=0
  for child in $(bake.cmd.data_children "$contextCmd"); do
    [[ "$contextCmd" == "" ]] && key="$child" || key="$contextCmd/$child"
    if   [[ "$key"              == bake*      ]]; then continue; fi
    if   [[ "$key"              == @fields*   ]]; then continue; fi
    if   [[ "$key"              == _*         ]]; then continue; fi
    if   [[ "${_commands[$key]}" != "type:cmd" ]]; then continue; fi
    echo "$key : ${_commands[$key.@fields.summary]}"
  done
)

# Usage: bake.cmd.register
# ensure all cmd register
function bake.cmd.register() {
     local functionName
     while IFS=$'\n' read -r functionName ; do
      if [[ "$functionName" == /* && "$functionName" != /  ]]; then
        echo "error: except the root command '/'，function $functionName() can not start with / " >&2 && return 1
      fi
      local traverseUpPath
      for traverseUpPath in $(bake.path_traverse_up "$functionName");do
        local key; key=$([[ "$traverseUpPath" == / ]] && echo "/" || echo "$traverseUpPath" )
        _commands["$traverseUpPath"]=$TYPE_CMD
      done
      local funcFieldName
      [[ "$functionName" == "/" ]]  && funcFieldName="/func" || funcFieldName="$functionName/func"
      _commands[$funcFieldName]=$functionName

      # list all function name
      # declare -F | awk {'print $3'} == compgen -A function
      # declare -f func1  -> func1
      # declare -fx func2 -> func2
    done <<< "$(compgen -A function)"
}

# Usage: bake.path_traverse_up <cmd>
# sample:
#   bake.path_traverse_up a.b     => "a.b", "a", ""
function bake.path_traverse_up()(
  path=$1

  current="${path}"
  while [ "$current" != "" ]
  do
    printf '%s\n' "$current"
    removed=${current%.*}
    if [[ "$removed" == "$current" ]] ; then  break; fi
    current="$removed"
  done
  # last is root
  printf '\n'
)

# Usage: split <str> [delimiter:default \n]
bake.split() {
  local str=$1 delimiter=${2:-.};
#  # use <() process-substitution
#  # don't use <<< "" its add newline
  local arr
  readarray -t arr < <(printf '%s' "${str//$delimiter/$'\n'}")
  printf '%s\n' "${arr[@]}"
}

# Usage: bake.option.match <cmd> <arg>
# match a <arg> is a option, if true return option else return ""
# Sample: bake.option.match "build" "--dir" someDir
#      => "build.@fields.options.dir"
function bake.option.match()(
  cmd=$1; arg=$2
  for traverseUpCmd in $(bake.path_traverse_up "$cmd") ; do
    for option in $(bake.cmd.data_children "$traverseUpCmd.@fields.options"); do
       abbr=$(bake.cmd.get "$traverseUpCmd.@fields.options.$option.abbr")
       if [[ "--$option" == "$arg" || ("$abbr" != "" && "-$abbr" == "$arg") ]] ; then
         printf '%s' "$traverseUpCmd.@fields.options.$option"  ;
       fi
    done
  done
  printf ''
)

_commands[bake.option.add.@fields.options.name.type]=list
_commands[bake.option.add.@fields.options.type.type]=list
bake.option.add(){
  declare -p
}

# Usage: bake.option.parse <cmd> [arg1] [arg2] ...
function bake.option.parse() {
    local cmd; cmd="$1"
    shift
    local argCount; argCount=0
    local result;

    # parse options
    while (( $# > 0 )); do
      optionPath=$(bake.option.match "$cmd" "$1")
      # if arg not a option , parsing complete;
      if [[ "$optionPath" == "" ]] ; then break;  fi
      # remove the prefix：build.@fields.options.base_uri => base_uri
      option=${optionPath##*.}
      optionType=$(bake.cmd.get "$optionPath.type" )
      case $optionType in
        bool)   _commands[$cmd/options.$option.value]=true;
                argCount=$((argCount+1)) ;
                result+="$option=true;\n"
                shift;;
        string) [[ "$2" == "" ]] && echo "error: option $arg need a value arg: $arg <value> " >&2 && return 1 ;
                local optionValue; optionValue="$2";
                _commands[$cmd.@fields.options.$option.value]="$optionValue";
                argCount=$((argCount+1))
                result+="$option=$(printf '%q',"$optionValue");\n"
                shift 2 ;;
        list)   [[ "$2" == "" ]] && echo "error: option $arg need a value arg: $arg <value> " >&2 && return 1 ;
                local optionValue; optionValue="$2";
                local length; length=${_commands[$cmd.@fields.options.$option.value]};
                if [[  "$length" == "" ]] ;then
                  length=1
                  result+="declare $option;\n"
                else
                  length=$((length+1))
                fi
                local index ; index=$((length-1))
                _commands[$cmd.@fields.options.$option.value]="$length";
                _commands[$cmd.@fields.options.$option.value.$index]="$optionValue";
                arr+=("$value")
                result+="${option}+=($(printf '%q',"$optionValue"));\n"
#                result+="${option}[$index]=$(printf '%q',"$optionValue");\n"
                shift 2 ;;
        *) echo "error: not support cmd.$cmd.options.$option.type: <$optionType> " >&2 ; return 1 ;;
      esac
    done
    result+="argCount='$argCount';\n"
    printf '%s' "$result"
}
function bake.help()(
  cmd="$1"
  echo bake.help $cmd
)

function bake.main() {
    bake.cmd.register
    # parse cmd :
    #   ./bake pub get -v -b
    #     -> { cmd:"pub.get", args:"-v -b" }
    #   ./bake -h
    #     -> { cmd:"", args:"-h" }
    local cmd nextCmd  arg;
    for arg in "$@"; do
      nextCmd=$( [[ "$cmd" == "" ]] && echo "$arg" || echo "$cmd.$arg" )
      [[  "${_commands[$nextCmd]}" != "type:cmd" ]] && break;
      cmd="$nextCmd" ;
      shift ;
    done
    # "" is root cmd
    if [[ "$cmd" == "" ]] ; then bake.help "" ; return 0;  fi

    if ! declare -f "$cmd" >/dev/null 2>&1; then
      _error "Error: 404 ,cmd '${cmd}' not define, please define cmd function '${cmd}()'"
      return 1
    fi
    $cmd "$@"
}

##########################################
# app script
# 应用项目补充的公共脚本，不在bake维护范围
##########################################
# print first, then _run
_run() {
  local project; project=$(basename "$PWD")
  [[ "$PWD" == "$BAKE_DIR" ]] && project="root"
  _log "【${project}】▶︎${FUNCNAME[1]} ▶︎ $*"
  "$@"
  return $?
}

_on_error() {
  echo "trapped an error: ↑ , trace: ↓" >&2
  _stack_frame
}

# Usage: _stack_frame
_stack_frame() {
  local i=0
  local stackInfo
  while true; do
    stackInfo=$(caller $i 2>&1 && true) && true
    if [[ $? != 0 ]]; then break; fi

    # parse
    # 97 test_bake.split ./test/bake2_test.bash
    local no func file;
    IFS=' ' read -r no func file <<< "$stackInfo"

    # clickable stack:
    # /Users/c/git/younpc/note/test/bake2_test.bash:38 bake.test.runTest()
    printf "%s\n" "$(_readlink $file):$no $func()" >&2

    i=$((i + 1))
  done
}
_error(){
  echo -e "ERROR -【▶︎${FUNCNAME[1]}】-︎ $*" >&2
}
_log(){
  echo -e "INFO  -【▶︎${FUNCNAME[1]}】-︎ $*" >&2
}

##########################################
# app cmd script
# 应用的命令脚本
##########################################

pub.get(){
  # 模版代码，放到每个需要使用option的函数中，然后就可以使用option了
  bake.option.parse "${FUNCNAME[0]}" "$@"
  declare -p
#  _run echo "_run flutter pub [$*]  verbose: $(bake.option "pub.get" verbose)"
#  shift "$(bake.option.parse "$@" )"
#  _run echo "_run flutter pub [$*]  verbose: $(bake.option "pub.get" verbose)"
#  doctor
}

function doctor()(
  for key in "${!_commands[@]}"; do
    echo "$key=${_commands[$key]:0:100}"
  done
)

####################################################
# app entry script & root cmd
# root cmd is no function ,all it is this file
####################################################
# cmd settings use bash associative array
#bake.cmd.set /summary            "[mono project] flutter pub get"
#bake.cmd.set /options/help/abbr    h
#bake.cmd.set /options/help/type    bool
bake.cmd.set /help                 "$(cat <<- EOF
____ _    _  _ ___ ___ ____ ____    _  _ ____ ___ ____
|___ |    |  |  |   |  |___ |__/ __ |\ | |  |  |  |___
|    |___ |__|  |   |  |___ |  \    | \| |__|  |  |___
Usage:
./${BAKE_FILE} [cmd] [options] [args...]

  ./${BAKE_FILE}       # 列子命令看帮助，
  ./${BAKE_FILE} build # 子命令
  ./${BAKE_FILE} run   # 子命令
EOF
)"

trap " set +x; _on_error " ERR

# lib_mode use for other script import
if [[ "$1" == "--lib_mode"  ]]; then
  echo "lib_mode import: $BAKE_PATH"
else
  bake.main "$@"
fi
#bake.option.parse "test_cmd" "$@"
#echo =====
#echo -e "$(bake.option.parse "$@")"
#eval "$(echo -e "$(bake.option.parse "$@")")"
#declare -p show
#declare -p file
#bake.option.match "test_cmd" "--files"
#bake.cmd.data_children "test_cmd.@fields.options"
#cat <<< "$1" |  sed 's/$/\\n/' | tr -d '\n'
#echo ===
#cat <<< "$1" |  sed 's/\b/\\n/g'
#echo ===
#cat <<< "$1" | awk '{printf "%s\\n", $0}'
#echo ===
#
#| awk '{printf "%s\\n", $0}'
#echo -----
#echo "${1/\n/$'s'}"
#echo -----
#
#cat <<< "$1" | sed '$ ! s/$/\\n/' | tr -d '\n'
#echo --------
#echo -e $(cat <<< "$1" | sed '$ ! s/$/\\n/' | tr -d '\n')
#echo --------

#xxx2 "$@"
