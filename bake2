#!/usr/bin/env bash
set -o errtrace #trap inherited in sub script
set -o errexit
set -o functrace #trap inherited in function
# set -x

# bake == (bash)ake == 去make的bash工具
# v0.2.20230515
# ------------------------------------------------------------------------------
# bake 是个简单的自建命令工具，以替代Makefile的子命令功能
# make工具的主要特点是处理文件依赖进行增量编译，但flutter、golang、java、js项目的build工具
# 太厉害了，这几年唯一还在用Makefile的理由就是他的子命令机制: "make build"、
# "make run", 可以方便的自定义单一入口的父子命令，但Makefile本身的语法套路也很复杂，
# 很多批处理还是要靠bash, 这就尴尬了，工具太多，麻烦！本脚本尝试彻底摆脱使用Makefile。
# 经尝试，代码很少啊 ，公共代码几十行啊，还主要是提取显示子命令帮助的，功能足够了：
#   ./bake       # 列子命令看帮助，
#   ./bake build # 子命令
#   ./bake run   # 子命令
# bake命令规则：
# 1. 定义以斜杠"/"为前缀的function作为子命令，/build、/run、/assets/list、
#    表示命令的其父子关系，执行时去掉斜杠/, 构成父子命令：./bake assets list -x -y -z
# 2. 命令的帮助从命令后跟?shortHelp的函数提取，比如/build?shortHelp
# 3. 除bash外，尽量不依赖其他工具，包括linux coreutils,以便跨平台更简单
# 搞docker那样的命令树，应该也不难，目前和make一样只支持一级子命令，暂时够用。
# ------------------------------------------------------------------------------

#if ((BASH_VERSINFO[0] < 4)); then
#  echo "Error: 您bash版本过低(BASH_VERSINFO: ${BASH_VERSINFO[*]})，请安装bash 4+ 后重启terminal:
#  apt install bash  # ubuntu
#  brew install bash # mac"
#  exit 1
#fi

# copy from flutter
# ----------------------
# On Mac OS, readlink -f doesn't work, so bake.readlink traverses the path one
# link at a time, and then cds into the link destination and find out where it
# ends up.
# The function is enclosed in a subshell to avoid changing the working directory
# of the caller.
function bake.readlink() (
  cd -P "$(dirname -- "$1")"
  file="$PWD/$(basename -- "$1")"
  while [[ -L "$file" ]]; do
    cd -P "$(dirname -- "$file")"
    file="$(readlink -- "$file")"
    cd -P "$(dirname -- "$file")"
    file="$PWD/$(basename -- "$file")"
  done
  echo "$file"
)

##########################################
# bake common init script
##########################################

declare BAKE_DIR
BAKE_PATH="$(bake.readlink "${BASH_SOURCE[0]}")"
BAKE_DIR="$(dirname "$BAKE_PATH")"
BAKE_FILE="$(basename "$BAKE_PATH")"

# BAKE_DIR is workdir
cd "${BAKE_DIR}"

# Simulating object-oriented data structures with flat associative arrays
# {
#   cmds:{
#     pub:{
#       name:"pub",
#       shortHelp:"flutter pub",
#       cmds:{
#        get:{
#          name:"get",
#          shortHelp:"flutter pub get",
#          options:{
#            verbose:{
#              name:"verbose",
#              abbr:"v",
#            }
#          }
#        }
#       }
#     },
#     build:{
#       name:"build",
#       shortHelp:"flutter build",
#     }
#   },
#   "otherVar": "other value"
# }
# The above data structures are flattened into the following variables:
#  _data[bake.shortHelp]="bake root cmd"
#  _data[bake.help]="bake root cmd"
#  _data[bake.cmds.pub.name]="pub"
#  _data[bake.cmds.pub.shortHelp]="flutter pub"
#  _data[bake.cmds.pub.options.mirror.name]="mirror"
#  _data[bake.cmds.pub.options.mirror.type]="string"
#  _data[bake.cmds.pub.options.mirror.abbr]="m"
#  _data[bake.cmds.pub.cmds.get.name]="get"
#  _data[bake.cmds.pub.cmds.get.shortHelp]="flutter pub get"
#  _data[bake.cmds.pub.cmds.get.options.verbose.name]="verbose"
#  _data[bake.cmds.pub.cmds.get.options.verbose.abbr]="v"
#  _data[bake.cmds.build.shortHelp]="flutter build"
#  _data[otherVar]="other value"
## 数据操纵行为设计：
# 放弃
#bake.cmd.shortHelp          "/pub/get" "[mono project] flutter pub get"
#bake.cmd.help               "/pub/get" "[mono project] flutter pub get"
## cmd, optionName, abbr, default, useage
#bake.cmd.option.add         "/pub/get" verbose v "bool" false "verbose mode"

# 放弃: option的字段相对比较固定，分开写很累赘，但如果有新增字段就会比较麻烦
#bake.cmd.option.help        "/pub/get" verbose verbose
#bake.cmd.option.type        "/pub/get" verbose bool
#bake.cmd.option.abbr        "/pub/get" verbose v
# 放弃
#declare -A _cmd=(
#  [name]="pub"
#  [shortHelp]="[mono project]Commands for managing Flutter packages"
#)
#bake.addCmd _cmd
# 放弃
#bake.cmd.option "/pub/get?options.verbose.name"      verbose
#bake.cmd.option "/pub/get?options.verbose.type"      "bool"
#bake.cmd.option "/pub/get?options.verbose.abbr"      v
#bake.cmd.option "/pub/get?options.verbose.default"   false
#bake.cmd.option "/pub/get?options.verbose.shortHelp" "verbose mode"
# 放弃
#_data[rootCmd.cmds.pub.cmds.get.options.verbose.name]="verbose"
#_data[rootCmd.cmds.pub.cmds.get.options.verbose.type]="bool"
#_data[rootCmd.cmds.pub.cmds.get.options.verbose.abbr]="v"

declare -A _data

##########################################
# bake common function
##########################################
bake.on_error() {
  echo "trapped an error: ↑ , trace: ↓" >&2
  bake.print_stack
}

bake.print_stack() {
  local i=0
  local stackInfo
  while true; do
    stackInfo=$(caller $i 2>&1 && true) && true
    if [[ $? != 0 ]]; then break; fi
    echo "  $stackInfo" >&2
    i=$((i + 1))
  done
}
# print first, then run
bake.run() {
  local project
  project=$(basename "$PWD")
  [[ "$PWD" == "$BAKE_DIR" ]] && project="root"
  echo -e "【${project}】▶︎${FUNCNAME[1]} ▶︎ $*"
  "$@"
  return $?
}

bake.error(){
  echo -e "ERROR -【$(bake.project.current) ▶︎${FUNCNAME[1]}】-︎ $*" >&2
}
bake.info(){
  echo -e "INFO  -【$(bake.project.current) ▶︎${FUNCNAME[1]}】-︎ $*" >&2
}

bake.project.current(){
  local project
  project=$(basename "$PWD")
  [[ "$PWD" == "$BAKE_DIR" ]] && project="root"
  echo "$project"
}

bake.cmd.list() {
  # for each _data key that starts with "cmds.", print the command name
  for key in "${!_data[@]}"; do
    if [[ "$key" == cmds.* ]]; then
      # prefix: remove the "cmds." prefix
      local cmd=${key#cmds.}
      # suffix: remove everything after the first dot
      cmd=${cmd%%.*}
      echo "  $cmd"
    fi
  done
  return
}
function bake.cmd.cmdPath2dataPath(){
  local cmdPath=$1
  local cmdDataPath
  [[ "/" == "$cmdPath" ]] && cmdDataPath="bake" || cmdDataPath="bake$cmdPath"
  # replace all "\"
  echo "${cmdDataPath//\//".cmds."}"

}
function bake.cmd.set() {
  local cmdPath=$1
  local field=$2
  local value=$3

  local cmdDataPath
  cmdDataPath="$(bake.cmd.cmdPath2dataPath "$cmdPath")"

  _data[$cmdDataPath.$field]=${value}
}



function bake.cmd.main() {
    # ensure all cmd register
    local fullNames
    fullNames=$(declare -F | grep -E "^declare -f (\/.*)$" | sed -r 's/^declare -f (\/.*)$/\1/')
    readarray -t fullNames <<<"$fullNames"
    for cmdFullname in ${fullNames[*]}; do
      local dataPath
      dataPath="$(bake.cmd.cmdPath2dataPath "$cmdFullname")"
      if [[ ${_data[$dataPath.shortHelp]} == "" ]]; then
        _data[$dataPath.shortHelp]="-";
      fi
    done

    local cmdPath=""
    # parse args :
    #   ./bake pub get -v -b
    #     -> { cmdPath:"/pub/get", args:"-v -b" }
    #   ./bake -h
    #     -> { cmdPath:"/", args:"-h" }
    for arg in "$@"; do
      local nextCmdPath
      nextCmdPath="$cmdPath/$arg"
      local toFind
      toFind="$(bake.cmd.cmdPath2dataPath "$nextCmdPath")"
      echo tofind:$toFind
      if ( printf '%s\n' "${!_data[@]}" | grep "$toFind" ) > /dev/null ; then
        cmdPath="$nextCmdPath" ;
        shift ;
      else
        break;
      fi
    done
    # if nothing cmd find then root cmd
    [[ "$cmdPath" == "" ]] && cmdPath="/" || true
    bake.info "cmd:$cmdPath args: ${*}"

    if ! declare -f "$cmdPath" >/dev/null 2>&1; then
      bake.error "Error: 404 ,cmd '${cmdPath}' not exists, please define cmd function '${cmdPath}()'"
      exit 1
    fi
    $cmdPath "$@"
}


##########################################
# root command
##########################################

# cmd settings use bash associative array
# shellcheck disable=SC2034
bake.cmd.set "/" shortHelp            "[mono project] flutter pub get"
bake.cmd.set "/" help                 "$(cat <<- EOF
____ _    _  _ ___ ___ ____ ____    _  _ ____ ___ ____
|___ |    |  |  |   |  |___ |__/ __ |\ | |  |  |  |___
|    |___ |__|  |   |  |___ |  \    | \| |__|  |  |___
Usage:
./${BAKE_FILE} [command] [options]

  ./${BAKE_FILE}       # 列子命令看帮助，
  ./${BAKE_FILE} build # 子命令
  ./${BAKE_FILE} run   # 子命令
EOF
)"

################################################
## pub
################################################

# https://pub.dev/documentation/args/latest/args/ArgParser-class.html
# https://github.com/spf13/pflag/blob/master/string_array.go
#目前倾向的格式：

bake.cmd.set "/pub/get" shortHelp            "[mono project] flutter pub get"
bake.cmd.set "/pub/get" help                 "[mono project] flutter pub get"
bake.cmd.set "/pub/get" options.verbose.name verbose
bake.cmd.set "/pub/get" options.verbose.abbr v
bake.cmd.set "/pub/get" options.verbose.type bool
/pub/get(){
    bake.run echo "run flutter pub [$*]"
}

################################################
## doctor
################################################
function /doctor(){
  bake.info "doctor start -----------------------------------"
  for key in "${!_data[@]}"; do
    bake.info "$key=${_data[$key]:0:50}"
  done
  bake.info "doctor end -__----------------------------------"
}

##########################################
# bake common entry script
##########################################
trap " set +x; bake.on_error " ERR

bake.cmd.main "$@"