#!/usr/bin/env bash

# On Mac OS, readlink -f doesn't work, so use._real_path get the real path of the file
_real_path() {  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}" ; }
SCRIPT_PATH="$(_real_path "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
SCRIPT_FILE="$(basename "$SCRIPT_PATH")"

# 进入脚本所在目录，这样上下文就是本项目了
cd "$SCRIPT_DIR" || exit 200

upgrade_bake(){
  mkdir -p "$SCRIPT_DIR/vendor"
  echo "$SCRIPT_PATH -> upgrade_bake ▶︎【curl -o $SCRIPT_DIR/bake.bash https://github.com/chen56/bake/raw/main/bake.bash】"
  curl -L -o  "$SCRIPT_DIR/vendor/bake.bash" https://github.com/chen56/bake/raw/main/bake.bash ;
}
if ! [[ -f "$SCRIPT_DIR/vendor/bake.bash" ]]; then
  upgrade_bake
fi

# include common script
source "$SCRIPT_DIR/vendor/bake.bash"



##########################################
# 应用的命令脚本 , 公共函数和全局变量
##########################################

declare -A _pkgs=(
    ["learn_dart"]="$SCRIPT_DIR/notes/learn_dart"
    ["note"]="$SCRIPT_DIR/"
    ["note_lang_dart"]="$SCRIPT_DIR/packages/note_lang_dart"
    ["flutter"]="$SCRIPT_DIR/notes/flutter_core"
    ["qwik"]="$SCRIPT_DIR/notes/qwik"
    ["shell"]="$SCRIPT_DIR/notes/shell"
)

bake.cmd --cmd pkgs --desc "<mono> mono project manage: ./$SCRIPT_FILE pkgs <ls|run>"
pkgs.ls(){
  for pkg in ${!_pkgs[*]} ; do
    echo "$pkg:${_pkgs[$pkg]}"
  done
}

bake.cmd --cmd pkgs.run --desc "<mono> run cmd on all pkg,Usage: ./$SCRIPT_FILE pkgs run [any cmd]"
pkgs.run(){
  for pkg in ${!_pkgs[*]} ; do
    # 子shell内执行，防止环境感染
    (  cd "${_pkgs[$pkg]}" || exit 200  ; _run "$@" ; )
  done
}

# 运行所用项目的某子命令
# Usage:    pkgs._run_subcmd <subcmd>
# Example:  pkgs._run_subcmd clean
#     run =>  note.clean
#             mate.clean
#             flutter.clean
#             ...
pkgs._run_subcmd() {
  local subcmd="$1"
  if [[ "$subcmd" == "" ]] ; then
    echo "缺subcmd参数 Usage:pkgs._run_subcmd <subcmd>";
    return 100;
  fi
  for pkg in "${!_pkgs[@]}"; do
    if _func_exists "$pkg.$subcmd" ; then "$pkg.$subcmd" ; fi
  done
}




# run一条命令，先print上下文信息，再执行
# Usage: _run <some cmd>
# Example:
# ------------------------------------
# $ _run pwd
# /Users/x/git/younpc/bake:733 -> bake.go() ▶︎【pwd】
# /Users/x/git/younpc
# ------------------------------------
_run() {
  local caller_line;
  caller_line=$(caller 0 | awk '{print $1}')
  local project
  # home目录替换为"~"符号
  # ${PWD#$HOME}可以删掉home目录前缀, 类似$(echo $PWD | sed "s|^$HOME||")，比sed简单高效,而且sed处理变量总有特殊字符问题
  local current="~${PWD/#$HOME}"
  echo "$SCRIPT_PATH:$caller_line -> ${FUNCNAME[1]} ▶︎ 【$current$ $*】"
  "$@"
  return $?
}

## if function not exist return 1;
# Usage: _func_exists <function>
# Example: _func_exists app.build
#         => return 0
_func_exists(){
  local func="$1"
  if ! ( declare -F "$func" | grep "$func" &>/dev/null  2>&1; ) then
    return 1;
  fi
}



##########################################
# app cmd script
# 应用的命令脚本
##########################################

bake.cmd --cmd root \
             --desc "$( cat <<-EOF

 ___  _        _    _                    _  _       _
| __|| | _  _ | |_ | |_  ___  _ _       | \| | ___ | |_  ___
| _| | || || ||  _||  _|/ -_)| '_|      | .  |/ _ \|  _|/ -_)
|_|  |_| \_._| \__| \__|\___||_|        |_|\_|\___/ \__|\___|

flutter-note build tools.
https://github.com/chen56/note
PWD: $PWD

Usage:
 $SCRIPT_PATH [cmd] [opts] [args...]

Examples:
 ./${SCRIPT_FILE}                          # same as  './${SCRIPT_FILE} -h'
 ./${SCRIPT_FILE} -h                       # show all commands help
 ./${SCRIPT_FILE} -h --debug               # show all commands help , include internal function

 ./${SCRIPT_FILE}  flutter dev             # == cd notes/flutter_core && flutter run --device-id macos

 ./${SCRIPT_FILE}  test                    # test all projects
 ./${SCRIPT_FILE}  build                   # defalut build == flutter build web --web-renderer html
 ./${SCRIPT_FILE}  preview                 # defalut preview == start server at web build
 ./${SCRIPT_FILE}  test                    # test all projects

 ./${SCRIPT_FILE}  pkgs ls                   # show all mono project
 ./${SCRIPT_FILE}  pkgs run pwd              # run "pwd" on all mono project dir
 ./${SCRIPT_FILE}  pkgs run flutter pub get  # run "flutter pub get" on all mono project dir
EOF
  )"


note.run() (     _run "$@")
note.install() (  note.run flutter pub get;)
note.clean() (    note.run flutter clean; rm -rf build;)
note.test() (     note.run flutter test;)
note.build() (    note.run  dart compile exe bin/notecli.dart ;)

note_lang_dart.run() (     cd packages/note_lang_dart || return 200 && _run "$@")
note_lang_dart.install() ( note_lang_dart.run flutter pub get)
note_lang_dart.clean() (   note_lang_dart.run flutter clean; rm -rf build;)
note_lang_dart.test() (    note_lang_dart.run flutter test;)

flutter.run() (                 cd notes/flutter_core && _run "$@")
flutter.install() (             flutter.run flutter pub get)
flutter.clean() (               flutter.run flutter clean; rm -rf build;)
flutter.gen() (                 flutter.run dart run bin/gen.dart; )
# get ip only work on macos
#   shellcheck disable=SC2155
#   local ip=$(ifconfig -l | xargs -n1 ipconfig getifaddr) || true
flutter.dev_web() {             flutter.run flutter run --web-port 8888 --web-renderer html --device-id chrome "$@"; }
flutter.dev() {                 flutter.run flutter run --device-id macos "$@"; }
# skwasm无法运行
flutter.build_macos() {         flutter.run flutter build macos -v --release --tree-shake-icons "$@";  }
flutter.build_web_skwasm() {    flutter.run flutter build web -v --release --tree-shake-icons --web-renderer skwasm "$@" ; }
flutter.build_web_canvaskit() { flutter.run flutter build web -v --release --tree-shake-icons --web-renderer canvaskit "$@" ; }
flutter.build() {
  flutter.run flutter build web -v --release --tree-shake-icons --web-renderer html "$@" ;
}
  #   http-server 不支持base href设置，所以单独build,并设置base-href为"/",而github-pages的base-href必须是repository名
  #   	npx http-server ./flutter_core/build/web --port 8000
    # flutter pub global activate dhttpd
    # run p.flutter_core dhttpd --path ./build/web --port 8080 '--headers=Cross-Origin-Embedder-Policy=credentialless;Cross-Origin-Opener-Policy=same-origin'
flutter.preview() {             flutter.run deno run --allow-env --allow-read --allow-sys --allow-net npm:http-server ./build/web --port 8000 -g --brotli; }

install(){ pkgs._run_subcmd install; }

upgrade() {
  upgrade_bake;
}


# 执行 note.test、mate.test等命令
test() { pkgs._run_subcmd test; }
clean() { pkgs._run_subcmd clean; }

gen.all() (   dart run bin/notecli.dart gen --dir notes/flutter_core/ ;  ) #  mate_flutter.gen;暂时不用了
gen.clean() ( flutter.run rm -f ./lib/pages.g.dart;  ) # 暂时不用了 _run rm -rf mate_flutter/lib;

docker.build() (
  _run docker build --progress plain --tag younpc/note:latest . ;
  _run mkdir -p build/flutter_core/web;
  _run sh -c "docker run --rm --workdir /usr/share/nginx/html/note younpc/note tar cf - ./ | ( cd build/flutter_core/web; tar xf -)";
)
docker.run() {      _run echo "note preview http://localhost:8888/note/"; _run docker run --rm --name note -p 8888:80 -u root:root younpc/note;}
docker.preview() {  _run docker build --progress plain --build-arg test=off --tag younpc/note:latest . ; docker.run; }
docker.debug() {    _run docker run -v "$PWD:/home/flutter/note" --workdir /home/flutter/note --rm -it fischerscode/flutter:3.19.0 bash ; }
docker.push() {     docker image push younpc/note:latest ; }

info() {
  echo "\$PWD        :  $PWD"
  echo "\$SCRIPT_PATH:  $SCRIPT_PATH"
  echo "\$SCRIPT_DIR :   $SCRIPT_DIR"
  echo "\$SCRIPT_FILE:  $SCRIPT_FILE"
  echo
}

####################################################
# app entry script & _root cmd
####################################################
bake.go "$@"

