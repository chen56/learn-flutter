#!/usr/bin/env bash

# On Mac OS, readlink -f doesn't work, so use._real_path get the real path of the file
_real_path() (
  cd "$(dirname "$1")"
  file="$PWD/$(basename "$1")"
  while [[ -L "$file" ]]; do
    file="$(readlink "$file")"
    cd -P "$(dirname "$file")"
    file="$PWD/$(basename "$file")"
  done
  echo "$file"
)
SCRIPT_PATH="$(_real_path "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
SCRIPT_FILE="$(basename "$SCRIPT_PATH")"

update(){ curl -L -O https://github.com/chen56/note/raw/main/bake.bash ; }
if ! [[ -f "$SCRIPT_DIR/bake.bash" ]]; then
  update
fi

# include common script
source "$SCRIPT_DIR/bake.bash"

####################################################################################
# app script
####################################################################################
# print first, then _exec
_exec() {
  local project
  project=$(basename "$PWD")
  #  [[ "$PWD" == "$SCRIPT_DIR" ]] && project="_root"
  echo "$project -> ${FUNCNAME[1]}() ▶︎【$*】"
  "$@"
  return $?
}

##########################################
# app cmd script
# 应用的命令脚本
##########################################

bake.cmd --cmd _root \
             --usage "./$SCRIPT_FILE [cmd] [opts] [args...]" \
             --summary "flutter-note build cli." \
             --description "$( cat <<-EOF

 ___  _        _    _                    _  _       _
| __|| | _  _ | |_ | |_  ___  _ _       | \| | ___ | |_  ___
| _| | || || ||  _||  _|/ -_)| '_|      | .  |/ _ \|  _|/ -_)
|_|  |_| \_._| \__| \__|\___||_|        |_|\_|\___/ \__|\___|

flutter-note build tools.
https://github.com/chen56/note

Examples:
 ./${SCRIPT_FILE}                          # same as  './${SCRIPT_FILE} -h'
 ./${SCRIPT_FILE} -h                       # show all commands help
 ./${SCRIPT_FILE} -h --debug               # show all commands help , include internal function

 ./${SCRIPT_FILE}  test                    # test all projects
 ./${SCRIPT_FILE}  build                   # defalut build == flutter build web --web-renderer html
 ./${SCRIPT_FILE}  preview                 # defalut preview == run server at web build
 ./${SCRIPT_FILE}  test                    # test all projects

 ./${SCRIPT_FILE}  p -h                    # show all mono project commands help
 ./${SCRIPT_FILE}  p note pwd              # run "pwd" on note project dir
 ./${SCRIPT_FILE}  p all pwd               # run "pwd" on all mono projects
 ./${SCRIPT_FILE}  p all flutter pub get   # run "flutter pub get" on all mono projects

EOF
  )"


#   flutter_note flutter create --platforms=macos .
init() {
  run git lfs install
}

bake.cmd --cmd p --summary "<mono>  project set" --usage "Usage: ./$SCRIPT_FILE p <sub_cmd>"
#p(){ echo "use './$SCRIPT_FILE p -h' see sub commands, there are all projects "; }

bake.cmd --cmd p.all --summary "<mono>  run cmd on all mono project" --usage "Usage: ./$SCRIPT_FILE all [any command]"
p.all() {
  #       目录中有"pubspec.yaml"的，认为是flutter项目
  #        for project in $( find . -name pubspec.yaml | sed s/pubspec.yaml$//g ) ; do
  #          # 用括号()开启子进程执行，可以不影响当前进程的环境
  #          ( cd "$project" ;  run "$@" ; )
  #        done
  (cd learn_dart && _exec "$@")
  (cd note && _exec "$@")
  (cd mate_flutter && _exec "$@")
  (cd mate && _exec "$@")
  (cd note_test && _exec "$@")
  (cd note_tools && _exec "$@")
  (cd spaces/flutter_note && _exec "$@")
}

p.note() (cd note && _exec "$@")
p.flutter_note() (cd spaces/flutter_note && _exec "$@")
p.mate() (cd mate && _exec "$@")
p.mate_flutter() (cd mate_flutter && _exec "$@")
p.note_test() (cd note_test && _exec "$@")
p.note_tools() (cd note_tools && _exec "$@")

get() { _exec p.all flutter pub get; }

test() { ./test/bake2_test.bash test ; _exec p.all flutter test ;}
test.bake() { ./test/bake2_test.bash test ; }

# get ip only work on macos
#   shellcheck disable=SC2155
#   local ip=$(ifconfig -l | xargs -n1 ipconfig getifaddr) || true
run.web() { p.flutter_note flutter run --web-port 8888 --web-renderer html --device-id chrome "$@"; }
run.macos() { p.flutter_note flutter run --device-id macos "$@"; }

# skwasm无法运行
build.macos() { _exec p.flutter_note flutter build macos -v --release --tree-shake-icons "$@";  }
build.web_skwasm() {    p.flutter_note flutter build web -v --release --tree-shake-icons --web-renderer skwasm "$@" ; }
build.web_canvaskit() { p.flutter_note flutter build web -v --release --tree-shake-icons --web-renderer canvaskit "$@" ; }
build() {      p.flutter_note flutter build web -v --release --tree-shake-icons --web-renderer html "$@" ; }

  #   http-server 不支持base href设置，所以单独build,并设置base-href为"/",而github-pages的base-href必须是repository名
  #   	npx http-server ./flutter_note/build/web --port 8000
    # flutter pub global activate dhttpd
    # _exec p.flutter_note dhttpd --path ./build/web --port 8080 '--headers=Cross-Origin-Embedder-Policy=credentialless;Cross-Origin-Opener-Policy=same-origin'
preview() { _exec p.flutter_note deno run --allow-env --allow-read --allow-sys --allow-net npm:http-server ./build/web --port 8000 -g --brotli; }
preview.macos() (  _exec p.flutter_note open build/macos/Build/Products/Release/flutter_note.app ; )

#   http-server 不支持base href设置，所以单独build,并设置base-href为"/",而github-pages的base-href必须是repository名
#    build "$@"
#   	npx http-server ./flutter_note/build/web --port 8000
web.serve() {     _exec p.flutter_note deno run --allow-env --allow-read --allow-sys --allow-net npm:http-server ./build/web --port 8000 -g --brotli ;}

clean() { p.all flutter clean; rm -rf build;}

gen.all() {  gen.notes;  } #  gen.mate;不再用了
gen.notes() { _exec p.flutter_note dart run tools/gen.dart;        _exec p.flutter_note flutter pub get; }
gen.mate() (  _exec p.mate_flutter dart run  tools/gen_mates.dart; _exec p.mate_flutter dart run  tools/gen_mate_icons.dart ; )
gen.clean() { _exec rm -f p.flutter_note/lib/pages.g.dart;         _exec rm -rf mate_flutter/lib;  }

docker.build() (    _exec docker build --progress plain --tag younpc/note:latest . ; _exec mkdir -p build/flutter_note/web; _exec sh -c "docker run --rm --workdir /usr/share/nginx/html/note younpc/note tar cf - ./ | ( cd build/flutter_note/web; tar xf -)";)
docker.run() {      _exec echo "note preview http://localhost:8888/note/"; _exec docker run --rm --name note -p 8888:80 -u root:root younpc/note;}
docker.preview() {  _exec docker build --progress plain --build-arg test=off --tag younpc/note:latest . ; docker.run; }
docker.debug() {    _exec docker run -v $PWD:/home/flutter/note --workdir /home/flutter/note --rm -it fischerscode/flutter:3.10.0-1.3.pre bash ; }
docker.push() {     docker image push younpc/note:latest ; }


####################################################
# app entry script & _root cmd
####################################################
bake.go "$@"

