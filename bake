#!/usr/bin/env bash

# On Mac OS, readlink -f doesn't work, so use._real_path get the real path of the file
#_real_path() {  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}" ; }
#_ROOT_BAKE_PATH="$(_real_path "${BASH_SOURCE[0]}")"
#_ROOT_DIR="$(dirname "$_ROOT_BAKE_PATH")"
_ROOT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
_ROOT_BAKE_PATH="${_ROOT_DIR}/bake"

# 进入脚本所在目录，这样上下文就是本项目了
cd "$_ROOT_DIR" || exit 200

# include common script
source "packages/you_bake/bake.bash"

declare -A _pkgs=(
    ["root"]="$_ROOT_DIR"
    ["bake"]="$_ROOT_DIR/packages/you_bake"
    ["you_dart"]="$_ROOT_DIR/packages/you_dart"
    ["you_flutter"]="$_ROOT_DIR/packages/you_flutter"
    ["you_cli"]="$_ROOT_DIR/packages/you_cli"
    ["learn_dart"]="$_ROOT_DIR/notes/learn_dart"
    ["flutter_web"]="$_ROOT_DIR/notes/flutter_web"
    ["qwik"]="$_ROOT_DIR/notes/qwik"
    ["shell"]="$_ROOT_DIR/notes/shell"
)


####################################################
# app entry script & _root cmd
####################################################
bake.cmd --cmd ls --desc "<mono> mono project manage: ./bake pkgs <ls|run>"
bake.cmd --cmd run --desc "<mono> run cmd on all pkg,Usage: ./bake pkgs run [any cmd]"

bake.cmd --cmd root --desc "$( cat <<-EOF

 ___  _        _    _                    _  _       _
| __|| | _  _ | |_ | |_  ___  _ _       | \| | ___ | |_  ___
| _| | || || ||  _||  _|/ -_)| '_|      | .  |/ _ \|  _|/ -_)
|_|  |_| \_._| \__| \__|\___||_|        |_|\_|\___/ \__|\___|

https://github.com/chen56/you/flutter_web

PWD: $PWD

Usage:
 ./bake [cmd] [opts] [args...]

Examples:
 ./bake                           # same as  './bake -h'
 ./bake -h                        # show all commands help
 ./bake -h --debug                # show all commands help , include internal function

 ./bake flutter dev               # == cd notes/flutter_web && flutter run --device-id macos

 ./bake test                      # test all projects
 ./bake build                     # defalut build == flutter build web --web-renderer html
 ./bake preview                   # defalut preview == start server at web build
 ./bake test                      # test all projects

 ./bake pkgs ls                   # show all mono project
 ./bake pkgs run pwd              # run "pwd" on all mono project dir
 ./bake pkgs run flutter pub get  # run "flutter pub get" on all mono project dir
EOF
)"

##########################################
#  公共函数区，初始化语句和变量只放脚本头尾
##########################################
_is_cmd() {
  command -v "$1" >/dev/null 2>&1
}


# 在所有项目上运行某命令
# Usage:    _run_all_pkgs <sub cmd>
# Example:  _run_all_pkgs clean
#     run =>  note.clean
#             mate.clean
#             flutter_web.clean
#             ...
_run_all() {
  local subcmd="$1"
  if [[ "$subcmd" == "" ]] ; then
    echo "缺subcmd参数 Usage:_run_all <sub cmd>";
    return 100;
  fi
  for pkg in "${!_pkgs[@]}"; do
    if _is_cmd "$pkg.$subcmd" ; then "$pkg.$subcmd" ; fi
  done
}

# 先cd到项目目录，再print上下文信息，最后执行
# Usage:   _run <pkg> <some cmd>
# Example: _run flutter_web pwd
_run() {
  local pkg=${1:?required project arg,Usage: _run_at_pkg <pkg>}
  shift
  local cmd="${1}"
#  [[ "$cmd" != "" ]]  # 如果有cmd，去掉第1个cmd,剩余的是它的参数，如果没有，就类似于在控制台上打了个会车一样任他去吧

  # 进入工作目录
  local workdir="${_pkgs[$pkg]}"
  pushd "$workdir" > /dev/null || { echo "pushd failure"; exit 200; }

  local caller_line;
  caller_line=$(caller 0 | awk '{print $1}')

  if ! _is_cmd "$cmd" ; then
    echo "$_ROOT_BAKE_PATH:$caller_line ⚪️ ▶︎${FUNCNAME[1]}() ▶︎【$PWD$ $*】"
  else
    echo "$_ROOT_BAKE_PATH:$caller_line 🔵 ▶︎${FUNCNAME[1]}() ▶︎【$PWD$ $*】"
    "$@"
  fi
  # 退出工作目录，不弄脏环境,不需要打印popd执行结果
  popd > /dev/null || { echo "popd failure"; exit 200; }
}

##########################################
# app cmd script
# 应用的命令脚本
##########################################


pkgs()        { for pkg in ${!_pkgs[*]} ; do echo "$pkg:${_pkgs[$pkg]}"; done; }
run()         { for pkg in ${!_pkgs[*]} ; do _run "$pkg" "$@" ;   done         }
install()     { _run_all install;                                              }
get()         { _run_all install;                                              }
build()       { _run_all build;                                                }
upgrade()     { _run_all upgrade;                                              }
clean()       { _run_all clean;                                                }
test()        { _run_all test;                                                 }
gen()         { _run_all gen;                                                  }
dart_fix()    { run dart fix $@;                                               }

# 根项目，主要是bin/辅助工具等
root.run()               { _run root "$@";                                          }

bake.run()              { _run bake "$@";                                           }
bake.test()             { _run bake ./test.bash test;                               }


you_dart.run()     { _run you_dart "$@";                                 }
you_dart.install() { _run you_dart flutter pub get;                      }
you_dart.clean()   { _run you_dart flutter clean; rm -rf build;          }
you_dart.upgrade() { _run you_dart flutter pub outdated ;
                     _run you_dart flutter pub upgrade ;                 }
you_dart.test()    { _run you_dart flutter test;                         }
you_dart.publish() { _run you_dart flutter pub publish;               }

you_flutter.run()     { _run you_flutter "$@";                                 }
you_flutter.install() { _run you_flutter flutter pub get;                      }
you_flutter.clean()   { _run you_flutter flutter clean; rm -rf build;          }
you_flutter.upgrade() { _run you_flutter flutter pub outdated ;
                        _run you_flutter flutter pub upgrade ;                 }
you_flutter.test()    { _run you_flutter flutter test;                         }
you_flutter.publish() { _run you_flutter flutter pub publish;                  }


you_flutter_internal.run()     { _run you_flutter_internal "$@";                                 }
you_flutter_internal.install() { _run you_flutter_internal flutter pub get;                      }
you_flutter_internal.clean()   { _run you_flutter_internal flutter clean; rm -rf build;          }
you_flutter_internal.upgrade() { _run you_flutter_internal flutter pub outdated ;
                                 _run you_flutter_internal flutter pub upgrade ;                 }
you_flutter_internal.test()    { _run you_flutter_internal flutter test;                         }
you_flutter_internal.publish() { _run you_flutter_internal flutter pub publish;               }


you_cli.run()     { _run you_cli "$@";                                 }
you_cli.test()    { _run you_cli dart test;                                 }
you_cli.install() { _run you_cli flutter pub get;                      }
you_cli.clean()   { _run you_cli flutter clean; rm -rf build;          }
you_cli.upgrade() { _run you_cli flutter pub outdated ;
                    _run you_cli flutter pub upgrade ;                 }
you_cli.publish() { _run you_cli flutter pub publish;               }


learn_dart.run()        { _run learn_dart "$@";                                     }
learn_dart.install()    { _run learn_dart dart pub get ;                            }
learn_dart.clean()      { _run learn_dart rm -rf
                          _run learn_dart rm -rf .dart_tool;                        }
learn_dart.upgrade()    {  _run learn_dart flutter pub outdated ;
                           _run learn_dart dart pub upgrade ;                        }
learn_dart.study()      { _run learn_dart dart test;                                }
# skwasm无法运行
  #   http-server 不支持base href设置，所以单独build,并设置base-href为"/",而github-pages的base-href必须是repository名
  #   	npx http-server ./flutter_web/build/web --port 8000
    # flutter pub global activate dhttpd
    # run p.flutter_web dhttpd --path ./build/web --port 8080 '--headers=Cross-Origin-Embedder-Policy=credentialless;Cross-Origin-Opener-Policy=same-origin'
# install:
# - flutter pub global activate dhttpd
# - deno
flutter_web.run()      { _run flutter_web "$@"  ;                           }
flutter_web.install()  { _run flutter_web flutter pub get ;                 }
flutter_web.clean()    { _run flutter_web flutter clean;
                         rm -rf build;                                             }
flutter_web.upgrade()  { _run flutter_web flutter pub outdated ;
                         _run flutter_web flutter pub upgrade ;             }
flutter_web.gen()      { #_run root dart run packages/you_cli/bin/cli.dart gen all --dir notes/flutter_web/;
                         _run root dart run packages/you_cli/bin/cli.dart gen routes  --dir notes/flutter_web/ # --async
}
flutter_web.dev()      { flutter_web.dev_html ; }
flutter_web.build()    { flutter_web.build_html ;}
flutter_web.preview()  { flutter_web.build_html;
                         flutter_web.server_deno;                            }

flutter_web.dev_html()              { _run flutter_web flutter run --web-port 8888 --web-renderer html --device-id chrome "$@"; }
flutter_web.dev_macos()             { _run flutter_web flutter run --device-id macos "$@"; }
flutter_web.build_html()            { _run flutter_web flutter build web   --release --tree-shake-icons --web-renderer html       --source-maps --output build/web/you/flutter_web --base-href "/you/flutter_web/" --no-web-resources-cdn "$@" ;}
flutter_web.build_web_skwasm()      { _run flutter_web flutter build web   --release --tree-shake-icons --web-renderer skwasm     --source-maps --output build/web/you/flutter_web --base-href "/you/flutter_web/" --no-web-resources-cdn "$@" ; }
flutter_web.build_web_canvaskit()   { _run flutter_web flutter build web   --release --tree-shake-icons --web-renderer canvaskit  --source-maps --output build/web/you/flutter_web --base-href "/you/flutter_web/" --no-web-resources-cdn "$@" ; }
flutter_web.build_wasm()            { _run flutter_web flutter build web   --release --tree-shake-icons --wasm                    --source-maps --output build/web/you/flutter_web --base-href "/you/flutter_web/" --no-web-resources-cdn "$@" ;}
flutter_web.build_macos()           { _run flutter_web flutter build macos --release --tree-shake-icons "$@";  }
flutter_web.server_dhttpd()      { echo "http://localhost:8080/you/flutter_web";
                                      _run flutter_web dhttpd --path ./build/web --port 8080 '--headers=Cross-Origin-Embedder-Policy=credentialless;Cross-Origin-Opener-Policy=same-origin';  }
flutter_web.server_deno()     { echo "http://localhost:8080/you/flutter_web";
                                      _run flutter_web deno run --allow-env --allow-read --allow-sys --allow-net npm:http-server ./build/web --port 8080 -g --brotli; }


# github 发布时使用,参考[.github/workflows/*.yaml]
docker.build() {   _run root docker build --progress plain --build-arg test=on --tag chen56/you:latest . ;
                   _run root mkdir -p build;
                   _run root sh -c "docker run --rm --workdir /usr/share/nginx/html/ chen56/you tar cf - ./ | ( cd build; tar xf -)";    }
docker.preview() { _run root echo "note preview http://localhost:8888/you/flutter_web";
                   _run root docker run --rm --name you -p 8888:80 -u root:root chen56/you;                                                 }
docker.debug()   { _run root docker run -v "$PWD:/home/flutter/you" --workdir /home/flutter/you --rm -it fischerscode/flutter:3.19.0 bash ; }
docker.exec()    { _run root docker exec -it --workdir /usr/share/nginx/html/you/ you bash ;                                                }
docker.push()    { _run root docker image push chen56/you:latest ;                                                                          }


info() {
  echo "PWD         :  $PWD"
  echo "_ROOT_DIR   :  $_ROOT_DIR"
  echo
  echo "## pkgs"
  ls
  echo
}

temp(){

  # 指定需要遍历的目录，例如当前目录可以使用 "."
  directory="notes/flutter_web/lib"

  # 遍历目录中的所有note.dart文件
  for file in $(find 'notes/flutter_web/lib' -type f -name 'note.json') ; do
#    echo "xxx $file"
#      # 检查文件是否存在
      if [ -f "$file" ]; then
          # 构建新的文件名，即将note.dart替换为page.dart
          new_file="${file//note.json/page.json}"
          # 执行重命名操作
          git mv "$file" "$new_file"
          echo "mv $file to $new_file"
      fi
  done
}

bake.go "$@"