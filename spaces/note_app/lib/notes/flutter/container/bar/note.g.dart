// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 381,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## AppBar )
        (
          cellType: 'body',
          offset: 381,
          end: 508,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(AppBar)
        (
          cellType: 'body',
          offset: 586,
          end: 1443,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## BottomA)
        (
          cellType: 'body',
          offset: 1521,
          end: 1678,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Bottom)
        (
          cellType: 'body',
          offset: 1756,
          end: 2430,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''    ## ~~Bo)
        (
          cellType: 'body',
          offset: 2508,
          end: 2865,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Column)
        (
          cellType: 'body',
          offset: 2943,
          end: 3519,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' Navigation)
        (
          cellType: 'body',
          offset: 3597,
          end: 3714,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (var currentPageIndex = 0;, Widget buildNavigationBar(cont, print(MateSampleContent(Statef)
        (
          cellType: 'body',
          offset: 3792,
          end: 4738,
          statementCount: 3,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Navigat)
        (
          cellType: 'body',
          offset: 4816,
          end: 5155,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 5233,
          end: 6543,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## TabBar )
        (
          cellType: 'body',
          offset: 6621,
          end: 7119,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7197,
          end: 7748,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 再来看看加了TabV)
        (
          cellType: 'body',
          offset: 7826,
          end: 7891,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7969,
          end: 9000,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 上面用法和[Navig)
        (
          cellType: 'body',
          offset: 9078,
          end: 9349,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (onPressed() {ScaffoldMessenger, print(MateSampleContent(SizedB)
        (
          cellType: 'body',
          offset: 9427,
          end: 10214,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## ButtonB)
        (
          cellType: 'body',
          offset: 10292,
          end: 10623,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 10701,
          end: 11140,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Overflo)
        (
          cellType: 'body',
          offset: 11218,
          end: 11425,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 11503,
          end: 12313,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Platfor)
        (
          cellType: 'body',
          offset: 12391,
          end: 12926,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (click() {showAboutDialog(conte, print(MateSampleContent(MenuBa)
        (
          cellType: 'body',
          offset: 13004,
          end: 14127,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 14127,
          end: 14129,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
