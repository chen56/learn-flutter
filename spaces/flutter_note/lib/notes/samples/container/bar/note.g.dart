// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 308,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## AppBar )
        (
          cellType: 'body',
          offset: 308,
          end: 435,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(AppBar)
        (
          cellType: 'body',
          offset: 513,
          end: 1370,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## BottomA)
        (
          cellType: 'body',
          offset: 1448,
          end: 1605,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Bottom)
        (
          cellType: 'body',
          offset: 1683,
          end: 2357,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''  ## ~~Bott)
        (
          cellType: 'body',
          offset: 2435,
          end: 2789,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Column)
        (
          cellType: 'body',
          offset: 2867,
          end: 3443,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' Navigation)
        (
          cellType: 'body',
          offset: 3521,
          end: 3638,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (var currentPageIndex = 0;, Widget buildNavigationBar(cont, print(MateSampleContent(Statef)
        (
          cellType: 'body',
          offset: 3716,
          end: 4662,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Navigat)
        (
          cellType: 'body',
          offset: 4740,
          end: 5077,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 5155,
          end: 6465,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## TabBar )
        (
          cellType: 'body',
          offset: 6543,
          end: 7041,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7119,
          end: 7670,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 再来看看加了TabV)
        (
          cellType: 'body',
          offset: 7748,
          end: 7813,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7891,
          end: 8922,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 上面用法和[Navig)
        (
          cellType: 'body',
          offset: 9000,
          end: 9271,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (onPressed() {ScaffoldMessenger, print(MateSampleContent(SizedB)
        (
          cellType: 'body',
          offset: 9349,
          end: 10136,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## ButtonB)
        (
          cellType: 'body',
          offset: 10214,
          end: 10544,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 10622,
          end: 11061,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Overflo)
        (
          cellType: 'body',
          offset: 11139,
          end: 11346,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 11424,
          end: 12234,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Platfor)
        (
          cellType: 'body',
          offset: 12312,
          end: 12847,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (click() {showAboutDialog(conte, print(MateSampleContent(MenuBa)
        (
          cellType: 'body',
          offset: 12925,
          end: 14048,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 14048,
          end: 14050,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
