// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 303,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## AppBar )
        (
          cellType: 'body',
          offset: 303,
          end: 430,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(AppBar)
        (
          cellType: 'body',
          offset: 508,
          end: 1365,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## BottomA)
        (
          cellType: 'body',
          offset: 1443,
          end: 1600,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Bottom)
        (
          cellType: 'body',
          offset: 1678,
          end: 2352,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''  ## ~~Bott)
        (
          cellType: 'body',
          offset: 2430,
          end: 2784,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Column)
        (
          cellType: 'body',
          offset: 2862,
          end: 3438,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' Navigation)
        (
          cellType: 'body',
          offset: 3516,
          end: 3633,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (var currentPageIndex = 0;, Widget buildNavigationBar(cont, print(MateSampleContent(Statef)
        (
          cellType: 'body',
          offset: 3711,
          end: 4657,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Navigat)
        (
          cellType: 'body',
          offset: 4735,
          end: 5072,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 5150,
          end: 6460,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## TabBar )
        (
          cellType: 'body',
          offset: 6538,
          end: 7036,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7114,
          end: 7665,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 再来看看加了TabV)
        (
          cellType: 'body',
          offset: 7743,
          end: 7808,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7886,
          end: 8917,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 上面用法和[Navig)
        (
          cellType: 'body',
          offset: 8995,
          end: 9266,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (onPressed() {ScaffoldMessenger, print(MateSampleContent(SizedB)
        (
          cellType: 'body',
          offset: 9344,
          end: 10131,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## ButtonB)
        (
          cellType: 'body',
          offset: 10209,
          end: 10539,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 10617,
          end: 11056,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Overflo)
        (
          cellType: 'body',
          offset: 11134,
          end: 11341,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 11419,
          end: 12229,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Platfor)
        (
          cellType: 'body',
          offset: 12307,
          end: 12842,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (click() {showAboutDialog(conte, print(MateSampleContent(MenuBa)
        (
          cellType: 'body',
          offset: 12920,
          end: 14043,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 14043,
          end: 14045,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
