// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 264,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'body',
          offset: 264,
          end: 267,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # button  )
        (
          cellType: 'body',
          offset: 345,
          end: 595,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Wrap$M)
        (
          cellType: 'body',
          offset: 673,
          end: 1370,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### IconBu)
        (
          cellType: 'body',
          offset: 1448,
          end: 1504,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 1582,
          end: 2098,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Floati)
        (
          cellType: 'body',
          offset: 2176,
          end: 2264,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int id = 0;, print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 2342,
          end: 3351,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### 几个特殊的系)
        (
          cellType: 'body',
          offset: 3429,
          end: 3757,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 3835,
          end: 4013,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''  ### Toggl)
        (
          cellType: 'body',
          offset: 4091,
          end: 4244,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 4322,
          end: 4667,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Segmen)
        (
          cellType: 'body',
          offset: 4745,
          end: 4950,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 5028,
          end: 5988,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## 相关组件  #)
        (
          cellType: 'body',
          offset: 6066,
          end: 6606,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Ink*组件)
        (
          cellType: 'body',
          offset: 6684,
          end: 6878,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Column)
        (
          cellType: 'body',
          offset: 6956,
          end: 7309,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Button)
        (
          cellType: 'body',
          offset: 7387,
          end: 7495,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 7573,
          end: 8164,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 8164,
          end: 8166,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
