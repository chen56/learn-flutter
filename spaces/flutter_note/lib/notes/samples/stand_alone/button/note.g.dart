// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 202,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'body',
          offset: 202,
          end: 205,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # button  )
        (
          cellType: 'body',
          offset: 283,
          end: 533,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Wrap$M)
        (
          cellType: 'body',
          offset: 611,
          end: 1308,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### IconBu)
        (
          cellType: 'body',
          offset: 1386,
          end: 1442,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 1520,
          end: 2036,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Floati)
        (
          cellType: 'body',
          offset: 2114,
          end: 2202,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int id = 0;, print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 2280,
          end: 3289,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### 几个特殊的系)
        (
          cellType: 'body',
          offset: 3367,
          end: 3695,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 3773,
          end: 3951,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''  ### Toggl)
        (
          cellType: 'body',
          offset: 4029,
          end: 4182,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 4260,
          end: 4605,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Segmen)
        (
          cellType: 'body',
          offset: 4683,
          end: 4888,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 4966,
          end: 5926,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## 相关组件  #)
        (
          cellType: 'body',
          offset: 6004,
          end: 6544,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Ink*组件)
        (
          cellType: 'body',
          offset: 6622,
          end: 6816,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Column)
        (
          cellType: 'body',
          offset: 6894,
          end: 7247,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### Button)
        (
          cellType: 'body',
          offset: 7325,
          end: 7433,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 7511,
          end: 8102,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 8102,
          end: 8104,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTptYXRlL21hdGVfbm90ZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm5vdGUvbm90ZV9wYWdlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6bWF0ZV9mbHV0dGVyL21hdGVyaWFsLmRhcnQnOwoKYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQsIFBlbiBwcmludCkgewogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyBidXR0b24KCjxodHRwczovL20zLm1hdGVyaWFsLmlvL2NvbXBvbmVudHMvYnV0dG9ucy9vdmVydmlldz4sIGFuIG92ZXJ2aWV3IG9mIGVhY2ggb2YKdGhlIE1hdGVyaWFsIERlc2lnbiBidXR0b24gdHlwZXMgYW5kIGhvdyB0aGV5IHNob3VsZCBiZSB1c2VkIGluIGRlc2lnbnMuCgojIyDmjInpkq7mpoLop4gKCiMjIyDkuLvopoHmjInpkq4KCuS7peS4i+WHoOenjeS4u+imgUJ1dHRvbumDvee7p+aJv+iHqltCdXR0b25TdHlsZUJ1dHRvbl0KICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlQ29udGVudChXcmFwJE1hdGUoCiAgICBjaGlsZHJlbjogWwogICAgICBFbGV2YXRlZEJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoIkVsZXZhdGVkQnV0dG9uIikpLAogICAgICBGaWxsZWRCdXR0b24kTWF0ZSgKICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCdGaWxsZWRCdXR0b24nKSksCiAgICAgIEZpbGxlZEJ1dHRvbiRNYXRlLnRvbmFsKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoJ0ZpbGxlZEJ1dHRvbi50b25hbCcpKSwKICAgICAgT3V0bGluZWRCdXR0b24kTWF0ZSgKICAgICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCdPdXRsaW5lZEJ1dHRvbicpKSwKICAgICAgVGV4dEJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoJ1RleHRCdXR0b24nKSksCiAgICBdLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyMgSWNvbkJ1dHRvbgoK5Zu+5qCH5oyJ6ZKu44CCCiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZUNvbnRlbnQoUm93JE1hdGUoCiAgICBjaGlsZHJlbjogWwogICAgICBJY29uQnV0dG9uJE1hdGUoCiAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICAgdG9vbHRpcDogIkljb25CdXR0b24iLAogICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLndpZmkpKSwKICAgICAgSWNvbkJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIHRvb2x0aXA6ICJJY29uQnV0dG9uIiwKICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5hZGQpKSwKICAgICAgSWNvbkJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgIHRvb2x0aXA6ICJJY29uQnV0dG9uIiwKICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5hY191bml0KSksCiAgICBdLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyMgRmxvYXRpbmdBY3Rpb25CdXR0b24KCua1ruWKqOaMiemSru+8jOW4uOingeS6jltTY2FmZm9sZF3lj7PkuIvop5LnmoTmta7liqjmjInpkq7jgIIKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBpbnQgaWQgPSAwOwoKICBwcmludChNYXRlU2FtcGxlQ29udGVudChSb3ckTWF0ZSgKICAgIGNoaWxkcmVuOiBbCiAgICAgIEZsb2F0aW5nQWN0aW9uQnV0dG9uJE1hdGUoCiAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICBoZXJvVGFnOiAiYnV0dG9uLkZsb2F0aW5nQWN0aW9uQnV0dG9uJHtpZCsrfSIsCiAgICAgICAgdG9vbHRpcDogIkZsb2F0aW5nQWN0aW9uQnV0dG9uIiwKICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCLnvLrnnIHmnoTpgKDlmagiKSwKICAgICAgKSwKICAgICAgRmxvYXRpbmdBY3Rpb25CdXR0b24kTWF0ZS5zbWFsbCgKICAgICAgICAvLyBpc0V4dGVuZGVkOiBmYWxzZSwKICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgIGhlcm9UYWc6ICJidXR0b24uRmxvYXRpbmdBY3Rpb25CdXR0b24ke2lkKyt9IiwKICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCJzbWFsbCIpLAogICAgICApLAogICAgICBGbG9hdGluZ0FjdGlvbkJ1dHRvbiRNYXRlLmxhcmdlKAogICAgICAgIC8vIGlzRXh0ZW5kZWQ6IGZhbHNlLAogICAgICAgIG9uUHJlc3NlZDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgaGVyb1RhZzogImJ1dHRvbi5GbG9hdGluZ0FjdGlvbkJ1dHRvbiR7aWQrK30iLAogICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoImxhcmdlIiksCiAgICAgICksCiAgICAgIEZsb2F0aW5nQWN0aW9uQnV0dG9uJE1hdGUuZXh0ZW5kZWQoCiAgICAgICAgLy8gaXNFeHRlbmRlZDogZmFsc2UsCiAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICBsYWJlbDogVGV4dCRNYXRlKCdleHRlbmRlZCcpLAogICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy50aHVtYl91cCksCiAgICAgICAgaGVyb1RhZzogImJ1dHRvbi5GbG9hdGluZ0FjdGlvbkJ1dHRvbiR7aWQrK30iLAogICAgICApLAogICAgXSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMjIOWHoOS4queJueauiueahOezu+e7n0J1dHRvbgoK57un5om/5YWz57O777yaCi0gW1N0YXRlbGVzc1dpZGdldF0KICAtIFtfQWN0aW9uQnV0dG9uXQogICAgLSBbQmFja0J1dHRvbl0gQSBNYXRlcmlhbCBEZXNpZ24gYmFjayBpY29uIGJ1dHRvbgogICAgLSBbQ2xvc2VCdXR0b25dIEEgTWF0ZXJpYWwgRGVzaWduIGNsb3NlIGljb24gYnV0dG9uCiAgICAtIFtEcmF3ZXJCdXR0b25dIEEgTWF0ZXJpYWwgRGVzaWduIGRyYXdlciBpY29uIGJ1dHRvbgogICAgLSBbRW5kRHJhd2VyQnV0dG9uXSBBIE1hdGVyaWFsIERlc2lnbiBkcmF3ZXIgaWNvbiBidXR0b24KICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlQ29udGVudChSb3ckTWF0ZSgKICAgIGNoaWxkcmVuOiBbCiAgICAgIEJhY2tCdXR0b24kTWF0ZSgpLAogICAgICBDbG9zZUJ1dHRvbiRNYXRlKCksCiAgICAgIERyYXdlckJ1dHRvbiRNYXRlKCksCiAgICAgIEVuZERyYXdlckJ1dHRvbiRNYXRlKCksCiAgICBdLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwoKIyMjIFRvZ2dsZUJ1dHRvbnMKCuS4gOe7hOWPr+WkmumAie+9nOWNlemAieeahOaMiemSrue7hOOAggoKPiAqKvCfk6Pmj5DnpLoqKu+8muatpOe7hOS7tuWunueOsOS6jk1hdGVyaWFsIDLvvIznsbvkvLzkuo5NYXRlcmlhbCAz55qEW1NlZ21lbnRlZEJ1dHRvbl3jgILlj6/nlKhbU2VnbWVudGVkQnV0dG9uXeabv+aNouS5i+OAggogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50KE1hdGVTYW1wbGVDb250ZW50KFJvdyRNYXRlKAogICAgY2hpbGRyZW46IFsKICAgICAgVG9nZ2xlQnV0dG9ucyRNYXRlKAogICAgICAgIG9uUHJlc3NlZDogKF8pIHt9Li5zYW1wbGVDb2RlU3RyID0gIihfKXt9IiwKICAgICAgICBpc1NlbGVjdGVkOiBjb25zdCBbdHJ1ZSwgZmFsc2UsIHRydWVdLAogICAgICAgIGNoaWxkcmVuOiA8V2lkZ2V0PlsKICAgICAgICAgIEljb24kTWF0ZShJY29ucy5hY191bml0KSwKICAgICAgICAgIEljb24kTWF0ZShJY29ucy5jYWxsKSwKICAgICAgICAgIEljb24kTWF0ZShJY29ucy5jYWtlKSwKICAgICAgICBdLAogICAgICApLAogICAgXSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMjIFNlZ21lbnRlZEJ1dHRvbgoK5LiA57uE5Y+v5aSa6YCJ772c5Y2V6YCJ55qE5oyJ6ZKu57uE44CCCgo+ICoq8J+To+aPkOekuioq77ya5q2k57uE5Lu25a6e546w5LqOTWF0ZXJpYWwgM++8jOexu+S8vOS6jk1hdGVyaWFsIDLnmoRbVG9nZ2xlQnV0dG9uc13vvIzlj6/nlKjmm7/mjaLmjolbVG9nZ2xlQnV0dG9uc13jgIIKCjxodHRwczovL20zLm1hdGVyaWFsLmlvL2NvbXBvbmVudHMvc2VnbWVudGVkLWJ1dHRvbnM+CiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQoTWF0ZVNhbXBsZUNvbnRlbnQoUm93JE1hdGUoCiAgICBjaGlsZHJlbjogWwogICAgICBTZWdtZW50ZWRCdXR0b24kTWF0ZTxTdHJpbmc+KAogICAgICAgIG11bHRpU2VsZWN0aW9uRW5hYmxlZDogdHJ1ZSwKICAgICAgICBzZWdtZW50czogPEJ1dHRvblNlZ21lbnQ8U3RyaW5nPj5bCiAgICAgICAgICBCdXR0b25TZWdtZW50JE1hdGU8U3RyaW5nPigKICAgICAgICAgICAgICB2YWx1ZTogIkRheSIsCiAgICAgICAgICAgICAgbGFiZWw6IFRleHQkTWF0ZSgnRGF5JyksCiAgICAgICAgICAgICAgaWNvbjogSWNvbiRNYXRlKEljb25zLmNhbGVuZGFyX3ZpZXdfZGF5KSksCiAgICAgICAgICBCdXR0b25TZWdtZW50JE1hdGU8U3RyaW5nPigKICAgICAgICAgICAgICB2YWx1ZTogIldlZWsiLAogICAgICAgICAgICAgIGxhYmVsOiBUZXh0JE1hdGUoJ1dlZWsnKSwKICAgICAgICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMuY2FsZW5kYXJfdmlld193ZWVrKSksCiAgICAgICAgICBCdXR0b25TZWdtZW50JE1hdGU8U3RyaW5nPigKICAgICAgICAgICAgICB2YWx1ZTogIk1vbnRoIiwKICAgICAgICAgICAgICBsYWJlbDogVGV4dCRNYXRlKCdNb250aCcpLAogICAgICAgICAgICAgIGljb246IEljb24kTWF0ZShJY29ucy5jYWxlbmRhcl92aWV3X21vbnRoKSksCiAgICAgICAgICBCdXR0b25TZWdtZW50JE1hdGU8U3RyaW5nPigKICAgICAgICAgICAgICB2YWx1ZTogIlllYXIiLAogICAgICAgICAgICAgIGxhYmVsOiBUZXh0JE1hdGUoJ1llYXInKSwKICAgICAgICAgICAgICBpY29uOiBJY29uJE1hdGUoSWNvbnMuY2FsZW5kYXJfdG9kYXkpKSwKICAgICAgICBdLAogICAgICAgIHNlbGVjdGVkOiA8U3RyaW5nPnsiTW9udGgifSwKICAgICAgICBvblNlbGVjdGlvbkNoYW5nZWQ6IChfKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoXyl7fSIsCiAgICAgICksCiAgICBdLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyDnm7jlhbPnu4Tku7YKCiMjIyBHZXN0dXJlRGV0ZWN0b3IKCuS6i+S7tuS+pua1i+WZqO+8jGZsdXR0ZXLnmoTlpZfot6/mmK/nu4Tku7bnu4TlkIjvvIzlpoLmnpzlpZfkuIpHZXN0dXJlRGV0ZWN0b3LvvIzlhbbku5bnu4Tku7bkuZ/lj6/ku6XlpITnkIbngrnlh7vkuovku7bvvIzmqKHku7/mjInpkq7ooYzkuLrjgIIKCmBgYGZsdXR0ZXIKR2VzdHVyZURldGVjdG9yKAogIG9uVGFwOiAoKSB7Lyrngrnlh7vkuovku7YqL30pLAogIGNoaWxkOiBUZXh0KCLmlofmnKzlj5jmjInpkq4iKSwKKQpgYGAKICAnJycpOwoKICAvLyB0b2RvIOWinuWKoEdlc3R1cmVEZXRlY3RvcuiMg+S+iwogIC8vIHByaW50LnNhbXBsZU1hdGUoR2VzdHVyZURldGVjdG9yJE1hdGUoCiAgLy8gICAvLyB0b2RvIGRlZmF1bHQgdmFsdWXvvJrov5nnp43lj5jph4/lnovnmoTmmK/kuI3mmK/lj6/ku6XlvITkuIDkuIsgIGtEZWZhdWx0VHJhY2twYWRTY3JvbGxUb1NjYWxlRmFjdG9yCiAgLy8gICB0cmFja3BhZFNjcm9sbFRvU2NhbGVGYWN0b3I6IGtEZWZhdWx0VHJhY2twYWRTY3JvbGxUb1NjYWxlRmFjdG9yLAogIC8vICAgY2hpbGQ6IGNvbnN0IFRleHQoIuaWh+acrOWPmOaMiemSriIpLAogIC8vICAgb25UYXA6ICgpIHsvKip0b2RvIFVJIGxvZ++8jOaYvuekuuWIsOaOp+WItuWPsOS+v+S6juS4gOiIrOaAp+eahOS6i+S7tuWxleekuioqL30sCiAgLy8gKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMjIEluayrnu4Tku7YKCuWPr+iiq+eUqOadpeaooeS7v0J1dHRvbuOAggoKSW5rV2VsbC9JbmtSZXNwb25zZSA9IEdlc3R1cmVEZXRlY3RvciArIE1hdGVyaWFs6aOO5qC855qE5Yqo5oCB5pWI5p6cIOOAggoK57un5om/5YWz57O777yaCi0gU3RhdGVsZXNzV2lkZ2V0CiAgLSBJbmtSZXNwb25zZQogICAgLSBJbmtXZWxsCgrmgqjlnKjkuIvpnaLkuInnp43kuI3lkIznmoTmlofmnKzkuIrngrnngrnnnIvljLrliKvvvJoKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlQ29udGVudChDb2x1bW4kTWF0ZSgKICAgIGNoaWxkcmVuOiBbCiAgICAgIFRleHQkTWF0ZSgiMS7mma7pgJpUZXh0IiksCiAgICAgIElua1dlbGwkTWF0ZSgKICAgICAgICBvblRhcDogKCkge30uLnNhbXBsZUNvZGVTdHIgPSAiKCl7fSIsCiAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgiMi7oo7nkuoblsYJJbmtXZWxs55qEVGV4dCIpLAogICAgICApLAogICAgICBJbmtSZXNwb25zZSRNYXRlKAogICAgICAgIG9uVGFwOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCIzLuijueS6huWxgklua1Jlc3BvbnNl55qEVGV4dCIpLAogICAgICApCiAgICBdLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyMgQnV0dG9uQmFyCgrmjInpkq7nmoTluIPlsYDlrrnlmajvvIzlj6/ku6XmjInlhoXlrrnnmoTlrp7pmYXlrr3luqblnKjooYzmiJbliJfkuYvpl7TosIPmlbTvvIzmgqjmiorkuIvpnaLojIPkvovkuK3niLblrrnlmahDb250YWluZXIud2lkdGjosIPlsI/kupvnnIvnnIvvvJoKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlQ29udGVudChDb250YWluZXIkTWF0ZSgKICAgIHdpZHRoOiA2MDAsCiAgICBjb2xvcjogQ29sb3JzLmxpbWUuc2hhZGU1MCwKICAgIGNoaWxkOiBCdXR0b25CYXIkTWF0ZSgKICAgICAgY2hpbGRyZW46IFsKICAgICAgICBFbGV2YXRlZEJ1dHRvbiRNYXRlKAogICAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCJFbGV2YXRlZEJ1dHRvbjIiKSksCiAgICAgICAgT3V0bGluZWRCdXR0b24kTWF0ZSgKICAgICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgnT3V0bGluZWRCdXR0b24nKSksCiAgICAgICAgQ2hlY2tib3hNZW51QnV0dG9uJE1hdGUoCiAgICAgICAgICAgIHZhbHVlOiB0cnVlLAogICAgICAgICAgICBvbkNoYW5nZWQ6IChfKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoXyl7fSIsCiAgICAgICAgICAgIGNoaWxkOiBUZXh0JE1hdGUoJ0NoZWNrYm94TWVudUJ1dHRvbicpKSwKICAgICAgXSwKICAgICksCiAgKSkpOwp9Cg=="
    );
