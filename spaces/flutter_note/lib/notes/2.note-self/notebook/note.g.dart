// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 475,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # Notebook)
        (
          cellType: 'body',
          offset: 475,
          end: 624,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("hello flutter-note , i , print("today is ${DateTime.now)
        (
          cellType: 'body',
          offset: 702,
          end: 792,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' notebook的方)
        (
          cellType: 'body',
          offset: 870,
          end: 1057,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(ToggleButtons(isSelected)
        (
          cellType: 'body',
          offset: 1135,
          end: 1313,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 或者，发现[Time)
        (
          cellType: 'body',
          offset: 1391,
          end: 1533,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (ValueNotifier<int> times = Val, int maxTimes = 600;, var random = Random(1);, Timer.periodic(const Duration(, print(ListenableBuilder(listen)
        (
          cellType: 'body',
          offset: 1611,
          end: 2338,
          statementCount: 5,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" notebook模式的)
        (
          cellType: 'body',
          offset: 2416,
          end: 2796,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("hello");, print(1);, print(true);, print(["a", "b", "c"]);)
        (
          cellType: 'body',
          offset: 2874,
          end: 2949,
          statementCount: 4,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### Markdow)
        (
          cellType: 'body',
          offset: 3027,
          end: 3130,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown("""hello markdo)
        (
          cellType: 'body',
          offset: 3208,
          end: 3254,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### WidgetC)
        (
          cellType: 'body',
          offset: 3332,
          end: 3382,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(Container(width: 100, he)
        (
          cellType: 'body',
          offset: 3460,
          end: 3529,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### SampleC)
        (
          cellType: 'body',
          offset: 3607,
          end: 3850,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai, print(Container$Mate(width: 10)
        (
          cellType: 'body',
          offset: 3928,
          end: 4155,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 事件回调的问题 )
        (
          cellType: 'body',
          offset: 4233,
          end: 4331,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ({int count = 0; print(Elevated)
        (
          cellType: 'body',
          offset: 4409,
          end: 4623,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 问题原因：onPres)
        (
          cellType: 'body',
          offset: 4701,
          end: 4979,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int i = 0;, print(StatefulBuilder(builder:)
        (
          cellType: 'body',
          offset: 5057,
          end: 5266,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### 处理方案2  )
        (
          cellType: 'body',
          offset: 5344,
          end: 5425,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ((NoteCell print) {int i = 0; p)
        (
          cellType: 'body',
          offset: 5503,
          end: 5726,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 或用runInCurr)
        (
          cellType: 'body',
          offset: 5804,
          end: 5893,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.runInCurrentCell((NoteCe)
        (
          cellType: 'body',
          offset: 5971,
          end: 6195,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## cell的元信息)
        (
          cellType: 'body',
          offset: 6273,
          end: 6316,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("源文件中当前cell的index：${prin, print("源文件中当前cell的起始字符位置：${pri, print("源文件中当前cell的结束字符位置：${pri, print("源文件中当前cell的代码块：${print.)
        (
          cellType: 'body',
          offset: 6394,
          end: 6670,
          statementCount: 4,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 结束  上面回调)
        (
          cellType: 'body',
          offset: 6748,
          end: 6820,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 6820,
          end: 6822,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
