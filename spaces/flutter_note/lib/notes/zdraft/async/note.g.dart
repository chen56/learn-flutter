// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 249,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'body',
          offset: 249,
          end: 252,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # 异步  很好的异)
        (
          cellType: 'body',
          offset: 330,
          end: 600,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ({Future<String> bomb() async {)
        (
          cellType: 'body',
          offset: 678,
          end: 1455,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Isalted)
        (
          cellType: 'body',
          offset: 1533,
          end: 2014,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ({send123(sendPort) async {for )
        (
          cellType: 'body',
          offset: 2092,
          end: 2791,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 2791,
          end: 2793,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          "aW1wb3J0ICdkYXJ0Omlzb2xhdGUnOwoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTptYXRlL21hdGVfbm90ZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm5vdGUvbm90ZV9wYWdlLmRhcnQnOwoKRmx1dHRlck5vdGVDb25mIHBhZ2UgPSBGbHV0dGVyTm90ZUNvbmYoCiAgYnVpbGRlcjogYnVpbGQsCik7CgpidWlsZChCdWlsZENvbnRleHQgY29udGV4dCwgUGVuIHByaW50KSBhc3luYyB7CiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIOW8guatpQoK5b6I5aW955qE5byC5q2l6KeG6aKR77yaCltEYXJ0IGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZzogSXNvbGF0ZXMgYW5kIGV2ZW50IGxvb3BzXShodHRwczovL21lZGl1bS5jb20vZGFydGxhbmcvZGFydC1hc3luY2hyb25vdXMtcHJvZ3JhbW1pbmctaXNvbGF0ZXMtYW5kLWV2ZW50LWxvb3BzLWJmZmMzZTI5NmE2YSkK5paH5qGj5a+55bqU55qE6KeG6aKR77yaPGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dmxfQWFDZ3VkY1k+CgojIyBGdXR1cmUKCiAgJycnKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgewogICAgRnV0dXJlPFN0cmluZz4gYm9tYigpIGFzeW5jIHsKICAgICAgcHJpbnQoInMiKTsKICAgICAgcmV0dXJuIEZ1dHVyZS5kZWxheWVkKER1cmF0aW9uKHNlY29uZHM6IDMpLCAoKSA9PiAiYm9uZyEhISIpOwogICAgfQoKICAgIC8vIHByaW50LnJ1bkluQ3VycmVudENlbGwoKHByaW50KSB7CiAgICAvLyAgIGRlYnVnUHJpbnQoInBwcCAke3ByaW50fSIpOwogICAgLy8gICBkZWJ1Z1ByaW50KCJwcHAtLS0gJHtwcmludC5wZW4uY2VsbHN9Iik7CiAgICAvLwogICAgLy8gICBwcmludChGaWxsZWRCdXR0b24ob25QcmVzc2VkOiAoKSB7fSwgY2hpbGQ6IGNvbnN0IFRleHQoIuaMieWQjjPnp5LlkI7niIbngrgiKSkpOwogICAgLy8gfSk7CgogICAgLy8KICAgIHByaW50LnJ1bkluQ3VycmVudENlbGwoKHByaW50KSB7CiAgICAgIG9uUHJlc3NlZCgpIGFzeW5jIHsKICAgICAgICB2YXIgbXNnID0gYXdhaXQgYm9tYigpOwogICAgICAgIC8vIHRvZG8g6L+Z5LiqcHJpbnTlnKggYXN5bmPml7bvvIzkvJrmiZPliLDmnIDlkI7kuIDkuKpjZWxsCiAgICAgICAgcHJpbnQobXNnKTsKICAgICAgICAvLyBkZWJ1Z1ByaW50KCJwcHAyICR7cHJpbnQuaGFzaENvZGV9Iik7CiAgICAgICAgLy8gZGVidWdQcmludCgicHBwMi0tLSAke3ByaW50LnBlbi5jZWxsc30iKTsKICAgICAgfQoKICAgICAgcHJpbnQoRmlsbGVkQnV0dG9uKAogICAgICAgICAgb25QcmVzc2VkOiBvblByZXNzZWQuLnNhbXBsZUNvZGVTdHIgPSAib25QcmVzc2VkIiwKICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCLmjInlkI4z56eS5ZCO54iG54K4IikpKTsKICAgIH0pOwogIH0KCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyBJc2FsdGVkCgp3ZWIg5qih5byP5LiN5pSv5oyBIElzb2xhdGVk77yM5aaC5p6c6L+Q6KGM5Zyod2Vi5qih5byP5LiL77yM5q2k6IyD5L6L5bCG5oql6ZSZCgpFcnJvcjogVW5zdXBwb3J0ZWQgb3BlcmF0aW9uOiBkYXJ0Omlzb2xhdGUgaXMgbm90IHN1cHBvcnRlZCBvbiBkYXJ0NHdlYgoKMjAxOOW5tOWJjWRhcnQx5pSv5oyBd2Vi54mISXNvbGF0ZWTvvIzkvYZkYXJ0MuWQjuiiq+WOu+aOieS6hu+8jOivpue7huS/oeaBr+WPguiAg++8mgpbW2RhcnQtYW5ub3VuY2VdIERhcnQyIEJyZWFraW5nIENoYW5nZTogUmVtb3Zpbmcgd2ViIHN1cHBvcnQgZm9yIGRhcnQ6bWlycm9ycyBhbmQgZGFydDppc29sYXRlIDIwMTjlubQy5pyIMjTml6UgXShodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2EvZGFydGxhbmcub3JnL2cvbWlzYy9jL2RqZkZNTkNXbWtFL20vRjdXRThhMEpBd0FKP3BsaT0xKQo8aHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9hL2RhcnRsYW5nLm9yZy9nL21pc2MvYy9kamZGTU5DV21rRS9tL0Y3V0U4YTBKQXdBSj9wbGk9MT4KICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICB7CiAgICBzZW5kMTIzKHNlbmRQb3J0KSBhc3luYyB7CiAgICAgIGZvciAodmFyIG1lc3NhZ2UgaW4gWyIxIiwgIjIiLCAiMyJdKSB7CiAgICAgICAgKHNlbmRQb3J0IGFzIFNlbmRQb3J0KS5zZW5kKG1lc3NhZ2UpOwogICAgICAgIGF3YWl0IEZ1dHVyZS5kZWxheWVkKGNvbnN0IER1cmF0aW9uKHNlY29uZHM6IDEpKTsKICAgICAgfQogICAgfQoKICAgIHByaW50LnJ1bkluQ3VycmVudENlbGwoKHByaW50KSB7CiAgICAgIG9uUHJlc3NlZCgpIGFzeW5jIHsKICAgICAgICB0cnkgewogICAgICAgICAgUmVjZWl2ZVBvcnQgcmVjZWl2ZVBvcnQgPSBSZWNlaXZlUG9ydCgpOwogICAgICAgICAgSXNvbGF0ZS5zcGF3bihzZW5kMTIzLCByZWNlaXZlUG9ydC5zZW5kUG9ydCk7CgogICAgICAgICAgcmVjZWl2ZVBvcnQubGlzdGVuKChtZXNzYWdlKSB7CiAgICAgICAgICAgIHByaW50KCJyZWNlaXZlIDogJG1lc3NhZ2UiKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIHByaW50KCJlcnJvcjogJGUiKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHByaW50KEZpbGxlZEJ1dHRvbigKICAgICAgICAgIG9uUHJlc3NlZDogb25QcmVzc2VkLi5zYW1wbGVDb2RlU3RyID0gIm9uUHJlc3NlZCIsCiAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgi5byA5aeL77yM5q+P6ZqU5LiA56eS5Y+R6YCBMe+8jDLvvIwzIikpKTsKICAgIH0pOwogIH0KfQo="
    );
