// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 345,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' # Notebook)
        (
          cellType: 'body',
          offset: 345,
          end: 494,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("hello flutter-note , i , print("today is ${DateTime.now)
        (
          cellType: 'body',
          offset: 572,
          end: 662,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' notebook的方)
        (
          cellType: 'body',
          offset: 740,
          end: 927,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(ToggleButtons(isSelected)
        (
          cellType: 'body',
          offset: 1005,
          end: 1183,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 或者，发现[Time)
        (
          cellType: 'body',
          offset: 1261,
          end: 1403,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (ValueNotifier<int> times = Val, int maxTimes = 600;, var random = Random(1);, Timer.periodic(const Duration(, print(ListenableBuilder(listen)
        (
          cellType: 'body',
          offset: 1481,
          end: 2208,
          statementCount: 5,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" notebook模式的)
        (
          cellType: 'body',
          offset: 2286,
          end: 2666,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("hello");, print(1);, print(true);, print(["a", "b", "c"]);)
        (
          cellType: 'body',
          offset: 2744,
          end: 2819,
          statementCount: 4,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### Markdow)
        (
          cellType: 'body',
          offset: 2897,
          end: 3000,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown("""hello markdo)
        (
          cellType: 'body',
          offset: 3078,
          end: 3124,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### WidgetC)
        (
          cellType: 'body',
          offset: 3202,
          end: 3252,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(Container(width: 100, he)
        (
          cellType: 'body',
          offset: 3330,
          end: 3399,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### SampleC)
        (
          cellType: 'body',
          offset: 3477,
          end: 3720,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai, print(Container$Mate(width: 10)
        (
          cellType: 'body',
          offset: 3798,
          end: 4025,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 事件回调的问题 )
        (
          cellType: 'body',
          offset: 4103,
          end: 4201,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ({int count = 0; print(Elevated)
        (
          cellType: 'body',
          offset: 4279,
          end: 4493,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 问题原因：onPres)
        (
          cellType: 'body',
          offset: 4571,
          end: 4847,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (int i = 0;, print(StatefulBuilder(builder:)
        (
          cellType: 'body',
          offset: 4925,
          end: 5134,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ### 处理方案2  )
        (
          cellType: 'body',
          offset: 5212,
          end: 5293,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ((NoteCell print) {int i = 0; p)
        (
          cellType: 'body',
          offset: 5371,
          end: 5594,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 或用runInCurr)
        (
          cellType: 'body',
          offset: 5672,
          end: 5761,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.runInCurrentCell((NoteCe)
        (
          cellType: 'body',
          offset: 5839,
          end: 6063,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## cell的元信息)
        (
          cellType: 'body',
          offset: 6141,
          end: 6184,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print("源文件中当前cell的index：${prin, print("源文件中当前cell的起始字符位置：${pri, print("源文件中当前cell的结束字符位置：${pri, print("源文件中当前cell的代码块：${print.)
        (
          cellType: 'body',
          offset: 6262,
          end: 6538,
          statementCount: 4,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" ## 结束  上面回调)
        (
          cellType: 'body',
          offset: 6616,
          end: 6688,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 6688,
          end: 6690,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
