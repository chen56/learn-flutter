// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 251,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'body',
          offset: 251,
          end: 254,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(''' # 参数化范例  ##)
        (
          cellType: 'body',
          offset: 332,
          end: 802,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 880,
          end: 990,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(''' ### String参)
        (
          cellType: 'body',
          offset: 1068,
          end: 1114,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Text$M)
        (
          cellType: 'body',
          offset: 1192,
          end: 1254,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(''' ### Color参数)
        (
          cellType: 'body',
          offset: 1332,
          end: 1396,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 1474,
          end: 1801,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(''' ### bool参数 )
        (
          cellType: 'body',
          offset: 1879,
          end: 1923,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 2001,
          end: 2186,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### 枚举参数  )
        (
          cellType: 'body',
          offset: 2264,
          end: 2330,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 2408,
          end: 2733,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## 其他特性  #)
        (
          cellType: 'body',
          offset: 2811,
          end: 2988,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (showAbout() {showAboutDialog(c, print(MateSampleContent(Elevat)
        (
          cellType: 'body',
          offset: 3066,
          end: 3485,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ### 用循环一次性)
        (
          cellType: 'body',
          offset: 3563,
          end: 3614,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (for (var mainAxisAlignment in )
        (
          cellType: 'body',
          offset: 3692,
          end: 4177,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 4177,
          end: 4179,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTptYXRlL21hdGVfbm90ZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm5vdGUvbm90ZV9wYWdlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6bWF0ZV9mbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Y29kZV9idWlsZGVyL2NvZGVfYnVpbGRlci5kYXJ0JzsKCmJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0LCBQZW4gcHJpbnQpIHsKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bignJycKIyDlj4LmlbDljJbojIPkvosKCiMjIOWPr+iwg+WPguiMg+S+iwoK5a2m5LmgZmx1dHRlci9kYXJ06L+Z57G7VUnmioDmnK/vvIzlpoLmnpzmnInlpb3nmoTojIPkvovorrLop6PlsZXnpLrvvIzkvJrmnoHlpKfliqDpgJ/lrabkuaDjgIIKCj4g8J+UlCAg546L6YGT6IyD5L6L5LiJ6KaB57Sg77yM5ZKM5LiA6aG55b+F5aSH5p2h5Lu277ya6KaB5b+r5LiN6KaB6b6f44CCCj4gLSDojIPkvovlj6/lsZXnpLrvvIzorrLop6NVSeaKgOacr++8jOS4jeWxleekuuWHuuadpe+8jOi0tOS4quWbvuaIluWNiuWkqeaYvuekuuS4jeWHuuadpeaApeatu+S6ugo+IC0g5Y+C5pWw5Y+v6LCD5pW077yM6IyD5L6Ld2lkdGg6MjAwLOaIkeaUuTIwMDDkvJrkuI3kvJrmiqXplJkKPiAtIOS7o+eggeWPr+WQjOatpe+8jOiwg+WPguWQjueahOS7o+eggeimgeiDveWKqOaAgeWQjOatpQoK5a6Y572R5Y+K5b6I5aSaZ2l0aHVi6IyD5L6L5bqT5bm25LiN5YW35aSH5Lul5LiK6KaB57Sg77yM6KaB5LmI5LiA5aCG6IyD5L6L5Luj56CB5peg6K6y6Kej77yM5peg5bGV56S677yM6KaB5LmI5LiA5aCG5Y+v5bGV56S677yM5Y2K5aSp5om+5LiN5Yiw5Luj56CB77yMCui/mOacieWumOe9keWkp+mHj0RhcnRQYWTojIPkvovvvIzlroznvo7kvZPnjrDkuoZkYXJ057yW6K+R6YCf5bqm5oWi6L+Z56eN6K+t6KiA54m554K577yM6b6f6YCf5LiA5qC377yM5p+l6ZiFVUnmlofmoaPvvIzlsLHmmK/mg7Plv6vpgJ8K57q16KeI5YW25aSW6KeC5b2i54q277yM57uT5p6c562J5Y2K5aSp77yM6ZW/5ZWl5qC36YO95Ye65LiN5p2l77yM5oCl5q275Lq677yM5Zyo6ICQ5b+D5Lin5aSx5YmN55qE5Yqg6L295oiQ5Yqf546H5Li6MTMlIG8o5LiA77i/5LiAKylvCgrmnKxub3Rl5Lit55qEVUnojIPkvovvvIzmlK/mjIHlj4LmlbDosIPoioLvvIzlj6/lv6vpgJ/lsZXnpLrlrp7pqozjgIIKCiMjIyBudW3lj4LmlbAKCuivt+aCqOeCueWHu+W8gOS4i+mdouiMg+S+i+Wwj+eureWktO+8jOS/ruaUuUNvbnRhaW5lci5oZWlnaHTvvIzop4Llr5/ojIPkvovlsZXnpLrlj4rku6PnoIHnmoTlj5jljJbvvJoKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlQ29udGVudChDb250YWluZXIkTWF0ZSgKICAgIGhlaWdodDogMTAwLAogICAgY2hpbGQ6IFRleHQkTWF0ZSgi6K+35L+u5pS5aGVpZ2h0LOiwg+iKgumrmOW6piIpLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24oJycnCiMjIyBTdHJpbmflj4LmlbAKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludChNYXRlU2FtcGxlQ29udGVudChUZXh0JE1hdGUoIuaIkeaYr1RleHQuZGF0YSzkv67mlLnmiJEiKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bignJycKIyMjIENvbG9y5Y+C5pWwCgpUT0RPIOaaguaXtuWPquiDveaYvuekuu+8jOi/mOS4jeiDvee8lui+kQogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50KE1hdGVTYW1wbGVDb250ZW50KENvbnRhaW5lciRNYXRlKAogICAgd2lkdGg6IDIwMCwKICAgIGhlaWdodDogMTAwLAogICAgY29sb3I6IENvbG9ycy5ncmVlbi5zaGFkZTQwMCwKICAgIGNsaXBCZWhhdmlvcjogQ2xpcC5ub25lLAogICAgY2hpbGQ6IENlbnRlciRNYXRlKAogICAgICBjaGlsZDogQ29udGFpbmVyJE1hdGUoCiAgICAgICAgd2lkdGg6IDEwMCwKICAgICAgICBoZWlnaHQ6IDUwLAogICAgICAgIGNvbG9yOiBDb2xvcnMucmVkLnNoYWRlNDAwLAogICAgICAgIGNsaXBCZWhhdmlvcjogQ2xpcC5ub25lLAogICAgICApLAogICAgKSwKICApKSk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKCcnJwojIyMgYm9vbOWPguaVsAogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50KE1hdGVTYW1wbGVDb250ZW50KENvbnRhaW5lciRNYXRlKAogICAgd2lkdGg6IDEwMCwKICAgIC8vIGhlaWdodDogMTAwLAogICAgY29sb3I6IENvbG9ycy5ibHVlLnNoYWRlMTAwLAogICAgY2hpbGQ6IFRleHQkTWF0ZSgi5L+u5pS5VGV4dC5zb2Z0V3JhcDog6Ieq5Yqo5o2i6KGMIiwgc29mdFdyYXA6IHRydWUpLAogICkpKTsKCiAgcHJpbnQuJF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fKCk7CiAgcHJpbnQubWFya2Rvd24ocicnJwojIyMg5p6a5Li+5Y+C5pWwCgrkv67mlLnkuIttYWluQXhpc0FsaWdubWVudO+8mgogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50KE1hdGVTYW1wbGVDb250ZW50KFJvdyRNYXRlKAogICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LnNwYWNlQXJvdW5kLAogICAgY2hpbGRyZW46IFsKICAgICAgQ29udGFpbmVyJE1hdGUoCiAgICAgICAgd2lkdGg6IDEwMCwKICAgICAgICBoZWlnaHQ6IDEwMCwKICAgICAgICBjb2xvcjogQ29sb3JzLmJsdWUsCiAgICAgICksCiAgICAgIENvbnRhaW5lciRNYXRlKAogICAgICAgIHdpZHRoOiAxMDAsCiAgICAgICAgaGVpZ2h0OiAxMDAsCiAgICAgICAgY29sb3I6IENvbG9ycy5ncmVlbiwKICAgICAgKSwKICAgIF0sCiAgKSkpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBwcmludC5tYXJrZG93bihyJycnCiMjIOWFtuS7lueJueaApwoKIyMjIOaMiWNlbGzmqKHniYjnlJ/miJDojIPkvovku6PnoIEKCuaIkeS7rOeahOiMg+S+i+S7o+eggeeUn+aIkOacuuWItuiZveeEtueci+i1t+adpei/mOS4jemUme+8jOS9huacieS4quWwj+mXrumimO+8jOWHveaVsOS7o+eggei+g+mavuWkhOeQhu+8jOebruWJjeeahOWBmuazleaYr++8muaPkOWPlgpOb3RlYm9vayDlvZPliY1jZWxs55qE5Luj56CB5L2c5Li65qih54mI77yM6YWN5ZCI5Luj56CB55Sf5oiQ5LiA6LW377yM5Y+v5Lul6Kej5Yaz5q2k55aR6Zq+77yM5oKo5Y+v5Lul6KeC5a+f5LiLY2VsbOacrOi6q+eahOS7o+eggQrlkozojIPkvovnlJ/miJDnmoTku6PnoIHnmoTlvILlkIzvvJoKICAnJycpOwoKICBwcmludC4kX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18oKTsKICBzaG93QWJvdXQoKSB7CiAgICBzaG93QWJvdXREaWFsb2coCiAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgIGFwcGxpY2F0aW9uTmFtZTogJ01lbnVCYXIgU2FtcGxlJywKICAgICAgYXBwbGljYXRpb25WZXJzaW9uOiAnMS4wLjAnLAogICAgKTsKICB9CgogIC8vIOWMheWQq01hdGVTYW1wbGXosIPnlKjnmoTor63lj6XkvJrooqvojIPkvovku6PnoIHmk6bpmaQKICBwcmludCgKICAgIE1hdGVTYW1wbGVDb250ZW50KAogICAgICBFbGV2YXRlZEJ1dHRvbiRNYXRlKAogICAgICAgICAgb25QcmVzc2VkOiBzaG93QWJvdXQuLnNhbXBsZUNvZGUgPSByZWZlcigic2hvd0Fib3V0IiksCiAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCJCdXR0b24xIikpLAogICAgICBzYW1wbGVUZW1wbGF0ZTogU2FtcGxlVGVtcGxhdGUuaW5jbHVkZUNsZWFuQ2VsbENvZGUsCiAgICApLAogICk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIHByaW50Lm1hcmtkb3duKHInJycKIyMjIOeUqOW+queOr+S4gOasoeaAp+aehOmAoOS4gOe7hOiMg+S+iwogICcnJyk7CgogIHByaW50LiRfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXygpOwogIGZvciAodmFyIG1haW5BeGlzQWxpZ25tZW50IGluIE1haW5BeGlzQWxpZ25tZW50LnZhbHVlcykgewogICAgcHJpbnQoTWF0ZVNhbXBsZUNvbnRlbnQoUm93JE1hdGUoCiAgICAgIG1haW5BeGlzQWxpZ25tZW50OiBtYWluQXhpc0FsaWdubWVudCwKICAgICAgY2hpbGRyZW46IFsKICAgICAgICBFbGV2YXRlZEJ1dHRvbiRNYXRlKAogICAgICAgICAgICBvblByZXNzZWQ6ICgpIHt9Li5zYW1wbGVDb2RlU3RyID0gIigpe30iLAogICAgICAgICAgICBjaGlsZDogVGV4dCRNYXRlKCIke21haW5BeGlzQWxpZ25tZW50Lm5hbWV9OkJ1dHRvbjEiKSksCiAgICAgICAgRWxldmF0ZWRCdXR0b24kTWF0ZSgKICAgICAgICAgICAgb25QcmVzc2VkOiAoKSB7fS4uc2FtcGxlQ29kZVN0ciA9ICIoKXt9IiwKICAgICAgICAgICAgY2hpbGQ6IFRleHQkTWF0ZSgiJHttYWluQXhpc0FsaWdubWVudC5uYW1lfTpCdXR0b24yIikpLAogICAgICBdLAogICAgKSkpOwogIH0KfQo="
    );
