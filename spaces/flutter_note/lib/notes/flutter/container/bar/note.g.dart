// /// Generated by gen_maters.dart, please don't edit!

noteInfo() => (
      cells: [
        /// ()
        (
          cellType: 'header',
          offset: 0,
          end: 392,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## AppBar )
        (
          cellType: 'body',
          offset: 392,
          end: 519,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(AppBar)
        (
          cellType: 'body',
          offset: 597,
          end: 1454,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## BottomA)
        (
          cellType: 'body',
          offset: 1532,
          end: 1689,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Bottom)
        (
          cellType: 'body',
          offset: 1767,
          end: 2441,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r'''    ## ~~Bo)
        (
          cellType: 'body',
          offset: 2519,
          end: 2876,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Column)
        (
          cellType: 'body',
          offset: 2954,
          end: 3530,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' Navigation)
        (
          cellType: 'body',
          offset: 3608,
          end: 3725,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (var currentPageIndex = 0;, Widget buildNavigationBar(cont, print(MateSampleContent(Statef)
        (
          cellType: 'body',
          offset: 3803,
          end: 4749,
          statementCount: 3,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Navigat)
        (
          cellType: 'body',
          offset: 4827,
          end: 5166,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Row$Ma)
        (
          cellType: 'body',
          offset: 5244,
          end: 6554,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## TabBar )
        (
          cellType: 'body',
          offset: 6632,
          end: 7130,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7208,
          end: 7759,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' 再来看看加了TabV)
        (
          cellType: 'body',
          offset: 7837,
          end: 7902,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Defaul)
        (
          cellType: 'body',
          offset: 7980,
          end: 9011,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(""" 上面用法和[Navig)
        (
          cellType: 'body',
          offset: 9089,
          end: 9360,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (onPressed() {ScaffoldMessenger, print(MateSampleContent(SizedB)
        (
          cellType: 'body',
          offset: 9438,
          end: 10225,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## ButtonB)
        (
          cellType: 'body',
          offset: 10303,
          end: 10634,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 10712,
          end: 11151,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Overflo)
        (
          cellType: 'body',
          offset: 11229,
          end: 11436,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print(MateSampleContent(Contai)
        (
          cellType: 'body',
          offset: 11514,
          end: 12324,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (print.markdown(r''' ## Platfor)
        (
          cellType: 'body',
          offset: 12402,
          end: 12937,
          statementCount: 1,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// (click() {showAboutDialog(conte, print(MateSampleContent(MenuBa)
        (
          cellType: 'body',
          offset: 13015,
          end: 14138,
          statementCount: 2,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        ),

        /// ()
        (
          cellType: 'tail',
          offset: 14138,
          end: 14140,
          statementCount: 0,
          specialNodes: <({
            String nodeType,
            int end,
            int offset,
          })>[],
        )
      ],
      encodedCode:
          ""
    );
