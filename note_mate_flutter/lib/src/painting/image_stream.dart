// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/image_stream.dart';
import 'dart:ui';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:async';
import 'package:flutter/src/foundation/assertions.dart';

/// class ImageInfo
class ImageInfo$Mate extends ImageInfo with Mate<ImageInfo$Mate> {
  /// ImageInfo ImageInfo({required Image image, double scale = 1.0, String? debugLabel})
  ImageInfo$Mate({
    /// optionalParameters: {required Image image} , hasDefaultValue:false, defaultValueCode:null
    required Image image,

    /// optionalParameters: {double scale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double scale,

    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,
  }) : super(
          image: image,
          scale: scale,
          debugLabel: debugLabel,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ImageInfo$Mate(
        image: p.get('image').value,
        scale: p.get('scale').value,
        debugLabel: p.get('debugLabel').value,
      ),
    );
    mateParams.put('image', image);
    mateParams.put('scale', scale);
    mateParams.put('debugLabel', debugLabel);
  }
}

/// class ImageStreamListener
class ImageStreamListener$Mate extends ImageStreamListener with Mate<ImageStreamListener$Mate> {
  /// ImageStreamListener ImageStreamListener(void Function(ImageInfo, bool) onImage, {void Function(ImageChunkEvent)? onChunk, void Function(Object, StackTrace?)? onError})
  ImageStreamListener$Mate(
    /// requiredParameters: void Function(ImageInfo, bool) onImage
    ImageListener onImage, {
    /// optionalParameters: {void Function(ImageChunkEvent)? onChunk} , hasDefaultValue:false, defaultValueCode:null
    ImageChunkListener? onChunk,

    /// optionalParameters: {void Function(Object, StackTrace?)? onError} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorListener? onError,
  }) : super(
          onImage,
          onChunk: onChunk,
          onError: onError,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ImageStreamListener$Mate(
        p.get('onImage').value,
        onChunk: p.get('onChunk').value,
        onError: p.get('onError').value,
      ),
    );
    mateParams.put('onImage', onImage);
    mateParams.put('onChunk', onChunk);
    mateParams.put('onError', onError);
  }
}

/// class ImageChunkEvent with Diagnosticable
class ImageChunkEvent$Mate extends ImageChunkEvent with Mate<ImageChunkEvent$Mate> {
  /// ImageChunkEvent ImageChunkEvent({required int cumulativeBytesLoaded, required int? expectedTotalBytes})
  ImageChunkEvent$Mate({
    /// optionalParameters: {required int cumulativeBytesLoaded} , hasDefaultValue:false, defaultValueCode:null
    required int cumulativeBytesLoaded,

    /// optionalParameters: {required int? expectedTotalBytes} , hasDefaultValue:false, defaultValueCode:null
    required int? expectedTotalBytes,
  }) : super(
          cumulativeBytesLoaded: cumulativeBytesLoaded,
          expectedTotalBytes: expectedTotalBytes,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ImageChunkEvent$Mate(
        cumulativeBytesLoaded: p.get('cumulativeBytesLoaded').value,
        expectedTotalBytes: p.get('expectedTotalBytes').value,
      ),
    );
    mateParams.put('cumulativeBytesLoaded', cumulativeBytesLoaded);
    mateParams.put('expectedTotalBytes', expectedTotalBytes);
  }
}

/// class OneFrameImageStreamCompleter extends ImageStreamCompleter
class OneFrameImageStreamCompleter$Mate extends OneFrameImageStreamCompleter
    with Mate<OneFrameImageStreamCompleter$Mate> {
  /// OneFrameImageStreamCompleter OneFrameImageStreamCompleter(Future<ImageInfo> image, {Iterable<DiagnosticsNode> Function()? informationCollector})
  OneFrameImageStreamCompleter$Mate(
    /// requiredParameters: Future<ImageInfo> image
    Future<ImageInfo> image, {
    /// optionalParameters: {Iterable<DiagnosticsNode> Function()? informationCollector} , hasDefaultValue:false, defaultValueCode:null
    InformationCollector? informationCollector,
  }) : super(
          image,
          informationCollector: informationCollector,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => OneFrameImageStreamCompleter$Mate(
        p.get('image').value,
        informationCollector: p.get('informationCollector').value,
      ),
    );
    mateParams.put('image', image);
    mateParams.put('informationCollector', informationCollector);
  }
}

/// class MultiFrameImageStreamCompleter extends ImageStreamCompleter
class MultiFrameImageStreamCompleter$Mate extends MultiFrameImageStreamCompleter
    with Mate<MultiFrameImageStreamCompleter$Mate> {
  /// MultiFrameImageStreamCompleter MultiFrameImageStreamCompleter({required Future<Codec> codec, required double scale, String? debugLabel, Stream<ImageChunkEvent>? chunkEvents, Iterable<DiagnosticsNode> Function()? informationCollector})
  MultiFrameImageStreamCompleter$Mate({
    /// optionalParameters: {required Future<Codec> codec} , hasDefaultValue:false, defaultValueCode:null
    required Future<Codec> codec,

    /// optionalParameters: {required double scale} , hasDefaultValue:false, defaultValueCode:null
    required double scale,

    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,

    /// optionalParameters: {Stream<ImageChunkEvent>? chunkEvents} , hasDefaultValue:false, defaultValueCode:null
    Stream<ImageChunkEvent>? chunkEvents,

    /// optionalParameters: {Iterable<DiagnosticsNode> Function()? informationCollector} , hasDefaultValue:false, defaultValueCode:null
    InformationCollector? informationCollector,
  }) : super(
          codec: codec,
          scale: scale,
          debugLabel: debugLabel,
          chunkEvents: chunkEvents,
          informationCollector: informationCollector,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => MultiFrameImageStreamCompleter$Mate(
        codec: p.get('codec').value,
        scale: p.get('scale').value,
        debugLabel: p.get('debugLabel').value,
        chunkEvents: p.get('chunkEvents').value,
        informationCollector: p.get('informationCollector').value,
      ),
    );
    mateParams.put('codec', codec);
    mateParams.put('scale', scale);
    mateParams.put('debugLabel', debugLabel);
    mateParams.put('chunkEvents', chunkEvents);
    mateParams.put('informationCollector', informationCollector);
  }
}
