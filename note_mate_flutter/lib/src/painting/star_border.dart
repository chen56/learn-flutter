// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/star_border.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:core';
import 'package:note/mate.dart';

/// class StarBorder extends OutlinedBorder
class StarBorder$Mate extends StarBorder with Mate<StarBorder$Mate> {
  /// StarBorder StarBorder({BorderSide side = BorderSide.none, double points = 5, double innerRadiusRatio = 0.4, double pointRounding = 0, double valleyRounding = 0, double rotation = 0, double squash = 0})
  StarBorder$Mate({
    /// optionalParameters: {BorderSide side = BorderSide.none} , hasDefaultValue:true, defaultValueCode:BorderSide.none
    required BorderSide side,

    /// optionalParameters: {double points = 5} , hasDefaultValue:true, defaultValueCode:5
    required double points,

    /// optionalParameters: {double innerRadiusRatio = 0.4} , hasDefaultValue:true, defaultValueCode:0.4
    required double innerRadiusRatio,

    /// optionalParameters: {double pointRounding = 0} , hasDefaultValue:true, defaultValueCode:0
    required double pointRounding,

    /// optionalParameters: {double valleyRounding = 0} , hasDefaultValue:true, defaultValueCode:0
    required double valleyRounding,

    /// optionalParameters: {double rotation = 0} , hasDefaultValue:true, defaultValueCode:0
    required double rotation,

    /// optionalParameters: {double squash = 0} , hasDefaultValue:true, defaultValueCode:0
    required double squash,
  }) : super(
          side: side,
          points: points,
          innerRadiusRatio: innerRadiusRatio,
          pointRounding: pointRounding,
          valleyRounding: valleyRounding,
          rotation: rotation,
          squash: squash,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => StarBorder$Mate(
        side: p.get('side').value,
        points: p.get('points').value,
        innerRadiusRatio: p.get('innerRadiusRatio').value,
        pointRounding: p.get('pointRounding').value,
        valleyRounding: p.get('valleyRounding').value,
        rotation: p.get('rotation').value,
        squash: p.get('squash').value,
      ),
    );
    mateParams.put('side', side);
    mateParams.put('points', points);
    mateParams.put('innerRadiusRatio', innerRadiusRatio);
    mateParams.put('pointRounding', pointRounding);
    mateParams.put('valleyRounding', valleyRounding);
    mateParams.put('rotation', rotation);
    mateParams.put('squash', squash);
  }

  /// StarBorder StarBorder.polygon({BorderSide side = BorderSide.none, double sides = 5, double pointRounding = 0, double rotation = 0, double squash = 0})
  StarBorder$Mate.polygon({
    /// optionalParameters: {BorderSide side = BorderSide.none} , hasDefaultValue:true, defaultValueCode:BorderSide.none
    required BorderSide side,

    /// optionalParameters: {double sides = 5} , hasDefaultValue:true, defaultValueCode:5
    required double sides,

    /// optionalParameters: {double pointRounding = 0} , hasDefaultValue:true, defaultValueCode:0
    required double pointRounding,

    /// optionalParameters: {double rotation = 0} , hasDefaultValue:true, defaultValueCode:0
    required double rotation,

    /// optionalParameters: {double squash = 0} , hasDefaultValue:true, defaultValueCode:0
    required double squash,
  }) : super.polygon(
          side: side,
          sides: sides,
          pointRounding: pointRounding,
          rotation: rotation,
          squash: squash,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => StarBorder$Mate.polygon(
        side: p.get('side').value,
        sides: p.get('sides').value,
        pointRounding: p.get('pointRounding').value,
        rotation: p.get('rotation').value,
        squash: p.get('squash').value,
      ),
    );
    mateParams.put('side', side);
    mateParams.put('sides', sides);
    mateParams.put('pointRounding', pointRounding);
    mateParams.put('rotation', rotation);
    mateParams.put('squash', squash);
  }
}
