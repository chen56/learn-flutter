// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';

/// class EdgeInsets extends EdgeInsetsGeometry
class EdgeInsets$Mate extends EdgeInsets with Mate<EdgeInsets$Mate> {
  /// EdgeInsets EdgeInsets.fromLTRB(double left, double top, double right, double bottom)
  EdgeInsets$Mate.fromLTRB(
    /// requiredParameters: double left
    double left,

    /// requiredParameters: double top
    double top,

    /// requiredParameters: double right
    double right,

    /// requiredParameters: double bottom
    double bottom,
  ) : super.fromLTRB(
          left,
          top,
          right,
          bottom,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsets$Mate.fromLTRB(
        p.get('left').value,
        p.get('top').value,
        p.get('right').value,
        p.get('bottom').value,
      ),
    );
    mateParams.put('left', left);
    mateParams.put('top', top);
    mateParams.put('right', right);
    mateParams.put('bottom', bottom);
  }

  /// EdgeInsets EdgeInsets.all(double value)
  EdgeInsets$Mate.all(

      /// requiredParameters: double value
      double value)
      : super.all(value) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsets$Mate.all(p.get('value').value),
    );
    mateParams.put('value', value);
  }

  /// EdgeInsets EdgeInsets.only({double left = 0.0, double top = 0.0, double right = 0.0, double bottom = 0.0})
  EdgeInsets$Mate.only({
    /// optionalParameters: {double left = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double left,

    /// optionalParameters: {double top = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double top,

    /// optionalParameters: {double right = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double right,

    /// optionalParameters: {double bottom = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double bottom,
  }) : super.only(
          left: left,
          top: top,
          right: right,
          bottom: bottom,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsets$Mate.only(
        left: p.get('left').value,
        top: p.get('top').value,
        right: p.get('right').value,
        bottom: p.get('bottom').value,
      ),
    );
    mateParams.put('left', left);
    mateParams.put('top', top);
    mateParams.put('right', right);
    mateParams.put('bottom', bottom);
  }

  /// EdgeInsets EdgeInsets.symmetric({double vertical = 0.0, double horizontal = 0.0})
  EdgeInsets$Mate.symmetric({
    /// optionalParameters: {double vertical = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double vertical,

    /// optionalParameters: {double horizontal = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double horizontal,
  }) : super.symmetric(
          vertical: vertical,
          horizontal: horizontal,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsets$Mate.symmetric(
        vertical: p.get('vertical').value,
        horizontal: p.get('horizontal').value,
      ),
    );
    mateParams.put('vertical', vertical);
    mateParams.put('horizontal', horizontal);
  }

  /// EdgeInsets EdgeInsets.fromViewPadding(ViewPadding padding, double devicePixelRatio)
  EdgeInsets$Mate.fromViewPadding(
    /// requiredParameters: ViewPadding padding
    ViewPadding padding,

    /// requiredParameters: double devicePixelRatio
    double devicePixelRatio,
  ) : super.fromViewPadding(
          padding,
          devicePixelRatio,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsets$Mate.fromViewPadding(
        p.get('padding').value,
        p.get('devicePixelRatio').value,
      ),
    );
    mateParams.put('padding', padding);
    mateParams.put('devicePixelRatio', devicePixelRatio);
  }
}

/// class EdgeInsetsDirectional extends EdgeInsetsGeometry
class EdgeInsetsDirectional$Mate extends EdgeInsetsDirectional with Mate<EdgeInsetsDirectional$Mate> {
  /// EdgeInsetsDirectional EdgeInsetsDirectional.fromSTEB(double start, double top, double end, double bottom)
  EdgeInsetsDirectional$Mate.fromSTEB(
    /// requiredParameters: double start
    double start,

    /// requiredParameters: double top
    double top,

    /// requiredParameters: double end
    double end,

    /// requiredParameters: double bottom
    double bottom,
  ) : super.fromSTEB(
          start,
          top,
          end,
          bottom,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsetsDirectional$Mate.fromSTEB(
        p.get('start').value,
        p.get('top').value,
        p.get('end').value,
        p.get('bottom').value,
      ),
    );
    mateParams.put('start', start);
    mateParams.put('top', top);
    mateParams.put('end', end);
    mateParams.put('bottom', bottom);
  }

  /// EdgeInsetsDirectional EdgeInsetsDirectional.only({double start = 0.0, double top = 0.0, double end = 0.0, double bottom = 0.0})
  EdgeInsetsDirectional$Mate.only({
    /// optionalParameters: {double start = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double start,

    /// optionalParameters: {double top = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double top,

    /// optionalParameters: {double end = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double end,

    /// optionalParameters: {double bottom = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double bottom,
  }) : super.only(
          start: start,
          top: top,
          end: end,
          bottom: bottom,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsetsDirectional$Mate.only(
        start: p.get('start').value,
        top: p.get('top').value,
        end: p.get('end').value,
        bottom: p.get('bottom').value,
      ),
    );
    mateParams.put('start', start);
    mateParams.put('top', top);
    mateParams.put('end', end);
    mateParams.put('bottom', bottom);
  }

  /// EdgeInsetsDirectional EdgeInsetsDirectional.symmetric({double horizontal = 0.0, double vertical = 0.0})
  EdgeInsetsDirectional$Mate.symmetric({
    /// optionalParameters: {double horizontal = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double horizontal,

    /// optionalParameters: {double vertical = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double vertical,
  }) : super.symmetric(
          horizontal: horizontal,
          vertical: vertical,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsetsDirectional$Mate.symmetric(
        horizontal: p.get('horizontal').value,
        vertical: p.get('vertical').value,
      ),
    );
    mateParams.put('horizontal', horizontal);
    mateParams.put('vertical', vertical);
  }

  /// EdgeInsetsDirectional EdgeInsetsDirectional.all(double value)
  EdgeInsetsDirectional$Mate.all(

      /// requiredParameters: double value
      double value)
      : super.all(value) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EdgeInsetsDirectional$Mate.all(p.get('value').value),
    );
    mateParams.put('value', value);
  }
}
