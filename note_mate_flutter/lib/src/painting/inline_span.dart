// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/painting/inline_span.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/gestures/recognizer.dart';

/// class Accumulator
class Accumulator$Mate extends Accumulator with Mate<Accumulator$Mate> {
  /// Accumulator Accumulator([int _value = 0])
  Accumulator$Mate(

      /// requiredParameters: [int _value = 0]
      int _value)
      : super(_value) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Accumulator$Mate(p.get('_value').value),
    );
    mateParams.put('_value', init: _value);
  }
}

/// class InlineSpanSemanticsInformation
class InlineSpanSemanticsInformation$Mate extends InlineSpanSemanticsInformation
    with Mate<InlineSpanSemanticsInformation$Mate> {
  /// InlineSpanSemanticsInformation InlineSpanSemanticsInformation(String text, {bool isPlaceholder = false, String? semanticsLabel, List<StringAttribute> stringAttributes = const <ui.StringAttribute>[], GestureRecognizer? recognizer})
  InlineSpanSemanticsInformation$Mate(
    /// requiredParameters: String text
    String text, {
    /// optionalParameters: {bool isPlaceholder = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isPlaceholder,

    /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticsLabel,

    /// optionalParameters: {List<StringAttribute> stringAttributes = const <ui.StringAttribute>[]} , hasDefaultValue:true, defaultValueCode:const <ui.StringAttribute>[]
    required List<StringAttribute> stringAttributes,

    /// optionalParameters: {GestureRecognizer? recognizer} , hasDefaultValue:false, defaultValueCode:null
    GestureRecognizer? recognizer,
  }) : super(
          text,
          isPlaceholder: isPlaceholder,
          semanticsLabel: semanticsLabel,
          stringAttributes: stringAttributes,
          recognizer: recognizer,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InlineSpanSemanticsInformation$Mate(
        p.get('text').value,
        isPlaceholder: p.get('isPlaceholder').value,
        semanticsLabel: p.get('semanticsLabel').value,
        stringAttributes: p.get('stringAttributes').value,
        recognizer: p.get('recognizer').value,
      ),
    );
    mateParams.put('text', init: text);
    mateParams.put('isPlaceholder', init: isPlaceholder);
    mateParams.put('semanticsLabel', init: semanticsLabel);
    mateParams.put('stringAttributes', init: stringAttributes);
    mateParams.put('recognizer', init: recognizer);
  }
}
