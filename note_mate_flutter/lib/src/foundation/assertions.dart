// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/foundation/assertions.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/diagnostics.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class PartialStackFrame
class PartialStackFrame$Mate extends PartialStackFrame with Mate<PartialStackFrame$Mate> {
  /// PartialStackFrame PartialStackFrame({required Pattern package, required String className, required String method})
  PartialStackFrame$Mate({
    /// optionalParameters: {required Pattern package} , hasDefaultValue:false, defaultValueCode:null
    required Pattern package,

    /// optionalParameters: {required String className} , hasDefaultValue:false, defaultValueCode:null
    required String className,

    /// optionalParameters: {required String method} , hasDefaultValue:false, defaultValueCode:null
    required String method,
  }) : super(
          package: package,
          className: className,
          method: method,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => PartialStackFrame$Mate(
        package: p.get('package').value,
        className: p.get('className').value,
        method: p.get('method').value,
      ),
    );
    mateParams.put('package', package);
    mateParams.put('className', className);
    mateParams.put('method', method);
  }
}

/// class RepetitiveStackFrameFilter extends StackFilter
class RepetitiveStackFrameFilter$Mate extends RepetitiveStackFrameFilter with Mate<RepetitiveStackFrameFilter$Mate> {
  /// RepetitiveStackFrameFilter RepetitiveStackFrameFilter({required List<PartialStackFrame> frames, required String replacement})
  RepetitiveStackFrameFilter$Mate({
    /// optionalParameters: {required List<PartialStackFrame> frames} , hasDefaultValue:false, defaultValueCode:null
    required List<PartialStackFrame> frames,

    /// optionalParameters: {required String replacement} , hasDefaultValue:false, defaultValueCode:null
    required String replacement,
  }) : super(
          frames: frames,
          replacement: replacement,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RepetitiveStackFrameFilter$Mate(
        frames: p.get('frames').value,
        replacement: p.get('replacement').value,
      ),
    );
    mateParams.put('frames', frames);
    mateParams.put('replacement', replacement);
  }
}

/// class ErrorDescription extends _ErrorDiagnostic
class ErrorDescription$Mate extends ErrorDescription with Mate<ErrorDescription$Mate> {
  /// ErrorDescription ErrorDescription(String message)
  ErrorDescription$Mate(

      /// requiredParameters: String message
      String message)
      : super(message) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ErrorDescription$Mate(p.get('message').value),
    );
    mateParams.put('message', message);
  }
}

/// class ErrorSummary extends _ErrorDiagnostic
class ErrorSummary$Mate extends ErrorSummary with Mate<ErrorSummary$Mate> {
  /// ErrorSummary ErrorSummary(String message)
  ErrorSummary$Mate(

      /// requiredParameters: String message
      String message)
      : super(message) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ErrorSummary$Mate(p.get('message').value),
    );
    mateParams.put('message', message);
  }
}

/// class ErrorHint extends _ErrorDiagnostic
class ErrorHint$Mate extends ErrorHint with Mate<ErrorHint$Mate> {
  /// ErrorHint ErrorHint(String message)
  ErrorHint$Mate(

      /// requiredParameters: String message
      String message)
      : super(message) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ErrorHint$Mate(p.get('message').value),
    );
    mateParams.put('message', message);
  }
}

/// class FlutterErrorDetails with Diagnosticable
class FlutterErrorDetails$Mate extends FlutterErrorDetails with Mate<FlutterErrorDetails$Mate> {
  /// FlutterErrorDetails FlutterErrorDetails({required Object exception, StackTrace? stack, String? library = 'Flutter framework', DiagnosticsNode? context, Iterable<String> Function(Iterable<String>)? stackFilter, Iterable<DiagnosticsNode> Function()? informationCollector, bool silent = false})
  FlutterErrorDetails$Mate({
    /// optionalParameters: {required Object exception} , hasDefaultValue:false, defaultValueCode:null
    required Object exception,

    /// optionalParameters: {StackTrace? stack} , hasDefaultValue:false, defaultValueCode:null
    StackTrace? stack,

    /// optionalParameters: {String? library = 'Flutter framework'} , hasDefaultValue:true, defaultValueCode:'Flutter framework'
    String? library,

    /// optionalParameters: {DiagnosticsNode? context} , hasDefaultValue:false, defaultValueCode:null
    DiagnosticsNode? context,

    /// optionalParameters: {Iterable<String> Function(Iterable<String>)? stackFilter} , hasDefaultValue:false, defaultValueCode:null
    IterableFilter<String>? stackFilter,

    /// optionalParameters: {Iterable<DiagnosticsNode> Function()? informationCollector} , hasDefaultValue:false, defaultValueCode:null
    InformationCollector? informationCollector,

    /// optionalParameters: {bool silent = false} , hasDefaultValue:true, defaultValueCode:false
    required bool silent,
  }) : super(
          exception: exception,
          stack: stack,
          library: library,
          context: context,
          stackFilter: stackFilter,
          informationCollector: informationCollector,
          silent: silent,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FlutterErrorDetails$Mate(
        exception: p.get('exception').value,
        stack: p.get('stack').value,
        library: p.get('library').value,
        context: p.get('context').value,
        stackFilter: p.get('stackFilter').value,
        informationCollector: p.get('informationCollector').value,
        silent: p.get('silent').value,
      ),
    );
    mateParams.put('exception', exception);
    mateParams.put('stack', stack);
    mateParams.put('library', library);
    mateParams.put('context', context);
    mateParams.put('stackFilter', stackFilter);
    mateParams.put('informationCollector', informationCollector);
    mateParams.put('silent', silent);
  }
}

/// class FlutterError extends Error with DiagnosticableTreeMixin implements AssertionError
class FlutterError$Mate extends FlutterError with Mate<FlutterError$Mate> {
  /// FlutterError FlutterError.fromParts(List<DiagnosticsNode> diagnostics)
  FlutterError$Mate.fromParts(

      /// requiredParameters: List<DiagnosticsNode> diagnostics
      List<DiagnosticsNode> diagnostics)
      : super.fromParts(diagnostics) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FlutterError$Mate.fromParts(p.get('diagnostics').value),
    );
    mateParams.put('diagnostics', diagnostics);
  }
}

/// class DiagnosticsStackTrace extends DiagnosticsBlock
class DiagnosticsStackTrace$Mate extends DiagnosticsStackTrace with Mate<DiagnosticsStackTrace$Mate> {
  /// DiagnosticsStackTrace DiagnosticsStackTrace(String name, StackTrace? stack, {Iterable<String> Function(Iterable<String>)? stackFilter, bool showSeparator = true})
  DiagnosticsStackTrace$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: StackTrace? stack
    StackTrace? stack, {
    /// optionalParameters: {Iterable<String> Function(Iterable<String>)? stackFilter} , hasDefaultValue:false, defaultValueCode:null
    IterableFilter<String>? stackFilter,

    /// optionalParameters: {bool showSeparator = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showSeparator,
  }) : super(
          name,
          stack,
          stackFilter: stackFilter,
          showSeparator: showSeparator,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticsStackTrace$Mate(
        p.get('name').value,
        p.get('stack').value,
        stackFilter: p.get('stackFilter').value,
        showSeparator: p.get('showSeparator').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('stack', stack);
    mateParams.put('stackFilter', stackFilter);
    mateParams.put('showSeparator', showSeparator);
  }

  /// DiagnosticsStackTrace DiagnosticsStackTrace.singleFrame(String name, {required String frame, bool showSeparator = true})
  DiagnosticsStackTrace$Mate.singleFrame(
    /// requiredParameters: String name
    String name, {
    /// optionalParameters: {required String frame} , hasDefaultValue:false, defaultValueCode:null
    required String frame,

    /// optionalParameters: {bool showSeparator = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showSeparator,
  }) : super.singleFrame(
          name,
          frame: frame,
          showSeparator: showSeparator,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticsStackTrace$Mate.singleFrame(
        p.get('name').value,
        frame: p.get('frame').value,
        showSeparator: p.get('showSeparator').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('frame', frame);
    mateParams.put('showSeparator', showSeparator);
  }
}
