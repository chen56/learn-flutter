// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/foundation/stack_frame.dart';
import 'dart:core';
import 'package:note/mate.dart';

/// class StackFrame
class StackFrame$Mate extends StackFrame with Mate<StackFrame$Mate> {
  /// StackFrame StackFrame({required int number, required int column, required int line, required String packageScheme, required String package, required String packagePath, String className = '', required String method, bool isConstructor = false, required String source})
  StackFrame$Mate({
    /// optionalParameters: {required int number} , hasDefaultValue:false, defaultValueCode:null
    required int number,

    /// optionalParameters: {required int column} , hasDefaultValue:false, defaultValueCode:null
    required int column,

    /// optionalParameters: {required int line} , hasDefaultValue:false, defaultValueCode:null
    required int line,

    /// optionalParameters: {required String packageScheme} , hasDefaultValue:false, defaultValueCode:null
    required String packageScheme,

    /// optionalParameters: {required String package} , hasDefaultValue:false, defaultValueCode:null
    required String package,

    /// optionalParameters: {required String packagePath} , hasDefaultValue:false, defaultValueCode:null
    required String packagePath,

    /// optionalParameters: {String className = ''} , hasDefaultValue:true, defaultValueCode:''
    required String className,

    /// optionalParameters: {required String method} , hasDefaultValue:false, defaultValueCode:null
    required String method,

    /// optionalParameters: {bool isConstructor = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isConstructor,

    /// optionalParameters: {required String source} , hasDefaultValue:false, defaultValueCode:null
    required String source,
  }) : super(
          number: number,
          column: column,
          line: line,
          packageScheme: packageScheme,
          package: package,
          packagePath: packagePath,
          className: className,
          method: method,
          isConstructor: isConstructor,
          source: source,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => StackFrame$Mate(
        number: p.get('number').build(),
        column: p.get('column').build(),
        line: p.get('line').build(),
        packageScheme: p.get('packageScheme').build(),
        package: p.get('package').build(),
        packagePath: p.get('packagePath').build(),
        className: p.get('className').build(),
        method: p.get('method').build(),
        isConstructor: p.get('isConstructor').build(),
        source: p.get('source').build(),
      ),
    );
    mateParams.put('number', number);
    mateParams.put('column', column);
    mateParams.put('line', line);
    mateParams.put('packageScheme', packageScheme);
    mateParams.put('package', package);
    mateParams.put('packagePath', packagePath);
    mateParams.put('className', className);
    mateParams.put('method', method);
    mateParams.put('isConstructor', isConstructor);
    mateParams.put('source', source);
  }
}
