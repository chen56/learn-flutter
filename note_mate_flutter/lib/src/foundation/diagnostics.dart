// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/foundation/diagnostics.dart';
import 'dart:core';
import 'package:note/mate.dart';

/// class TextTreeConfiguration
class TextTreeConfiguration$Mate extends TextTreeConfiguration with Mate<TextTreeConfiguration$Mate> {
  /// TextTreeConfiguration TextTreeConfiguration({required String prefixLineOne, required String prefixOtherLines, required String prefixLastChildLineOne, required String prefixOtherLinesRootNode, required String linkCharacter, required String propertyPrefixIfChildren, required String propertyPrefixNoChildren, String lineBreak = '\n', bool lineBreakProperties = true, String afterName = ':', String afterDescriptionIfBody = '', String afterDescription = '', String beforeProperties = '', String afterProperties = '', String mandatoryAfterProperties = '', String propertySeparator = '', String bodyIndent = '', String footer = '', bool showChildren = true, bool addBlankLineIfNoChildren = true, bool isNameOnOwnLine = false, bool isBlankLineBetweenPropertiesAndChildren = true, String beforeName = '', String suffixLineOne = '', String mandatoryFooter = ''})
  TextTreeConfiguration$Mate({
    /// optionalParameters: {required String prefixLineOne} , hasDefaultValue:false, defaultValueCode:null
    required String prefixLineOne,

    /// optionalParameters: {required String prefixOtherLines} , hasDefaultValue:false, defaultValueCode:null
    required String prefixOtherLines,

    /// optionalParameters: {required String prefixLastChildLineOne} , hasDefaultValue:false, defaultValueCode:null
    required String prefixLastChildLineOne,

    /// optionalParameters: {required String prefixOtherLinesRootNode} , hasDefaultValue:false, defaultValueCode:null
    required String prefixOtherLinesRootNode,

    /// optionalParameters: {required String linkCharacter} , hasDefaultValue:false, defaultValueCode:null
    required String linkCharacter,

    /// optionalParameters: {required String propertyPrefixIfChildren} , hasDefaultValue:false, defaultValueCode:null
    required String propertyPrefixIfChildren,

    /// optionalParameters: {required String propertyPrefixNoChildren} , hasDefaultValue:false, defaultValueCode:null
    required String propertyPrefixNoChildren,

    /// optionalParameters: {String lineBreak = '\n'} , hasDefaultValue:true, defaultValueCode:'\n'
    required String lineBreak,

    /// optionalParameters: {bool lineBreakProperties = true} , hasDefaultValue:true, defaultValueCode:true
    required bool lineBreakProperties,

    /// optionalParameters: {String afterName = ':'} , hasDefaultValue:true, defaultValueCode:':'
    required String afterName,

    /// optionalParameters: {String afterDescriptionIfBody = ''} , hasDefaultValue:true, defaultValueCode:''
    required String afterDescriptionIfBody,

    /// optionalParameters: {String afterDescription = ''} , hasDefaultValue:true, defaultValueCode:''
    required String afterDescription,

    /// optionalParameters: {String beforeProperties = ''} , hasDefaultValue:true, defaultValueCode:''
    required String beforeProperties,

    /// optionalParameters: {String afterProperties = ''} , hasDefaultValue:true, defaultValueCode:''
    required String afterProperties,

    /// optionalParameters: {String mandatoryAfterProperties = ''} , hasDefaultValue:true, defaultValueCode:''
    required String mandatoryAfterProperties,

    /// optionalParameters: {String propertySeparator = ''} , hasDefaultValue:true, defaultValueCode:''
    required String propertySeparator,

    /// optionalParameters: {String bodyIndent = ''} , hasDefaultValue:true, defaultValueCode:''
    required String bodyIndent,

    /// optionalParameters: {String footer = ''} , hasDefaultValue:true, defaultValueCode:''
    required String footer,

    /// optionalParameters: {bool showChildren = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showChildren,

    /// optionalParameters: {bool addBlankLineIfNoChildren = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addBlankLineIfNoChildren,

    /// optionalParameters: {bool isNameOnOwnLine = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isNameOnOwnLine,

    /// optionalParameters: {bool isBlankLineBetweenPropertiesAndChildren = true} , hasDefaultValue:true, defaultValueCode:true
    required bool isBlankLineBetweenPropertiesAndChildren,

    /// optionalParameters: {String beforeName = ''} , hasDefaultValue:true, defaultValueCode:''
    required String beforeName,

    /// optionalParameters: {String suffixLineOne = ''} , hasDefaultValue:true, defaultValueCode:''
    required String suffixLineOne,

    /// optionalParameters: {String mandatoryFooter = ''} , hasDefaultValue:true, defaultValueCode:''
    required String mandatoryFooter,
  }) : super(
          prefixLineOne: prefixLineOne,
          prefixOtherLines: prefixOtherLines,
          prefixLastChildLineOne: prefixLastChildLineOne,
          prefixOtherLinesRootNode: prefixOtherLinesRootNode,
          linkCharacter: linkCharacter,
          propertyPrefixIfChildren: propertyPrefixIfChildren,
          propertyPrefixNoChildren: propertyPrefixNoChildren,
          lineBreak: lineBreak,
          lineBreakProperties: lineBreakProperties,
          afterName: afterName,
          afterDescriptionIfBody: afterDescriptionIfBody,
          afterDescription: afterDescription,
          beforeProperties: beforeProperties,
          afterProperties: afterProperties,
          mandatoryAfterProperties: mandatoryAfterProperties,
          propertySeparator: propertySeparator,
          bodyIndent: bodyIndent,
          footer: footer,
          showChildren: showChildren,
          addBlankLineIfNoChildren: addBlankLineIfNoChildren,
          isNameOnOwnLine: isNameOnOwnLine,
          isBlankLineBetweenPropertiesAndChildren: isBlankLineBetweenPropertiesAndChildren,
          beforeName: beforeName,
          suffixLineOne: suffixLineOne,
          mandatoryFooter: mandatoryFooter,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TextTreeConfiguration$Mate(
        prefixLineOne: p.get('prefixLineOne').value,
        prefixOtherLines: p.get('prefixOtherLines').value,
        prefixLastChildLineOne: p.get('prefixLastChildLineOne').value,
        prefixOtherLinesRootNode: p.get('prefixOtherLinesRootNode').value,
        linkCharacter: p.get('linkCharacter').value,
        propertyPrefixIfChildren: p.get('propertyPrefixIfChildren').value,
        propertyPrefixNoChildren: p.get('propertyPrefixNoChildren').value,
        lineBreak: p.get('lineBreak').value,
        lineBreakProperties: p.get('lineBreakProperties').value,
        afterName: p.get('afterName').value,
        afterDescriptionIfBody: p.get('afterDescriptionIfBody').value,
        afterDescription: p.get('afterDescription').value,
        beforeProperties: p.get('beforeProperties').value,
        afterProperties: p.get('afterProperties').value,
        mandatoryAfterProperties: p.get('mandatoryAfterProperties').value,
        propertySeparator: p.get('propertySeparator').value,
        bodyIndent: p.get('bodyIndent').value,
        footer: p.get('footer').value,
        showChildren: p.get('showChildren').value,
        addBlankLineIfNoChildren: p.get('addBlankLineIfNoChildren').value,
        isNameOnOwnLine: p.get('isNameOnOwnLine').value,
        isBlankLineBetweenPropertiesAndChildren: p.get('isBlankLineBetweenPropertiesAndChildren').value,
        beforeName: p.get('beforeName').value,
        suffixLineOne: p.get('suffixLineOne').value,
        mandatoryFooter: p.get('mandatoryFooter').value,
      ),
    );
    mateParams.put('prefixLineOne', prefixLineOne);
    mateParams.put('prefixOtherLines', prefixOtherLines);
    mateParams.put('prefixLastChildLineOne', prefixLastChildLineOne);
    mateParams.put('prefixOtherLinesRootNode', prefixOtherLinesRootNode);
    mateParams.put('linkCharacter', linkCharacter);
    mateParams.put('propertyPrefixIfChildren', propertyPrefixIfChildren);
    mateParams.put('propertyPrefixNoChildren', propertyPrefixNoChildren);
    mateParams.put('lineBreak', lineBreak);
    mateParams.put('lineBreakProperties', lineBreakProperties);
    mateParams.put('afterName', afterName);
    mateParams.put('afterDescriptionIfBody', afterDescriptionIfBody);
    mateParams.put('afterDescription', afterDescription);
    mateParams.put('beforeProperties', beforeProperties);
    mateParams.put('afterProperties', afterProperties);
    mateParams.put('mandatoryAfterProperties', mandatoryAfterProperties);
    mateParams.put('propertySeparator', propertySeparator);
    mateParams.put('bodyIndent', bodyIndent);
    mateParams.put('footer', footer);
    mateParams.put('showChildren', showChildren);
    mateParams.put('addBlankLineIfNoChildren', addBlankLineIfNoChildren);
    mateParams.put('isNameOnOwnLine', isNameOnOwnLine);
    mateParams.put('isBlankLineBetweenPropertiesAndChildren', isBlankLineBetweenPropertiesAndChildren);
    mateParams.put('beforeName', beforeName);
    mateParams.put('suffixLineOne', suffixLineOne);
    mateParams.put('mandatoryFooter', mandatoryFooter);
  }
}

/// class TextTreeRenderer
class TextTreeRenderer$Mate extends TextTreeRenderer with Mate<TextTreeRenderer$Mate> {
  /// TextTreeRenderer TextTreeRenderer({DiagnosticLevel minLevel = DiagnosticLevel.debug, int wrapWidth = 100, int wrapWidthProperties = 65, int maxDescendentsTruncatableNode = -1})
  TextTreeRenderer$Mate({
    /// optionalParameters: {DiagnosticLevel minLevel = DiagnosticLevel.debug} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.debug
    required DiagnosticLevel minLevel,

    /// optionalParameters: {int wrapWidth = 100} , hasDefaultValue:true, defaultValueCode:100
    required int wrapWidth,

    /// optionalParameters: {int wrapWidthProperties = 65} , hasDefaultValue:true, defaultValueCode:65
    required int wrapWidthProperties,

    /// optionalParameters: {int maxDescendentsTruncatableNode = -1} , hasDefaultValue:true, defaultValueCode:-1
    required int maxDescendentsTruncatableNode,
  }) : super(
          minLevel: minLevel,
          wrapWidth: wrapWidth,
          wrapWidthProperties: wrapWidthProperties,
          maxDescendentsTruncatableNode: maxDescendentsTruncatableNode,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TextTreeRenderer$Mate(
        minLevel: p.get('minLevel').value,
        wrapWidth: p.get('wrapWidth').value,
        wrapWidthProperties: p.get('wrapWidthProperties').value,
        maxDescendentsTruncatableNode: p.get('maxDescendentsTruncatableNode').value,
      ),
    );
    mateParams.put('minLevel', minLevel);
    mateParams.put('wrapWidth', wrapWidth);
    mateParams.put('wrapWidthProperties', wrapWidthProperties);
    mateParams.put('maxDescendentsTruncatableNode', maxDescendentsTruncatableNode);
  }
}

/// class MessageProperty extends DiagnosticsProperty<void>
class MessageProperty$Mate extends MessageProperty with Mate<MessageProperty$Mate> {
  /// MessageProperty MessageProperty(String name, String message, {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  MessageProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: String message
    String message, {
    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          message,
          style: style,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => MessageProperty$Mate(
        p.get('name').value,
        p.get('message').value,
        style: p.get('style').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('message', message);
    mateParams.put('style', style);
    mateParams.put('level', level);
  }
}

/// class StringProperty extends DiagnosticsProperty<String>
class StringProperty$Mate extends StringProperty with Mate<StringProperty$Mate> {
  /// StringProperty StringProperty(String name, String? value, {String? description, String? tooltip, bool showName = true, Object? defaultValue = kNoDefaultValue, bool quoted = true, String? ifEmpty, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  StringProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: String? value
    String? value, {
    /// optionalParameters: {String? description} , hasDefaultValue:false, defaultValueCode:null
    String? description,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {bool quoted = true} , hasDefaultValue:true, defaultValueCode:true
    required bool quoted,

    /// optionalParameters: {String? ifEmpty} , hasDefaultValue:false, defaultValueCode:null
    String? ifEmpty,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          description: description,
          tooltip: tooltip,
          showName: showName,
          defaultValue: defaultValue,
          quoted: quoted,
          ifEmpty: ifEmpty,
          style: style,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => StringProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        description: p.get('description').value,
        tooltip: p.get('tooltip').value,
        showName: p.get('showName').value,
        defaultValue: p.get('defaultValue').value,
        quoted: p.get('quoted').value,
        ifEmpty: p.get('ifEmpty').value,
        style: p.get('style').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('description', description);
    mateParams.put('tooltip', tooltip);
    mateParams.put('showName', showName);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('quoted', quoted);
    mateParams.put('ifEmpty', ifEmpty);
    mateParams.put('style', style);
    mateParams.put('level', level);
  }
}

/// class DoubleProperty extends _NumProperty<double>
class DoubleProperty$Mate extends DoubleProperty with Mate<DoubleProperty$Mate> {
  /// DoubleProperty DoubleProperty(String name, double? value, {String? ifNull, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? value
    double? value, {
    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {String? unit} , hasDefaultValue:false, defaultValueCode:null
    String? unit,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          showName: showName,
          style: style,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DoubleProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        ifNull: p.get('ifNull').value,
        unit: p.get('unit').value,
        tooltip: p.get('tooltip').value,
        defaultValue: p.get('defaultValue').value,
        showName: p.get('showName').value,
        style: p.get('style').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('ifNull', ifNull);
    mateParams.put('unit', unit);
    mateParams.put('tooltip', tooltip);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('showName', showName);
    mateParams.put('style', style);
    mateParams.put('level', level);
  }

  /// DoubleProperty DoubleProperty.lazy(String name, double? Function() computeValue, {String? ifNull, bool showName = true, String? unit, String? tooltip, Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  DoubleProperty$Mate.lazy(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? Function() computeValue
    ComputePropertyValueCallback<double> computeValue, {
    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {String? unit} , hasDefaultValue:false, defaultValueCode:null
    String? unit,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super.lazy(
          name,
          computeValue,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          tooltip: tooltip,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DoubleProperty$Mate.lazy(
        p.get('name').value,
        p.get('computeValue').value,
        ifNull: p.get('ifNull').value,
        showName: p.get('showName').value,
        unit: p.get('unit').value,
        tooltip: p.get('tooltip').value,
        defaultValue: p.get('defaultValue').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('computeValue', computeValue);
    mateParams.put('ifNull', ifNull);
    mateParams.put('showName', showName);
    mateParams.put('unit', unit);
    mateParams.put('tooltip', tooltip);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('level', level);
  }
}

/// class IntProperty extends _NumProperty<int>
class IntProperty$Mate extends IntProperty with Mate<IntProperty$Mate> {
  /// IntProperty IntProperty(String name, int? value, {String? ifNull, bool showName = true, String? unit, Object? defaultValue = kNoDefaultValue, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IntProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: int? value
    int? value, {
    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {String? unit} , hasDefaultValue:false, defaultValueCode:null
    String? unit,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          showName: showName,
          unit: unit,
          defaultValue: defaultValue,
          style: style,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => IntProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        ifNull: p.get('ifNull').value,
        showName: p.get('showName').value,
        unit: p.get('unit').value,
        defaultValue: p.get('defaultValue').value,
        style: p.get('style').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('ifNull', ifNull);
    mateParams.put('showName', showName);
    mateParams.put('unit', unit);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('style', style);
    mateParams.put('level', level);
  }
}

/// class PercentProperty extends DoubleProperty
class PercentProperty$Mate extends PercentProperty with Mate<PercentProperty$Mate> {
  /// PercentProperty PercentProperty(String name, double? fraction, {String? ifNull, bool showName = true, String? tooltip, String? unit, DiagnosticLevel level = DiagnosticLevel.info})
  PercentProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: double? fraction
    double? fraction, {
    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,

    /// optionalParameters: {String? unit} , hasDefaultValue:false, defaultValueCode:null
    String? unit,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          fraction,
          ifNull: ifNull,
          showName: showName,
          tooltip: tooltip,
          unit: unit,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => PercentProperty$Mate(
        p.get('name').value,
        p.get('fraction').value,
        ifNull: p.get('ifNull').value,
        showName: p.get('showName').value,
        tooltip: p.get('tooltip').value,
        unit: p.get('unit').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('fraction', fraction);
    mateParams.put('ifNull', ifNull);
    mateParams.put('showName', showName);
    mateParams.put('tooltip', tooltip);
    mateParams.put('unit', unit);
    mateParams.put('level', level);
  }
}

/// class FlagProperty extends DiagnosticsProperty<bool>
class FlagProperty$Mate extends FlagProperty with Mate<FlagProperty$Mate> {
  /// FlagProperty FlagProperty(String name, {required bool? value, String? ifTrue, String? ifFalse, bool showName = false, Object? defaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  FlagProperty$Mate(
    /// requiredParameters: String name
    String name, {
    /// optionalParameters: {required bool? value} , hasDefaultValue:false, defaultValueCode:null
    required bool? value,

    /// optionalParameters: {String? ifTrue} , hasDefaultValue:false, defaultValueCode:null
    String? ifTrue,

    /// optionalParameters: {String? ifFalse} , hasDefaultValue:false, defaultValueCode:null
    String? ifFalse,

    /// optionalParameters: {bool showName = false} , hasDefaultValue:true, defaultValueCode:false
    required bool showName,

    /// optionalParameters: {Object? defaultValue} , hasDefaultValue:false, defaultValueCode:null
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value: value,
          ifTrue: ifTrue,
          ifFalse: ifFalse,
          showName: showName,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FlagProperty$Mate(
        p.get('name').value,
        value: p.get('value').value,
        ifTrue: p.get('ifTrue').value,
        ifFalse: p.get('ifFalse').value,
        showName: p.get('showName').value,
        defaultValue: p.get('defaultValue').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('ifTrue', ifTrue);
    mateParams.put('ifFalse', ifFalse);
    mateParams.put('showName', showName);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('level', level);
  }
}

/// class IterableProperty<T> extends DiagnosticsProperty<Iterable<T>>
class IterableProperty$Mate<T> extends IterableProperty<T> with Mate<IterableProperty$Mate> {
  /// IterableProperty<T> IterableProperty(String name, Iterable<T>? value, {Object? defaultValue = kNoDefaultValue, String? ifNull, String? ifEmpty = '[]', DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  IterableProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Iterable<T>? value
    Iterable<T>? value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {String? ifEmpty = '[]'} , hasDefaultValue:true, defaultValueCode:'[]'
    String? ifEmpty,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {bool showSeparator = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showSeparator,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => IterableProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        defaultValue: p.get('defaultValue').value,
        ifNull: p.get('ifNull').value,
        ifEmpty: p.get('ifEmpty').value,
        style: p.get('style').value,
        showName: p.get('showName').value,
        showSeparator: p.get('showSeparator').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('ifNull', ifNull);
    mateParams.put('ifEmpty', ifEmpty);
    mateParams.put('style', style);
    mateParams.put('showName', showName);
    mateParams.put('showSeparator', showSeparator);
    mateParams.put('level', level);
  }
}

/// class EnumProperty<T> extends DiagnosticsProperty<T>
class EnumProperty$Mate<T> extends EnumProperty<T> with Mate<EnumProperty$Mate> {
  /// EnumProperty<T> EnumProperty(String name, T? value, {Object? defaultValue = kNoDefaultValue, DiagnosticLevel level = DiagnosticLevel.info})
  EnumProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          defaultValue: defaultValue,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => EnumProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        defaultValue: p.get('defaultValue').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('level', level);
  }
}

/// class ObjectFlagProperty<T> extends DiagnosticsProperty<T>
class ObjectFlagProperty$Mate<T> extends ObjectFlagProperty<T> with Mate<ObjectFlagProperty$Mate> {
  /// ObjectFlagProperty<T> ObjectFlagProperty(String name, T? value, {String? ifPresent, String? ifNull, bool showName = false, DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {String? ifPresent} , hasDefaultValue:false, defaultValueCode:null
    String? ifPresent,

    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {bool showName = false} , hasDefaultValue:true, defaultValueCode:false
    required bool showName,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifPresent: ifPresent,
          ifNull: ifNull,
          showName: showName,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ObjectFlagProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        ifPresent: p.get('ifPresent').value,
        ifNull: p.get('ifNull').value,
        showName: p.get('showName').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('ifPresent', ifPresent);
    mateParams.put('ifNull', ifNull);
    mateParams.put('showName', showName);
    mateParams.put('level', level);
  }

  /// ObjectFlagProperty<T> ObjectFlagProperty.has(String name, T? value, {DiagnosticLevel level = DiagnosticLevel.info})
  ObjectFlagProperty$Mate.has(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super.has(
          name,
          value,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ObjectFlagProperty$Mate.has(
        p.get('name').value,
        p.get('value').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('level', level);
  }
}

/// class FlagsSummary<T> extends DiagnosticsProperty<Map<String, T?>>
class FlagsSummary$Mate<T> extends FlagsSummary<T> with Mate<FlagsSummary$Mate> {
  /// FlagsSummary<T> FlagsSummary(String name, Map<String, T?> value, {String? ifEmpty, bool showName = true, bool showSeparator = true, DiagnosticLevel level = DiagnosticLevel.info})
  FlagsSummary$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: Map<String, T?> value
    Map<String, T?> value, {
    /// optionalParameters: {String? ifEmpty} , hasDefaultValue:false, defaultValueCode:null
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {bool showSeparator = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showSeparator,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FlagsSummary$Mate(
        p.get('name').value,
        p.get('value').value,
        ifEmpty: p.get('ifEmpty').value,
        showName: p.get('showName').value,
        showSeparator: p.get('showSeparator').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('ifEmpty', ifEmpty);
    mateParams.put('showName', showName);
    mateParams.put('showSeparator', showSeparator);
    mateParams.put('level', level);
  }
}

/// class DiagnosticsProperty<T> extends DiagnosticsNode
class DiagnosticsProperty$Mate<T> extends DiagnosticsProperty<T> with Mate<DiagnosticsProperty$Mate> {
  /// DiagnosticsProperty<T> DiagnosticsProperty(String? name, T? value, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, String? linePrefix, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate(
    /// requiredParameters: String? name
    String? name,

    /// requiredParameters: T? value
    T? value, {
    /// optionalParameters: {String? description} , hasDefaultValue:false, defaultValueCode:null
    String? description,

    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {String? ifEmpty} , hasDefaultValue:false, defaultValueCode:null
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {bool showSeparator = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showSeparator,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,

    /// optionalParameters: {bool missingIfNull = false} , hasDefaultValue:true, defaultValueCode:false
    required bool missingIfNull,

    /// optionalParameters: {String? linePrefix} , hasDefaultValue:false, defaultValueCode:null
    String? linePrefix,

    /// optionalParameters: {bool expandableValue = false} , hasDefaultValue:true, defaultValueCode:false
    required bool expandableValue,

    /// optionalParameters: {bool allowWrap = true} , hasDefaultValue:true, defaultValueCode:true
    required bool allowWrap,

    /// optionalParameters: {bool allowNameWrap = true} , hasDefaultValue:true, defaultValueCode:true
    required bool allowNameWrap,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          linePrefix: linePrefix,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticsProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        description: p.get('description').value,
        ifNull: p.get('ifNull').value,
        ifEmpty: p.get('ifEmpty').value,
        showName: p.get('showName').value,
        showSeparator: p.get('showSeparator').value,
        defaultValue: p.get('defaultValue').value,
        tooltip: p.get('tooltip').value,
        missingIfNull: p.get('missingIfNull').value,
        linePrefix: p.get('linePrefix').value,
        expandableValue: p.get('expandableValue').value,
        allowWrap: p.get('allowWrap').value,
        allowNameWrap: p.get('allowNameWrap').value,
        style: p.get('style').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('description', description);
    mateParams.put('ifNull', ifNull);
    mateParams.put('ifEmpty', ifEmpty);
    mateParams.put('showName', showName);
    mateParams.put('showSeparator', showSeparator);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('tooltip', tooltip);
    mateParams.put('missingIfNull', missingIfNull);
    mateParams.put('linePrefix', linePrefix);
    mateParams.put('expandableValue', expandableValue);
    mateParams.put('allowWrap', allowWrap);
    mateParams.put('allowNameWrap', allowNameWrap);
    mateParams.put('style', style);
    mateParams.put('level', level);
  }

  /// DiagnosticsProperty<T> DiagnosticsProperty.lazy(String? name, T? Function() computeValue, {String? description, String? ifNull, String? ifEmpty, bool showName = true, bool showSeparator = true, Object? defaultValue = kNoDefaultValue, String? tooltip, bool missingIfNull = false, bool expandableValue = false, bool allowWrap = true, bool allowNameWrap = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  DiagnosticsProperty$Mate.lazy(
    /// requiredParameters: String? name
    String? name,

    /// requiredParameters: T? Function() computeValue
    ComputePropertyValueCallback<T> computeValue, {
    /// optionalParameters: {String? description} , hasDefaultValue:false, defaultValueCode:null
    String? description,

    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {String? ifEmpty} , hasDefaultValue:false, defaultValueCode:null
    String? ifEmpty,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {bool showSeparator = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showSeparator,

    /// optionalParameters: {Object? defaultValue = kNoDefaultValue} , hasDefaultValue:true, defaultValueCode:kNoDefaultValue
    Object? defaultValue,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,

    /// optionalParameters: {bool missingIfNull = false} , hasDefaultValue:true, defaultValueCode:false
    required bool missingIfNull,

    /// optionalParameters: {bool expandableValue = false} , hasDefaultValue:true, defaultValueCode:false
    required bool expandableValue,

    /// optionalParameters: {bool allowWrap = true} , hasDefaultValue:true, defaultValueCode:true
    required bool allowWrap,

    /// optionalParameters: {bool allowNameWrap = true} , hasDefaultValue:true, defaultValueCode:true
    required bool allowNameWrap,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super.lazy(
          name,
          computeValue,
          description: description,
          ifNull: ifNull,
          ifEmpty: ifEmpty,
          showName: showName,
          showSeparator: showSeparator,
          defaultValue: defaultValue,
          tooltip: tooltip,
          missingIfNull: missingIfNull,
          expandableValue: expandableValue,
          allowWrap: allowWrap,
          allowNameWrap: allowNameWrap,
          style: style,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticsProperty$Mate.lazy(
        p.get('name').value,
        p.get('computeValue').value,
        description: p.get('description').value,
        ifNull: p.get('ifNull').value,
        ifEmpty: p.get('ifEmpty').value,
        showName: p.get('showName').value,
        showSeparator: p.get('showSeparator').value,
        defaultValue: p.get('defaultValue').value,
        tooltip: p.get('tooltip').value,
        missingIfNull: p.get('missingIfNull').value,
        expandableValue: p.get('expandableValue').value,
        allowWrap: p.get('allowWrap').value,
        allowNameWrap: p.get('allowNameWrap').value,
        style: p.get('style').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('computeValue', computeValue);
    mateParams.put('description', description);
    mateParams.put('ifNull', ifNull);
    mateParams.put('ifEmpty', ifEmpty);
    mateParams.put('showName', showName);
    mateParams.put('showSeparator', showSeparator);
    mateParams.put('defaultValue', defaultValue);
    mateParams.put('tooltip', tooltip);
    mateParams.put('missingIfNull', missingIfNull);
    mateParams.put('expandableValue', expandableValue);
    mateParams.put('allowWrap', allowWrap);
    mateParams.put('allowNameWrap', allowNameWrap);
    mateParams.put('style', style);
    mateParams.put('level', level);
  }
}

/// class DiagnosticableNode<T extends Diagnosticable> extends DiagnosticsNode
class DiagnosticableNode$Mate<T extends Diagnosticable> extends DiagnosticableNode<T>
    with Mate<DiagnosticableNode$Mate> {
  /// DiagnosticableNode<T> DiagnosticableNode({String? name, required T value, required DiagnosticsTreeStyle? style})
  DiagnosticableNode$Mate({
    /// optionalParameters: {String? name} , hasDefaultValue:false, defaultValueCode:null
    String? name,

    /// optionalParameters: {required T value} , hasDefaultValue:false, defaultValueCode:null
    required T value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , hasDefaultValue:false, defaultValueCode:null
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticableNode$Mate(
        name: p.get('name').value,
        value: p.get('value').value,
        style: p.get('style').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('style', style);
  }
}

/// class DiagnosticableTreeNode extends DiagnosticableNode<DiagnosticableTree>
class DiagnosticableTreeNode$Mate extends DiagnosticableTreeNode with Mate<DiagnosticableTreeNode$Mate> {
  /// DiagnosticableTreeNode DiagnosticableTreeNode({String? name, required DiagnosticableTree value, required DiagnosticsTreeStyle? style})
  DiagnosticableTreeNode$Mate({
    /// optionalParameters: {String? name} , hasDefaultValue:false, defaultValueCode:null
    String? name,

    /// optionalParameters: {required DiagnosticableTree value} , hasDefaultValue:false, defaultValueCode:null
    required DiagnosticableTree value,

    /// optionalParameters: {required DiagnosticsTreeStyle? style} , hasDefaultValue:false, defaultValueCode:null
    required DiagnosticsTreeStyle? style,
  }) : super(
          name: name,
          value: value,
          style: style,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticableTreeNode$Mate(
        name: p.get('name').value,
        value: p.get('value').value,
        style: p.get('style').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('value', value);
    mateParams.put('style', style);
  }
}

/// class DiagnosticPropertiesBuilder
class DiagnosticPropertiesBuilder$Mate extends DiagnosticPropertiesBuilder with Mate<DiagnosticPropertiesBuilder$Mate> {
  /// DiagnosticPropertiesBuilder DiagnosticPropertiesBuilder.fromProperties(List<DiagnosticsNode> properties)
  DiagnosticPropertiesBuilder$Mate.fromProperties(

      /// requiredParameters: List<DiagnosticsNode> properties
      List<DiagnosticsNode> properties)
      : super.fromProperties(properties) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticPropertiesBuilder$Mate.fromProperties(p.get('properties').value),
    );
    mateParams.put('properties', properties);
  }
}

/// class DiagnosticsBlock extends DiagnosticsNode
class DiagnosticsBlock$Mate extends DiagnosticsBlock with Mate<DiagnosticsBlock$Mate> {
  /// DiagnosticsBlock DiagnosticsBlock({String? name, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace, bool showName = true, bool showSeparator = true, String? linePrefix, Object? value, String? description, DiagnosticLevel level = DiagnosticLevel.info, bool allowTruncate = false, List<DiagnosticsNode> children = const <DiagnosticsNode>[], List<DiagnosticsNode> properties = const <DiagnosticsNode>[]})
  DiagnosticsBlock$Mate({
    /// optionalParameters: {String? name} , hasDefaultValue:false, defaultValueCode:null
    String? name,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.whitespace} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.whitespace
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {bool showSeparator = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showSeparator,

    /// optionalParameters: {String? linePrefix} , hasDefaultValue:false, defaultValueCode:null
    String? linePrefix,

    /// optionalParameters: {Object? value} , hasDefaultValue:false, defaultValueCode:null
    Object? value,

    /// optionalParameters: {String? description} , hasDefaultValue:false, defaultValueCode:null
    String? description,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,

    /// optionalParameters: {bool allowTruncate = false} , hasDefaultValue:true, defaultValueCode:false
    required bool allowTruncate,

    /// optionalParameters: {List<DiagnosticsNode> children = const <DiagnosticsNode>[]} , hasDefaultValue:true, defaultValueCode:const <DiagnosticsNode>[]
    required List<DiagnosticsNode> children,

    /// optionalParameters: {List<DiagnosticsNode> properties = const <DiagnosticsNode>[]} , hasDefaultValue:true, defaultValueCode:const <DiagnosticsNode>[]
    required List<DiagnosticsNode> properties,
  }) : super(
          name: name,
          style: style,
          showName: showName,
          showSeparator: showSeparator,
          linePrefix: linePrefix,
          value: value,
          description: description,
          level: level,
          allowTruncate: allowTruncate,
          children: children,
          properties: properties,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DiagnosticsBlock$Mate(
        name: p.get('name').value,
        style: p.get('style').value,
        showName: p.get('showName').value,
        showSeparator: p.get('showSeparator').value,
        linePrefix: p.get('linePrefix').value,
        value: p.get('value').value,
        description: p.get('description').value,
        level: p.get('level').value,
        allowTruncate: p.get('allowTruncate').value,
        children: p.get('children').value,
        properties: p.get('properties').value,
      ),
    );
    mateParams.put('name', name);
    mateParams.put('style', style);
    mateParams.put('showName', showName);
    mateParams.put('showSeparator', showSeparator);
    mateParams.put('linePrefix', linePrefix);
    mateParams.put('value', value);
    mateParams.put('description', description);
    mateParams.put('level', level);
    mateParams.put('allowTruncate', allowTruncate);
    mateParams.put('children', children);
    mateParams.put('properties', properties);
  }
}
