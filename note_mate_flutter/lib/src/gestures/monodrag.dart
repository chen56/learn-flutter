// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/gestures/monodrag.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:note/mate.dart';

/// class VerticalDragGestureRecognizer extends DragGestureRecognizer
class VerticalDragGestureRecognizer$Mate extends VerticalDragGestureRecognizer
    with Mate<VerticalDragGestureRecognizer$Mate> {
  /// VerticalDragGestureRecognizer VerticalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  VerticalDragGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => VerticalDragGestureRecognizer$Mate(
        debugOwner: p.get('debugOwner').value,
        supportedDevices: p.get('supportedDevices').value,
        allowedButtonsFilter: p.get('allowedButtonsFilter').value,
      ),
    );
    mateParams.put('debugOwner', debugOwner);
    mateParams.put('supportedDevices', supportedDevices);
    mateParams.put('allowedButtonsFilter', allowedButtonsFilter);
  }
}

/// class HorizontalDragGestureRecognizer extends DragGestureRecognizer
class HorizontalDragGestureRecognizer$Mate extends HorizontalDragGestureRecognizer
    with Mate<HorizontalDragGestureRecognizer$Mate> {
  /// HorizontalDragGestureRecognizer HorizontalDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  HorizontalDragGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => HorizontalDragGestureRecognizer$Mate(
        debugOwner: p.get('debugOwner').value,
        supportedDevices: p.get('supportedDevices').value,
        allowedButtonsFilter: p.get('allowedButtonsFilter').value,
      ),
    );
    mateParams.put('debugOwner', debugOwner);
    mateParams.put('supportedDevices', supportedDevices);
    mateParams.put('allowedButtonsFilter', allowedButtonsFilter);
  }
}

/// class PanGestureRecognizer extends DragGestureRecognizer
class PanGestureRecognizer$Mate extends PanGestureRecognizer with Mate<PanGestureRecognizer$Mate> {
  /// PanGestureRecognizer PanGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  PanGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , hasDefaultValue:false, defaultValueCode:null
    Object? debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , hasDefaultValue:false, defaultValueCode:null
    Set<PointerDeviceKind>? supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , hasDefaultValue:false, defaultValueCode:null
    AllowedButtonsFilter? allowedButtonsFilter,
  }) : super(
          debugOwner: debugOwner,
          supportedDevices: supportedDevices,
          allowedButtonsFilter: allowedButtonsFilter,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => PanGestureRecognizer$Mate(
        debugOwner: p.get('debugOwner').value,
        supportedDevices: p.get('supportedDevices').value,
        allowedButtonsFilter: p.get('allowedButtonsFilter').value,
      ),
    );
    mateParams.put('debugOwner', debugOwner);
    mateParams.put('supportedDevices', supportedDevices);
    mateParams.put('allowedButtonsFilter', allowedButtonsFilter);
  }
}
