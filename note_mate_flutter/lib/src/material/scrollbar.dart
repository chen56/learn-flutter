// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/scrollbar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'package:flutter/src/widgets/scrollbar.dart';
import 'package:note/mate.dart';

/// class Scrollbar extends StatelessWidget
class Scrollbar$Mate extends Scrollbar with WidgetMate<Scrollbar$Mate> {
  /// Scrollbar Scrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, bool? trackVisibility, double? thickness, Radius? radius, bool Function(ScrollNotification)? notificationPredicate, bool? interactive, ScrollbarOrientation? scrollbarOrientation, bool? isAlwaysShown, bool? showTrackOnHover, double? hoverThickness})
  Scrollbar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? thumbVisibility} , hasDefaultValue:false, defaultValueCode:null
    bool? thumbVisibility,

    /// optionalParameters: {bool? trackVisibility} , hasDefaultValue:false, defaultValueCode:null
    bool? trackVisibility,

    /// optionalParameters: {double? thickness} , hasDefaultValue:false, defaultValueCode:null
    double? thickness,

    /// optionalParameters: {Radius? radius} , hasDefaultValue:false, defaultValueCode:null
    Radius? radius,

    /// optionalParameters: {bool Function(ScrollNotification)? notificationPredicate} , hasDefaultValue:false, defaultValueCode:null
    ScrollNotificationPredicate? notificationPredicate,

    /// optionalParameters: {bool? interactive} , hasDefaultValue:false, defaultValueCode:null
    bool? interactive,

    /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , hasDefaultValue:false, defaultValueCode:null
    ScrollbarOrientation? scrollbarOrientation,
  }) : super(
          key: key,
          child: child,
          controller: controller,
          thumbVisibility: thumbVisibility,
          trackVisibility: trackVisibility,
          thickness: thickness,
          radius: radius,
          notificationPredicate: notificationPredicate,
          interactive: interactive,
          scrollbarOrientation: scrollbarOrientation,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Scrollbar$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        controller: p.get('controller').value,
        thumbVisibility: p.get('thumbVisibility').value,
        trackVisibility: p.get('trackVisibility').value,
        thickness: p.get('thickness').value,
        radius: p.get('radius').value,
        notificationPredicate: p.get('notificationPredicate').value,
        interactive: p.get('interactive').value,
        scrollbarOrientation: p.get('scrollbarOrientation').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('child', child);
    mateParams.put('controller', controller);
    mateParams.put('thumbVisibility', thumbVisibility);
    mateParams.put('trackVisibility', trackVisibility);
    mateParams.put('thickness', thickness);
    mateParams.put('radius', radius);
    mateParams.put('notificationPredicate', notificationPredicate);
    mateParams.put('interactive', interactive);
    mateParams.put('scrollbarOrientation', scrollbarOrientation);
  }
}
