// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/navigation_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/src/painting/border_radius.dart';

/// class NavigationBar extends StatelessWidget
class NavigationBar$Mate extends NavigationBar with WidgetMate<NavigationBar$Mate> {
  /// NavigationBar NavigationBar({Key? key, Duration? animationDuration, int selectedIndex = 0, required List<Widget> destinations, void Function(int)? onDestinationSelected, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, Color? indicatorColor, ShapeBorder? indicatorShape, double? height, NavigationDestinationLabelBehavior? labelBehavior})
  NavigationBar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Duration? animationDuration} , hasDefaultValue:false, defaultValueCode:null
    Duration? animationDuration,

    /// optionalParameters: {int selectedIndex = 0} , hasDefaultValue:true, defaultValueCode:0
    required int selectedIndex,

    /// optionalParameters: {required List<Widget> destinations} , hasDefaultValue:false, defaultValueCode:null
    required List<Widget> destinations,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<int>? onDestinationSelected,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {NavigationDestinationLabelBehavior? labelBehavior} , hasDefaultValue:false, defaultValueCode:null
    NavigationDestinationLabelBehavior? labelBehavior,
  }) : super(
          key: key,
          animationDuration: animationDuration,
          selectedIndex: selectedIndex,
          destinations: destinations,
          onDestinationSelected: onDestinationSelected,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          height: height,
          labelBehavior: labelBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationBar$Mate(
        key: p.get('key').value,
        animationDuration: p.get('animationDuration').value,
        selectedIndex: p.get('selectedIndex').value,
        destinations: p.get('destinations').value,
        onDestinationSelected: p.get('onDestinationSelected').value,
        backgroundColor: p.get('backgroundColor').value,
        elevation: p.get('elevation').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        indicatorColor: p.get('indicatorColor').value,
        indicatorShape: p.get('indicatorShape').value,
        height: p.get('height').value,
        labelBehavior: p.get('labelBehavior').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('animationDuration', init: animationDuration);
    mateParams.put('selectedIndex', init: selectedIndex);
    mateParams.put('destinations', init: destinations);
    mateParams.put('onDestinationSelected', init: onDestinationSelected);
    mateParams.put('backgroundColor', init: backgroundColor);
    mateParams.put('elevation', init: elevation);
    mateParams.put('shadowColor', init: shadowColor);
    mateParams.put('surfaceTintColor', init: surfaceTintColor);
    mateParams.put('indicatorColor', init: indicatorColor);
    mateParams.put('indicatorShape', init: indicatorShape);
    mateParams.put('height', init: height);
    mateParams.put('labelBehavior', init: labelBehavior);
  }
}

/// class NavigationDestination extends StatelessWidget
class NavigationDestination$Mate extends NavigationDestination with WidgetMate<NavigationDestination$Mate> {
  /// NavigationDestination NavigationDestination({Key? key, required Widget icon, Widget? selectedIcon, required String label, String? tooltip})
  NavigationDestination$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget icon} , hasDefaultValue:false, defaultValueCode:null
    required Widget icon,

    /// optionalParameters: {Widget? selectedIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? selectedIcon,

    /// optionalParameters: {required String label} , hasDefaultValue:false, defaultValueCode:null
    required String label,

    /// optionalParameters: {String? tooltip} , hasDefaultValue:false, defaultValueCode:null
    String? tooltip,
  }) : super(
          key: key,
          icon: icon,
          selectedIcon: selectedIcon,
          label: label,
          tooltip: tooltip,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationDestination$Mate(
        key: p.get('key').value,
        icon: p.get('icon').value,
        selectedIcon: p.get('selectedIcon').value,
        label: p.get('label').value,
        tooltip: p.get('tooltip').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('icon', init: icon);
    mateParams.put('selectedIcon', init: selectedIcon);
    mateParams.put('label', init: label);
    mateParams.put('tooltip', init: tooltip);
  }
}

/// class NavigationIndicator extends StatelessWidget
class NavigationIndicator$Mate extends NavigationIndicator with WidgetMate<NavigationIndicator$Mate> {
  /// NavigationIndicator NavigationIndicator({Key? key, required Animation<double> animation, Color? color, double width = _kIndicatorWidth, double height = _kIndicatorHeight, BorderRadius borderRadius = const BorderRadius.all(Radius.circular(16)), ShapeBorder? shape})
  NavigationIndicator$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<double> animation} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> animation,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {double width = _kIndicatorWidth} , hasDefaultValue:true, defaultValueCode:_kIndicatorWidth
    required double width,

    /// optionalParameters: {double height = _kIndicatorHeight} , hasDefaultValue:true, defaultValueCode:_kIndicatorHeight
    required double height,

    /// optionalParameters: {BorderRadius borderRadius = const BorderRadius.all(Radius.circular(16))} , hasDefaultValue:true, defaultValueCode:const BorderRadius.all(Radius.circular(16))
    required BorderRadius borderRadius,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,
  }) : super(
          key: key,
          animation: animation,
          color: color,
          width: width,
          height: height,
          borderRadius: borderRadius,
          shape: shape,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationIndicator$Mate(
        key: p.get('key').value,
        animation: p.get('animation').value,
        color: p.get('color').value,
        width: p.get('width').value,
        height: p.get('height').value,
        borderRadius: p.get('borderRadius').value,
        shape: p.get('shape').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('animation', init: animation);
    mateParams.put('color', init: color);
    mateParams.put('width', init: width);
    mateParams.put('height', init: height);
    mateParams.put('borderRadius', init: borderRadius);
    mateParams.put('shape', init: shape);
  }
}
