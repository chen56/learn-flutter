// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class Drawer extends StatelessWidget
class Drawer$Mate extends Drawer with WidgetMate<Drawer$Mate> {
  /// Drawer Drawer({Key? key, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, double? width, Widget? child, String? semanticLabel})
  Drawer$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,

    /// optionalParameters: {String? semanticLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticLabel,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          width: width,
          child: child,
          semanticLabel: semanticLabel,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Drawer$Mate(
        key: p.get('key').value,
        backgroundColor: p.get('backgroundColor').value,
        elevation: p.get('elevation').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        shape: p.get('shape').value,
        width: p.get('width').value,
        child: p.get('child').value,
        semanticLabel: p.get('semanticLabel').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('backgroundColor', init: backgroundColor);
    mateParams.put('elevation', init: elevation);
    mateParams.put('shadowColor', init: shadowColor);
    mateParams.put('surfaceTintColor', init: surfaceTintColor);
    mateParams.put('shape', init: shape);
    mateParams.put('width', init: width);
    mateParams.put('child', init: child);
    mateParams.put('semanticLabel', init: semanticLabel);
  }
}

/// class DrawerController extends StatefulWidget
class DrawerController$Mate extends DrawerController with WidgetMate<DrawerController$Mate> {
  /// DrawerController DrawerController({GlobalKey<State<StatefulWidget>>? key, required Widget child, required DrawerAlignment alignment, bool isDrawerOpen = false, void Function(bool)? drawerCallback, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Color? scrimColor, double? edgeDragWidth, bool enableOpenDragGesture = true})
  DrawerController$Mate({
    /// optionalParameters: {GlobalKey<State<StatefulWidget>>? key} , hasDefaultValue:false, defaultValueCode:null
    GlobalKey<State<StatefulWidget>>? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {required DrawerAlignment alignment} , hasDefaultValue:false, defaultValueCode:null
    required DrawerAlignment alignment,

    /// optionalParameters: {bool isDrawerOpen = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isDrawerOpen,

    /// optionalParameters: {void Function(bool)? drawerCallback} , hasDefaultValue:false, defaultValueCode:null
    DrawerCallback? drawerCallback,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {Color? scrimColor} , hasDefaultValue:false, defaultValueCode:null
    Color? scrimColor,

    /// optionalParameters: {double? edgeDragWidth} , hasDefaultValue:false, defaultValueCode:null
    double? edgeDragWidth,

    /// optionalParameters: {bool enableOpenDragGesture = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableOpenDragGesture,
  }) : super(
          key: key,
          child: child,
          alignment: alignment,
          isDrawerOpen: isDrawerOpen,
          drawerCallback: drawerCallback,
          dragStartBehavior: dragStartBehavior,
          scrimColor: scrimColor,
          edgeDragWidth: edgeDragWidth,
          enableOpenDragGesture: enableOpenDragGesture,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DrawerController$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        alignment: p.get('alignment').value,
        isDrawerOpen: p.get('isDrawerOpen').value,
        drawerCallback: p.get('drawerCallback').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        scrimColor: p.get('scrimColor').value,
        edgeDragWidth: p.get('edgeDragWidth').value,
        enableOpenDragGesture: p.get('enableOpenDragGesture').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('child', init: child);
    mateParams.put('alignment', init: alignment);
    mateParams.put('isDrawerOpen', init: isDrawerOpen);
    mateParams.put('drawerCallback', init: drawerCallback);
    mateParams.put('dragStartBehavior', init: dragStartBehavior);
    mateParams.put('scrimColor', init: scrimColor);
    mateParams.put('edgeDragWidth', init: edgeDragWidth);
    mateParams.put('enableOpenDragGesture', init: enableOpenDragGesture);
  }
}
