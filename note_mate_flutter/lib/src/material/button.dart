// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/button.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class RawMaterialButton extends StatefulWidget
class RawMaterialButton$Mate extends RawMaterialButton with WidgetMate<RawMaterialButton$Mate> {
  /// RawMaterialButton RawMaterialButton({Key? key, required void Function()? onPressed, void Function()? onLongPress, void Function(bool)? onHighlightChanged, MouseCursor? mouseCursor, TextStyle? textStyle, Color? fillColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, double elevation = 2.0, double focusElevation = 4.0, double hoverElevation = 4.0, double highlightElevation = 8.0, double disabledElevation = 0.0, EdgeInsetsGeometry padding = EdgeInsets.zero, VisualDensity visualDensity = VisualDensity.standard, BoxConstraints constraints = const BoxConstraints(minWidth: 88.0, minHeight: 36.0), ShapeBorder shape = const RoundedRectangleBorder(), Duration animationDuration = kThemeChangeDuration, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, Widget? child, bool enableFeedback = true})
  RawMaterialButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onPressed,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {TextStyle? textStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? textStyle,

    /// optionalParameters: {Color? fillColor} , hasDefaultValue:false, defaultValueCode:null
    Color? fillColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {double elevation = 2.0} , hasDefaultValue:true, defaultValueCode:2.0
    required double elevation,

    /// optionalParameters: {double focusElevation = 4.0} , hasDefaultValue:true, defaultValueCode:4.0
    required double focusElevation,

    /// optionalParameters: {double hoverElevation = 4.0} , hasDefaultValue:true, defaultValueCode:4.0
    required double hoverElevation,

    /// optionalParameters: {double highlightElevation = 8.0} , hasDefaultValue:true, defaultValueCode:8.0
    required double highlightElevation,

    /// optionalParameters: {double disabledElevation = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double disabledElevation,

    /// optionalParameters: {EdgeInsetsGeometry padding = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsetsGeometry padding,

    /// optionalParameters: {VisualDensity visualDensity = VisualDensity.standard} , hasDefaultValue:true, defaultValueCode:VisualDensity.standard
    required VisualDensity visualDensity,

    /// optionalParameters: {BoxConstraints constraints = const BoxConstraints(minWidth: 88.0, minHeight: 36.0)} , hasDefaultValue:true, defaultValueCode:const BoxConstraints(minWidth: 88.0, minHeight: 36.0)
    required BoxConstraints constraints,

    /// optionalParameters: {ShapeBorder shape = const RoundedRectangleBorder()} , hasDefaultValue:true, defaultValueCode:const RoundedRectangleBorder()
    required ShapeBorder shape,

    /// optionalParameters: {Duration animationDuration = kThemeChangeDuration} , hasDefaultValue:true, defaultValueCode:kThemeChangeDuration
    required Duration animationDuration,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
    required Clip clipBehavior,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,

    /// optionalParameters: {bool enableFeedback = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableFeedback,
  }) : super(
          key: key,
          onPressed: onPressed,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          mouseCursor: mouseCursor,
          textStyle: textStyle,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          highlightElevation: highlightElevation,
          disabledElevation: disabledElevation,
          padding: padding,
          visualDensity: visualDensity,
          constraints: constraints,
          shape: shape,
          animationDuration: animationDuration,
          clipBehavior: clipBehavior,
          focusNode: focusNode,
          autofocus: autofocus,
          materialTapTargetSize: materialTapTargetSize,
          child: child,
          enableFeedback: enableFeedback,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RawMaterialButton$Mate(
        key: p.get('key').value,
        onPressed: p.get('onPressed').value,
        onLongPress: p.get('onLongPress').value,
        onHighlightChanged: p.get('onHighlightChanged').value,
        mouseCursor: p.get('mouseCursor').value,
        textStyle: p.get('textStyle').value,
        fillColor: p.get('fillColor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        highlightColor: p.get('highlightColor').value,
        splashColor: p.get('splashColor').value,
        elevation: p.get('elevation').value,
        focusElevation: p.get('focusElevation').value,
        hoverElevation: p.get('hoverElevation').value,
        highlightElevation: p.get('highlightElevation').value,
        disabledElevation: p.get('disabledElevation').value,
        padding: p.get('padding').value,
        visualDensity: p.get('visualDensity').value,
        constraints: p.get('constraints').value,
        shape: p.get('shape').value,
        animationDuration: p.get('animationDuration').value,
        clipBehavior: p.get('clipBehavior').value,
        focusNode: p.get('focusNode').value,
        autofocus: p.get('autofocus').value,
        materialTapTargetSize: p.get('materialTapTargetSize').value,
        child: p.get('child').value,
        enableFeedback: p.get('enableFeedback').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('onPressed', init: onPressed);
    mateParams.put('onLongPress', init: onLongPress);
    mateParams.put('onHighlightChanged', init: onHighlightChanged);
    mateParams.put('mouseCursor', init: mouseCursor);
    mateParams.put('textStyle', init: textStyle);
    mateParams.put('fillColor', init: fillColor);
    mateParams.put('focusColor', init: focusColor);
    mateParams.put('hoverColor', init: hoverColor);
    mateParams.put('highlightColor', init: highlightColor);
    mateParams.put('splashColor', init: splashColor);
    mateParams.put('elevation', init: elevation);
    mateParams.put('focusElevation', init: focusElevation);
    mateParams.put('hoverElevation', init: hoverElevation);
    mateParams.put('highlightElevation', init: highlightElevation);
    mateParams.put('disabledElevation', init: disabledElevation);
    mateParams.put('padding', init: padding);
    mateParams.put('visualDensity', init: visualDensity);
    mateParams.put('constraints', init: constraints);
    mateParams.put('shape', init: shape);
    mateParams.put('animationDuration', init: animationDuration);
    mateParams.put('clipBehavior', init: clipBehavior);
    mateParams.put('focusNode', init: focusNode);
    mateParams.put('autofocus', init: autofocus);
    mateParams.put('materialTapTargetSize', init: materialTapTargetSize);
    mateParams.put('child', init: child);
    mateParams.put('enableFeedback', init: enableFeedback);
  }
}
