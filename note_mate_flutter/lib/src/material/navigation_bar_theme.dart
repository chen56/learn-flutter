// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/navigation_bar_theme.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/material/navigation_bar.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class NavigationBarThemeData with Diagnosticable
class NavigationBarThemeData$Mate extends NavigationBarThemeData with Mate<NavigationBarThemeData$Mate> {
  /// NavigationBarThemeData NavigationBarThemeData({double? height, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, Color? indicatorColor, ShapeBorder? indicatorShape, MaterialStateProperty<TextStyle?>? labelTextStyle, MaterialStateProperty<IconThemeData?>? iconTheme, NavigationDestinationLabelBehavior? labelBehavior})
  NavigationBarThemeData$Mate({
    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,

    /// optionalParameters: {MaterialStateProperty<TextStyle?>? labelTextStyle} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<TextStyle?>? labelTextStyle,

    /// optionalParameters: {MaterialStateProperty<IconThemeData?>? iconTheme} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<IconThemeData?>? iconTheme,

    /// optionalParameters: {NavigationDestinationLabelBehavior? labelBehavior} , hasDefaultValue:false, defaultValueCode:null
    NavigationDestinationLabelBehavior? labelBehavior,
  }) : super(
          height: height,
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          labelTextStyle: labelTextStyle,
          iconTheme: iconTheme,
          labelBehavior: labelBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationBarThemeData$Mate(
        height: p.get('height').value,
        backgroundColor: p.get('backgroundColor').value,
        elevation: p.get('elevation').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        indicatorColor: p.get('indicatorColor').value,
        indicatorShape: p.get('indicatorShape').value,
        labelTextStyle: p.get('labelTextStyle').value,
        iconTheme: p.get('iconTheme').value,
        labelBehavior: p.get('labelBehavior').value,
      ),
    );
    mateParams.put('height', height);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('elevation', elevation);
    mateParams.put('shadowColor', shadowColor);
    mateParams.put('surfaceTintColor', surfaceTintColor);
    mateParams.put('indicatorColor', indicatorColor);
    mateParams.put('indicatorShape', indicatorShape);
    mateParams.put('labelTextStyle', labelTextStyle);
    mateParams.put('iconTheme', iconTheme);
    mateParams.put('labelBehavior', labelBehavior);
  }
}

/// class NavigationBarTheme extends InheritedTheme
class NavigationBarTheme$Mate extends NavigationBarTheme with WidgetMate<NavigationBarTheme$Mate> {
  /// NavigationBarTheme NavigationBarTheme({Key? key, required NavigationBarThemeData data, required Widget child})
  NavigationBarTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required NavigationBarThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required NavigationBarThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationBarTheme$Mate(
        key: p.get('key').value,
        data: p.get('data').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('data', data);
    mateParams.put('child', child);
  }
}
