// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/drawer_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class DrawerThemeData with Diagnosticable
class DrawerThemeData$Mate extends DrawerThemeData with Mate<DrawerThemeData$Mate> {
  /// DrawerThemeData DrawerThemeData({Color? backgroundColor, Color? scrimColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, ShapeBorder? endShape, double? width})
  DrawerThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? scrimColor} , hasDefaultValue:false, defaultValueCode:null
    Color? scrimColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ShapeBorder? endShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? endShape,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,
  }) : super(
          backgroundColor: backgroundColor,
          scrimColor: scrimColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          endShape: endShape,
          width: width,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DrawerThemeData$Mate(
        backgroundColor: p.get('backgroundColor').value,
        scrimColor: p.get('scrimColor').value,
        elevation: p.get('elevation').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        shape: p.get('shape').value,
        endShape: p.get('endShape').value,
        width: p.get('width').value,
      ),
    );
    mateParams.put('backgroundColor', init: backgroundColor);
    mateParams.put('scrimColor', init: scrimColor);
    mateParams.put('elevation', init: elevation);
    mateParams.put('shadowColor', init: shadowColor);
    mateParams.put('surfaceTintColor', init: surfaceTintColor);
    mateParams.put('shape', init: shape);
    mateParams.put('endShape', init: endShape);
    mateParams.put('width', init: width);
  }
}

/// class DrawerTheme extends InheritedTheme
class DrawerTheme$Mate extends DrawerTheme with WidgetMate<DrawerTheme$Mate> {
  /// DrawerTheme DrawerTheme({Key? key, required DrawerThemeData data, required Widget child})
  DrawerTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required DrawerThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required DrawerThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DrawerTheme$Mate(
        key: p.get('key').value,
        data: p.get('data').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('data', init: data);
    mateParams.put('child', init: child);
  }
}
