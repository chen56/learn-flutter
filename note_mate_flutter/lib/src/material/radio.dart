// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/radio.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class Radio<T> extends StatefulWidget
class Radio$Mate<T> extends Radio<T> with WidgetMate<Radio$Mate> {
  /// Radio<T> Radio({Key? key, required T value, required T? groupValue, required void Function(T?)? onChanged, MouseCursor? mouseCursor, bool toggleable = false, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false})
  Radio$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required T value} , hasDefaultValue:false, defaultValueCode:null
    required T value,

    /// optionalParameters: {required T? groupValue} , hasDefaultValue:false, defaultValueCode:null
    required T? groupValue,

    /// optionalParameters: {required void Function(T?)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<T?>? onChanged,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool toggleable = false} , hasDefaultValue:true, defaultValueCode:false
    required bool toggleable,

    /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? fillColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? fillColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
    double? splashRadius,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,
  }) : super(
          key: key,
          value: value,
          groupValue: groupValue,
          onChanged: onChanged,
          mouseCursor: mouseCursor,
          toggleable: toggleable,
          activeColor: activeColor,
          fillColor: fillColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          materialTapTargetSize: materialTapTargetSize,
          visualDensity: visualDensity,
          focusNode: focusNode,
          autofocus: autofocus,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Radio$Mate(
        key: p.get('key').value,
        value: p.get('value').value,
        groupValue: p.get('groupValue').value,
        onChanged: p.get('onChanged').value,
        mouseCursor: p.get('mouseCursor').value,
        toggleable: p.get('toggleable').value,
        activeColor: p.get('activeColor').value,
        fillColor: p.get('fillColor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        overlayColor: p.get('overlayColor').value,
        splashRadius: p.get('splashRadius').value,
        materialTapTargetSize: p.get('materialTapTargetSize').value,
        visualDensity: p.get('visualDensity').value,
        focusNode: p.get('focusNode').value,
        autofocus: p.get('autofocus').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('value', init: value);
    mateParams.put('groupValue', init: groupValue);
    mateParams.put('onChanged', init: onChanged);
    mateParams.put('mouseCursor', init: mouseCursor);
    mateParams.put('toggleable', init: toggleable);
    mateParams.put('activeColor', init: activeColor);
    mateParams.put('fillColor', init: fillColor);
    mateParams.put('focusColor', init: focusColor);
    mateParams.put('hoverColor', init: hoverColor);
    mateParams.put('overlayColor', init: overlayColor);
    mateParams.put('splashRadius', init: splashRadius);
    mateParams.put('materialTapTargetSize', init: materialTapTargetSize);
    mateParams.put('visualDensity', init: visualDensity);
    mateParams.put('focusNode', init: focusNode);
    mateParams.put('autofocus', init: autofocus);
  }
}
