// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/selection_area.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/widgets/selectable_region.dart';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/rendering/selection.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class SelectionArea extends StatefulWidget
class SelectionArea$Mate extends SelectionArea with WidgetMate<SelectionArea$Mate> {
  /// SelectionArea SelectionArea({Key? key, FocusNode? focusNode, TextSelectionControls? selectionControls, Widget Function(BuildContext, SelectableRegionState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration, void Function(SelectedContent?)? onSelectionChanged, required Widget child})
  SelectionArea$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
    TextSelectionControls? selectionControls,

    /// optionalParameters: {Widget Function(BuildContext, SelectableRegionState)? contextMenuBuilder = _defaultContextMenuBuilder} , hasDefaultValue:true, defaultValueCode:_defaultContextMenuBuilder
    SelectableRegionContextMenuBuilder? contextMenuBuilder,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , hasDefaultValue:false, defaultValueCode:null
    TextMagnifierConfiguration? magnifierConfiguration,

    /// optionalParameters: {void Function(SelectedContent?)? onSelectionChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<SelectedContent?>? onSelectionChanged,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          focusNode: focusNode,
          selectionControls: selectionControls,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
          onSelectionChanged: onSelectionChanged,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SelectionArea$Mate(
        key: p.get('key').value,
        focusNode: p.get('focusNode').value,
        selectionControls: p.get('selectionControls').value,
        contextMenuBuilder: p.get('contextMenuBuilder').value,
        magnifierConfiguration: p.get('magnifierConfiguration').value,
        onSelectionChanged: p.get('onSelectionChanged').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('focusNode', focusNode);
    mateParams.put('selectionControls', selectionControls);
    mateParams.put('contextMenuBuilder', contextMenuBuilder);
    mateParams.put('magnifierConfiguration', magnifierConfiguration);
    mateParams.put('onSelectionChanged', onSelectionChanged);
    mateParams.put('child', child);
  }
}
