// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/back_button.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:note/mate.dart';
import 'dart:ui';

/// class BackButtonIcon extends StatelessWidget
class BackButtonIcon$Mate extends BackButtonIcon with WidgetMate<BackButtonIcon$Mate> {
  /// BackButtonIcon BackButtonIcon({Key? key})
  BackButtonIcon$Mate(
      {
      /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
      Key? key})
      : super(key: key) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => BackButtonIcon$Mate(key: p.get('key').value),
    );
    mateParams.put('key', key);
  }
}

/// class BackButton extends StatelessWidget
class BackButton$Mate extends BackButton with WidgetMate<BackButton$Mate> {
  /// BackButton BackButton({Key? key, Color? color, void Function()? onPressed})
  BackButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onPressed,
  }) : super(
          key: key,
          color: color,
          onPressed: onPressed,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => BackButton$Mate(
        key: p.get('key').value,
        color: p.get('color').value,
        onPressed: p.get('onPressed').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('color', color);
    mateParams.put('onPressed', onPressed);
  }
}

/// class CloseButton extends StatelessWidget
class CloseButton$Mate extends CloseButton with WidgetMate<CloseButton$Mate> {
  /// CloseButton CloseButton({Key? key, Color? color, void Function()? onPressed})
  CloseButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onPressed,
  }) : super(
          key: key,
          color: color,
          onPressed: onPressed,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CloseButton$Mate(
        key: p.get('key').value,
        color: p.get('color').value,
        onPressed: p.get('onPressed').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('color', color);
    mateParams.put('onPressed', onPressed);
  }
}
