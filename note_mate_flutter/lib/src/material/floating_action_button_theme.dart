// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/floating_action_button_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:note/mate.dart';

/// class FloatingActionButtonThemeData with Diagnosticable
class FloatingActionButtonThemeData$Mate extends FloatingActionButtonThemeData
    with Mate<FloatingActionButtonThemeData$Mate> {
  /// FloatingActionButtonThemeData FloatingActionButtonThemeData({Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, double? elevation, double? focusElevation, double? hoverElevation, double? disabledElevation, double? highlightElevation, ShapeBorder? shape, bool? enableFeedback, double? iconSize, BoxConstraints? sizeConstraints, BoxConstraints? smallSizeConstraints, BoxConstraints? largeSizeConstraints, BoxConstraints? extendedSizeConstraints, double? extendedIconLabelSpacing, EdgeInsetsGeometry? extendedPadding, TextStyle? extendedTextStyle, MaterialStateProperty<MouseCursor?>? mouseCursor})
  FloatingActionButtonThemeData$Mate({
    /// optionalParameters: {Color? foregroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? foregroundColor,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? focusElevation} , hasDefaultValue:false, defaultValueCode:null
    double? focusElevation,

    /// optionalParameters: {double? hoverElevation} , hasDefaultValue:false, defaultValueCode:null
    double? hoverElevation,

    /// optionalParameters: {double? disabledElevation} , hasDefaultValue:false, defaultValueCode:null
    double? disabledElevation,

    /// optionalParameters: {double? highlightElevation} , hasDefaultValue:false, defaultValueCode:null
    double? highlightElevation,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {double? iconSize} , hasDefaultValue:false, defaultValueCode:null
    double? iconSize,

    /// optionalParameters: {BoxConstraints? sizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? sizeConstraints,

    /// optionalParameters: {BoxConstraints? smallSizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? smallSizeConstraints,

    /// optionalParameters: {BoxConstraints? largeSizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? largeSizeConstraints,

    /// optionalParameters: {BoxConstraints? extendedSizeConstraints} , hasDefaultValue:false, defaultValueCode:null
    BoxConstraints? extendedSizeConstraints,

    /// optionalParameters: {double? extendedIconLabelSpacing} , hasDefaultValue:false, defaultValueCode:null
    double? extendedIconLabelSpacing,

    /// optionalParameters: {EdgeInsetsGeometry? extendedPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? extendedPadding,

    /// optionalParameters: {TextStyle? extendedTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? extendedTextStyle,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,
  }) : super(
          foregroundColor: foregroundColor,
          backgroundColor: backgroundColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          splashColor: splashColor,
          elevation: elevation,
          focusElevation: focusElevation,
          hoverElevation: hoverElevation,
          disabledElevation: disabledElevation,
          highlightElevation: highlightElevation,
          shape: shape,
          enableFeedback: enableFeedback,
          iconSize: iconSize,
          sizeConstraints: sizeConstraints,
          smallSizeConstraints: smallSizeConstraints,
          largeSizeConstraints: largeSizeConstraints,
          extendedSizeConstraints: extendedSizeConstraints,
          extendedIconLabelSpacing: extendedIconLabelSpacing,
          extendedPadding: extendedPadding,
          extendedTextStyle: extendedTextStyle,
          mouseCursor: mouseCursor,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FloatingActionButtonThemeData$Mate(
        foregroundColor: p.get('foregroundColor').value,
        backgroundColor: p.get('backgroundColor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        splashColor: p.get('splashColor').value,
        elevation: p.get('elevation').value,
        focusElevation: p.get('focusElevation').value,
        hoverElevation: p.get('hoverElevation').value,
        disabledElevation: p.get('disabledElevation').value,
        highlightElevation: p.get('highlightElevation').value,
        shape: p.get('shape').value,
        enableFeedback: p.get('enableFeedback').value,
        iconSize: p.get('iconSize').value,
        sizeConstraints: p.get('sizeConstraints').value,
        smallSizeConstraints: p.get('smallSizeConstraints').value,
        largeSizeConstraints: p.get('largeSizeConstraints').value,
        extendedSizeConstraints: p.get('extendedSizeConstraints').value,
        extendedIconLabelSpacing: p.get('extendedIconLabelSpacing').value,
        extendedPadding: p.get('extendedPadding').value,
        extendedTextStyle: p.get('extendedTextStyle').value,
        mouseCursor: p.get('mouseCursor').value,
      ),
    );
    mateParams.put('foregroundColor', init: foregroundColor);
    mateParams.put('backgroundColor', init: backgroundColor);
    mateParams.put('focusColor', init: focusColor);
    mateParams.put('hoverColor', init: hoverColor);
    mateParams.put('splashColor', init: splashColor);
    mateParams.put('elevation', init: elevation);
    mateParams.put('focusElevation', init: focusElevation);
    mateParams.put('hoverElevation', init: hoverElevation);
    mateParams.put('disabledElevation', init: disabledElevation);
    mateParams.put('highlightElevation', init: highlightElevation);
    mateParams.put('shape', init: shape);
    mateParams.put('enableFeedback', init: enableFeedback);
    mateParams.put('iconSize', init: iconSize);
    mateParams.put('sizeConstraints', init: sizeConstraints);
    mateParams.put('smallSizeConstraints', init: smallSizeConstraints);
    mateParams.put('largeSizeConstraints', init: largeSizeConstraints);
    mateParams.put('extendedSizeConstraints', init: extendedSizeConstraints);
    mateParams.put('extendedIconLabelSpacing', init: extendedIconLabelSpacing);
    mateParams.put('extendedPadding', init: extendedPadding);
    mateParams.put('extendedTextStyle', init: extendedTextStyle);
    mateParams.put('mouseCursor', init: mouseCursor);
  }
}
