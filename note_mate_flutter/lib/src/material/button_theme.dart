// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/button_theme.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/material/color_scheme.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';

/// class ButtonTheme extends InheritedTheme
class ButtonTheme$Mate extends ButtonTheme with WidgetMate<ButtonTheme$Mate> {
  /// ButtonTheme ButtonTheme({Key? key, ButtonTextTheme textTheme = ButtonTextTheme.normal, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize, required Widget child})
  ButtonTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , hasDefaultValue:true, defaultValueCode:ButtonTextTheme.normal
    required ButtonTextTheme textTheme,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , hasDefaultValue:true, defaultValueCode:ButtonBarLayoutBehavior.padded
    required ButtonBarLayoutBehavior layoutBehavior,

    /// optionalParameters: {double minWidth = 88.0} , hasDefaultValue:true, defaultValueCode:88.0
    required double minWidth,

    /// optionalParameters: {double height = 36.0} , hasDefaultValue:true, defaultValueCode:36.0
    required double height,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {bool alignedDropdown = false} , hasDefaultValue:true, defaultValueCode:false
    required bool alignedDropdown,

    /// optionalParameters: {Color? buttonColor} , hasDefaultValue:false, defaultValueCode:null
    Color? buttonColor,

    /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , hasDefaultValue:false, defaultValueCode:null
    ColorScheme? colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          textTheme: textTheme,
          layoutBehavior: layoutBehavior,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ButtonTheme$Mate(
        key: p.get('key').value,
        textTheme: p.get('textTheme').value,
        layoutBehavior: p.get('layoutBehavior').value,
        minWidth: p.get('minWidth').value,
        height: p.get('height').value,
        padding: p.get('padding').value,
        shape: p.get('shape').value,
        alignedDropdown: p.get('alignedDropdown').value,
        buttonColor: p.get('buttonColor').value,
        disabledColor: p.get('disabledColor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        highlightColor: p.get('highlightColor').value,
        splashColor: p.get('splashColor').value,
        colorScheme: p.get('colorScheme').value,
        materialTapTargetSize: p.get('materialTapTargetSize').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('textTheme', init: textTheme);
    mateParams.put('layoutBehavior', init: layoutBehavior);
    mateParams.put('minWidth', init: minWidth);
    mateParams.put('height', init: height);
    mateParams.put('padding', init: padding);
    mateParams.put('shape', init: shape);
    mateParams.put('alignedDropdown', init: alignedDropdown);
    mateParams.put('buttonColor', init: buttonColor);
    mateParams.put('disabledColor', init: disabledColor);
    mateParams.put('focusColor', init: focusColor);
    mateParams.put('hoverColor', init: hoverColor);
    mateParams.put('highlightColor', init: highlightColor);
    mateParams.put('splashColor', init: splashColor);
    mateParams.put('colorScheme', init: colorScheme);
    mateParams.put('materialTapTargetSize', init: materialTapTargetSize);
    mateParams.put('child', init: child);
  }

  /// ButtonTheme ButtonTheme.fromButtonThemeData({Key? key, required ButtonThemeData data, required Widget child})
  ButtonTheme$Mate.fromButtonThemeData({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ButtonThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required ButtonThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super.fromButtonThemeData(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ButtonTheme$Mate.fromButtonThemeData(
        key: p.get('key').value,
        data: p.get('data').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('data', init: data);
    mateParams.put('child', init: child);
  }
}

/// class ButtonThemeData with Diagnosticable
class ButtonThemeData$Mate extends ButtonThemeData with Mate<ButtonThemeData$Mate> {
  /// ButtonThemeData ButtonThemeData({ButtonTextTheme textTheme = ButtonTextTheme.normal, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize})
  ButtonThemeData$Mate({
    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , hasDefaultValue:true, defaultValueCode:ButtonTextTheme.normal
    required ButtonTextTheme textTheme,

    /// optionalParameters: {double minWidth = 88.0} , hasDefaultValue:true, defaultValueCode:88.0
    required double minWidth,

    /// optionalParameters: {double height = 36.0} , hasDefaultValue:true, defaultValueCode:36.0
    required double height,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , hasDefaultValue:true, defaultValueCode:ButtonBarLayoutBehavior.padded
    required ButtonBarLayoutBehavior layoutBehavior,

    /// optionalParameters: {bool alignedDropdown = false} , hasDefaultValue:true, defaultValueCode:false
    required bool alignedDropdown,

    /// optionalParameters: {Color? buttonColor} , hasDefaultValue:false, defaultValueCode:null
    Color? buttonColor,

    /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledColor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
    Color? highlightColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , hasDefaultValue:false, defaultValueCode:null
    ColorScheme? colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,
  }) : super(
          textTheme: textTheme,
          minWidth: minWidth,
          height: height,
          padding: padding,
          shape: shape,
          layoutBehavior: layoutBehavior,
          alignedDropdown: alignedDropdown,
          buttonColor: buttonColor,
          disabledColor: disabledColor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          splashColor: splashColor,
          colorScheme: colorScheme,
          materialTapTargetSize: materialTapTargetSize,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ButtonThemeData$Mate(
        textTheme: p.get('textTheme').value,
        minWidth: p.get('minWidth').value,
        height: p.get('height').value,
        padding: p.get('padding').value,
        shape: p.get('shape').value,
        layoutBehavior: p.get('layoutBehavior').value,
        alignedDropdown: p.get('alignedDropdown').value,
        buttonColor: p.get('buttonColor').value,
        disabledColor: p.get('disabledColor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        highlightColor: p.get('highlightColor').value,
        splashColor: p.get('splashColor').value,
        colorScheme: p.get('colorScheme').value,
        materialTapTargetSize: p.get('materialTapTargetSize').value,
      ),
    );
    mateParams.put('textTheme', init: textTheme);
    mateParams.put('minWidth', init: minWidth);
    mateParams.put('height', init: height);
    mateParams.put('padding', init: padding);
    mateParams.put('shape', init: shape);
    mateParams.put('layoutBehavior', init: layoutBehavior);
    mateParams.put('alignedDropdown', init: alignedDropdown);
    mateParams.put('buttonColor', init: buttonColor);
    mateParams.put('disabledColor', init: disabledColor);
    mateParams.put('focusColor', init: focusColor);
    mateParams.put('hoverColor', init: hoverColor);
    mateParams.put('highlightColor', init: highlightColor);
    mateParams.put('splashColor', init: splashColor);
    mateParams.put('colorScheme', init: colorScheme);
    mateParams.put('materialTapTargetSize', init: materialTapTargetSize);
  }
}
