// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/app_bar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:core';
import 'package:flutter/src/widgets/preferred_size.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/services/system_chrome.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/basic_types.dart';

/// class AppBar extends StatefulWidget implements PreferredSizeWidget
class AppBar$Mate extends AppBar with WidgetMate<AppBar$Mate> {
  /// AppBar AppBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, double? scrolledUnderElevation, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? backgroundColor, Color? foregroundColor, Brightness? brightness, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, bool excludeHeaderSemantics = false, double? titleSpacing, double toolbarOpacity = 1.0, double bottomOpacity = 1.0, double? toolbarHeight, double? leadingWidth, bool? backwardsCompatibility, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false})
  AppBar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , hasDefaultValue:true, defaultValueCode:true
    required bool automaticallyImplyLeading,

    /// optionalParameters: {Widget? title} , hasDefaultValue:false, defaultValueCode:null
    Widget? title,

    /// optionalParameters: {List<Widget>? actions} , hasDefaultValue:false, defaultValueCode:null
    List<Widget>? actions,

    /// optionalParameters: {Widget? flexibleSpace} , hasDefaultValue:false, defaultValueCode:null
    Widget? flexibleSpace,

    /// optionalParameters: {PreferredSizeWidget? bottom} , hasDefaultValue:false, defaultValueCode:null
    PreferredSizeWidget? bottom,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? scrolledUnderElevation} , hasDefaultValue:false, defaultValueCode:null
    double? scrolledUnderElevation,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , hasDefaultValue:true, defaultValueCode:defaultScrollNotificationPredicate
    required ScrollNotificationPredicate notificationPredicate,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? foregroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? foregroundColor,

    /// optionalParameters: {IconThemeData? iconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? iconTheme,

    /// optionalParameters: {IconThemeData? actionsIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? actionsIconTheme,

    /// optionalParameters: {bool primary = true} , hasDefaultValue:true, defaultValueCode:true
    required bool primary,

    /// optionalParameters: {bool? centerTitle} , hasDefaultValue:false, defaultValueCode:null
    bool? centerTitle,

    /// optionalParameters: {bool excludeHeaderSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeHeaderSemantics,

    /// optionalParameters: {double? titleSpacing} , hasDefaultValue:false, defaultValueCode:null
    double? titleSpacing,

    /// optionalParameters: {double toolbarOpacity = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double toolbarOpacity,

    /// optionalParameters: {double bottomOpacity = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double bottomOpacity,

    /// optionalParameters: {double? toolbarHeight} , hasDefaultValue:false, defaultValueCode:null
    double? toolbarHeight,

    /// optionalParameters: {double? leadingWidth} , hasDefaultValue:false, defaultValueCode:null
    double? leadingWidth,

    /// optionalParameters: {TextStyle? toolbarTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? toolbarTextStyle,

    /// optionalParameters: {TextStyle? titleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? titleTextStyle,

    /// optionalParameters: {SystemUiOverlayStyle? systemOverlayStyle} , hasDefaultValue:false, defaultValueCode:null
    SystemUiOverlayStyle? systemOverlayStyle,

    /// optionalParameters: {bool forceMaterialTransparency = false} , hasDefaultValue:true, defaultValueCode:false
    required bool forceMaterialTransparency,
  }) : super(
          key: key,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          title: title,
          actions: actions,
          flexibleSpace: flexibleSpace,
          bottom: bottom,
          elevation: elevation,
          scrolledUnderElevation: scrolledUnderElevation,
          notificationPredicate: notificationPredicate,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          backgroundColor: backgroundColor,
          foregroundColor: foregroundColor,
          iconTheme: iconTheme,
          actionsIconTheme: actionsIconTheme,
          primary: primary,
          centerTitle: centerTitle,
          excludeHeaderSemantics: excludeHeaderSemantics,
          titleSpacing: titleSpacing,
          toolbarOpacity: toolbarOpacity,
          bottomOpacity: bottomOpacity,
          toolbarHeight: toolbarHeight,
          leadingWidth: leadingWidth,
          toolbarTextStyle: toolbarTextStyle,
          titleTextStyle: titleTextStyle,
          systemOverlayStyle: systemOverlayStyle,
          forceMaterialTransparency: forceMaterialTransparency,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AppBar$Mate(
        key: p.get('key').value,
        leading: p.get('leading').value,
        automaticallyImplyLeading: p.get('automaticallyImplyLeading').value,
        title: p.get('title').value,
        actions: p.get('actions').value,
        flexibleSpace: p.get('flexibleSpace').value,
        bottom: p.get('bottom').value,
        elevation: p.get('elevation').value,
        scrolledUnderElevation: p.get('scrolledUnderElevation').value,
        notificationPredicate: p.get('notificationPredicate').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        shape: p.get('shape').value,
        backgroundColor: p.get('backgroundColor').value,
        foregroundColor: p.get('foregroundColor').value,
        iconTheme: p.get('iconTheme').value,
        actionsIconTheme: p.get('actionsIconTheme').value,
        primary: p.get('primary').value,
        centerTitle: p.get('centerTitle').value,
        excludeHeaderSemantics: p.get('excludeHeaderSemantics').value,
        titleSpacing: p.get('titleSpacing').value,
        toolbarOpacity: p.get('toolbarOpacity').value,
        bottomOpacity: p.get('bottomOpacity').value,
        toolbarHeight: p.get('toolbarHeight').value,
        leadingWidth: p.get('leadingWidth').value,
        toolbarTextStyle: p.get('toolbarTextStyle').value,
        titleTextStyle: p.get('titleTextStyle').value,
        systemOverlayStyle: p.get('systemOverlayStyle').value,
        forceMaterialTransparency: p.get('forceMaterialTransparency').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('leading', leading);
    mateParams.put('automaticallyImplyLeading', automaticallyImplyLeading);
    mateParams.put('title', title);
    mateParams.putList('actions', actions);
    mateParams.put('flexibleSpace', flexibleSpace);
    mateParams.put('bottom', bottom);
    mateParams.put('elevation', elevation);
    mateParams.put('scrolledUnderElevation', scrolledUnderElevation);
    mateParams.put('notificationPredicate', notificationPredicate);
    mateParams.put('shadowColor', shadowColor);
    mateParams.put('surfaceTintColor', surfaceTintColor);
    mateParams.put('shape', shape);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('foregroundColor', foregroundColor);
    mateParams.put('iconTheme', iconTheme);
    mateParams.put('actionsIconTheme', actionsIconTheme);
    mateParams.put('primary', primary);
    mateParams.put('centerTitle', centerTitle);
    mateParams.put('excludeHeaderSemantics', excludeHeaderSemantics);
    mateParams.put('titleSpacing', titleSpacing);
    mateParams.put('toolbarOpacity', toolbarOpacity);
    mateParams.put('bottomOpacity', bottomOpacity);
    mateParams.put('toolbarHeight', toolbarHeight);
    mateParams.put('leadingWidth', leadingWidth);
    mateParams.put('toolbarTextStyle', toolbarTextStyle);
    mateParams.put('titleTextStyle', titleTextStyle);
    mateParams.put('systemOverlayStyle', systemOverlayStyle);
    mateParams.put('forceMaterialTransparency', forceMaterialTransparency);
  }
}

/// class SliverAppBar extends StatefulWidget
class SliverAppBar$Mate extends SliverAppBar with WidgetMate<SliverAppBar$Mate> {
  /// SliverAppBar SliverAppBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, double? scrolledUnderElevation, Color? shadowColor, Color? surfaceTintColor, bool forceElevated = false, Color? backgroundColor, Color? foregroundColor, Brightness? brightness, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, bool excludeHeaderSemantics = false, double? titleSpacing, double? collapsedHeight, double? expandedHeight, bool floating = false, bool pinned = false, bool snap = false, bool stretch = false, double stretchTriggerOffset = 100.0, Future<void> Function()? onStretchTrigger, ShapeBorder? shape, double toolbarHeight = kToolbarHeight, double? leadingWidth, bool? backwardsCompatibility, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false})
  SliverAppBar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {bool automaticallyImplyLeading = true} , hasDefaultValue:true, defaultValueCode:true
    required bool automaticallyImplyLeading,

    /// optionalParameters: {Widget? title} , hasDefaultValue:false, defaultValueCode:null
    Widget? title,

    /// optionalParameters: {List<Widget>? actions} , hasDefaultValue:false, defaultValueCode:null
    List<Widget>? actions,

    /// optionalParameters: {Widget? flexibleSpace} , hasDefaultValue:false, defaultValueCode:null
    Widget? flexibleSpace,

    /// optionalParameters: {PreferredSizeWidget? bottom} , hasDefaultValue:false, defaultValueCode:null
    PreferredSizeWidget? bottom,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? scrolledUnderElevation} , hasDefaultValue:false, defaultValueCode:null
    double? scrolledUnderElevation,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {bool forceElevated = false} , hasDefaultValue:true, defaultValueCode:false
    required bool forceElevated,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? foregroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? foregroundColor,

    /// optionalParameters: {IconThemeData? iconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? iconTheme,

    /// optionalParameters: {IconThemeData? actionsIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? actionsIconTheme,

    /// optionalParameters: {bool primary = true} , hasDefaultValue:true, defaultValueCode:true
    required bool primary,

    /// optionalParameters: {bool? centerTitle} , hasDefaultValue:false, defaultValueCode:null
    bool? centerTitle,

    /// optionalParameters: {bool excludeHeaderSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeHeaderSemantics,

    /// optionalParameters: {double? titleSpacing} , hasDefaultValue:false, defaultValueCode:null
    double? titleSpacing,

    /// optionalParameters: {double? collapsedHeight} , hasDefaultValue:false, defaultValueCode:null
    double? collapsedHeight,

    /// optionalParameters: {double? expandedHeight} , hasDefaultValue:false, defaultValueCode:null
    double? expandedHeight,

    /// optionalParameters: {bool floating = false} , hasDefaultValue:true, defaultValueCode:false
    required bool floating,

    /// optionalParameters: {bool pinned = false} , hasDefaultValue:true, defaultValueCode:false
    required bool pinned,

    /// optionalParameters: {bool snap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool snap,

    /// optionalParameters: {bool stretch = false} , hasDefaultValue:true, defaultValueCode:false
    required bool stretch,

    /// optionalParameters: {double stretchTriggerOffset = 100.0} , hasDefaultValue:true, defaultValueCode:100.0
    required double stretchTriggerOffset,

    /// optionalParameters: {Future<void> Function()? onStretchTrigger} , hasDefaultValue:false, defaultValueCode:null
    AsyncCallback? onStretchTrigger,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {double toolbarHeight = kToolbarHeight} , hasDefaultValue:true, defaultValueCode:kToolbarHeight
    required double toolbarHeight,

    /// optionalParameters: {double? leadingWidth} , hasDefaultValue:false, defaultValueCode:null
    double? leadingWidth,

    /// optionalParameters: {TextStyle? toolbarTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? toolbarTextStyle,

    /// optionalParameters: {TextStyle? titleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? titleTextStyle,

    /// optionalParameters: {SystemUiOverlayStyle? systemOverlayStyle} , hasDefaultValue:false, defaultValueCode:null
    SystemUiOverlayStyle? systemOverlayStyle,

    /// optionalParameters: {bool forceMaterialTransparency = false} , hasDefaultValue:true, defaultValueCode:false
    required bool forceMaterialTransparency,
  }) : super(
          key: key,
          leading: leading,
          automaticallyImplyLeading: automaticallyImplyLeading,
          title: title,
          actions: actions,
          flexibleSpace: flexibleSpace,
          bottom: bottom,
          elevation: elevation,
          scrolledUnderElevation: scrolledUnderElevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          forceElevated: forceElevated,
          backgroundColor: backgroundColor,
          foregroundColor: foregroundColor,
          iconTheme: iconTheme,
          actionsIconTheme: actionsIconTheme,
          primary: primary,
          centerTitle: centerTitle,
          excludeHeaderSemantics: excludeHeaderSemantics,
          titleSpacing: titleSpacing,
          collapsedHeight: collapsedHeight,
          expandedHeight: expandedHeight,
          floating: floating,
          pinned: pinned,
          snap: snap,
          stretch: stretch,
          stretchTriggerOffset: stretchTriggerOffset,
          onStretchTrigger: onStretchTrigger,
          shape: shape,
          toolbarHeight: toolbarHeight,
          leadingWidth: leadingWidth,
          toolbarTextStyle: toolbarTextStyle,
          titleTextStyle: titleTextStyle,
          systemOverlayStyle: systemOverlayStyle,
          forceMaterialTransparency: forceMaterialTransparency,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverAppBar$Mate(
        key: p.get('key').value,
        leading: p.get('leading').value,
        automaticallyImplyLeading: p.get('automaticallyImplyLeading').value,
        title: p.get('title').value,
        actions: p.get('actions').value,
        flexibleSpace: p.get('flexibleSpace').value,
        bottom: p.get('bottom').value,
        elevation: p.get('elevation').value,
        scrolledUnderElevation: p.get('scrolledUnderElevation').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        forceElevated: p.get('forceElevated').value,
        backgroundColor: p.get('backgroundColor').value,
        foregroundColor: p.get('foregroundColor').value,
        iconTheme: p.get('iconTheme').value,
        actionsIconTheme: p.get('actionsIconTheme').value,
        primary: p.get('primary').value,
        centerTitle: p.get('centerTitle').value,
        excludeHeaderSemantics: p.get('excludeHeaderSemantics').value,
        titleSpacing: p.get('titleSpacing').value,
        collapsedHeight: p.get('collapsedHeight').value,
        expandedHeight: p.get('expandedHeight').value,
        floating: p.get('floating').value,
        pinned: p.get('pinned').value,
        snap: p.get('snap').value,
        stretch: p.get('stretch').value,
        stretchTriggerOffset: p.get('stretchTriggerOffset').value,
        onStretchTrigger: p.get('onStretchTrigger').value,
        shape: p.get('shape').value,
        toolbarHeight: p.get('toolbarHeight').value,
        leadingWidth: p.get('leadingWidth').value,
        toolbarTextStyle: p.get('toolbarTextStyle').value,
        titleTextStyle: p.get('titleTextStyle').value,
        systemOverlayStyle: p.get('systemOverlayStyle').value,
        forceMaterialTransparency: p.get('forceMaterialTransparency').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('leading', leading);
    mateParams.put('automaticallyImplyLeading', automaticallyImplyLeading);
    mateParams.put('title', title);
    mateParams.putList('actions', actions);
    mateParams.put('flexibleSpace', flexibleSpace);
    mateParams.put('bottom', bottom);
    mateParams.put('elevation', elevation);
    mateParams.put('scrolledUnderElevation', scrolledUnderElevation);
    mateParams.put('shadowColor', shadowColor);
    mateParams.put('surfaceTintColor', surfaceTintColor);
    mateParams.put('forceElevated', forceElevated);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('foregroundColor', foregroundColor);
    mateParams.put('iconTheme', iconTheme);
    mateParams.put('actionsIconTheme', actionsIconTheme);
    mateParams.put('primary', primary);
    mateParams.put('centerTitle', centerTitle);
    mateParams.put('excludeHeaderSemantics', excludeHeaderSemantics);
    mateParams.put('titleSpacing', titleSpacing);
    mateParams.put('collapsedHeight', collapsedHeight);
    mateParams.put('expandedHeight', expandedHeight);
    mateParams.put('floating', floating);
    mateParams.put('pinned', pinned);
    mateParams.put('snap', snap);
    mateParams.put('stretch', stretch);
    mateParams.put('stretchTriggerOffset', stretchTriggerOffset);
    mateParams.put('onStretchTrigger', onStretchTrigger);
    mateParams.put('shape', shape);
    mateParams.put('toolbarHeight', toolbarHeight);
    mateParams.put('leadingWidth', leadingWidth);
    mateParams.put('toolbarTextStyle', toolbarTextStyle);
    mateParams.put('titleTextStyle', titleTextStyle);
    mateParams.put('systemOverlayStyle', systemOverlayStyle);
    mateParams.put('forceMaterialTransparency', forceMaterialTransparency);
  }
}
