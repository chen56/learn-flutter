// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/scaffold.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/preferred_size.dart';
import 'package:flutter/src/material/floating_action_button_location.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/material/drawer.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class ScaffoldMessenger extends StatefulWidget
class ScaffoldMessenger$Mate extends ScaffoldMessenger with WidgetMate<ScaffoldMessenger$Mate> {
  /// ScaffoldMessenger ScaffoldMessenger({Key? key, required Widget child})
  ScaffoldMessenger$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScaffoldMessenger$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('child', child);
  }
}

/// class ScaffoldPrelayoutGeometry
class ScaffoldPrelayoutGeometry$Mate extends ScaffoldPrelayoutGeometry with Mate<ScaffoldPrelayoutGeometry$Mate> {
  /// ScaffoldPrelayoutGeometry ScaffoldPrelayoutGeometry({required Size bottomSheetSize, required double contentBottom, required double contentTop, required Size floatingActionButtonSize, required EdgeInsets minInsets, required EdgeInsets minViewPadding, required Size scaffoldSize, required Size snackBarSize, required Size materialBannerSize, required TextDirection textDirection})
  ScaffoldPrelayoutGeometry$Mate({
    /// optionalParameters: {required Size bottomSheetSize} , hasDefaultValue:false, defaultValueCode:null
    required Size bottomSheetSize,

    /// optionalParameters: {required double contentBottom} , hasDefaultValue:false, defaultValueCode:null
    required double contentBottom,

    /// optionalParameters: {required double contentTop} , hasDefaultValue:false, defaultValueCode:null
    required double contentTop,

    /// optionalParameters: {required Size floatingActionButtonSize} , hasDefaultValue:false, defaultValueCode:null
    required Size floatingActionButtonSize,

    /// optionalParameters: {required EdgeInsets minInsets} , hasDefaultValue:false, defaultValueCode:null
    required EdgeInsets minInsets,

    /// optionalParameters: {required EdgeInsets minViewPadding} , hasDefaultValue:false, defaultValueCode:null
    required EdgeInsets minViewPadding,

    /// optionalParameters: {required Size scaffoldSize} , hasDefaultValue:false, defaultValueCode:null
    required Size scaffoldSize,

    /// optionalParameters: {required Size snackBarSize} , hasDefaultValue:false, defaultValueCode:null
    required Size snackBarSize,

    /// optionalParameters: {required Size materialBannerSize} , hasDefaultValue:false, defaultValueCode:null
    required Size materialBannerSize,

    /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
    required TextDirection textDirection,
  }) : super(
          bottomSheetSize: bottomSheetSize,
          contentBottom: contentBottom,
          contentTop: contentTop,
          floatingActionButtonSize: floatingActionButtonSize,
          minInsets: minInsets,
          minViewPadding: minViewPadding,
          scaffoldSize: scaffoldSize,
          snackBarSize: snackBarSize,
          materialBannerSize: materialBannerSize,
          textDirection: textDirection,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScaffoldPrelayoutGeometry$Mate(
        bottomSheetSize: p.get('bottomSheetSize').value,
        contentBottom: p.get('contentBottom').value,
        contentTop: p.get('contentTop').value,
        floatingActionButtonSize: p.get('floatingActionButtonSize').value,
        minInsets: p.get('minInsets').value,
        minViewPadding: p.get('minViewPadding').value,
        scaffoldSize: p.get('scaffoldSize').value,
        snackBarSize: p.get('snackBarSize').value,
        materialBannerSize: p.get('materialBannerSize').value,
        textDirection: p.get('textDirection').value,
      ),
    );
    mateParams.put('bottomSheetSize', bottomSheetSize);
    mateParams.put('contentBottom', contentBottom);
    mateParams.put('contentTop', contentTop);
    mateParams.put('floatingActionButtonSize', floatingActionButtonSize);
    mateParams.put('minInsets', minInsets);
    mateParams.put('minViewPadding', minViewPadding);
    mateParams.put('scaffoldSize', scaffoldSize);
    mateParams.put('snackBarSize', snackBarSize);
    mateParams.put('materialBannerSize', materialBannerSize);
    mateParams.put('textDirection', textDirection);
  }
}

/// class ScaffoldGeometry
class ScaffoldGeometry$Mate extends ScaffoldGeometry with Mate<ScaffoldGeometry$Mate> {
  /// ScaffoldGeometry ScaffoldGeometry({double? bottomNavigationBarTop, Rect? floatingActionButtonArea})
  ScaffoldGeometry$Mate({
    /// optionalParameters: {double? bottomNavigationBarTop} , hasDefaultValue:false, defaultValueCode:null
    double? bottomNavigationBarTop,

    /// optionalParameters: {Rect? floatingActionButtonArea} , hasDefaultValue:false, defaultValueCode:null
    Rect? floatingActionButtonArea,
  }) : super(
          bottomNavigationBarTop: bottomNavigationBarTop,
          floatingActionButtonArea: floatingActionButtonArea,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScaffoldGeometry$Mate(
        bottomNavigationBarTop: p.get('bottomNavigationBarTop').value,
        floatingActionButtonArea: p.get('floatingActionButtonArea').value,
      ),
    );
    mateParams.put('bottomNavigationBarTop', bottomNavigationBarTop);
    mateParams.put('floatingActionButtonArea', floatingActionButtonArea);
  }
}

/// class Scaffold extends StatefulWidget
class Scaffold$Mate extends Scaffold with WidgetMate<Scaffold$Mate> {
  /// Scaffold Scaffold({Key? key, PreferredSizeWidget? appBar, Widget? body, Widget? floatingActionButton, FloatingActionButtonLocation? floatingActionButtonLocation, FloatingActionButtonAnimator? floatingActionButtonAnimator, List<Widget>? persistentFooterButtons, AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd, Widget? drawer, void Function(bool)? onDrawerChanged, Widget? endDrawer, void Function(bool)? onEndDrawerChanged, Widget? bottomNavigationBar, Widget? bottomSheet, Color? backgroundColor, bool? resizeToAvoidBottomInset, bool primary = true, DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start, bool extendBody = false, bool extendBodyBehindAppBar = false, Color? drawerScrimColor, double? drawerEdgeDragWidth, bool drawerEnableOpenDragGesture = true, bool endDrawerEnableOpenDragGesture = true, String? restorationId})
  Scaffold$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {PreferredSizeWidget? appBar} , hasDefaultValue:false, defaultValueCode:null
    PreferredSizeWidget? appBar,

    /// optionalParameters: {Widget? body} , hasDefaultValue:false, defaultValueCode:null
    Widget? body,

    /// optionalParameters: {Widget? floatingActionButton} , hasDefaultValue:false, defaultValueCode:null
    Widget? floatingActionButton,

    /// optionalParameters: {FloatingActionButtonLocation? floatingActionButtonLocation} , hasDefaultValue:false, defaultValueCode:null
    FloatingActionButtonLocation? floatingActionButtonLocation,

    /// optionalParameters: {FloatingActionButtonAnimator? floatingActionButtonAnimator} , hasDefaultValue:false, defaultValueCode:null
    FloatingActionButtonAnimator? floatingActionButtonAnimator,

    /// optionalParameters: {List<Widget>? persistentFooterButtons} , hasDefaultValue:false, defaultValueCode:null
    List<Widget>? persistentFooterButtons,

    /// optionalParameters: {AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd} , hasDefaultValue:true, defaultValueCode:AlignmentDirectional.centerEnd
    required AlignmentDirectional persistentFooterAlignment,

    /// optionalParameters: {Widget? drawer} , hasDefaultValue:false, defaultValueCode:null
    Widget? drawer,

    /// optionalParameters: {void Function(bool)? onDrawerChanged} , hasDefaultValue:false, defaultValueCode:null
    DrawerCallback? onDrawerChanged,

    /// optionalParameters: {Widget? endDrawer} , hasDefaultValue:false, defaultValueCode:null
    Widget? endDrawer,

    /// optionalParameters: {void Function(bool)? onEndDrawerChanged} , hasDefaultValue:false, defaultValueCode:null
    DrawerCallback? onEndDrawerChanged,

    /// optionalParameters: {Widget? bottomNavigationBar} , hasDefaultValue:false, defaultValueCode:null
    Widget? bottomNavigationBar,

    /// optionalParameters: {Widget? bottomSheet} , hasDefaultValue:false, defaultValueCode:null
    Widget? bottomSheet,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {bool? resizeToAvoidBottomInset} , hasDefaultValue:false, defaultValueCode:null
    bool? resizeToAvoidBottomInset,

    /// optionalParameters: {bool primary = true} , hasDefaultValue:true, defaultValueCode:true
    required bool primary,

    /// optionalParameters: {DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior drawerDragStartBehavior,

    /// optionalParameters: {bool extendBody = false} , hasDefaultValue:true, defaultValueCode:false
    required bool extendBody,

    /// optionalParameters: {bool extendBodyBehindAppBar = false} , hasDefaultValue:true, defaultValueCode:false
    required bool extendBodyBehindAppBar,

    /// optionalParameters: {Color? drawerScrimColor} , hasDefaultValue:false, defaultValueCode:null
    Color? drawerScrimColor,

    /// optionalParameters: {double? drawerEdgeDragWidth} , hasDefaultValue:false, defaultValueCode:null
    double? drawerEdgeDragWidth,

    /// optionalParameters: {bool drawerEnableOpenDragGesture = true} , hasDefaultValue:true, defaultValueCode:true
    required bool drawerEnableOpenDragGesture,

    /// optionalParameters: {bool endDrawerEnableOpenDragGesture = true} , hasDefaultValue:true, defaultValueCode:true
    required bool endDrawerEnableOpenDragGesture,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,
  }) : super(
          key: key,
          appBar: appBar,
          body: body,
          floatingActionButton: floatingActionButton,
          floatingActionButtonLocation: floatingActionButtonLocation,
          floatingActionButtonAnimator: floatingActionButtonAnimator,
          persistentFooterButtons: persistentFooterButtons,
          persistentFooterAlignment: persistentFooterAlignment,
          drawer: drawer,
          onDrawerChanged: onDrawerChanged,
          endDrawer: endDrawer,
          onEndDrawerChanged: onEndDrawerChanged,
          bottomNavigationBar: bottomNavigationBar,
          bottomSheet: bottomSheet,
          backgroundColor: backgroundColor,
          resizeToAvoidBottomInset: resizeToAvoidBottomInset,
          primary: primary,
          drawerDragStartBehavior: drawerDragStartBehavior,
          extendBody: extendBody,
          extendBodyBehindAppBar: extendBodyBehindAppBar,
          drawerScrimColor: drawerScrimColor,
          drawerEdgeDragWidth: drawerEdgeDragWidth,
          drawerEnableOpenDragGesture: drawerEnableOpenDragGesture,
          endDrawerEnableOpenDragGesture: endDrawerEnableOpenDragGesture,
          restorationId: restorationId,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Scaffold$Mate(
        key: p.get('key').value,
        appBar: p.get('appBar').value,
        body: p.get('body').value,
        floatingActionButton: p.get('floatingActionButton').value,
        floatingActionButtonLocation: p.get('floatingActionButtonLocation').value,
        floatingActionButtonAnimator: p.get('floatingActionButtonAnimator').value,
        persistentFooterButtons: p.get('persistentFooterButtons').value,
        persistentFooterAlignment: p.get('persistentFooterAlignment').value,
        drawer: p.get('drawer').value,
        onDrawerChanged: p.get('onDrawerChanged').value,
        endDrawer: p.get('endDrawer').value,
        onEndDrawerChanged: p.get('onEndDrawerChanged').value,
        bottomNavigationBar: p.get('bottomNavigationBar').value,
        bottomSheet: p.get('bottomSheet').value,
        backgroundColor: p.get('backgroundColor').value,
        resizeToAvoidBottomInset: p.get('resizeToAvoidBottomInset').value,
        primary: p.get('primary').value,
        drawerDragStartBehavior: p.get('drawerDragStartBehavior').value,
        extendBody: p.get('extendBody').value,
        extendBodyBehindAppBar: p.get('extendBodyBehindAppBar').value,
        drawerScrimColor: p.get('drawerScrimColor').value,
        drawerEdgeDragWidth: p.get('drawerEdgeDragWidth').value,
        drawerEnableOpenDragGesture: p.get('drawerEnableOpenDragGesture').value,
        endDrawerEnableOpenDragGesture: p.get('endDrawerEnableOpenDragGesture').value,
        restorationId: p.get('restorationId').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('appBar', appBar);
    mateParams.put('body', body);
    mateParams.put('floatingActionButton', floatingActionButton);
    mateParams.put('floatingActionButtonLocation', floatingActionButtonLocation);
    mateParams.put('floatingActionButtonAnimator', floatingActionButtonAnimator);
    mateParams.putList('persistentFooterButtons', persistentFooterButtons);
    mateParams.put('persistentFooterAlignment', persistentFooterAlignment);
    mateParams.put('drawer', drawer);
    mateParams.put('onDrawerChanged', onDrawerChanged);
    mateParams.put('endDrawer', endDrawer);
    mateParams.put('onEndDrawerChanged', onEndDrawerChanged);
    mateParams.put('bottomNavigationBar', bottomNavigationBar);
    mateParams.put('bottomSheet', bottomSheet);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('resizeToAvoidBottomInset', resizeToAvoidBottomInset);
    mateParams.put('primary', primary);
    mateParams.put('drawerDragStartBehavior', drawerDragStartBehavior);
    mateParams.put('extendBody', extendBody);
    mateParams.put('extendBodyBehindAppBar', extendBodyBehindAppBar);
    mateParams.put('drawerScrimColor', drawerScrimColor);
    mateParams.put('drawerEdgeDragWidth', drawerEdgeDragWidth);
    mateParams.put('drawerEnableOpenDragGesture', drawerEnableOpenDragGesture);
    mateParams.put('endDrawerEnableOpenDragGesture', endDrawerEnableOpenDragGesture);
    mateParams.put('restorationId', restorationId);
  }
}
