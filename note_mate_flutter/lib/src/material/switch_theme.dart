// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/switch_theme.dart';
import 'package:flutter/src/material/material_state.dart';
import 'dart:ui';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:core';
import 'package:flutter/src/widgets/icon.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class SwitchThemeData with Diagnosticable
class SwitchThemeData$Mate extends SwitchThemeData with Mate<SwitchThemeData$Mate> {
  /// SwitchThemeData SwitchThemeData({MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialTapTargetSize? materialTapTargetSize, MaterialStateProperty<MouseCursor?>? mouseCursor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialStateProperty<Icon?>? thumbIcon})
  SwitchThemeData$Mate({
    /// optionalParameters: {MaterialStateProperty<Color?>? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackOutlineColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackOutlineColor,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
    double? splashRadius,

    /// optionalParameters: {MaterialStateProperty<Icon?>? thumbIcon} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Icon?>? thumbIcon,
  }) : super(
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackOutlineColor: trackOutlineColor,
          materialTapTargetSize: materialTapTargetSize,
          mouseCursor: mouseCursor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          thumbIcon: thumbIcon,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SwitchThemeData$Mate(
        thumbColor: p.get('thumbColor').build(),
        trackColor: p.get('trackColor').build(),
        trackOutlineColor: p.get('trackOutlineColor').build(),
        materialTapTargetSize: p.get('materialTapTargetSize').build(),
        mouseCursor: p.get('mouseCursor').build(),
        overlayColor: p.get('overlayColor').build(),
        splashRadius: p.get('splashRadius').build(),
        thumbIcon: p.get('thumbIcon').build(),
      ),
    );
    mateParams.put('thumbColor', thumbColor);
    mateParams.put('trackColor', trackColor);
    mateParams.put('trackOutlineColor', trackOutlineColor);
    mateParams.put('materialTapTargetSize', materialTapTargetSize);
    mateParams.put('mouseCursor', mouseCursor);
    mateParams.put('overlayColor', overlayColor);
    mateParams.put('splashRadius', splashRadius);
    mateParams.put('thumbIcon', thumbIcon);
  }
}

/// class SwitchTheme extends InheritedWidget
class SwitchTheme$Mate extends SwitchTheme with WidgetMate<SwitchTheme$Mate> {
  /// SwitchTheme SwitchTheme({Key? key, required SwitchThemeData data, required Widget child})
  SwitchTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SwitchThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required SwitchThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SwitchTheme$Mate(
        key: p.get('key').build(),
        data: p.get('data').build(),
        child: p.get('child').build(),
      ),
    );
    mateParams.put('key', key);
    mateParams.put('data', data);
    mateParams.put('child', child);
  }
}
