// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/time_picker_theme.dart';
import 'dart:ui';
import 'package:flutter/src/material/button_style.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:core';
import 'package:flutter/src/material/input_decorator.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class TimePickerThemeData with Diagnosticable
class TimePickerThemeData$Mate extends TimePickerThemeData with Mate<TimePickerThemeData$Mate> {
  /// TimePickerThemeData TimePickerThemeData({Color? backgroundColor, ButtonStyle? cancelButtonStyle, ButtonStyle? confirmButtonStyle, BorderSide? dayPeriodBorderSide, Color? dayPeriodColor, OutlinedBorder? dayPeriodShape, Color? dayPeriodTextColor, TextStyle? dayPeriodTextStyle, Color? dialBackgroundColor, Color? dialHandColor, Color? dialTextColor, TextStyle? dialTextStyle, double? elevation, Color? entryModeIconColor, TextStyle? helpTextStyle, Color? hourMinuteColor, ShapeBorder? hourMinuteShape, Color? hourMinuteTextColor, TextStyle? hourMinuteTextStyle, InputDecorationTheme? inputDecorationTheme, EdgeInsetsGeometry? padding, ShapeBorder? shape})
  TimePickerThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {ButtonStyle? cancelButtonStyle} , hasDefaultValue:false, defaultValueCode:null
    ButtonStyle? cancelButtonStyle,

    /// optionalParameters: {ButtonStyle? confirmButtonStyle} , hasDefaultValue:false, defaultValueCode:null
    ButtonStyle? confirmButtonStyle,

    /// optionalParameters: {BorderSide? dayPeriodBorderSide} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? dayPeriodBorderSide,

    /// optionalParameters: {Color? dayPeriodColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dayPeriodColor,

    /// optionalParameters: {OutlinedBorder? dayPeriodShape} , hasDefaultValue:false, defaultValueCode:null
    OutlinedBorder? dayPeriodShape,

    /// optionalParameters: {Color? dayPeriodTextColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dayPeriodTextColor,

    /// optionalParameters: {TextStyle? dayPeriodTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? dayPeriodTextStyle,

    /// optionalParameters: {Color? dialBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dialBackgroundColor,

    /// optionalParameters: {Color? dialHandColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dialHandColor,

    /// optionalParameters: {Color? dialTextColor} , hasDefaultValue:false, defaultValueCode:null
    Color? dialTextColor,

    /// optionalParameters: {TextStyle? dialTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? dialTextStyle,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? entryModeIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? entryModeIconColor,

    /// optionalParameters: {TextStyle? helpTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? helpTextStyle,

    /// optionalParameters: {Color? hourMinuteColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hourMinuteColor,

    /// optionalParameters: {ShapeBorder? hourMinuteShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? hourMinuteShape,

    /// optionalParameters: {Color? hourMinuteTextColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hourMinuteTextColor,

    /// optionalParameters: {TextStyle? hourMinuteTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? hourMinuteTextStyle,

    /// optionalParameters: {InputDecorationTheme? inputDecorationTheme} , hasDefaultValue:false, defaultValueCode:null
    InputDecorationTheme? inputDecorationTheme,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,
  }) : super(
          backgroundColor: backgroundColor,
          cancelButtonStyle: cancelButtonStyle,
          confirmButtonStyle: confirmButtonStyle,
          dayPeriodBorderSide: dayPeriodBorderSide,
          dayPeriodColor: dayPeriodColor,
          dayPeriodShape: dayPeriodShape,
          dayPeriodTextColor: dayPeriodTextColor,
          dayPeriodTextStyle: dayPeriodTextStyle,
          dialBackgroundColor: dialBackgroundColor,
          dialHandColor: dialHandColor,
          dialTextColor: dialTextColor,
          dialTextStyle: dialTextStyle,
          elevation: elevation,
          entryModeIconColor: entryModeIconColor,
          helpTextStyle: helpTextStyle,
          hourMinuteColor: hourMinuteColor,
          hourMinuteShape: hourMinuteShape,
          hourMinuteTextColor: hourMinuteTextColor,
          hourMinuteTextStyle: hourMinuteTextStyle,
          inputDecorationTheme: inputDecorationTheme,
          padding: padding,
          shape: shape,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TimePickerThemeData$Mate(
        backgroundColor: p.get('backgroundColor').value,
        cancelButtonStyle: p.get('cancelButtonStyle').value,
        confirmButtonStyle: p.get('confirmButtonStyle').value,
        dayPeriodBorderSide: p.get('dayPeriodBorderSide').value,
        dayPeriodColor: p.get('dayPeriodColor').value,
        dayPeriodShape: p.get('dayPeriodShape').value,
        dayPeriodTextColor: p.get('dayPeriodTextColor').value,
        dayPeriodTextStyle: p.get('dayPeriodTextStyle').value,
        dialBackgroundColor: p.get('dialBackgroundColor').value,
        dialHandColor: p.get('dialHandColor').value,
        dialTextColor: p.get('dialTextColor').value,
        dialTextStyle: p.get('dialTextStyle').value,
        elevation: p.get('elevation').value,
        entryModeIconColor: p.get('entryModeIconColor').value,
        helpTextStyle: p.get('helpTextStyle').value,
        hourMinuteColor: p.get('hourMinuteColor').value,
        hourMinuteShape: p.get('hourMinuteShape').value,
        hourMinuteTextColor: p.get('hourMinuteTextColor').value,
        hourMinuteTextStyle: p.get('hourMinuteTextStyle').value,
        inputDecorationTheme: p.get('inputDecorationTheme').value,
        padding: p.get('padding').value,
        shape: p.get('shape').value,
      ),
    );
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('cancelButtonStyle', cancelButtonStyle);
    mateParams.put('confirmButtonStyle', confirmButtonStyle);
    mateParams.put('dayPeriodBorderSide', dayPeriodBorderSide);
    mateParams.put('dayPeriodColor', dayPeriodColor);
    mateParams.put('dayPeriodShape', dayPeriodShape);
    mateParams.put('dayPeriodTextColor', dayPeriodTextColor);
    mateParams.put('dayPeriodTextStyle', dayPeriodTextStyle);
    mateParams.put('dialBackgroundColor', dialBackgroundColor);
    mateParams.put('dialHandColor', dialHandColor);
    mateParams.put('dialTextColor', dialTextColor);
    mateParams.put('dialTextStyle', dialTextStyle);
    mateParams.put('elevation', elevation);
    mateParams.put('entryModeIconColor', entryModeIconColor);
    mateParams.put('helpTextStyle', helpTextStyle);
    mateParams.put('hourMinuteColor', hourMinuteColor);
    mateParams.put('hourMinuteShape', hourMinuteShape);
    mateParams.put('hourMinuteTextColor', hourMinuteTextColor);
    mateParams.put('hourMinuteTextStyle', hourMinuteTextStyle);
    mateParams.put('inputDecorationTheme', inputDecorationTheme);
    mateParams.put('padding', padding);
    mateParams.put('shape', shape);
  }
}

/// class TimePickerTheme extends InheritedTheme
class TimePickerTheme$Mate extends TimePickerTheme with WidgetMate<TimePickerTheme$Mate> {
  /// TimePickerTheme TimePickerTheme({Key? key, required TimePickerThemeData data, required Widget child})
  TimePickerTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required TimePickerThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required TimePickerThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TimePickerTheme$Mate(
        key: p.get('key').value,
        data: p.get('data').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('data', data);
    mateParams.put('child', child);
  }
}
