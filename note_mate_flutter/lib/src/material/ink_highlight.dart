// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/ink_highlight.dart';
import 'package:flutter/src/material/material.dart';
import 'package:flutter/src/rendering/box.dart';
import 'dart:ui';
import 'package:flutter/src/painting/box_border.dart';
import 'dart:core';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';

/// class InkHighlight extends InteractiveInkFeature
class InkHighlight$Mate extends InkHighlight with Mate<InkHighlight$Mate> {
  /// InkHighlight InkHighlight({required MaterialInkController controller, required RenderBox referenceBox, required Color color, required TextDirection textDirection, BoxShape shape = BoxShape.rectangle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Rect Function()? rectCallback, void Function()? onRemoved, Duration fadeDuration = _kDefaultHighlightFadeDuration})
  InkHighlight$Mate({
    /// optionalParameters: {required MaterialInkController controller} , hasDefaultValue:false, defaultValueCode:null
    required MaterialInkController controller,

    /// optionalParameters: {required RenderBox referenceBox} , hasDefaultValue:false, defaultValueCode:null
    required RenderBox referenceBox,

    /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
    required Color color,

    /// optionalParameters: {required TextDirection textDirection} , hasDefaultValue:false, defaultValueCode:null
    required TextDirection textDirection,

    /// optionalParameters: {BoxShape shape = BoxShape.rectangle} , hasDefaultValue:true, defaultValueCode:BoxShape.rectangle
    required BoxShape shape,

    /// optionalParameters: {double? radius} , hasDefaultValue:false, defaultValueCode:null
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
    BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? customBorder,

    /// optionalParameters: {Rect Function()? rectCallback} , hasDefaultValue:false, defaultValueCode:null
    RectCallback? rectCallback,

    /// optionalParameters: {void Function()? onRemoved} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onRemoved,

    /// optionalParameters: {Duration fadeDuration = _kDefaultHighlightFadeDuration} , hasDefaultValue:true, defaultValueCode:_kDefaultHighlightFadeDuration
    required Duration fadeDuration,
  }) : super(
          controller: controller,
          referenceBox: referenceBox,
          color: color,
          textDirection: textDirection,
          shape: shape,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          rectCallback: rectCallback,
          onRemoved: onRemoved,
          fadeDuration: fadeDuration,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InkHighlight$Mate(
        controller: p.get('controller').value,
        referenceBox: p.get('referenceBox').value,
        color: p.get('color').value,
        textDirection: p.get('textDirection').value,
        shape: p.get('shape').value,
        radius: p.get('radius').value,
        borderRadius: p.get('borderRadius').value,
        customBorder: p.get('customBorder').value,
        rectCallback: p.get('rectCallback').value,
        onRemoved: p.get('onRemoved').value,
        fadeDuration: p.get('fadeDuration').value,
      ),
    );
    mateParams.put('controller', controller);
    mateParams.put('referenceBox', referenceBox);
    mateParams.put('color', color);
    mateParams.put('textDirection', textDirection);
    mateParams.put('shape', shape);
    mateParams.put('radius', radius);
    mateParams.put('borderRadius', borderRadius);
    mateParams.put('customBorder', customBorder);
    mateParams.put('rectCallback', rectCallback);
    mateParams.put('onRemoved', onRemoved);
    mateParams.put('fadeDuration', fadeDuration);
  }
}
