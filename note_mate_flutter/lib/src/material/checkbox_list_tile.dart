// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/checkbox_list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class CheckboxListTile extends StatelessWidget
class CheckboxListTile$Mate extends CheckboxListTile with WidgetMate<CheckboxListTile$Mate> {
  /// CheckboxListTile CheckboxListTile({Key? key, required bool? value, required void Function(bool?)? onChanged, Color? activeColor, Color? checkColor, bool? enabled, Color? tileColor, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, bool autofocus = false, EdgeInsetsGeometry? contentPadding, bool tristate = false, ShapeBorder? shape, OutlinedBorder? checkboxShape, Color? selectedTileColor, BorderSide? side, VisualDensity? visualDensity, FocusNode? focusNode, void Function(bool)? onFocusChange, bool? enableFeedback})
  CheckboxListTile$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required bool? value} , hasDefaultValue:false, defaultValueCode:null
    required bool? value,

    /// optionalParameters: {required void Function(bool?)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<bool?>? onChanged,

    /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeColor,

    /// optionalParameters: {Color? checkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? checkColor,

    /// optionalParameters: {bool? enabled} , hasDefaultValue:false, defaultValueCode:null
    bool? enabled,

    /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? tileColor,

    /// optionalParameters: {Widget? title} , hasDefaultValue:false, defaultValueCode:null
    Widget? title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {bool isThreeLine = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isThreeLine,

    /// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
    bool? dense,

    /// optionalParameters: {Widget? secondary} , hasDefaultValue:false, defaultValueCode:null
    Widget? secondary,

    /// optionalParameters: {bool selected = false} , hasDefaultValue:true, defaultValueCode:false
    required bool selected,

    /// optionalParameters: {ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform} , hasDefaultValue:true, defaultValueCode:ListTileControlAffinity.platform
    required ListTileControlAffinity controlAffinity,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {bool tristate = false} , hasDefaultValue:true, defaultValueCode:false
    required bool tristate,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {OutlinedBorder? checkboxShape} , hasDefaultValue:false, defaultValueCode:null
    OutlinedBorder? checkboxShape,

    /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedTileColor,

    /// optionalParameters: {BorderSide? side} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? side,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          checkColor: checkColor,
          enabled: enabled,
          tileColor: tileColor,
          title: title,
          subtitle: subtitle,
          isThreeLine: isThreeLine,
          dense: dense,
          secondary: secondary,
          selected: selected,
          controlAffinity: controlAffinity,
          autofocus: autofocus,
          contentPadding: contentPadding,
          tristate: tristate,
          shape: shape,
          checkboxShape: checkboxShape,
          selectedTileColor: selectedTileColor,
          side: side,
          visualDensity: visualDensity,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          enableFeedback: enableFeedback,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CheckboxListTile$Mate(
        key: p.get('key').value,
        value: p.get('value').value,
        onChanged: p.get('onChanged').value,
        activeColor: p.get('activeColor').value,
        checkColor: p.get('checkColor').value,
        enabled: p.get('enabled').value,
        tileColor: p.get('tileColor').value,
        title: p.get('title').value,
        subtitle: p.get('subtitle').value,
        isThreeLine: p.get('isThreeLine').value,
        dense: p.get('dense').value,
        secondary: p.get('secondary').value,
        selected: p.get('selected').value,
        controlAffinity: p.get('controlAffinity').value,
        autofocus: p.get('autofocus').value,
        contentPadding: p.get('contentPadding').value,
        tristate: p.get('tristate').value,
        shape: p.get('shape').value,
        checkboxShape: p.get('checkboxShape').value,
        selectedTileColor: p.get('selectedTileColor').value,
        side: p.get('side').value,
        visualDensity: p.get('visualDensity').value,
        focusNode: p.get('focusNode').value,
        onFocusChange: p.get('onFocusChange').value,
        enableFeedback: p.get('enableFeedback').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('value', value);
    mateParams.put('onChanged', onChanged);
    mateParams.put('activeColor', activeColor);
    mateParams.put('checkColor', checkColor);
    mateParams.put('enabled', enabled);
    mateParams.put('tileColor', tileColor);
    mateParams.put('title', title);
    mateParams.put('subtitle', subtitle);
    mateParams.put('isThreeLine', isThreeLine);
    mateParams.put('dense', dense);
    mateParams.put('secondary', secondary);
    mateParams.put('selected', selected);
    mateParams.put('controlAffinity', controlAffinity);
    mateParams.put('autofocus', autofocus);
    mateParams.put('contentPadding', contentPadding);
    mateParams.put('tristate', tristate);
    mateParams.put('shape', shape);
    mateParams.put('checkboxShape', checkboxShape);
    mateParams.put('selectedTileColor', selectedTileColor);
    mateParams.put('side', side);
    mateParams.put('visualDensity', visualDensity);
    mateParams.put('focusNode', focusNode);
    mateParams.put('onFocusChange', onFocusChange);
    mateParams.put('enableFeedback', enableFeedback);
  }
}
