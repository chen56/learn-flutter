// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/switch.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:flutter/src/painting/image_provider.dart';
import 'package:flutter/src/painting/image_stream.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/widgets/icon.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class Switch extends StatelessWidget
class Switch$Mate extends Switch with WidgetMate<Switch$Mate> {
  /// Switch Switch({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, MaterialTapTargetSize? materialTapTargetSize, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false})
  Switch$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required bool value} , hasDefaultValue:false, defaultValueCode:null
    required bool value,

    /// optionalParameters: {required void Function(bool)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<bool>? onChanged,

    /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeColor,

    /// optionalParameters: {Color? activeTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeTrackColor,

    /// optionalParameters: {Color? inactiveThumbColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveThumbColor,

    /// optionalParameters: {Color? inactiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveTrackColor,

    /// optionalParameters: {ImageProvider<Object>? activeThumbImage} , hasDefaultValue:false, defaultValueCode:null
    ImageProvider<Object>? activeThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onActiveThumbImageError} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorListener? onActiveThumbImageError,

    /// optionalParameters: {ImageProvider<Object>? inactiveThumbImage} , hasDefaultValue:false, defaultValueCode:null
    ImageProvider<Object>? inactiveThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onInactiveThumbImageError} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorListener? onInactiveThumbImageError,

    /// optionalParameters: {MaterialStateProperty<Color?>? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackOutlineColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackOutlineColor,

    /// optionalParameters: {MaterialStateProperty<Icon?>? thumbIcon} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Icon?>? thumbIcon,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
    double? splashRadius,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          onActiveThumbImageError: onActiveThumbImageError,
          inactiveThumbImage: inactiveThumbImage,
          onInactiveThumbImageError: onInactiveThumbImageError,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackOutlineColor: trackOutlineColor,
          thumbIcon: thumbIcon,
          materialTapTargetSize: materialTapTargetSize,
          dragStartBehavior: dragStartBehavior,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Switch$Mate(
        key: p.get('key').value,
        value: p.get('value').value,
        onChanged: p.get('onChanged').value,
        activeColor: p.get('activeColor').value,
        activeTrackColor: p.get('activeTrackColor').value,
        inactiveThumbColor: p.get('inactiveThumbColor').value,
        inactiveTrackColor: p.get('inactiveTrackColor').value,
        activeThumbImage: p.get('activeThumbImage').value,
        onActiveThumbImageError: p.get('onActiveThumbImageError').value,
        inactiveThumbImage: p.get('inactiveThumbImage').value,
        onInactiveThumbImageError: p.get('onInactiveThumbImageError').value,
        thumbColor: p.get('thumbColor').value,
        trackColor: p.get('trackColor').value,
        trackOutlineColor: p.get('trackOutlineColor').value,
        thumbIcon: p.get('thumbIcon').value,
        materialTapTargetSize: p.get('materialTapTargetSize').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        mouseCursor: p.get('mouseCursor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        overlayColor: p.get('overlayColor').value,
        splashRadius: p.get('splashRadius').value,
        focusNode: p.get('focusNode').value,
        onFocusChange: p.get('onFocusChange').value,
        autofocus: p.get('autofocus').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('value', init: value);
    mateParams.put('onChanged', init: onChanged);
    mateParams.put('activeColor', init: activeColor);
    mateParams.put('activeTrackColor', init: activeTrackColor);
    mateParams.put('inactiveThumbColor', init: inactiveThumbColor);
    mateParams.put('inactiveTrackColor', init: inactiveTrackColor);
    mateParams.put('activeThumbImage', init: activeThumbImage);
    mateParams.put('onActiveThumbImageError', init: onActiveThumbImageError);
    mateParams.put('inactiveThumbImage', init: inactiveThumbImage);
    mateParams.put('onInactiveThumbImageError', init: onInactiveThumbImageError);
    mateParams.put('thumbColor', init: thumbColor);
    mateParams.put('trackColor', init: trackColor);
    mateParams.put('trackOutlineColor', init: trackOutlineColor);
    mateParams.put('thumbIcon', init: thumbIcon);
    mateParams.put('materialTapTargetSize', init: materialTapTargetSize);
    mateParams.put('dragStartBehavior', init: dragStartBehavior);
    mateParams.put('mouseCursor', init: mouseCursor);
    mateParams.put('focusColor', init: focusColor);
    mateParams.put('hoverColor', init: hoverColor);
    mateParams.put('overlayColor', init: overlayColor);
    mateParams.put('splashRadius', init: splashRadius);
    mateParams.put('focusNode', init: focusNode);
    mateParams.put('onFocusChange', init: onFocusChange);
    mateParams.put('autofocus', init: autofocus);
  }

  /// Switch Switch.adaptive({Key? key, required bool value, required void Function(bool)? onChanged, Color? activeColor, Color? activeTrackColor, Color? inactiveThumbColor, Color? inactiveTrackColor, ImageProvider<Object>? activeThumbImage, void Function(Object, StackTrace?)? onActiveThumbImageError, ImageProvider<Object>? inactiveThumbImage, void Function(Object, StackTrace?)? onInactiveThumbImageError, MaterialTapTargetSize? materialTapTargetSize, MaterialStateProperty<Color?>? thumbColor, MaterialStateProperty<Color?>? trackColor, MaterialStateProperty<Color?>? trackOutlineColor, MaterialStateProperty<Icon?>? thumbIcon, DragStartBehavior dragStartBehavior = DragStartBehavior.start, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, FocusNode? focusNode, void Function(bool)? onFocusChange, bool autofocus = false, bool? applyCupertinoTheme})
  Switch$Mate.adaptive({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required bool value} , hasDefaultValue:false, defaultValueCode:null
    required bool value,

    /// optionalParameters: {required void Function(bool)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<bool>? onChanged,

    /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeColor,

    /// optionalParameters: {Color? activeTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeTrackColor,

    /// optionalParameters: {Color? inactiveThumbColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveThumbColor,

    /// optionalParameters: {Color? inactiveTrackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveTrackColor,

    /// optionalParameters: {ImageProvider<Object>? activeThumbImage} , hasDefaultValue:false, defaultValueCode:null
    ImageProvider<Object>? activeThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onActiveThumbImageError} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorListener? onActiveThumbImageError,

    /// optionalParameters: {ImageProvider<Object>? inactiveThumbImage} , hasDefaultValue:false, defaultValueCode:null
    ImageProvider<Object>? inactiveThumbImage,

    /// optionalParameters: {void Function(Object, StackTrace?)? onInactiveThumbImageError} , hasDefaultValue:false, defaultValueCode:null
    ImageErrorListener? onInactiveThumbImageError,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , hasDefaultValue:false, defaultValueCode:null
    MaterialTapTargetSize? materialTapTargetSize,

    /// optionalParameters: {MaterialStateProperty<Color?>? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? trackOutlineColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? trackOutlineColor,

    /// optionalParameters: {MaterialStateProperty<Icon?>? thumbIcon} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Icon?>? thumbIcon,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {double? splashRadius} , hasDefaultValue:false, defaultValueCode:null
    double? splashRadius,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {bool? applyCupertinoTheme} , hasDefaultValue:false, defaultValueCode:null
    bool? applyCupertinoTheme,
  }) : super.adaptive(
          key: key,
          value: value,
          onChanged: onChanged,
          activeColor: activeColor,
          activeTrackColor: activeTrackColor,
          inactiveThumbColor: inactiveThumbColor,
          inactiveTrackColor: inactiveTrackColor,
          activeThumbImage: activeThumbImage,
          onActiveThumbImageError: onActiveThumbImageError,
          inactiveThumbImage: inactiveThumbImage,
          onInactiveThumbImageError: onInactiveThumbImageError,
          materialTapTargetSize: materialTapTargetSize,
          thumbColor: thumbColor,
          trackColor: trackColor,
          trackOutlineColor: trackOutlineColor,
          thumbIcon: thumbIcon,
          dragStartBehavior: dragStartBehavior,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          overlayColor: overlayColor,
          splashRadius: splashRadius,
          focusNode: focusNode,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          applyCupertinoTheme: applyCupertinoTheme,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Switch$Mate.adaptive(
        key: p.get('key').value,
        value: p.get('value').value,
        onChanged: p.get('onChanged').value,
        activeColor: p.get('activeColor').value,
        activeTrackColor: p.get('activeTrackColor').value,
        inactiveThumbColor: p.get('inactiveThumbColor').value,
        inactiveTrackColor: p.get('inactiveTrackColor').value,
        activeThumbImage: p.get('activeThumbImage').value,
        onActiveThumbImageError: p.get('onActiveThumbImageError').value,
        inactiveThumbImage: p.get('inactiveThumbImage').value,
        onInactiveThumbImageError: p.get('onInactiveThumbImageError').value,
        materialTapTargetSize: p.get('materialTapTargetSize').value,
        thumbColor: p.get('thumbColor').value,
        trackColor: p.get('trackColor').value,
        trackOutlineColor: p.get('trackOutlineColor').value,
        thumbIcon: p.get('thumbIcon').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        mouseCursor: p.get('mouseCursor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        overlayColor: p.get('overlayColor').value,
        splashRadius: p.get('splashRadius').value,
        focusNode: p.get('focusNode').value,
        onFocusChange: p.get('onFocusChange').value,
        autofocus: p.get('autofocus').value,
        applyCupertinoTheme: p.get('applyCupertinoTheme').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('value', init: value);
    mateParams.put('onChanged', init: onChanged);
    mateParams.put('activeColor', init: activeColor);
    mateParams.put('activeTrackColor', init: activeTrackColor);
    mateParams.put('inactiveThumbColor', init: inactiveThumbColor);
    mateParams.put('inactiveTrackColor', init: inactiveTrackColor);
    mateParams.put('activeThumbImage', init: activeThumbImage);
    mateParams.put('onActiveThumbImageError', init: onActiveThumbImageError);
    mateParams.put('inactiveThumbImage', init: inactiveThumbImage);
    mateParams.put('onInactiveThumbImageError', init: onInactiveThumbImageError);
    mateParams.put('materialTapTargetSize', init: materialTapTargetSize);
    mateParams.put('thumbColor', init: thumbColor);
    mateParams.put('trackColor', init: trackColor);
    mateParams.put('trackOutlineColor', init: trackOutlineColor);
    mateParams.put('thumbIcon', init: thumbIcon);
    mateParams.put('dragStartBehavior', init: dragStartBehavior);
    mateParams.put('mouseCursor', init: mouseCursor);
    mateParams.put('focusColor', init: focusColor);
    mateParams.put('hoverColor', init: hoverColor);
    mateParams.put('overlayColor', init: overlayColor);
    mateParams.put('splashRadius', init: splashRadius);
    mateParams.put('focusNode', init: focusNode);
    mateParams.put('onFocusChange', init: onFocusChange);
    mateParams.put('autofocus', init: autofocus);
    mateParams.put('applyCupertinoTheme', init: applyCupertinoTheme);
  }
}
