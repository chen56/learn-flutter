// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/ink_well.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/painting/box_border.dart';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/borders.dart';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:note/mate.dart';

/// class InkResponse extends StatelessWidget
class InkResponse$Mate extends InkResponse with WidgetMate<InkResponse$Mate> {
  /// InkResponse InkResponse({Key? key, Widget? child, void Function()? onTap, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function()? onDoubleTap, void Function()? onLongPress, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, bool containedInkWell = false, BoxShape highlightShape = BoxShape.circle, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, bool enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkResponse$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , hasDefaultValue:false, defaultValueCode:null
    GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTapCancel} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTapCancel,

    /// optionalParameters: {void Function()? onDoubleTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {void Function(bool)? onHover} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onHover,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {bool containedInkWell = false} , hasDefaultValue:true, defaultValueCode:false
    required bool containedInkWell,

    /// optionalParameters: {BoxShape highlightShape = BoxShape.circle} , hasDefaultValue:true, defaultValueCode:BoxShape.circle
    required BoxShape highlightShape,

    /// optionalParameters: {double? radius} , hasDefaultValue:false, defaultValueCode:null
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
    BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? customBorder,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
    Color? highlightColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , hasDefaultValue:false, defaultValueCode:null
    InteractiveInkFeatureFactory? splashFactory,

    /// optionalParameters: {bool enableFeedback = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enableFeedback,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool canRequestFocus = true} , hasDefaultValue:true, defaultValueCode:true
    required bool canRequestFocus,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {MaterialStatesController? statesController} , hasDefaultValue:false, defaultValueCode:null
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          containedInkWell: containedInkWell,
          highlightShape: highlightShape,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InkResponse$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        onTap: p.get('onTap').value,
        onTapDown: p.get('onTapDown').value,
        onTapUp: p.get('onTapUp').value,
        onTapCancel: p.get('onTapCancel').value,
        onDoubleTap: p.get('onDoubleTap').value,
        onLongPress: p.get('onLongPress').value,
        onHighlightChanged: p.get('onHighlightChanged').value,
        onHover: p.get('onHover').value,
        mouseCursor: p.get('mouseCursor').value,
        containedInkWell: p.get('containedInkWell').value,
        highlightShape: p.get('highlightShape').value,
        radius: p.get('radius').value,
        borderRadius: p.get('borderRadius').value,
        customBorder: p.get('customBorder').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        highlightColor: p.get('highlightColor').value,
        overlayColor: p.get('overlayColor').value,
        splashColor: p.get('splashColor').value,
        splashFactory: p.get('splashFactory').value,
        enableFeedback: p.get('enableFeedback').value,
        excludeFromSemantics: p.get('excludeFromSemantics').value,
        focusNode: p.get('focusNode').value,
        canRequestFocus: p.get('canRequestFocus').value,
        onFocusChange: p.get('onFocusChange').value,
        autofocus: p.get('autofocus').value,
        statesController: p.get('statesController').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('child', child);
    mateParams.put('onTap', onTap);
    mateParams.put('onTapDown', onTapDown);
    mateParams.put('onTapUp', onTapUp);
    mateParams.put('onTapCancel', onTapCancel);
    mateParams.put('onDoubleTap', onDoubleTap);
    mateParams.put('onLongPress', onLongPress);
    mateParams.put('onHighlightChanged', onHighlightChanged);
    mateParams.put('onHover', onHover);
    mateParams.put('mouseCursor', mouseCursor);
    mateParams.put('containedInkWell', containedInkWell);
    mateParams.put('highlightShape', highlightShape);
    mateParams.put('radius', radius);
    mateParams.put('borderRadius', borderRadius);
    mateParams.put('customBorder', customBorder);
    mateParams.put('focusColor', focusColor);
    mateParams.put('hoverColor', hoverColor);
    mateParams.put('highlightColor', highlightColor);
    mateParams.put('overlayColor', overlayColor);
    mateParams.put('splashColor', splashColor);
    mateParams.put('splashFactory', splashFactory);
    mateParams.put('enableFeedback', enableFeedback);
    mateParams.put('excludeFromSemantics', excludeFromSemantics);
    mateParams.put('focusNode', focusNode);
    mateParams.put('canRequestFocus', canRequestFocus);
    mateParams.put('onFocusChange', onFocusChange);
    mateParams.put('autofocus', autofocus);
    mateParams.put('statesController', statesController);
  }
}

/// class InkWell extends InkResponse
class InkWell$Mate extends InkWell with WidgetMate<InkWell$Mate> {
  /// InkWell InkWell({Key? key, Widget? child, void Function()? onTap, void Function()? onDoubleTap, void Function()? onLongPress, void Function(TapDownDetails)? onTapDown, void Function(TapUpDetails)? onTapUp, void Function()? onTapCancel, void Function(bool)? onHighlightChanged, void Function(bool)? onHover, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, bool? enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, void Function(bool)? onFocusChange, bool autofocus = false, MaterialStatesController? statesController})
  InkWell$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,

    /// optionalParameters: {void Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTap,

    /// optionalParameters: {void Function()? onDoubleTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onDoubleTap,

    /// optionalParameters: {void Function()? onLongPress} , hasDefaultValue:false, defaultValueCode:null
    GestureLongPressCallback? onLongPress,

    /// optionalParameters: {void Function(TapDownDetails)? onTapDown} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDownCallback? onTapDown,

    /// optionalParameters: {void Function(TapUpDetails)? onTapUp} , hasDefaultValue:false, defaultValueCode:null
    GestureTapUpCallback? onTapUp,

    /// optionalParameters: {void Function()? onTapCancel} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onTapCancel,

    /// optionalParameters: {void Function(bool)? onHighlightChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onHighlightChanged,

    /// optionalParameters: {void Function(bool)? onHover} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onHover,

    /// optionalParameters: {MouseCursor? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MouseCursor? mouseCursor,

    /// optionalParameters: {Color? focusColor} , hasDefaultValue:false, defaultValueCode:null
    Color? focusColor,

    /// optionalParameters: {Color? hoverColor} , hasDefaultValue:false, defaultValueCode:null
    Color? hoverColor,

    /// optionalParameters: {Color? highlightColor} , hasDefaultValue:false, defaultValueCode:null
    Color? highlightColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {Color? splashColor} , hasDefaultValue:false, defaultValueCode:null
    Color? splashColor,

    /// optionalParameters: {InteractiveInkFeatureFactory? splashFactory} , hasDefaultValue:false, defaultValueCode:null
    InteractiveInkFeatureFactory? splashFactory,

    /// optionalParameters: {double? radius} , hasDefaultValue:false, defaultValueCode:null
    double? radius,

    /// optionalParameters: {BorderRadius? borderRadius} , hasDefaultValue:false, defaultValueCode:null
    BorderRadius? borderRadius,

    /// optionalParameters: {ShapeBorder? customBorder} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? customBorder,

    /// optionalParameters: {bool? enableFeedback = true} , hasDefaultValue:true, defaultValueCode:true
    bool? enableFeedback,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool canRequestFocus = true} , hasDefaultValue:true, defaultValueCode:true
    required bool canRequestFocus,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {MaterialStatesController? statesController} , hasDefaultValue:false, defaultValueCode:null
    MaterialStatesController? statesController,
  }) : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          enableFeedback: enableFeedback,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
          statesController: statesController,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InkWell$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        onTap: p.get('onTap').value,
        onDoubleTap: p.get('onDoubleTap').value,
        onLongPress: p.get('onLongPress').value,
        onTapDown: p.get('onTapDown').value,
        onTapUp: p.get('onTapUp').value,
        onTapCancel: p.get('onTapCancel').value,
        onHighlightChanged: p.get('onHighlightChanged').value,
        onHover: p.get('onHover').value,
        mouseCursor: p.get('mouseCursor').value,
        focusColor: p.get('focusColor').value,
        hoverColor: p.get('hoverColor').value,
        highlightColor: p.get('highlightColor').value,
        overlayColor: p.get('overlayColor').value,
        splashColor: p.get('splashColor').value,
        splashFactory: p.get('splashFactory').value,
        radius: p.get('radius').value,
        borderRadius: p.get('borderRadius').value,
        customBorder: p.get('customBorder').value,
        enableFeedback: p.get('enableFeedback').value,
        excludeFromSemantics: p.get('excludeFromSemantics').value,
        focusNode: p.get('focusNode').value,
        canRequestFocus: p.get('canRequestFocus').value,
        onFocusChange: p.get('onFocusChange').value,
        autofocus: p.get('autofocus').value,
        statesController: p.get('statesController').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('child', child);
    mateParams.put('onTap', onTap);
    mateParams.put('onDoubleTap', onDoubleTap);
    mateParams.put('onLongPress', onLongPress);
    mateParams.put('onTapDown', onTapDown);
    mateParams.put('onTapUp', onTapUp);
    mateParams.put('onTapCancel', onTapCancel);
    mateParams.put('onHighlightChanged', onHighlightChanged);
    mateParams.put('onHover', onHover);
    mateParams.put('mouseCursor', mouseCursor);
    mateParams.put('focusColor', focusColor);
    mateParams.put('hoverColor', hoverColor);
    mateParams.put('highlightColor', highlightColor);
    mateParams.put('overlayColor', overlayColor);
    mateParams.put('splashColor', splashColor);
    mateParams.put('splashFactory', splashFactory);
    mateParams.put('radius', radius);
    mateParams.put('borderRadius', borderRadius);
    mateParams.put('customBorder', customBorder);
    mateParams.put('enableFeedback', enableFeedback);
    mateParams.put('excludeFromSemantics', excludeFromSemantics);
    mateParams.put('focusNode', focusNode);
    mateParams.put('canRequestFocus', canRequestFocus);
    mateParams.put('onFocusChange', onFocusChange);
    mateParams.put('autofocus', autofocus);
    mateParams.put('statesController', statesController);
  }
}
