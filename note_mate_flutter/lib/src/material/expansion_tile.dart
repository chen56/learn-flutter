// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/expansion_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/rendering/flex.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'dart:ui';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'package:note/mate.dart';

/// class ExpansionTile extends StatefulWidget
class ExpansionTile$Mate extends ExpansionTile with WidgetMate<ExpansionTile$Mate> {
  /// ExpansionTile ExpansionTile({Key? key, Widget? leading, required Widget title, Widget? subtitle, void Function(bool)? onExpansionChanged, List<Widget> children = const <Widget>[], Widget? trailing, bool initiallyExpanded = false, bool maintainState = false, EdgeInsetsGeometry? tilePadding, CrossAxisAlignment? expandedCrossAxisAlignment, Alignment? expandedAlignment, EdgeInsetsGeometry? childrenPadding, Color? backgroundColor, Color? collapsedBackgroundColor, Color? textColor, Color? collapsedTextColor, Color? iconColor, Color? collapsedIconColor, ShapeBorder? shape, ShapeBorder? collapsedShape, Clip? clipBehavior, ListTileControlAffinity? controlAffinity})
  ExpansionTile$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {required Widget title} , hasDefaultValue:false, defaultValueCode:null
    required Widget title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {void Function(bool)? onExpansionChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onExpansionChanged,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> children,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {bool initiallyExpanded = false} , hasDefaultValue:true, defaultValueCode:false
    required bool initiallyExpanded,

    /// optionalParameters: {bool maintainState = false} , hasDefaultValue:true, defaultValueCode:false
    required bool maintainState,

    /// optionalParameters: {EdgeInsetsGeometry? tilePadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? tilePadding,

    /// optionalParameters: {CrossAxisAlignment? expandedCrossAxisAlignment} , hasDefaultValue:false, defaultValueCode:null
    CrossAxisAlignment? expandedCrossAxisAlignment,

    /// optionalParameters: {Alignment? expandedAlignment} , hasDefaultValue:false, defaultValueCode:null
    Alignment? expandedAlignment,

    /// optionalParameters: {EdgeInsetsGeometry? childrenPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? childrenPadding,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? collapsedBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? collapsedBackgroundColor,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {Color? collapsedTextColor} , hasDefaultValue:false, defaultValueCode:null
    Color? collapsedTextColor,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {Color? collapsedIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? collapsedIconColor,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ShapeBorder? collapsedShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? collapsedShape,

    /// optionalParameters: {Clip? clipBehavior} , hasDefaultValue:false, defaultValueCode:null
    Clip? clipBehavior,

    /// optionalParameters: {ListTileControlAffinity? controlAffinity} , hasDefaultValue:false, defaultValueCode:null
    ListTileControlAffinity? controlAffinity,
  }) : super(
          key: key,
          leading: leading,
          title: title,
          subtitle: subtitle,
          onExpansionChanged: onExpansionChanged,
          children: children,
          trailing: trailing,
          initiallyExpanded: initiallyExpanded,
          maintainState: maintainState,
          tilePadding: tilePadding,
          expandedCrossAxisAlignment: expandedCrossAxisAlignment,
          expandedAlignment: expandedAlignment,
          childrenPadding: childrenPadding,
          backgroundColor: backgroundColor,
          collapsedBackgroundColor: collapsedBackgroundColor,
          textColor: textColor,
          collapsedTextColor: collapsedTextColor,
          iconColor: iconColor,
          collapsedIconColor: collapsedIconColor,
          shape: shape,
          collapsedShape: collapsedShape,
          clipBehavior: clipBehavior,
          controlAffinity: controlAffinity,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ExpansionTile$Mate(
        key: p.get('key').value,
        leading: p.get('leading').value,
        title: p.get('title').value,
        subtitle: p.get('subtitle').value,
        onExpansionChanged: p.get('onExpansionChanged').value,
        children: p.get('children').value,
        trailing: p.get('trailing').value,
        initiallyExpanded: p.get('initiallyExpanded').value,
        maintainState: p.get('maintainState').value,
        tilePadding: p.get('tilePadding').value,
        expandedCrossAxisAlignment: p.get('expandedCrossAxisAlignment').value,
        expandedAlignment: p.get('expandedAlignment').value,
        childrenPadding: p.get('childrenPadding').value,
        backgroundColor: p.get('backgroundColor').value,
        collapsedBackgroundColor: p.get('collapsedBackgroundColor').value,
        textColor: p.get('textColor').value,
        collapsedTextColor: p.get('collapsedTextColor').value,
        iconColor: p.get('iconColor').value,
        collapsedIconColor: p.get('collapsedIconColor').value,
        shape: p.get('shape').value,
        collapsedShape: p.get('collapsedShape').value,
        clipBehavior: p.get('clipBehavior').value,
        controlAffinity: p.get('controlAffinity').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('leading', init: leading);
    mateParams.put('title', init: title);
    mateParams.put('subtitle', init: subtitle);
    mateParams.put('onExpansionChanged', init: onExpansionChanged);
    mateParams.put('children', init: children);
    mateParams.put('trailing', init: trailing);
    mateParams.put('initiallyExpanded', init: initiallyExpanded);
    mateParams.put('maintainState', init: maintainState);
    mateParams.put('tilePadding', init: tilePadding);
    mateParams.put('expandedCrossAxisAlignment', init: expandedCrossAxisAlignment);
    mateParams.put('expandedAlignment', init: expandedAlignment);
    mateParams.put('childrenPadding', init: childrenPadding);
    mateParams.put('backgroundColor', init: backgroundColor);
    mateParams.put('collapsedBackgroundColor', init: collapsedBackgroundColor);
    mateParams.put('textColor', init: textColor);
    mateParams.put('collapsedTextColor', init: collapsedTextColor);
    mateParams.put('iconColor', init: iconColor);
    mateParams.put('collapsedIconColor', init: collapsedIconColor);
    mateParams.put('shape', init: shape);
    mateParams.put('collapsedShape', init: collapsedShape);
    mateParams.put('clipBehavior', init: clipBehavior);
    mateParams.put('controlAffinity', init: controlAffinity);
  }
}
