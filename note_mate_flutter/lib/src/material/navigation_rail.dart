// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/navigation_rail.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/edge_insets.dart';

/// class NavigationRail extends StatefulWidget
class NavigationRail$Mate extends NavigationRail with WidgetMate<NavigationRail$Mate> {
  /// NavigationRail NavigationRail({Key? key, Color? backgroundColor, bool extended = false, Widget? leading, Widget? trailing, required List<NavigationRailDestination> destinations, required int? selectedIndex, void Function(int)? onDestinationSelected, double? elevation, double? groupAlignment, NavigationRailLabelType? labelType, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? minWidth, double? minExtendedWidth, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape})
  NavigationRail$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {bool extended = false} , hasDefaultValue:true, defaultValueCode:false
    required bool extended,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {required List<NavigationRailDestination> destinations} , hasDefaultValue:false, defaultValueCode:null
    required List<NavigationRailDestination> destinations,

    /// optionalParameters: {required int? selectedIndex} , hasDefaultValue:false, defaultValueCode:null
    required int? selectedIndex,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<int>? onDestinationSelected,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? groupAlignment} , hasDefaultValue:false, defaultValueCode:null
    double? groupAlignment,

    /// optionalParameters: {NavigationRailLabelType? labelType} , hasDefaultValue:false, defaultValueCode:null
    NavigationRailLabelType? labelType,

    /// optionalParameters: {TextStyle? unselectedLabelTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? unselectedLabelTextStyle,

    /// optionalParameters: {TextStyle? selectedLabelTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? selectedLabelTextStyle,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? unselectedIconTheme,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? selectedIconTheme,

    /// optionalParameters: {double? minWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minWidth,

    /// optionalParameters: {double? minExtendedWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minExtendedWidth,

    /// optionalParameters: {bool? useIndicator} , hasDefaultValue:false, defaultValueCode:null
    bool? useIndicator,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,
  }) : super(
          key: key,
          backgroundColor: backgroundColor,
          extended: extended,
          leading: leading,
          trailing: trailing,
          destinations: destinations,
          selectedIndex: selectedIndex,
          onDestinationSelected: onDestinationSelected,
          elevation: elevation,
          groupAlignment: groupAlignment,
          labelType: labelType,
          unselectedLabelTextStyle: unselectedLabelTextStyle,
          selectedLabelTextStyle: selectedLabelTextStyle,
          unselectedIconTheme: unselectedIconTheme,
          selectedIconTheme: selectedIconTheme,
          minWidth: minWidth,
          minExtendedWidth: minExtendedWidth,
          useIndicator: useIndicator,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationRail$Mate(
        key: p.get('key').value,
        backgroundColor: p.get('backgroundColor').value,
        extended: p.get('extended').value,
        leading: p.get('leading').value,
        trailing: p.get('trailing').value,
        destinations: p.get('destinations').value,
        selectedIndex: p.get('selectedIndex').value,
        onDestinationSelected: p.get('onDestinationSelected').value,
        elevation: p.get('elevation').value,
        groupAlignment: p.get('groupAlignment').value,
        labelType: p.get('labelType').value,
        unselectedLabelTextStyle: p.get('unselectedLabelTextStyle').value,
        selectedLabelTextStyle: p.get('selectedLabelTextStyle').value,
        unselectedIconTheme: p.get('unselectedIconTheme').value,
        selectedIconTheme: p.get('selectedIconTheme').value,
        minWidth: p.get('minWidth').value,
        minExtendedWidth: p.get('minExtendedWidth').value,
        useIndicator: p.get('useIndicator').value,
        indicatorColor: p.get('indicatorColor').value,
        indicatorShape: p.get('indicatorShape').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('extended', extended);
    mateParams.put('leading', leading);
    mateParams.put('trailing', trailing);
    mateParams.putList('destinations', destinations);
    mateParams.put('selectedIndex', selectedIndex);
    mateParams.put('onDestinationSelected', onDestinationSelected);
    mateParams.put('elevation', elevation);
    mateParams.put('groupAlignment', groupAlignment);
    mateParams.put('labelType', labelType);
    mateParams.put('unselectedLabelTextStyle', unselectedLabelTextStyle);
    mateParams.put('selectedLabelTextStyle', selectedLabelTextStyle);
    mateParams.put('unselectedIconTheme', unselectedIconTheme);
    mateParams.put('selectedIconTheme', selectedIconTheme);
    mateParams.put('minWidth', minWidth);
    mateParams.put('minExtendedWidth', minExtendedWidth);
    mateParams.put('useIndicator', useIndicator);
    mateParams.put('indicatorColor', indicatorColor);
    mateParams.put('indicatorShape', indicatorShape);
  }
}

/// class NavigationRailDestination
class NavigationRailDestination$Mate extends NavigationRailDestination with Mate<NavigationRailDestination$Mate> {
  /// NavigationRailDestination NavigationRailDestination({required Widget icon, Widget? selectedIcon, Color? indicatorColor, ShapeBorder? indicatorShape, required Widget label, EdgeInsetsGeometry? padding})
  NavigationRailDestination$Mate({
    /// optionalParameters: {required Widget icon} , hasDefaultValue:false, defaultValueCode:null
    required Widget icon,

    /// optionalParameters: {Widget? selectedIcon} , hasDefaultValue:false, defaultValueCode:null
    Widget? selectedIcon,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,

    /// optionalParameters: {required Widget label} , hasDefaultValue:false, defaultValueCode:null
    required Widget label,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,
  }) : super(
          icon: icon,
          selectedIcon: selectedIcon,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          label: label,
          padding: padding,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationRailDestination$Mate(
        icon: p.get('icon').value,
        selectedIcon: p.get('selectedIcon').value,
        indicatorColor: p.get('indicatorColor').value,
        indicatorShape: p.get('indicatorShape').value,
        label: p.get('label').value,
        padding: p.get('padding').value,
      ),
    );
    mateParams.put('icon', icon);
    mateParams.put('selectedIcon', selectedIcon);
    mateParams.put('indicatorColor', indicatorColor);
    mateParams.put('indicatorShape', indicatorShape);
    mateParams.put('label', label);
    mateParams.put('padding', padding);
  }
}
