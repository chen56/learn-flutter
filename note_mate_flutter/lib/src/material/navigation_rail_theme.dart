// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/navigation_rail_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';
import 'package:flutter/src/material/navigation_rail.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class NavigationRailThemeData with Diagnosticable
class NavigationRailThemeData$Mate extends NavigationRailThemeData with Mate<NavigationRailThemeData$Mate> {
  /// NavigationRailThemeData NavigationRailThemeData({Color? backgroundColor, double? elevation, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? groupAlignment, NavigationRailLabelType? labelType, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape, double? minWidth, double? minExtendedWidth})
  NavigationRailThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {TextStyle? unselectedLabelTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? unselectedLabelTextStyle,

    /// optionalParameters: {TextStyle? selectedLabelTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? selectedLabelTextStyle,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? unselectedIconTheme,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? selectedIconTheme,

    /// optionalParameters: {double? groupAlignment} , hasDefaultValue:false, defaultValueCode:null
    double? groupAlignment,

    /// optionalParameters: {NavigationRailLabelType? labelType} , hasDefaultValue:false, defaultValueCode:null
    NavigationRailLabelType? labelType,

    /// optionalParameters: {bool? useIndicator} , hasDefaultValue:false, defaultValueCode:null
    bool? useIndicator,

    /// optionalParameters: {Color? indicatorColor} , hasDefaultValue:false, defaultValueCode:null
    Color? indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? indicatorShape,

    /// optionalParameters: {double? minWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minWidth,

    /// optionalParameters: {double? minExtendedWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minExtendedWidth,
  }) : super(
          backgroundColor: backgroundColor,
          elevation: elevation,
          unselectedLabelTextStyle: unselectedLabelTextStyle,
          selectedLabelTextStyle: selectedLabelTextStyle,
          unselectedIconTheme: unselectedIconTheme,
          selectedIconTheme: selectedIconTheme,
          groupAlignment: groupAlignment,
          labelType: labelType,
          useIndicator: useIndicator,
          indicatorColor: indicatorColor,
          indicatorShape: indicatorShape,
          minWidth: minWidth,
          minExtendedWidth: minExtendedWidth,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationRailThemeData$Mate(
        backgroundColor: p.get('backgroundColor').value,
        elevation: p.get('elevation').value,
        unselectedLabelTextStyle: p.get('unselectedLabelTextStyle').value,
        selectedLabelTextStyle: p.get('selectedLabelTextStyle').value,
        unselectedIconTheme: p.get('unselectedIconTheme').value,
        selectedIconTheme: p.get('selectedIconTheme').value,
        groupAlignment: p.get('groupAlignment').value,
        labelType: p.get('labelType').value,
        useIndicator: p.get('useIndicator').value,
        indicatorColor: p.get('indicatorColor').value,
        indicatorShape: p.get('indicatorShape').value,
        minWidth: p.get('minWidth').value,
        minExtendedWidth: p.get('minExtendedWidth').value,
      ),
    );
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('elevation', elevation);
    mateParams.put('unselectedLabelTextStyle', unselectedLabelTextStyle);
    mateParams.put('selectedLabelTextStyle', selectedLabelTextStyle);
    mateParams.put('unselectedIconTheme', unselectedIconTheme);
    mateParams.put('selectedIconTheme', selectedIconTheme);
    mateParams.put('groupAlignment', groupAlignment);
    mateParams.put('labelType', labelType);
    mateParams.put('useIndicator', useIndicator);
    mateParams.put('indicatorColor', indicatorColor);
    mateParams.put('indicatorShape', indicatorShape);
    mateParams.put('minWidth', minWidth);
    mateParams.put('minExtendedWidth', minExtendedWidth);
  }
}

/// class NavigationRailTheme extends InheritedTheme
class NavigationRailTheme$Mate extends NavigationRailTheme with WidgetMate<NavigationRailTheme$Mate> {
  /// NavigationRailTheme NavigationRailTheme({Key? key, required NavigationRailThemeData data, required Widget child})
  NavigationRailTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required NavigationRailThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required NavigationRailThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NavigationRailTheme$Mate(
        key: p.get('key').value,
        data: p.get('data').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('data', data);
    mateParams.put('child', child);
  }
}
