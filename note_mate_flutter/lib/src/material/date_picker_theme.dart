// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/date_picker_theme.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class DatePickerThemeData with Diagnosticable
class DatePickerThemeData$Mate extends DatePickerThemeData with Mate<DatePickerThemeData$Mate> {
  /// DatePickerThemeData DatePickerThemeData({Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? headerBackgroundColor, Color? headerForegroundColor, TextStyle? headerHeadlineStyle, TextStyle? headerHelpStyle, TextStyle? weekdayStyle, TextStyle? dayStyle, MaterialStateProperty<Color?>? dayForegroundColor, MaterialStateProperty<Color?>? dayBackgroundColor, MaterialStateProperty<Color?>? dayOverlayColor, MaterialStateProperty<Color?>? todayForegroundColor, MaterialStateProperty<Color?>? todayBackgroundColor, BorderSide? todayBorder, TextStyle? yearStyle, MaterialStateProperty<Color?>? yearForegroundColor, MaterialStateProperty<Color?>? yearBackgroundColor, MaterialStateProperty<Color?>? yearOverlayColor, Color? rangePickerBackgroundColor, double? rangePickerElevation, Color? rangePickerShadowColor, Color? rangePickerSurfaceTintColor, ShapeBorder? rangePickerShape, Color? rangePickerHeaderBackgroundColor, Color? rangePickerHeaderForegroundColor, TextStyle? rangePickerHeaderHeadlineStyle, TextStyle? rangePickerHeaderHelpStyle, Color? rangeSelectionBackgroundColor, MaterialStateProperty<Color?>? rangeSelectionOverlayColor})
  DatePickerThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {Color? headerBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? headerBackgroundColor,

    /// optionalParameters: {Color? headerForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? headerForegroundColor,

    /// optionalParameters: {TextStyle? headerHeadlineStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? headerHeadlineStyle,

    /// optionalParameters: {TextStyle? headerHelpStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? headerHelpStyle,

    /// optionalParameters: {TextStyle? weekdayStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? weekdayStyle,

    /// optionalParameters: {TextStyle? dayStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? dayStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? dayForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? dayBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? dayOverlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? dayOverlayColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? todayForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? todayForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? todayBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? todayBackgroundColor,

    /// optionalParameters: {BorderSide? todayBorder} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? todayBorder,

    /// optionalParameters: {TextStyle? yearStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? yearStyle,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? yearForegroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? yearBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? yearOverlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? yearOverlayColor,

    /// optionalParameters: {Color? rangePickerBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerBackgroundColor,

    /// optionalParameters: {double? rangePickerElevation} , hasDefaultValue:false, defaultValueCode:null
    double? rangePickerElevation,

    /// optionalParameters: {Color? rangePickerShadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerShadowColor,

    /// optionalParameters: {Color? rangePickerSurfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerSurfaceTintColor,

    /// optionalParameters: {ShapeBorder? rangePickerShape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? rangePickerShape,

    /// optionalParameters: {Color? rangePickerHeaderBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerHeaderBackgroundColor,

    /// optionalParameters: {Color? rangePickerHeaderForegroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangePickerHeaderForegroundColor,

    /// optionalParameters: {TextStyle? rangePickerHeaderHeadlineStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? rangePickerHeaderHeadlineStyle,

    /// optionalParameters: {TextStyle? rangePickerHeaderHelpStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? rangePickerHeaderHelpStyle,

    /// optionalParameters: {Color? rangeSelectionBackgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? rangeSelectionBackgroundColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? rangeSelectionOverlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? rangeSelectionOverlayColor,
  }) : super(
          backgroundColor: backgroundColor,
          elevation: elevation,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          shape: shape,
          headerBackgroundColor: headerBackgroundColor,
          headerForegroundColor: headerForegroundColor,
          headerHeadlineStyle: headerHeadlineStyle,
          headerHelpStyle: headerHelpStyle,
          weekdayStyle: weekdayStyle,
          dayStyle: dayStyle,
          dayForegroundColor: dayForegroundColor,
          dayBackgroundColor: dayBackgroundColor,
          dayOverlayColor: dayOverlayColor,
          todayForegroundColor: todayForegroundColor,
          todayBackgroundColor: todayBackgroundColor,
          todayBorder: todayBorder,
          yearStyle: yearStyle,
          yearForegroundColor: yearForegroundColor,
          yearBackgroundColor: yearBackgroundColor,
          yearOverlayColor: yearOverlayColor,
          rangePickerBackgroundColor: rangePickerBackgroundColor,
          rangePickerElevation: rangePickerElevation,
          rangePickerShadowColor: rangePickerShadowColor,
          rangePickerSurfaceTintColor: rangePickerSurfaceTintColor,
          rangePickerShape: rangePickerShape,
          rangePickerHeaderBackgroundColor: rangePickerHeaderBackgroundColor,
          rangePickerHeaderForegroundColor: rangePickerHeaderForegroundColor,
          rangePickerHeaderHeadlineStyle: rangePickerHeaderHeadlineStyle,
          rangePickerHeaderHelpStyle: rangePickerHeaderHelpStyle,
          rangeSelectionBackgroundColor: rangeSelectionBackgroundColor,
          rangeSelectionOverlayColor: rangeSelectionOverlayColor,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DatePickerThemeData$Mate(
        backgroundColor: p.get('backgroundColor').value,
        elevation: p.get('elevation').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        shape: p.get('shape').value,
        headerBackgroundColor: p.get('headerBackgroundColor').value,
        headerForegroundColor: p.get('headerForegroundColor').value,
        headerHeadlineStyle: p.get('headerHeadlineStyle').value,
        headerHelpStyle: p.get('headerHelpStyle').value,
        weekdayStyle: p.get('weekdayStyle').value,
        dayStyle: p.get('dayStyle').value,
        dayForegroundColor: p.get('dayForegroundColor').value,
        dayBackgroundColor: p.get('dayBackgroundColor').value,
        dayOverlayColor: p.get('dayOverlayColor').value,
        todayForegroundColor: p.get('todayForegroundColor').value,
        todayBackgroundColor: p.get('todayBackgroundColor').value,
        todayBorder: p.get('todayBorder').value,
        yearStyle: p.get('yearStyle').value,
        yearForegroundColor: p.get('yearForegroundColor').value,
        yearBackgroundColor: p.get('yearBackgroundColor').value,
        yearOverlayColor: p.get('yearOverlayColor').value,
        rangePickerBackgroundColor: p.get('rangePickerBackgroundColor').value,
        rangePickerElevation: p.get('rangePickerElevation').value,
        rangePickerShadowColor: p.get('rangePickerShadowColor').value,
        rangePickerSurfaceTintColor: p.get('rangePickerSurfaceTintColor').value,
        rangePickerShape: p.get('rangePickerShape').value,
        rangePickerHeaderBackgroundColor: p.get('rangePickerHeaderBackgroundColor').value,
        rangePickerHeaderForegroundColor: p.get('rangePickerHeaderForegroundColor').value,
        rangePickerHeaderHeadlineStyle: p.get('rangePickerHeaderHeadlineStyle').value,
        rangePickerHeaderHelpStyle: p.get('rangePickerHeaderHelpStyle').value,
        rangeSelectionBackgroundColor: p.get('rangeSelectionBackgroundColor').value,
        rangeSelectionOverlayColor: p.get('rangeSelectionOverlayColor').value,
      ),
    );
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('elevation', elevation);
    mateParams.put('shadowColor', shadowColor);
    mateParams.put('surfaceTintColor', surfaceTintColor);
    mateParams.put('shape', shape);
    mateParams.put('headerBackgroundColor', headerBackgroundColor);
    mateParams.put('headerForegroundColor', headerForegroundColor);
    mateParams.put('headerHeadlineStyle', headerHeadlineStyle);
    mateParams.put('headerHelpStyle', headerHelpStyle);
    mateParams.put('weekdayStyle', weekdayStyle);
    mateParams.put('dayStyle', dayStyle);
    mateParams.put('dayForegroundColor', dayForegroundColor);
    mateParams.put('dayBackgroundColor', dayBackgroundColor);
    mateParams.put('dayOverlayColor', dayOverlayColor);
    mateParams.put('todayForegroundColor', todayForegroundColor);
    mateParams.put('todayBackgroundColor', todayBackgroundColor);
    mateParams.put('todayBorder', todayBorder);
    mateParams.put('yearStyle', yearStyle);
    mateParams.put('yearForegroundColor', yearForegroundColor);
    mateParams.put('yearBackgroundColor', yearBackgroundColor);
    mateParams.put('yearOverlayColor', yearOverlayColor);
    mateParams.put('rangePickerBackgroundColor', rangePickerBackgroundColor);
    mateParams.put('rangePickerElevation', rangePickerElevation);
    mateParams.put('rangePickerShadowColor', rangePickerShadowColor);
    mateParams.put('rangePickerSurfaceTintColor', rangePickerSurfaceTintColor);
    mateParams.put('rangePickerShape', rangePickerShape);
    mateParams.put('rangePickerHeaderBackgroundColor', rangePickerHeaderBackgroundColor);
    mateParams.put('rangePickerHeaderForegroundColor', rangePickerHeaderForegroundColor);
    mateParams.put('rangePickerHeaderHeadlineStyle', rangePickerHeaderHeadlineStyle);
    mateParams.put('rangePickerHeaderHelpStyle', rangePickerHeaderHelpStyle);
    mateParams.put('rangeSelectionBackgroundColor', rangeSelectionBackgroundColor);
    mateParams.put('rangeSelectionOverlayColor', rangeSelectionOverlayColor);
  }
}

/// class DatePickerTheme extends InheritedTheme
class DatePickerTheme$Mate extends DatePickerTheme with WidgetMate<DatePickerTheme$Mate> {
  /// DatePickerTheme DatePickerTheme({Key? key, required DatePickerThemeData data, required Widget child})
  DatePickerTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required DatePickerThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required DatePickerThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DatePickerTheme$Mate(
        key: p.get('key').value,
        data: p.get('data').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('data', data);
    mateParams.put('child', child);
  }
}
