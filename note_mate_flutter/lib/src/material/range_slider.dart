// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/range_slider.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/material/slider_theme.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:core';
import 'dart:ui';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:note/mate.dart';

/// class RangeSlider extends StatefulWidget
class RangeSlider$Mate extends RangeSlider with WidgetMate<RangeSlider$Mate> {
  /// RangeSlider RangeSlider({Key? key, required RangeValues values, required void Function(RangeValues)? onChanged, void Function(RangeValues)? onChangeStart, void Function(RangeValues)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, RangeLabels? labels, Color? activeColor, Color? inactiveColor, MaterialStateProperty<Color?>? overlayColor, MaterialStateProperty<MouseCursor?>? mouseCursor, String Function(double)? semanticFormatterCallback})
  RangeSlider$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required RangeValues values} , hasDefaultValue:false, defaultValueCode:null
    required RangeValues values,

    /// optionalParameters: {required void Function(RangeValues)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<RangeValues>? onChanged,

    /// optionalParameters: {void Function(RangeValues)? onChangeStart} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<RangeValues>? onChangeStart,

    /// optionalParameters: {void Function(RangeValues)? onChangeEnd} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<RangeValues>? onChangeEnd,

    /// optionalParameters: {double min = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double min,

    /// optionalParameters: {double max = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double max,

    /// optionalParameters: {int? divisions} , hasDefaultValue:false, defaultValueCode:null
    int? divisions,

    /// optionalParameters: {RangeLabels? labels} , hasDefaultValue:false, defaultValueCode:null
    RangeLabels? labels,

    /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeColor,

    /// optionalParameters: {Color? inactiveColor} , hasDefaultValue:false, defaultValueCode:null
    Color? inactiveColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<Color?>? overlayColor,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {String Function(double)? semanticFormatterCallback} , hasDefaultValue:false, defaultValueCode:null
    SemanticFormatterCallback? semanticFormatterCallback,
  }) : super(
          key: key,
          values: values,
          onChanged: onChanged,
          onChangeStart: onChangeStart,
          onChangeEnd: onChangeEnd,
          min: min,
          max: max,
          divisions: divisions,
          labels: labels,
          activeColor: activeColor,
          inactiveColor: inactiveColor,
          overlayColor: overlayColor,
          mouseCursor: mouseCursor,
          semanticFormatterCallback: semanticFormatterCallback,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RangeSlider$Mate(
        key: p.get('key').value,
        values: p.get('values').value,
        onChanged: p.get('onChanged').value,
        onChangeStart: p.get('onChangeStart').value,
        onChangeEnd: p.get('onChangeEnd').value,
        min: p.get('min').value,
        max: p.get('max').value,
        divisions: p.get('divisions').value,
        labels: p.get('labels').value,
        activeColor: p.get('activeColor').value,
        inactiveColor: p.get('inactiveColor').value,
        overlayColor: p.get('overlayColor').value,
        mouseCursor: p.get('mouseCursor').value,
        semanticFormatterCallback: p.get('semanticFormatterCallback').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('values', init: values);
    mateParams.put('onChanged', init: onChanged);
    mateParams.put('onChangeStart', init: onChangeStart);
    mateParams.put('onChangeEnd', init: onChangeEnd);
    mateParams.put('min', init: min);
    mateParams.put('max', init: max);
    mateParams.put('divisions', init: divisions);
    mateParams.put('labels', init: labels);
    mateParams.put('activeColor', init: activeColor);
    mateParams.put('inactiveColor', init: inactiveColor);
    mateParams.put('overlayColor', init: overlayColor);
    mateParams.put('mouseCursor', init: mouseCursor);
    mateParams.put('semanticFormatterCallback', init: semanticFormatterCallback);
  }
}
