// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/list_tile_theme.dart';
import 'dart:core';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/material/list_tile.dart';
import 'dart:ui';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/material/material_state.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'package:flutter/src/material/theme_data.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class ListTileThemeData with Diagnosticable
class ListTileThemeData$Mate extends ListTileThemeData with Mate<ListTileThemeData$Mate> {
  /// ListTileThemeData ListTileThemeData({bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity})
  ListTileThemeData$Mate({
    /// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
    bool? dense,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , hasDefaultValue:false, defaultValueCode:null
    ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {TextStyle? titleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? titleTextStyle,

    /// optionalParameters: {TextStyle? subtitleTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? subtitleTextStyle,

    /// optionalParameters: {TextStyle? leadingAndTrailingTextStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? leadingAndTrailingTextStyle,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedTileColor,

    /// optionalParameters: {double? horizontalTitleGap} , hasDefaultValue:false, defaultValueCode:null
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , hasDefaultValue:false, defaultValueCode:null
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minLeadingWidth,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {VisualDensity? visualDensity} , hasDefaultValue:false, defaultValueCode:null
    VisualDensity? visualDensity,
  }) : super(
          dense: dense,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          titleTextStyle: titleTextStyle,
          subtitleTextStyle: subtitleTextStyle,
          leadingAndTrailingTextStyle: leadingAndTrailingTextStyle,
          contentPadding: contentPadding,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          enableFeedback: enableFeedback,
          mouseCursor: mouseCursor,
          visualDensity: visualDensity,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListTileThemeData$Mate(
        dense: p.get('dense').value,
        shape: p.get('shape').value,
        style: p.get('style').value,
        selectedColor: p.get('selectedColor').value,
        iconColor: p.get('iconColor').value,
        textColor: p.get('textColor').value,
        titleTextStyle: p.get('titleTextStyle').value,
        subtitleTextStyle: p.get('subtitleTextStyle').value,
        leadingAndTrailingTextStyle: p.get('leadingAndTrailingTextStyle').value,
        contentPadding: p.get('contentPadding').value,
        tileColor: p.get('tileColor').value,
        selectedTileColor: p.get('selectedTileColor').value,
        horizontalTitleGap: p.get('horizontalTitleGap').value,
        minVerticalPadding: p.get('minVerticalPadding').value,
        minLeadingWidth: p.get('minLeadingWidth').value,
        enableFeedback: p.get('enableFeedback').value,
        mouseCursor: p.get('mouseCursor').value,
        visualDensity: p.get('visualDensity').value,
      ),
    );
    mateParams.put('dense', init: dense);
    mateParams.put('shape', init: shape);
    mateParams.put('style', init: style);
    mateParams.put('selectedColor', init: selectedColor);
    mateParams.put('iconColor', init: iconColor);
    mateParams.put('textColor', init: textColor);
    mateParams.put('titleTextStyle', init: titleTextStyle);
    mateParams.put('subtitleTextStyle', init: subtitleTextStyle);
    mateParams.put('leadingAndTrailingTextStyle', init: leadingAndTrailingTextStyle);
    mateParams.put('contentPadding', init: contentPadding);
    mateParams.put('tileColor', init: tileColor);
    mateParams.put('selectedTileColor', init: selectedTileColor);
    mateParams.put('horizontalTitleGap', init: horizontalTitleGap);
    mateParams.put('minVerticalPadding', init: minVerticalPadding);
    mateParams.put('minLeadingWidth', init: minLeadingWidth);
    mateParams.put('enableFeedback', init: enableFeedback);
    mateParams.put('mouseCursor', init: mouseCursor);
    mateParams.put('visualDensity', init: visualDensity);
  }
}

/// class ListTileTheme extends InheritedTheme
class ListTileTheme$Mate extends ListTileTheme with WidgetMate<ListTileTheme$Mate> {
  /// ListTileTheme ListTileTheme({Key? key, ListTileThemeData? data, bool? dense, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, EdgeInsetsGeometry? contentPadding, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, MaterialStateProperty<MouseCursor?>? mouseCursor, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, required Widget child})
  ListTileTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {ListTileThemeData? data} , hasDefaultValue:false, defaultValueCode:null
    ListTileThemeData? data,

    /// optionalParameters: {bool? dense} , hasDefaultValue:false, defaultValueCode:null
    bool? dense,

    /// optionalParameters: {ShapeBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    ShapeBorder? shape,

    /// optionalParameters: {ListTileStyle? style} , hasDefaultValue:false, defaultValueCode:null
    ListTileStyle? style,

    /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedColor,

    /// optionalParameters: {Color? iconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? iconColor,

    /// optionalParameters: {Color? textColor} , hasDefaultValue:false, defaultValueCode:null
    Color? textColor,

    /// optionalParameters: {EdgeInsetsGeometry? contentPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? contentPadding,

    /// optionalParameters: {Color? tileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? tileColor,

    /// optionalParameters: {Color? selectedTileColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedTileColor,

    /// optionalParameters: {bool? enableFeedback} , hasDefaultValue:false, defaultValueCode:null
    bool? enableFeedback,

    /// optionalParameters: {MaterialStateProperty<MouseCursor?>? mouseCursor} , hasDefaultValue:false, defaultValueCode:null
    MaterialStateProperty<MouseCursor?>? mouseCursor,

    /// optionalParameters: {double? horizontalTitleGap} , hasDefaultValue:false, defaultValueCode:null
    double? horizontalTitleGap,

    /// optionalParameters: {double? minVerticalPadding} , hasDefaultValue:false, defaultValueCode:null
    double? minVerticalPadding,

    /// optionalParameters: {double? minLeadingWidth} , hasDefaultValue:false, defaultValueCode:null
    double? minLeadingWidth,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          dense: dense,
          shape: shape,
          style: style,
          selectedColor: selectedColor,
          iconColor: iconColor,
          textColor: textColor,
          contentPadding: contentPadding,
          tileColor: tileColor,
          selectedTileColor: selectedTileColor,
          enableFeedback: enableFeedback,
          mouseCursor: mouseCursor,
          horizontalTitleGap: horizontalTitleGap,
          minVerticalPadding: minVerticalPadding,
          minLeadingWidth: minLeadingWidth,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListTileTheme$Mate(
        key: p.get('key').value,
        data: p.get('data').value,
        dense: p.get('dense').value,
        shape: p.get('shape').value,
        style: p.get('style').value,
        selectedColor: p.get('selectedColor').value,
        iconColor: p.get('iconColor').value,
        textColor: p.get('textColor').value,
        contentPadding: p.get('contentPadding').value,
        tileColor: p.get('tileColor').value,
        selectedTileColor: p.get('selectedTileColor').value,
        enableFeedback: p.get('enableFeedback').value,
        mouseCursor: p.get('mouseCursor').value,
        horizontalTitleGap: p.get('horizontalTitleGap').value,
        minVerticalPadding: p.get('minVerticalPadding').value,
        minLeadingWidth: p.get('minLeadingWidth').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('data', init: data);
    mateParams.put('dense', init: dense);
    mateParams.put('shape', init: shape);
    mateParams.put('style', init: style);
    mateParams.put('selectedColor', init: selectedColor);
    mateParams.put('iconColor', init: iconColor);
    mateParams.put('textColor', init: textColor);
    mateParams.put('contentPadding', init: contentPadding);
    mateParams.put('tileColor', init: tileColor);
    mateParams.put('selectedTileColor', init: selectedTileColor);
    mateParams.put('enableFeedback', init: enableFeedback);
    mateParams.put('mouseCursor', init: mouseCursor);
    mateParams.put('horizontalTitleGap', init: horizontalTitleGap);
    mateParams.put('minVerticalPadding', init: minVerticalPadding);
    mateParams.put('minLeadingWidth', init: minLeadingWidth);
    mateParams.put('child', init: child);
  }
}
