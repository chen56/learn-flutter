// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/chip_theme.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/widgets/icon_theme_data.dart';

/// class ChipTheme extends InheritedTheme
class ChipTheme$Mate extends ChipTheme with WidgetMate<ChipTheme$Mate> {
  /// ChipTheme ChipTheme({Key? key, required ChipThemeData data, required Widget child})
  ChipTheme$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ChipThemeData data} , hasDefaultValue:false, defaultValueCode:null
    required ChipThemeData data,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          data: data,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ChipTheme$Mate(
        key: p.get('key').value,
        data: p.get('data').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('data', data);
    mateParams.put('child', child);
  }
}

/// class ChipThemeData with Diagnosticable
class ChipThemeData$Mate extends ChipThemeData with Mate<ChipThemeData$Mate> {
  /// ChipThemeData ChipThemeData({Color? backgroundColor, Color? deleteIconColor, Color? disabledColor, Color? selectedColor, Color? secondarySelectedColor, Color? shadowColor, Color? surfaceTintColor, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, EdgeInsetsGeometry? labelPadding, EdgeInsetsGeometry? padding, BorderSide? side, OutlinedBorder? shape, TextStyle? labelStyle, TextStyle? secondaryLabelStyle, Brightness? brightness, double? elevation, double? pressElevation, IconThemeData? iconTheme})
  ChipThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? deleteIconColor} , hasDefaultValue:false, defaultValueCode:null
    Color? deleteIconColor,

    /// optionalParameters: {Color? disabledColor} , hasDefaultValue:false, defaultValueCode:null
    Color? disabledColor,

    /// optionalParameters: {Color? selectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedColor,

    /// optionalParameters: {Color? secondarySelectedColor} , hasDefaultValue:false, defaultValueCode:null
    Color? secondarySelectedColor,

    /// optionalParameters: {Color? shadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , hasDefaultValue:false, defaultValueCode:null
    Color? surfaceTintColor,

    /// optionalParameters: {Color? selectedShadowColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectedShadowColor,

    /// optionalParameters: {bool? showCheckmark} , hasDefaultValue:false, defaultValueCode:null
    bool? showCheckmark,

    /// optionalParameters: {Color? checkmarkColor} , hasDefaultValue:false, defaultValueCode:null
    Color? checkmarkColor,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? labelPadding,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {BorderSide? side} , hasDefaultValue:false, defaultValueCode:null
    BorderSide? side,

    /// optionalParameters: {OutlinedBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    OutlinedBorder? shape,

    /// optionalParameters: {TextStyle? labelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? labelStyle,

    /// optionalParameters: {TextStyle? secondaryLabelStyle} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? secondaryLabelStyle,

    /// optionalParameters: {Brightness? brightness} , hasDefaultValue:false, defaultValueCode:null
    Brightness? brightness,

    /// optionalParameters: {double? elevation} , hasDefaultValue:false, defaultValueCode:null
    double? elevation,

    /// optionalParameters: {double? pressElevation} , hasDefaultValue:false, defaultValueCode:null
    double? pressElevation,

    /// optionalParameters: {IconThemeData? iconTheme} , hasDefaultValue:false, defaultValueCode:null
    IconThemeData? iconTheme,
  }) : super(
          backgroundColor: backgroundColor,
          deleteIconColor: deleteIconColor,
          disabledColor: disabledColor,
          selectedColor: selectedColor,
          secondarySelectedColor: secondarySelectedColor,
          shadowColor: shadowColor,
          surfaceTintColor: surfaceTintColor,
          selectedShadowColor: selectedShadowColor,
          showCheckmark: showCheckmark,
          checkmarkColor: checkmarkColor,
          labelPadding: labelPadding,
          padding: padding,
          side: side,
          shape: shape,
          labelStyle: labelStyle,
          secondaryLabelStyle: secondaryLabelStyle,
          brightness: brightness,
          elevation: elevation,
          pressElevation: pressElevation,
          iconTheme: iconTheme,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ChipThemeData$Mate(
        backgroundColor: p.get('backgroundColor').value,
        deleteIconColor: p.get('deleteIconColor').value,
        disabledColor: p.get('disabledColor').value,
        selectedColor: p.get('selectedColor').value,
        secondarySelectedColor: p.get('secondarySelectedColor').value,
        shadowColor: p.get('shadowColor').value,
        surfaceTintColor: p.get('surfaceTintColor').value,
        selectedShadowColor: p.get('selectedShadowColor').value,
        showCheckmark: p.get('showCheckmark').value,
        checkmarkColor: p.get('checkmarkColor').value,
        labelPadding: p.get('labelPadding').value,
        padding: p.get('padding').value,
        side: p.get('side').value,
        shape: p.get('shape').value,
        labelStyle: p.get('labelStyle').value,
        secondaryLabelStyle: p.get('secondaryLabelStyle').value,
        brightness: p.get('brightness').value,
        elevation: p.get('elevation').value,
        pressElevation: p.get('pressElevation').value,
        iconTheme: p.get('iconTheme').value,
      ),
    );
    mateParams.put('backgroundColor', backgroundColor);
    mateParams.put('deleteIconColor', deleteIconColor);
    mateParams.put('disabledColor', disabledColor);
    mateParams.put('selectedColor', selectedColor);
    mateParams.put('secondarySelectedColor', secondarySelectedColor);
    mateParams.put('shadowColor', shadowColor);
    mateParams.put('surfaceTintColor', surfaceTintColor);
    mateParams.put('selectedShadowColor', selectedShadowColor);
    mateParams.put('showCheckmark', showCheckmark);
    mateParams.put('checkmarkColor', checkmarkColor);
    mateParams.put('labelPadding', labelPadding);
    mateParams.put('padding', padding);
    mateParams.put('side', side);
    mateParams.put('shape', shape);
    mateParams.put('labelStyle', labelStyle);
    mateParams.put('secondaryLabelStyle', secondaryLabelStyle);
    mateParams.put('brightness', brightness);
    mateParams.put('elevation', elevation);
    mateParams.put('pressElevation', pressElevation);
    mateParams.put('iconTheme', iconTheme);
  }
}
