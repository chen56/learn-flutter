// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/material/calendar_date_picker.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/material/date.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/gestures/recognizer.dart';

/// class CalendarDatePicker extends StatefulWidget
class CalendarDatePicker$Mate extends CalendarDatePicker with WidgetMate<CalendarDatePicker$Mate> {
  /// CalendarDatePicker CalendarDatePicker({Key? key, required DateTime initialDate, required DateTime firstDate, required DateTime lastDate, DateTime? currentDate, required void Function(DateTime) onDateChanged, void Function(DateTime)? onDisplayedMonthChanged, DatePickerMode initialCalendarMode = DatePickerMode.day, bool Function(DateTime)? selectableDayPredicate})
  CalendarDatePicker$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required DateTime initialDate} , hasDefaultValue:false, defaultValueCode:null
    required DateTime initialDate,

    /// optionalParameters: {required DateTime firstDate} , hasDefaultValue:false, defaultValueCode:null
    required DateTime firstDate,

    /// optionalParameters: {required DateTime lastDate} , hasDefaultValue:false, defaultValueCode:null
    required DateTime lastDate,

    /// optionalParameters: {DateTime? currentDate} , hasDefaultValue:false, defaultValueCode:null
    DateTime? currentDate,

    /// optionalParameters: {required void Function(DateTime) onDateChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<DateTime> onDateChanged,

    /// optionalParameters: {void Function(DateTime)? onDisplayedMonthChanged} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<DateTime>? onDisplayedMonthChanged,

    /// optionalParameters: {DatePickerMode initialCalendarMode = DatePickerMode.day} , hasDefaultValue:true, defaultValueCode:DatePickerMode.day
    required DatePickerMode initialCalendarMode,

    /// optionalParameters: {bool Function(DateTime)? selectableDayPredicate} , hasDefaultValue:false, defaultValueCode:null
    SelectableDayPredicate? selectableDayPredicate,
  }) : super(
          key: key,
          initialDate: initialDate,
          firstDate: firstDate,
          lastDate: lastDate,
          currentDate: currentDate,
          onDateChanged: onDateChanged,
          onDisplayedMonthChanged: onDisplayedMonthChanged,
          initialCalendarMode: initialCalendarMode,
          selectableDayPredicate: selectableDayPredicate,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CalendarDatePicker$Mate(
        key: p.get('key').value,
        initialDate: p.get('initialDate').value,
        firstDate: p.get('firstDate').value,
        lastDate: p.get('lastDate').value,
        currentDate: p.get('currentDate').value,
        onDateChanged: p.get('onDateChanged').value,
        onDisplayedMonthChanged: p.get('onDisplayedMonthChanged').value,
        initialCalendarMode: p.get('initialCalendarMode').value,
        selectableDayPredicate: p.get('selectableDayPredicate').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('initialDate', init: initialDate);
    mateParams.put('firstDate', init: firstDate);
    mateParams.put('lastDate', init: lastDate);
    mateParams.put('currentDate', init: currentDate);
    mateParams.put('onDateChanged', init: onDateChanged);
    mateParams.put('onDisplayedMonthChanged', init: onDisplayedMonthChanged);
    mateParams.put('initialCalendarMode', init: initialCalendarMode);
    mateParams.put('selectableDayPredicate', init: selectableDayPredicate);
  }
}

/// class YearPicker extends StatefulWidget
class YearPicker$Mate extends YearPicker with WidgetMate<YearPicker$Mate> {
  /// YearPicker YearPicker({Key? key, DateTime? currentDate, required DateTime firstDate, required DateTime lastDate, DateTime? initialDate, required DateTime selectedDate, required void Function(DateTime) onChanged, DragStartBehavior dragStartBehavior = DragStartBehavior.start})
  YearPicker$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {DateTime? currentDate} , hasDefaultValue:false, defaultValueCode:null
    DateTime? currentDate,

    /// optionalParameters: {required DateTime firstDate} , hasDefaultValue:false, defaultValueCode:null
    required DateTime firstDate,

    /// optionalParameters: {required DateTime lastDate} , hasDefaultValue:false, defaultValueCode:null
    required DateTime lastDate,

    /// optionalParameters: {DateTime? initialDate} , hasDefaultValue:false, defaultValueCode:null
    DateTime? initialDate,

    /// optionalParameters: {required DateTime selectedDate} , hasDefaultValue:false, defaultValueCode:null
    required DateTime selectedDate,

    /// optionalParameters: {required void Function(DateTime) onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<DateTime> onChanged,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,
  }) : super(
          key: key,
          currentDate: currentDate,
          firstDate: firstDate,
          lastDate: lastDate,
          initialDate: initialDate,
          selectedDate: selectedDate,
          onChanged: onChanged,
          dragStartBehavior: dragStartBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => YearPicker$Mate(
        key: p.get('key').value,
        currentDate: p.get('currentDate').value,
        firstDate: p.get('firstDate').value,
        lastDate: p.get('lastDate').value,
        initialDate: p.get('initialDate').value,
        selectedDate: p.get('selectedDate').value,
        onChanged: p.get('onChanged').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('currentDate', init: currentDate);
    mateParams.put('firstDate', init: firstDate);
    mateParams.put('lastDate', init: lastDate);
    mateParams.put('initialDate', init: initialDate);
    mateParams.put('selectedDate', init: selectedDate);
    mateParams.put('onChanged', init: onChanged);
    mateParams.put('dragStartBehavior', init: dragStartBehavior);
  }
}
