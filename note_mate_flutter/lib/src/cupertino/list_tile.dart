// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/list_tile.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'dart:async';
import 'dart:ui';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:core';
import 'package:note/mate.dart';

/// class CupertinoListTile extends StatefulWidget
class CupertinoListTile$Mate extends CupertinoListTile with WidgetMate<CupertinoListTile$Mate> {
  /// CupertinoListTile CupertinoListTile({Key? key, required Widget title, Widget? subtitle, Widget? additionalInfo, Widget? leading, Widget? trailing, FutureOr<void> Function()? onTap, Color? backgroundColor, Color? backgroundColorActivated, EdgeInsetsGeometry? padding, double leadingSize = _kLeadingSize, double leadingToTitle = _kLeadingToTitle})
  CupertinoListTile$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget title} , hasDefaultValue:false, defaultValueCode:null
    required Widget title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {Widget? additionalInfo} , hasDefaultValue:false, defaultValueCode:null
    Widget? additionalInfo,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {FutureOr<void> Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    FutureOr<void> Function()? onTap,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? backgroundColorActivated} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColorActivated,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double leadingSize = _kLeadingSize} , hasDefaultValue:true, defaultValueCode:_kLeadingSize
    required double leadingSize,

    /// optionalParameters: {double leadingToTitle = _kLeadingToTitle} , hasDefaultValue:true, defaultValueCode:_kLeadingToTitle
    required double leadingToTitle,
  }) : super(
          key: key,
          title: title,
          subtitle: subtitle,
          additionalInfo: additionalInfo,
          leading: leading,
          trailing: trailing,
          onTap: onTap,
          backgroundColor: backgroundColor,
          backgroundColorActivated: backgroundColorActivated,
          padding: padding,
          leadingSize: leadingSize,
          leadingToTitle: leadingToTitle,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoListTile$Mate(
        key: p.get('key').value,
        title: p.get('title').value,
        subtitle: p.get('subtitle').value,
        additionalInfo: p.get('additionalInfo').value,
        leading: p.get('leading').value,
        trailing: p.get('trailing').value,
        onTap: p.get('onTap').value,
        backgroundColor: p.get('backgroundColor').value,
        backgroundColorActivated: p.get('backgroundColorActivated').value,
        padding: p.get('padding').value,
        leadingSize: p.get('leadingSize').value,
        leadingToTitle: p.get('leadingToTitle').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('title', init: title);
    mateParams.put('subtitle', init: subtitle);
    mateParams.put('additionalInfo', init: additionalInfo);
    mateParams.put('leading', init: leading);
    mateParams.put('trailing', init: trailing);
    mateParams.put('onTap', init: onTap);
    mateParams.put('backgroundColor', init: backgroundColor);
    mateParams.put('backgroundColorActivated', init: backgroundColorActivated);
    mateParams.put('padding', init: padding);
    mateParams.put('leadingSize', init: leadingSize);
    mateParams.put('leadingToTitle', init: leadingToTitle);
  }

  /// CupertinoListTile CupertinoListTile.notched({Key? key, required Widget title, Widget? subtitle, Widget? additionalInfo, Widget? leading, Widget? trailing, FutureOr<void> Function()? onTap, Color? backgroundColor, Color? backgroundColorActivated, EdgeInsetsGeometry? padding, double leadingSize = _kNotchedLeadingSize, double leadingToTitle = _kNotchedLeadingToTitle})
  CupertinoListTile$Mate.notched({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget title} , hasDefaultValue:false, defaultValueCode:null
    required Widget title,

    /// optionalParameters: {Widget? subtitle} , hasDefaultValue:false, defaultValueCode:null
    Widget? subtitle,

    /// optionalParameters: {Widget? additionalInfo} , hasDefaultValue:false, defaultValueCode:null
    Widget? additionalInfo,

    /// optionalParameters: {Widget? leading} , hasDefaultValue:false, defaultValueCode:null
    Widget? leading,

    /// optionalParameters: {Widget? trailing} , hasDefaultValue:false, defaultValueCode:null
    Widget? trailing,

    /// optionalParameters: {FutureOr<void> Function()? onTap} , hasDefaultValue:false, defaultValueCode:null
    FutureOr<void> Function()? onTap,

    /// optionalParameters: {Color? backgroundColor} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColor,

    /// optionalParameters: {Color? backgroundColorActivated} , hasDefaultValue:false, defaultValueCode:null
    Color? backgroundColorActivated,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double leadingSize = _kNotchedLeadingSize} , hasDefaultValue:true, defaultValueCode:_kNotchedLeadingSize
    required double leadingSize,

    /// optionalParameters: {double leadingToTitle = _kNotchedLeadingToTitle} , hasDefaultValue:true, defaultValueCode:_kNotchedLeadingToTitle
    required double leadingToTitle,
  }) : super.notched(
          key: key,
          title: title,
          subtitle: subtitle,
          additionalInfo: additionalInfo,
          leading: leading,
          trailing: trailing,
          onTap: onTap,
          backgroundColor: backgroundColor,
          backgroundColorActivated: backgroundColorActivated,
          padding: padding,
          leadingSize: leadingSize,
          leadingToTitle: leadingToTitle,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoListTile$Mate.notched(
        key: p.get('key').value,
        title: p.get('title').value,
        subtitle: p.get('subtitle').value,
        additionalInfo: p.get('additionalInfo').value,
        leading: p.get('leading').value,
        trailing: p.get('trailing').value,
        onTap: p.get('onTap').value,
        backgroundColor: p.get('backgroundColor').value,
        backgroundColorActivated: p.get('backgroundColorActivated').value,
        padding: p.get('padding').value,
        leadingSize: p.get('leadingSize').value,
        leadingToTitle: p.get('leadingToTitle').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('title', init: title);
    mateParams.put('subtitle', init: subtitle);
    mateParams.put('additionalInfo', init: additionalInfo);
    mateParams.put('leading', init: leading);
    mateParams.put('trailing', init: trailing);
    mateParams.put('onTap', init: onTap);
    mateParams.put('backgroundColor', init: backgroundColor);
    mateParams.put('backgroundColorActivated', init: backgroundColorActivated);
    mateParams.put('padding', init: padding);
    mateParams.put('leadingSize', init: leadingSize);
    mateParams.put('leadingToTitle', init: leadingToTitle);
  }
}

/// class CupertinoListTileChevron extends StatelessWidget
class CupertinoListTileChevron$Mate extends CupertinoListTileChevron with WidgetMate<CupertinoListTileChevron$Mate> {
  /// CupertinoListTileChevron CupertinoListTileChevron({Key? key})
  CupertinoListTileChevron$Mate(
      {
      /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
      Key? key})
      : super(key: key) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoListTileChevron$Mate(key: p.get('key').value),
    );
    mateParams.put('key', init: key);
  }
}
