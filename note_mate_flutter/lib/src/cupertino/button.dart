// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/button.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/border_radius.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:note/mate.dart';

/// class CupertinoButton extends StatefulWidget
class CupertinoButton$Mate extends CupertinoButton with WidgetMate<CupertinoButton$Mate> {
  /// CupertinoButton CupertinoButton({Key? key, required Widget child, EdgeInsetsGeometry? padding, Color? color, Color disabledColor = CupertinoColors.quaternarySystemFill, double? minSize = kMinInteractiveDimensionCupertino, double? pressedOpacity = 0.4, BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0)), AlignmentGeometry alignment = Alignment.center, required void Function()? onPressed})
  CupertinoButton$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Color disabledColor = CupertinoColors.quaternarySystemFill} , hasDefaultValue:true, defaultValueCode:CupertinoColors.quaternarySystemFill
    required Color disabledColor,

    /// optionalParameters: {double? minSize = kMinInteractiveDimensionCupertino} , hasDefaultValue:true, defaultValueCode:kMinInteractiveDimensionCupertino
    double? minSize,

    /// optionalParameters: {double? pressedOpacity = 0.4} , hasDefaultValue:true, defaultValueCode:0.4
    double? pressedOpacity,

    /// optionalParameters: {BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0))} , hasDefaultValue:true, defaultValueCode:const BorderRadius.all(Radius.circular(8.0))
    BorderRadius? borderRadius,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {required void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onPressed,
  }) : super(
          key: key,
          child: child,
          padding: padding,
          color: color,
          disabledColor: disabledColor,
          minSize: minSize,
          pressedOpacity: pressedOpacity,
          borderRadius: borderRadius,
          alignment: alignment,
          onPressed: onPressed,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoButton$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        padding: p.get('padding').value,
        color: p.get('color').value,
        disabledColor: p.get('disabledColor').value,
        minSize: p.get('minSize').value,
        pressedOpacity: p.get('pressedOpacity').value,
        borderRadius: p.get('borderRadius').value,
        alignment: p.get('alignment').value,
        onPressed: p.get('onPressed').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('child', init: child);
    mateParams.put('padding', init: padding);
    mateParams.put('color', init: color);
    mateParams.put('disabledColor', init: disabledColor);
    mateParams.put('minSize', init: minSize);
    mateParams.put('pressedOpacity', init: pressedOpacity);
    mateParams.put('borderRadius', init: borderRadius);
    mateParams.put('alignment', init: alignment);
    mateParams.put('onPressed', init: onPressed);
  }

  /// CupertinoButton CupertinoButton.filled({Key? key, required Widget child, EdgeInsetsGeometry? padding, Color disabledColor = CupertinoColors.quaternarySystemFill, double? minSize = kMinInteractiveDimensionCupertino, double? pressedOpacity = 0.4, BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0)), AlignmentGeometry alignment = Alignment.center, required void Function()? onPressed})
  CupertinoButton$Mate.filled({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {Color disabledColor = CupertinoColors.quaternarySystemFill} , hasDefaultValue:true, defaultValueCode:CupertinoColors.quaternarySystemFill
    required Color disabledColor,

    /// optionalParameters: {double? minSize = kMinInteractiveDimensionCupertino} , hasDefaultValue:true, defaultValueCode:kMinInteractiveDimensionCupertino
    double? minSize,

    /// optionalParameters: {double? pressedOpacity = 0.4} , hasDefaultValue:true, defaultValueCode:0.4
    double? pressedOpacity,

    /// optionalParameters: {BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0))} , hasDefaultValue:true, defaultValueCode:const BorderRadius.all(Radius.circular(8.0))
    BorderRadius? borderRadius,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {required void Function()? onPressed} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onPressed,
  }) : super.filled(
          key: key,
          child: child,
          padding: padding,
          disabledColor: disabledColor,
          minSize: minSize,
          pressedOpacity: pressedOpacity,
          borderRadius: borderRadius,
          alignment: alignment,
          onPressed: onPressed,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoButton$Mate.filled(
        key: p.get('key').value,
        child: p.get('child').value,
        padding: p.get('padding').value,
        disabledColor: p.get('disabledColor').value,
        minSize: p.get('minSize').value,
        pressedOpacity: p.get('pressedOpacity').value,
        borderRadius: p.get('borderRadius').value,
        alignment: p.get('alignment').value,
        onPressed: p.get('onPressed').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('child', init: child);
    mateParams.put('padding', init: padding);
    mateParams.put('disabledColor', init: disabledColor);
    mateParams.put('minSize', init: minSize);
    mateParams.put('pressedOpacity', init: pressedOpacity);
    mateParams.put('borderRadius', init: borderRadius);
    mateParams.put('alignment', init: alignment);
    mateParams.put('onPressed', init: onPressed);
  }
}
