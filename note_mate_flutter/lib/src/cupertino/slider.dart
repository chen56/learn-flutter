// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/slider.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/foundation/basic_types.dart';
import 'dart:ui';
import 'package:note/mate.dart';

/// class CupertinoSlider extends StatefulWidget
class CupertinoSlider$Mate extends CupertinoSlider with WidgetMate<CupertinoSlider$Mate> {
  /// CupertinoSlider CupertinoSlider({Key? key, required double value, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, Color? activeColor, Color thumbColor = CupertinoColors.white})
  CupertinoSlider$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required double value} , hasDefaultValue:false, defaultValueCode:null
    required double value,

    /// optionalParameters: {required void Function(double)? onChanged} , hasDefaultValue:false, defaultValueCode:null
    required ValueChanged<double>? onChanged,

    /// optionalParameters: {void Function(double)? onChangeStart} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<double>? onChangeStart,

    /// optionalParameters: {void Function(double)? onChangeEnd} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<double>? onChangeEnd,

    /// optionalParameters: {double min = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double min,

    /// optionalParameters: {double max = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double max,

    /// optionalParameters: {int? divisions} , hasDefaultValue:false, defaultValueCode:null
    int? divisions,

    /// optionalParameters: {Color? activeColor} , hasDefaultValue:false, defaultValueCode:null
    Color? activeColor,

    /// optionalParameters: {Color thumbColor = CupertinoColors.white} , hasDefaultValue:true, defaultValueCode:CupertinoColors.white
    required Color thumbColor,
  }) : super(
          key: key,
          value: value,
          onChanged: onChanged,
          onChangeStart: onChangeStart,
          onChangeEnd: onChangeEnd,
          min: min,
          max: max,
          divisions: divisions,
          activeColor: activeColor,
          thumbColor: thumbColor,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoSlider$Mate(
        key: p.get('key').value,
        value: p.get('value').value,
        onChanged: p.get('onChanged').value,
        onChangeStart: p.get('onChangeStart').value,
        onChangeEnd: p.get('onChangeEnd').value,
        min: p.get('min').value,
        max: p.get('max').value,
        divisions: p.get('divisions').value,
        activeColor: p.get('activeColor').value,
        thumbColor: p.get('thumbColor').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('value', init: value);
    mateParams.put('onChanged', init: onChanged);
    mateParams.put('onChangeStart', init: onChangeStart);
    mateParams.put('onChangeEnd', init: onChangeEnd);
    mateParams.put('min', init: min);
    mateParams.put('max', init: max);
    mateParams.put('divisions', init: divisions);
    mateParams.put('activeColor', init: activeColor);
    mateParams.put('thumbColor', init: thumbColor);
  }
}
