// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/cupertino/adaptive_text_selection_toolbar.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/text_selection_toolbar_anchors.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/context_menu_button_item.dart';
import 'package:flutter/src/widgets/text_selection.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/rendering/selection.dart';

/// class CupertinoAdaptiveTextSelectionToolbar extends StatelessWidget
class CupertinoAdaptiveTextSelectionToolbar$Mate extends CupertinoAdaptiveTextSelectionToolbar
    with WidgetMate<CupertinoAdaptiveTextSelectionToolbar$Mate> {
  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar({Key? key, required List<Widget>? children, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<Widget>? children} , hasDefaultValue:false, defaultValueCode:null
    required List<Widget>? children,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionToolbarAnchors anchors,
  }) : super(
          key: key,
          children: children,
          anchors: anchors,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoAdaptiveTextSelectionToolbar$Mate(
        key: p.get('key').value,
        children: p.get('children').value,
        anchors: p.get('anchors').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('children', init: children);
    mateParams.put('anchors', init: anchors);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.buttonItems({Key? key, required List<ContextMenuButtonItem>? buttonItems, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.buttonItems({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required List<ContextMenuButtonItem>? buttonItems} , hasDefaultValue:false, defaultValueCode:null
    required List<ContextMenuButtonItem>? buttonItems,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionToolbarAnchors anchors,
  }) : super.buttonItems(
          key: key,
          buttonItems: buttonItems,
          anchors: anchors,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.buttonItems(
        key: p.get('key').value,
        buttonItems: p.get('buttonItems').value,
        anchors: p.get('anchors').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('buttonItems', init: buttonItems);
    mateParams.put('anchors', init: anchors);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.editable({Key? key, required ClipboardStatus clipboardStatus, required void Function()? onCopy, required void Function()? onCut, required void Function()? onPaste, required void Function()? onSelectAll, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.editable({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ClipboardStatus clipboardStatus} , hasDefaultValue:false, defaultValueCode:null
    required ClipboardStatus clipboardStatus,

    /// optionalParameters: {required void Function()? onCopy} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onCopy,

    /// optionalParameters: {required void Function()? onCut} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onCut,

    /// optionalParameters: {required void Function()? onPaste} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onPaste,

    /// optionalParameters: {required void Function()? onSelectAll} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback? onSelectAll,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionToolbarAnchors anchors,
  }) : super.editable(
          key: key,
          clipboardStatus: clipboardStatus,
          onCopy: onCopy,
          onCut: onCut,
          onPaste: onPaste,
          onSelectAll: onSelectAll,
          anchors: anchors,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.editable(
        key: p.get('key').value,
        clipboardStatus: p.get('clipboardStatus').value,
        onCopy: p.get('onCopy').value,
        onCut: p.get('onCut').value,
        onPaste: p.get('onPaste').value,
        onSelectAll: p.get('onSelectAll').value,
        anchors: p.get('anchors').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('clipboardStatus', init: clipboardStatus);
    mateParams.put('onCopy', init: onCopy);
    mateParams.put('onCut', init: onCut);
    mateParams.put('onPaste', init: onPaste);
    mateParams.put('onSelectAll', init: onSelectAll);
    mateParams.put('anchors', init: anchors);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.editableText({Key? key, required EditableTextState editableTextState})
  CupertinoAdaptiveTextSelectionToolbar$Mate.editableText({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required EditableTextState editableTextState} , hasDefaultValue:false, defaultValueCode:null
    required EditableTextState editableTextState,
  }) : super.editableText(
          key: key,
          editableTextState: editableTextState,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.editableText(
        key: p.get('key').value,
        editableTextState: p.get('editableTextState').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('editableTextState', init: editableTextState);
  }

  /// CupertinoAdaptiveTextSelectionToolbar CupertinoAdaptiveTextSelectionToolbar.selectable({Key? key, required void Function() onCopy, required void Function() onSelectAll, required SelectionGeometry selectionGeometry, required TextSelectionToolbarAnchors anchors})
  CupertinoAdaptiveTextSelectionToolbar$Mate.selectable({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required void Function() onCopy} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback onCopy,

    /// optionalParameters: {required void Function() onSelectAll} , hasDefaultValue:false, defaultValueCode:null
    required VoidCallback onSelectAll,

    /// optionalParameters: {required SelectionGeometry selectionGeometry} , hasDefaultValue:false, defaultValueCode:null
    required SelectionGeometry selectionGeometry,

    /// optionalParameters: {required TextSelectionToolbarAnchors anchors} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionToolbarAnchors anchors,
  }) : super.selectable(
          key: key,
          onCopy: onCopy,
          onSelectAll: onSelectAll,
          selectionGeometry: selectionGeometry,
          anchors: anchors,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CupertinoAdaptiveTextSelectionToolbar$Mate.selectable(
        key: p.get('key').value,
        onCopy: p.get('onCopy').value,
        onSelectAll: p.get('onSelectAll').value,
        selectionGeometry: p.get('selectionGeometry').value,
        anchors: p.get('anchors').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('onCopy', init: onCopy);
    mateParams.put('onSelectAll', init: onSelectAll);
    mateParams.put('selectionGeometry', init: selectionGeometry);
    mateParams.put('anchors', init: anchors);
  }
}
