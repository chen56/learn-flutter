// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/gestures/hit_test.dart';
import 'package:flutter/src/rendering/box.dart';

/// class SliverConstraints extends Constraints
class SliverConstraints$Mate extends SliverConstraints with Mate<SliverConstraints$Mate> {
  /// SliverConstraints SliverConstraints({required AxisDirection axisDirection, required GrowthDirection growthDirection, required ScrollDirection userScrollDirection, required double scrollOffset, required double precedingScrollExtent, required double overlap, required double remainingPaintExtent, required double crossAxisExtent, required AxisDirection crossAxisDirection, required double viewportMainAxisExtent, required double remainingCacheExtent, required double cacheOrigin})
  SliverConstraints$Mate({
    /// optionalParameters: {required AxisDirection axisDirection} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection axisDirection,

    /// optionalParameters: {required GrowthDirection growthDirection} , hasDefaultValue:false, defaultValueCode:null
    required GrowthDirection growthDirection,

    /// optionalParameters: {required ScrollDirection userScrollDirection} , hasDefaultValue:false, defaultValueCode:null
    required ScrollDirection userScrollDirection,

    /// optionalParameters: {required double scrollOffset} , hasDefaultValue:false, defaultValueCode:null
    required double scrollOffset,

    /// optionalParameters: {required double precedingScrollExtent} , hasDefaultValue:false, defaultValueCode:null
    required double precedingScrollExtent,

    /// optionalParameters: {required double overlap} , hasDefaultValue:false, defaultValueCode:null
    required double overlap,

    /// optionalParameters: {required double remainingPaintExtent} , hasDefaultValue:false, defaultValueCode:null
    required double remainingPaintExtent,

    /// optionalParameters: {required double crossAxisExtent} , hasDefaultValue:false, defaultValueCode:null
    required double crossAxisExtent,

    /// optionalParameters: {required AxisDirection crossAxisDirection} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection crossAxisDirection,

    /// optionalParameters: {required double viewportMainAxisExtent} , hasDefaultValue:false, defaultValueCode:null
    required double viewportMainAxisExtent,

    /// optionalParameters: {required double remainingCacheExtent} , hasDefaultValue:false, defaultValueCode:null
    required double remainingCacheExtent,

    /// optionalParameters: {required double cacheOrigin} , hasDefaultValue:false, defaultValueCode:null
    required double cacheOrigin,
  }) : super(
          axisDirection: axisDirection,
          growthDirection: growthDirection,
          userScrollDirection: userScrollDirection,
          scrollOffset: scrollOffset,
          precedingScrollExtent: precedingScrollExtent,
          overlap: overlap,
          remainingPaintExtent: remainingPaintExtent,
          crossAxisExtent: crossAxisExtent,
          crossAxisDirection: crossAxisDirection,
          viewportMainAxisExtent: viewportMainAxisExtent,
          remainingCacheExtent: remainingCacheExtent,
          cacheOrigin: cacheOrigin,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverConstraints$Mate(
        axisDirection: p.get('axisDirection').value,
        growthDirection: p.get('growthDirection').value,
        userScrollDirection: p.get('userScrollDirection').value,
        scrollOffset: p.get('scrollOffset').value,
        precedingScrollExtent: p.get('precedingScrollExtent').value,
        overlap: p.get('overlap').value,
        remainingPaintExtent: p.get('remainingPaintExtent').value,
        crossAxisExtent: p.get('crossAxisExtent').value,
        crossAxisDirection: p.get('crossAxisDirection').value,
        viewportMainAxisExtent: p.get('viewportMainAxisExtent').value,
        remainingCacheExtent: p.get('remainingCacheExtent').value,
        cacheOrigin: p.get('cacheOrigin').value,
      ),
    );
    mateParams.put('axisDirection', axisDirection);
    mateParams.put('growthDirection', growthDirection);
    mateParams.put('userScrollDirection', userScrollDirection);
    mateParams.put('scrollOffset', scrollOffset);
    mateParams.put('precedingScrollExtent', precedingScrollExtent);
    mateParams.put('overlap', overlap);
    mateParams.put('remainingPaintExtent', remainingPaintExtent);
    mateParams.put('crossAxisExtent', crossAxisExtent);
    mateParams.put('crossAxisDirection', crossAxisDirection);
    mateParams.put('viewportMainAxisExtent', viewportMainAxisExtent);
    mateParams.put('remainingCacheExtent', remainingCacheExtent);
    mateParams.put('cacheOrigin', cacheOrigin);
  }
}

/// class SliverGeometry with Diagnosticable
class SliverGeometry$Mate extends SliverGeometry with Mate<SliverGeometry$Mate> {
  /// SliverGeometry SliverGeometry({double scrollExtent = 0.0, double paintExtent = 0.0, double paintOrigin = 0.0, double? layoutExtent, double maxPaintExtent = 0.0, double maxScrollObstructionExtent = 0.0, double? hitTestExtent, bool? visible, bool hasVisualOverflow = false, double? scrollOffsetCorrection, double? cacheExtent})
  SliverGeometry$Mate({
    /// optionalParameters: {double scrollExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double scrollExtent,

    /// optionalParameters: {double paintExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double paintExtent,

    /// optionalParameters: {double paintOrigin = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double paintOrigin,

    /// optionalParameters: {double? layoutExtent} , hasDefaultValue:false, defaultValueCode:null
    double? layoutExtent,

    /// optionalParameters: {double maxPaintExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double maxPaintExtent,

    /// optionalParameters: {double maxScrollObstructionExtent = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double maxScrollObstructionExtent,

    /// optionalParameters: {double? hitTestExtent} , hasDefaultValue:false, defaultValueCode:null
    double? hitTestExtent,

    /// optionalParameters: {bool? visible} , hasDefaultValue:false, defaultValueCode:null
    bool? visible,

    /// optionalParameters: {bool hasVisualOverflow = false} , hasDefaultValue:true, defaultValueCode:false
    required bool hasVisualOverflow,

    /// optionalParameters: {double? scrollOffsetCorrection} , hasDefaultValue:false, defaultValueCode:null
    double? scrollOffsetCorrection,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,
  }) : super(
          scrollExtent: scrollExtent,
          paintExtent: paintExtent,
          paintOrigin: paintOrigin,
          layoutExtent: layoutExtent,
          maxPaintExtent: maxPaintExtent,
          maxScrollObstructionExtent: maxScrollObstructionExtent,
          hitTestExtent: hitTestExtent,
          visible: visible,
          hasVisualOverflow: hasVisualOverflow,
          scrollOffsetCorrection: scrollOffsetCorrection,
          cacheExtent: cacheExtent,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverGeometry$Mate(
        scrollExtent: p.get('scrollExtent').value,
        paintExtent: p.get('paintExtent').value,
        paintOrigin: p.get('paintOrigin').value,
        layoutExtent: p.get('layoutExtent').value,
        maxPaintExtent: p.get('maxPaintExtent').value,
        maxScrollObstructionExtent: p.get('maxScrollObstructionExtent').value,
        hitTestExtent: p.get('hitTestExtent').value,
        visible: p.get('visible').value,
        hasVisualOverflow: p.get('hasVisualOverflow').value,
        scrollOffsetCorrection: p.get('scrollOffsetCorrection').value,
        cacheExtent: p.get('cacheExtent').value,
      ),
    );
    mateParams.put('scrollExtent', scrollExtent);
    mateParams.put('paintExtent', paintExtent);
    mateParams.put('paintOrigin', paintOrigin);
    mateParams.put('layoutExtent', layoutExtent);
    mateParams.put('maxPaintExtent', maxPaintExtent);
    mateParams.put('maxScrollObstructionExtent', maxScrollObstructionExtent);
    mateParams.put('hitTestExtent', hitTestExtent);
    mateParams.put('visible', visible);
    mateParams.put('hasVisualOverflow', hasVisualOverflow);
    mateParams.put('scrollOffsetCorrection', scrollOffsetCorrection);
    mateParams.put('cacheExtent', cacheExtent);
  }
}

/// class SliverHitTestResult extends HitTestResult
class SliverHitTestResult$Mate extends SliverHitTestResult with Mate<SliverHitTestResult$Mate> {
  /// SliverHitTestResult SliverHitTestResult.wrap(HitTestResult result)
  SliverHitTestResult$Mate.wrap(

      /// requiredParameters: HitTestResult result
      HitTestResult result)
      : super.wrap(result) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverHitTestResult$Mate.wrap(p.get('result').value),
    );
    mateParams.put('result', result);
  }
}

/// class SliverHitTestEntry extends HitTestEntry<RenderSliver>
class SliverHitTestEntry$Mate extends SliverHitTestEntry with Mate<SliverHitTestEntry$Mate> {
  /// SliverHitTestEntry SliverHitTestEntry(RenderSliver target, {required double mainAxisPosition, required double crossAxisPosition})
  SliverHitTestEntry$Mate(
    /// requiredParameters: RenderSliver target
    RenderSliver target, {
    /// optionalParameters: {required double mainAxisPosition} , hasDefaultValue:false, defaultValueCode:null
    required double mainAxisPosition,

    /// optionalParameters: {required double crossAxisPosition} , hasDefaultValue:false, defaultValueCode:null
    required double crossAxisPosition,
  }) : super(
          target,
          mainAxisPosition: mainAxisPosition,
          crossAxisPosition: crossAxisPosition,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverHitTestEntry$Mate(
        p.get('target').value,
        mainAxisPosition: p.get('mainAxisPosition').value,
        crossAxisPosition: p.get('crossAxisPosition').value,
      ),
    );
    mateParams.put('target', target);
    mateParams.put('mainAxisPosition', mainAxisPosition);
    mateParams.put('crossAxisPosition', crossAxisPosition);
  }
}

/// class RenderSliverToBoxAdapter extends RenderSliverSingleBoxAdapter
class RenderSliverToBoxAdapter$Mate extends RenderSliverToBoxAdapter with Mate<RenderSliverToBoxAdapter$Mate> {
  /// RenderSliverToBoxAdapter RenderSliverToBoxAdapter({RenderBox? child})
  RenderSliverToBoxAdapter$Mate(
      {
      /// optionalParameters: {RenderBox? child} , hasDefaultValue:false, defaultValueCode:null
      RenderBox? child})
      : super(child: child) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RenderSliverToBoxAdapter$Mate(child: p.get('child').value),
    );
    mateParams.put('child', child);
  }
}
