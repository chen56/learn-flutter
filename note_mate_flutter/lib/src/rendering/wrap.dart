// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/wrap.dart';
import 'dart:core';
import 'package:flutter/src/rendering/box.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:ui';
import 'package:note/mate.dart';

/// class RenderWrap extends RenderBox with ContainerRenderObjectMixin<RenderBox, WrapParentData>, RenderBoxContainerDefaultsMixin<RenderBox, WrapParentData>
class RenderWrap$Mate extends RenderWrap with Mate<RenderWrap$Mate> {
  /// RenderWrap RenderWrap({List<RenderBox>? children, Axis direction = Axis.horizontal, WrapAlignment alignment = WrapAlignment.start, double spacing = 0.0, WrapAlignment runAlignment = WrapAlignment.start, double runSpacing = 0.0, WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, Clip clipBehavior = Clip.none})
  RenderWrap$Mate({
    /// optionalParameters: {List<RenderBox>? children} , hasDefaultValue:false, defaultValueCode:null
    List<RenderBox>? children,

    /// optionalParameters: {Axis direction = Axis.horizontal} , hasDefaultValue:true, defaultValueCode:Axis.horizontal
    required Axis direction,

    /// optionalParameters: {WrapAlignment alignment = WrapAlignment.start} , hasDefaultValue:true, defaultValueCode:WrapAlignment.start
    required WrapAlignment alignment,

    /// optionalParameters: {double spacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double spacing,

    /// optionalParameters: {WrapAlignment runAlignment = WrapAlignment.start} , hasDefaultValue:true, defaultValueCode:WrapAlignment.start
    required WrapAlignment runAlignment,

    /// optionalParameters: {double runSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double runSpacing,

    /// optionalParameters: {WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start} , hasDefaultValue:true, defaultValueCode:WrapCrossAlignment.start
    required WrapCrossAlignment crossAxisAlignment,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , hasDefaultValue:true, defaultValueCode:VerticalDirection.down
    required VerticalDirection verticalDirection,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , hasDefaultValue:true, defaultValueCode:Clip.none
    required Clip clipBehavior,
  }) : super(
          children: children,
          direction: direction,
          alignment: alignment,
          spacing: spacing,
          runAlignment: runAlignment,
          runSpacing: runSpacing,
          crossAxisAlignment: crossAxisAlignment,
          textDirection: textDirection,
          verticalDirection: verticalDirection,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RenderWrap$Mate(
        children: p.get('children').value,
        direction: p.get('direction').value,
        alignment: p.get('alignment').value,
        spacing: p.get('spacing').value,
        runAlignment: p.get('runAlignment').value,
        runSpacing: p.get('runSpacing').value,
        crossAxisAlignment: p.get('crossAxisAlignment').value,
        textDirection: p.get('textDirection').value,
        verticalDirection: p.get('verticalDirection').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('children', children);
    mateParams.put('direction', direction);
    mateParams.put('alignment', alignment);
    mateParams.put('spacing', spacing);
    mateParams.put('runAlignment', runAlignment);
    mateParams.put('runSpacing', runSpacing);
    mateParams.put('crossAxisAlignment', crossAxisAlignment);
    mateParams.put('textDirection', textDirection);
    mateParams.put('verticalDirection', verticalDirection);
    mateParams.put('clipBehavior', clipBehavior);
  }
}
