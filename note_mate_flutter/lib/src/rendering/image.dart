// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/rendering/image.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/animation/animation.dart';
import 'package:flutter/src/painting/box_fit.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/decoration_image.dart';
import 'package:note/mate.dart';

/// class RenderImage extends RenderBox
class RenderImage$Mate extends RenderImage with Mate<RenderImage$Mate> {
  /// RenderImage RenderImage({Image? image, String? debugImageLabel, double? width, double? height, double scale = 1.0, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, TextDirection? textDirection, bool invertColors = false, bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low})
  RenderImage$Mate({
    /// optionalParameters: {Image? image} , hasDefaultValue:false, defaultValueCode:null
    Image? image,

    /// optionalParameters: {String? debugImageLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugImageLabel,

    /// optionalParameters: {double? width} , hasDefaultValue:false, defaultValueCode:null
    double? width,

    /// optionalParameters: {double? height} , hasDefaultValue:false, defaultValueCode:null
    double? height,

    /// optionalParameters: {double scale = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double scale,

    /// optionalParameters: {Color? color} , hasDefaultValue:false, defaultValueCode:null
    Color? color,

    /// optionalParameters: {Animation<double>? opacity} , hasDefaultValue:false, defaultValueCode:null
    Animation<double>? opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , hasDefaultValue:false, defaultValueCode:null
    BlendMode? colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , hasDefaultValue:false, defaultValueCode:null
    BoxFit? fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required AlignmentGeometry alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , hasDefaultValue:true, defaultValueCode:ImageRepeat.noRepeat
    required ImageRepeat repeat,

    /// optionalParameters: {Rect? centerSlice} , hasDefaultValue:false, defaultValueCode:null
    Rect? centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {bool invertColors = false} , hasDefaultValue:true, defaultValueCode:false
    required bool invertColors,

    /// optionalParameters: {bool isAntiAlias = false} , hasDefaultValue:true, defaultValueCode:false
    required bool isAntiAlias,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , hasDefaultValue:true, defaultValueCode:FilterQuality.low
    required FilterQuality filterQuality,
  }) : super(
          image: image,
          debugImageLabel: debugImageLabel,
          width: width,
          height: height,
          scale: scale,
          color: color,
          opacity: opacity,
          colorBlendMode: colorBlendMode,
          fit: fit,
          alignment: alignment,
          repeat: repeat,
          centerSlice: centerSlice,
          matchTextDirection: matchTextDirection,
          textDirection: textDirection,
          invertColors: invertColors,
          isAntiAlias: isAntiAlias,
          filterQuality: filterQuality,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RenderImage$Mate(
        image: p.get('image').value,
        debugImageLabel: p.get('debugImageLabel').value,
        width: p.get('width').value,
        height: p.get('height').value,
        scale: p.get('scale').value,
        color: p.get('color').value,
        opacity: p.get('opacity').value,
        colorBlendMode: p.get('colorBlendMode').value,
        fit: p.get('fit').value,
        alignment: p.get('alignment').value,
        repeat: p.get('repeat').value,
        centerSlice: p.get('centerSlice').value,
        matchTextDirection: p.get('matchTextDirection').value,
        textDirection: p.get('textDirection').value,
        invertColors: p.get('invertColors').value,
        isAntiAlias: p.get('isAntiAlias').value,
        filterQuality: p.get('filterQuality').value,
      ),
    );
    mateParams.put('image', init: image);
    mateParams.put('debugImageLabel', init: debugImageLabel);
    mateParams.put('width', init: width);
    mateParams.put('height', init: height);
    mateParams.put('scale', init: scale);
    mateParams.put('color', init: color);
    mateParams.put('opacity', init: opacity);
    mateParams.put('colorBlendMode', init: colorBlendMode);
    mateParams.put('fit', init: fit);
    mateParams.put('alignment', init: alignment);
    mateParams.put('repeat', init: repeat);
    mateParams.put('centerSlice', init: centerSlice);
    mateParams.put('matchTextDirection', init: matchTextDirection);
    mateParams.put('textDirection', init: textDirection);
    mateParams.put('invertColors', init: invertColors);
    mateParams.put('isAntiAlias', init: isAntiAlias);
    mateParams.put('filterQuality', init: filterQuality);
  }
}
