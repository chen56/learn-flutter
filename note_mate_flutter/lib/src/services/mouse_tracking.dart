// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/services/mouse_tracking.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:core';
import 'package:note/mate.dart';

/// class MouseTrackerAnnotation with Diagnosticable
class MouseTrackerAnnotation$Mate extends MouseTrackerAnnotation with Mate<MouseTrackerAnnotation$Mate> {
  /// MouseTrackerAnnotation MouseTrackerAnnotation({void Function(PointerEnterEvent)? onEnter, void Function(PointerExitEvent)? onExit, MouseCursor cursor = MouseCursor.defer, bool validForMouseTracker = true})
  MouseTrackerAnnotation$Mate({
    /// optionalParameters: {void Function(PointerEnterEvent)? onEnter} , hasDefaultValue:false, defaultValueCode:null
    PointerEnterEventListener? onEnter,

    /// optionalParameters: {void Function(PointerExitEvent)? onExit} , hasDefaultValue:false, defaultValueCode:null
    PointerExitEventListener? onExit,

    /// optionalParameters: {MouseCursor cursor = MouseCursor.defer} , hasDefaultValue:true, defaultValueCode:MouseCursor.defer
    required MouseCursor cursor,

    /// optionalParameters: {bool validForMouseTracker = true} , hasDefaultValue:true, defaultValueCode:true
    required bool validForMouseTracker,
  }) : super(
          onEnter: onEnter,
          onExit: onExit,
          cursor: cursor,
          validForMouseTracker: validForMouseTracker,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => MouseTrackerAnnotation$Mate(
        onEnter: p.get('onEnter').value,
        onExit: p.get('onExit').value,
        cursor: p.get('cursor').value,
        validForMouseTracker: p.get('validForMouseTracker').value,
      ),
    );
    mateParams.put('onEnter', onEnter);
    mateParams.put('onExit', onExit);
    mateParams.put('cursor', cursor);
    mateParams.put('validForMouseTracker', validForMouseTracker);
  }
}
