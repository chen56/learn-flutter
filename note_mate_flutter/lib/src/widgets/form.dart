// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/form.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/navigator.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'dart:core';

/// class Form extends StatefulWidget
class Form$Mate extends Form with WidgetMate<Form$Mate> {
  /// Form Form({Key? key, required Widget child, Future<bool> Function()? onWillPop, void Function()? onChanged, AutovalidateMode? autovalidateMode})
  Form$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {Future<bool> Function()? onWillPop} , hasDefaultValue:false, defaultValueCode:null
    WillPopCallback? onWillPop,

    /// optionalParameters: {void Function()? onChanged} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onChanged,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , hasDefaultValue:false, defaultValueCode:null
    AutovalidateMode? autovalidateMode,
  }) : super(
          key: key,
          child: child,
          onWillPop: onWillPop,
          onChanged: onChanged,
          autovalidateMode: autovalidateMode,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Form$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        onWillPop: p.get('onWillPop').value,
        onChanged: p.get('onChanged').value,
        autovalidateMode: p.get('autovalidateMode').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('child', init: child);
    mateParams.put('onWillPop', init: onWillPop);
    mateParams.put('onChanged', init: onChanged);
    mateParams.put('autovalidateMode', init: autovalidateMode);
  }
}

/// class FormField<T> extends StatefulWidget
class FormField$Mate<T> extends FormField<T> with WidgetMate<FormField$Mate> {
  /// FormField<T> FormField({Key? key, required Widget Function(FormFieldState<T>) builder, void Function(T?)? onSaved, String? Function(T?)? validator, T? initialValue, bool enabled = true, AutovalidateMode? autovalidateMode, String? restorationId})
  FormField$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget Function(FormFieldState<T>) builder} , hasDefaultValue:false, defaultValueCode:null
    required FormFieldBuilder<T> builder,

    /// optionalParameters: {void Function(T?)? onSaved} , hasDefaultValue:false, defaultValueCode:null
    FormFieldSetter<T>? onSaved,

    /// optionalParameters: {String? Function(T?)? validator} , hasDefaultValue:false, defaultValueCode:null
    FormFieldValidator<T>? validator,

    /// optionalParameters: {T? initialValue} , hasDefaultValue:false, defaultValueCode:null
    T? initialValue,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {AutovalidateMode? autovalidateMode} , hasDefaultValue:false, defaultValueCode:null
    AutovalidateMode? autovalidateMode,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,
  }) : super(
          key: key,
          builder: builder,
          onSaved: onSaved,
          validator: validator,
          initialValue: initialValue,
          enabled: enabled,
          autovalidateMode: autovalidateMode,
          restorationId: restorationId,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FormField$Mate(
        key: p.get('key').value,
        builder: p.get('builder').value,
        onSaved: p.get('onSaved').value,
        validator: p.get('validator').value,
        initialValue: p.get('initialValue').value,
        enabled: p.get('enabled').value,
        autovalidateMode: p.get('autovalidateMode').value,
        restorationId: p.get('restorationId').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('builder', init: builder);
    mateParams.put('onSaved', init: onSaved);
    mateParams.put('validator', init: validator);
    mateParams.put('initialValue', init: initialValue);
    mateParams.put('enabled', init: enabled);
    mateParams.put('autovalidateMode', init: autovalidateMode);
    mateParams.put('restorationId', init: restorationId);
  }
}
