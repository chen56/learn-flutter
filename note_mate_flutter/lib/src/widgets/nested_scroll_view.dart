// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/nested_scroll_view.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/rendering/sliver.dart';
import 'package:flutter/src/rendering/viewport_offset.dart';

/// class NestedScrollView extends StatefulWidget
class NestedScrollView$Mate extends NestedScrollView with WidgetMate<NestedScrollView$Mate> {
  /// NestedScrollView NestedScrollView({Key? key, ScrollController? controller, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollPhysics? physics, required List<Widget> Function(BuildContext, bool) headerSliverBuilder, required Widget body, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool floatHeaderSlivers = false, Clip clipBehavior = Clip.hardEdge, String? restorationId, ScrollBehavior? scrollBehavior})
  NestedScrollView$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {required List<Widget> Function(BuildContext, bool) headerSliverBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NestedScrollViewHeaderSliversBuilder headerSliverBuilder,

    /// optionalParameters: {required Widget body} , hasDefaultValue:false, defaultValueCode:null
    required Widget body,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {bool floatHeaderSlivers = false} , hasDefaultValue:true, defaultValueCode:false
    required bool floatHeaderSlivers,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , hasDefaultValue:false, defaultValueCode:null
    ScrollBehavior? scrollBehavior,
  }) : super(
          key: key,
          controller: controller,
          scrollDirection: scrollDirection,
          reverse: reverse,
          physics: physics,
          headerSliverBuilder: headerSliverBuilder,
          body: body,
          dragStartBehavior: dragStartBehavior,
          floatHeaderSlivers: floatHeaderSlivers,
          clipBehavior: clipBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NestedScrollView$Mate(
        key: p.get('key').value,
        controller: p.get('controller').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        physics: p.get('physics').value,
        headerSliverBuilder: p.get('headerSliverBuilder').value,
        body: p.get('body').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        floatHeaderSlivers: p.get('floatHeaderSlivers').value,
        clipBehavior: p.get('clipBehavior').value,
        restorationId: p.get('restorationId').value,
        scrollBehavior: p.get('scrollBehavior').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('controller', init: controller);
    mateParams.put('scrollDirection', init: scrollDirection);
    mateParams.put('reverse', init: reverse);
    mateParams.put('physics', init: physics);
    mateParams.put('headerSliverBuilder', init: headerSliverBuilder);
    mateParams.put('body', init: body);
    mateParams.put('dragStartBehavior', init: dragStartBehavior);
    mateParams.put('floatHeaderSlivers', init: floatHeaderSlivers);
    mateParams.put('clipBehavior', init: clipBehavior);
    mateParams.put('restorationId', init: restorationId);
    mateParams.put('scrollBehavior', init: scrollBehavior);
  }
}

/// class SliverOverlapAbsorber extends SingleChildRenderObjectWidget
class SliverOverlapAbsorber$Mate extends SliverOverlapAbsorber with WidgetMate<SliverOverlapAbsorber$Mate> {
  /// SliverOverlapAbsorber SliverOverlapAbsorber({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapAbsorber$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , hasDefaultValue:false, defaultValueCode:null
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Widget? sliver} , hasDefaultValue:false, defaultValueCode:null
    Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverOverlapAbsorber$Mate(
        key: p.get('key').value,
        handle: p.get('handle').value,
        sliver: p.get('sliver').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('handle', init: handle);
    mateParams.put('sliver', init: sliver);
  }
}

/// class RenderSliverOverlapAbsorber extends RenderSliver with RenderObjectWithChildMixin<RenderSliver>
class RenderSliverOverlapAbsorber$Mate extends RenderSliverOverlapAbsorber with Mate<RenderSliverOverlapAbsorber$Mate> {
  /// RenderSliverOverlapAbsorber RenderSliverOverlapAbsorber({required SliverOverlapAbsorberHandle handle, RenderSliver? sliver})
  RenderSliverOverlapAbsorber$Mate({
    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , hasDefaultValue:false, defaultValueCode:null
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {RenderSliver? sliver} , hasDefaultValue:false, defaultValueCode:null
    RenderSliver? sliver,
  }) : super(
          handle: handle,
          sliver: sliver,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RenderSliverOverlapAbsorber$Mate(
        handle: p.get('handle').value,
        sliver: p.get('sliver').value,
      ),
    );
    mateParams.put('handle', init: handle);
    mateParams.put('sliver', init: sliver);
  }
}

/// class SliverOverlapInjector extends SingleChildRenderObjectWidget
class SliverOverlapInjector$Mate extends SliverOverlapInjector with WidgetMate<SliverOverlapInjector$Mate> {
  /// SliverOverlapInjector SliverOverlapInjector({Key? key, required SliverOverlapAbsorberHandle handle, Widget? sliver})
  SliverOverlapInjector$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , hasDefaultValue:false, defaultValueCode:null
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Widget? sliver} , hasDefaultValue:false, defaultValueCode:null
    Widget? sliver,
  }) : super(
          key: key,
          handle: handle,
          sliver: sliver,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverOverlapInjector$Mate(
        key: p.get('key').value,
        handle: p.get('handle').value,
        sliver: p.get('sliver').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('handle', init: handle);
    mateParams.put('sliver', init: sliver);
  }
}

/// class RenderSliverOverlapInjector extends RenderSliver
class RenderSliverOverlapInjector$Mate extends RenderSliverOverlapInjector with Mate<RenderSliverOverlapInjector$Mate> {
  /// RenderSliverOverlapInjector RenderSliverOverlapInjector({required SliverOverlapAbsorberHandle handle})
  RenderSliverOverlapInjector$Mate(
      {
      /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , hasDefaultValue:false, defaultValueCode:null
      required SliverOverlapAbsorberHandle handle})
      : super(handle: handle) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RenderSliverOverlapInjector$Mate(handle: p.get('handle').value),
    );
    mateParams.put('handle', init: handle);
  }
}

/// class NestedScrollViewViewport extends Viewport
class NestedScrollViewViewport$Mate extends NestedScrollViewViewport with WidgetMate<NestedScrollViewViewport$Mate> {
  /// NestedScrollViewViewport NestedScrollViewViewport({Key? key, AxisDirection axisDirection = AxisDirection.down, AxisDirection? crossAxisDirection, double anchor = 0.0, required ViewportOffset offset, Key? center, List<Widget> slivers = const <Widget>[], required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  NestedScrollViewViewport$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , hasDefaultValue:true, defaultValueCode:AxisDirection.down
    required AxisDirection axisDirection,

    /// optionalParameters: {AxisDirection? crossAxisDirection} , hasDefaultValue:false, defaultValueCode:null
    AxisDirection? crossAxisDirection,

    /// optionalParameters: {double anchor = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double anchor,

    /// optionalParameters: {required ViewportOffset offset} , hasDefaultValue:false, defaultValueCode:null
    required ViewportOffset offset,

    /// optionalParameters: {Key? center} , hasDefaultValue:false, defaultValueCode:null
    Key? center,

    /// optionalParameters: {List<Widget> slivers = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> slivers,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , hasDefaultValue:false, defaultValueCode:null
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          anchor: anchor,
          offset: offset,
          center: center,
          slivers: slivers,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => NestedScrollViewViewport$Mate(
        key: p.get('key').value,
        axisDirection: p.get('axisDirection').value,
        crossAxisDirection: p.get('crossAxisDirection').value,
        anchor: p.get('anchor').value,
        offset: p.get('offset').value,
        center: p.get('center').value,
        slivers: p.get('slivers').value,
        handle: p.get('handle').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('axisDirection', init: axisDirection);
    mateParams.put('crossAxisDirection', init: crossAxisDirection);
    mateParams.put('anchor', init: anchor);
    mateParams.put('offset', init: offset);
    mateParams.put('center', init: center);
    mateParams.put('slivers', init: slivers);
    mateParams.put('handle', init: handle);
    mateParams.put('clipBehavior', init: clipBehavior);
  }
}

/// class RenderNestedScrollViewViewport extends RenderViewport
class RenderNestedScrollViewViewport$Mate extends RenderNestedScrollViewViewport
    with Mate<RenderNestedScrollViewViewport$Mate> {
  /// RenderNestedScrollViewViewport RenderNestedScrollViewViewport({AxisDirection axisDirection = AxisDirection.down, required AxisDirection crossAxisDirection, required ViewportOffset offset, double anchor = 0.0, List<RenderSliver>? children, RenderSliver? center, required SliverOverlapAbsorberHandle handle, Clip clipBehavior = Clip.hardEdge})
  RenderNestedScrollViewViewport$Mate({
    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , hasDefaultValue:true, defaultValueCode:AxisDirection.down
    required AxisDirection axisDirection,

    /// optionalParameters: {required AxisDirection crossAxisDirection} , hasDefaultValue:false, defaultValueCode:null
    required AxisDirection crossAxisDirection,

    /// optionalParameters: {required ViewportOffset offset} , hasDefaultValue:false, defaultValueCode:null
    required ViewportOffset offset,

    /// optionalParameters: {double anchor = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double anchor,

    /// optionalParameters: {List<RenderSliver>? children} , hasDefaultValue:false, defaultValueCode:null
    List<RenderSliver>? children,

    /// optionalParameters: {RenderSliver? center} , hasDefaultValue:false, defaultValueCode:null
    RenderSliver? center,

    /// optionalParameters: {required SliverOverlapAbsorberHandle handle} , hasDefaultValue:false, defaultValueCode:null
    required SliverOverlapAbsorberHandle handle,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          axisDirection: axisDirection,
          crossAxisDirection: crossAxisDirection,
          offset: offset,
          anchor: anchor,
          children: children,
          center: center,
          handle: handle,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RenderNestedScrollViewViewport$Mate(
        axisDirection: p.get('axisDirection').value,
        crossAxisDirection: p.get('crossAxisDirection').value,
        offset: p.get('offset').value,
        anchor: p.get('anchor').value,
        children: p.get('children').value,
        center: p.get('center').value,
        handle: p.get('handle').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('axisDirection', init: axisDirection);
    mateParams.put('crossAxisDirection', init: crossAxisDirection);
    mateParams.put('offset', init: offset);
    mateParams.put('anchor', init: anchor);
    mateParams.put('children', init: children);
    mateParams.put('center', init: center);
    mateParams.put('handle', init: handle);
    mateParams.put('clipBehavior', init: clipBehavior);
  }
}
