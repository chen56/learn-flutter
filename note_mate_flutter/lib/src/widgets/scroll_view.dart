// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scroll_view.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'dart:core';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'package:flutter/src/rendering/sliver_grid.dart';

/// class CustomScrollView extends ScrollView
class CustomScrollView$Mate extends CustomScrollView with WidgetMate<CustomScrollView$Mate> {
  /// CustomScrollView CustomScrollView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, ScrollBehavior? scrollBehavior, bool shrinkWrap = false, Key? center, double anchor = 0.0, double? cacheExtent, List<Widget> slivers = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  CustomScrollView$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , hasDefaultValue:false, defaultValueCode:null
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {Key? center} , hasDefaultValue:false, defaultValueCode:null
    Key? center,

    /// optionalParameters: {double anchor = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double anchor,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {List<Widget> slivers = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> slivers,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          scrollBehavior: scrollBehavior,
          shrinkWrap: shrinkWrap,
          center: center,
          anchor: anchor,
          cacheExtent: cacheExtent,
          slivers: slivers,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CustomScrollView$Mate(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        scrollBehavior: p.get('scrollBehavior').value,
        shrinkWrap: p.get('shrinkWrap').value,
        center: p.get('center').value,
        anchor: p.get('anchor').value,
        cacheExtent: p.get('cacheExtent').value,
        slivers: p.get('slivers').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('scrollBehavior', scrollBehavior);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('center', center);
    mateParams.put('anchor', anchor);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('slivers', slivers);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }
}

/// class ListView extends BoxScrollView
class ListView$Mate extends ListView with WidgetMate<ListView$Mate> {
  /// ListView ListView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double? itemExtent} , hasDefaultValue:false, defaultValueCode:null
    double? itemExtent,

    /// optionalParameters: {Widget? prototypeItem} , hasDefaultValue:false, defaultValueCode:null
    Widget? prototypeItem,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListView$Mate(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        itemExtent: p.get('itemExtent').value,
        prototypeItem: p.get('prototypeItem').value,
        addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').value,
        addRepaintBoundaries: p.get('addRepaintBoundaries').value,
        addSemanticIndexes: p.get('addSemanticIndexes').value,
        cacheExtent: p.get('cacheExtent').value,
        children: p.get('children').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('itemExtent', itemExtent);
    mateParams.put('prototypeItem', prototypeItem);
    mateParams.put('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateParams.put('addRepaintBoundaries', addRepaintBoundaries);
    mateParams.put('addSemanticIndexes', addSemanticIndexes);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('children', children);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }

  /// ListView ListView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.builder({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double? itemExtent} , hasDefaultValue:false, defaultValueCode:null
    double? itemExtent,

    /// optionalParameters: {Widget? prototypeItem} , hasDefaultValue:false, defaultValueCode:null
    Widget? prototypeItem,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , hasDefaultValue:false, defaultValueCode:null
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListView$Mate.builder(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        itemExtent: p.get('itemExtent').value,
        prototypeItem: p.get('prototypeItem').value,
        itemBuilder: p.get('itemBuilder').value,
        findChildIndexCallback: p.get('findChildIndexCallback').value,
        itemCount: p.get('itemCount').value,
        addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').value,
        addRepaintBoundaries: p.get('addRepaintBoundaries').value,
        addSemanticIndexes: p.get('addSemanticIndexes').value,
        cacheExtent: p.get('cacheExtent').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('itemExtent', itemExtent);
    mateParams.put('prototypeItem', prototypeItem);
    mateParams.put('itemBuilder', itemBuilder);
    mateParams.put('findChildIndexCallback', findChildIndexCallback);
    mateParams.put('itemCount', itemCount);
    mateParams.put('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateParams.put('addRepaintBoundaries', addRepaintBoundaries);
    mateParams.put('addSemanticIndexes', addSemanticIndexes);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }

  /// ListView ListView.separated({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, required Widget Function(BuildContext, int) separatorBuilder, required int itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.separated({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {required Widget Function(BuildContext, int) separatorBuilder} , hasDefaultValue:false, defaultValueCode:null
    required IndexedWidgetBuilder separatorBuilder,

    /// optionalParameters: {required int itemCount} , hasDefaultValue:false, defaultValueCode:null
    required int itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super.separated(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          separatorBuilder: separatorBuilder,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListView$Mate.separated(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        itemBuilder: p.get('itemBuilder').value,
        findChildIndexCallback: p.get('findChildIndexCallback').value,
        separatorBuilder: p.get('separatorBuilder').value,
        itemCount: p.get('itemCount').value,
        addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').value,
        addRepaintBoundaries: p.get('addRepaintBoundaries').value,
        addSemanticIndexes: p.get('addSemanticIndexes').value,
        cacheExtent: p.get('cacheExtent').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('itemBuilder', itemBuilder);
    mateParams.put('findChildIndexCallback', findChildIndexCallback);
    mateParams.put('separatorBuilder', separatorBuilder);
    mateParams.put('itemCount', itemCount);
    mateParams.put('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateParams.put('addRepaintBoundaries', addRepaintBoundaries);
    mateParams.put('addSemanticIndexes', addSemanticIndexes);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }

  /// ListView ListView.custom({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, double? itemExtent, Widget? prototypeItem, required SliverChildDelegate childrenDelegate, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  ListView$Mate.custom({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {double? itemExtent} , hasDefaultValue:false, defaultValueCode:null
    double? itemExtent,

    /// optionalParameters: {Widget? prototypeItem} , hasDefaultValue:false, defaultValueCode:null
    Widget? prototypeItem,

    /// optionalParameters: {required SliverChildDelegate childrenDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverChildDelegate childrenDelegate,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          itemExtent: itemExtent,
          prototypeItem: prototypeItem,
          childrenDelegate: childrenDelegate,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListView$Mate.custom(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        itemExtent: p.get('itemExtent').value,
        prototypeItem: p.get('prototypeItem').value,
        childrenDelegate: p.get('childrenDelegate').value,
        cacheExtent: p.get('cacheExtent').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('itemExtent', itemExtent);
    mateParams.put('prototypeItem', prototypeItem);
    mateParams.put('childrenDelegate', childrenDelegate);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }
}

/// class GridView extends BoxScrollView
class GridView$Mate extends GridView with WidgetMate<GridView$Mate> {
  /// GridView GridView({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Clip clipBehavior = Clip.hardEdge, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId})
  GridView$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,
  }) : super(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          clipBehavior: clipBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => GridView$Mate(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        gridDelegate: p.get('gridDelegate').value,
        addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').value,
        addRepaintBoundaries: p.get('addRepaintBoundaries').value,
        addSemanticIndexes: p.get('addSemanticIndexes').value,
        cacheExtent: p.get('cacheExtent').value,
        children: p.get('children').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        clipBehavior: p.get('clipBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('gridDelegate', gridDelegate);
    mateParams.put('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateParams.put('addRepaintBoundaries', addRepaintBoundaries);
    mateParams.put('addSemanticIndexes', addSemanticIndexes);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('children', children);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('clipBehavior', clipBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
  }

  /// GridView GridView.builder({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.builder({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , hasDefaultValue:false, defaultValueCode:null
    required NullableIndexedWidgetBuilder itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , hasDefaultValue:false, defaultValueCode:null
    ChildIndexGetter? findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , hasDefaultValue:false, defaultValueCode:null
    int? itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super.builder(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          itemBuilder: itemBuilder,
          findChildIndexCallback: findChildIndexCallback,
          itemCount: itemCount,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => GridView$Mate.builder(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        gridDelegate: p.get('gridDelegate').value,
        itemBuilder: p.get('itemBuilder').value,
        findChildIndexCallback: p.get('findChildIndexCallback').value,
        itemCount: p.get('itemCount').value,
        addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').value,
        addRepaintBoundaries: p.get('addRepaintBoundaries').value,
        addSemanticIndexes: p.get('addSemanticIndexes').value,
        cacheExtent: p.get('cacheExtent').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('gridDelegate', gridDelegate);
    mateParams.put('itemBuilder', itemBuilder);
    mateParams.put('findChildIndexCallback', findChildIndexCallback);
    mateParams.put('itemCount', itemCount);
    mateParams.put('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateParams.put('addRepaintBoundaries', addRepaintBoundaries);
    mateParams.put('addSemanticIndexes', addSemanticIndexes);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }

  /// GridView GridView.custom({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required SliverGridDelegate gridDelegate, required SliverChildDelegate childrenDelegate, double? cacheExtent, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.custom({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverGridDelegate gridDelegate,

    /// optionalParameters: {required SliverChildDelegate childrenDelegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverChildDelegate childrenDelegate,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super.custom(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          gridDelegate: gridDelegate,
          childrenDelegate: childrenDelegate,
          cacheExtent: cacheExtent,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => GridView$Mate.custom(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        gridDelegate: p.get('gridDelegate').value,
        childrenDelegate: p.get('childrenDelegate').value,
        cacheExtent: p.get('cacheExtent').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('gridDelegate', gridDelegate);
    mateParams.put('childrenDelegate', childrenDelegate);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }

  /// GridView GridView.count({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.count({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required int crossAxisCount} , hasDefaultValue:false, defaultValueCode:null
    required int crossAxisCount,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double mainAxisSpacing,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double crossAxisSpacing,

    /// optionalParameters: {double childAspectRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double childAspectRatio,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super.count(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          crossAxisCount: crossAxisCount,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => GridView$Mate.count(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        crossAxisCount: p.get('crossAxisCount').value,
        mainAxisSpacing: p.get('mainAxisSpacing').value,
        crossAxisSpacing: p.get('crossAxisSpacing').value,
        childAspectRatio: p.get('childAspectRatio').value,
        addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').value,
        addRepaintBoundaries: p.get('addRepaintBoundaries').value,
        addSemanticIndexes: p.get('addSemanticIndexes').value,
        cacheExtent: p.get('cacheExtent').value,
        children: p.get('children').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('crossAxisCount', crossAxisCount);
    mateParams.put('mainAxisSpacing', mainAxisSpacing);
    mateParams.put('crossAxisSpacing', crossAxisSpacing);
    mateParams.put('childAspectRatio', childAspectRatio);
    mateParams.put('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateParams.put('addRepaintBoundaries', addRepaintBoundaries);
    mateParams.put('addSemanticIndexes', addSemanticIndexes);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('children', children);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }

  /// GridView GridView.extent({Key? key, Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController? controller, bool? primary, ScrollPhysics? physics, bool shrinkWrap = false, EdgeInsetsGeometry? padding, required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true, double? cacheExtent, List<Widget> children = const <Widget>[], int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual, String? restorationId, Clip clipBehavior = Clip.hardEdge})
  GridView$Mate.extent({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis scrollDirection = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis scrollDirection,

    /// optionalParameters: {bool reverse = false} , hasDefaultValue:true, defaultValueCode:false
    required bool reverse,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? primary} , hasDefaultValue:false, defaultValueCode:null
    bool? primary,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {bool shrinkWrap = false} , hasDefaultValue:true, defaultValueCode:false
    required bool shrinkWrap,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsetsGeometry? padding,

    /// optionalParameters: {required double maxCrossAxisExtent} , hasDefaultValue:false, defaultValueCode:null
    required double maxCrossAxisExtent,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double mainAxisSpacing,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double crossAxisSpacing,

    /// optionalParameters: {double childAspectRatio = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double childAspectRatio,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , hasDefaultValue:true, defaultValueCode:true
    required bool addSemanticIndexes,

    /// optionalParameters: {double? cacheExtent} , hasDefaultValue:false, defaultValueCode:null
    double? cacheExtent,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , hasDefaultValue:true, defaultValueCode:const <Widget>[]
    required List<Widget> children,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {ScrollViewKeyboardDismissBehavior keyboardDismissBehavior = ScrollViewKeyboardDismissBehavior.manual} , hasDefaultValue:true, defaultValueCode:ScrollViewKeyboardDismissBehavior.manual
    required ScrollViewKeyboardDismissBehavior keyboardDismissBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super.extent(
          key: key,
          scrollDirection: scrollDirection,
          reverse: reverse,
          controller: controller,
          primary: primary,
          physics: physics,
          shrinkWrap: shrinkWrap,
          padding: padding,
          maxCrossAxisExtent: maxCrossAxisExtent,
          mainAxisSpacing: mainAxisSpacing,
          crossAxisSpacing: crossAxisSpacing,
          childAspectRatio: childAspectRatio,
          addAutomaticKeepAlives: addAutomaticKeepAlives,
          addRepaintBoundaries: addRepaintBoundaries,
          addSemanticIndexes: addSemanticIndexes,
          cacheExtent: cacheExtent,
          children: children,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          keyboardDismissBehavior: keyboardDismissBehavior,
          restorationId: restorationId,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => GridView$Mate.extent(
        key: p.get('key').value,
        scrollDirection: p.get('scrollDirection').value,
        reverse: p.get('reverse').value,
        controller: p.get('controller').value,
        primary: p.get('primary').value,
        physics: p.get('physics').value,
        shrinkWrap: p.get('shrinkWrap').value,
        padding: p.get('padding').value,
        maxCrossAxisExtent: p.get('maxCrossAxisExtent').value,
        mainAxisSpacing: p.get('mainAxisSpacing').value,
        crossAxisSpacing: p.get('crossAxisSpacing').value,
        childAspectRatio: p.get('childAspectRatio').value,
        addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').value,
        addRepaintBoundaries: p.get('addRepaintBoundaries').value,
        addSemanticIndexes: p.get('addSemanticIndexes').value,
        cacheExtent: p.get('cacheExtent').value,
        children: p.get('children').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        keyboardDismissBehavior: p.get('keyboardDismissBehavior').value,
        restorationId: p.get('restorationId').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scrollDirection', scrollDirection);
    mateParams.put('reverse', reverse);
    mateParams.put('controller', controller);
    mateParams.put('primary', primary);
    mateParams.put('physics', physics);
    mateParams.put('shrinkWrap', shrinkWrap);
    mateParams.put('padding', padding);
    mateParams.put('maxCrossAxisExtent', maxCrossAxisExtent);
    mateParams.put('mainAxisSpacing', mainAxisSpacing);
    mateParams.put('crossAxisSpacing', crossAxisSpacing);
    mateParams.put('childAspectRatio', childAspectRatio);
    mateParams.put('addAutomaticKeepAlives', addAutomaticKeepAlives);
    mateParams.put('addRepaintBoundaries', addRepaintBoundaries);
    mateParams.put('addSemanticIndexes', addSemanticIndexes);
    mateParams.put('cacheExtent', cacheExtent);
    mateParams.put('children', children);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('keyboardDismissBehavior', keyboardDismissBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('clipBehavior', clipBehavior);
  }
}
