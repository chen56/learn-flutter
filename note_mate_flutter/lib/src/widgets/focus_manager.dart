// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/focus_manager.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/focus_traversal.dart';

/// class FocusNode with DiagnosticableTreeMixin, ChangeNotifier
class FocusNode$Mate extends FocusNode with Mate<FocusNode$Mate> {
  /// FocusNode FocusNode({String? debugLabel, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, bool skipTraversal = false, bool canRequestFocus = true, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true})
  FocusNode$Mate({
    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyCallback? onKey,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {bool skipTraversal = false} , hasDefaultValue:true, defaultValueCode:false
    required bool skipTraversal,

    /// optionalParameters: {bool canRequestFocus = true} , hasDefaultValue:true, defaultValueCode:true
    required bool canRequestFocus,

    /// optionalParameters: {bool descendantsAreFocusable = true} , hasDefaultValue:true, defaultValueCode:true
    required bool descendantsAreFocusable,

    /// optionalParameters: {bool descendantsAreTraversable = true} , hasDefaultValue:true, defaultValueCode:true
    required bool descendantsAreTraversable,
  }) : super(
          debugLabel: debugLabel,
          onKey: onKey,
          onKeyEvent: onKeyEvent,
          skipTraversal: skipTraversal,
          canRequestFocus: canRequestFocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FocusNode$Mate(
        debugLabel: p.get('debugLabel').value,
        onKey: p.get('onKey').value,
        onKeyEvent: p.get('onKeyEvent').value,
        skipTraversal: p.get('skipTraversal').value,
        canRequestFocus: p.get('canRequestFocus').value,
        descendantsAreFocusable: p.get('descendantsAreFocusable').value,
        descendantsAreTraversable: p.get('descendantsAreTraversable').value,
      ),
    );
    mateParams.put('debugLabel', debugLabel);
    mateParams.put('onKey', onKey);
    mateParams.put('onKeyEvent', onKeyEvent);
    mateParams.put('skipTraversal', skipTraversal);
    mateParams.put('canRequestFocus', canRequestFocus);
    mateParams.put('descendantsAreFocusable', descendantsAreFocusable);
    mateParams.put('descendantsAreTraversable', descendantsAreTraversable);
  }
}

/// class FocusScopeNode extends FocusNode
class FocusScopeNode$Mate extends FocusScopeNode with Mate<FocusScopeNode$Mate> {
  /// FocusScopeNode FocusScopeNode({String? debugLabel, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool skipTraversal = false, bool canRequestFocus = true, TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop})
  FocusScopeNode$Mate({
    /// optionalParameters: {String? debugLabel} , hasDefaultValue:false, defaultValueCode:null
    String? debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyEventCallback? onKeyEvent,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , hasDefaultValue:false, defaultValueCode:null
    FocusOnKeyCallback? onKey,

    /// optionalParameters: {bool skipTraversal = false} , hasDefaultValue:true, defaultValueCode:false
    required bool skipTraversal,

    /// optionalParameters: {bool canRequestFocus = true} , hasDefaultValue:true, defaultValueCode:true
    required bool canRequestFocus,

    /// optionalParameters: {TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop} , hasDefaultValue:true, defaultValueCode:TraversalEdgeBehavior.closedLoop
    required TraversalEdgeBehavior traversalEdgeBehavior,
  }) : super(
          debugLabel: debugLabel,
          onKeyEvent: onKeyEvent,
          onKey: onKey,
          skipTraversal: skipTraversal,
          canRequestFocus: canRequestFocus,
          traversalEdgeBehavior: traversalEdgeBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FocusScopeNode$Mate(
        debugLabel: p.get('debugLabel').value,
        onKeyEvent: p.get('onKeyEvent').value,
        onKey: p.get('onKey').value,
        skipTraversal: p.get('skipTraversal').value,
        canRequestFocus: p.get('canRequestFocus').value,
        traversalEdgeBehavior: p.get('traversalEdgeBehavior').value,
      ),
    );
    mateParams.put('debugLabel', debugLabel);
    mateParams.put('onKeyEvent', onKeyEvent);
    mateParams.put('onKey', onKey);
    mateParams.put('skipTraversal', skipTraversal);
    mateParams.put('canRequestFocus', canRequestFocus);
    mateParams.put('traversalEdgeBehavior', traversalEdgeBehavior);
  }
}
