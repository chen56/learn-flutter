// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/platform_view.dart';
import 'package:flutter/src/foundation/key.dart';
import 'dart:core';
import 'package:flutter/src/services/platform_views.dart';
import 'package:flutter/src/rendering/platform_view.dart';
import 'dart:ui';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/services/message_codec.dart';
import 'package:note/mate.dart';

/// class AndroidView extends StatefulWidget
class AndroidView$Mate extends AndroidView with WidgetMate<AndroidView$Mate> {
  /// AndroidView AndroidView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated, PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque, TextDirection? layoutDirection, Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers, dynamic creationParams, MessageCodec<dynamic>? creationParamsCodec, Clip clipBehavior = Clip.hardEdge})
  AndroidView$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required String viewType} , hasDefaultValue:false, defaultValueCode:null
    required String viewType,

    /// optionalParameters: {void Function(int)? onPlatformViewCreated} , hasDefaultValue:false, defaultValueCode:null
    PlatformViewCreatedCallback? onPlatformViewCreated,

    /// optionalParameters: {PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque} , hasDefaultValue:true, defaultValueCode:PlatformViewHitTestBehavior.opaque
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// optionalParameters: {TextDirection? layoutDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? layoutDirection,

    /// optionalParameters: {Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers} , hasDefaultValue:false, defaultValueCode:null
    Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers,

    /// optionalParameters: {dynamic creationParams} , hasDefaultValue:false, defaultValueCode:null
    required dynamic creationParams,

    /// optionalParameters: {MessageCodec<dynamic>? creationParamsCodec} , hasDefaultValue:false, defaultValueCode:null
    MessageCodec<dynamic>? creationParamsCodec,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          viewType: viewType,
          onPlatformViewCreated: onPlatformViewCreated,
          hitTestBehavior: hitTestBehavior,
          layoutDirection: layoutDirection,
          gestureRecognizers: gestureRecognizers,
          creationParams: creationParams,
          creationParamsCodec: creationParamsCodec,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AndroidView$Mate(
        key: p.get('key').value,
        viewType: p.get('viewType').value,
        onPlatformViewCreated: p.get('onPlatformViewCreated').value,
        hitTestBehavior: p.get('hitTestBehavior').value,
        layoutDirection: p.get('layoutDirection').value,
        gestureRecognizers: p.get('gestureRecognizers').value,
        creationParams: p.get('creationParams').value,
        creationParamsCodec: p.get('creationParamsCodec').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('viewType', init: viewType);
    mateParams.put('onPlatformViewCreated', init: onPlatformViewCreated);
    mateParams.put('hitTestBehavior', init: hitTestBehavior);
    mateParams.put('layoutDirection', init: layoutDirection);
    mateParams.put('gestureRecognizers', init: gestureRecognizers);
    mateParams.put('creationParams', init: creationParams);
    mateParams.put('creationParamsCodec', init: creationParamsCodec);
    mateParams.put('clipBehavior', init: clipBehavior);
  }
}

/// class UiKitView extends StatefulWidget
class UiKitView$Mate extends UiKitView with WidgetMate<UiKitView$Mate> {
  /// UiKitView UiKitView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated, PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque, TextDirection? layoutDirection, dynamic creationParams, MessageCodec<dynamic>? creationParamsCodec, Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers})
  UiKitView$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required String viewType} , hasDefaultValue:false, defaultValueCode:null
    required String viewType,

    /// optionalParameters: {void Function(int)? onPlatformViewCreated} , hasDefaultValue:false, defaultValueCode:null
    PlatformViewCreatedCallback? onPlatformViewCreated,

    /// optionalParameters: {PlatformViewHitTestBehavior hitTestBehavior = PlatformViewHitTestBehavior.opaque} , hasDefaultValue:true, defaultValueCode:PlatformViewHitTestBehavior.opaque
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// optionalParameters: {TextDirection? layoutDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? layoutDirection,

    /// optionalParameters: {dynamic creationParams} , hasDefaultValue:false, defaultValueCode:null
    required dynamic creationParams,

    /// optionalParameters: {MessageCodec<dynamic>? creationParamsCodec} , hasDefaultValue:false, defaultValueCode:null
    MessageCodec<dynamic>? creationParamsCodec,

    /// optionalParameters: {Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers} , hasDefaultValue:false, defaultValueCode:null
    Set<Factory<OneSequenceGestureRecognizer>>? gestureRecognizers,
  }) : super(
          key: key,
          viewType: viewType,
          onPlatformViewCreated: onPlatformViewCreated,
          hitTestBehavior: hitTestBehavior,
          layoutDirection: layoutDirection,
          creationParams: creationParams,
          creationParamsCodec: creationParamsCodec,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => UiKitView$Mate(
        key: p.get('key').value,
        viewType: p.get('viewType').value,
        onPlatformViewCreated: p.get('onPlatformViewCreated').value,
        hitTestBehavior: p.get('hitTestBehavior').value,
        layoutDirection: p.get('layoutDirection').value,
        creationParams: p.get('creationParams').value,
        creationParamsCodec: p.get('creationParamsCodec').value,
        gestureRecognizers: p.get('gestureRecognizers').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('viewType', init: viewType);
    mateParams.put('onPlatformViewCreated', init: onPlatformViewCreated);
    mateParams.put('hitTestBehavior', init: hitTestBehavior);
    mateParams.put('layoutDirection', init: layoutDirection);
    mateParams.put('creationParams', init: creationParams);
    mateParams.put('creationParamsCodec', init: creationParamsCodec);
    mateParams.put('gestureRecognizers', init: gestureRecognizers);
  }
}

/// class HtmlElementView extends StatelessWidget
class HtmlElementView$Mate extends HtmlElementView with WidgetMate<HtmlElementView$Mate> {
  /// HtmlElementView HtmlElementView({Key? key, required String viewType, void Function(int)? onPlatformViewCreated})
  HtmlElementView$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required String viewType} , hasDefaultValue:false, defaultValueCode:null
    required String viewType,

    /// optionalParameters: {void Function(int)? onPlatformViewCreated} , hasDefaultValue:false, defaultValueCode:null
    PlatformViewCreatedCallback? onPlatformViewCreated,
  }) : super(
          key: key,
          viewType: viewType,
          onPlatformViewCreated: onPlatformViewCreated,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => HtmlElementView$Mate(
        key: p.get('key').value,
        viewType: p.get('viewType').value,
        onPlatformViewCreated: p.get('onPlatformViewCreated').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('viewType', init: viewType);
    mateParams.put('onPlatformViewCreated', init: onPlatformViewCreated);
  }
}

/// class PlatformViewLink extends StatefulWidget
class PlatformViewLink$Mate extends PlatformViewLink with WidgetMate<PlatformViewLink$Mate> {
  /// PlatformViewLink PlatformViewLink({Key? key, required Widget Function(BuildContext, PlatformViewController) surfaceFactory, required PlatformViewController Function(PlatformViewCreationParams) onCreatePlatformView, required String viewType})
  PlatformViewLink$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, PlatformViewController) surfaceFactory} , hasDefaultValue:false, defaultValueCode:null
    required PlatformViewSurfaceFactory surfaceFactory,

    /// optionalParameters: {required PlatformViewController Function(PlatformViewCreationParams) onCreatePlatformView} , hasDefaultValue:false, defaultValueCode:null
    required CreatePlatformViewCallback onCreatePlatformView,

    /// optionalParameters: {required String viewType} , hasDefaultValue:false, defaultValueCode:null
    required String viewType,
  }) : super(
          key: key,
          surfaceFactory: surfaceFactory,
          onCreatePlatformView: onCreatePlatformView,
          viewType: viewType,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => PlatformViewLink$Mate(
        key: p.get('key').value,
        surfaceFactory: p.get('surfaceFactory').value,
        onCreatePlatformView: p.get('onCreatePlatformView').value,
        viewType: p.get('viewType').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('surfaceFactory', init: surfaceFactory);
    mateParams.put('onCreatePlatformView', init: onCreatePlatformView);
    mateParams.put('viewType', init: viewType);
  }
}

/// class PlatformViewSurface extends LeafRenderObjectWidget
class PlatformViewSurface$Mate extends PlatformViewSurface with WidgetMate<PlatformViewSurface$Mate> {
  /// PlatformViewSurface PlatformViewSurface({Key? key, required PlatformViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  PlatformViewSurface$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required PlatformViewController controller} , hasDefaultValue:false, defaultValueCode:null
    required PlatformViewController controller,

    /// optionalParameters: {required PlatformViewHitTestBehavior hitTestBehavior} , hasDefaultValue:false, defaultValueCode:null
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// optionalParameters: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers} , hasDefaultValue:false, defaultValueCode:null
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) : super(
          key: key,
          controller: controller,
          hitTestBehavior: hitTestBehavior,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => PlatformViewSurface$Mate(
        key: p.get('key').value,
        controller: p.get('controller').value,
        hitTestBehavior: p.get('hitTestBehavior').value,
        gestureRecognizers: p.get('gestureRecognizers').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('controller', init: controller);
    mateParams.put('hitTestBehavior', init: hitTestBehavior);
    mateParams.put('gestureRecognizers', init: gestureRecognizers);
  }
}

/// class AndroidViewSurface extends StatefulWidget
class AndroidViewSurface$Mate extends AndroidViewSurface with WidgetMate<AndroidViewSurface$Mate> {
  /// AndroidViewSurface AndroidViewSurface({Key? key, required AndroidViewController controller, required PlatformViewHitTestBehavior hitTestBehavior, required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers})
  AndroidViewSurface$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required AndroidViewController controller} , hasDefaultValue:false, defaultValueCode:null
    required AndroidViewController controller,

    /// optionalParameters: {required PlatformViewHitTestBehavior hitTestBehavior} , hasDefaultValue:false, defaultValueCode:null
    required PlatformViewHitTestBehavior hitTestBehavior,

    /// optionalParameters: {required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers} , hasDefaultValue:false, defaultValueCode:null
    required Set<Factory<OneSequenceGestureRecognizer>> gestureRecognizers,
  }) : super(
          key: key,
          controller: controller,
          hitTestBehavior: hitTestBehavior,
          gestureRecognizers: gestureRecognizers,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AndroidViewSurface$Mate(
        key: p.get('key').value,
        controller: p.get('controller').value,
        hitTestBehavior: p.get('hitTestBehavior').value,
        gestureRecognizers: p.get('gestureRecognizers').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('controller', init: controller);
    mateParams.put('hitTestBehavior', init: hitTestBehavior);
    mateParams.put('gestureRecognizers', init: gestureRecognizers);
  }
}
