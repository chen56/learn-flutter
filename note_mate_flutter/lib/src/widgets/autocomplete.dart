// /// Generated by gen_maters.dart, please don't edit!

import 'dart:core';
import 'package:flutter/src/widgets/autocomplete.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/editable_text.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class RawAutocomplete<T extends Object> extends StatefulWidget
class RawAutocomplete$Mate<T extends Object> extends RawAutocomplete<T> with WidgetMate<RawAutocomplete$Mate> {
  /// RawAutocomplete<T> RawAutocomplete({Key? key, required Widget Function(BuildContext, void Function(T), Iterable<T>) optionsViewBuilder, required FutureOr<Iterable<T>> Function(TextEditingValue) optionsBuilder, String Function(T) displayStringForOption = defaultStringForOption, Widget Function(BuildContext, TextEditingController, FocusNode, void Function())? fieldViewBuilder, FocusNode? focusNode, void Function(T)? onSelected, TextEditingController? textEditingController, TextEditingValue? initialValue})
  RawAutocomplete$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget Function(BuildContext, void Function(T), Iterable<T>) optionsViewBuilder} , hasDefaultValue:false, defaultValueCode:null
    required AutocompleteOptionsViewBuilder<T> optionsViewBuilder,

    /// optionalParameters: {required FutureOr<Iterable<T>> Function(TextEditingValue) optionsBuilder} , hasDefaultValue:false, defaultValueCode:null
    required AutocompleteOptionsBuilder<T> optionsBuilder,

    /// optionalParameters: {String Function(T) displayStringForOption = defaultStringForOption} , hasDefaultValue:true, defaultValueCode:defaultStringForOption
    required AutocompleteOptionToString<T> displayStringForOption,

    /// optionalParameters: {Widget Function(BuildContext, TextEditingController, FocusNode, void Function())? fieldViewBuilder} , hasDefaultValue:false, defaultValueCode:null
    AutocompleteFieldViewBuilder? fieldViewBuilder,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {void Function(T)? onSelected} , hasDefaultValue:false, defaultValueCode:null
    AutocompleteOnSelected<T>? onSelected,

    /// optionalParameters: {TextEditingController? textEditingController} , hasDefaultValue:false, defaultValueCode:null
    TextEditingController? textEditingController,

    /// optionalParameters: {TextEditingValue? initialValue} , hasDefaultValue:false, defaultValueCode:null
    TextEditingValue? initialValue,
  }) : super(
          key: key,
          optionsViewBuilder: optionsViewBuilder,
          optionsBuilder: optionsBuilder,
          displayStringForOption: displayStringForOption,
          fieldViewBuilder: fieldViewBuilder,
          focusNode: focusNode,
          onSelected: onSelected,
          textEditingController: textEditingController,
          initialValue: initialValue,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RawAutocomplete$Mate(
        key: p.get('key').value,
        optionsViewBuilder: p.get('optionsViewBuilder').value,
        optionsBuilder: p.get('optionsBuilder').value,
        displayStringForOption: p.get('displayStringForOption').value,
        fieldViewBuilder: p.get('fieldViewBuilder').value,
        focusNode: p.get('focusNode').value,
        onSelected: p.get('onSelected').value,
        textEditingController: p.get('textEditingController').value,
        initialValue: p.get('initialValue').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('optionsViewBuilder', init: optionsViewBuilder);
    mateParams.put('optionsBuilder', init: optionsBuilder);
    mateParams.put('displayStringForOption', init: displayStringForOption);
    mateParams.put('fieldViewBuilder', init: fieldViewBuilder);
    mateParams.put('focusNode', init: focusNode);
    mateParams.put('onSelected', init: onSelected);
    mateParams.put('textEditingController', init: textEditingController);
    mateParams.put('initialValue', init: initialValue);
  }
}

/// class AutocompleteHighlightedOption extends InheritedNotifier<ValueNotifier<int>>
class AutocompleteHighlightedOption$Mate extends AutocompleteHighlightedOption
    with WidgetMate<AutocompleteHighlightedOption$Mate> {
  /// AutocompleteHighlightedOption AutocompleteHighlightedOption({Key? key, required ValueNotifier<int> highlightIndexNotifier, required Widget child})
  AutocompleteHighlightedOption$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required ValueNotifier<int> highlightIndexNotifier} , hasDefaultValue:false, defaultValueCode:null
    required ValueNotifier<int> highlightIndexNotifier,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          highlightIndexNotifier: highlightIndexNotifier,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AutocompleteHighlightedOption$Mate(
        key: p.get('key').value,
        highlightIndexNotifier: p.get('highlightIndexNotifier').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('highlightIndexNotifier', init: highlightIndexNotifier);
    mateParams.put('child', init: child);
  }
}
