// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/text_selection.dart';
import 'package:flutter/src/services/text_input.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/rendering/layer.dart';
import 'package:flutter/src/rendering/editable.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'dart:ui';
import 'package:flutter/src/widgets/magnifier.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/rendering/selection.dart';
import 'package:flutter/src/foundation/change_notifier.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/gestures/drag_details.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/tap_and_drag_gestures.dart';
import 'package:flutter/src/gestures/force_press.dart';
import 'package:flutter/src/gestures/tap.dart';
import 'package:flutter/src/gestures/long_press.dart';
import 'package:flutter/src/rendering/proxy_box.dart';

/// class TextSelectionOverlay
class TextSelectionOverlay$Mate extends TextSelectionOverlay with Mate<TextSelectionOverlay$Mate> {
  /// TextSelectionOverlay TextSelectionOverlay({required TextEditingValue value, required BuildContext context, Widget? debugRequiredFor, required LayerLink toolbarLayerLink, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required RenderEditable renderObject, TextSelectionControls? selectionControls, bool handlesVisible = false, required TextSelectionDelegate selectionDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, ClipboardStatusNotifier? clipboardStatus, Widget Function(BuildContext)? contextMenuBuilder, required TextMagnifierConfiguration magnifierConfiguration})
  TextSelectionOverlay$Mate({
    /// optionalParameters: {required TextEditingValue value} , hasDefaultValue:false, defaultValueCode:null
    required TextEditingValue value,

    /// optionalParameters: {required BuildContext context} , hasDefaultValue:false, defaultValueCode:null
    required BuildContext context,

    /// optionalParameters: {Widget? debugRequiredFor} , hasDefaultValue:false, defaultValueCode:null
    Widget? debugRequiredFor,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink toolbarLayerLink,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink endHandleLayerLink,

    /// optionalParameters: {required RenderEditable renderObject} , hasDefaultValue:false, defaultValueCode:null
    required RenderEditable renderObject,

    /// optionalParameters: {TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
    TextSelectionControls? selectionControls,

    /// optionalParameters: {bool handlesVisible = false} , hasDefaultValue:true, defaultValueCode:false
    required bool handlesVisible,

    /// optionalParameters: {required TextSelectionDelegate selectionDelegate} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionDelegate selectionDelegate,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {ClipboardStatusNotifier? clipboardStatus} , hasDefaultValue:false, defaultValueCode:null
    ClipboardStatusNotifier? clipboardStatus,

    /// optionalParameters: {Widget Function(BuildContext)? contextMenuBuilder} , hasDefaultValue:false, defaultValueCode:null
    WidgetBuilder? contextMenuBuilder,

    /// optionalParameters: {required TextMagnifierConfiguration magnifierConfiguration} , hasDefaultValue:false, defaultValueCode:null
    required TextMagnifierConfiguration magnifierConfiguration,
  }) : super(
          value: value,
          context: context,
          debugRequiredFor: debugRequiredFor,
          toolbarLayerLink: toolbarLayerLink,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          renderObject: renderObject,
          selectionControls: selectionControls,
          handlesVisible: handlesVisible,
          selectionDelegate: selectionDelegate,
          dragStartBehavior: dragStartBehavior,
          onSelectionHandleTapped: onSelectionHandleTapped,
          clipboardStatus: clipboardStatus,
          contextMenuBuilder: contextMenuBuilder,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TextSelectionOverlay$Mate(
        value: p.get('value').value,
        context: p.get('context').value,
        debugRequiredFor: p.get('debugRequiredFor').value,
        toolbarLayerLink: p.get('toolbarLayerLink').value,
        startHandleLayerLink: p.get('startHandleLayerLink').value,
        endHandleLayerLink: p.get('endHandleLayerLink').value,
        renderObject: p.get('renderObject').value,
        selectionControls: p.get('selectionControls').value,
        handlesVisible: p.get('handlesVisible').value,
        selectionDelegate: p.get('selectionDelegate').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        onSelectionHandleTapped: p.get('onSelectionHandleTapped').value,
        clipboardStatus: p.get('clipboardStatus').value,
        contextMenuBuilder: p.get('contextMenuBuilder').value,
        magnifierConfiguration: p.get('magnifierConfiguration').value,
      ),
    );
    mateParams.put('value', init: value);
    mateParams.put('context', init: context);
    mateParams.put('debugRequiredFor', init: debugRequiredFor);
    mateParams.put('toolbarLayerLink', init: toolbarLayerLink);
    mateParams.put('startHandleLayerLink', init: startHandleLayerLink);
    mateParams.put('endHandleLayerLink', init: endHandleLayerLink);
    mateParams.put('renderObject', init: renderObject);
    mateParams.put('selectionControls', init: selectionControls);
    mateParams.put('handlesVisible', init: handlesVisible);
    mateParams.put('selectionDelegate', init: selectionDelegate);
    mateParams.put('dragStartBehavior', init: dragStartBehavior);
    mateParams.put('onSelectionHandleTapped', init: onSelectionHandleTapped);
    mateParams.put('clipboardStatus', init: clipboardStatus);
    mateParams.put('contextMenuBuilder', init: contextMenuBuilder);
    mateParams.put('magnifierConfiguration', init: magnifierConfiguration);
  }
}

/// class SelectionOverlay
class SelectionOverlay$Mate extends SelectionOverlay with Mate<SelectionOverlay$Mate> {
  /// SelectionOverlay SelectionOverlay({required BuildContext context, Widget? debugRequiredFor, required TextSelectionHandleType startHandleType, required double lineHeightAtStart, ValueListenable<bool>? startHandlesVisible, void Function(DragStartDetails)? onStartHandleDragStart, void Function(DragUpdateDetails)? onStartHandleDragUpdate, void Function(DragEndDetails)? onStartHandleDragEnd, required TextSelectionHandleType endHandleType, required double lineHeightAtEnd, ValueListenable<bool>? endHandlesVisible, void Function(DragStartDetails)? onEndHandleDragStart, void Function(DragUpdateDetails)? onEndHandleDragUpdate, void Function(DragEndDetails)? onEndHandleDragEnd, ValueListenable<bool>? toolbarVisible, required List<TextSelectionPoint> selectionEndpoints, required TextSelectionControls? selectionControls, required TextSelectionDelegate? selectionDelegate, required ClipboardStatusNotifier? clipboardStatus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required LayerLink toolbarLayerLink, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, Offset? toolbarLocation, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
  SelectionOverlay$Mate({
    /// optionalParameters: {required BuildContext context} , hasDefaultValue:false, defaultValueCode:null
    required BuildContext context,

    /// optionalParameters: {Widget? debugRequiredFor} , hasDefaultValue:false, defaultValueCode:null
    Widget? debugRequiredFor,

    /// optionalParameters: {required TextSelectionHandleType startHandleType} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionHandleType startHandleType,

    /// optionalParameters: {required double lineHeightAtStart} , hasDefaultValue:false, defaultValueCode:null
    required double lineHeightAtStart,

    /// optionalParameters: {ValueListenable<bool>? startHandlesVisible} , hasDefaultValue:false, defaultValueCode:null
    ValueListenable<bool>? startHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onStartHandleDragStart} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<DragStartDetails>? onStartHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onStartHandleDragUpdate} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<DragUpdateDetails>? onStartHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onStartHandleDragEnd} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<DragEndDetails>? onStartHandleDragEnd,

    /// optionalParameters: {required TextSelectionHandleType endHandleType} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionHandleType endHandleType,

    /// optionalParameters: {required double lineHeightAtEnd} , hasDefaultValue:false, defaultValueCode:null
    required double lineHeightAtEnd,

    /// optionalParameters: {ValueListenable<bool>? endHandlesVisible} , hasDefaultValue:false, defaultValueCode:null
    ValueListenable<bool>? endHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onEndHandleDragStart} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<DragStartDetails>? onEndHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onEndHandleDragUpdate} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<DragUpdateDetails>? onEndHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onEndHandleDragEnd} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<DragEndDetails>? onEndHandleDragEnd,

    /// optionalParameters: {ValueListenable<bool>? toolbarVisible} , hasDefaultValue:false, defaultValueCode:null
    ValueListenable<bool>? toolbarVisible,

    /// optionalParameters: {required List<TextSelectionPoint> selectionEndpoints} , hasDefaultValue:false, defaultValueCode:null
    required List<TextSelectionPoint> selectionEndpoints,

    /// optionalParameters: {required TextSelectionControls? selectionControls} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionControls? selectionControls,

    /// optionalParameters: {required TextSelectionDelegate? selectionDelegate} , hasDefaultValue:false, defaultValueCode:null
    required TextSelectionDelegate? selectionDelegate,

    /// optionalParameters: {required ClipboardStatusNotifier? clipboardStatus} , hasDefaultValue:false, defaultValueCode:null
    required ClipboardStatusNotifier? clipboardStatus,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink endHandleLayerLink,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , hasDefaultValue:false, defaultValueCode:null
    required LayerLink toolbarLayerLink,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , hasDefaultValue:false, defaultValueCode:null
    VoidCallback? onSelectionHandleTapped,

    /// optionalParameters: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled} , hasDefaultValue:true, defaultValueCode:TextMagnifierConfiguration.disabled
    required TextMagnifierConfiguration magnifierConfiguration,
  }) : super(
          context: context,
          debugRequiredFor: debugRequiredFor,
          startHandleType: startHandleType,
          lineHeightAtStart: lineHeightAtStart,
          startHandlesVisible: startHandlesVisible,
          onStartHandleDragStart: onStartHandleDragStart,
          onStartHandleDragUpdate: onStartHandleDragUpdate,
          onStartHandleDragEnd: onStartHandleDragEnd,
          endHandleType: endHandleType,
          lineHeightAtEnd: lineHeightAtEnd,
          endHandlesVisible: endHandlesVisible,
          onEndHandleDragStart: onEndHandleDragStart,
          onEndHandleDragUpdate: onEndHandleDragUpdate,
          onEndHandleDragEnd: onEndHandleDragEnd,
          toolbarVisible: toolbarVisible,
          selectionEndpoints: selectionEndpoints,
          selectionControls: selectionControls,
          selectionDelegate: selectionDelegate,
          clipboardStatus: clipboardStatus,
          startHandleLayerLink: startHandleLayerLink,
          endHandleLayerLink: endHandleLayerLink,
          toolbarLayerLink: toolbarLayerLink,
          dragStartBehavior: dragStartBehavior,
          onSelectionHandleTapped: onSelectionHandleTapped,
          magnifierConfiguration: magnifierConfiguration,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SelectionOverlay$Mate(
        context: p.get('context').value,
        debugRequiredFor: p.get('debugRequiredFor').value,
        startHandleType: p.get('startHandleType').value,
        lineHeightAtStart: p.get('lineHeightAtStart').value,
        startHandlesVisible: p.get('startHandlesVisible').value,
        onStartHandleDragStart: p.get('onStartHandleDragStart').value,
        onStartHandleDragUpdate: p.get('onStartHandleDragUpdate').value,
        onStartHandleDragEnd: p.get('onStartHandleDragEnd').value,
        endHandleType: p.get('endHandleType').value,
        lineHeightAtEnd: p.get('lineHeightAtEnd').value,
        endHandlesVisible: p.get('endHandlesVisible').value,
        onEndHandleDragStart: p.get('onEndHandleDragStart').value,
        onEndHandleDragUpdate: p.get('onEndHandleDragUpdate').value,
        onEndHandleDragEnd: p.get('onEndHandleDragEnd').value,
        toolbarVisible: p.get('toolbarVisible').value,
        selectionEndpoints: p.get('selectionEndpoints').value,
        selectionControls: p.get('selectionControls').value,
        selectionDelegate: p.get('selectionDelegate').value,
        clipboardStatus: p.get('clipboardStatus').value,
        startHandleLayerLink: p.get('startHandleLayerLink').value,
        endHandleLayerLink: p.get('endHandleLayerLink').value,
        toolbarLayerLink: p.get('toolbarLayerLink').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        onSelectionHandleTapped: p.get('onSelectionHandleTapped').value,
        magnifierConfiguration: p.get('magnifierConfiguration').value,
      ),
    );
    mateParams.put('context', init: context);
    mateParams.put('debugRequiredFor', init: debugRequiredFor);
    mateParams.put('startHandleType', init: startHandleType);
    mateParams.put('lineHeightAtStart', init: lineHeightAtStart);
    mateParams.put('startHandlesVisible', init: startHandlesVisible);
    mateParams.put('onStartHandleDragStart', init: onStartHandleDragStart);
    mateParams.put('onStartHandleDragUpdate', init: onStartHandleDragUpdate);
    mateParams.put('onStartHandleDragEnd', init: onStartHandleDragEnd);
    mateParams.put('endHandleType', init: endHandleType);
    mateParams.put('lineHeightAtEnd', init: lineHeightAtEnd);
    mateParams.put('endHandlesVisible', init: endHandlesVisible);
    mateParams.put('onEndHandleDragStart', init: onEndHandleDragStart);
    mateParams.put('onEndHandleDragUpdate', init: onEndHandleDragUpdate);
    mateParams.put('onEndHandleDragEnd', init: onEndHandleDragEnd);
    mateParams.put('toolbarVisible', init: toolbarVisible);
    mateParams.put('selectionEndpoints', init: selectionEndpoints);
    mateParams.put('selectionControls', init: selectionControls);
    mateParams.put('selectionDelegate', init: selectionDelegate);
    mateParams.put('clipboardStatus', init: clipboardStatus);
    mateParams.put('startHandleLayerLink', init: startHandleLayerLink);
    mateParams.put('endHandleLayerLink', init: endHandleLayerLink);
    mateParams.put('toolbarLayerLink', init: toolbarLayerLink);
    mateParams.put('dragStartBehavior', init: dragStartBehavior);
    mateParams.put('onSelectionHandleTapped', init: onSelectionHandleTapped);
    mateParams.put('magnifierConfiguration', init: magnifierConfiguration);
  }
}

/// class TextSelectionGestureDetectorBuilder
class TextSelectionGestureDetectorBuilder$Mate extends TextSelectionGestureDetectorBuilder
    with Mate<TextSelectionGestureDetectorBuilder$Mate> {
  /// TextSelectionGestureDetectorBuilder TextSelectionGestureDetectorBuilder({required TextSelectionGestureDetectorBuilderDelegate delegate})
  TextSelectionGestureDetectorBuilder$Mate(
      {
      /// optionalParameters: {required TextSelectionGestureDetectorBuilderDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
      required TextSelectionGestureDetectorBuilderDelegate delegate})
      : super(delegate: delegate) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TextSelectionGestureDetectorBuilder$Mate(delegate: p.get('delegate').value),
    );
    mateParams.put('delegate', init: delegate);
  }
}

/// class TextSelectionGestureDetector extends StatefulWidget
class TextSelectionGestureDetector$Mate extends TextSelectionGestureDetector
    with WidgetMate<TextSelectionGestureDetector$Mate> {
  /// TextSelectionGestureDetector TextSelectionGestureDetector({Key? key, void Function(TapDragDownDetails)? onTapDown, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressEnd, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapDragUpDetails)? onSingleTapUp, void Function()? onSingleTapCancel, void Function(LongPressStartDetails)? onSingleLongTapStart, void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate, void Function(LongPressEndDetails)? onSingleLongTapEnd, void Function(TapDragDownDetails)? onDoubleTapDown, void Function(TapDragStartDetails)? onDragSelectionStart, void Function(TapDragUpdateDetails)? onDragSelectionUpdate, void Function(TapDragEndDetails)? onDragSelectionEnd, HitTestBehavior? behavior, required Widget child})
  TextSelectionGestureDetector$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {void Function(TapDragDownDetails)? onTapDown} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDragDownCallback? onTapDown,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , hasDefaultValue:false, defaultValueCode:null
    GestureForcePressStartCallback? onForcePressStart,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , hasDefaultValue:false, defaultValueCode:null
    GestureForcePressEndCallback? onForcePressEnd,

    /// optionalParameters: {void Function()? onSecondaryTap} , hasDefaultValue:false, defaultValueCode:null
    GestureTapCallback? onSecondaryTap,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDownCallback? onSecondaryTapDown,

    /// optionalParameters: {void Function(TapDragUpDetails)? onSingleTapUp} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDragUpCallback? onSingleTapUp,

    /// optionalParameters: {void Function()? onSingleTapCancel} , hasDefaultValue:false, defaultValueCode:null
    GestureCancelCallback? onSingleTapCancel,

    /// optionalParameters: {void Function(LongPressStartDetails)? onSingleLongTapStart} , hasDefaultValue:false, defaultValueCode:null
    GestureLongPressStartCallback? onSingleLongTapStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate} , hasDefaultValue:false, defaultValueCode:null
    GestureLongPressMoveUpdateCallback? onSingleLongTapMoveUpdate,

    /// optionalParameters: {void Function(LongPressEndDetails)? onSingleLongTapEnd} , hasDefaultValue:false, defaultValueCode:null
    GestureLongPressEndCallback? onSingleLongTapEnd,

    /// optionalParameters: {void Function(TapDragDownDetails)? onDoubleTapDown} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDragDownCallback? onDoubleTapDown,

    /// optionalParameters: {void Function(TapDragStartDetails)? onDragSelectionStart} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDragStartCallback? onDragSelectionStart,

    /// optionalParameters: {void Function(TapDragUpdateDetails)? onDragSelectionUpdate} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDragUpdateCallback? onDragSelectionUpdate,

    /// optionalParameters: {void Function(TapDragEndDetails)? onDragSelectionEnd} , hasDefaultValue:false, defaultValueCode:null
    GestureTapDragEndCallback? onDragSelectionEnd,

    /// optionalParameters: {HitTestBehavior? behavior} , hasDefaultValue:false, defaultValueCode:null
    HitTestBehavior? behavior,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          onTapDown: onTapDown,
          onForcePressStart: onForcePressStart,
          onForcePressEnd: onForcePressEnd,
          onSecondaryTap: onSecondaryTap,
          onSecondaryTapDown: onSecondaryTapDown,
          onSingleTapUp: onSingleTapUp,
          onSingleTapCancel: onSingleTapCancel,
          onSingleLongTapStart: onSingleLongTapStart,
          onSingleLongTapMoveUpdate: onSingleLongTapMoveUpdate,
          onSingleLongTapEnd: onSingleLongTapEnd,
          onDoubleTapDown: onDoubleTapDown,
          onDragSelectionStart: onDragSelectionStart,
          onDragSelectionUpdate: onDragSelectionUpdate,
          onDragSelectionEnd: onDragSelectionEnd,
          behavior: behavior,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => TextSelectionGestureDetector$Mate(
        key: p.get('key').value,
        onTapDown: p.get('onTapDown').value,
        onForcePressStart: p.get('onForcePressStart').value,
        onForcePressEnd: p.get('onForcePressEnd').value,
        onSecondaryTap: p.get('onSecondaryTap').value,
        onSecondaryTapDown: p.get('onSecondaryTapDown').value,
        onSingleTapUp: p.get('onSingleTapUp').value,
        onSingleTapCancel: p.get('onSingleTapCancel').value,
        onSingleLongTapStart: p.get('onSingleLongTapStart').value,
        onSingleLongTapMoveUpdate: p.get('onSingleLongTapMoveUpdate').value,
        onSingleLongTapEnd: p.get('onSingleLongTapEnd').value,
        onDoubleTapDown: p.get('onDoubleTapDown').value,
        onDragSelectionStart: p.get('onDragSelectionStart').value,
        onDragSelectionUpdate: p.get('onDragSelectionUpdate').value,
        onDragSelectionEnd: p.get('onDragSelectionEnd').value,
        behavior: p.get('behavior').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('onTapDown', init: onTapDown);
    mateParams.put('onForcePressStart', init: onForcePressStart);
    mateParams.put('onForcePressEnd', init: onForcePressEnd);
    mateParams.put('onSecondaryTap', init: onSecondaryTap);
    mateParams.put('onSecondaryTapDown', init: onSecondaryTapDown);
    mateParams.put('onSingleTapUp', init: onSingleTapUp);
    mateParams.put('onSingleTapCancel', init: onSingleTapCancel);
    mateParams.put('onSingleLongTapStart', init: onSingleLongTapStart);
    mateParams.put('onSingleLongTapMoveUpdate', init: onSingleLongTapMoveUpdate);
    mateParams.put('onSingleLongTapEnd', init: onSingleLongTapEnd);
    mateParams.put('onDoubleTapDown', init: onDoubleTapDown);
    mateParams.put('onDragSelectionStart', init: onDragSelectionStart);
    mateParams.put('onDragSelectionUpdate', init: onDragSelectionUpdate);
    mateParams.put('onDragSelectionEnd', init: onDragSelectionEnd);
    mateParams.put('behavior', init: behavior);
    mateParams.put('child', init: child);
  }
}

/// class ClipboardStatusNotifier extends ValueNotifier<ClipboardStatus> with WidgetsBindingObserver
class ClipboardStatusNotifier$Mate extends ClipboardStatusNotifier with Mate<ClipboardStatusNotifier$Mate> {
  /// ClipboardStatusNotifier ClipboardStatusNotifier({ClipboardStatus value = ClipboardStatus.unknown})
  ClipboardStatusNotifier$Mate(
      {
      /// optionalParameters: {ClipboardStatus value = ClipboardStatus.unknown} , hasDefaultValue:true, defaultValueCode:ClipboardStatus.unknown
      required ClipboardStatus value})
      : super(value: value) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ClipboardStatusNotifier$Mate(value: p.get('value').value),
    );
    mateParams.put('value', init: value);
  }
}
