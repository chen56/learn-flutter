// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/sliver_fill.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/sliver.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/widgets/framework.dart';

/// class SliverFillViewport extends StatelessWidget
class SliverFillViewport$Mate extends SliverFillViewport with WidgetMate<SliverFillViewport$Mate> {
  /// SliverFillViewport SliverFillViewport({Key? key, required SliverChildDelegate delegate, double viewportFraction = 1.0, bool padEnds = true})
  SliverFillViewport$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required SliverChildDelegate delegate} , hasDefaultValue:false, defaultValueCode:null
    required SliverChildDelegate delegate,

    /// optionalParameters: {double viewportFraction = 1.0} , hasDefaultValue:true, defaultValueCode:1.0
    required double viewportFraction,

    /// optionalParameters: {bool padEnds = true} , hasDefaultValue:true, defaultValueCode:true
    required bool padEnds,
  }) : super(
          key: key,
          delegate: delegate,
          viewportFraction: viewportFraction,
          padEnds: padEnds,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverFillViewport$Mate(
        key: p.get('key').value,
        delegate: p.get('delegate').value,
        viewportFraction: p.get('viewportFraction').value,
        padEnds: p.get('padEnds').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('delegate', init: delegate);
    mateParams.put('viewportFraction', init: viewportFraction);
    mateParams.put('padEnds', init: padEnds);
  }
}

/// class SliverFillRemaining extends StatelessWidget
class SliverFillRemaining$Mate extends SliverFillRemaining with WidgetMate<SliverFillRemaining$Mate> {
  /// SliverFillRemaining SliverFillRemaining({Key? key, Widget? child, bool hasScrollBody = true, bool fillOverscroll = false})
  SliverFillRemaining$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,

    /// optionalParameters: {bool hasScrollBody = true} , hasDefaultValue:true, defaultValueCode:true
    required bool hasScrollBody,

    /// optionalParameters: {bool fillOverscroll = false} , hasDefaultValue:true, defaultValueCode:false
    required bool fillOverscroll,
  }) : super(
          key: key,
          child: child,
          hasScrollBody: hasScrollBody,
          fillOverscroll: fillOverscroll,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverFillRemaining$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        hasScrollBody: p.get('hasScrollBody').value,
        fillOverscroll: p.get('fillOverscroll').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('child', init: child);
    mateParams.put('hasScrollBody', init: hasScrollBody);
    mateParams.put('fillOverscroll', init: fillOverscroll);
  }
}
