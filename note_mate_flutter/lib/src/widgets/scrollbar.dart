// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scrollbar.dart';
import 'dart:ui';
import 'package:flutter/src/animation/animation.dart';
import 'dart:core';
import 'package:flutter/src/painting/edge_insets.dart';
import 'package:flutter/src/painting/borders.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_notification.dart';

/// class ScrollbarPainter extends ChangeNotifier implements CustomPainter
class ScrollbarPainter$Mate extends ScrollbarPainter with Mate<ScrollbarPainter$Mate> {
  /// ScrollbarPainter ScrollbarPainter({required Color color, required Animation<double> fadeoutOpacityAnimation, Color trackColor = const Color(0x00000000), Color trackBorderColor = const Color(0x00000000), TextDirection? textDirection, double thickness = _kScrollbarThickness, EdgeInsets padding = EdgeInsets.zero, double mainAxisMargin = 0.0, double crossAxisMargin = 0.0, Radius? radius, Radius? trackRadius, OutlinedBorder? shape, double minLength = _kMinThumbExtent, double? minOverscrollLength, ScrollbarOrientation? scrollbarOrientation, bool ignorePointer = false})
  ScrollbarPainter$Mate({
    /// optionalParameters: {required Color color} , hasDefaultValue:false, defaultValueCode:null
    required Color color,

    /// optionalParameters: {required Animation<double> fadeoutOpacityAnimation} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> fadeoutOpacityAnimation,

    /// optionalParameters: {Color trackColor = const Color(0x00000000)} , hasDefaultValue:true, defaultValueCode:const Color(0x00000000)
    required Color trackColor,

    /// optionalParameters: {Color trackBorderColor = const Color(0x00000000)} , hasDefaultValue:true, defaultValueCode:const Color(0x00000000)
    required Color trackBorderColor,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {double thickness = _kScrollbarThickness} , hasDefaultValue:true, defaultValueCode:_kScrollbarThickness
    required double thickness,

    /// optionalParameters: {EdgeInsets padding = EdgeInsets.zero} , hasDefaultValue:true, defaultValueCode:EdgeInsets.zero
    required EdgeInsets padding,

    /// optionalParameters: {double mainAxisMargin = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double mainAxisMargin,

    /// optionalParameters: {double crossAxisMargin = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double crossAxisMargin,

    /// optionalParameters: {Radius? radius} , hasDefaultValue:false, defaultValueCode:null
    Radius? radius,

    /// optionalParameters: {Radius? trackRadius} , hasDefaultValue:false, defaultValueCode:null
    Radius? trackRadius,

    /// optionalParameters: {OutlinedBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    OutlinedBorder? shape,

    /// optionalParameters: {double minLength = _kMinThumbExtent} , hasDefaultValue:true, defaultValueCode:_kMinThumbExtent
    required double minLength,

    /// optionalParameters: {double? minOverscrollLength} , hasDefaultValue:false, defaultValueCode:null
    double? minOverscrollLength,

    /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , hasDefaultValue:false, defaultValueCode:null
    ScrollbarOrientation? scrollbarOrientation,

    /// optionalParameters: {bool ignorePointer = false} , hasDefaultValue:true, defaultValueCode:false
    required bool ignorePointer,
  }) : super(
          color: color,
          fadeoutOpacityAnimation: fadeoutOpacityAnimation,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          textDirection: textDirection,
          thickness: thickness,
          padding: padding,
          mainAxisMargin: mainAxisMargin,
          crossAxisMargin: crossAxisMargin,
          radius: radius,
          trackRadius: trackRadius,
          shape: shape,
          minLength: minLength,
          minOverscrollLength: minOverscrollLength,
          scrollbarOrientation: scrollbarOrientation,
          ignorePointer: ignorePointer,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScrollbarPainter$Mate(
        color: p.get('color').value,
        fadeoutOpacityAnimation: p.get('fadeoutOpacityAnimation').value,
        trackColor: p.get('trackColor').value,
        trackBorderColor: p.get('trackBorderColor').value,
        textDirection: p.get('textDirection').value,
        thickness: p.get('thickness').value,
        padding: p.get('padding').value,
        mainAxisMargin: p.get('mainAxisMargin').value,
        crossAxisMargin: p.get('crossAxisMargin').value,
        radius: p.get('radius').value,
        trackRadius: p.get('trackRadius').value,
        shape: p.get('shape').value,
        minLength: p.get('minLength').value,
        minOverscrollLength: p.get('minOverscrollLength').value,
        scrollbarOrientation: p.get('scrollbarOrientation').value,
        ignorePointer: p.get('ignorePointer').value,
      ),
    );
    mateParams.put('color', init: color);
    mateParams.put('fadeoutOpacityAnimation', init: fadeoutOpacityAnimation);
    mateParams.put('trackColor', init: trackColor);
    mateParams.put('trackBorderColor', init: trackBorderColor);
    mateParams.put('textDirection', init: textDirection);
    mateParams.put('thickness', init: thickness);
    mateParams.put('padding', init: padding);
    mateParams.put('mainAxisMargin', init: mainAxisMargin);
    mateParams.put('crossAxisMargin', init: crossAxisMargin);
    mateParams.put('radius', init: radius);
    mateParams.put('trackRadius', init: trackRadius);
    mateParams.put('shape', init: shape);
    mateParams.put('minLength', init: minLength);
    mateParams.put('minOverscrollLength', init: minOverscrollLength);
    mateParams.put('scrollbarOrientation', init: scrollbarOrientation);
    mateParams.put('ignorePointer', init: ignorePointer);
  }
}

/// class RawScrollbar extends StatefulWidget
class RawScrollbar$Mate extends RawScrollbar with WidgetMate<RawScrollbar$Mate> {
  /// RawScrollbar RawScrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, OutlinedBorder? shape, Radius? radius, double? thickness, Color? thumbColor, double minThumbLength = _kMinThumbExtent, double? minOverscrollLength, bool? trackVisibility, Radius? trackRadius, Color? trackColor, Color? trackBorderColor, Duration fadeDuration = _kScrollbarFadeDuration, Duration timeToFade = _kScrollbarTimeToFade, Duration pressDuration = Duration.zero, bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate, bool? interactive, ScrollbarOrientation? scrollbarOrientation, double mainAxisMargin = 0.0, double crossAxisMargin = 0.0, EdgeInsets? padding, bool? isAlwaysShown})
  RawScrollbar$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {bool? thumbVisibility} , hasDefaultValue:false, defaultValueCode:null
    bool? thumbVisibility,

    /// optionalParameters: {OutlinedBorder? shape} , hasDefaultValue:false, defaultValueCode:null
    OutlinedBorder? shape,

    /// optionalParameters: {Radius? radius} , hasDefaultValue:false, defaultValueCode:null
    Radius? radius,

    /// optionalParameters: {double? thickness} , hasDefaultValue:false, defaultValueCode:null
    double? thickness,

    /// optionalParameters: {Color? thumbColor} , hasDefaultValue:false, defaultValueCode:null
    Color? thumbColor,

    /// optionalParameters: {double minThumbLength = _kMinThumbExtent} , hasDefaultValue:true, defaultValueCode:_kMinThumbExtent
    required double minThumbLength,

    /// optionalParameters: {double? minOverscrollLength} , hasDefaultValue:false, defaultValueCode:null
    double? minOverscrollLength,

    /// optionalParameters: {bool? trackVisibility} , hasDefaultValue:false, defaultValueCode:null
    bool? trackVisibility,

    /// optionalParameters: {Radius? trackRadius} , hasDefaultValue:false, defaultValueCode:null
    Radius? trackRadius,

    /// optionalParameters: {Color? trackColor} , hasDefaultValue:false, defaultValueCode:null
    Color? trackColor,

    /// optionalParameters: {Color? trackBorderColor} , hasDefaultValue:false, defaultValueCode:null
    Color? trackBorderColor,

    /// optionalParameters: {Duration fadeDuration = _kScrollbarFadeDuration} , hasDefaultValue:true, defaultValueCode:_kScrollbarFadeDuration
    required Duration fadeDuration,

    /// optionalParameters: {Duration timeToFade = _kScrollbarTimeToFade} , hasDefaultValue:true, defaultValueCode:_kScrollbarTimeToFade
    required Duration timeToFade,

    /// optionalParameters: {Duration pressDuration = Duration.zero} , hasDefaultValue:true, defaultValueCode:Duration.zero
    required Duration pressDuration,

    /// optionalParameters: {bool Function(ScrollNotification) notificationPredicate = defaultScrollNotificationPredicate} , hasDefaultValue:true, defaultValueCode:defaultScrollNotificationPredicate
    required ScrollNotificationPredicate notificationPredicate,

    /// optionalParameters: {bool? interactive} , hasDefaultValue:false, defaultValueCode:null
    bool? interactive,

    /// optionalParameters: {ScrollbarOrientation? scrollbarOrientation} , hasDefaultValue:false, defaultValueCode:null
    ScrollbarOrientation? scrollbarOrientation,

    /// optionalParameters: {double mainAxisMargin = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double mainAxisMargin,

    /// optionalParameters: {double crossAxisMargin = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double crossAxisMargin,

    /// optionalParameters: {EdgeInsets? padding} , hasDefaultValue:false, defaultValueCode:null
    EdgeInsets? padding,
  }) : super(
          key: key,
          child: child,
          controller: controller,
          thumbVisibility: thumbVisibility,
          shape: shape,
          radius: radius,
          thickness: thickness,
          thumbColor: thumbColor,
          minThumbLength: minThumbLength,
          minOverscrollLength: minOverscrollLength,
          trackVisibility: trackVisibility,
          trackRadius: trackRadius,
          trackColor: trackColor,
          trackBorderColor: trackBorderColor,
          fadeDuration: fadeDuration,
          timeToFade: timeToFade,
          pressDuration: pressDuration,
          notificationPredicate: notificationPredicate,
          interactive: interactive,
          scrollbarOrientation: scrollbarOrientation,
          mainAxisMargin: mainAxisMargin,
          crossAxisMargin: crossAxisMargin,
          padding: padding,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RawScrollbar$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        controller: p.get('controller').value,
        thumbVisibility: p.get('thumbVisibility').value,
        shape: p.get('shape').value,
        radius: p.get('radius').value,
        thickness: p.get('thickness').value,
        thumbColor: p.get('thumbColor').value,
        minThumbLength: p.get('minThumbLength').value,
        minOverscrollLength: p.get('minOverscrollLength').value,
        trackVisibility: p.get('trackVisibility').value,
        trackRadius: p.get('trackRadius').value,
        trackColor: p.get('trackColor').value,
        trackBorderColor: p.get('trackBorderColor').value,
        fadeDuration: p.get('fadeDuration').value,
        timeToFade: p.get('timeToFade').value,
        pressDuration: p.get('pressDuration').value,
        notificationPredicate: p.get('notificationPredicate').value,
        interactive: p.get('interactive').value,
        scrollbarOrientation: p.get('scrollbarOrientation').value,
        mainAxisMargin: p.get('mainAxisMargin').value,
        crossAxisMargin: p.get('crossAxisMargin').value,
        padding: p.get('padding').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('child', init: child);
    mateParams.put('controller', init: controller);
    mateParams.put('thumbVisibility', init: thumbVisibility);
    mateParams.put('shape', init: shape);
    mateParams.put('radius', init: radius);
    mateParams.put('thickness', init: thickness);
    mateParams.put('thumbColor', init: thumbColor);
    mateParams.put('minThumbLength', init: minThumbLength);
    mateParams.put('minOverscrollLength', init: minOverscrollLength);
    mateParams.put('trackVisibility', init: trackVisibility);
    mateParams.put('trackRadius', init: trackRadius);
    mateParams.put('trackColor', init: trackColor);
    mateParams.put('trackBorderColor', init: trackBorderColor);
    mateParams.put('fadeDuration', init: fadeDuration);
    mateParams.put('timeToFade', init: timeToFade);
    mateParams.put('pressDuration', init: pressDuration);
    mateParams.put('notificationPredicate', init: notificationPredicate);
    mateParams.put('interactive', init: interactive);
    mateParams.put('scrollbarOrientation', init: scrollbarOrientation);
    mateParams.put('mainAxisMargin', init: mainAxisMargin);
    mateParams.put('crossAxisMargin', init: crossAxisMargin);
    mateParams.put('padding', init: padding);
  }
}
