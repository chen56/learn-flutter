// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/actions.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/widgets/focus_manager.dart';
import 'package:flutter/src/widgets/shortcuts.dart';
import 'package:flutter/src/foundation/basic_types.dart';
import 'package:flutter/src/services/mouse_cursor.dart';
import 'dart:ui';

/// class ActionListener extends StatefulWidget
class ActionListener$Mate extends ActionListener with WidgetMate<ActionListener$Mate> {
  /// ActionListener ActionListener({Key? key, required void Function(Action<Intent>) listener, required Action<Intent> action, required Widget child})
  ActionListener$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required void Function(Action<Intent>) listener} , hasDefaultValue:false, defaultValueCode:null
    required ActionListenerCallback listener,

    /// optionalParameters: {required Action<Intent> action} , hasDefaultValue:false, defaultValueCode:null
    required Action<Intent> action,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          listener: listener,
          action: action,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ActionListener$Mate(
        key: p.get('key').value,
        listener: p.get('listener').value,
        action: p.get('action').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('listener', listener);
    mateParams.put('action', action);
    mateParams.put('child', child);
  }
}

/// class CallbackAction<T extends Intent> extends Action<T>
class CallbackAction$Mate<T extends Intent> extends CallbackAction<T> with Mate<CallbackAction$Mate> {
  /// CallbackAction<T> CallbackAction({required Object? Function(T) onInvoke})
  CallbackAction$Mate(
      {
      /// optionalParameters: {required Object? Function(T) onInvoke} , hasDefaultValue:false, defaultValueCode:null
      required OnInvokeCallback<T> onInvoke})
      : super(onInvoke: onInvoke) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CallbackAction$Mate(onInvoke: p.get('onInvoke').value),
    );
    mateParams.put('onInvoke', onInvoke);
  }
}

/// class Actions extends StatefulWidget
class Actions$Mate extends Actions with WidgetMate<Actions$Mate> {
  /// Actions Actions({Key? key, ActionDispatcher? dispatcher, required Map<Type, Action<Intent>> actions, required Widget child})
  Actions$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {ActionDispatcher? dispatcher} , hasDefaultValue:false, defaultValueCode:null
    ActionDispatcher? dispatcher,

    /// optionalParameters: {required Map<Type, Action<Intent>> actions} , hasDefaultValue:false, defaultValueCode:null
    required Map<Type, Action<Intent>> actions,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          dispatcher: dispatcher,
          actions: actions,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Actions$Mate(
        key: p.get('key').value,
        dispatcher: p.get('dispatcher').value,
        actions: p.get('actions').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('dispatcher', dispatcher);
    mateParams.put('actions', actions);
    mateParams.put('child', child);
  }
}

/// class FocusableActionDetector extends StatefulWidget
class FocusableActionDetector$Mate extends FocusableActionDetector with WidgetMate<FocusableActionDetector$Mate> {
  /// FocusableActionDetector FocusableActionDetector({Key? key, bool enabled = true, FocusNode? focusNode, bool autofocus = false, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, void Function(bool)? onShowFocusHighlight, void Function(bool)? onShowHoverHighlight, void Function(bool)? onFocusChange, MouseCursor mouseCursor = MouseCursor.defer, bool includeFocusSemantics = true, required Widget child})
  FocusableActionDetector$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {bool enabled = true} , hasDefaultValue:true, defaultValueCode:true
    required bool enabled,

    /// optionalParameters: {FocusNode? focusNode} , hasDefaultValue:false, defaultValueCode:null
    FocusNode? focusNode,

    /// optionalParameters: {bool autofocus = false} , hasDefaultValue:true, defaultValueCode:false
    required bool autofocus,

    /// optionalParameters: {bool descendantsAreFocusable = true} , hasDefaultValue:true, defaultValueCode:true
    required bool descendantsAreFocusable,

    /// optionalParameters: {bool descendantsAreTraversable = true} , hasDefaultValue:true, defaultValueCode:true
    required bool descendantsAreTraversable,

    /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , hasDefaultValue:false, defaultValueCode:null
    Map<ShortcutActivator, Intent>? shortcuts,

    /// optionalParameters: {Map<Type, Action<Intent>>? actions} , hasDefaultValue:false, defaultValueCode:null
    Map<Type, Action<Intent>>? actions,

    /// optionalParameters: {void Function(bool)? onShowFocusHighlight} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onShowFocusHighlight,

    /// optionalParameters: {void Function(bool)? onShowHoverHighlight} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onShowHoverHighlight,

    /// optionalParameters: {void Function(bool)? onFocusChange} , hasDefaultValue:false, defaultValueCode:null
    ValueChanged<bool>? onFocusChange,

    /// optionalParameters: {MouseCursor mouseCursor = MouseCursor.defer} , hasDefaultValue:true, defaultValueCode:MouseCursor.defer
    required MouseCursor mouseCursor,

    /// optionalParameters: {bool includeFocusSemantics = true} , hasDefaultValue:true, defaultValueCode:true
    required bool includeFocusSemantics,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          enabled: enabled,
          focusNode: focusNode,
          autofocus: autofocus,
          descendantsAreFocusable: descendantsAreFocusable,
          descendantsAreTraversable: descendantsAreTraversable,
          shortcuts: shortcuts,
          actions: actions,
          onShowFocusHighlight: onShowFocusHighlight,
          onShowHoverHighlight: onShowHoverHighlight,
          onFocusChange: onFocusChange,
          mouseCursor: mouseCursor,
          includeFocusSemantics: includeFocusSemantics,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FocusableActionDetector$Mate(
        key: p.get('key').value,
        enabled: p.get('enabled').value,
        focusNode: p.get('focusNode').value,
        autofocus: p.get('autofocus').value,
        descendantsAreFocusable: p.get('descendantsAreFocusable').value,
        descendantsAreTraversable: p.get('descendantsAreTraversable').value,
        shortcuts: p.get('shortcuts').value,
        actions: p.get('actions').value,
        onShowFocusHighlight: p.get('onShowFocusHighlight').value,
        onShowHoverHighlight: p.get('onShowHoverHighlight').value,
        onFocusChange: p.get('onFocusChange').value,
        mouseCursor: p.get('mouseCursor').value,
        includeFocusSemantics: p.get('includeFocusSemantics').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('enabled', enabled);
    mateParams.put('focusNode', focusNode);
    mateParams.put('autofocus', autofocus);
    mateParams.put('descendantsAreFocusable', descendantsAreFocusable);
    mateParams.put('descendantsAreTraversable', descendantsAreTraversable);
    mateParams.put('shortcuts', shortcuts);
    mateParams.put('actions', actions);
    mateParams.put('onShowFocusHighlight', onShowFocusHighlight);
    mateParams.put('onShowHoverHighlight', onShowHoverHighlight);
    mateParams.put('onFocusChange', onFocusChange);
    mateParams.put('mouseCursor', mouseCursor);
    mateParams.put('includeFocusSemantics', includeFocusSemantics);
    mateParams.put('child', child);
  }
}

/// class VoidCallbackIntent extends Intent
class VoidCallbackIntent$Mate extends VoidCallbackIntent with Mate<VoidCallbackIntent$Mate> {
  /// VoidCallbackIntent VoidCallbackIntent(void Function() callback)
  VoidCallbackIntent$Mate(

      /// requiredParameters: void Function() callback
      VoidCallback callback)
      : super(callback) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => VoidCallbackIntent$Mate(p.get('callback').value),
    );
    mateParams.put('callback', callback);
  }
}

/// class DoNothingAction extends Action<Intent>
class DoNothingAction$Mate extends DoNothingAction with Mate<DoNothingAction$Mate> {
  /// DoNothingAction DoNothingAction({bool consumesKey = true})
  DoNothingAction$Mate(
      {
      /// optionalParameters: {bool consumesKey = true} , hasDefaultValue:true, defaultValueCode:true
      required bool consumesKey})
      : super(consumesKey: consumesKey) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DoNothingAction$Mate(consumesKey: p.get('consumesKey').value),
    );
    mateParams.put('consumesKey', consumesKey);
  }
}

/// class PrioritizedIntents extends Intent
class PrioritizedIntents$Mate extends PrioritizedIntents with Mate<PrioritizedIntents$Mate> {
  /// PrioritizedIntents PrioritizedIntents({required List<Intent> orderedIntents})
  PrioritizedIntents$Mate(
      {
      /// optionalParameters: {required List<Intent> orderedIntents} , hasDefaultValue:false, defaultValueCode:null
      required List<Intent> orderedIntents})
      : super(orderedIntents: orderedIntents) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => PrioritizedIntents$Mate(orderedIntents: p.get('orderedIntents').value),
    );
    mateParams.put('orderedIntents', orderedIntents);
  }
}
