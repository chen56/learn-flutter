// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/transitions.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/animation/animation.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/alignment.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/rendering/stack.dart';
import 'package:flutter/src/painting/decoration.dart';
import 'package:flutter/src/rendering/proxy_box.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/foundation/change_notifier.dart';

/// class SlideTransition extends AnimatedWidget
class SlideTransition$Mate extends SlideTransition with WidgetMate<SlideTransition$Mate> {
  /// SlideTransition SlideTransition({Key? key, required Animation<Offset> position, bool transformHitTests = true, TextDirection? textDirection, Widget? child})
  SlideTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<Offset> position} , hasDefaultValue:false, defaultValueCode:null
    required Animation<Offset> position,

    /// optionalParameters: {bool transformHitTests = true} , hasDefaultValue:true, defaultValueCode:true
    required bool transformHitTests,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          position: position,
          transformHitTests: transformHitTests,
          textDirection: textDirection,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SlideTransition$Mate(
        key: p.get('key').value,
        position: p.get('position').value,
        transformHitTests: p.get('transformHitTests').value,
        textDirection: p.get('textDirection').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('position', position);
    mateParams.put('transformHitTests', transformHitTests);
    mateParams.put('textDirection', textDirection);
    mateParams.put('child', child);
  }
}

/// class ScaleTransition extends AnimatedWidget
class ScaleTransition$Mate extends ScaleTransition with WidgetMate<ScaleTransition$Mate> {
  /// ScaleTransition ScaleTransition({Key? key, required Animation<double> scale, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  ScaleTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<double> scale} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> scale,

    /// optionalParameters: {Alignment alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required Alignment alignment,

    /// optionalParameters: {FilterQuality? filterQuality} , hasDefaultValue:false, defaultValueCode:null
    FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          scale: scale,
          alignment: alignment,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ScaleTransition$Mate(
        key: p.get('key').value,
        scale: p.get('scale').value,
        alignment: p.get('alignment').value,
        filterQuality: p.get('filterQuality').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('scale', scale);
    mateParams.put('alignment', alignment);
    mateParams.put('filterQuality', filterQuality);
    mateParams.put('child', child);
  }
}

/// class RotationTransition extends AnimatedWidget
class RotationTransition$Mate extends RotationTransition with WidgetMate<RotationTransition$Mate> {
  /// RotationTransition RotationTransition({Key? key, required Animation<double> turns, Alignment alignment = Alignment.center, FilterQuality? filterQuality, Widget? child})
  RotationTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<double> turns} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> turns,

    /// optionalParameters: {Alignment alignment = Alignment.center} , hasDefaultValue:true, defaultValueCode:Alignment.center
    required Alignment alignment,

    /// optionalParameters: {FilterQuality? filterQuality} , hasDefaultValue:false, defaultValueCode:null
    FilterQuality? filterQuality,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          turns: turns,
          alignment: alignment,
          filterQuality: filterQuality,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RotationTransition$Mate(
        key: p.get('key').value,
        turns: p.get('turns').value,
        alignment: p.get('alignment').value,
        filterQuality: p.get('filterQuality').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('turns', turns);
    mateParams.put('alignment', alignment);
    mateParams.put('filterQuality', filterQuality);
    mateParams.put('child', child);
  }
}

/// class SizeTransition extends AnimatedWidget
class SizeTransition$Mate extends SizeTransition with WidgetMate<SizeTransition$Mate> {
  /// SizeTransition SizeTransition({Key? key, Axis axis = Axis.vertical, required Animation<double> sizeFactor, double axisAlignment = 0.0, Widget? child})
  SizeTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {Axis axis = Axis.vertical} , hasDefaultValue:true, defaultValueCode:Axis.vertical
    required Axis axis,

    /// optionalParameters: {required Animation<double> sizeFactor} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> sizeFactor,

    /// optionalParameters: {double axisAlignment = 0.0} , hasDefaultValue:true, defaultValueCode:0.0
    required double axisAlignment,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          axis: axis,
          sizeFactor: sizeFactor,
          axisAlignment: axisAlignment,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SizeTransition$Mate(
        key: p.get('key').value,
        axis: p.get('axis').value,
        sizeFactor: p.get('sizeFactor').value,
        axisAlignment: p.get('axisAlignment').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('axis', axis);
    mateParams.put('sizeFactor', sizeFactor);
    mateParams.put('axisAlignment', axisAlignment);
    mateParams.put('child', child);
  }
}

/// class FadeTransition extends SingleChildRenderObjectWidget
class FadeTransition$Mate extends FadeTransition with WidgetMate<FadeTransition$Mate> {
  /// FadeTransition FadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? child})
  FadeTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<double> opacity} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool alwaysIncludeSemantics,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => FadeTransition$Mate(
        key: p.get('key').value,
        opacity: p.get('opacity').value,
        alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('opacity', opacity);
    mateParams.put('alwaysIncludeSemantics', alwaysIncludeSemantics);
    mateParams.put('child', child);
  }
}

/// class SliverFadeTransition extends SingleChildRenderObjectWidget
class SliverFadeTransition$Mate extends SliverFadeTransition with WidgetMate<SliverFadeTransition$Mate> {
  /// SliverFadeTransition SliverFadeTransition({Key? key, required Animation<double> opacity, bool alwaysIncludeSemantics = false, Widget? sliver})
  SliverFadeTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<double> opacity} , hasDefaultValue:false, defaultValueCode:null
    required Animation<double> opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool alwaysIncludeSemantics,

    /// optionalParameters: {Widget? sliver} , hasDefaultValue:false, defaultValueCode:null
    Widget? sliver,
  }) : super(
          key: key,
          opacity: opacity,
          alwaysIncludeSemantics: alwaysIncludeSemantics,
          sliver: sliver,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SliverFadeTransition$Mate(
        key: p.get('key').value,
        opacity: p.get('opacity').value,
        alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').value,
        sliver: p.get('sliver').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('opacity', opacity);
    mateParams.put('alwaysIncludeSemantics', alwaysIncludeSemantics);
    mateParams.put('sliver', sliver);
  }
}

/// class RelativeRectTween extends Tween<RelativeRect>
class RelativeRectTween$Mate extends RelativeRectTween with Mate<RelativeRectTween$Mate> {
  /// RelativeRectTween RelativeRectTween({RelativeRect? begin, RelativeRect? end})
  RelativeRectTween$Mate({
    /// optionalParameters: {RelativeRect? begin} , hasDefaultValue:false, defaultValueCode:null
    RelativeRect? begin,

    /// optionalParameters: {RelativeRect? end} , hasDefaultValue:false, defaultValueCode:null
    RelativeRect? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RelativeRectTween$Mate(
        begin: p.get('begin').value,
        end: p.get('end').value,
      ),
    );
    mateParams.put('begin', begin);
    mateParams.put('end', end);
  }
}

/// class PositionedTransition extends AnimatedWidget
class PositionedTransition$Mate extends PositionedTransition with WidgetMate<PositionedTransition$Mate> {
  /// PositionedTransition PositionedTransition({Key? key, required Animation<RelativeRect> rect, required Widget child})
  PositionedTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<RelativeRect> rect} , hasDefaultValue:false, defaultValueCode:null
    required Animation<RelativeRect> rect,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          rect: rect,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => PositionedTransition$Mate(
        key: p.get('key').value,
        rect: p.get('rect').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('rect', rect);
    mateParams.put('child', child);
  }
}

/// class RelativePositionedTransition extends AnimatedWidget
class RelativePositionedTransition$Mate extends RelativePositionedTransition
    with WidgetMate<RelativePositionedTransition$Mate> {
  /// RelativePositionedTransition RelativePositionedTransition({Key? key, required Animation<Rect?> rect, required Size size, required Widget child})
  RelativePositionedTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<Rect?> rect} , hasDefaultValue:false, defaultValueCode:null
    required Animation<Rect?> rect,

    /// optionalParameters: {required Size size} , hasDefaultValue:false, defaultValueCode:null
    required Size size,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          rect: rect,
          size: size,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RelativePositionedTransition$Mate(
        key: p.get('key').value,
        rect: p.get('rect').value,
        size: p.get('size').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('rect', rect);
    mateParams.put('size', size);
    mateParams.put('child', child);
  }
}

/// class DecoratedBoxTransition extends AnimatedWidget
class DecoratedBoxTransition$Mate extends DecoratedBoxTransition with WidgetMate<DecoratedBoxTransition$Mate> {
  /// DecoratedBoxTransition DecoratedBoxTransition({Key? key, required Animation<Decoration> decoration, DecorationPosition position = DecorationPosition.background, required Widget child})
  DecoratedBoxTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<Decoration> decoration} , hasDefaultValue:false, defaultValueCode:null
    required Animation<Decoration> decoration,

    /// optionalParameters: {DecorationPosition position = DecorationPosition.background} , hasDefaultValue:true, defaultValueCode:DecorationPosition.background
    required DecorationPosition position,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          decoration: decoration,
          position: position,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DecoratedBoxTransition$Mate(
        key: p.get('key').value,
        decoration: p.get('decoration').value,
        position: p.get('position').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('decoration', decoration);
    mateParams.put('position', position);
    mateParams.put('child', child);
  }
}

/// class AlignTransition extends AnimatedWidget
class AlignTransition$Mate extends AlignTransition with WidgetMate<AlignTransition$Mate> {
  /// AlignTransition AlignTransition({Key? key, required Animation<AlignmentGeometry> alignment, required Widget child, double? widthFactor, double? heightFactor})
  AlignTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<AlignmentGeometry> alignment} , hasDefaultValue:false, defaultValueCode:null
    required Animation<AlignmentGeometry> alignment,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {double? widthFactor} , hasDefaultValue:false, defaultValueCode:null
    double? widthFactor,

    /// optionalParameters: {double? heightFactor} , hasDefaultValue:false, defaultValueCode:null
    double? heightFactor,
  }) : super(
          key: key,
          alignment: alignment,
          child: child,
          widthFactor: widthFactor,
          heightFactor: heightFactor,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AlignTransition$Mate(
        key: p.get('key').value,
        alignment: p.get('alignment').value,
        child: p.get('child').value,
        widthFactor: p.get('widthFactor').value,
        heightFactor: p.get('heightFactor').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('alignment', alignment);
    mateParams.put('child', child);
    mateParams.put('widthFactor', widthFactor);
    mateParams.put('heightFactor', heightFactor);
  }
}

/// class DefaultTextStyleTransition extends AnimatedWidget
class DefaultTextStyleTransition$Mate extends DefaultTextStyleTransition
    with WidgetMate<DefaultTextStyleTransition$Mate> {
  /// DefaultTextStyleTransition DefaultTextStyleTransition({Key? key, required Animation<TextStyle> style, required Widget child, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines})
  DefaultTextStyleTransition$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Animation<TextStyle> style} , hasDefaultValue:false, defaultValueCode:null
    required Animation<TextStyle> style,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {bool softWrap = true} , hasDefaultValue:true, defaultValueCode:true
    required bool softWrap,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , hasDefaultValue:true, defaultValueCode:TextOverflow.clip
    required TextOverflow overflow,

    /// optionalParameters: {int? maxLines} , hasDefaultValue:false, defaultValueCode:null
    int? maxLines,
  }) : super(
          key: key,
          style: style,
          child: child,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DefaultTextStyleTransition$Mate(
        key: p.get('key').value,
        style: p.get('style').value,
        child: p.get('child').value,
        textAlign: p.get('textAlign').value,
        softWrap: p.get('softWrap').value,
        overflow: p.get('overflow').value,
        maxLines: p.get('maxLines').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('style', style);
    mateParams.put('child', child);
    mateParams.put('textAlign', textAlign);
    mateParams.put('softWrap', softWrap);
    mateParams.put('overflow', overflow);
    mateParams.put('maxLines', maxLines);
  }
}

/// class ListenableBuilder extends AnimatedWidget
class ListenableBuilder$Mate extends ListenableBuilder with WidgetMate<ListenableBuilder$Mate> {
  /// ListenableBuilder ListenableBuilder({Key? key, required Listenable listenable, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  ListenableBuilder$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Listenable listenable} , hasDefaultValue:false, defaultValueCode:null
    required Listenable listenable,

    /// optionalParameters: {required Widget Function(BuildContext, Widget?) builder} , hasDefaultValue:false, defaultValueCode:null
    required TransitionBuilder builder,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          listenable: listenable,
          builder: builder,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ListenableBuilder$Mate(
        key: p.get('key').value,
        listenable: p.get('listenable').value,
        builder: p.get('builder').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('listenable', listenable);
    mateParams.put('builder', builder);
    mateParams.put('child', child);
  }
}

/// class AnimatedBuilder extends ListenableBuilder
class AnimatedBuilder$Mate extends AnimatedBuilder with WidgetMate<AnimatedBuilder$Mate> {
  /// AnimatedBuilder AnimatedBuilder({Key? key, required Listenable animation, required Widget Function(BuildContext, Widget?) builder, Widget? child})
  AnimatedBuilder$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Listenable animation} , hasDefaultValue:false, defaultValueCode:null
    required Listenable animation,

    /// optionalParameters: {required Widget Function(BuildContext, Widget?) builder} , hasDefaultValue:false, defaultValueCode:null
    required TransitionBuilder builder,

    /// optionalParameters: {Widget? child} , hasDefaultValue:false, defaultValueCode:null
    Widget? child,
  }) : super(
          key: key,
          animation: animation,
          builder: builder,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => AnimatedBuilder$Mate(
        key: p.get('key').value,
        animation: p.get('animation').value,
        builder: p.get('builder').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('animation', animation);
    mateParams.put('builder', builder);
    mateParams.put('child', child);
  }
}
