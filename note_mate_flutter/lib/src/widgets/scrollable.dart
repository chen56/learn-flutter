// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/scrollable.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/basic_types.dart';
import 'package:flutter/src/widgets/scroll_controller.dart';
import 'package:flutter/src/widgets/scroll_physics.dart';
import 'package:flutter/src/widgets/scrollable_helpers.dart';
import 'dart:core';
import 'package:flutter/src/gestures/recognizer.dart';
import 'package:flutter/src/widgets/scroll_configuration.dart';
import 'dart:ui';
import 'package:note/mate.dart';

/// class Scrollable extends StatefulWidget
class Scrollable$Mate extends Scrollable with WidgetMate<Scrollable$Mate> {
  /// Scrollable Scrollable({Key? key, AxisDirection axisDirection = AxisDirection.down, ScrollController? controller, ScrollPhysics? physics, required Widget Function(BuildContext, ViewportOffset) viewportBuilder, double Function(ScrollIncrementDetails)? incrementCalculator, bool excludeFromSemantics = false, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, String? restorationId, ScrollBehavior? scrollBehavior, Clip clipBehavior = Clip.hardEdge})
  Scrollable$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , hasDefaultValue:true, defaultValueCode:AxisDirection.down
    required AxisDirection axisDirection,

    /// optionalParameters: {ScrollController? controller} , hasDefaultValue:false, defaultValueCode:null
    ScrollController? controller,

    /// optionalParameters: {ScrollPhysics? physics} , hasDefaultValue:false, defaultValueCode:null
    ScrollPhysics? physics,

    /// optionalParameters: {required Widget Function(BuildContext, ViewportOffset) viewportBuilder} , hasDefaultValue:false, defaultValueCode:null
    required ViewportBuilder viewportBuilder,

    /// optionalParameters: {double Function(ScrollIncrementDetails)? incrementCalculator} , hasDefaultValue:false, defaultValueCode:null
    ScrollIncrementCalculator? incrementCalculator,

    /// optionalParameters: {bool excludeFromSemantics = false} , hasDefaultValue:true, defaultValueCode:false
    required bool excludeFromSemantics,

    /// optionalParameters: {int? semanticChildCount} , hasDefaultValue:false, defaultValueCode:null
    int? semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , hasDefaultValue:true, defaultValueCode:DragStartBehavior.start
    required DragStartBehavior dragStartBehavior,

    /// optionalParameters: {String? restorationId} , hasDefaultValue:false, defaultValueCode:null
    String? restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , hasDefaultValue:false, defaultValueCode:null
    ScrollBehavior? scrollBehavior,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , hasDefaultValue:true, defaultValueCode:Clip.hardEdge
    required Clip clipBehavior,
  }) : super(
          key: key,
          axisDirection: axisDirection,
          controller: controller,
          physics: physics,
          viewportBuilder: viewportBuilder,
          incrementCalculator: incrementCalculator,
          excludeFromSemantics: excludeFromSemantics,
          semanticChildCount: semanticChildCount,
          dragStartBehavior: dragStartBehavior,
          restorationId: restorationId,
          scrollBehavior: scrollBehavior,
          clipBehavior: clipBehavior,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Scrollable$Mate(
        key: p.get('key').value,
        axisDirection: p.get('axisDirection').value,
        controller: p.get('controller').value,
        physics: p.get('physics').value,
        viewportBuilder: p.get('viewportBuilder').value,
        incrementCalculator: p.get('incrementCalculator').value,
        excludeFromSemantics: p.get('excludeFromSemantics').value,
        semanticChildCount: p.get('semanticChildCount').value,
        dragStartBehavior: p.get('dragStartBehavior').value,
        restorationId: p.get('restorationId').value,
        scrollBehavior: p.get('scrollBehavior').value,
        clipBehavior: p.get('clipBehavior').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('axisDirection', axisDirection);
    mateParams.put('controller', controller);
    mateParams.put('physics', physics);
    mateParams.put('viewportBuilder', viewportBuilder);
    mateParams.put('incrementCalculator', incrementCalculator);
    mateParams.put('excludeFromSemantics', excludeFromSemantics);
    mateParams.put('semanticChildCount', semanticChildCount);
    mateParams.put('dragStartBehavior', dragStartBehavior);
    mateParams.put('restorationId', restorationId);
    mateParams.put('scrollBehavior', scrollBehavior);
    mateParams.put('clipBehavior', clipBehavior);
  }
}
