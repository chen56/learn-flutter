// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/widget_inspector.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'dart:core';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class WidgetInspector extends StatefulWidget
class WidgetInspector$Mate extends WidgetInspector with WidgetMate<WidgetInspector$Mate> {
  /// WidgetInspector WidgetInspector({Key? key, required Widget child, required Widget Function(BuildContext, void Function())? selectButtonBuilder})
  WidgetInspector$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,

    /// optionalParameters: {required Widget Function(BuildContext, void Function())? selectButtonBuilder} , hasDefaultValue:false, defaultValueCode:null
    required InspectorSelectButtonBuilder? selectButtonBuilder,
  }) : super(
          key: key,
          child: child,
          selectButtonBuilder: selectButtonBuilder,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => WidgetInspector$Mate(
        key: p.get('key').value,
        child: p.get('child').value,
        selectButtonBuilder: p.get('selectButtonBuilder').value,
      ),
    );
    mateParams.put('key', key);
    mateParams.put('child', child);
    mateParams.put('selectButtonBuilder', selectButtonBuilder);
  }
}

/// class DevToolsDeepLinkProperty extends DiagnosticsProperty<String>
class DevToolsDeepLinkProperty$Mate extends DevToolsDeepLinkProperty with Mate<DevToolsDeepLinkProperty$Mate> {
  /// DevToolsDeepLinkProperty DevToolsDeepLinkProperty(String description, String url)
  DevToolsDeepLinkProperty$Mate(
    /// requiredParameters: String description
    String description,

    /// requiredParameters: String url
    String url,
  ) : super(
          description,
          url,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DevToolsDeepLinkProperty$Mate(
        p.get('description').value,
        p.get('url').value,
      ),
    );
    mateParams.put('description', description);
    mateParams.put('url', url);
  }
}

/// class InspectorSerializationDelegate implements DiagnosticsSerializationDelegate
class InspectorSerializationDelegate$Mate extends InspectorSerializationDelegate
    with Mate<InspectorSerializationDelegate$Mate> {
  /// InspectorSerializationDelegate InspectorSerializationDelegate({String? groupName, bool summaryTree = false, int maxDescendentsTruncatableNode = -1, bool expandPropertyValues = true, int subtreeDepth = 1, bool includeProperties = false, required WidgetInspectorService service, Map<String, Object>? Function(DiagnosticsNode, InspectorSerializationDelegate)? addAdditionalPropertiesCallback})
  InspectorSerializationDelegate$Mate({
    /// optionalParameters: {String? groupName} , hasDefaultValue:false, defaultValueCode:null
    String? groupName,

    /// optionalParameters: {bool summaryTree = false} , hasDefaultValue:true, defaultValueCode:false
    required bool summaryTree,

    /// optionalParameters: {int maxDescendentsTruncatableNode = -1} , hasDefaultValue:true, defaultValueCode:-1
    required int maxDescendentsTruncatableNode,

    /// optionalParameters: {bool expandPropertyValues = true} , hasDefaultValue:true, defaultValueCode:true
    required bool expandPropertyValues,

    /// optionalParameters: {int subtreeDepth = 1} , hasDefaultValue:true, defaultValueCode:1
    required int subtreeDepth,

    /// optionalParameters: {bool includeProperties = false} , hasDefaultValue:true, defaultValueCode:false
    required bool includeProperties,

    /// optionalParameters: {required WidgetInspectorService service} , hasDefaultValue:false, defaultValueCode:null
    required WidgetInspectorService service,

    /// optionalParameters: {Map<String, Object>? Function(DiagnosticsNode, InspectorSerializationDelegate)? addAdditionalPropertiesCallback} , hasDefaultValue:false, defaultValueCode:null
    Map<String, Object>? Function(
      DiagnosticsNode,
      InspectorSerializationDelegate,
    )?
        addAdditionalPropertiesCallback,
  }) : super(
          groupName: groupName,
          summaryTree: summaryTree,
          maxDescendentsTruncatableNode: maxDescendentsTruncatableNode,
          expandPropertyValues: expandPropertyValues,
          subtreeDepth: subtreeDepth,
          includeProperties: includeProperties,
          service: service,
          addAdditionalPropertiesCallback: addAdditionalPropertiesCallback,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => InspectorSerializationDelegate$Mate(
        groupName: p.get('groupName').value,
        summaryTree: p.get('summaryTree').value,
        maxDescendentsTruncatableNode: p.get('maxDescendentsTruncatableNode').value,
        expandPropertyValues: p.get('expandPropertyValues').value,
        subtreeDepth: p.get('subtreeDepth').value,
        includeProperties: p.get('includeProperties').value,
        service: p.get('service').value,
        addAdditionalPropertiesCallback: p.get('addAdditionalPropertiesCallback').value,
      ),
    );
    mateParams.put('groupName', groupName);
    mateParams.put('summaryTree', summaryTree);
    mateParams.put('maxDescendentsTruncatableNode', maxDescendentsTruncatableNode);
    mateParams.put('expandPropertyValues', expandPropertyValues);
    mateParams.put('subtreeDepth', subtreeDepth);
    mateParams.put('includeProperties', includeProperties);
    mateParams.put('service', service);
    mateParams.put('addAdditionalPropertiesCallback', addAdditionalPropertiesCallback);
  }
}
