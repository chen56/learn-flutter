// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/text.dart';
import 'package:flutter/src/foundation/key.dart';
import 'package:flutter/src/painting/text_style.dart';
import 'dart:ui';
import 'dart:core';
import 'package:flutter/src/painting/text_painter.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:note/mate.dart';
import 'package:flutter/src/painting/strut_style.dart';
import 'package:flutter/src/painting/inline_span.dart';

/// class DefaultTextStyle extends InheritedTheme
class DefaultTextStyle$Mate extends DefaultTextStyle with WidgetMate<DefaultTextStyle$Mate> {
  /// DefaultTextStyle DefaultTextStyle({Key? key, required TextStyle style, TextAlign? textAlign, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, int? maxLines, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, required Widget child})
  DefaultTextStyle$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required TextStyle style} , hasDefaultValue:false, defaultValueCode:null
    required TextStyle style,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {bool softWrap = true} , hasDefaultValue:true, defaultValueCode:true
    required bool softWrap,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , hasDefaultValue:true, defaultValueCode:TextOverflow.clip
    required TextOverflow overflow,

    /// optionalParameters: {int? maxLines} , hasDefaultValue:false, defaultValueCode:null
    int? maxLines,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , hasDefaultValue:true, defaultValueCode:TextWidthBasis.parent
    required TextWidthBasis textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          style: style,
          textAlign: textAlign,
          softWrap: softWrap,
          overflow: overflow,
          maxLines: maxLines,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DefaultTextStyle$Mate(
        key: p.get('key').value,
        style: p.get('style').value,
        textAlign: p.get('textAlign').value,
        softWrap: p.get('softWrap').value,
        overflow: p.get('overflow').value,
        maxLines: p.get('maxLines').value,
        textWidthBasis: p.get('textWidthBasis').value,
        textHeightBehavior: p.get('textHeightBehavior').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('style', init: style);
    mateParams.put('textAlign', init: textAlign);
    mateParams.put('softWrap', init: softWrap);
    mateParams.put('overflow', init: overflow);
    mateParams.put('maxLines', init: maxLines);
    mateParams.put('textWidthBasis', init: textWidthBasis);
    mateParams.put('textHeightBehavior', init: textHeightBehavior);
    mateParams.put('child', init: child);
  }

  /// DefaultTextStyle DefaultTextStyle.fallback({Key? key})
  DefaultTextStyle$Mate.fallback(
      {
      /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
      Key? key})
      : super.fallback(key: key) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DefaultTextStyle$Mate.fallback(key: p.get('key').value),
    );
    mateParams.put('key', init: key);
  }
}

/// class DefaultTextHeightBehavior extends InheritedTheme
class DefaultTextHeightBehavior$Mate extends DefaultTextHeightBehavior with WidgetMate<DefaultTextHeightBehavior$Mate> {
  /// DefaultTextHeightBehavior DefaultTextHeightBehavior({Key? key, required TextHeightBehavior textHeightBehavior, required Widget child})
  DefaultTextHeightBehavior$Mate({
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {required TextHeightBehavior textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    required TextHeightBehavior textHeightBehavior,

    /// optionalParameters: {required Widget child} , hasDefaultValue:false, defaultValueCode:null
    required Widget child,
  }) : super(
          key: key,
          textHeightBehavior: textHeightBehavior,
          child: child,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => DefaultTextHeightBehavior$Mate(
        key: p.get('key').value,
        textHeightBehavior: p.get('textHeightBehavior').value,
        child: p.get('child').value,
      ),
    );
    mateParams.put('key', init: key);
    mateParams.put('textHeightBehavior', init: textHeightBehavior);
    mateParams.put('child', init: child);
  }
}

/// class Text extends StatelessWidget
class Text$Mate extends Text with WidgetMate<Text$Mate> {
  /// Text Text(String data, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate(
    /// requiredParameters: String data
    String data, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , hasDefaultValue:false, defaultValueCode:null
    Locale? locale,

    /// optionalParameters: {bool? softWrap} , hasDefaultValue:false, defaultValueCode:null
    bool? softWrap,

    /// optionalParameters: {TextOverflow? overflow} , hasDefaultValue:false, defaultValueCode:null
    TextOverflow? overflow,

    /// optionalParameters: {double? textScaleFactor} , hasDefaultValue:false, defaultValueCode:null
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines} , hasDefaultValue:false, defaultValueCode:null
    int? maxLines,

    /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , hasDefaultValue:false, defaultValueCode:null
    TextWidthBasis? textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectionColor,
  }) : super(
          data,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Text$Mate(
        p.get('data').value,
        key: p.get('key').value,
        style: p.get('style').value,
        strutStyle: p.get('strutStyle').value,
        textAlign: p.get('textAlign').value,
        textDirection: p.get('textDirection').value,
        locale: p.get('locale').value,
        softWrap: p.get('softWrap').value,
        overflow: p.get('overflow').value,
        textScaleFactor: p.get('textScaleFactor').value,
        maxLines: p.get('maxLines').value,
        semanticsLabel: p.get('semanticsLabel').value,
        textWidthBasis: p.get('textWidthBasis').value,
        textHeightBehavior: p.get('textHeightBehavior').value,
        selectionColor: p.get('selectionColor').value,
      ),
    );
    mateParams.put('data', init: data);
    mateParams.put('key', init: key);
    mateParams.put('style', init: style);
    mateParams.put('strutStyle', init: strutStyle);
    mateParams.put('textAlign', init: textAlign);
    mateParams.put('textDirection', init: textDirection);
    mateParams.put('locale', init: locale);
    mateParams.put('softWrap', init: softWrap);
    mateParams.put('overflow', init: overflow);
    mateParams.put('textScaleFactor', init: textScaleFactor);
    mateParams.put('maxLines', init: maxLines);
    mateParams.put('semanticsLabel', init: semanticsLabel);
    mateParams.put('textWidthBasis', init: textWidthBasis);
    mateParams.put('textHeightBehavior', init: textHeightBehavior);
    mateParams.put('selectionColor', init: selectionColor);
  }

  /// Text Text.rich(InlineSpan textSpan, {Key? key, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, Locale? locale, bool? softWrap, TextOverflow? overflow, double? textScaleFactor, int? maxLines, String? semanticsLabel, TextWidthBasis? textWidthBasis, TextHeightBehavior? textHeightBehavior, Color? selectionColor})
  Text$Mate.rich(
    /// requiredParameters: InlineSpan textSpan
    InlineSpan textSpan, {
    /// optionalParameters: {Key? key} , hasDefaultValue:false, defaultValueCode:null
    Key? key,

    /// optionalParameters: {TextStyle? style} , hasDefaultValue:false, defaultValueCode:null
    TextStyle? style,

    /// optionalParameters: {StrutStyle? strutStyle} , hasDefaultValue:false, defaultValueCode:null
    StrutStyle? strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , hasDefaultValue:false, defaultValueCode:null
    TextAlign? textAlign,

    /// optionalParameters: {TextDirection? textDirection} , hasDefaultValue:false, defaultValueCode:null
    TextDirection? textDirection,

    /// optionalParameters: {Locale? locale} , hasDefaultValue:false, defaultValueCode:null
    Locale? locale,

    /// optionalParameters: {bool? softWrap} , hasDefaultValue:false, defaultValueCode:null
    bool? softWrap,

    /// optionalParameters: {TextOverflow? overflow} , hasDefaultValue:false, defaultValueCode:null
    TextOverflow? overflow,

    /// optionalParameters: {double? textScaleFactor} , hasDefaultValue:false, defaultValueCode:null
    double? textScaleFactor,

    /// optionalParameters: {int? maxLines} , hasDefaultValue:false, defaultValueCode:null
    int? maxLines,

    /// optionalParameters: {String? semanticsLabel} , hasDefaultValue:false, defaultValueCode:null
    String? semanticsLabel,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , hasDefaultValue:false, defaultValueCode:null
    TextWidthBasis? textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , hasDefaultValue:false, defaultValueCode:null
    TextHeightBehavior? textHeightBehavior,

    /// optionalParameters: {Color? selectionColor} , hasDefaultValue:false, defaultValueCode:null
    Color? selectionColor,
  }) : super.rich(
          textSpan,
          key: key,
          style: style,
          strutStyle: strutStyle,
          textAlign: textAlign,
          textDirection: textDirection,
          locale: locale,
          softWrap: softWrap,
          overflow: overflow,
          textScaleFactor: textScaleFactor,
          maxLines: maxLines,
          semanticsLabel: semanticsLabel,
          textWidthBasis: textWidthBasis,
          textHeightBehavior: textHeightBehavior,
          selectionColor: selectionColor,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Text$Mate.rich(
        p.get('textSpan').value,
        key: p.get('key').value,
        style: p.get('style').value,
        strutStyle: p.get('strutStyle').value,
        textAlign: p.get('textAlign').value,
        textDirection: p.get('textDirection').value,
        locale: p.get('locale').value,
        softWrap: p.get('softWrap').value,
        overflow: p.get('overflow').value,
        textScaleFactor: p.get('textScaleFactor').value,
        maxLines: p.get('maxLines').value,
        semanticsLabel: p.get('semanticsLabel').value,
        textWidthBasis: p.get('textWidthBasis').value,
        textHeightBehavior: p.get('textHeightBehavior').value,
        selectionColor: p.get('selectionColor').value,
      ),
    );
    mateParams.put('textSpan', init: textSpan);
    mateParams.put('key', init: key);
    mateParams.put('style', init: style);
    mateParams.put('strutStyle', init: strutStyle);
    mateParams.put('textAlign', init: textAlign);
    mateParams.put('textDirection', init: textDirection);
    mateParams.put('locale', init: locale);
    mateParams.put('softWrap', init: softWrap);
    mateParams.put('overflow', init: overflow);
    mateParams.put('textScaleFactor', init: textScaleFactor);
    mateParams.put('maxLines', init: maxLines);
    mateParams.put('semanticsLabel', init: semanticsLabel);
    mateParams.put('textWidthBasis', init: textWidthBasis);
    mateParams.put('textHeightBehavior', init: textHeightBehavior);
    mateParams.put('selectionColor', init: selectionColor);
  }
}
