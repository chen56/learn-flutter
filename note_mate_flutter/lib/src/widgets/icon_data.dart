// /// Generated by gen_maters.dart, please don't edit!

import 'package:flutter/src/widgets/icon_data.dart';
import 'dart:core';
import 'package:note/mate.dart';
import 'package:flutter/src/foundation/diagnostics.dart';

/// class IconData
class IconData$Mate extends IconData with Mate<IconData$Mate> {
  /// IconData IconData(int codePoint, {String? fontFamily, String? fontPackage, bool matchTextDirection = false})
  IconData$Mate(
    /// requiredParameters: int codePoint
    int codePoint, {
    /// optionalParameters: {String? fontFamily} , hasDefaultValue:false, defaultValueCode:null
    String? fontFamily,

    /// optionalParameters: {String? fontPackage} , hasDefaultValue:false, defaultValueCode:null
    String? fontPackage,

    /// optionalParameters: {bool matchTextDirection = false} , hasDefaultValue:true, defaultValueCode:false
    required bool matchTextDirection,
  }) : super(
          codePoint,
          fontFamily: fontFamily,
          fontPackage: fontPackage,
          matchTextDirection: matchTextDirection,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => IconData$Mate(
        p.get('codePoint').value,
        fontFamily: p.get('fontFamily').value,
        fontPackage: p.get('fontPackage').value,
        matchTextDirection: p.get('matchTextDirection').value,
      ),
    );
    mateParams.put('codePoint', init: codePoint);
    mateParams.put('fontFamily', init: fontFamily);
    mateParams.put('fontPackage', init: fontPackage);
    mateParams.put('matchTextDirection', init: matchTextDirection);
  }
}

/// class IconDataProperty extends DiagnosticsProperty<IconData>
class IconDataProperty$Mate extends IconDataProperty with Mate<IconDataProperty$Mate> {
  /// IconDataProperty IconDataProperty(String name, IconData? value, {String? ifNull, bool showName = true, DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine, DiagnosticLevel level = DiagnosticLevel.info})
  IconDataProperty$Mate(
    /// requiredParameters: String name
    String name,

    /// requiredParameters: IconData? value
    IconData? value, {
    /// optionalParameters: {String? ifNull} , hasDefaultValue:false, defaultValueCode:null
    String? ifNull,

    /// optionalParameters: {bool showName = true} , hasDefaultValue:true, defaultValueCode:true
    required bool showName,

    /// optionalParameters: {DiagnosticsTreeStyle style = DiagnosticsTreeStyle.singleLine} , hasDefaultValue:true, defaultValueCode:DiagnosticsTreeStyle.singleLine
    required DiagnosticsTreeStyle style,

    /// optionalParameters: {DiagnosticLevel level = DiagnosticLevel.info} , hasDefaultValue:true, defaultValueCode:DiagnosticLevel.info
    required DiagnosticLevel level,
  }) : super(
          name,
          value,
          ifNull: ifNull,
          showName: showName,
          style: style,
          level: level,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => IconDataProperty$Mate(
        p.get('name').value,
        p.get('value').value,
        ifNull: p.get('ifNull').value,
        showName: p.get('showName').value,
        style: p.get('style').value,
        level: p.get('level').value,
      ),
    );
    mateParams.put('name', init: name);
    mateParams.put('value', init: value);
    mateParams.put('ifNull', init: ifNull);
    mateParams.put('showName', init: showName);
    mateParams.put('style', init: style);
    mateParams.put('level', init: level);
  }
}
