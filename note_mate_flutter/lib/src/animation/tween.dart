// /// Generated by gen_maters.dart, please don't edit!

import 'dart:core';
import 'package:flutter/src/animation/tween.dart';
import 'package:note/mate.dart';
import 'dart:ui';
import 'package:flutter/src/animation/curves.dart';

/// class Tween<T extends Object?> extends Animatable<T>
class Tween$Mate<T extends Object?> extends Tween<T> with Mate<Tween$Mate> {
  /// Tween<T> Tween({T? begin, T? end})
  Tween$Mate({
    /// optionalParameters: {T? begin} , hasDefaultValue:false, defaultValueCode:null
    T? begin,

    /// optionalParameters: {T? end} , hasDefaultValue:false, defaultValueCode:null
    T? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => Tween$Mate(
        begin: p.get('begin').value,
        end: p.get('end').value,
      ),
    );
    mateParams.put('begin', begin);
    mateParams.put('end', end);
  }
}

/// class ReverseTween<T extends Object?> extends Tween<T>
class ReverseTween$Mate<T extends Object?> extends ReverseTween<T> with Mate<ReverseTween$Mate> {
  /// ReverseTween<T> ReverseTween(Tween<T> parent)
  ReverseTween$Mate(

      /// requiredParameters: Tween<T> parent
      Tween<T> parent)
      : super(parent) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ReverseTween$Mate(p.get('parent').value),
    );
    mateParams.put('parent', parent);
  }
}

/// class ColorTween extends Tween<Color?>
class ColorTween$Mate extends ColorTween with Mate<ColorTween$Mate> {
  /// ColorTween ColorTween({Color? begin, Color? end})
  ColorTween$Mate({
    /// optionalParameters: {Color? begin} , hasDefaultValue:false, defaultValueCode:null
    Color? begin,

    /// optionalParameters: {Color? end} , hasDefaultValue:false, defaultValueCode:null
    Color? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ColorTween$Mate(
        begin: p.get('begin').value,
        end: p.get('end').value,
      ),
    );
    mateParams.put('begin', begin);
    mateParams.put('end', end);
  }
}

/// class SizeTween extends Tween<Size?>
class SizeTween$Mate extends SizeTween with Mate<SizeTween$Mate> {
  /// SizeTween SizeTween({Size? begin, Size? end})
  SizeTween$Mate({
    /// optionalParameters: {Size? begin} , hasDefaultValue:false, defaultValueCode:null
    Size? begin,

    /// optionalParameters: {Size? end} , hasDefaultValue:false, defaultValueCode:null
    Size? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => SizeTween$Mate(
        begin: p.get('begin').value,
        end: p.get('end').value,
      ),
    );
    mateParams.put('begin', begin);
    mateParams.put('end', end);
  }
}

/// class RectTween extends Tween<Rect?>
class RectTween$Mate extends RectTween with Mate<RectTween$Mate> {
  /// RectTween RectTween({Rect? begin, Rect? end})
  RectTween$Mate({
    /// optionalParameters: {Rect? begin} , hasDefaultValue:false, defaultValueCode:null
    Rect? begin,

    /// optionalParameters: {Rect? end} , hasDefaultValue:false, defaultValueCode:null
    Rect? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => RectTween$Mate(
        begin: p.get('begin').value,
        end: p.get('end').value,
      ),
    );
    mateParams.put('begin', begin);
    mateParams.put('end', end);
  }
}

/// class IntTween extends Tween<int>
class IntTween$Mate extends IntTween with Mate<IntTween$Mate> {
  /// IntTween IntTween({int? begin, int? end})
  IntTween$Mate({
    /// optionalParameters: {int? begin} , hasDefaultValue:false, defaultValueCode:null
    int? begin,

    /// optionalParameters: {int? end} , hasDefaultValue:false, defaultValueCode:null
    int? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => IntTween$Mate(
        begin: p.get('begin').value,
        end: p.get('end').value,
      ),
    );
    mateParams.put('begin', begin);
    mateParams.put('end', end);
  }
}

/// class StepTween extends Tween<int>
class StepTween$Mate extends StepTween with Mate<StepTween$Mate> {
  /// StepTween StepTween({int? begin, int? end})
  StepTween$Mate({
    /// optionalParameters: {int? begin} , hasDefaultValue:false, defaultValueCode:null
    int? begin,

    /// optionalParameters: {int? end} , hasDefaultValue:false, defaultValueCode:null
    int? end,
  }) : super(
          begin: begin,
          end: end,
        ) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => StepTween$Mate(
        begin: p.get('begin').value,
        end: p.get('end').value,
      ),
    );
    mateParams.put('begin', begin);
    mateParams.put('end', end);
  }
}

/// class ConstantTween<T> extends Tween<T>
class ConstantTween$Mate<T> extends ConstantTween<T> with Mate<ConstantTween$Mate> {
  /// ConstantTween<T> ConstantTween(T value)
  ConstantTween$Mate(

      /// requiredParameters: T value
      T value)
      : super(value) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => ConstantTween$Mate(p.get('value').value),
    );
    mateParams.put('value', value);
  }
}

/// class CurveTween extends Animatable<double>
class CurveTween$Mate extends CurveTween with Mate<CurveTween$Mate> {
  /// CurveTween CurveTween({required Curve curve})
  CurveTween$Mate(
      {
      /// optionalParameters: {required Curve curve} , hasDefaultValue:false, defaultValueCode:null
      required Curve curve})
      : super(curve: curve) {
    mateParams = ObjectParam(
      init: this,
      builder: (p) => CurveTween$Mate(curve: p.get('curve').value),
    );
    mateParams.put('curve', curve);
  }
}
