// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/cupertino/tab_view.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/navigator.dart' as _i5;

/// class CupertinoTabView extends StatefulWidget
class CupertinoTabView$Mate extends _i1.CupertinoTabView with _i2.Mate {
  /// CupertinoTabView CupertinoTabView({Key? key, Widget Function(BuildContext)? builder, GlobalKey<NavigatorState>? navigatorKey, String? defaultTitle, Map<String, Widget Function(BuildContext)>? routes, Route<dynamic>? Function(RouteSettings)? onGenerateRoute, Route<dynamic>? Function(RouteSettings)? onUnknownRoute, List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[], String? restorationScopeId})
  CupertinoTabView$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget Function(BuildContext)? builder} , default:none
    super.builder,

    /// optionalParameters: {GlobalKey<NavigatorState>? navigatorKey} , default:none
    super.navigatorKey,

    /// optionalParameters: {String? defaultTitle} , default:none
    super.defaultTitle,

    /// optionalParameters: {Map<String, Widget Function(BuildContext)>? routes} , default:none
    super.routes,

    /// optionalParameters: {Route<dynamic>? Function(RouteSettings)? onGenerateRoute} , default:none
    super.onGenerateRoute,

    /// optionalParameters: {Route<dynamic>? Function(RouteSettings)? onUnknownRoute} , default:none
    super.onUnknownRoute,

    /// optionalParameters: {List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[]} , default:unprocessed=ListLiteralImpl
    super.navigatorObservers,

    /// optionalParameters: {String? restorationScopeId} , default:none
    super.restorationScopeId,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'builder': _i2.BuilderArg<_i4.WidgetBuilder?>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
          'navigatorKey': _i2.BuilderArg<_i4.GlobalKey<_i5.NavigatorState>?>(
            name: 'navigatorKey',
            init: navigatorKey,
            isNamed: true,
          ),
          'defaultTitle': _i2.BuilderArg<String?>(
            name: 'defaultTitle',
            init: defaultTitle,
            isNamed: true,
          ),
          'routes': _i2.BuilderArg<Map<String, _i4.WidgetBuilder>?>(
            name: 'routes',
            init: routes,
            isNamed: true,
          ),
          'onGenerateRoute': _i2.BuilderArg<_i5.RouteFactory?>(
            name: 'onGenerateRoute',
            init: onGenerateRoute,
            isNamed: true,
          ),
          'onUnknownRoute': _i2.BuilderArg<_i5.RouteFactory?>(
            name: 'onUnknownRoute',
            init: onUnknownRoute,
            isNamed: true,
          ),
          'navigatorObservers': _i2.BuilderArg<List<_i5.NavigatorObserver>>(
            name: 'navigatorObservers',
            init: navigatorObservers,
            isNamed: true,
          ),
          'restorationScopeId': _i2.BuilderArg<String?>(
            name: 'restorationScopeId',
            init: restorationScopeId,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CupertinoTabView';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoTabView$Mate(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
          navigatorKey: p.get('navigatorKey').build(),
          defaultTitle: p.get('defaultTitle').build(),
          routes: p.get('routes').build(),
          onGenerateRoute: p.get('onGenerateRoute').build(),
          onUnknownRoute: p.get('onUnknownRoute').build(),
          navigatorObservers: p.get('navigatorObservers').build(),
          restorationScopeId: p.get('restorationScopeId').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
