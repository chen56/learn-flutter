// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/cupertino/text_field.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/editable_text.dart' as _i4;
import 'package:flutter/src/widgets/focus_manager.dart' as _i5;
import 'package:flutter/src/widgets/undo_history.dart' as _i6;
import 'package:flutter/src/painting/box_decoration.dart' as _i7;
import 'package:flutter/src/painting/edge_insets.dart' as _i8;
import 'package:flutter/src/painting/text_style.dart' as _i9;
import 'package:flutter/src/widgets/framework.dart' as _i10;
import 'package:flutter/cupertino.dart' as _i11;
import 'package:flutter/src/services/text_input.dart' as _i12;
import 'package:flutter/src/painting/strut_style.dart' as _i13;
import 'dart:ui' as _i14;
import 'package:flutter/src/painting/alignment.dart' as _i15;
import 'package:flutter/src/services/text_formatter.dart' as _i16;
import 'package:flutter/src/foundation/basic_types.dart' as _i17;
import 'package:flutter/src/widgets/tap_region.dart' as _i18;
import 'package:flutter/src/gestures/recognizer.dart' as _i19;
import 'package:flutter/gestures.dart' as _i20;
import 'package:flutter/src/widgets/text_selection.dart' as _i21;
import 'package:flutter/src/gestures/tap.dart' as _i22;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i23;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i24;
import 'package:flutter/src/widgets/spell_check.dart' as _i25;
import 'package:flutter/src/widgets/magnifier.dart' as _i26;

/// class CupertinoTextField extends StatefulWidget
class CupertinoTextField$Mate extends _i1.CupertinoTextField with _i2.Mate {
  /// CupertinoTextField CupertinoTextField({Key? key, TextEditingController? controller, FocusNode? focusNode, UndoHistoryController? undoController, BoxDecoration? decoration = _kDefaultRoundedBorderDecoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText), Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), bool cursorOpacityAnimates = true, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, void Function()? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})
  CupertinoTextField$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {TextEditingController? controller} , default:none
    super.controller,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {UndoHistoryController? undoController} , default:none
    super.undoController,

    /// optionalParameters: {BoxDecoration? decoration = _kDefaultRoundedBorderDecoration} , default:unprocessed=SimpleIdentifierImpl
    super.decoration,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(7.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.padding,

    /// optionalParameters: {String? placeholder} , default:none
    super.placeholder,

    /// optionalParameters: {TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText)} , default:unprocessed=InstanceCreationExpressionImpl
    super.placeholderStyle,

    /// optionalParameters: {Widget? prefix} , default:none
    super.prefix,

    /// optionalParameters: {OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always} , default:processed=PrefixedIdentifierImpl
    super.prefixMode,

    /// optionalParameters: {Widget? suffix} , default:none
    super.suffix,

    /// optionalParameters: {OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always} , default:processed=PrefixedIdentifierImpl
    super.suffixMode,

    /// optionalParameters: {OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never} , default:processed=PrefixedIdentifierImpl
    super.clearButtonMode,

    /// optionalParameters: {TextInputType? keyboardType} , default:none
    super.keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , default:none
    super.textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , default:processed=PrefixedIdentifierImpl
    super.textCapitalization,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , default:processed=PrefixedIdentifierImpl
    super.textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , default:none
    super.textAlignVertical,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {bool readOnly = false} , default:processed=BooleanLiteralImpl
    super.readOnly,

    /// optionalParameters: {bool? showCursor} , default:none
    super.showCursor,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {String obscuringCharacter = '•'} , default:processed=SimpleStringLiteralImpl
    super.obscuringCharacter,

    /// optionalParameters: {bool obscureText = false} , default:processed=BooleanLiteralImpl
    super.obscureText,

    /// optionalParameters: {bool autocorrect = true} , default:processed=BooleanLiteralImpl
    super.autocorrect,

    /// optionalParameters: {SmartDashesType? smartDashesType} , default:none
    super.smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , default:none
    super.smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , default:processed=BooleanLiteralImpl
    super.enableSuggestions,

    /// optionalParameters: {int? maxLines = 1} , default:processed=IntegerLiteralImpl
    super.maxLines,

    /// optionalParameters: {int? minLines} , default:none
    super.minLines,

    /// optionalParameters: {bool expands = false} , default:processed=BooleanLiteralImpl
    super.expands,

    /// optionalParameters: {int? maxLength} , default:none
    super.maxLength,

    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , default:none
    super.maxLengthEnforcement,

    /// optionalParameters: {void Function(String)? onChanged} , default:none
    super.onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , default:none
    super.onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , default:none
    super.onSubmitted,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , default:none
    super.onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , default:none
    super.inputFormatters,

    /// optionalParameters: {bool? enabled} , default:none
    super.enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    super.cursorWidth,

    /// optionalParameters: {double? cursorHeight} , default:none
    super.cursorHeight,

    /// optionalParameters: {Radius cursorRadius = const Radius.circular(2.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.cursorRadius,

    /// optionalParameters: {bool cursorOpacityAnimates = true} , default:processed=BooleanLiteralImpl
    super.cursorOpacityAnimates,

    /// optionalParameters: {Color? cursorColor} , default:none
    super.cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionWidthStyle,

    /// optionalParameters: {Brightness? keyboardAppearance} , default:none
    super.keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.scrollPadding,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , default:none
    super.enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    super.selectionControls,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {ScrollController? scrollController} , default:none
    super.scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    super.scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , default:unprocessed=ListLiteralImpl
    super.autofillHints,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , default:none
    super.contentInsertionConfiguration,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {String? restorationId} , default:none
    super.restorationId,

    /// optionalParameters: {bool scribbleEnabled = true} , default:processed=BooleanLiteralImpl
    super.scribbleEnabled,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , default:processed=BooleanLiteralImpl
    super.enableIMEPersonalizedLearning,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , default:unprocessed=SimpleIdentifierImpl
    super.contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , default:none
    super.spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , default:none
    super.magnifierConfiguration,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i4.TextEditingController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i5.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'undoController': _i2.BuilderArg<_i6.UndoHistoryController?>(
            name: 'undoController',
            init: undoController,
            isNamed: true,
          ),
          'decoration': _i2.BuilderArg<_i7.BoxDecoration?>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i8.EdgeInsetsGeometry>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'placeholder': _i2.BuilderArg<String?>(
            name: 'placeholder',
            init: placeholder,
            isNamed: true,
          ),
          'placeholderStyle': _i2.BuilderArg<_i9.TextStyle?>(
            name: 'placeholderStyle',
            init: placeholderStyle,
            isNamed: true,
          ),
          'prefix': _i2.BuilderArg<_i10.Widget?>(
            name: 'prefix',
            init: prefix,
            isNamed: true,
          ),
          'prefixMode': _i2.BuilderArg<_i1.OverlayVisibilityMode>(
            name: 'prefixMode',
            init: prefixMode,
            isNamed: true,
            defaultValue: _i11.OverlayVisibilityMode.always,
          ),
          'suffix': _i2.BuilderArg<_i10.Widget?>(
            name: 'suffix',
            init: suffix,
            isNamed: true,
          ),
          'suffixMode': _i2.BuilderArg<_i1.OverlayVisibilityMode>(
            name: 'suffixMode',
            init: suffixMode,
            isNamed: true,
            defaultValue: _i11.OverlayVisibilityMode.always,
          ),
          'clearButtonMode': _i2.BuilderArg<_i1.OverlayVisibilityMode>(
            name: 'clearButtonMode',
            init: clearButtonMode,
            isNamed: true,
            defaultValue: _i11.OverlayVisibilityMode.never,
          ),
          'keyboardType': _i2.BuilderArg<_i12.TextInputType?>(
            name: 'keyboardType',
            init: keyboardType,
            isNamed: true,
          ),
          'textInputAction': _i2.BuilderArg<_i12.TextInputAction?>(
            name: 'textInputAction',
            init: textInputAction,
            isNamed: true,
          ),
          'textCapitalization': _i2.BuilderArg<_i12.TextCapitalization>(
            name: 'textCapitalization',
            init: textCapitalization,
            isNamed: true,
            defaultValue: _i11.TextCapitalization.none,
          ),
          'style': _i2.BuilderArg<_i9.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'strutStyle': _i2.BuilderArg<_i13.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i14.TextAlign>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
            defaultValue: _i14.TextAlign.start,
          ),
          'textAlignVertical': _i2.BuilderArg<_i15.TextAlignVertical?>(
            name: 'textAlignVertical',
            init: textAlignVertical,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i14.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'readOnly': _i2.BuilderArg<bool>(
            name: 'readOnly',
            init: readOnly,
            isNamed: true,
            defaultValue: false,
          ),
          'showCursor': _i2.BuilderArg<bool?>(
            name: 'showCursor',
            init: showCursor,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'obscuringCharacter': _i2.BuilderArg<String>(
            name: 'obscuringCharacter',
            init: obscuringCharacter,
            isNamed: true,
            defaultValue: '•',
          ),
          'obscureText': _i2.BuilderArg<bool>(
            name: 'obscureText',
            init: obscureText,
            isNamed: true,
            defaultValue: false,
          ),
          'autocorrect': _i2.BuilderArg<bool>(
            name: 'autocorrect',
            init: autocorrect,
            isNamed: true,
            defaultValue: true,
          ),
          'smartDashesType': _i2.BuilderArg<_i12.SmartDashesType?>(
            name: 'smartDashesType',
            init: smartDashesType,
            isNamed: true,
          ),
          'smartQuotesType': _i2.BuilderArg<_i12.SmartQuotesType?>(
            name: 'smartQuotesType',
            init: smartQuotesType,
            isNamed: true,
          ),
          'enableSuggestions': _i2.BuilderArg<bool>(
            name: 'enableSuggestions',
            init: enableSuggestions,
            isNamed: true,
            defaultValue: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
            defaultValue: 1,
          ),
          'minLines': _i2.BuilderArg<int?>(
            name: 'minLines',
            init: minLines,
            isNamed: true,
          ),
          'expands': _i2.BuilderArg<bool>(
            name: 'expands',
            init: expands,
            isNamed: true,
            defaultValue: false,
          ),
          'maxLength': _i2.BuilderArg<int?>(
            name: 'maxLength',
            init: maxLength,
            isNamed: true,
          ),
          'maxLengthEnforcement': _i2.BuilderArg<_i16.MaxLengthEnforcement?>(
            name: 'maxLengthEnforcement',
            init: maxLengthEnforcement,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i17.ValueChanged<String>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'onEditingComplete': _i2.BuilderArg<_i14.VoidCallback?>(
            name: 'onEditingComplete',
            init: onEditingComplete,
            isNamed: true,
          ),
          'onSubmitted': _i2.BuilderArg<_i17.ValueChanged<String>?>(
            name: 'onSubmitted',
            init: onSubmitted,
            isNamed: true,
          ),
          'onTapOutside': _i2.BuilderArg<_i18.TapRegionCallback?>(
            name: 'onTapOutside',
            init: onTapOutside,
            isNamed: true,
          ),
          'inputFormatters': _i2.BuilderArg<List<_i16.TextInputFormatter>?>(
            name: 'inputFormatters',
            init: inputFormatters,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool?>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
          ),
          'cursorWidth': _i2.BuilderArg<double>(
            name: 'cursorWidth',
            init: cursorWidth,
            isNamed: true,
            defaultValue: 2.0,
          ),
          'cursorHeight': _i2.BuilderArg<double?>(
            name: 'cursorHeight',
            init: cursorHeight,
            isNamed: true,
          ),
          'cursorRadius': _i2.BuilderArg<_i14.Radius>(
            name: 'cursorRadius',
            init: cursorRadius,
            isNamed: true,
          ),
          'cursorOpacityAnimates': _i2.BuilderArg<bool>(
            name: 'cursorOpacityAnimates',
            init: cursorOpacityAnimates,
            isNamed: true,
            defaultValue: true,
          ),
          'cursorColor': _i2.BuilderArg<_i14.Color?>(
            name: 'cursorColor',
            init: cursorColor,
            isNamed: true,
          ),
          'selectionHeightStyle': _i2.BuilderArg<_i14.BoxHeightStyle>(
            name: 'selectionHeightStyle',
            init: selectionHeightStyle,
            isNamed: true,
          ),
          'selectionWidthStyle': _i2.BuilderArg<_i14.BoxWidthStyle>(
            name: 'selectionWidthStyle',
            init: selectionWidthStyle,
            isNamed: true,
          ),
          'keyboardAppearance': _i2.BuilderArg<_i14.Brightness?>(
            name: 'keyboardAppearance',
            init: keyboardAppearance,
            isNamed: true,
          ),
          'scrollPadding': _i2.BuilderArg<_i8.EdgeInsets>(
            name: 'scrollPadding',
            init: scrollPadding,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i19.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i20.DragStartBehavior.start,
          ),
          'enableInteractiveSelection': _i2.BuilderArg<bool?>(
            name: 'enableInteractiveSelection',
            init: enableInteractiveSelection,
            isNamed: true,
          ),
          'selectionControls': _i2.BuilderArg<_i21.TextSelectionControls?>(
            name: 'selectionControls',
            init: selectionControls,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i22.GestureTapCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'scrollController': _i2.BuilderArg<_i23.ScrollController?>(
            name: 'scrollController',
            init: scrollController,
            isNamed: true,
          ),
          'scrollPhysics': _i2.BuilderArg<_i24.ScrollPhysics?>(
            name: 'scrollPhysics',
            init: scrollPhysics,
            isNamed: true,
          ),
          'autofillHints': _i2.BuilderArg<Iterable<String>?>(
            name: 'autofillHints',
            init: autofillHints,
            isNamed: true,
          ),
          'contentInsertionConfiguration':
              _i2.BuilderArg<_i4.ContentInsertionConfiguration?>(
            name: 'contentInsertionConfiguration',
            init: contentInsertionConfiguration,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i14.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i14.Clip.hardEdge,
          ),
          'restorationId': _i2.BuilderArg<String?>(
            name: 'restorationId',
            init: restorationId,
            isNamed: true,
          ),
          'scribbleEnabled': _i2.BuilderArg<bool>(
            name: 'scribbleEnabled',
            init: scribbleEnabled,
            isNamed: true,
            defaultValue: true,
          ),
          'enableIMEPersonalizedLearning': _i2.BuilderArg<bool>(
            name: 'enableIMEPersonalizedLearning',
            init: enableIMEPersonalizedLearning,
            isNamed: true,
            defaultValue: true,
          ),
          'contextMenuBuilder':
              _i2.BuilderArg<_i4.EditableTextContextMenuBuilder?>(
            name: 'contextMenuBuilder',
            init: contextMenuBuilder,
            isNamed: true,
          ),
          'spellCheckConfiguration':
              _i2.BuilderArg<_i25.SpellCheckConfiguration?>(
            name: 'spellCheckConfiguration',
            init: spellCheckConfiguration,
            isNamed: true,
          ),
          'magnifierConfiguration':
              _i2.BuilderArg<_i26.TextMagnifierConfiguration?>(
            name: 'magnifierConfiguration',
            init: magnifierConfiguration,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CupertinoTextField';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoTextField$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          focusNode: p.get('focusNode').build(),
          undoController: p.get('undoController').build(),
          decoration: p.get('decoration').build(),
          padding: p.get('padding').build(),
          placeholder: p.get('placeholder').build(),
          placeholderStyle: p.get('placeholderStyle').build(),
          prefix: p.get('prefix').build(),
          prefixMode: p.get('prefixMode').build(),
          suffix: p.get('suffix').build(),
          suffixMode: p.get('suffixMode').build(),
          clearButtonMode: p.get('clearButtonMode').build(),
          keyboardType: p.get('keyboardType').build(),
          textInputAction: p.get('textInputAction').build(),
          textCapitalization: p.get('textCapitalization').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          textDirection: p.get('textDirection').build(),
          readOnly: p.get('readOnly').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          maxLength: p.get('maxLength').build(),
          maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
          onChanged: p.get('onChanged').build(),
          onEditingComplete: p.get('onEditingComplete').build(),
          onSubmitted: p.get('onSubmitted').build(),
          onTapOutside: p.get('onTapOutside').build(),
          inputFormatters: p.get('inputFormatters').build(),
          enabled: p.get('enabled').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorOpacityAnimates: p.get('cursorOpacityAnimates').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          scrollPadding: p.get('scrollPadding').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection:
              p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollController: p.get('scrollController').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          autofillHints: p.get('autofillHints').build(),
          contentInsertionConfiguration:
              p.get('contentInsertionConfiguration').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scribbleEnabled: p.get('scribbleEnabled').build(),
          enableIMEPersonalizedLearning:
              p.get('enableIMEPersonalizedLearning').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
  }

  /// CupertinoTextField CupertinoTextField.borderless({Key? key, TextEditingController? controller, FocusNode? focusNode, UndoHistoryController? undoController, BoxDecoration? decoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = _kDefaultPlaceholderStyle, Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '•', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, void Function(String)? onChanged, void Function()? onEditingComplete, void Function(String)? onSubmitted, void Function(PointerDownEvent)? onTapOutside, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), bool cursorOpacityAnimates = true, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, void Function()? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})
  CupertinoTextField$Mate.borderless({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {TextEditingController? controller} , default:none
    super.controller,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {UndoHistoryController? undoController} , default:none
    super.undoController,

    /// optionalParameters: {BoxDecoration? decoration} , default:none
    super.decoration,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(7.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.padding,

    /// optionalParameters: {String? placeholder} , default:none
    super.placeholder,

    /// optionalParameters: {TextStyle? placeholderStyle = _kDefaultPlaceholderStyle} , default:unprocessed=SimpleIdentifierImpl
    super.placeholderStyle,

    /// optionalParameters: {Widget? prefix} , default:none
    super.prefix,

    /// optionalParameters: {OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always} , default:processed=PrefixedIdentifierImpl
    super.prefixMode,

    /// optionalParameters: {Widget? suffix} , default:none
    super.suffix,

    /// optionalParameters: {OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always} , default:processed=PrefixedIdentifierImpl
    super.suffixMode,

    /// optionalParameters: {OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never} , default:processed=PrefixedIdentifierImpl
    super.clearButtonMode,

    /// optionalParameters: {TextInputType? keyboardType} , default:none
    super.keyboardType,

    /// optionalParameters: {TextInputAction? textInputAction} , default:none
    super.textInputAction,

    /// optionalParameters: {TextCapitalization textCapitalization = TextCapitalization.none} , default:processed=PrefixedIdentifierImpl
    super.textCapitalization,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , default:processed=PrefixedIdentifierImpl
    super.textAlign,

    /// optionalParameters: {TextAlignVertical? textAlignVertical} , default:none
    super.textAlignVertical,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {bool readOnly = false} , default:processed=BooleanLiteralImpl
    super.readOnly,

    /// optionalParameters: {bool? showCursor} , default:none
    super.showCursor,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {String obscuringCharacter = '•'} , default:processed=SimpleStringLiteralImpl
    super.obscuringCharacter,

    /// optionalParameters: {bool obscureText = false} , default:processed=BooleanLiteralImpl
    super.obscureText,

    /// optionalParameters: {bool autocorrect = true} , default:processed=BooleanLiteralImpl
    super.autocorrect,

    /// optionalParameters: {SmartDashesType? smartDashesType} , default:none
    super.smartDashesType,

    /// optionalParameters: {SmartQuotesType? smartQuotesType} , default:none
    super.smartQuotesType,

    /// optionalParameters: {bool enableSuggestions = true} , default:processed=BooleanLiteralImpl
    super.enableSuggestions,

    /// optionalParameters: {int? maxLines = 1} , default:processed=IntegerLiteralImpl
    super.maxLines,

    /// optionalParameters: {int? minLines} , default:none
    super.minLines,

    /// optionalParameters: {bool expands = false} , default:processed=BooleanLiteralImpl
    super.expands,

    /// optionalParameters: {int? maxLength} , default:none
    super.maxLength,

    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , default:none
    super.maxLengthEnforcement,

    /// optionalParameters: {void Function(String)? onChanged} , default:none
    super.onChanged,

    /// optionalParameters: {void Function()? onEditingComplete} , default:none
    super.onEditingComplete,

    /// optionalParameters: {void Function(String)? onSubmitted} , default:none
    super.onSubmitted,

    /// optionalParameters: {void Function(PointerDownEvent)? onTapOutside} , default:none
    super.onTapOutside,

    /// optionalParameters: {List<TextInputFormatter>? inputFormatters} , default:none
    super.inputFormatters,

    /// optionalParameters: {bool? enabled} , default:none
    super.enabled,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    super.cursorWidth,

    /// optionalParameters: {double? cursorHeight} , default:none
    super.cursorHeight,

    /// optionalParameters: {Radius cursorRadius = const Radius.circular(2.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.cursorRadius,

    /// optionalParameters: {bool cursorOpacityAnimates = true} , default:processed=BooleanLiteralImpl
    super.cursorOpacityAnimates,

    /// optionalParameters: {Color? cursorColor} , default:none
    super.cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionWidthStyle,

    /// optionalParameters: {Brightness? keyboardAppearance} , default:none
    super.keyboardAppearance,

    /// optionalParameters: {EdgeInsets scrollPadding = const EdgeInsets.all(20.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.scrollPadding,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {bool? enableInteractiveSelection} , default:none
    super.enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    super.selectionControls,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {ScrollController? scrollController} , default:none
    super.scrollController,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    super.scrollPhysics,

    /// optionalParameters: {Iterable<String>? autofillHints = const <String>[]} , default:unprocessed=ListLiteralImpl
    super.autofillHints,

    /// optionalParameters: {ContentInsertionConfiguration? contentInsertionConfiguration} , default:none
    super.contentInsertionConfiguration,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {String? restorationId} , default:none
    super.restorationId,

    /// optionalParameters: {bool scribbleEnabled = true} , default:processed=BooleanLiteralImpl
    super.scribbleEnabled,

    /// optionalParameters: {bool enableIMEPersonalizedLearning = true} , default:processed=BooleanLiteralImpl
    super.enableIMEPersonalizedLearning,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , default:unprocessed=SimpleIdentifierImpl
    super.contextMenuBuilder,

    /// optionalParameters: {SpellCheckConfiguration? spellCheckConfiguration} , default:none
    super.spellCheckConfiguration,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , default:none
    super.magnifierConfiguration,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i4.TextEditingController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i5.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'undoController': _i2.BuilderArg<_i6.UndoHistoryController?>(
            name: 'undoController',
            init: undoController,
            isNamed: true,
          ),
          'decoration': _i2.BuilderArg<_i7.BoxDecoration?>(
            name: 'decoration',
            init: decoration,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i8.EdgeInsetsGeometry>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'placeholder': _i2.BuilderArg<String?>(
            name: 'placeholder',
            init: placeholder,
            isNamed: true,
          ),
          'placeholderStyle': _i2.BuilderArg<_i9.TextStyle?>(
            name: 'placeholderStyle',
            init: placeholderStyle,
            isNamed: true,
          ),
          'prefix': _i2.BuilderArg<_i10.Widget?>(
            name: 'prefix',
            init: prefix,
            isNamed: true,
          ),
          'prefixMode': _i2.BuilderArg<_i1.OverlayVisibilityMode>(
            name: 'prefixMode',
            init: prefixMode,
            isNamed: true,
            defaultValue: _i11.OverlayVisibilityMode.always,
          ),
          'suffix': _i2.BuilderArg<_i10.Widget?>(
            name: 'suffix',
            init: suffix,
            isNamed: true,
          ),
          'suffixMode': _i2.BuilderArg<_i1.OverlayVisibilityMode>(
            name: 'suffixMode',
            init: suffixMode,
            isNamed: true,
            defaultValue: _i11.OverlayVisibilityMode.always,
          ),
          'clearButtonMode': _i2.BuilderArg<_i1.OverlayVisibilityMode>(
            name: 'clearButtonMode',
            init: clearButtonMode,
            isNamed: true,
            defaultValue: _i11.OverlayVisibilityMode.never,
          ),
          'keyboardType': _i2.BuilderArg<_i12.TextInputType?>(
            name: 'keyboardType',
            init: keyboardType,
            isNamed: true,
          ),
          'textInputAction': _i2.BuilderArg<_i12.TextInputAction?>(
            name: 'textInputAction',
            init: textInputAction,
            isNamed: true,
          ),
          'textCapitalization': _i2.BuilderArg<_i12.TextCapitalization>(
            name: 'textCapitalization',
            init: textCapitalization,
            isNamed: true,
            defaultValue: _i11.TextCapitalization.none,
          ),
          'style': _i2.BuilderArg<_i9.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'strutStyle': _i2.BuilderArg<_i13.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i14.TextAlign>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
            defaultValue: _i14.TextAlign.start,
          ),
          'textAlignVertical': _i2.BuilderArg<_i15.TextAlignVertical?>(
            name: 'textAlignVertical',
            init: textAlignVertical,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i14.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'readOnly': _i2.BuilderArg<bool>(
            name: 'readOnly',
            init: readOnly,
            isNamed: true,
            defaultValue: false,
          ),
          'showCursor': _i2.BuilderArg<bool?>(
            name: 'showCursor',
            init: showCursor,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'obscuringCharacter': _i2.BuilderArg<String>(
            name: 'obscuringCharacter',
            init: obscuringCharacter,
            isNamed: true,
            defaultValue: '•',
          ),
          'obscureText': _i2.BuilderArg<bool>(
            name: 'obscureText',
            init: obscureText,
            isNamed: true,
            defaultValue: false,
          ),
          'autocorrect': _i2.BuilderArg<bool>(
            name: 'autocorrect',
            init: autocorrect,
            isNamed: true,
            defaultValue: true,
          ),
          'smartDashesType': _i2.BuilderArg<_i12.SmartDashesType?>(
            name: 'smartDashesType',
            init: smartDashesType,
            isNamed: true,
          ),
          'smartQuotesType': _i2.BuilderArg<_i12.SmartQuotesType?>(
            name: 'smartQuotesType',
            init: smartQuotesType,
            isNamed: true,
          ),
          'enableSuggestions': _i2.BuilderArg<bool>(
            name: 'enableSuggestions',
            init: enableSuggestions,
            isNamed: true,
            defaultValue: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
            defaultValue: 1,
          ),
          'minLines': _i2.BuilderArg<int?>(
            name: 'minLines',
            init: minLines,
            isNamed: true,
          ),
          'expands': _i2.BuilderArg<bool>(
            name: 'expands',
            init: expands,
            isNamed: true,
            defaultValue: false,
          ),
          'maxLength': _i2.BuilderArg<int?>(
            name: 'maxLength',
            init: maxLength,
            isNamed: true,
          ),
          'maxLengthEnforcement': _i2.BuilderArg<_i16.MaxLengthEnforcement?>(
            name: 'maxLengthEnforcement',
            init: maxLengthEnforcement,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i17.ValueChanged<String>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'onEditingComplete': _i2.BuilderArg<_i14.VoidCallback?>(
            name: 'onEditingComplete',
            init: onEditingComplete,
            isNamed: true,
          ),
          'onSubmitted': _i2.BuilderArg<_i17.ValueChanged<String>?>(
            name: 'onSubmitted',
            init: onSubmitted,
            isNamed: true,
          ),
          'onTapOutside': _i2.BuilderArg<_i18.TapRegionCallback?>(
            name: 'onTapOutside',
            init: onTapOutside,
            isNamed: true,
          ),
          'inputFormatters': _i2.BuilderArg<List<_i16.TextInputFormatter>?>(
            name: 'inputFormatters',
            init: inputFormatters,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool?>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
          ),
          'cursorWidth': _i2.BuilderArg<double>(
            name: 'cursorWidth',
            init: cursorWidth,
            isNamed: true,
            defaultValue: 2.0,
          ),
          'cursorHeight': _i2.BuilderArg<double?>(
            name: 'cursorHeight',
            init: cursorHeight,
            isNamed: true,
          ),
          'cursorRadius': _i2.BuilderArg<_i14.Radius>(
            name: 'cursorRadius',
            init: cursorRadius,
            isNamed: true,
          ),
          'cursorOpacityAnimates': _i2.BuilderArg<bool>(
            name: 'cursorOpacityAnimates',
            init: cursorOpacityAnimates,
            isNamed: true,
            defaultValue: true,
          ),
          'cursorColor': _i2.BuilderArg<_i14.Color?>(
            name: 'cursorColor',
            init: cursorColor,
            isNamed: true,
          ),
          'selectionHeightStyle': _i2.BuilderArg<_i14.BoxHeightStyle>(
            name: 'selectionHeightStyle',
            init: selectionHeightStyle,
            isNamed: true,
          ),
          'selectionWidthStyle': _i2.BuilderArg<_i14.BoxWidthStyle>(
            name: 'selectionWidthStyle',
            init: selectionWidthStyle,
            isNamed: true,
          ),
          'keyboardAppearance': _i2.BuilderArg<_i14.Brightness?>(
            name: 'keyboardAppearance',
            init: keyboardAppearance,
            isNamed: true,
          ),
          'scrollPadding': _i2.BuilderArg<_i8.EdgeInsets>(
            name: 'scrollPadding',
            init: scrollPadding,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i19.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i20.DragStartBehavior.start,
          ),
          'enableInteractiveSelection': _i2.BuilderArg<bool?>(
            name: 'enableInteractiveSelection',
            init: enableInteractiveSelection,
            isNamed: true,
          ),
          'selectionControls': _i2.BuilderArg<_i21.TextSelectionControls?>(
            name: 'selectionControls',
            init: selectionControls,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i22.GestureTapCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'scrollController': _i2.BuilderArg<_i23.ScrollController?>(
            name: 'scrollController',
            init: scrollController,
            isNamed: true,
          ),
          'scrollPhysics': _i2.BuilderArg<_i24.ScrollPhysics?>(
            name: 'scrollPhysics',
            init: scrollPhysics,
            isNamed: true,
          ),
          'autofillHints': _i2.BuilderArg<Iterable<String>?>(
            name: 'autofillHints',
            init: autofillHints,
            isNamed: true,
          ),
          'contentInsertionConfiguration':
              _i2.BuilderArg<_i4.ContentInsertionConfiguration?>(
            name: 'contentInsertionConfiguration',
            init: contentInsertionConfiguration,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i14.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i14.Clip.hardEdge,
          ),
          'restorationId': _i2.BuilderArg<String?>(
            name: 'restorationId',
            init: restorationId,
            isNamed: true,
          ),
          'scribbleEnabled': _i2.BuilderArg<bool>(
            name: 'scribbleEnabled',
            init: scribbleEnabled,
            isNamed: true,
            defaultValue: true,
          ),
          'enableIMEPersonalizedLearning': _i2.BuilderArg<bool>(
            name: 'enableIMEPersonalizedLearning',
            init: enableIMEPersonalizedLearning,
            isNamed: true,
            defaultValue: true,
          ),
          'contextMenuBuilder':
              _i2.BuilderArg<_i4.EditableTextContextMenuBuilder?>(
            name: 'contextMenuBuilder',
            init: contextMenuBuilder,
            isNamed: true,
          ),
          'spellCheckConfiguration':
              _i2.BuilderArg<_i25.SpellCheckConfiguration?>(
            name: 'spellCheckConfiguration',
            init: spellCheckConfiguration,
            isNamed: true,
          ),
          'magnifierConfiguration':
              _i2.BuilderArg<_i26.TextMagnifierConfiguration?>(
            name: 'magnifierConfiguration',
            init: magnifierConfiguration,
            isNamed: true,
          ),
        },
        super.borderless() {
    mateBuilderName = 'CupertinoTextField.borderless';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CupertinoTextField$Mate.borderless(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          focusNode: p.get('focusNode').build(),
          undoController: p.get('undoController').build(),
          decoration: p.get('decoration').build(),
          padding: p.get('padding').build(),
          placeholder: p.get('placeholder').build(),
          placeholderStyle: p.get('placeholderStyle').build(),
          prefix: p.get('prefix').build(),
          prefixMode: p.get('prefixMode').build(),
          suffix: p.get('suffix').build(),
          suffixMode: p.get('suffixMode').build(),
          clearButtonMode: p.get('clearButtonMode').build(),
          keyboardType: p.get('keyboardType').build(),
          textInputAction: p.get('textInputAction').build(),
          textCapitalization: p.get('textCapitalization').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textAlignVertical: p.get('textAlignVertical').build(),
          textDirection: p.get('textDirection').build(),
          readOnly: p.get('readOnly').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          autocorrect: p.get('autocorrect').build(),
          smartDashesType: p.get('smartDashesType').build(),
          smartQuotesType: p.get('smartQuotesType').build(),
          enableSuggestions: p.get('enableSuggestions').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          maxLength: p.get('maxLength').build(),
          maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
          onChanged: p.get('onChanged').build(),
          onEditingComplete: p.get('onEditingComplete').build(),
          onSubmitted: p.get('onSubmitted').build(),
          onTapOutside: p.get('onTapOutside').build(),
          inputFormatters: p.get('inputFormatters').build(),
          enabled: p.get('enabled').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorOpacityAnimates: p.get('cursorOpacityAnimates').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          keyboardAppearance: p.get('keyboardAppearance').build(),
          scrollPadding: p.get('scrollPadding').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection:
              p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollController: p.get('scrollController').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          autofillHints: p.get('autofillHints').build(),
          contentInsertionConfiguration:
              p.get('contentInsertionConfiguration').build(),
          clipBehavior: p.get('clipBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scribbleEnabled: p.get('scribbleEnabled').build(),
          enableIMEPersonalizedLearning:
              p.get('enableIMEPersonalizedLearning').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          spellCheckConfiguration: p.get('spellCheckConfiguration').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
