// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/message_codec.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;

/// class MethodCall
class MethodCall$Mate extends _i1.MethodCall with _i2.Mate {
  /// MethodCall MethodCall(String method, [dynamic arguments])
  MethodCall$Mate(
    /// requiredParameters: String method
    super.method,

    /// requiredParameters: [dynamic arguments]
    super.arguments,
  )   : mateParams = {
          'method': _i2.BuilderArg<String>(
            name: 'method',
            init: method,
            isNamed: false,
          ),
          'arguments': _i2.BuilderArg<dynamic>(
            name: 'arguments',
            init: arguments,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'MethodCall';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => MethodCall$Mate(
          p.get('method').value,
          p.get('arguments').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PlatformException implements Exception
class PlatformException$Mate extends _i1.PlatformException with _i2.Mate {
  /// PlatformException PlatformException({required String code, String? message, dynamic details, String? stacktrace})
  PlatformException$Mate({
    /// optionalParameters: {required String code} , default:none
    required super.code,

    /// optionalParameters: {String? message} , default:none
    super.message,

    /// optionalParameters: {dynamic details} , default:none
    super.details,

    /// optionalParameters: {String? stacktrace} , default:none
    super.stacktrace,
  })  : mateParams = {
          'code': _i2.BuilderArg<String>(
            name: 'code',
            init: code,
            isNamed: true,
          ),
          'message': _i2.BuilderArg<String?>(
            name: 'message',
            init: message,
            isNamed: true,
          ),
          'details': _i2.BuilderArg<dynamic>(
            name: 'details',
            init: details,
            isNamed: true,
          ),
          'stacktrace': _i2.BuilderArg<String?>(
            name: 'stacktrace',
            init: stacktrace,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PlatformException';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => PlatformException$Mate(
          code: p.get('code').build(),
          message: p.get('message').build(),
          details: p.get('details').build(),
          stacktrace: p.get('stacktrace').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class MissingPluginException implements Exception
class MissingPluginException$Mate extends _i1.MissingPluginException with _i2.Mate {
  /// MissingPluginException MissingPluginException([String? message])
  MissingPluginException$Mate(

      /// requiredParameters: [String? message]
      super.message)
      : mateParams = {
          'message': _i2.BuilderArg<String?>(
            name: 'message',
            init: message,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'MissingPluginException';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => MissingPluginException$Mate(p.get('message').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
