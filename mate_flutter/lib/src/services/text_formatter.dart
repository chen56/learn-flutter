// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/services/text_formatter.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;

/// class FilteringTextInputFormatter extends TextInputFormatter
class FilteringTextInputFormatter$Mate extends _i1.FilteringTextInputFormatter with _i2.Mate {
  /// FilteringTextInputFormatter FilteringTextInputFormatter(Pattern filterPattern, {required bool allow, String replacementString = ''})
  FilteringTextInputFormatter$Mate(
    /// requiredParameters: Pattern filterPattern
    super.filterPattern, {
    /// optionalParameters: {required bool allow} , default:none
    required super.allow,

    /// optionalParameters: {String replacementString = ''} , default:processed=SimpleStringLiteralImpl
    super.replacementString,
  })  : mateParams = {
          'filterPattern': _i2.BuilderArg<Pattern>(
            name: 'filterPattern',
            init: filterPattern,
            isNamed: false,
          ),
          'allow': _i2.BuilderArg<bool>(
            name: 'allow',
            init: allow,
            isNamed: true,
          ),
          'replacementString': _i2.BuilderArg<String>(
            name: 'replacementString',
            init: replacementString,
            isNamed: true,
            defaultValue: '',
          ),
        },
        super() {
    mateBuilderName = 'FilteringTextInputFormatter';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => FilteringTextInputFormatter$Mate(
          p.get('filterPattern').value,
          allow: p.get('allow').build(),
          replacementString: p.get('replacementString').build(),
        );
  }

  /// FilteringTextInputFormatter FilteringTextInputFormatter.allow(Pattern filterPattern, {String replacementString = ''})
  FilteringTextInputFormatter$Mate.allow(
    /// requiredParameters: Pattern filterPattern
    super.filterPattern, {
    /// optionalParameters: {String replacementString = ''} , default:processed=SimpleStringLiteralImpl
    super.replacementString,
  })  : mateParams = {
          'filterPattern': _i2.BuilderArg<Pattern>(
            name: 'filterPattern',
            init: filterPattern,
            isNamed: false,
          ),
          'replacementString': _i2.BuilderArg<String>(
            name: 'replacementString',
            init: replacementString,
            isNamed: true,
            defaultValue: '',
          ),
        },
        super.allow() {
    mateBuilderName = 'FilteringTextInputFormatter.allow';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => FilteringTextInputFormatter$Mate.allow(
          p.get('filterPattern').value,
          replacementString: p.get('replacementString').build(),
        );
  }

  /// FilteringTextInputFormatter FilteringTextInputFormatter.deny(Pattern filterPattern, {String replacementString = ''})
  FilteringTextInputFormatter$Mate.deny(
    /// requiredParameters: Pattern filterPattern
    super.filterPattern, {
    /// optionalParameters: {String replacementString = ''} , default:processed=SimpleStringLiteralImpl
    super.replacementString,
  })  : mateParams = {
          'filterPattern': _i2.BuilderArg<Pattern>(
            name: 'filterPattern',
            init: filterPattern,
            isNamed: false,
          ),
          'replacementString': _i2.BuilderArg<String>(
            name: 'replacementString',
            init: replacementString,
            isNamed: true,
            defaultValue: '',
          ),
        },
        super.deny() {
    mateBuilderName = 'FilteringTextInputFormatter.deny';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => FilteringTextInputFormatter$Mate.deny(
          p.get('filterPattern').value,
          replacementString: p.get('replacementString').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class LengthLimitingTextInputFormatter extends TextInputFormatter
class LengthLimitingTextInputFormatter$Mate extends _i1.LengthLimitingTextInputFormatter with _i2.Mate {
  /// LengthLimitingTextInputFormatter LengthLimitingTextInputFormatter(int? maxLength, {MaxLengthEnforcement? maxLengthEnforcement})
  LengthLimitingTextInputFormatter$Mate(
    /// requiredParameters: int? maxLength
    super.maxLength, {
    /// optionalParameters: {MaxLengthEnforcement? maxLengthEnforcement} , default:none
    super.maxLengthEnforcement,
  })  : mateParams = {
          'maxLength': _i2.BuilderArg<int?>(
            name: 'maxLength',
            init: maxLength,
            isNamed: false,
          ),
          'maxLengthEnforcement': _i2.BuilderArg<_i1.MaxLengthEnforcement?>(
            name: 'maxLengthEnforcement',
            init: maxLengthEnforcement,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'LengthLimitingTextInputFormatter';
    matePackageUrl = 'package:flutter/services.dart';
    mateBuilder = (p) => LengthLimitingTextInputFormatter$Mate(
          p.get('maxLength').value,
          maxLengthEnforcement: p.get('maxLengthEnforcement').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
