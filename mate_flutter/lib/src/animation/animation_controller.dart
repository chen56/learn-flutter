// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/animation/animation_controller.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/animation.dart' as _i3;
import 'package:flutter/src/scheduler/ticker.dart' as _i4;

/// class AnimationController extends Animation<double> with AnimationEagerListenerMixin, AnimationLocalListenersMixin, AnimationLocalStatusListenersMixin
class AnimationController$Mate extends _i1.AnimationController with _i2.Mate {
  /// AnimationController AnimationController({double? value, Duration? duration, Duration? reverseDuration, String? debugLabel, double lowerBound = 0.0, double upperBound = 1.0, AnimationBehavior animationBehavior = AnimationBehavior.normal, required TickerProvider vsync})
  AnimationController$Mate({
    /// optionalParameters: {double? value} , default:none
    super.value,

    /// optionalParameters: {Duration? duration} , default:none
    super.duration,

    /// optionalParameters: {Duration? reverseDuration} , default:none
    super.reverseDuration,

    /// optionalParameters: {String? debugLabel} , default:none
    super.debugLabel,

    /// optionalParameters: {double lowerBound = 0.0} , default:processed=DoubleLiteralImpl
    super.lowerBound,

    /// optionalParameters: {double upperBound = 1.0} , default:processed=DoubleLiteralImpl
    super.upperBound,

    /// optionalParameters: {AnimationBehavior animationBehavior = AnimationBehavior.normal} , default:processed=PrefixedIdentifierImpl
    super.animationBehavior,

    /// optionalParameters: {required TickerProvider vsync} , default:none
    required super.vsync,
  })  : mateParams = {
          'value': _i2.BuilderArg<double?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'duration': _i2.BuilderArg<Duration?>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'reverseDuration': _i2.BuilderArg<Duration?>(
            name: 'reverseDuration',
            init: reverseDuration,
            isNamed: true,
          ),
          'debugLabel': _i2.BuilderArg<String?>(
            name: 'debugLabel',
            init: debugLabel,
            isNamed: true,
          ),
          'lowerBound': _i2.BuilderArg<double>(
            name: 'lowerBound',
            init: lowerBound,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'upperBound': _i2.BuilderArg<double>(
            name: 'upperBound',
            init: upperBound,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'animationBehavior': _i2.BuilderArg<_i1.AnimationBehavior>(
            name: 'animationBehavior',
            init: animationBehavior,
            isNamed: true,
            defaultValue: _i3.AnimationBehavior.normal,
          ),
          'vsync': _i2.BuilderArg<_i4.TickerProvider>(
            name: 'vsync',
            init: vsync,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AnimationController';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationController$Mate(
          value: p.get('value').build(),
          duration: p.get('duration').build(),
          reverseDuration: p.get('reverseDuration').build(),
          debugLabel: p.get('debugLabel').build(),
          lowerBound: p.get('lowerBound').build(),
          upperBound: p.get('upperBound').build(),
          animationBehavior: p.get('animationBehavior').build(),
          vsync: p.get('vsync').build(),
        );
  }

  /// AnimationController AnimationController.unbounded({double value = 0.0, Duration? duration, Duration? reverseDuration, String? debugLabel, required TickerProvider vsync, AnimationBehavior animationBehavior = AnimationBehavior.preserve})
  AnimationController$Mate.unbounded({
    /// optionalParameters: {double value = 0.0} , default:processed=DoubleLiteralImpl
    super.value,

    /// optionalParameters: {Duration? duration} , default:none
    super.duration,

    /// optionalParameters: {Duration? reverseDuration} , default:none
    super.reverseDuration,

    /// optionalParameters: {String? debugLabel} , default:none
    super.debugLabel,

    /// optionalParameters: {required TickerProvider vsync} , default:none
    required super.vsync,

    /// optionalParameters: {AnimationBehavior animationBehavior = AnimationBehavior.preserve} , default:processed=PrefixedIdentifierImpl
    super.animationBehavior,
  })  : mateParams = {
          'value': _i2.BuilderArg<double>(
            name: 'value',
            init: value,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'duration': _i2.BuilderArg<Duration?>(
            name: 'duration',
            init: duration,
            isNamed: true,
          ),
          'reverseDuration': _i2.BuilderArg<Duration?>(
            name: 'reverseDuration',
            init: reverseDuration,
            isNamed: true,
          ),
          'debugLabel': _i2.BuilderArg<String?>(
            name: 'debugLabel',
            init: debugLabel,
            isNamed: true,
          ),
          'vsync': _i2.BuilderArg<_i4.TickerProvider>(
            name: 'vsync',
            init: vsync,
            isNamed: true,
          ),
          'animationBehavior': _i2.BuilderArg<_i1.AnimationBehavior>(
            name: 'animationBehavior',
            init: animationBehavior,
            isNamed: true,
            defaultValue: _i3.AnimationBehavior.preserve,
          ),
        },
        super.unbounded() {
    mateBuilderName = 'AnimationController.unbounded';
    matePackageUrl = 'package:flutter/animation.dart';
    mateBuilder = (p) => AnimationController$Mate.unbounded(
          value: p.get('value').build(),
          duration: p.get('duration').build(),
          reverseDuration: p.get('reverseDuration').build(),
          debugLabel: p.get('debugLabel').build(),
          vsync: p.get('vsync').build(),
          animationBehavior: p.get('animationBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
