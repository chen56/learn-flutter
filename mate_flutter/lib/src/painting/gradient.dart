// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/painting/gradient.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/painting/alignment.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i4;
import 'dart:ui' as _i5;

/// class GradientRotation extends GradientTransform
class GradientRotation$Mate extends _i1.GradientRotation with _i2.Mate {
  /// GradientRotation GradientRotation(double radians)
  GradientRotation$Mate(

      /// requiredParameters: double radians
      super.radians)
      : mateParams = {
          'radians': _i2.BuilderArg<double>(
            name: 'radians',
            init: radians,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'GradientRotation';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => GradientRotation$Mate(p.get('radians').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class LinearGradient extends Gradient
class LinearGradient$Mate extends _i1.LinearGradient with _i2.Mate {
  /// LinearGradient LinearGradient({AlignmentGeometry begin = Alignment.centerLeft, AlignmentGeometry end = Alignment.centerRight, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, GradientTransform? transform})
  LinearGradient$Mate({
    /// optionalParameters: {AlignmentGeometry begin = Alignment.centerLeft} , default:processed=PrefixedIdentifierImpl
    super.begin,

    /// optionalParameters: {AlignmentGeometry end = Alignment.centerRight} , default:processed=PrefixedIdentifierImpl
    super.end,

    /// optionalParameters: {required List<Color> colors} , default:none
    required super.colors,

    /// optionalParameters: {List<double>? stops} , default:none
    super.stops,

    /// optionalParameters: {TileMode tileMode = TileMode.clamp} , default:processed=PrefixedIdentifierImpl
    super.tileMode,

    /// optionalParameters: {GradientTransform? transform} , default:none
    super.transform,
  })  : mateParams = {
          'begin': _i2.BuilderArg<_i3.AlignmentGeometry>(
            name: 'begin',
            init: begin,
            isNamed: true,
            defaultValue: _i4.Alignment.centerLeft,
          ),
          'end': _i2.BuilderArg<_i3.AlignmentGeometry>(
            name: 'end',
            init: end,
            isNamed: true,
            defaultValue: _i4.Alignment.centerRight,
          ),
          'colors': _i2.BuilderArg<List<_i5.Color>>(
            name: 'colors',
            init: colors,
            isNamed: true,
          ),
          'stops': _i2.BuilderArg<List<double>?>(
            name: 'stops',
            init: stops,
            isNamed: true,
          ),
          'tileMode': _i2.BuilderArg<_i5.TileMode>(
            name: 'tileMode',
            init: tileMode,
            isNamed: true,
            defaultValue: _i5.TileMode.clamp,
          ),
          'transform': _i2.BuilderArg<_i1.GradientTransform?>(
            name: 'transform',
            init: transform,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'LinearGradient';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LinearGradient$Mate(
          begin: p.get('begin').build(),
          end: p.get('end').build(),
          colors: p.get('colors').build(),
          stops: p.get('stops').build(),
          tileMode: p.get('tileMode').build(),
          transform: p.get('transform').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RadialGradient extends Gradient
class RadialGradient$Mate extends _i1.RadialGradient with _i2.Mate {
  /// RadialGradient RadialGradient({AlignmentGeometry center = Alignment.center, double radius = 0.5, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, AlignmentGeometry? focal, double focalRadius = 0.0, GradientTransform? transform})
  RadialGradient$Mate({
    /// optionalParameters: {AlignmentGeometry center = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.center,

    /// optionalParameters: {double radius = 0.5} , default:processed=DoubleLiteralImpl
    super.radius,

    /// optionalParameters: {required List<Color> colors} , default:none
    required super.colors,

    /// optionalParameters: {List<double>? stops} , default:none
    super.stops,

    /// optionalParameters: {TileMode tileMode = TileMode.clamp} , default:processed=PrefixedIdentifierImpl
    super.tileMode,

    /// optionalParameters: {AlignmentGeometry? focal} , default:none
    super.focal,

    /// optionalParameters: {double focalRadius = 0.0} , default:processed=DoubleLiteralImpl
    super.focalRadius,

    /// optionalParameters: {GradientTransform? transform} , default:none
    super.transform,
  })  : mateParams = {
          'center': _i2.BuilderArg<_i3.AlignmentGeometry>(
            name: 'center',
            init: center,
            isNamed: true,
            defaultValue: _i4.Alignment.center,
          ),
          'radius': _i2.BuilderArg<double>(
            name: 'radius',
            init: radius,
            isNamed: true,
            defaultValue: 0.5,
          ),
          'colors': _i2.BuilderArg<List<_i5.Color>>(
            name: 'colors',
            init: colors,
            isNamed: true,
          ),
          'stops': _i2.BuilderArg<List<double>?>(
            name: 'stops',
            init: stops,
            isNamed: true,
          ),
          'tileMode': _i2.BuilderArg<_i5.TileMode>(
            name: 'tileMode',
            init: tileMode,
            isNamed: true,
            defaultValue: _i5.TileMode.clamp,
          ),
          'focal': _i2.BuilderArg<_i3.AlignmentGeometry?>(
            name: 'focal',
            init: focal,
            isNamed: true,
          ),
          'focalRadius': _i2.BuilderArg<double>(
            name: 'focalRadius',
            init: focalRadius,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'transform': _i2.BuilderArg<_i1.GradientTransform?>(
            name: 'transform',
            init: transform,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RadialGradient';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RadialGradient$Mate(
          center: p.get('center').build(),
          radius: p.get('radius').build(),
          colors: p.get('colors').build(),
          stops: p.get('stops').build(),
          tileMode: p.get('tileMode').build(),
          focal: p.get('focal').build(),
          focalRadius: p.get('focalRadius').build(),
          transform: p.get('transform').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SweepGradient extends Gradient
class SweepGradient$Mate extends _i1.SweepGradient with _i2.Mate {
  /// SweepGradient SweepGradient({AlignmentGeometry center = Alignment.center, double startAngle = 0.0, double endAngle = math.pi * 2, required List<Color> colors, List<double>? stops, TileMode tileMode = TileMode.clamp, GradientTransform? transform})
  SweepGradient$Mate({
    /// optionalParameters: {AlignmentGeometry center = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.center,

    /// optionalParameters: {double startAngle = 0.0} , default:processed=DoubleLiteralImpl
    super.startAngle,

    /// optionalParameters: {double endAngle = math.pi * 2} , default:unprocessed=BinaryExpressionImpl
    super.endAngle,

    /// optionalParameters: {required List<Color> colors} , default:none
    required super.colors,

    /// optionalParameters: {List<double>? stops} , default:none
    super.stops,

    /// optionalParameters: {TileMode tileMode = TileMode.clamp} , default:processed=PrefixedIdentifierImpl
    super.tileMode,

    /// optionalParameters: {GradientTransform? transform} , default:none
    super.transform,
  })  : mateParams = {
          'center': _i2.BuilderArg<_i3.AlignmentGeometry>(
            name: 'center',
            init: center,
            isNamed: true,
            defaultValue: _i4.Alignment.center,
          ),
          'startAngle': _i2.BuilderArg<double>(
            name: 'startAngle',
            init: startAngle,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'endAngle': _i2.BuilderArg<double>(
            name: 'endAngle',
            init: endAngle,
            isNamed: true,
          ),
          'colors': _i2.BuilderArg<List<_i5.Color>>(
            name: 'colors',
            init: colors,
            isNamed: true,
          ),
          'stops': _i2.BuilderArg<List<double>?>(
            name: 'stops',
            init: stops,
            isNamed: true,
          ),
          'tileMode': _i2.BuilderArg<_i5.TileMode>(
            name: 'tileMode',
            init: tileMode,
            isNamed: true,
            defaultValue: _i5.TileMode.clamp,
          ),
          'transform': _i2.BuilderArg<_i1.GradientTransform?>(
            name: 'transform',
            init: transform,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SweepGradient';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SweepGradient$Mate(
          center: p.get('center').build(),
          startAngle: p.get('startAngle').build(),
          endAngle: p.get('endAngle').build(),
          colors: p.get('colors').build(),
          stops: p.get('stops').build(),
          tileMode: p.get('tileMode').build(),
          transform: p.get('transform').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
