// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/overlay.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/foundation/key.dart' as _i4;
import 'dart:ui' as _i5;

/// class OverlayEntry implements Listenable
class OverlayEntry$Mate extends _i1.OverlayEntry with _i2.Mate {
  /// OverlayEntry OverlayEntry({required Widget Function(BuildContext) builder, bool opaque = false, bool maintainState = false})
  OverlayEntry$Mate({
    /// optionalParameters: {required Widget Function(BuildContext) builder} , default:none
    required super.builder,

    /// optionalParameters: {bool opaque = false} , default:processed=BooleanLiteralImpl
    super.opaque,

    /// optionalParameters: {bool maintainState = false} , default:processed=BooleanLiteralImpl
    super.maintainState,
  })  : mateParams = {
          'builder': _i2.BuilderArg<_i3.WidgetBuilder>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
          'opaque': _i2.BuilderArg<bool>(
            name: 'opaque',
            init: opaque,
            isNamed: true,
            defaultValue: false,
          ),
          'maintainState': _i2.BuilderArg<bool>(
            name: 'maintainState',
            init: maintainState,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'OverlayEntry';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => OverlayEntry$Mate(
          builder: p.get('builder').build(),
          opaque: p.get('opaque').build(),
          maintainState: p.get('maintainState').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Overlay extends StatefulWidget
class Overlay$Mate extends _i1.Overlay with _i2.Mate {
  /// Overlay Overlay({Key? key, List<OverlayEntry> initialEntries = const <OverlayEntry>[], Clip clipBehavior = Clip.hardEdge})
  Overlay$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {List<OverlayEntry> initialEntries = const <OverlayEntry>[]} , default:unprocessed=ListLiteralImpl
    super.initialEntries,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i4.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'initialEntries': _i2.BuilderArg<List<_i1.OverlayEntry>>(
            name: 'initialEntries',
            init: initialEntries,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i5.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i5.Clip.hardEdge,
          ),
        },
        super() {
    mateBuilderName = 'Overlay';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Overlay$Mate(
          key: p.get('key').build(),
          initialEntries: p.get('initialEntries').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class OverlayPortalController
class OverlayPortalController$Mate extends _i1.OverlayPortalController with _i2.Mate {
  /// OverlayPortalController OverlayPortalController({String? debugLabel})
  OverlayPortalController$Mate(
      {
      /// optionalParameters: {String? debugLabel} , default:none
      super.debugLabel})
      : mateParams = {
          'debugLabel': _i2.BuilderArg<String?>(
            name: 'debugLabel',
            init: debugLabel,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'OverlayPortalController';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => OverlayPortalController$Mate(debugLabel: p.get('debugLabel').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class OverlayPortal extends StatefulWidget
class OverlayPortal$Mate extends _i1.OverlayPortal with _i2.Mate {
  /// OverlayPortal OverlayPortal({Key? key, required OverlayPortalController controller, required Widget Function(BuildContext) overlayChildBuilder, Widget? child})
  OverlayPortal$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required OverlayPortalController controller} , default:none
    required super.controller,

    /// optionalParameters: {required Widget Function(BuildContext) overlayChildBuilder} , default:none
    required super.overlayChildBuilder,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i4.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i1.OverlayPortalController>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'overlayChildBuilder': _i2.BuilderArg<_i3.WidgetBuilder>(
            name: 'overlayChildBuilder',
            init: overlayChildBuilder,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i3.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'OverlayPortal';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => OverlayPortal$Mate(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          overlayChildBuilder: p.get('overlayChildBuilder').build(),
          child: p.get('child').build(),
        );
  }

  /// OverlayPortal OverlayPortal.targetsRootOverlay({Key? key, required OverlayPortalController controller, required Widget Function(BuildContext) overlayChildBuilder, Widget? child})
  OverlayPortal$Mate.targetsRootOverlay({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required OverlayPortalController controller} , default:none
    required super.controller,

    /// optionalParameters: {required Widget Function(BuildContext) overlayChildBuilder} , default:none
    required super.overlayChildBuilder,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i4.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i1.OverlayPortalController>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'overlayChildBuilder': _i2.BuilderArg<_i3.WidgetBuilder>(
            name: 'overlayChildBuilder',
            init: overlayChildBuilder,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i3.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.targetsRootOverlay() {
    mateBuilderName = 'OverlayPortal.targetsRootOverlay';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => OverlayPortal$Mate.targetsRootOverlay(
          key: p.get('key').build(),
          controller: p.get('controller').build(),
          overlayChildBuilder: p.get('overlayChildBuilder').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
