// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/image_filter.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;

/// class ImageFiltered extends SingleChildRenderObjectWidget
class ImageFiltered$Mate extends _i1.ImageFiltered with _i2.Mate {
  /// ImageFiltered ImageFiltered({Key? key, required ImageFilter imageFilter, Widget? child, bool enabled = true})
  ImageFiltered$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ImageFilter imageFilter} , default:none
    required super.imageFilter,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'imageFilter': _i2.BuilderArg<_i4.ImageFilter>(
            name: 'imageFilter',
            init: imageFilter,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super() {
    mateBuilderName = 'ImageFiltered';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ImageFiltered$Mate(
          key: p.get('key').build(),
          imageFilter: p.get('imageFilter').build(),
          child: p.get('child').build(),
          enabled: p.get('enabled').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
