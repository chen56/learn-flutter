// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/focus_manager.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/widgets/focus_traversal.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i4;

/// class FocusNode with DiagnosticableTreeMixin, ChangeNotifier
class FocusNode$Mate extends _i1.FocusNode with _i2.Mate {
  /// FocusNode FocusNode({String? debugLabel, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, bool skipTraversal = false, bool canRequestFocus = true, bool descendantsAreFocusable = true, bool descendantsAreTraversable = true})
  FocusNode$Mate({
    /// optionalParameters: {String? debugLabel} , default:none
    super.debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , default:none
    super.onKey,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , default:none
    super.onKeyEvent,

    /// optionalParameters: {bool skipTraversal = false} , default:processed=BooleanLiteralImpl
    super.skipTraversal,

    /// optionalParameters: {bool canRequestFocus = true} , default:processed=BooleanLiteralImpl
    super.canRequestFocus,

    /// optionalParameters: {bool descendantsAreFocusable = true} , default:processed=BooleanLiteralImpl
    super.descendantsAreFocusable,

    /// optionalParameters: {bool descendantsAreTraversable = true} , default:processed=BooleanLiteralImpl
    super.descendantsAreTraversable,
  })  : mateParams = {
          'debugLabel': _i2.BuilderArg<String?>(
            name: 'debugLabel',
            init: debugLabel,
            isNamed: true,
          ),
          'onKey': _i2.BuilderArg<_i1.FocusOnKeyCallback?>(
            name: 'onKey',
            init: onKey,
            isNamed: true,
          ),
          'onKeyEvent': _i2.BuilderArg<_i1.FocusOnKeyEventCallback?>(
            name: 'onKeyEvent',
            init: onKeyEvent,
            isNamed: true,
          ),
          'skipTraversal': _i2.BuilderArg<bool>(
            name: 'skipTraversal',
            init: skipTraversal,
            isNamed: true,
            defaultValue: false,
          ),
          'canRequestFocus': _i2.BuilderArg<bool>(
            name: 'canRequestFocus',
            init: canRequestFocus,
            isNamed: true,
            defaultValue: true,
          ),
          'descendantsAreFocusable': _i2.BuilderArg<bool>(
            name: 'descendantsAreFocusable',
            init: descendantsAreFocusable,
            isNamed: true,
            defaultValue: true,
          ),
          'descendantsAreTraversable': _i2.BuilderArg<bool>(
            name: 'descendantsAreTraversable',
            init: descendantsAreTraversable,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super() {
    mateBuilderName = 'FocusNode';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FocusNode$Mate(
          debugLabel: p.get('debugLabel').build(),
          onKey: p.get('onKey').build(),
          onKeyEvent: p.get('onKeyEvent').build(),
          skipTraversal: p.get('skipTraversal').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          descendantsAreFocusable: p.get('descendantsAreFocusable').build(),
          descendantsAreTraversable: p.get('descendantsAreTraversable').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class FocusScopeNode extends FocusNode
class FocusScopeNode$Mate extends _i1.FocusScopeNode with _i2.Mate {
  /// FocusScopeNode FocusScopeNode({String? debugLabel, KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent, KeyEventResult Function(FocusNode, RawKeyEvent)? onKey, bool skipTraversal = false, bool canRequestFocus = true, TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop})
  FocusScopeNode$Mate({
    /// optionalParameters: {String? debugLabel} , default:none
    super.debugLabel,

    /// optionalParameters: {KeyEventResult Function(FocusNode, KeyEvent)? onKeyEvent} , default:none
    super.onKeyEvent,

    /// optionalParameters: {KeyEventResult Function(FocusNode, RawKeyEvent)? onKey} , default:none
    super.onKey,

    /// optionalParameters: {bool skipTraversal = false} , default:processed=BooleanLiteralImpl
    super.skipTraversal,

    /// optionalParameters: {bool canRequestFocus = true} , default:processed=BooleanLiteralImpl
    super.canRequestFocus,

    /// optionalParameters: {TraversalEdgeBehavior traversalEdgeBehavior = TraversalEdgeBehavior.closedLoop} , default:processed=PrefixedIdentifierImpl
    super.traversalEdgeBehavior,
  })  : mateParams = {
          'debugLabel': _i2.BuilderArg<String?>(
            name: 'debugLabel',
            init: debugLabel,
            isNamed: true,
          ),
          'onKeyEvent': _i2.BuilderArg<_i1.FocusOnKeyEventCallback?>(
            name: 'onKeyEvent',
            init: onKeyEvent,
            isNamed: true,
          ),
          'onKey': _i2.BuilderArg<_i1.FocusOnKeyCallback?>(
            name: 'onKey',
            init: onKey,
            isNamed: true,
          ),
          'skipTraversal': _i2.BuilderArg<bool>(
            name: 'skipTraversal',
            init: skipTraversal,
            isNamed: true,
            defaultValue: false,
          ),
          'canRequestFocus': _i2.BuilderArg<bool>(
            name: 'canRequestFocus',
            init: canRequestFocus,
            isNamed: true,
            defaultValue: true,
          ),
          'traversalEdgeBehavior': _i2.BuilderArg<_i3.TraversalEdgeBehavior>(
            name: 'traversalEdgeBehavior',
            init: traversalEdgeBehavior,
            isNamed: true,
            defaultValue: _i4.TraversalEdgeBehavior.closedLoop,
          ),
        },
        super() {
    mateBuilderName = 'FocusScopeNode';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FocusScopeNode$Mate(
          debugLabel: p.get('debugLabel').build(),
          onKeyEvent: p.get('onKeyEvent').build(),
          onKey: p.get('onKey').build(),
          skipTraversal: p.get('skipTraversal').build(),
          canRequestFocus: p.get('canRequestFocus').build(),
          traversalEdgeBehavior: p.get('traversalEdgeBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
