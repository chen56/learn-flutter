// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/pop_scope.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/routes.dart' as _i5;

/// class PopScope extends StatefulWidget
class PopScope$Mate extends _i1.PopScope with _i2.Mate {
  /// PopScope PopScope({Key? key, required Widget child, bool canPop = true, void Function(bool)? onPopInvoked})
  PopScope$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,

    /// optionalParameters: {bool canPop = true} , default:processed=BooleanLiteralImpl
    super.canPop,

    /// optionalParameters: {void Function(bool)? onPopInvoked} , default:none
    super.onPopInvoked,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'canPop': _i2.BuilderArg<bool>(
            name: 'canPop',
            init: canPop,
            isNamed: true,
            defaultValue: true,
          ),
          'onPopInvoked': _i2.BuilderArg<_i5.PopInvokedCallback?>(
            name: 'onPopInvoked',
            init: onPopInvoked,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PopScope';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PopScope$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          canPop: p.get('canPop').build(),
          onPopInvoked: p.get('onPopInvoked').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
