// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/scrollable_helpers.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/painting/basic_types.dart' as _i3;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i4;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/src/widgets/scrollable.dart' as _i7;
import 'package:flutter/src/widgets/scroll_metrics.dart' as _i8;
import 'package:flutter/cupertino.dart' as _i9;

/// class ScrollableDetails
class ScrollableDetails$Mate extends _i1.ScrollableDetails with _i2.Mate {
  /// ScrollableDetails ScrollableDetails({required AxisDirection direction, ScrollController? controller, ScrollPhysics? physics, Clip? clipBehavior, Clip? decorationClipBehavior})
  ScrollableDetails$Mate({
    /// optionalParameters: {required AxisDirection direction} , default:none
    required super.direction,

    /// optionalParameters: {ScrollController? controller} , default:none
    super.controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    super.physics,

    /// optionalParameters: {Clip? decorationClipBehavior} , default:none
    super.decorationClipBehavior,
  })  : mateParams = {
          'direction': _i2.BuilderArg<_i3.AxisDirection>(
            name: 'direction',
            init: direction,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i4.ScrollController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'physics': _i2.BuilderArg<_i5.ScrollPhysics?>(
            name: 'physics',
            init: physics,
            isNamed: true,
          ),
          'decorationClipBehavior': _i2.BuilderArg<_i6.Clip?>(
            name: 'decorationClipBehavior',
            init: decorationClipBehavior,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ScrollableDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollableDetails$Mate(
          direction: p.get('direction').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          decorationClipBehavior: p.get('decorationClipBehavior').build(),
        );
  }

  /// ScrollableDetails ScrollableDetails.vertical({bool reverse = false, ScrollController? controller, ScrollPhysics? physics, Clip? decorationClipBehavior})
  ScrollableDetails$Mate.vertical({
    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    super.reverse,

    /// optionalParameters: {ScrollController? controller} , default:none
    super.controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    super.physics,

    /// optionalParameters: {Clip? decorationClipBehavior} , default:none
    super.decorationClipBehavior,
  })  : mateParams = {
          'reverse': _i2.BuilderArg<bool>(
            name: 'reverse',
            init: reverse,
            isNamed: true,
            defaultValue: false,
          ),
          'controller': _i2.BuilderArg<_i4.ScrollController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'physics': _i2.BuilderArg<_i5.ScrollPhysics?>(
            name: 'physics',
            init: physics,
            isNamed: true,
          ),
          'decorationClipBehavior': _i2.BuilderArg<_i6.Clip?>(
            name: 'decorationClipBehavior',
            init: decorationClipBehavior,
            isNamed: true,
          ),
        },
        super.vertical() {
    mateBuilderName = 'ScrollableDetails.vertical';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollableDetails$Mate.vertical(
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          decorationClipBehavior: p.get('decorationClipBehavior').build(),
        );
  }

  /// ScrollableDetails ScrollableDetails.horizontal({bool reverse = false, ScrollController? controller, ScrollPhysics? physics, Clip? decorationClipBehavior})
  ScrollableDetails$Mate.horizontal({
    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    super.reverse,

    /// optionalParameters: {ScrollController? controller} , default:none
    super.controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    super.physics,

    /// optionalParameters: {Clip? decorationClipBehavior} , default:none
    super.decorationClipBehavior,
  })  : mateParams = {
          'reverse': _i2.BuilderArg<bool>(
            name: 'reverse',
            init: reverse,
            isNamed: true,
            defaultValue: false,
          ),
          'controller': _i2.BuilderArg<_i4.ScrollController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'physics': _i2.BuilderArg<_i5.ScrollPhysics?>(
            name: 'physics',
            init: physics,
            isNamed: true,
          ),
          'decorationClipBehavior': _i2.BuilderArg<_i6.Clip?>(
            name: 'decorationClipBehavior',
            init: decorationClipBehavior,
            isNamed: true,
          ),
        },
        super.horizontal() {
    mateBuilderName = 'ScrollableDetails.horizontal';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollableDetails$Mate.horizontal(
          reverse: p.get('reverse').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          decorationClipBehavior: p.get('decorationClipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class EdgeDraggingAutoScroller
class EdgeDraggingAutoScroller$Mate extends _i1.EdgeDraggingAutoScroller
    with _i2.Mate {
  /// EdgeDraggingAutoScroller EdgeDraggingAutoScroller(ScrollableState scrollable, {void Function()? onScrollViewScrolled, double velocityScalar = _kDefaultAutoScrollVelocityScalar})
  EdgeDraggingAutoScroller$Mate(
    /// requiredParameters: ScrollableState scrollable
    super.scrollable, {
    /// optionalParameters: {void Function()? onScrollViewScrolled} , default:none
    super.onScrollViewScrolled,

    /// optionalParameters: {double velocityScalar = _kDefaultAutoScrollVelocityScalar} , default:unprocessed=SimpleIdentifierImpl
    super.velocityScalar,
  })  : mateParams = {
          'scrollable': _i2.BuilderArg<_i7.ScrollableState>(
            name: 'scrollable',
            init: scrollable,
            isNamed: false,
          ),
          'onScrollViewScrolled': _i2.BuilderArg<_i6.VoidCallback?>(
            name: 'onScrollViewScrolled',
            init: onScrollViewScrolled,
            isNamed: true,
          ),
          'velocityScalar': _i2.BuilderArg<double>(
            name: 'velocityScalar',
            init: velocityScalar,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'EdgeDraggingAutoScroller';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => EdgeDraggingAutoScroller$Mate(
          p.get('scrollable').value,
          onScrollViewScrolled: p.get('onScrollViewScrolled').build(),
          velocityScalar: p.get('velocityScalar').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ScrollIncrementDetails
class ScrollIncrementDetails$Mate extends _i1.ScrollIncrementDetails
    with _i2.Mate {
  /// ScrollIncrementDetails ScrollIncrementDetails({required ScrollIncrementType type, required ScrollMetrics metrics})
  ScrollIncrementDetails$Mate({
    /// optionalParameters: {required ScrollIncrementType type} , default:none
    required super.type,

    /// optionalParameters: {required ScrollMetrics metrics} , default:none
    required super.metrics,
  })  : mateParams = {
          'type': _i2.BuilderArg<_i1.ScrollIncrementType>(
            name: 'type',
            init: type,
            isNamed: true,
          ),
          'metrics': _i2.BuilderArg<_i8.ScrollMetrics>(
            name: 'metrics',
            init: metrics,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ScrollIncrementDetails';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollIncrementDetails$Mate(
          type: p.get('type').build(),
          metrics: p.get('metrics').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ScrollIntent extends Intent
class ScrollIntent$Mate extends _i1.ScrollIntent with _i2.Mate {
  /// ScrollIntent ScrollIntent({required AxisDirection direction, ScrollIncrementType type = ScrollIncrementType.line})
  ScrollIntent$Mate({
    /// optionalParameters: {required AxisDirection direction} , default:none
    required super.direction,

    /// optionalParameters: {ScrollIncrementType type = ScrollIncrementType.line} , default:processed=PrefixedIdentifierImpl
    super.type,
  })  : mateParams = {
          'direction': _i2.BuilderArg<_i3.AxisDirection>(
            name: 'direction',
            init: direction,
            isNamed: true,
          ),
          'type': _i2.BuilderArg<_i1.ScrollIncrementType>(
            name: 'type',
            init: type,
            isNamed: true,
            defaultValue: _i9.ScrollIncrementType.line,
          ),
        },
        super() {
    mateBuilderName = 'ScrollIntent';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ScrollIntent$Mate(
          direction: p.get('direction').build(),
          type: p.get('type').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
