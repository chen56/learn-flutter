// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/scrollable.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/painting/basic_types.dart' as _i4;
import 'package:flutter/cupertino.dart' as _i5;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i6;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i7;
import 'package:flutter/src/widgets/scrollable_helpers.dart' as _i8;
import 'package:flutter/src/gestures/recognizer.dart' as _i9;
import 'package:flutter/gestures.dart' as _i10;
import 'package:flutter/src/widgets/scroll_configuration.dart' as _i11;
import 'dart:ui' as _i12;

/// class Scrollable extends StatefulWidget
class Scrollable$Mate extends _i1.Scrollable with _i2.Mate {
  /// Scrollable Scrollable({Key? key, AxisDirection axisDirection = AxisDirection.down, ScrollController? controller, ScrollPhysics? physics, required Widget Function(BuildContext, ViewportOffset) viewportBuilder, double Function(ScrollIncrementDetails)? incrementCalculator, bool excludeFromSemantics = false, int? semanticChildCount, DragStartBehavior dragStartBehavior = DragStartBehavior.start, String? restorationId, ScrollBehavior? scrollBehavior, Clip clipBehavior = Clip.hardEdge})
  Scrollable$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AxisDirection axisDirection = AxisDirection.down} , default:processed=PrefixedIdentifierImpl
    super.axisDirection,

    /// optionalParameters: {ScrollController? controller} , default:none
    super.controller,

    /// optionalParameters: {ScrollPhysics? physics} , default:none
    super.physics,

    /// optionalParameters: {required Widget Function(BuildContext, ViewportOffset) viewportBuilder} , default:none
    required super.viewportBuilder,

    /// optionalParameters: {double Function(ScrollIncrementDetails)? incrementCalculator} , default:none
    super.incrementCalculator,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {int? semanticChildCount} , default:none
    super.semanticChildCount,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {String? restorationId} , default:none
    super.restorationId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , default:none
    super.scrollBehavior,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'axisDirection': _i2.BuilderArg<_i4.AxisDirection>(
            name: 'axisDirection',
            init: axisDirection,
            isNamed: true,
            defaultValue: _i5.AxisDirection.down,
          ),
          'controller': _i2.BuilderArg<_i6.ScrollController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'physics': _i2.BuilderArg<_i7.ScrollPhysics?>(
            name: 'physics',
            init: physics,
            isNamed: true,
          ),
          'viewportBuilder': _i2.BuilderArg<_i1.ViewportBuilder>(
            name: 'viewportBuilder',
            init: viewportBuilder,
            isNamed: true,
          ),
          'incrementCalculator': _i2.BuilderArg<_i8.ScrollIncrementCalculator?>(
            name: 'incrementCalculator',
            init: incrementCalculator,
            isNamed: true,
          ),
          'excludeFromSemantics': _i2.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'semanticChildCount': _i2.BuilderArg<int?>(
            name: 'semanticChildCount',
            init: semanticChildCount,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i9.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i10.DragStartBehavior.start,
          ),
          'restorationId': _i2.BuilderArg<String?>(
            name: 'restorationId',
            init: restorationId,
            isNamed: true,
          ),
          'scrollBehavior': _i2.BuilderArg<_i11.ScrollBehavior?>(
            name: 'scrollBehavior',
            init: scrollBehavior,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i12.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i12.Clip.hardEdge,
          ),
        },
        super() {
    mateBuilderName = 'Scrollable';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Scrollable$Mate(
          key: p.get('key').build(),
          axisDirection: p.get('axisDirection').build(),
          controller: p.get('controller').build(),
          physics: p.get('physics').build(),
          viewportBuilder: p.get('viewportBuilder').build(),
          incrementCalculator: p.get('incrementCalculator').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          semanticChildCount: p.get('semanticChildCount').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          restorationId: p.get('restorationId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TwoDimensionalScrollable extends StatefulWidget
class TwoDimensionalScrollable$Mate extends _i1.TwoDimensionalScrollable with _i2.Mate {
  /// TwoDimensionalScrollable TwoDimensionalScrollable({Key? key, required ScrollableDetails horizontalDetails, required ScrollableDetails verticalDetails, required Widget Function(BuildContext, ViewportOffset, ViewportOffset) viewportBuilder, double Function(ScrollIncrementDetails)? incrementCalculator, String? restorationId, bool excludeFromSemantics = false, DiagonalDragBehavior diagonalDragBehavior = DiagonalDragBehavior.none, DragStartBehavior dragStartBehavior = DragStartBehavior.start})
  TwoDimensionalScrollable$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ScrollableDetails horizontalDetails} , default:none
    required super.horizontalDetails,

    /// optionalParameters: {required ScrollableDetails verticalDetails} , default:none
    required super.verticalDetails,

    /// optionalParameters: {required Widget Function(BuildContext, ViewportOffset, ViewportOffset) viewportBuilder} , default:none
    required super.viewportBuilder,

    /// optionalParameters: {double Function(ScrollIncrementDetails)? incrementCalculator} , default:none
    super.incrementCalculator,

    /// optionalParameters: {String? restorationId} , default:none
    super.restorationId,

    /// optionalParameters: {bool excludeFromSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeFromSemantics,

    /// optionalParameters: {DiagonalDragBehavior diagonalDragBehavior = DiagonalDragBehavior.none} , default:processed=PrefixedIdentifierImpl
    super.diagonalDragBehavior,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'horizontalDetails': _i2.BuilderArg<_i8.ScrollableDetails>(
            name: 'horizontalDetails',
            init: horizontalDetails,
            isNamed: true,
          ),
          'verticalDetails': _i2.BuilderArg<_i8.ScrollableDetails>(
            name: 'verticalDetails',
            init: verticalDetails,
            isNamed: true,
          ),
          'viewportBuilder': _i2.BuilderArg<_i1.TwoDimensionalViewportBuilder>(
            name: 'viewportBuilder',
            init: viewportBuilder,
            isNamed: true,
          ),
          'incrementCalculator': _i2.BuilderArg<_i8.ScrollIncrementCalculator?>(
            name: 'incrementCalculator',
            init: incrementCalculator,
            isNamed: true,
          ),
          'restorationId': _i2.BuilderArg<String?>(
            name: 'restorationId',
            init: restorationId,
            isNamed: true,
          ),
          'excludeFromSemantics': _i2.BuilderArg<bool>(
            name: 'excludeFromSemantics',
            init: excludeFromSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'diagonalDragBehavior': _i2.BuilderArg<_i1.DiagonalDragBehavior>(
            name: 'diagonalDragBehavior',
            init: diagonalDragBehavior,
            isNamed: true,
            defaultValue: _i5.DiagonalDragBehavior.none,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i9.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i10.DragStartBehavior.start,
          ),
        },
        super() {
    mateBuilderName = 'TwoDimensionalScrollable';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TwoDimensionalScrollable$Mate(
          key: p.get('key').build(),
          horizontalDetails: p.get('horizontalDetails').build(),
          verticalDetails: p.get('verticalDetails').build(),
          viewportBuilder: p.get('viewportBuilder').build(),
          incrementCalculator: p.get('incrementCalculator').build(),
          restorationId: p.get('restorationId').build(),
          excludeFromSemantics: p.get('excludeFromSemantics').build(),
          diagonalDragBehavior: p.get('diagonalDragBehavior').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
