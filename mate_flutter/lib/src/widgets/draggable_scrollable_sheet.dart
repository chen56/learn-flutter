// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/draggable_scrollable_sheet.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;

/// class DraggableScrollableSheet extends StatefulWidget
class DraggableScrollableSheet$Mate extends _i1.DraggableScrollableSheet
    with _i2.Mate {
  /// DraggableScrollableSheet DraggableScrollableSheet({Key? key, double initialChildSize = 0.5, double minChildSize = 0.25, double maxChildSize = 1.0, bool expand = true, bool snap = false, List<double>? snapSizes, Duration? snapAnimationDuration, DraggableScrollableController? controller, required Widget Function(BuildContext, ScrollController) builder})
  DraggableScrollableSheet$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double initialChildSize = 0.5} , default:processed=DoubleLiteralImpl
    super.initialChildSize,

    /// optionalParameters: {double minChildSize = 0.25} , default:processed=DoubleLiteralImpl
    super.minChildSize,

    /// optionalParameters: {double maxChildSize = 1.0} , default:processed=DoubleLiteralImpl
    super.maxChildSize,

    /// optionalParameters: {bool expand = true} , default:processed=BooleanLiteralImpl
    super.expand,

    /// optionalParameters: {bool snap = false} , default:processed=BooleanLiteralImpl
    super.snap,

    /// optionalParameters: {List<double>? snapSizes} , default:none
    super.snapSizes,

    /// optionalParameters: {Duration? snapAnimationDuration} , default:none
    super.snapAnimationDuration,

    /// optionalParameters: {DraggableScrollableController? controller} , default:none
    super.controller,

    /// optionalParameters: {required Widget Function(BuildContext, ScrollController) builder} , default:none
    required super.builder,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'initialChildSize': _i2.BuilderArg<double>(
            name: 'initialChildSize',
            init: initialChildSize,
            isNamed: true,
            defaultValue: 0.5,
          ),
          'minChildSize': _i2.BuilderArg<double>(
            name: 'minChildSize',
            init: minChildSize,
            isNamed: true,
            defaultValue: 0.25,
          ),
          'maxChildSize': _i2.BuilderArg<double>(
            name: 'maxChildSize',
            init: maxChildSize,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'expand': _i2.BuilderArg<bool>(
            name: 'expand',
            init: expand,
            isNamed: true,
            defaultValue: true,
          ),
          'snap': _i2.BuilderArg<bool>(
            name: 'snap',
            init: snap,
            isNamed: true,
            defaultValue: false,
          ),
          'snapSizes': _i2.BuilderArg<List<double>?>(
            name: 'snapSizes',
            init: snapSizes,
            isNamed: true,
          ),
          'snapAnimationDuration': _i2.BuilderArg<Duration?>(
            name: 'snapAnimationDuration',
            init: snapAnimationDuration,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i1.DraggableScrollableController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'builder': _i2.BuilderArg<_i1.ScrollableWidgetBuilder>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DraggableScrollableSheet';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DraggableScrollableSheet$Mate(
          key: p.get('key').build(),
          initialChildSize: p.get('initialChildSize').build(),
          minChildSize: p.get('minChildSize').build(),
          maxChildSize: p.get('maxChildSize').build(),
          expand: p.get('expand').build(),
          snap: p.get('snap').build(),
          snapSizes: p.get('snapSizes').build(),
          snapAnimationDuration: p.get('snapAnimationDuration').build(),
          controller: p.get('controller').build(),
          builder: p.get('builder').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DraggableScrollableNotification extends Notification with ViewportNotificationMixin
class DraggableScrollableNotification$Mate
    extends _i1.DraggableScrollableNotification with _i2.Mate {
  /// DraggableScrollableNotification DraggableScrollableNotification({required double extent, required double minExtent, required double maxExtent, required double initialExtent, required BuildContext context})
  DraggableScrollableNotification$Mate({
    /// optionalParameters: {required double extent} , default:none
    required super.extent,

    /// optionalParameters: {required double minExtent} , default:none
    required super.minExtent,

    /// optionalParameters: {required double maxExtent} , default:none
    required super.maxExtent,

    /// optionalParameters: {required double initialExtent} , default:none
    required super.initialExtent,

    /// optionalParameters: {required BuildContext context} , default:none
    required super.context,
  })  : mateParams = {
          'extent': _i2.BuilderArg<double>(
            name: 'extent',
            init: extent,
            isNamed: true,
          ),
          'minExtent': _i2.BuilderArg<double>(
            name: 'minExtent',
            init: minExtent,
            isNamed: true,
          ),
          'maxExtent': _i2.BuilderArg<double>(
            name: 'maxExtent',
            init: maxExtent,
            isNamed: true,
          ),
          'initialExtent': _i2.BuilderArg<double>(
            name: 'initialExtent',
            init: initialExtent,
            isNamed: true,
          ),
          'context': _i2.BuilderArg<_i4.BuildContext>(
            name: 'context',
            init: context,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DraggableScrollableNotification';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DraggableScrollableNotification$Mate(
          extent: p.get('extent').build(),
          minExtent: p.get('minExtent').build(),
          maxExtent: p.get('maxExtent').build(),
          initialExtent: p.get('initialExtent').build(),
          context: p.get('context').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DraggableScrollableActuator extends StatelessWidget
class DraggableScrollableActuator$Mate extends _i1.DraggableScrollableActuator
    with _i2.Mate {
  /// DraggableScrollableActuator DraggableScrollableActuator({Key? key, required Widget child})
  DraggableScrollableActuator$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DraggableScrollableActuator';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DraggableScrollableActuator$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
