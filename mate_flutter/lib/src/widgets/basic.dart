// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/basic.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/rendering/proxy_box.dart' as _i6;
import 'package:flutter/src/rendering/custom_paint.dart' as _i7;
import 'package:flutter/animation.dart' as _i8;
import 'package:flutter/src/painting/border_radius.dart' as _i9;
import 'package:flutter/cupertino.dart' as _i10;
import 'package:flutter/src/painting/box_border.dart' as _i11;
import 'package:vector_math/vector_math_64.dart' as _i12;
import 'package:flutter/src/painting/alignment.dart' as _i13;
import 'package:flutter/src/rendering/layer.dart' as _i14;
import 'package:flutter/src/painting/box_fit.dart' as _i15;
import 'package:flutter/src/painting/edge_insets.dart' as _i16;
import 'package:flutter/src/rendering/shifted_box.dart' as _i17;
import 'package:flutter/src/rendering/custom_layout.dart' as _i18;
import 'package:flutter/src/rendering/box.dart' as _i19;
import 'package:flutter/src/painting/basic_types.dart' as _i20;
import 'package:flutter/src/rendering/stack.dart' as _i21;
import 'package:flutter/src/rendering/flex.dart' as _i22;
import 'package:flutter/src/rendering/wrap.dart' as _i23;
import 'package:flutter/src/rendering/flow.dart' as _i24;
import 'package:flutter/src/painting/inline_span.dart' as _i25;
import 'package:flutter/src/painting/text_painter.dart' as _i26;
import 'package:flutter/src/painting/text_scaler.dart' as _i27;
import 'package:flutter/src/painting/strut_style.dart' as _i28;
import 'package:flutter/src/rendering/selection.dart' as _i29;
import 'package:flutter/src/animation/animation.dart' as _i30;
import 'package:flutter/src/painting/decoration_image.dart' as _i31;
import 'package:flutter/src/services/asset_bundle.dart' as _i32;
import 'package:flutter/src/services/mouse_tracking.dart' as _i33;
import 'package:flutter/src/services/mouse_cursor.dart' as _i34;
import 'package:flutter/src/semantics/semantics.dart' as _i35;
export 'package:flutter/animation.dart';
export 'package:flutter/painting.dart';

/// class Directionality extends _UbiquitousInheritedWidget
class Directionality$Mate extends _i1.Directionality with _i2.Mate {
  /// Directionality Directionality({Key? key, required TextDirection textDirection, required Widget child})
  Directionality$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required TextDirection textDirection} , default:none
    required super.textDirection,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Directionality';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Directionality$Mate(
          key: p.get('key').build(),
          textDirection: p.get('textDirection').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Opacity extends SingleChildRenderObjectWidget
class Opacity$Mate extends _i1.Opacity with _i2.Mate {
  /// Opacity Opacity({Key? key, required double opacity, bool alwaysIncludeSemantics = false, Widget? child})
  Opacity$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double opacity} , default:none
    required super.opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.alwaysIncludeSemantics,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<double>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'alwaysIncludeSemantics': _i2.BuilderArg<bool>(
            name: 'alwaysIncludeSemantics',
            init: alwaysIncludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Opacity';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Opacity$Mate(
          key: p.get('key').build(),
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ShaderMask extends SingleChildRenderObjectWidget
class ShaderMask$Mate extends _i1.ShaderMask with _i2.Mate {
  /// ShaderMask ShaderMask({Key? key, required Shader Function(Rect) shaderCallback, BlendMode blendMode = BlendMode.modulate, Widget? child})
  ShaderMask$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Shader Function(Rect) shaderCallback} , default:none
    required super.shaderCallback,

    /// optionalParameters: {BlendMode blendMode = BlendMode.modulate} , default:processed=PrefixedIdentifierImpl
    super.blendMode,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'shaderCallback': _i2.BuilderArg<_i6.ShaderCallback>(
            name: 'shaderCallback',
            init: shaderCallback,
            isNamed: true,
          ),
          'blendMode': _i2.BuilderArg<_i4.BlendMode>(
            name: 'blendMode',
            init: blendMode,
            isNamed: true,
            defaultValue: _i4.BlendMode.modulate,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ShaderMask';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ShaderMask$Mate(
          key: p.get('key').build(),
          shaderCallback: p.get('shaderCallback').build(),
          blendMode: p.get('blendMode').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class BackdropFilter extends SingleChildRenderObjectWidget
class BackdropFilter$Mate extends _i1.BackdropFilter with _i2.Mate {
  /// BackdropFilter BackdropFilter({Key? key, required ImageFilter filter, Widget? child, BlendMode blendMode = BlendMode.srcOver})
  BackdropFilter$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ImageFilter filter} , default:none
    required super.filter,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {BlendMode blendMode = BlendMode.srcOver} , default:processed=PrefixedIdentifierImpl
    super.blendMode,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'filter': _i2.BuilderArg<_i4.ImageFilter>(
            name: 'filter',
            init: filter,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'blendMode': _i2.BuilderArg<_i4.BlendMode>(
            name: 'blendMode',
            init: blendMode,
            isNamed: true,
            defaultValue: _i4.BlendMode.srcOver,
          ),
        },
        super() {
    mateBuilderName = 'BackdropFilter';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BackdropFilter$Mate(
          key: p.get('key').build(),
          filter: p.get('filter').build(),
          child: p.get('child').build(),
          blendMode: p.get('blendMode').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CustomPaint extends SingleChildRenderObjectWidget
class CustomPaint$Mate extends _i1.CustomPaint with _i2.Mate {
  /// CustomPaint CustomPaint({Key? key, CustomPainter? painter, CustomPainter? foregroundPainter, Size size = Size.zero, bool isComplex = false, bool willChange = false, Widget? child})
  CustomPaint$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {CustomPainter? painter} , default:none
    super.painter,

    /// optionalParameters: {CustomPainter? foregroundPainter} , default:none
    super.foregroundPainter,

    /// optionalParameters: {Size size = Size.zero} , default:processed=PrefixedIdentifierImpl
    super.size,

    /// optionalParameters: {bool isComplex = false} , default:processed=BooleanLiteralImpl
    super.isComplex,

    /// optionalParameters: {bool willChange = false} , default:processed=BooleanLiteralImpl
    super.willChange,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'painter': _i2.BuilderArg<_i7.CustomPainter?>(
            name: 'painter',
            init: painter,
            isNamed: true,
          ),
          'foregroundPainter': _i2.BuilderArg<_i7.CustomPainter?>(
            name: 'foregroundPainter',
            init: foregroundPainter,
            isNamed: true,
          ),
          'size': _i2.BuilderArg<_i4.Size>(
            name: 'size',
            init: size,
            isNamed: true,
            defaultValue: _i8.Size.zero,
          ),
          'isComplex': _i2.BuilderArg<bool>(
            name: 'isComplex',
            init: isComplex,
            isNamed: true,
            defaultValue: false,
          ),
          'willChange': _i2.BuilderArg<bool>(
            name: 'willChange',
            init: willChange,
            isNamed: true,
            defaultValue: false,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CustomPaint';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CustomPaint$Mate(
          key: p.get('key').build(),
          painter: p.get('painter').build(),
          foregroundPainter: p.get('foregroundPainter').build(),
          size: p.get('size').build(),
          isComplex: p.get('isComplex').build(),
          willChange: p.get('willChange').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ClipRect extends SingleChildRenderObjectWidget
class ClipRect$Mate extends _i1.ClipRect with _i2.Mate {
  /// ClipRect ClipRect({Key? key, CustomClipper<Rect>? clipper, Clip clipBehavior = Clip.hardEdge, Widget? child})
  ClipRect$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {CustomClipper<Rect>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i6.CustomClipper<_i4.Rect>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.hardEdge,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ClipRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipRect$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ClipRRect extends SingleChildRenderObjectWidget
class ClipRRect$Mate extends _i1.ClipRRect with _i2.Mate {
  /// ClipRRect ClipRRect({Key? key, BorderRadiusGeometry borderRadius = BorderRadius.zero, CustomClipper<RRect>? clipper, Clip clipBehavior = Clip.antiAlias, Widget? child})
  ClipRRect$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {BorderRadiusGeometry borderRadius = BorderRadius.zero} , default:processed=PrefixedIdentifierImpl
    super.borderRadius,

    /// optionalParameters: {CustomClipper<RRect>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i9.BorderRadiusGeometry>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
            defaultValue: _i10.BorderRadius.zero,
          ),
          'clipper': _i2.BuilderArg<_i6.CustomClipper<_i4.RRect>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.antiAlias,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ClipRRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipRRect$Mate(
          key: p.get('key').build(),
          borderRadius: p.get('borderRadius').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ClipOval extends SingleChildRenderObjectWidget
class ClipOval$Mate extends _i1.ClipOval with _i2.Mate {
  /// ClipOval ClipOval({Key? key, CustomClipper<Rect>? clipper, Clip clipBehavior = Clip.antiAlias, Widget? child})
  ClipOval$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {CustomClipper<Rect>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i6.CustomClipper<_i4.Rect>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.antiAlias,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ClipOval';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipOval$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ClipPath extends SingleChildRenderObjectWidget
class ClipPath$Mate extends _i1.ClipPath with _i2.Mate {
  /// ClipPath ClipPath({Key? key, CustomClipper<Path>? clipper, Clip clipBehavior = Clip.antiAlias, Widget? child})
  ClipPath$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {CustomClipper<Path>? clipper} , default:none
    super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.antiAlias} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i6.CustomClipper<_i4.Path>?>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.antiAlias,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ClipPath';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipPath$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PhysicalModel extends SingleChildRenderObjectWidget
class PhysicalModel$Mate extends _i1.PhysicalModel with _i2.Mate {
  /// PhysicalModel PhysicalModel({Key? key, BoxShape shape = BoxShape.rectangle, Clip clipBehavior = Clip.none, BorderRadius? borderRadius, double elevation = 0.0, required Color color, Color shadowColor = const Color(0xFF000000), Widget? child})
  PhysicalModel$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {BoxShape shape = BoxShape.rectangle} , default:processed=PrefixedIdentifierImpl
    super.shape,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    super.borderRadius,

    /// optionalParameters: {double elevation = 0.0} , default:processed=DoubleLiteralImpl
    super.elevation,

    /// optionalParameters: {required Color color} , default:none
    required super.color,

    /// optionalParameters: {Color shadowColor = const Color(0xFF000000)} , default:unprocessed=InstanceCreationExpressionImpl
    super.shadowColor,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i11.BoxShape>(
            name: 'shape',
            init: shape,
            isNamed: true,
            defaultValue: _i10.BoxShape.rectangle,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
          'borderRadius': _i2.BuilderArg<_i9.BorderRadius?>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'color': _i2.BuilderArg<_i4.Color>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i4.Color>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PhysicalModel';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PhysicalModel$Mate(
          key: p.get('key').build(),
          shape: p.get('shape').build(),
          clipBehavior: p.get('clipBehavior').build(),
          borderRadius: p.get('borderRadius').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          shadowColor: p.get('shadowColor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PhysicalShape extends SingleChildRenderObjectWidget
class PhysicalShape$Mate extends _i1.PhysicalShape with _i2.Mate {
  /// PhysicalShape PhysicalShape({Key? key, required CustomClipper<Path> clipper, Clip clipBehavior = Clip.none, double elevation = 0.0, required Color color, Color shadowColor = const Color(0xFF000000), Widget? child})
  PhysicalShape$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required CustomClipper<Path> clipper} , default:none
    required super.clipper,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {double elevation = 0.0} , default:processed=DoubleLiteralImpl
    super.elevation,

    /// optionalParameters: {required Color color} , default:none
    required super.color,

    /// optionalParameters: {Color shadowColor = const Color(0xFF000000)} , default:unprocessed=InstanceCreationExpressionImpl
    super.shadowColor,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'clipper': _i2.BuilderArg<_i6.CustomClipper<_i4.Path>>(
            name: 'clipper',
            init: clipper,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
          'elevation': _i2.BuilderArg<double>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'color': _i2.BuilderArg<_i4.Color>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i4.Color>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PhysicalShape';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PhysicalShape$Mate(
          key: p.get('key').build(),
          clipper: p.get('clipper').build(),
          clipBehavior: p.get('clipBehavior').build(),
          elevation: p.get('elevation').build(),
          color: p.get('color').build(),
          shadowColor: p.get('shadowColor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Transform extends SingleChildRenderObjectWidget
class Transform$Mate extends _i1.Transform with _i2.Mate {
  /// Transform Transform({Key? key, required Matrix4 transform, Offset? origin, AlignmentGeometry? alignment, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Matrix4 transform} , default:none
    required super.transform,

    /// optionalParameters: {Offset? origin} , default:none
    super.origin,

    /// optionalParameters: {AlignmentGeometry? alignment} , default:none
    super.alignment,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'transform': _i2.BuilderArg<_i12.Matrix4>(
            name: 'transform',
            init: transform,
            isNamed: true,
          ),
          'origin': _i2.BuilderArg<_i4.Offset?>(
            name: 'origin',
            init: origin,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'filterQuality': _i2.BuilderArg<_i4.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Transform';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate(
          key: p.get('key').build(),
          transform: p.get('transform').build(),
          origin: p.get('origin').build(),
          alignment: p.get('alignment').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
  }

  /// Transform Transform.rotate({Key? key, required double angle, Offset? origin, AlignmentGeometry? alignment = Alignment.center, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.rotate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double angle} , default:none
    required super.angle,

    /// optionalParameters: {Offset? origin} , default:none
    super.origin,

    /// optionalParameters: {AlignmentGeometry? alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'angle': _i2.BuilderArg<double>(
            name: 'angle',
            init: angle,
            isNamed: true,
          ),
          'origin': _i2.BuilderArg<_i4.Offset?>(
            name: 'origin',
            init: origin,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'filterQuality': _i2.BuilderArg<_i4.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.rotate() {
    mateBuilderName = 'Transform.rotate';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.rotate(
          key: p.get('key').build(),
          angle: p.get('angle').build(),
          origin: p.get('origin').build(),
          alignment: p.get('alignment').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
  }

  /// Transform Transform.translate({Key? key, required Offset offset, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.translate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Offset offset} , default:none
    required super.offset,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'offset': _i2.BuilderArg<_i4.Offset>(
            name: 'offset',
            init: offset,
            isNamed: true,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'filterQuality': _i2.BuilderArg<_i4.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.translate() {
    mateBuilderName = 'Transform.translate';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.translate(
          key: p.get('key').build(),
          offset: p.get('offset').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
  }

  /// Transform Transform.scale({Key? key, double? scale, double? scaleX, double? scaleY, Offset? origin, AlignmentGeometry? alignment = Alignment.center, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.scale({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? scale} , default:none
    super.scale,

    /// optionalParameters: {double? scaleX} , default:none
    super.scaleX,

    /// optionalParameters: {double? scaleY} , default:none
    super.scaleY,

    /// optionalParameters: {Offset? origin} , default:none
    super.origin,

    /// optionalParameters: {AlignmentGeometry? alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'scale': _i2.BuilderArg<double?>(
            name: 'scale',
            init: scale,
            isNamed: true,
          ),
          'scaleX': _i2.BuilderArg<double?>(
            name: 'scaleX',
            init: scaleX,
            isNamed: true,
          ),
          'scaleY': _i2.BuilderArg<double?>(
            name: 'scaleY',
            init: scaleY,
            isNamed: true,
          ),
          'origin': _i2.BuilderArg<_i4.Offset?>(
            name: 'origin',
            init: origin,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry?>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'filterQuality': _i2.BuilderArg<_i4.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.scale() {
    mateBuilderName = 'Transform.scale';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.scale(
          key: p.get('key').build(),
          scale: p.get('scale').build(),
          scaleX: p.get('scaleX').build(),
          scaleY: p.get('scaleY').build(),
          origin: p.get('origin').build(),
          alignment: p.get('alignment').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
  }

  /// Transform Transform.flip({Key? key, bool flipX = false, bool flipY = false, Offset? origin, bool transformHitTests = true, FilterQuality? filterQuality, Widget? child})
  Transform$Mate.flip({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool flipX = false} , default:processed=BooleanLiteralImpl
    super.flipX,

    /// optionalParameters: {bool flipY = false} , default:processed=BooleanLiteralImpl
    super.flipY,

    /// optionalParameters: {Offset? origin} , default:none
    super.origin,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {FilterQuality? filterQuality} , default:none
    super.filterQuality,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'flipX': _i2.BuilderArg<bool>(
            name: 'flipX',
            init: flipX,
            isNamed: true,
            defaultValue: false,
          ),
          'flipY': _i2.BuilderArg<bool>(
            name: 'flipY',
            init: flipY,
            isNamed: true,
            defaultValue: false,
          ),
          'origin': _i2.BuilderArg<_i4.Offset?>(
            name: 'origin',
            init: origin,
            isNamed: true,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'filterQuality': _i2.BuilderArg<_i4.FilterQuality?>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.flip() {
    mateBuilderName = 'Transform.flip';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Transform$Mate.flip(
          key: p.get('key').build(),
          flipX: p.get('flipX').build(),
          flipY: p.get('flipY').build(),
          origin: p.get('origin').build(),
          transformHitTests: p.get('transformHitTests').build(),
          filterQuality: p.get('filterQuality').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CompositedTransformTarget extends SingleChildRenderObjectWidget
class CompositedTransformTarget$Mate extends _i1.CompositedTransformTarget with _i2.Mate {
  /// CompositedTransformTarget CompositedTransformTarget({Key? key, required LayerLink link, Widget? child})
  CompositedTransformTarget$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required LayerLink link} , default:none
    required super.link,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'link': _i2.BuilderArg<_i14.LayerLink>(
            name: 'link',
            init: link,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CompositedTransformTarget';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CompositedTransformTarget$Mate(
          key: p.get('key').build(),
          link: p.get('link').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CompositedTransformFollower extends SingleChildRenderObjectWidget
class CompositedTransformFollower$Mate extends _i1.CompositedTransformFollower with _i2.Mate {
  /// CompositedTransformFollower CompositedTransformFollower({Key? key, required LayerLink link, bool showWhenUnlinked = true, Offset offset = Offset.zero, Alignment targetAnchor = Alignment.topLeft, Alignment followerAnchor = Alignment.topLeft, Widget? child})
  CompositedTransformFollower$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required LayerLink link} , default:none
    required super.link,

    /// optionalParameters: {bool showWhenUnlinked = true} , default:processed=BooleanLiteralImpl
    super.showWhenUnlinked,

    /// optionalParameters: {Offset offset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    super.offset,

    /// optionalParameters: {Alignment targetAnchor = Alignment.topLeft} , default:processed=PrefixedIdentifierImpl
    super.targetAnchor,

    /// optionalParameters: {Alignment followerAnchor = Alignment.topLeft} , default:processed=PrefixedIdentifierImpl
    super.followerAnchor,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'link': _i2.BuilderArg<_i14.LayerLink>(
            name: 'link',
            init: link,
            isNamed: true,
          ),
          'showWhenUnlinked': _i2.BuilderArg<bool>(
            name: 'showWhenUnlinked',
            init: showWhenUnlinked,
            isNamed: true,
            defaultValue: true,
          ),
          'offset': _i2.BuilderArg<_i4.Offset>(
            name: 'offset',
            init: offset,
            isNamed: true,
            defaultValue: _i8.Offset.zero,
          ),
          'targetAnchor': _i2.BuilderArg<_i13.Alignment>(
            name: 'targetAnchor',
            init: targetAnchor,
            isNamed: true,
            defaultValue: _i10.Alignment.topLeft,
          ),
          'followerAnchor': _i2.BuilderArg<_i13.Alignment>(
            name: 'followerAnchor',
            init: followerAnchor,
            isNamed: true,
            defaultValue: _i10.Alignment.topLeft,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CompositedTransformFollower';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CompositedTransformFollower$Mate(
          key: p.get('key').build(),
          link: p.get('link').build(),
          showWhenUnlinked: p.get('showWhenUnlinked').build(),
          offset: p.get('offset').build(),
          targetAnchor: p.get('targetAnchor').build(),
          followerAnchor: p.get('followerAnchor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class FittedBox extends SingleChildRenderObjectWidget
class FittedBox$Mate extends _i1.FittedBox with _i2.Mate {
  /// FittedBox FittedBox({Key? key, BoxFit fit = BoxFit.contain, AlignmentGeometry alignment = Alignment.center, Clip clipBehavior = Clip.none, Widget? child})
  FittedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {BoxFit fit = BoxFit.contain} , default:processed=PrefixedIdentifierImpl
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i15.BoxFit>(
            name: 'fit',
            init: fit,
            isNamed: true,
            defaultValue: _i10.BoxFit.contain,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'FittedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FittedBox$Mate(
          key: p.get('key').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          clipBehavior: p.get('clipBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class FractionalTranslation extends SingleChildRenderObjectWidget
class FractionalTranslation$Mate extends _i1.FractionalTranslation with _i2.Mate {
  /// FractionalTranslation FractionalTranslation({Key? key, required Offset translation, bool transformHitTests = true, Widget? child})
  FractionalTranslation$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Offset translation} , default:none
    required super.translation,

    /// optionalParameters: {bool transformHitTests = true} , default:processed=BooleanLiteralImpl
    super.transformHitTests,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'translation': _i2.BuilderArg<_i4.Offset>(
            name: 'translation',
            init: translation,
            isNamed: true,
          ),
          'transformHitTests': _i2.BuilderArg<bool>(
            name: 'transformHitTests',
            init: transformHitTests,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'FractionalTranslation';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FractionalTranslation$Mate(
          key: p.get('key').build(),
          translation: p.get('translation').build(),
          transformHitTests: p.get('transformHitTests').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RotatedBox extends SingleChildRenderObjectWidget
class RotatedBox$Mate extends _i1.RotatedBox with _i2.Mate {
  /// RotatedBox RotatedBox({Key? key, required int quarterTurns, Widget? child})
  RotatedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required int quarterTurns} , default:none
    required super.quarterTurns,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'quarterTurns': _i2.BuilderArg<int>(
            name: 'quarterTurns',
            init: quarterTurns,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RotatedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RotatedBox$Mate(
          key: p.get('key').build(),
          quarterTurns: p.get('quarterTurns').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Padding extends SingleChildRenderObjectWidget
class Padding$Mate extends _i1.Padding with _i2.Mate {
  /// Padding Padding({Key? key, required EdgeInsetsGeometry padding, Widget? child})
  Padding$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required EdgeInsetsGeometry padding} , default:none
    required super.padding,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i16.EdgeInsetsGeometry>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Padding';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Padding$Mate(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Align extends SingleChildRenderObjectWidget
class Align$Mate extends _i1.Align with _i2.Mate {
  /// Align Align({Key? key, AlignmentGeometry alignment = Alignment.center, double? widthFactor, double? heightFactor, Widget? child})
  Align$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {double? widthFactor} , default:none
    super.widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    super.heightFactor,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'widthFactor': _i2.BuilderArg<double?>(
            name: 'widthFactor',
            init: widthFactor,
            isNamed: true,
          ),
          'heightFactor': _i2.BuilderArg<double?>(
            name: 'heightFactor',
            init: heightFactor,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Align';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Align$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Center extends Align
class Center$Mate extends _i1.Center with _i2.Mate {
  /// Center Center({Key? key, double? widthFactor, double? heightFactor, Widget? child})
  Center$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? widthFactor} , default:none
    super.widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    super.heightFactor,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'widthFactor': _i2.BuilderArg<double?>(
            name: 'widthFactor',
            init: widthFactor,
            isNamed: true,
          ),
          'heightFactor': _i2.BuilderArg<double?>(
            name: 'heightFactor',
            init: heightFactor,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Center';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Center$Mate(
          key: p.get('key').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CustomSingleChildLayout extends SingleChildRenderObjectWidget
class CustomSingleChildLayout$Mate extends _i1.CustomSingleChildLayout with _i2.Mate {
  /// CustomSingleChildLayout CustomSingleChildLayout({Key? key, required SingleChildLayoutDelegate delegate, Widget? child})
  CustomSingleChildLayout$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required SingleChildLayoutDelegate delegate} , default:none
    required super.delegate,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i17.SingleChildLayoutDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CustomSingleChildLayout';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CustomSingleChildLayout$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class LayoutId extends ParentDataWidget<MultiChildLayoutParentData>
class LayoutId$Mate extends _i1.LayoutId with _i2.Mate {
  /// LayoutId LayoutId({Key? key, required Object id, required Widget child})
  LayoutId$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Object id} , default:none
    required super.id,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'id': _i2.BuilderArg<Object>(
            name: 'id',
            init: id,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'LayoutId';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LayoutId$Mate(
          key: p.get('key').build(),
          id: p.get('id').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CustomMultiChildLayout extends MultiChildRenderObjectWidget
class CustomMultiChildLayout$Mate extends _i1.CustomMultiChildLayout with _i2.Mate {
  /// CustomMultiChildLayout CustomMultiChildLayout({Key? key, required MultiChildLayoutDelegate delegate, List<Widget> children = const <Widget>[]})
  CustomMultiChildLayout$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required MultiChildLayoutDelegate delegate} , default:none
    required super.delegate,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i18.MultiChildLayoutDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CustomMultiChildLayout';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => CustomMultiChildLayout$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SizedBox extends SingleChildRenderObjectWidget
class SizedBox$Mate extends _i1.SizedBox with _i2.Mate {
  /// SizedBox SizedBox({Key? key, double? width, double? height, Widget? child})
  SizedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SizedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate(
          key: p.get('key').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
  }

  /// SizedBox SizedBox.expand({Key? key, Widget? child})
  SizedBox$Mate.expand({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.expand() {
    mateBuilderName = 'SizedBox.expand';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.expand(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  /// SizedBox SizedBox.shrink({Key? key, Widget? child})
  SizedBox$Mate.shrink({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.shrink() {
    mateBuilderName = 'SizedBox.shrink';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.shrink(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  /// SizedBox SizedBox.fromSize({Key? key, Widget? child, Size? size})
  SizedBox$Mate.fromSize({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {Size? size} , default:none
    super.size,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'size': _i2.BuilderArg<_i4.Size?>(
            name: 'size',
            init: size,
            isNamed: true,
          ),
        },
        super.fromSize() {
    mateBuilderName = 'SizedBox.fromSize';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.fromSize(
          key: p.get('key').build(),
          child: p.get('child').build(),
          size: p.get('size').build(),
        );
  }

  /// SizedBox SizedBox.square({Key? key, Widget? child, double? dimension})
  SizedBox$Mate.square({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {double? dimension} , default:none
    super.dimension,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'dimension': _i2.BuilderArg<double?>(
            name: 'dimension',
            init: dimension,
            isNamed: true,
          ),
        },
        super.square() {
    mateBuilderName = 'SizedBox.square';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedBox$Mate.square(
          key: p.get('key').build(),
          child: p.get('child').build(),
          dimension: p.get('dimension').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ConstrainedBox extends SingleChildRenderObjectWidget
class ConstrainedBox$Mate extends _i1.ConstrainedBox with _i2.Mate {
  /// ConstrainedBox ConstrainedBox({Key? key, required BoxConstraints constraints, Widget? child})
  ConstrainedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required BoxConstraints constraints} , default:none
    required super.constraints,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i19.BoxConstraints>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ConstrainedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ConstrainedBox$Mate(
          key: p.get('key').build(),
          constraints: p.get('constraints').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ConstraintsTransformBox extends SingleChildRenderObjectWidget
class ConstraintsTransformBox$Mate extends _i1.ConstraintsTransformBox with _i2.Mate {
  /// ConstraintsTransformBox ConstraintsTransformBox({Key? key, Widget? child, TextDirection? textDirection, AlignmentGeometry alignment = Alignment.center, required BoxConstraints Function(BoxConstraints) constraintsTransform, Clip clipBehavior = Clip.none, String debugTransformType = ''})
  ConstraintsTransformBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {required BoxConstraints Function(BoxConstraints) constraintsTransform} , default:none
    required super.constraintsTransform,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {String debugTransformType = ''} , default:processed=SimpleStringLiteralImpl
    super.debugTransformType,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'constraintsTransform': _i2.BuilderArg<_i17.BoxConstraintsTransform>(
            name: 'constraintsTransform',
            init: constraintsTransform,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
          'debugTransformType': _i2.BuilderArg<String>(
            name: 'debugTransformType',
            init: debugTransformType,
            isNamed: true,
            defaultValue: '',
          ),
        },
        super() {
    mateBuilderName = 'ConstraintsTransformBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ConstraintsTransformBox$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          textDirection: p.get('textDirection').build(),
          alignment: p.get('alignment').build(),
          constraintsTransform: p.get('constraintsTransform').build(),
          clipBehavior: p.get('clipBehavior').build(),
          debugTransformType: p.get('debugTransformType').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class UnconstrainedBox extends StatelessWidget
class UnconstrainedBox$Mate extends _i1.UnconstrainedBox with _i2.Mate {
  /// UnconstrainedBox UnconstrainedBox({Key? key, Widget? child, TextDirection? textDirection, AlignmentGeometry alignment = Alignment.center, Axis? constrainedAxis, Clip clipBehavior = Clip.none})
  UnconstrainedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {Axis? constrainedAxis} , default:none
    super.constrainedAxis,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'constrainedAxis': _i2.BuilderArg<_i20.Axis?>(
            name: 'constrainedAxis',
            init: constrainedAxis,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
        },
        super() {
    mateBuilderName = 'UnconstrainedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => UnconstrainedBox$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          textDirection: p.get('textDirection').build(),
          alignment: p.get('alignment').build(),
          constrainedAxis: p.get('constrainedAxis').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class FractionallySizedBox extends SingleChildRenderObjectWidget
class FractionallySizedBox$Mate extends _i1.FractionallySizedBox with _i2.Mate {
  /// FractionallySizedBox FractionallySizedBox({Key? key, AlignmentGeometry alignment = Alignment.center, double? widthFactor, double? heightFactor, Widget? child})
  FractionallySizedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {double? widthFactor} , default:none
    super.widthFactor,

    /// optionalParameters: {double? heightFactor} , default:none
    super.heightFactor,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'widthFactor': _i2.BuilderArg<double?>(
            name: 'widthFactor',
            init: widthFactor,
            isNamed: true,
          ),
          'heightFactor': _i2.BuilderArg<double?>(
            name: 'heightFactor',
            init: heightFactor,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'FractionallySizedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => FractionallySizedBox$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          widthFactor: p.get('widthFactor').build(),
          heightFactor: p.get('heightFactor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class LimitedBox extends SingleChildRenderObjectWidget
class LimitedBox$Mate extends _i1.LimitedBox with _i2.Mate {
  /// LimitedBox LimitedBox({Key? key, double maxWidth = double.infinity, double maxHeight = double.infinity, Widget? child})
  LimitedBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double maxWidth = double.infinity} , default:processed=PrefixedIdentifierImpl
    super.maxWidth,

    /// optionalParameters: {double maxHeight = double.infinity} , default:processed=PrefixedIdentifierImpl
    super.maxHeight,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'maxWidth': _i2.BuilderArg<double>(
            name: 'maxWidth',
            init: maxWidth,
            isNamed: true,
            defaultValue: double.infinity,
          ),
          'maxHeight': _i2.BuilderArg<double>(
            name: 'maxHeight',
            init: maxHeight,
            isNamed: true,
            defaultValue: double.infinity,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'LimitedBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LimitedBox$Mate(
          key: p.get('key').build(),
          maxWidth: p.get('maxWidth').build(),
          maxHeight: p.get('maxHeight').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class OverflowBox extends SingleChildRenderObjectWidget
class OverflowBox$Mate extends _i1.OverflowBox with _i2.Mate {
  /// OverflowBox OverflowBox({Key? key, AlignmentGeometry alignment = Alignment.center, double? minWidth, double? maxWidth, double? minHeight, double? maxHeight, Widget? child})
  OverflowBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {double? minWidth} , default:none
    super.minWidth,

    /// optionalParameters: {double? maxWidth} , default:none
    super.maxWidth,

    /// optionalParameters: {double? minHeight} , default:none
    super.minHeight,

    /// optionalParameters: {double? maxHeight} , default:none
    super.maxHeight,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'minWidth': _i2.BuilderArg<double?>(
            name: 'minWidth',
            init: minWidth,
            isNamed: true,
          ),
          'maxWidth': _i2.BuilderArg<double?>(
            name: 'maxWidth',
            init: maxWidth,
            isNamed: true,
          ),
          'minHeight': _i2.BuilderArg<double?>(
            name: 'minHeight',
            init: minHeight,
            isNamed: true,
          ),
          'maxHeight': _i2.BuilderArg<double?>(
            name: 'maxHeight',
            init: maxHeight,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'OverflowBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => OverflowBox$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          minWidth: p.get('minWidth').build(),
          maxWidth: p.get('maxWidth').build(),
          minHeight: p.get('minHeight').build(),
          maxHeight: p.get('maxHeight').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SizedOverflowBox extends SingleChildRenderObjectWidget
class SizedOverflowBox$Mate extends _i1.SizedOverflowBox with _i2.Mate {
  /// SizedOverflowBox SizedOverflowBox({Key? key, required Size size, AlignmentGeometry alignment = Alignment.center, Widget? child})
  SizedOverflowBox$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Size size} , default:none
    required super.size,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'size': _i2.BuilderArg<_i4.Size>(
            name: 'size',
            init: size,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SizedOverflowBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SizedOverflowBox$Mate(
          key: p.get('key').build(),
          size: p.get('size').build(),
          alignment: p.get('alignment').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Offstage extends SingleChildRenderObjectWidget
class Offstage$Mate extends _i1.Offstage with _i2.Mate {
  /// Offstage Offstage({Key? key, bool offstage = true, Widget? child})
  Offstage$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool offstage = true} , default:processed=BooleanLiteralImpl
    super.offstage,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'offstage': _i2.BuilderArg<bool>(
            name: 'offstage',
            init: offstage,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Offstage';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Offstage$Mate(
          key: p.get('key').build(),
          offstage: p.get('offstage').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AspectRatio extends SingleChildRenderObjectWidget
class AspectRatio$Mate extends _i1.AspectRatio with _i2.Mate {
  /// AspectRatio AspectRatio({Key? key, required double aspectRatio, Widget? child})
  AspectRatio$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double aspectRatio} , default:none
    required super.aspectRatio,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'aspectRatio': _i2.BuilderArg<double>(
            name: 'aspectRatio',
            init: aspectRatio,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AspectRatio';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AspectRatio$Mate(
          key: p.get('key').build(),
          aspectRatio: p.get('aspectRatio').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IntrinsicWidth extends SingleChildRenderObjectWidget
class IntrinsicWidth$Mate extends _i1.IntrinsicWidth with _i2.Mate {
  /// IntrinsicWidth IntrinsicWidth({Key? key, double? stepWidth, double? stepHeight, Widget? child})
  IntrinsicWidth$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? stepWidth} , default:none
    super.stepWidth,

    /// optionalParameters: {double? stepHeight} , default:none
    super.stepHeight,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'stepWidth': _i2.BuilderArg<double?>(
            name: 'stepWidth',
            init: stepWidth,
            isNamed: true,
          ),
          'stepHeight': _i2.BuilderArg<double?>(
            name: 'stepHeight',
            init: stepHeight,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IntrinsicWidth';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IntrinsicWidth$Mate(
          key: p.get('key').build(),
          stepWidth: p.get('stepWidth').build(),
          stepHeight: p.get('stepHeight').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IntrinsicHeight extends SingleChildRenderObjectWidget
class IntrinsicHeight$Mate extends _i1.IntrinsicHeight with _i2.Mate {
  /// IntrinsicHeight IntrinsicHeight({Key? key, Widget? child})
  IntrinsicHeight$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IntrinsicHeight';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IntrinsicHeight$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Baseline extends SingleChildRenderObjectWidget
class Baseline$Mate extends _i1.Baseline with _i2.Mate {
  /// Baseline Baseline({Key? key, required double baseline, required TextBaseline baselineType, Widget? child})
  Baseline$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double baseline} , default:none
    required super.baseline,

    /// optionalParameters: {required TextBaseline baselineType} , default:none
    required super.baselineType,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'baseline': _i2.BuilderArg<double>(
            name: 'baseline',
            init: baseline,
            isNamed: true,
          ),
          'baselineType': _i2.BuilderArg<_i4.TextBaseline>(
            name: 'baselineType',
            init: baselineType,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Baseline';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Baseline$Mate(
          key: p.get('key').build(),
          baseline: p.get('baseline').build(),
          baselineType: p.get('baselineType').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IgnoreBaseline extends SingleChildRenderObjectWidget
class IgnoreBaseline$Mate extends _i1.IgnoreBaseline with _i2.Mate {
  /// IgnoreBaseline IgnoreBaseline({Key? key, Widget? child})
  IgnoreBaseline$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IgnoreBaseline';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IgnoreBaseline$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverToBoxAdapter extends SingleChildRenderObjectWidget
class SliverToBoxAdapter$Mate extends _i1.SliverToBoxAdapter with _i2.Mate {
  /// SliverToBoxAdapter SliverToBoxAdapter({Key? key, Widget? child})
  SliverToBoxAdapter$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverToBoxAdapter';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverToBoxAdapter$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverPadding extends SingleChildRenderObjectWidget
class SliverPadding$Mate extends _i1.SliverPadding with _i2.Mate {
  /// SliverPadding SliverPadding({Key? key, required EdgeInsetsGeometry padding, Widget? sliver})
  SliverPadding$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required EdgeInsetsGeometry padding} , default:none
    required super.padding,

    /// optionalParameters: {Widget? sliver} , default:none
    super.sliver,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i16.EdgeInsetsGeometry>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'sliver': _i2.BuilderArg<_i5.Widget?>(
            name: 'sliver',
            init: sliver,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverPadding';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverPadding$Mate(
          key: p.get('key').build(),
          padding: p.get('padding').build(),
          sliver: p.get('sliver').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ListBody extends MultiChildRenderObjectWidget
class ListBody$Mate extends _i1.ListBody with _i2.Mate {
  /// ListBody ListBody({Key? key, Axis mainAxis = Axis.vertical, bool reverse = false, List<Widget> children = const <Widget>[]})
  ListBody$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Axis mainAxis = Axis.vertical} , default:processed=PrefixedIdentifierImpl
    super.mainAxis,

    /// optionalParameters: {bool reverse = false} , default:processed=BooleanLiteralImpl
    super.reverse,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'mainAxis': _i2.BuilderArg<_i20.Axis>(
            name: 'mainAxis',
            init: mainAxis,
            isNamed: true,
            defaultValue: _i10.Axis.vertical,
          ),
          'reverse': _i2.BuilderArg<bool>(
            name: 'reverse',
            init: reverse,
            isNamed: true,
            defaultValue: false,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ListBody';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ListBody$Mate(
          key: p.get('key').build(),
          mainAxis: p.get('mainAxis').build(),
          reverse: p.get('reverse').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Stack extends MultiChildRenderObjectWidget
class Stack$Mate extends _i1.Stack with _i2.Mate {
  /// Stack Stack({Key? key, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, StackFit fit = StackFit.loose, Clip clipBehavior = Clip.hardEdge, List<Widget> children = const <Widget>[]})
  Stack$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {StackFit fit = StackFit.loose} , default:processed=PrefixedIdentifierImpl
    super.fit,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.AlignmentDirectional.topStart,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i21.StackFit>(
            name: 'fit',
            init: fit,
            isNamed: true,
            defaultValue: _i10.StackFit.loose,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.hardEdge,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Stack';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Stack$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          fit: p.get('fit').build(),
          clipBehavior: p.get('clipBehavior').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IndexedStack extends StatelessWidget
class IndexedStack$Mate extends _i1.IndexedStack with _i2.Mate {
  /// IndexedStack IndexedStack({Key? key, AlignmentGeometry alignment = AlignmentDirectional.topStart, TextDirection? textDirection, Clip clipBehavior = Clip.hardEdge, StackFit sizing = StackFit.loose, int? index = 0, List<Widget> children = const <Widget>[]})
  IndexedStack$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {AlignmentGeometry alignment = AlignmentDirectional.topStart} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {StackFit sizing = StackFit.loose} , default:processed=PrefixedIdentifierImpl
    super.sizing,

    /// optionalParameters: {int? index = 0} , default:processed=IntegerLiteralImpl
    super.index,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.AlignmentDirectional.topStart,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.hardEdge,
          ),
          'sizing': _i2.BuilderArg<_i21.StackFit>(
            name: 'sizing',
            init: sizing,
            isNamed: true,
            defaultValue: _i10.StackFit.loose,
          ),
          'index': _i2.BuilderArg<int?>(
            name: 'index',
            init: index,
            isNamed: true,
            defaultValue: 0,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IndexedStack';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IndexedStack$Mate(
          key: p.get('key').build(),
          alignment: p.get('alignment').build(),
          textDirection: p.get('textDirection').build(),
          clipBehavior: p.get('clipBehavior').build(),
          sizing: p.get('sizing').build(),
          index: p.get('index').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Positioned extends ParentDataWidget<StackParentData>
class Positioned$Mate extends _i1.Positioned with _i2.Mate {
  /// Positioned Positioned({Key? key, double? left, double? top, double? right, double? bottom, double? width, double? height, required Widget child})
  Positioned$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? left} , default:none
    super.left,

    /// optionalParameters: {double? top} , default:none
    super.top,

    /// optionalParameters: {double? right} , default:none
    super.right,

    /// optionalParameters: {double? bottom} , default:none
    super.bottom,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'left': _i2.BuilderArg<double?>(
            name: 'left',
            init: left,
            isNamed: true,
          ),
          'top': _i2.BuilderArg<double?>(
            name: 'top',
            init: top,
            isNamed: true,
          ),
          'right': _i2.BuilderArg<double?>(
            name: 'right',
            init: right,
            isNamed: true,
          ),
          'bottom': _i2.BuilderArg<double?>(
            name: 'bottom',
            init: bottom,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Positioned';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate(
          key: p.get('key').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
  }

  /// Positioned Positioned.fromRect({Key? key, required Rect rect, required Widget child})
  Positioned$Mate.fromRect({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Rect rect} , default:none
    required super.rect,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'rect': _i2.BuilderArg<_i4.Rect>(
            name: 'rect',
            init: rect,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.fromRect() {
    mateBuilderName = 'Positioned.fromRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate.fromRect(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          child: p.get('child').build(),
        );
  }

  /// Positioned Positioned.fromRelativeRect({Key? key, required RelativeRect rect, required Widget child})
  Positioned$Mate.fromRelativeRect({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required RelativeRect rect} , default:none
    required super.rect,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'rect': _i2.BuilderArg<_i21.RelativeRect>(
            name: 'rect',
            init: rect,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.fromRelativeRect() {
    mateBuilderName = 'Positioned.fromRelativeRect';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate.fromRelativeRect(
          key: p.get('key').build(),
          rect: p.get('rect').build(),
          child: p.get('child').build(),
        );
  }

  /// Positioned Positioned.fill({Key? key, double? left = 0.0, double? top = 0.0, double? right = 0.0, double? bottom = 0.0, required Widget child})
  Positioned$Mate.fill({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? left = 0.0} , default:processed=DoubleLiteralImpl
    super.left,

    /// optionalParameters: {double? top = 0.0} , default:processed=DoubleLiteralImpl
    super.top,

    /// optionalParameters: {double? right = 0.0} , default:processed=DoubleLiteralImpl
    super.right,

    /// optionalParameters: {double? bottom = 0.0} , default:processed=DoubleLiteralImpl
    super.bottom,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'left': _i2.BuilderArg<double?>(
            name: 'left',
            init: left,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'top': _i2.BuilderArg<double?>(
            name: 'top',
            init: top,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'right': _i2.BuilderArg<double?>(
            name: 'right',
            init: right,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'bottom': _i2.BuilderArg<double?>(
            name: 'bottom',
            init: bottom,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.fill() {
    mateBuilderName = 'Positioned.fill';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Positioned$Mate.fill(
          key: p.get('key').build(),
          left: p.get('left').build(),
          top: p.get('top').build(),
          right: p.get('right').build(),
          bottom: p.get('bottom').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PositionedDirectional extends StatelessWidget
class PositionedDirectional$Mate extends _i1.PositionedDirectional with _i2.Mate {
  /// PositionedDirectional PositionedDirectional({Key? key, double? start, double? top, double? end, double? bottom, double? width, double? height, required Widget child})
  PositionedDirectional$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double? start} , default:none
    super.start,

    /// optionalParameters: {double? top} , default:none
    super.top,

    /// optionalParameters: {double? end} , default:none
    super.end,

    /// optionalParameters: {double? bottom} , default:none
    super.bottom,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'start': _i2.BuilderArg<double?>(
            name: 'start',
            init: start,
            isNamed: true,
          ),
          'top': _i2.BuilderArg<double?>(
            name: 'top',
            init: top,
            isNamed: true,
          ),
          'end': _i2.BuilderArg<double?>(
            name: 'end',
            init: end,
            isNamed: true,
          ),
          'bottom': _i2.BuilderArg<double?>(
            name: 'bottom',
            init: bottom,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PositionedDirectional';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PositionedDirectional$Mate(
          key: p.get('key').build(),
          start: p.get('start').build(),
          top: p.get('top').build(),
          end: p.get('end').build(),
          bottom: p.get('bottom').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Flex extends MultiChildRenderObjectWidget
class Flex$Mate extends _i1.Flex with _i2.Mate {
  /// Flex Flex({Key? key, required Axis direction, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.max, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline? textBaseline, Clip clipBehavior = Clip.none, List<Widget> children = const <Widget>[]})
  Flex$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Axis direction} , default:none
    required super.direction,

    /// optionalParameters: {MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start} , default:processed=PrefixedIdentifierImpl
    super.mainAxisAlignment,

    /// optionalParameters: {MainAxisSize mainAxisSize = MainAxisSize.max} , default:processed=PrefixedIdentifierImpl
    super.mainAxisSize,

    /// optionalParameters: {CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center} , default:processed=PrefixedIdentifierImpl
    super.crossAxisAlignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    super.verticalDirection,

    /// optionalParameters: {TextBaseline? textBaseline} , default:none
    super.textBaseline,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'direction': _i2.BuilderArg<_i20.Axis>(
            name: 'direction',
            init: direction,
            isNamed: true,
          ),
          'mainAxisAlignment': _i2.BuilderArg<_i22.MainAxisAlignment>(
            name: 'mainAxisAlignment',
            init: mainAxisAlignment,
            isNamed: true,
            defaultValue: _i10.MainAxisAlignment.start,
          ),
          'mainAxisSize': _i2.BuilderArg<_i22.MainAxisSize>(
            name: 'mainAxisSize',
            init: mainAxisSize,
            isNamed: true,
            defaultValue: _i10.MainAxisSize.max,
          ),
          'crossAxisAlignment': _i2.BuilderArg<_i22.CrossAxisAlignment>(
            name: 'crossAxisAlignment',
            init: crossAxisAlignment,
            isNamed: true,
            defaultValue: _i10.CrossAxisAlignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'verticalDirection': _i2.BuilderArg<_i20.VerticalDirection>(
            name: 'verticalDirection',
            init: verticalDirection,
            isNamed: true,
            defaultValue: _i10.VerticalDirection.down,
          ),
          'textBaseline': _i2.BuilderArg<_i4.TextBaseline?>(
            name: 'textBaseline',
            init: textBaseline,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Flex';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flex$Mate(
          key: p.get('key').build(),
          direction: p.get('direction').build(),
          mainAxisAlignment: p.get('mainAxisAlignment').build(),
          mainAxisSize: p.get('mainAxisSize').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          textBaseline: p.get('textBaseline').build(),
          clipBehavior: p.get('clipBehavior').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Row extends Flex
class Row$Mate extends _i1.Row with _i2.Mate {
  /// Row Row({Key? key, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.max, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline? textBaseline, List<Widget> children = const <Widget>[]})
  Row$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start} , default:processed=PrefixedIdentifierImpl
    super.mainAxisAlignment,

    /// optionalParameters: {MainAxisSize mainAxisSize = MainAxisSize.max} , default:processed=PrefixedIdentifierImpl
    super.mainAxisSize,

    /// optionalParameters: {CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center} , default:processed=PrefixedIdentifierImpl
    super.crossAxisAlignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    super.verticalDirection,

    /// optionalParameters: {TextBaseline? textBaseline} , default:none
    super.textBaseline,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'mainAxisAlignment': _i2.BuilderArg<_i22.MainAxisAlignment>(
            name: 'mainAxisAlignment',
            init: mainAxisAlignment,
            isNamed: true,
            defaultValue: _i10.MainAxisAlignment.start,
          ),
          'mainAxisSize': _i2.BuilderArg<_i22.MainAxisSize>(
            name: 'mainAxisSize',
            init: mainAxisSize,
            isNamed: true,
            defaultValue: _i10.MainAxisSize.max,
          ),
          'crossAxisAlignment': _i2.BuilderArg<_i22.CrossAxisAlignment>(
            name: 'crossAxisAlignment',
            init: crossAxisAlignment,
            isNamed: true,
            defaultValue: _i10.CrossAxisAlignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'verticalDirection': _i2.BuilderArg<_i20.VerticalDirection>(
            name: 'verticalDirection',
            init: verticalDirection,
            isNamed: true,
            defaultValue: _i10.VerticalDirection.down,
          ),
          'textBaseline': _i2.BuilderArg<_i4.TextBaseline?>(
            name: 'textBaseline',
            init: textBaseline,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Row';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Row$Mate(
          key: p.get('key').build(),
          mainAxisAlignment: p.get('mainAxisAlignment').build(),
          mainAxisSize: p.get('mainAxisSize').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          textBaseline: p.get('textBaseline').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Column extends Flex
class Column$Mate extends _i1.Column with _i2.Mate {
  /// Column Column({Key? key, MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start, MainAxisSize mainAxisSize = MainAxisSize.max, CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, TextBaseline? textBaseline, List<Widget> children = const <Widget>[]})
  Column$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {MainAxisAlignment mainAxisAlignment = MainAxisAlignment.start} , default:processed=PrefixedIdentifierImpl
    super.mainAxisAlignment,

    /// optionalParameters: {MainAxisSize mainAxisSize = MainAxisSize.max} , default:processed=PrefixedIdentifierImpl
    super.mainAxisSize,

    /// optionalParameters: {CrossAxisAlignment crossAxisAlignment = CrossAxisAlignment.center} , default:processed=PrefixedIdentifierImpl
    super.crossAxisAlignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    super.verticalDirection,

    /// optionalParameters: {TextBaseline? textBaseline} , default:none
    super.textBaseline,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'mainAxisAlignment': _i2.BuilderArg<_i22.MainAxisAlignment>(
            name: 'mainAxisAlignment',
            init: mainAxisAlignment,
            isNamed: true,
            defaultValue: _i10.MainAxisAlignment.start,
          ),
          'mainAxisSize': _i2.BuilderArg<_i22.MainAxisSize>(
            name: 'mainAxisSize',
            init: mainAxisSize,
            isNamed: true,
            defaultValue: _i10.MainAxisSize.max,
          ),
          'crossAxisAlignment': _i2.BuilderArg<_i22.CrossAxisAlignment>(
            name: 'crossAxisAlignment',
            init: crossAxisAlignment,
            isNamed: true,
            defaultValue: _i10.CrossAxisAlignment.center,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'verticalDirection': _i2.BuilderArg<_i20.VerticalDirection>(
            name: 'verticalDirection',
            init: verticalDirection,
            isNamed: true,
            defaultValue: _i10.VerticalDirection.down,
          ),
          'textBaseline': _i2.BuilderArg<_i4.TextBaseline?>(
            name: 'textBaseline',
            init: textBaseline,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Column';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Column$Mate(
          key: p.get('key').build(),
          mainAxisAlignment: p.get('mainAxisAlignment').build(),
          mainAxisSize: p.get('mainAxisSize').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          textBaseline: p.get('textBaseline').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Flexible extends ParentDataWidget<FlexParentData>
class Flexible$Mate extends _i1.Flexible with _i2.Mate {
  /// Flexible Flexible({Key? key, int flex = 1, FlexFit fit = FlexFit.loose, required Widget child})
  Flexible$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {int flex = 1} , default:processed=IntegerLiteralImpl
    super.flex,

    /// optionalParameters: {FlexFit fit = FlexFit.loose} , default:processed=PrefixedIdentifierImpl
    super.fit,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'flex': _i2.BuilderArg<int>(
            name: 'flex',
            init: flex,
            isNamed: true,
            defaultValue: 1,
          ),
          'fit': _i2.BuilderArg<_i22.FlexFit>(
            name: 'fit',
            init: fit,
            isNamed: true,
            defaultValue: _i10.FlexFit.loose,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Flexible';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flexible$Mate(
          key: p.get('key').build(),
          flex: p.get('flex').build(),
          fit: p.get('fit').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Expanded extends Flexible
class Expanded$Mate extends _i1.Expanded with _i2.Mate {
  /// Expanded Expanded({Key? key, int flex = 1, required Widget child})
  Expanded$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {int flex = 1} , default:processed=IntegerLiteralImpl
    super.flex,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'flex': _i2.BuilderArg<int>(
            name: 'flex',
            init: flex,
            isNamed: true,
            defaultValue: 1,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Expanded';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Expanded$Mate(
          key: p.get('key').build(),
          flex: p.get('flex').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Wrap extends MultiChildRenderObjectWidget
class Wrap$Mate extends _i1.Wrap with _i2.Mate {
  /// Wrap Wrap({Key? key, Axis direction = Axis.horizontal, WrapAlignment alignment = WrapAlignment.start, double spacing = 0.0, WrapAlignment runAlignment = WrapAlignment.start, double runSpacing = 0.0, WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start, TextDirection? textDirection, VerticalDirection verticalDirection = VerticalDirection.down, Clip clipBehavior = Clip.none, List<Widget> children = const <Widget>[]})
  Wrap$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Axis direction = Axis.horizontal} , default:processed=PrefixedIdentifierImpl
    super.direction,

    /// optionalParameters: {WrapAlignment alignment = WrapAlignment.start} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {double spacing = 0.0} , default:processed=DoubleLiteralImpl
    super.spacing,

    /// optionalParameters: {WrapAlignment runAlignment = WrapAlignment.start} , default:processed=PrefixedIdentifierImpl
    super.runAlignment,

    /// optionalParameters: {double runSpacing = 0.0} , default:processed=DoubleLiteralImpl
    super.runSpacing,

    /// optionalParameters: {WrapCrossAlignment crossAxisAlignment = WrapCrossAlignment.start} , default:processed=PrefixedIdentifierImpl
    super.crossAxisAlignment,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {VerticalDirection verticalDirection = VerticalDirection.down} , default:processed=PrefixedIdentifierImpl
    super.verticalDirection,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'direction': _i2.BuilderArg<_i20.Axis>(
            name: 'direction',
            init: direction,
            isNamed: true,
            defaultValue: _i10.Axis.horizontal,
          ),
          'alignment': _i2.BuilderArg<_i23.WrapAlignment>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.WrapAlignment.start,
          ),
          'spacing': _i2.BuilderArg<double>(
            name: 'spacing',
            init: spacing,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'runAlignment': _i2.BuilderArg<_i23.WrapAlignment>(
            name: 'runAlignment',
            init: runAlignment,
            isNamed: true,
            defaultValue: _i10.WrapAlignment.start,
          ),
          'runSpacing': _i2.BuilderArg<double>(
            name: 'runSpacing',
            init: runSpacing,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'crossAxisAlignment': _i2.BuilderArg<_i23.WrapCrossAlignment>(
            name: 'crossAxisAlignment',
            init: crossAxisAlignment,
            isNamed: true,
            defaultValue: _i10.WrapCrossAlignment.start,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'verticalDirection': _i2.BuilderArg<_i20.VerticalDirection>(
            name: 'verticalDirection',
            init: verticalDirection,
            isNamed: true,
            defaultValue: _i10.VerticalDirection.down,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Wrap';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Wrap$Mate(
          key: p.get('key').build(),
          direction: p.get('direction').build(),
          alignment: p.get('alignment').build(),
          spacing: p.get('spacing').build(),
          runAlignment: p.get('runAlignment').build(),
          runSpacing: p.get('runSpacing').build(),
          crossAxisAlignment: p.get('crossAxisAlignment').build(),
          textDirection: p.get('textDirection').build(),
          verticalDirection: p.get('verticalDirection').build(),
          clipBehavior: p.get('clipBehavior').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Flow extends MultiChildRenderObjectWidget
class Flow$Mate extends _i1.Flow with _i2.Mate {
  /// Flow Flow({Key? key, required FlowDelegate delegate, List<Widget> children = const <Widget>[], Clip clipBehavior = Clip.hardEdge})
  Flow$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required FlowDelegate delegate} , default:none
    required super.delegate,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i24.FlowDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.hardEdge,
          ),
        },
        super() {
    mateBuilderName = 'Flow';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flow$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          children: p.get('children').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  /// Flow Flow.unwrapped({Key? key, required FlowDelegate delegate, List<Widget> children = const <Widget>[], Clip clipBehavior = Clip.hardEdge})
  Flow$Mate.unwrapped({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required FlowDelegate delegate} , default:none
    required super.delegate,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i24.FlowDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.hardEdge,
          ),
        },
        super.unwrapped() {
    mateBuilderName = 'Flow.unwrapped';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Flow$Mate.unwrapped(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          children: p.get('children').build(),
          clipBehavior: p.get('clipBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RichText extends MultiChildRenderObjectWidget
class RichText$Mate extends _i1.RichText with _i2.Mate {
  /// RichText RichText({Key? key, required InlineSpan text, TextAlign textAlign = TextAlign.start, TextDirection? textDirection, bool softWrap = true, TextOverflow overflow = TextOverflow.clip, double textScaleFactor = 1.0, TextScaler textScaler = TextScaler.noScaling, int? maxLines, Locale? locale, StrutStyle? strutStyle, TextWidthBasis textWidthBasis = TextWidthBasis.parent, TextHeightBehavior? textHeightBehavior, SelectionRegistrar? selectionRegistrar, Color? selectionColor})
  RichText$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required InlineSpan text} , default:none
    required super.text,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , default:processed=PrefixedIdentifierImpl
    super.textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {bool softWrap = true} , default:processed=BooleanLiteralImpl
    super.softWrap,

    /// optionalParameters: {TextOverflow overflow = TextOverflow.clip} , default:processed=PrefixedIdentifierImpl
    super.overflow,

    /// optionalParameters: {TextScaler textScaler = TextScaler.noScaling} , default:processed=PrefixedIdentifierImpl
    super.textScaler,

    /// optionalParameters: {int? maxLines} , default:none
    super.maxLines,

    /// optionalParameters: {Locale? locale} , default:none
    super.locale,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:processed=PrefixedIdentifierImpl
    super.textWidthBasis,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {SelectionRegistrar? selectionRegistrar} , default:none
    super.selectionRegistrar,

    /// optionalParameters: {Color? selectionColor} , default:none
    super.selectionColor,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'text': _i2.BuilderArg<_i25.InlineSpan>(
            name: 'text',
            init: text,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i4.TextAlign>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
            defaultValue: _i4.TextAlign.start,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'softWrap': _i2.BuilderArg<bool>(
            name: 'softWrap',
            init: softWrap,
            isNamed: true,
            defaultValue: true,
          ),
          'overflow': _i2.BuilderArg<_i26.TextOverflow>(
            name: 'overflow',
            init: overflow,
            isNamed: true,
            defaultValue: _i10.TextOverflow.clip,
          ),
          'textScaler': _i2.BuilderArg<_i27.TextScaler>(
            name: 'textScaler',
            init: textScaler,
            isNamed: true,
            defaultValue: _i10.TextScaler.noScaling,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
          ),
          'locale': _i2.BuilderArg<_i4.Locale?>(
            name: 'locale',
            init: locale,
            isNamed: true,
          ),
          'strutStyle': _i2.BuilderArg<_i28.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i26.TextWidthBasis>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
            defaultValue: _i10.TextWidthBasis.parent,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i4.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'selectionRegistrar': _i2.BuilderArg<_i29.SelectionRegistrar?>(
            name: 'selectionRegistrar',
            init: selectionRegistrar,
            isNamed: true,
          ),
          'selectionColor': _i2.BuilderArg<_i4.Color?>(
            name: 'selectionColor',
            init: selectionColor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RichText';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RichText$Mate(
          key: p.get('key').build(),
          text: p.get('text').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          softWrap: p.get('softWrap').build(),
          overflow: p.get('overflow').build(),
          textScaler: p.get('textScaler').build(),
          maxLines: p.get('maxLines').build(),
          locale: p.get('locale').build(),
          strutStyle: p.get('strutStyle').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          selectionRegistrar: p.get('selectionRegistrar').build(),
          selectionColor: p.get('selectionColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RawImage extends LeafRenderObjectWidget
class RawImage$Mate extends _i1.RawImage with _i2.Mate {
  /// RawImage RawImage({Key? key, Image? image, String? debugImageLabel, double? width, double? height, double scale = 1.0, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, bool matchTextDirection = false, bool invertColors = false, FilterQuality filterQuality = FilterQuality.low, bool isAntiAlias = false})
  RawImage$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Image? image} , default:none
    super.image,

    /// optionalParameters: {String? debugImageLabel} , default:none
    super.debugImageLabel,

    /// optionalParameters: {double? width} , default:none
    super.width,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {double scale = 1.0} , default:processed=DoubleLiteralImpl
    super.scale,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Animation<double>? opacity} , default:none
    super.opacity,

    /// optionalParameters: {BlendMode? colorBlendMode} , default:none
    super.colorBlendMode,

    /// optionalParameters: {BoxFit? fit} , default:none
    super.fit,

    /// optionalParameters: {AlignmentGeometry alignment = Alignment.center} , default:processed=PrefixedIdentifierImpl
    super.alignment,

    /// optionalParameters: {ImageRepeat repeat = ImageRepeat.noRepeat} , default:processed=PrefixedIdentifierImpl
    super.repeat,

    /// optionalParameters: {Rect? centerSlice} , default:none
    super.centerSlice,

    /// optionalParameters: {bool matchTextDirection = false} , default:processed=BooleanLiteralImpl
    super.matchTextDirection,

    /// optionalParameters: {bool invertColors = false} , default:processed=BooleanLiteralImpl
    super.invertColors,

    /// optionalParameters: {FilterQuality filterQuality = FilterQuality.low} , default:processed=PrefixedIdentifierImpl
    super.filterQuality,

    /// optionalParameters: {bool isAntiAlias = false} , default:processed=BooleanLiteralImpl
    super.isAntiAlias,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'image': _i2.BuilderArg<_i4.Image?>(
            name: 'image',
            init: image,
            isNamed: true,
          ),
          'debugImageLabel': _i2.BuilderArg<String?>(
            name: 'debugImageLabel',
            init: debugImageLabel,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double?>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'scale': _i2.BuilderArg<double>(
            name: 'scale',
            init: scale,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'color': _i2.BuilderArg<_i4.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<_i30.Animation<double>?>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'colorBlendMode': _i2.BuilderArg<_i4.BlendMode?>(
            name: 'colorBlendMode',
            init: colorBlendMode,
            isNamed: true,
          ),
          'fit': _i2.BuilderArg<_i15.BoxFit?>(
            name: 'fit',
            init: fit,
            isNamed: true,
          ),
          'alignment': _i2.BuilderArg<_i13.AlignmentGeometry>(
            name: 'alignment',
            init: alignment,
            isNamed: true,
            defaultValue: _i10.Alignment.center,
          ),
          'repeat': _i2.BuilderArg<_i31.ImageRepeat>(
            name: 'repeat',
            init: repeat,
            isNamed: true,
            defaultValue: _i10.ImageRepeat.noRepeat,
          ),
          'centerSlice': _i2.BuilderArg<_i4.Rect?>(
            name: 'centerSlice',
            init: centerSlice,
            isNamed: true,
          ),
          'matchTextDirection': _i2.BuilderArg<bool>(
            name: 'matchTextDirection',
            init: matchTextDirection,
            isNamed: true,
            defaultValue: false,
          ),
          'invertColors': _i2.BuilderArg<bool>(
            name: 'invertColors',
            init: invertColors,
            isNamed: true,
            defaultValue: false,
          ),
          'filterQuality': _i2.BuilderArg<_i4.FilterQuality>(
            name: 'filterQuality',
            init: filterQuality,
            isNamed: true,
            defaultValue: _i4.FilterQuality.low,
          ),
          'isAntiAlias': _i2.BuilderArg<bool>(
            name: 'isAntiAlias',
            init: isAntiAlias,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'RawImage';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RawImage$Mate(
          key: p.get('key').build(),
          image: p.get('image').build(),
          debugImageLabel: p.get('debugImageLabel').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          scale: p.get('scale').build(),
          color: p.get('color').build(),
          opacity: p.get('opacity').build(),
          colorBlendMode: p.get('colorBlendMode').build(),
          fit: p.get('fit').build(),
          alignment: p.get('alignment').build(),
          repeat: p.get('repeat').build(),
          centerSlice: p.get('centerSlice').build(),
          matchTextDirection: p.get('matchTextDirection').build(),
          invertColors: p.get('invertColors').build(),
          filterQuality: p.get('filterQuality').build(),
          isAntiAlias: p.get('isAntiAlias').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DefaultAssetBundle extends InheritedWidget
class DefaultAssetBundle$Mate extends _i1.DefaultAssetBundle with _i2.Mate {
  /// DefaultAssetBundle DefaultAssetBundle({Key? key, required AssetBundle bundle, required Widget child})
  DefaultAssetBundle$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required AssetBundle bundle} , default:none
    required super.bundle,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'bundle': _i2.BuilderArg<_i32.AssetBundle>(
            name: 'bundle',
            init: bundle,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DefaultAssetBundle';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => DefaultAssetBundle$Mate(
          key: p.get('key').build(),
          bundle: p.get('bundle').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class WidgetToRenderBoxAdapter extends LeafRenderObjectWidget
class WidgetToRenderBoxAdapter$Mate extends _i1.WidgetToRenderBoxAdapter with _i2.Mate {
  /// WidgetToRenderBoxAdapter WidgetToRenderBoxAdapter({required RenderBox renderBox, void Function()? onBuild, void Function()? onUnmount})
  WidgetToRenderBoxAdapter$Mate({
    /// optionalParameters: {required RenderBox renderBox} , default:none
    required super.renderBox,

    /// optionalParameters: {void Function()? onBuild} , default:none
    super.onBuild,

    /// optionalParameters: {void Function()? onUnmount} , default:none
    super.onUnmount,
  })  : mateParams = {
          'renderBox': _i2.BuilderArg<_i19.RenderBox>(
            name: 'renderBox',
            init: renderBox,
            isNamed: true,
          ),
          'onBuild': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onBuild',
            init: onBuild,
            isNamed: true,
          ),
          'onUnmount': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onUnmount',
            init: onUnmount,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'WidgetToRenderBoxAdapter';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => WidgetToRenderBoxAdapter$Mate(
          renderBox: p.get('renderBox').build(),
          onBuild: p.get('onBuild').build(),
          onUnmount: p.get('onUnmount').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Listener extends SingleChildRenderObjectWidget
class Listener$Mate extends _i1.Listener with _i2.Mate {
  /// Listener Listener({Key? key, void Function(PointerDownEvent)? onPointerDown, void Function(PointerMoveEvent)? onPointerMove, void Function(PointerUpEvent)? onPointerUp, void Function(PointerHoverEvent)? onPointerHover, void Function(PointerCancelEvent)? onPointerCancel, void Function(PointerPanZoomStartEvent)? onPointerPanZoomStart, void Function(PointerPanZoomUpdateEvent)? onPointerPanZoomUpdate, void Function(PointerPanZoomEndEvent)? onPointerPanZoomEnd, void Function(PointerSignalEvent)? onPointerSignal, HitTestBehavior behavior = HitTestBehavior.deferToChild, Widget? child})
  Listener$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {void Function(PointerDownEvent)? onPointerDown} , default:none
    super.onPointerDown,

    /// optionalParameters: {void Function(PointerMoveEvent)? onPointerMove} , default:none
    super.onPointerMove,

    /// optionalParameters: {void Function(PointerUpEvent)? onPointerUp} , default:none
    super.onPointerUp,

    /// optionalParameters: {void Function(PointerHoverEvent)? onPointerHover} , default:none
    super.onPointerHover,

    /// optionalParameters: {void Function(PointerCancelEvent)? onPointerCancel} , default:none
    super.onPointerCancel,

    /// optionalParameters: {void Function(PointerPanZoomStartEvent)? onPointerPanZoomStart} , default:none
    super.onPointerPanZoomStart,

    /// optionalParameters: {void Function(PointerPanZoomUpdateEvent)? onPointerPanZoomUpdate} , default:none
    super.onPointerPanZoomUpdate,

    /// optionalParameters: {void Function(PointerPanZoomEndEvent)? onPointerPanZoomEnd} , default:none
    super.onPointerPanZoomEnd,

    /// optionalParameters: {void Function(PointerSignalEvent)? onPointerSignal} , default:none
    super.onPointerSignal,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    super.behavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'onPointerDown': _i2.BuilderArg<_i6.PointerDownEventListener?>(
            name: 'onPointerDown',
            init: onPointerDown,
            isNamed: true,
          ),
          'onPointerMove': _i2.BuilderArg<_i6.PointerMoveEventListener?>(
            name: 'onPointerMove',
            init: onPointerMove,
            isNamed: true,
          ),
          'onPointerUp': _i2.BuilderArg<_i6.PointerUpEventListener?>(
            name: 'onPointerUp',
            init: onPointerUp,
            isNamed: true,
          ),
          'onPointerHover': _i2.BuilderArg<_i33.PointerHoverEventListener?>(
            name: 'onPointerHover',
            init: onPointerHover,
            isNamed: true,
          ),
          'onPointerCancel': _i2.BuilderArg<_i6.PointerCancelEventListener?>(
            name: 'onPointerCancel',
            init: onPointerCancel,
            isNamed: true,
          ),
          'onPointerPanZoomStart': _i2.BuilderArg<_i6.PointerPanZoomStartEventListener?>(
            name: 'onPointerPanZoomStart',
            init: onPointerPanZoomStart,
            isNamed: true,
          ),
          'onPointerPanZoomUpdate': _i2.BuilderArg<_i6.PointerPanZoomUpdateEventListener?>(
            name: 'onPointerPanZoomUpdate',
            init: onPointerPanZoomUpdate,
            isNamed: true,
          ),
          'onPointerPanZoomEnd': _i2.BuilderArg<_i6.PointerPanZoomEndEventListener?>(
            name: 'onPointerPanZoomEnd',
            init: onPointerPanZoomEnd,
            isNamed: true,
          ),
          'onPointerSignal': _i2.BuilderArg<_i6.PointerSignalEventListener?>(
            name: 'onPointerSignal',
            init: onPointerSignal,
            isNamed: true,
          ),
          'behavior': _i2.BuilderArg<_i6.HitTestBehavior>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
            defaultValue: _i10.HitTestBehavior.deferToChild,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Listener';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Listener$Mate(
          key: p.get('key').build(),
          onPointerDown: p.get('onPointerDown').build(),
          onPointerMove: p.get('onPointerMove').build(),
          onPointerUp: p.get('onPointerUp').build(),
          onPointerHover: p.get('onPointerHover').build(),
          onPointerCancel: p.get('onPointerCancel').build(),
          onPointerPanZoomStart: p.get('onPointerPanZoomStart').build(),
          onPointerPanZoomUpdate: p.get('onPointerPanZoomUpdate').build(),
          onPointerPanZoomEnd: p.get('onPointerPanZoomEnd').build(),
          onPointerSignal: p.get('onPointerSignal').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class MouseRegion extends SingleChildRenderObjectWidget
class MouseRegion$Mate extends _i1.MouseRegion with _i2.Mate {
  /// MouseRegion MouseRegion({Key? key, void Function(PointerEnterEvent)? onEnter, void Function(PointerExitEvent)? onExit, void Function(PointerHoverEvent)? onHover, MouseCursor cursor = MouseCursor.defer, bool opaque = true, HitTestBehavior? hitTestBehavior, Widget? child})
  MouseRegion$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {void Function(PointerEnterEvent)? onEnter} , default:none
    super.onEnter,

    /// optionalParameters: {void Function(PointerExitEvent)? onExit} , default:none
    super.onExit,

    /// optionalParameters: {void Function(PointerHoverEvent)? onHover} , default:none
    super.onHover,

    /// optionalParameters: {MouseCursor cursor = MouseCursor.defer} , default:processed=PrefixedIdentifierImpl
    super.cursor,

    /// optionalParameters: {bool opaque = true} , default:processed=BooleanLiteralImpl
    super.opaque,

    /// optionalParameters: {HitTestBehavior? hitTestBehavior} , default:none
    super.hitTestBehavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'onEnter': _i2.BuilderArg<_i33.PointerEnterEventListener?>(
            name: 'onEnter',
            init: onEnter,
            isNamed: true,
          ),
          'onExit': _i2.BuilderArg<_i33.PointerExitEventListener?>(
            name: 'onExit',
            init: onExit,
            isNamed: true,
          ),
          'onHover': _i2.BuilderArg<_i33.PointerHoverEventListener?>(
            name: 'onHover',
            init: onHover,
            isNamed: true,
          ),
          'cursor': _i2.BuilderArg<_i34.MouseCursor>(
            name: 'cursor',
            init: cursor,
            isNamed: true,
            defaultValue: _i10.MouseCursor.defer,
          ),
          'opaque': _i2.BuilderArg<bool>(
            name: 'opaque',
            init: opaque,
            isNamed: true,
            defaultValue: true,
          ),
          'hitTestBehavior': _i2.BuilderArg<_i6.HitTestBehavior?>(
            name: 'hitTestBehavior',
            init: hitTestBehavior,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'MouseRegion';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MouseRegion$Mate(
          key: p.get('key').build(),
          onEnter: p.get('onEnter').build(),
          onExit: p.get('onExit').build(),
          onHover: p.get('onHover').build(),
          cursor: p.get('cursor').build(),
          opaque: p.get('opaque').build(),
          hitTestBehavior: p.get('hitTestBehavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RepaintBoundary extends SingleChildRenderObjectWidget
class RepaintBoundary$Mate extends _i1.RepaintBoundary with _i2.Mate {
  /// RepaintBoundary RepaintBoundary({Key? key, Widget? child})
  RepaintBoundary$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RepaintBoundary';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => RepaintBoundary$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IgnorePointer extends SingleChildRenderObjectWidget
class IgnorePointer$Mate extends _i1.IgnorePointer with _i2.Mate {
  /// IgnorePointer IgnorePointer({Key? key, bool ignoring = true, bool? ignoringSemantics, Widget? child})
  IgnorePointer$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool ignoring = true} , default:processed=BooleanLiteralImpl
    super.ignoring,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'ignoring': _i2.BuilderArg<bool>(
            name: 'ignoring',
            init: ignoring,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IgnorePointer';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IgnorePointer$Mate(
          key: p.get('key').build(),
          ignoring: p.get('ignoring').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class AbsorbPointer extends SingleChildRenderObjectWidget
class AbsorbPointer$Mate extends _i1.AbsorbPointer with _i2.Mate {
  /// AbsorbPointer AbsorbPointer({Key? key, bool absorbing = true, bool? ignoringSemantics, Widget? child})
  AbsorbPointer$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool absorbing = true} , default:processed=BooleanLiteralImpl
    super.absorbing,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'absorbing': _i2.BuilderArg<bool>(
            name: 'absorbing',
            init: absorbing,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'AbsorbPointer';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => AbsorbPointer$Mate(
          key: p.get('key').build(),
          absorbing: p.get('absorbing').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class MetaData extends SingleChildRenderObjectWidget
class MetaData$Mate extends _i1.MetaData with _i2.Mate {
  /// MetaData MetaData({Key? key, dynamic metaData, HitTestBehavior behavior = HitTestBehavior.deferToChild, Widget? child})
  MetaData$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {dynamic metaData} , default:none
    super.metaData,

    /// optionalParameters: {HitTestBehavior behavior = HitTestBehavior.deferToChild} , default:processed=PrefixedIdentifierImpl
    super.behavior,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'metaData': _i2.BuilderArg<dynamic>(
            name: 'metaData',
            init: metaData,
            isNamed: true,
          ),
          'behavior': _i2.BuilderArg<_i6.HitTestBehavior>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
            defaultValue: _i10.HitTestBehavior.deferToChild,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'MetaData';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MetaData$Mate(
          key: p.get('key').build(),
          metaData: p.get('metaData').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Semantics extends SingleChildRenderObjectWidget
class Semantics$Mate extends _i1.Semantics with _i2.Mate {
  /// Semantics Semantics({Key? key, Widget? child, bool container = false, bool explicitChildNodes = false, bool excludeSemantics = false, bool blockUserActions = false, bool? enabled, bool? checked, bool? mixed, bool? selected, bool? toggled, bool? button, bool? slider, bool? keyboardKey, bool? link, bool? header, bool? textField, bool? readOnly, bool? focusable, bool? focused, bool? inMutuallyExclusiveGroup, bool? obscured, bool? multiline, bool? scopesRoute, bool? namesRoute, bool? hidden, bool? image, bool? liveRegion, bool? expanded, int? maxValueLength, int? currentValueLength, String? label, AttributedString? attributedLabel, String? value, AttributedString? attributedValue, String? increasedValue, AttributedString? attributedIncreasedValue, String? decreasedValue, AttributedString? attributedDecreasedValue, String? hint, AttributedString? attributedHint, String? tooltip, String? onTapHint, String? onLongPressHint, TextDirection? textDirection, SemanticsSortKey? sortKey, SemanticsTag? tagForChildren, void Function()? onTap, void Function()? onLongPress, void Function()? onScrollLeft, void Function()? onScrollRight, void Function()? onScrollUp, void Function()? onScrollDown, void Function()? onIncrease, void Function()? onDecrease, void Function()? onCopy, void Function()? onCut, void Function()? onPaste, void Function()? onDismiss, void Function(bool)? onMoveCursorForwardByCharacter, void Function(bool)? onMoveCursorBackwardByCharacter, void Function(TextSelection)? onSetSelection, void Function(String)? onSetText, void Function()? onDidGainAccessibilityFocus, void Function()? onDidLoseAccessibilityFocus, Map<CustomSemanticsAction, void Function()>? customSemanticsActions})
  Semantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {bool container = false} , default:processed=BooleanLiteralImpl
    super.container,

    /// optionalParameters: {bool explicitChildNodes = false} , default:processed=BooleanLiteralImpl
    super.explicitChildNodes,

    /// optionalParameters: {bool excludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeSemantics,

    /// optionalParameters: {bool blockUserActions = false} , default:processed=BooleanLiteralImpl
    super.blockUserActions,

    /// optionalParameters: {bool? enabled} , default:none
    super.enabled,

    /// optionalParameters: {bool? checked} , default:none
    super.checked,

    /// optionalParameters: {bool? mixed} , default:none
    super.mixed,

    /// optionalParameters: {bool? selected} , default:none
    super.selected,

    /// optionalParameters: {bool? toggled} , default:none
    super.toggled,

    /// optionalParameters: {bool? button} , default:none
    super.button,

    /// optionalParameters: {bool? slider} , default:none
    super.slider,

    /// optionalParameters: {bool? keyboardKey} , default:none
    super.keyboardKey,

    /// optionalParameters: {bool? link} , default:none
    super.link,

    /// optionalParameters: {bool? header} , default:none
    super.header,

    /// optionalParameters: {bool? textField} , default:none
    super.textField,

    /// optionalParameters: {bool? readOnly} , default:none
    super.readOnly,

    /// optionalParameters: {bool? focusable} , default:none
    super.focusable,

    /// optionalParameters: {bool? focused} , default:none
    super.focused,

    /// optionalParameters: {bool? inMutuallyExclusiveGroup} , default:none
    super.inMutuallyExclusiveGroup,

    /// optionalParameters: {bool? obscured} , default:none
    super.obscured,

    /// optionalParameters: {bool? multiline} , default:none
    super.multiline,

    /// optionalParameters: {bool? scopesRoute} , default:none
    super.scopesRoute,

    /// optionalParameters: {bool? namesRoute} , default:none
    super.namesRoute,

    /// optionalParameters: {bool? hidden} , default:none
    super.hidden,

    /// optionalParameters: {bool? image} , default:none
    super.image,

    /// optionalParameters: {bool? liveRegion} , default:none
    super.liveRegion,

    /// optionalParameters: {bool? expanded} , default:none
    super.expanded,

    /// optionalParameters: {int? maxValueLength} , default:none
    super.maxValueLength,

    /// optionalParameters: {int? currentValueLength} , default:none
    super.currentValueLength,

    /// optionalParameters: {String? label} , default:none
    super.label,

    /// optionalParameters: {AttributedString? attributedLabel} , default:none
    super.attributedLabel,

    /// optionalParameters: {String? value} , default:none
    super.value,

    /// optionalParameters: {AttributedString? attributedValue} , default:none
    super.attributedValue,

    /// optionalParameters: {String? increasedValue} , default:none
    super.increasedValue,

    /// optionalParameters: {AttributedString? attributedIncreasedValue} , default:none
    super.attributedIncreasedValue,

    /// optionalParameters: {String? decreasedValue} , default:none
    super.decreasedValue,

    /// optionalParameters: {AttributedString? attributedDecreasedValue} , default:none
    super.attributedDecreasedValue,

    /// optionalParameters: {String? hint} , default:none
    super.hint,

    /// optionalParameters: {AttributedString? attributedHint} , default:none
    super.attributedHint,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {String? onTapHint} , default:none
    super.onTapHint,

    /// optionalParameters: {String? onLongPressHint} , default:none
    super.onLongPressHint,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {SemanticsSortKey? sortKey} , default:none
    super.sortKey,

    /// optionalParameters: {SemanticsTag? tagForChildren} , default:none
    super.tagForChildren,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {void Function()? onLongPress} , default:none
    super.onLongPress,

    /// optionalParameters: {void Function()? onScrollLeft} , default:none
    super.onScrollLeft,

    /// optionalParameters: {void Function()? onScrollRight} , default:none
    super.onScrollRight,

    /// optionalParameters: {void Function()? onScrollUp} , default:none
    super.onScrollUp,

    /// optionalParameters: {void Function()? onScrollDown} , default:none
    super.onScrollDown,

    /// optionalParameters: {void Function()? onIncrease} , default:none
    super.onIncrease,

    /// optionalParameters: {void Function()? onDecrease} , default:none
    super.onDecrease,

    /// optionalParameters: {void Function()? onCopy} , default:none
    super.onCopy,

    /// optionalParameters: {void Function()? onCut} , default:none
    super.onCut,

    /// optionalParameters: {void Function()? onPaste} , default:none
    super.onPaste,

    /// optionalParameters: {void Function()? onDismiss} , default:none
    super.onDismiss,

    /// optionalParameters: {void Function(bool)? onMoveCursorForwardByCharacter} , default:none
    super.onMoveCursorForwardByCharacter,

    /// optionalParameters: {void Function(bool)? onMoveCursorBackwardByCharacter} , default:none
    super.onMoveCursorBackwardByCharacter,

    /// optionalParameters: {void Function(TextSelection)? onSetSelection} , default:none
    super.onSetSelection,

    /// optionalParameters: {void Function(String)? onSetText} , default:none
    super.onSetText,

    /// optionalParameters: {void Function()? onDidGainAccessibilityFocus} , default:none
    super.onDidGainAccessibilityFocus,

    /// optionalParameters: {void Function()? onDidLoseAccessibilityFocus} , default:none
    super.onDidLoseAccessibilityFocus,

    /// optionalParameters: {Map<CustomSemanticsAction, void Function()>? customSemanticsActions} , default:none
    super.customSemanticsActions,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'container': _i2.BuilderArg<bool>(
            name: 'container',
            init: container,
            isNamed: true,
            defaultValue: false,
          ),
          'explicitChildNodes': _i2.BuilderArg<bool>(
            name: 'explicitChildNodes',
            init: explicitChildNodes,
            isNamed: true,
            defaultValue: false,
          ),
          'excludeSemantics': _i2.BuilderArg<bool>(
            name: 'excludeSemantics',
            init: excludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'blockUserActions': _i2.BuilderArg<bool>(
            name: 'blockUserActions',
            init: blockUserActions,
            isNamed: true,
            defaultValue: false,
          ),
          'enabled': _i2.BuilderArg<bool?>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
          ),
          'checked': _i2.BuilderArg<bool?>(
            name: 'checked',
            init: checked,
            isNamed: true,
          ),
          'mixed': _i2.BuilderArg<bool?>(
            name: 'mixed',
            init: mixed,
            isNamed: true,
          ),
          'selected': _i2.BuilderArg<bool?>(
            name: 'selected',
            init: selected,
            isNamed: true,
          ),
          'toggled': _i2.BuilderArg<bool?>(
            name: 'toggled',
            init: toggled,
            isNamed: true,
          ),
          'button': _i2.BuilderArg<bool?>(
            name: 'button',
            init: button,
            isNamed: true,
          ),
          'slider': _i2.BuilderArg<bool?>(
            name: 'slider',
            init: slider,
            isNamed: true,
          ),
          'keyboardKey': _i2.BuilderArg<bool?>(
            name: 'keyboardKey',
            init: keyboardKey,
            isNamed: true,
          ),
          'link': _i2.BuilderArg<bool?>(
            name: 'link',
            init: link,
            isNamed: true,
          ),
          'header': _i2.BuilderArg<bool?>(
            name: 'header',
            init: header,
            isNamed: true,
          ),
          'textField': _i2.BuilderArg<bool?>(
            name: 'textField',
            init: textField,
            isNamed: true,
          ),
          'readOnly': _i2.BuilderArg<bool?>(
            name: 'readOnly',
            init: readOnly,
            isNamed: true,
          ),
          'focusable': _i2.BuilderArg<bool?>(
            name: 'focusable',
            init: focusable,
            isNamed: true,
          ),
          'focused': _i2.BuilderArg<bool?>(
            name: 'focused',
            init: focused,
            isNamed: true,
          ),
          'inMutuallyExclusiveGroup': _i2.BuilderArg<bool?>(
            name: 'inMutuallyExclusiveGroup',
            init: inMutuallyExclusiveGroup,
            isNamed: true,
          ),
          'obscured': _i2.BuilderArg<bool?>(
            name: 'obscured',
            init: obscured,
            isNamed: true,
          ),
          'multiline': _i2.BuilderArg<bool?>(
            name: 'multiline',
            init: multiline,
            isNamed: true,
          ),
          'scopesRoute': _i2.BuilderArg<bool?>(
            name: 'scopesRoute',
            init: scopesRoute,
            isNamed: true,
          ),
          'namesRoute': _i2.BuilderArg<bool?>(
            name: 'namesRoute',
            init: namesRoute,
            isNamed: true,
          ),
          'hidden': _i2.BuilderArg<bool?>(
            name: 'hidden',
            init: hidden,
            isNamed: true,
          ),
          'image': _i2.BuilderArg<bool?>(
            name: 'image',
            init: image,
            isNamed: true,
          ),
          'liveRegion': _i2.BuilderArg<bool?>(
            name: 'liveRegion',
            init: liveRegion,
            isNamed: true,
          ),
          'expanded': _i2.BuilderArg<bool?>(
            name: 'expanded',
            init: expanded,
            isNamed: true,
          ),
          'maxValueLength': _i2.BuilderArg<int?>(
            name: 'maxValueLength',
            init: maxValueLength,
            isNamed: true,
          ),
          'currentValueLength': _i2.BuilderArg<int?>(
            name: 'currentValueLength',
            init: currentValueLength,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<String?>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'attributedLabel': _i2.BuilderArg<_i35.AttributedString?>(
            name: 'attributedLabel',
            init: attributedLabel,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<String?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'attributedValue': _i2.BuilderArg<_i35.AttributedString?>(
            name: 'attributedValue',
            init: attributedValue,
            isNamed: true,
          ),
          'increasedValue': _i2.BuilderArg<String?>(
            name: 'increasedValue',
            init: increasedValue,
            isNamed: true,
          ),
          'attributedIncreasedValue': _i2.BuilderArg<_i35.AttributedString?>(
            name: 'attributedIncreasedValue',
            init: attributedIncreasedValue,
            isNamed: true,
          ),
          'decreasedValue': _i2.BuilderArg<String?>(
            name: 'decreasedValue',
            init: decreasedValue,
            isNamed: true,
          ),
          'attributedDecreasedValue': _i2.BuilderArg<_i35.AttributedString?>(
            name: 'attributedDecreasedValue',
            init: attributedDecreasedValue,
            isNamed: true,
          ),
          'hint': _i2.BuilderArg<String?>(
            name: 'hint',
            init: hint,
            isNamed: true,
          ),
          'attributedHint': _i2.BuilderArg<_i35.AttributedString?>(
            name: 'attributedHint',
            init: attributedHint,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'onTapHint': _i2.BuilderArg<String?>(
            name: 'onTapHint',
            init: onTapHint,
            isNamed: true,
          ),
          'onLongPressHint': _i2.BuilderArg<String?>(
            name: 'onLongPressHint',
            init: onLongPressHint,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i4.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'sortKey': _i2.BuilderArg<_i35.SemanticsSortKey?>(
            name: 'sortKey',
            init: sortKey,
            isNamed: true,
          ),
          'tagForChildren': _i2.BuilderArg<_i35.SemanticsTag?>(
            name: 'tagForChildren',
            init: tagForChildren,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'onLongPress': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onLongPress',
            init: onLongPress,
            isNamed: true,
          ),
          'onScrollLeft': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onScrollLeft',
            init: onScrollLeft,
            isNamed: true,
          ),
          'onScrollRight': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onScrollRight',
            init: onScrollRight,
            isNamed: true,
          ),
          'onScrollUp': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onScrollUp',
            init: onScrollUp,
            isNamed: true,
          ),
          'onScrollDown': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onScrollDown',
            init: onScrollDown,
            isNamed: true,
          ),
          'onIncrease': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onIncrease',
            init: onIncrease,
            isNamed: true,
          ),
          'onDecrease': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onDecrease',
            init: onDecrease,
            isNamed: true,
          ),
          'onCopy': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onCopy',
            init: onCopy,
            isNamed: true,
          ),
          'onCut': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onCut',
            init: onCut,
            isNamed: true,
          ),
          'onPaste': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onPaste',
            init: onPaste,
            isNamed: true,
          ),
          'onDismiss': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onDismiss',
            init: onDismiss,
            isNamed: true,
          ),
          'onMoveCursorForwardByCharacter': _i2.BuilderArg<_i35.MoveCursorHandler?>(
            name: 'onMoveCursorForwardByCharacter',
            init: onMoveCursorForwardByCharacter,
            isNamed: true,
          ),
          'onMoveCursorBackwardByCharacter': _i2.BuilderArg<_i35.MoveCursorHandler?>(
            name: 'onMoveCursorBackwardByCharacter',
            init: onMoveCursorBackwardByCharacter,
            isNamed: true,
          ),
          'onSetSelection': _i2.BuilderArg<_i35.SetSelectionHandler?>(
            name: 'onSetSelection',
            init: onSetSelection,
            isNamed: true,
          ),
          'onSetText': _i2.BuilderArg<_i35.SetTextHandler?>(
            name: 'onSetText',
            init: onSetText,
            isNamed: true,
          ),
          'onDidGainAccessibilityFocus': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onDidGainAccessibilityFocus',
            init: onDidGainAccessibilityFocus,
            isNamed: true,
          ),
          'onDidLoseAccessibilityFocus': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onDidLoseAccessibilityFocus',
            init: onDidLoseAccessibilityFocus,
            isNamed: true,
          ),
          'customSemanticsActions': _i2.BuilderArg<Map<_i35.CustomSemanticsAction, _i4.VoidCallback>?>(
            name: 'customSemanticsActions',
            init: customSemanticsActions,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Semantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Semantics$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
          container: p.get('container').build(),
          explicitChildNodes: p.get('explicitChildNodes').build(),
          excludeSemantics: p.get('excludeSemantics').build(),
          blockUserActions: p.get('blockUserActions').build(),
          enabled: p.get('enabled').build(),
          checked: p.get('checked').build(),
          mixed: p.get('mixed').build(),
          selected: p.get('selected').build(),
          toggled: p.get('toggled').build(),
          button: p.get('button').build(),
          slider: p.get('slider').build(),
          keyboardKey: p.get('keyboardKey').build(),
          link: p.get('link').build(),
          header: p.get('header').build(),
          textField: p.get('textField').build(),
          readOnly: p.get('readOnly').build(),
          focusable: p.get('focusable').build(),
          focused: p.get('focused').build(),
          inMutuallyExclusiveGroup: p.get('inMutuallyExclusiveGroup').build(),
          obscured: p.get('obscured').build(),
          multiline: p.get('multiline').build(),
          scopesRoute: p.get('scopesRoute').build(),
          namesRoute: p.get('namesRoute').build(),
          hidden: p.get('hidden').build(),
          image: p.get('image').build(),
          liveRegion: p.get('liveRegion').build(),
          expanded: p.get('expanded').build(),
          maxValueLength: p.get('maxValueLength').build(),
          currentValueLength: p.get('currentValueLength').build(),
          label: p.get('label').build(),
          attributedLabel: p.get('attributedLabel').build(),
          value: p.get('value').build(),
          attributedValue: p.get('attributedValue').build(),
          increasedValue: p.get('increasedValue').build(),
          attributedIncreasedValue: p.get('attributedIncreasedValue').build(),
          decreasedValue: p.get('decreasedValue').build(),
          attributedDecreasedValue: p.get('attributedDecreasedValue').build(),
          hint: p.get('hint').build(),
          attributedHint: p.get('attributedHint').build(),
          tooltip: p.get('tooltip').build(),
          onTapHint: p.get('onTapHint').build(),
          onLongPressHint: p.get('onLongPressHint').build(),
          textDirection: p.get('textDirection').build(),
          sortKey: p.get('sortKey').build(),
          tagForChildren: p.get('tagForChildren').build(),
          onTap: p.get('onTap').build(),
          onLongPress: p.get('onLongPress').build(),
          onScrollLeft: p.get('onScrollLeft').build(),
          onScrollRight: p.get('onScrollRight').build(),
          onScrollUp: p.get('onScrollUp').build(),
          onScrollDown: p.get('onScrollDown').build(),
          onIncrease: p.get('onIncrease').build(),
          onDecrease: p.get('onDecrease').build(),
          onCopy: p.get('onCopy').build(),
          onCut: p.get('onCut').build(),
          onPaste: p.get('onPaste').build(),
          onDismiss: p.get('onDismiss').build(),
          onMoveCursorForwardByCharacter: p.get('onMoveCursorForwardByCharacter').build(),
          onMoveCursorBackwardByCharacter: p.get('onMoveCursorBackwardByCharacter').build(),
          onSetSelection: p.get('onSetSelection').build(),
          onSetText: p.get('onSetText').build(),
          onDidGainAccessibilityFocus: p.get('onDidGainAccessibilityFocus').build(),
          onDidLoseAccessibilityFocus: p.get('onDidLoseAccessibilityFocus').build(),
          customSemanticsActions: p.get('customSemanticsActions').build(),
        );
  }

  /// Semantics Semantics.fromProperties({Key? key, Widget? child, bool container = false, bool explicitChildNodes = false, bool excludeSemantics = false, bool blockUserActions = false, required SemanticsProperties properties})
  Semantics$Mate.fromProperties({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {bool container = false} , default:processed=BooleanLiteralImpl
    super.container,

    /// optionalParameters: {bool explicitChildNodes = false} , default:processed=BooleanLiteralImpl
    super.explicitChildNodes,

    /// optionalParameters: {bool excludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.excludeSemantics,

    /// optionalParameters: {bool blockUserActions = false} , default:processed=BooleanLiteralImpl
    super.blockUserActions,

    /// optionalParameters: {required SemanticsProperties properties} , default:none
    required super.properties,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'container': _i2.BuilderArg<bool>(
            name: 'container',
            init: container,
            isNamed: true,
            defaultValue: false,
          ),
          'explicitChildNodes': _i2.BuilderArg<bool>(
            name: 'explicitChildNodes',
            init: explicitChildNodes,
            isNamed: true,
            defaultValue: false,
          ),
          'excludeSemantics': _i2.BuilderArg<bool>(
            name: 'excludeSemantics',
            init: excludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'blockUserActions': _i2.BuilderArg<bool>(
            name: 'blockUserActions',
            init: blockUserActions,
            isNamed: true,
            defaultValue: false,
          ),
          'properties': _i2.BuilderArg<_i35.SemanticsProperties>(
            name: 'properties',
            init: properties,
            isNamed: true,
          ),
        },
        super.fromProperties() {
    mateBuilderName = 'Semantics.fromProperties';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Semantics$Mate.fromProperties(
          key: p.get('key').build(),
          child: p.get('child').build(),
          container: p.get('container').build(),
          explicitChildNodes: p.get('explicitChildNodes').build(),
          excludeSemantics: p.get('excludeSemantics').build(),
          blockUserActions: p.get('blockUserActions').build(),
          properties: p.get('properties').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class MergeSemantics extends SingleChildRenderObjectWidget
class MergeSemantics$Mate extends _i1.MergeSemantics with _i2.Mate {
  /// MergeSemantics MergeSemantics({Key? key, Widget? child})
  MergeSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'MergeSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => MergeSemantics$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class BlockSemantics extends SingleChildRenderObjectWidget
class BlockSemantics$Mate extends _i1.BlockSemantics with _i2.Mate {
  /// BlockSemantics BlockSemantics({Key? key, bool blocking = true, Widget? child})
  BlockSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool blocking = true} , default:processed=BooleanLiteralImpl
    super.blocking,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'blocking': _i2.BuilderArg<bool>(
            name: 'blocking',
            init: blocking,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'BlockSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => BlockSemantics$Mate(
          key: p.get('key').build(),
          blocking: p.get('blocking').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ExcludeSemantics extends SingleChildRenderObjectWidget
class ExcludeSemantics$Mate extends _i1.ExcludeSemantics with _i2.Mate {
  /// ExcludeSemantics ExcludeSemantics({Key? key, bool excluding = true, Widget? child})
  ExcludeSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool excluding = true} , default:processed=BooleanLiteralImpl
    super.excluding,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'excluding': _i2.BuilderArg<bool>(
            name: 'excluding',
            init: excluding,
            isNamed: true,
            defaultValue: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ExcludeSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ExcludeSemantics$Mate(
          key: p.get('key').build(),
          excluding: p.get('excluding').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class IndexedSemantics extends SingleChildRenderObjectWidget
class IndexedSemantics$Mate extends _i1.IndexedSemantics with _i2.Mate {
  /// IndexedSemantics IndexedSemantics({Key? key, required int index, Widget? child})
  IndexedSemantics$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required int index} , default:none
    required super.index,

    /// optionalParameters: {Widget? child} , default:none
    super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'index': _i2.BuilderArg<int>(
            name: 'index',
            init: index,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'IndexedSemantics';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => IndexedSemantics$Mate(
          key: p.get('key').build(),
          index: p.get('index').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class KeyedSubtree extends StatelessWidget
class KeyedSubtree$Mate extends _i1.KeyedSubtree with _i2.Mate {
  /// KeyedSubtree KeyedSubtree({Key? key, required Widget child})
  KeyedSubtree$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'KeyedSubtree';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => KeyedSubtree$Mate(
          key: p.get('key').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class Builder extends StatelessWidget
class Builder$Mate extends _i1.Builder with _i2.Mate {
  /// Builder Builder({Key? key, required Widget Function(BuildContext) builder})
  Builder$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget Function(BuildContext) builder} , default:none
    required super.builder,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'builder': _i2.BuilderArg<_i5.WidgetBuilder>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'Builder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => Builder$Mate(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class StatefulBuilder extends StatefulWidget
class StatefulBuilder$Mate extends _i1.StatefulBuilder with _i2.Mate {
  /// StatefulBuilder StatefulBuilder({Key? key, required Widget Function(BuildContext, void Function(void Function())) builder})
  StatefulBuilder$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget Function(BuildContext, void Function(void Function())) builder} , default:none
    required super.builder,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'builder': _i2.BuilderArg<_i1.StatefulWidgetBuilder>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'StatefulBuilder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => StatefulBuilder$Mate(
          key: p.get('key').build(),
          builder: p.get('builder').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ColoredBox extends SingleChildRenderObjectWidget
class ColoredBox$Mate extends _i1.ColoredBox with _i2.Mate {
  /// ColoredBox ColoredBox({required Color color, Widget? child, Key? key})
  ColoredBox$Mate({
    /// optionalParameters: {required Color color} , default:none
    required super.color,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {Key? key} , default:none
    super.key,
  })  : mateParams = {
          'color': _i2.BuilderArg<_i4.Color>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ColoredBox';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ColoredBox$Mate(
          color: p.get('color').build(),
          child: p.get('child').build(),
          key: p.get('key').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
