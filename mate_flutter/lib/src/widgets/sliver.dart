// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/sliver.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/scroll_delegate.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/rendering/sliver_grid.dart' as _i6;

/// class SliverList extends SliverMultiBoxAdaptorWidget
class SliverList$Mate extends _i1.SliverList with _i2.Mate {
  /// SliverList SliverList({Key? key, required SliverChildDelegate delegate})
  SliverList$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required SliverChildDelegate delegate} , default:none
    required super.delegate,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i4.SliverChildDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverList';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverList$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
        );
  }

  /// SliverList SliverList.builder({Key? key, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.builder({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , default:none
    required super.itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , default:none
    super.findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , default:none
    super.itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , default:processed=BooleanLiteralImpl
    super.addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , default:processed=BooleanLiteralImpl
    super.addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , default:processed=BooleanLiteralImpl
    super.addSemanticIndexes,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'itemBuilder': _i2.BuilderArg<_i5.NullableIndexedWidgetBuilder>(
            name: 'itemBuilder',
            init: itemBuilder,
            isNamed: true,
          ),
          'findChildIndexCallback': _i2.BuilderArg<_i4.ChildIndexGetter?>(
            name: 'findChildIndexCallback',
            init: findChildIndexCallback,
            isNamed: true,
          ),
          'itemCount': _i2.BuilderArg<int?>(
            name: 'itemCount',
            init: itemCount,
            isNamed: true,
          ),
          'addAutomaticKeepAlives': _i2.BuilderArg<bool>(
            name: 'addAutomaticKeepAlives',
            init: addAutomaticKeepAlives,
            isNamed: true,
            defaultValue: true,
          ),
          'addRepaintBoundaries': _i2.BuilderArg<bool>(
            name: 'addRepaintBoundaries',
            init: addRepaintBoundaries,
            isNamed: true,
            defaultValue: true,
          ),
          'addSemanticIndexes': _i2.BuilderArg<bool>(
            name: 'addSemanticIndexes',
            init: addSemanticIndexes,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super.builder() {
    mateBuilderName = 'SliverList.builder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverList$Mate.builder(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          itemCount: p.get('itemCount').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
        );
  }

  /// SliverList SliverList.separated({Key? key, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, required Widget? Function(BuildContext, int) separatorBuilder, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.separated({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , default:none
    required super.itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , default:none
    super.findChildIndexCallback,

    /// optionalParameters: {required Widget? Function(BuildContext, int) separatorBuilder} , default:none
    required super.separatorBuilder,

    /// optionalParameters: {int? itemCount} , default:none
    super.itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , default:processed=BooleanLiteralImpl
    super.addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , default:processed=BooleanLiteralImpl
    super.addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , default:processed=BooleanLiteralImpl
    super.addSemanticIndexes,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'itemBuilder': _i2.BuilderArg<_i5.NullableIndexedWidgetBuilder>(
            name: 'itemBuilder',
            init: itemBuilder,
            isNamed: true,
          ),
          'findChildIndexCallback': _i2.BuilderArg<_i4.ChildIndexGetter?>(
            name: 'findChildIndexCallback',
            init: findChildIndexCallback,
            isNamed: true,
          ),
          'separatorBuilder': _i2.BuilderArg<_i5.NullableIndexedWidgetBuilder>(
            name: 'separatorBuilder',
            init: separatorBuilder,
            isNamed: true,
          ),
          'itemCount': _i2.BuilderArg<int?>(
            name: 'itemCount',
            init: itemCount,
            isNamed: true,
          ),
          'addAutomaticKeepAlives': _i2.BuilderArg<bool>(
            name: 'addAutomaticKeepAlives',
            init: addAutomaticKeepAlives,
            isNamed: true,
            defaultValue: true,
          ),
          'addRepaintBoundaries': _i2.BuilderArg<bool>(
            name: 'addRepaintBoundaries',
            init: addRepaintBoundaries,
            isNamed: true,
            defaultValue: true,
          ),
          'addSemanticIndexes': _i2.BuilderArg<bool>(
            name: 'addSemanticIndexes',
            init: addSemanticIndexes,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super.separated() {
    mateBuilderName = 'SliverList.separated';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverList$Mate.separated(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          separatorBuilder: p.get('separatorBuilder').build(),
          itemCount: p.get('itemCount').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
        );
  }

  /// SliverList SliverList.list({Key? key, required List<Widget> children, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverList$Mate.list({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget> children} , default:none
    required super.children,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , default:processed=BooleanLiteralImpl
    super.addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , default:processed=BooleanLiteralImpl
    super.addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , default:processed=BooleanLiteralImpl
    super.addSemanticIndexes,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'addAutomaticKeepAlives': _i2.BuilderArg<bool>(
            name: 'addAutomaticKeepAlives',
            init: addAutomaticKeepAlives,
            isNamed: true,
            defaultValue: true,
          ),
          'addRepaintBoundaries': _i2.BuilderArg<bool>(
            name: 'addRepaintBoundaries',
            init: addRepaintBoundaries,
            isNamed: true,
            defaultValue: true,
          ),
          'addSemanticIndexes': _i2.BuilderArg<bool>(
            name: 'addSemanticIndexes',
            init: addSemanticIndexes,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super.list() {
    mateBuilderName = 'SliverList.list';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverList$Mate.list(
          key: p.get('key').build(),
          children: p.get('children').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverFixedExtentList extends SliverMultiBoxAdaptorWidget
class SliverFixedExtentList$Mate extends _i1.SliverFixedExtentList
    with _i2.Mate {
  /// SliverFixedExtentList SliverFixedExtentList({Key? key, required SliverChildDelegate delegate, required double itemExtent})
  SliverFixedExtentList$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required SliverChildDelegate delegate} , default:none
    required super.delegate,

    /// optionalParameters: {required double itemExtent} , default:none
    required super.itemExtent,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i4.SliverChildDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
          'itemExtent': _i2.BuilderArg<double>(
            name: 'itemExtent',
            init: itemExtent,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverFixedExtentList';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverFixedExtentList$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          itemExtent: p.get('itemExtent').build(),
        );
  }

  /// SliverFixedExtentList SliverFixedExtentList.builder({Key? key, required Widget? Function(BuildContext, int) itemBuilder, required double itemExtent, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverFixedExtentList$Mate.builder({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , default:none
    required super.itemBuilder,

    /// optionalParameters: {required double itemExtent} , default:none
    required super.itemExtent,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , default:none
    super.findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , default:none
    super.itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , default:processed=BooleanLiteralImpl
    super.addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , default:processed=BooleanLiteralImpl
    super.addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , default:processed=BooleanLiteralImpl
    super.addSemanticIndexes,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'itemBuilder': _i2.BuilderArg<_i5.NullableIndexedWidgetBuilder>(
            name: 'itemBuilder',
            init: itemBuilder,
            isNamed: true,
          ),
          'itemExtent': _i2.BuilderArg<double>(
            name: 'itemExtent',
            init: itemExtent,
            isNamed: true,
          ),
          'findChildIndexCallback': _i2.BuilderArg<_i4.ChildIndexGetter?>(
            name: 'findChildIndexCallback',
            init: findChildIndexCallback,
            isNamed: true,
          ),
          'itemCount': _i2.BuilderArg<int?>(
            name: 'itemCount',
            init: itemCount,
            isNamed: true,
          ),
          'addAutomaticKeepAlives': _i2.BuilderArg<bool>(
            name: 'addAutomaticKeepAlives',
            init: addAutomaticKeepAlives,
            isNamed: true,
            defaultValue: true,
          ),
          'addRepaintBoundaries': _i2.BuilderArg<bool>(
            name: 'addRepaintBoundaries',
            init: addRepaintBoundaries,
            isNamed: true,
            defaultValue: true,
          ),
          'addSemanticIndexes': _i2.BuilderArg<bool>(
            name: 'addSemanticIndexes',
            init: addSemanticIndexes,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super.builder() {
    mateBuilderName = 'SliverFixedExtentList.builder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverFixedExtentList$Mate.builder(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          itemExtent: p.get('itemExtent').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          itemCount: p.get('itemCount').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
        );
  }

  /// SliverFixedExtentList SliverFixedExtentList.list({Key? key, required List<Widget> children, required double itemExtent, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverFixedExtentList$Mate.list({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<Widget> children} , default:none
    required super.children,

    /// optionalParameters: {required double itemExtent} , default:none
    required super.itemExtent,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , default:processed=BooleanLiteralImpl
    super.addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , default:processed=BooleanLiteralImpl
    super.addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , default:processed=BooleanLiteralImpl
    super.addSemanticIndexes,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
          'itemExtent': _i2.BuilderArg<double>(
            name: 'itemExtent',
            init: itemExtent,
            isNamed: true,
          ),
          'addAutomaticKeepAlives': _i2.BuilderArg<bool>(
            name: 'addAutomaticKeepAlives',
            init: addAutomaticKeepAlives,
            isNamed: true,
            defaultValue: true,
          ),
          'addRepaintBoundaries': _i2.BuilderArg<bool>(
            name: 'addRepaintBoundaries',
            init: addRepaintBoundaries,
            isNamed: true,
            defaultValue: true,
          ),
          'addSemanticIndexes': _i2.BuilderArg<bool>(
            name: 'addSemanticIndexes',
            init: addSemanticIndexes,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super.list() {
    mateBuilderName = 'SliverFixedExtentList.list';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverFixedExtentList$Mate.list(
          key: p.get('key').build(),
          children: p.get('children').build(),
          itemExtent: p.get('itemExtent').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverGrid extends SliverMultiBoxAdaptorWidget
class SliverGrid$Mate extends _i1.SliverGrid with _i2.Mate {
  /// SliverGrid SliverGrid({Key? key, required SliverChildDelegate delegate, required SliverGridDelegate gridDelegate})
  SliverGrid$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required SliverChildDelegate delegate} , default:none
    required super.delegate,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , default:none
    required super.gridDelegate,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'delegate': _i2.BuilderArg<_i4.SliverChildDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          ),
          'gridDelegate': _i2.BuilderArg<_i6.SliverGridDelegate>(
            name: 'gridDelegate',
            init: gridDelegate,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverGrid';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverGrid$Mate(
          key: p.get('key').build(),
          delegate: p.get('delegate').build(),
          gridDelegate: p.get('gridDelegate').build(),
        );
  }

  /// SliverGrid SliverGrid.builder({Key? key, required SliverGridDelegate gridDelegate, required Widget? Function(BuildContext, int) itemBuilder, int? Function(Key)? findChildIndexCallback, int? itemCount, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, bool addSemanticIndexes = true})
  SliverGrid$Mate.builder({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required SliverGridDelegate gridDelegate} , default:none
    required super.gridDelegate,

    /// optionalParameters: {required Widget? Function(BuildContext, int) itemBuilder} , default:none
    required super.itemBuilder,

    /// optionalParameters: {int? Function(Key)? findChildIndexCallback} , default:none
    super.findChildIndexCallback,

    /// optionalParameters: {int? itemCount} , default:none
    super.itemCount,

    /// optionalParameters: {bool addAutomaticKeepAlives = true} , default:processed=BooleanLiteralImpl
    super.addAutomaticKeepAlives,

    /// optionalParameters: {bool addRepaintBoundaries = true} , default:processed=BooleanLiteralImpl
    super.addRepaintBoundaries,

    /// optionalParameters: {bool addSemanticIndexes = true} , default:processed=BooleanLiteralImpl
    super.addSemanticIndexes,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'gridDelegate': _i2.BuilderArg<_i6.SliverGridDelegate>(
            name: 'gridDelegate',
            init: gridDelegate,
            isNamed: true,
          ),
          'itemBuilder': _i2.BuilderArg<_i5.NullableIndexedWidgetBuilder>(
            name: 'itemBuilder',
            init: itemBuilder,
            isNamed: true,
          ),
          'findChildIndexCallback': _i2.BuilderArg<_i4.ChildIndexGetter?>(
            name: 'findChildIndexCallback',
            init: findChildIndexCallback,
            isNamed: true,
          ),
          'itemCount': _i2.BuilderArg<int?>(
            name: 'itemCount',
            init: itemCount,
            isNamed: true,
          ),
          'addAutomaticKeepAlives': _i2.BuilderArg<bool>(
            name: 'addAutomaticKeepAlives',
            init: addAutomaticKeepAlives,
            isNamed: true,
            defaultValue: true,
          ),
          'addRepaintBoundaries': _i2.BuilderArg<bool>(
            name: 'addRepaintBoundaries',
            init: addRepaintBoundaries,
            isNamed: true,
            defaultValue: true,
          ),
          'addSemanticIndexes': _i2.BuilderArg<bool>(
            name: 'addSemanticIndexes',
            init: addSemanticIndexes,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super.builder() {
    mateBuilderName = 'SliverGrid.builder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverGrid$Mate.builder(
          key: p.get('key').build(),
          gridDelegate: p.get('gridDelegate').build(),
          itemBuilder: p.get('itemBuilder').build(),
          findChildIndexCallback: p.get('findChildIndexCallback').build(),
          itemCount: p.get('itemCount').build(),
          addAutomaticKeepAlives: p.get('addAutomaticKeepAlives').build(),
          addRepaintBoundaries: p.get('addRepaintBoundaries').build(),
          addSemanticIndexes: p.get('addSemanticIndexes').build(),
        );
  }

  /// SliverGrid SliverGrid.count({Key? key, required int crossAxisCount, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, List<Widget> children = const <Widget>[]})
  SliverGrid$Mate.count({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required int crossAxisCount} , default:none
    required super.crossAxisCount,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , default:processed=DoubleLiteralImpl
    super.mainAxisSpacing,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , default:processed=DoubleLiteralImpl
    super.crossAxisSpacing,

    /// optionalParameters: {double childAspectRatio = 1.0} , default:processed=DoubleLiteralImpl
    super.childAspectRatio,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'crossAxisCount': _i2.BuilderArg<int>(
            name: 'crossAxisCount',
            init: crossAxisCount,
            isNamed: true,
          ),
          'mainAxisSpacing': _i2.BuilderArg<double>(
            name: 'mainAxisSpacing',
            init: mainAxisSpacing,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'crossAxisSpacing': _i2.BuilderArg<double>(
            name: 'crossAxisSpacing',
            init: crossAxisSpacing,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'childAspectRatio': _i2.BuilderArg<double>(
            name: 'childAspectRatio',
            init: childAspectRatio,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super.count() {
    mateBuilderName = 'SliverGrid.count';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverGrid$Mate.count(
          key: p.get('key').build(),
          crossAxisCount: p.get('crossAxisCount').build(),
          mainAxisSpacing: p.get('mainAxisSpacing').build(),
          crossAxisSpacing: p.get('crossAxisSpacing').build(),
          childAspectRatio: p.get('childAspectRatio').build(),
          children: p.get('children').build(),
        );
  }

  /// SliverGrid SliverGrid.extent({Key? key, required double maxCrossAxisExtent, double mainAxisSpacing = 0.0, double crossAxisSpacing = 0.0, double childAspectRatio = 1.0, List<Widget> children = const <Widget>[]})
  SliverGrid$Mate.extent({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double maxCrossAxisExtent} , default:none
    required super.maxCrossAxisExtent,

    /// optionalParameters: {double mainAxisSpacing = 0.0} , default:processed=DoubleLiteralImpl
    super.mainAxisSpacing,

    /// optionalParameters: {double crossAxisSpacing = 0.0} , default:processed=DoubleLiteralImpl
    super.crossAxisSpacing,

    /// optionalParameters: {double childAspectRatio = 1.0} , default:processed=DoubleLiteralImpl
    super.childAspectRatio,

    /// optionalParameters: {List<Widget> children = const <Widget>[]} , default:unprocessed=ListLiteralImpl
    super.children,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'maxCrossAxisExtent': _i2.BuilderArg<double>(
            name: 'maxCrossAxisExtent',
            init: maxCrossAxisExtent,
            isNamed: true,
          ),
          'mainAxisSpacing': _i2.BuilderArg<double>(
            name: 'mainAxisSpacing',
            init: mainAxisSpacing,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'crossAxisSpacing': _i2.BuilderArg<double>(
            name: 'crossAxisSpacing',
            init: crossAxisSpacing,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'childAspectRatio': _i2.BuilderArg<double>(
            name: 'childAspectRatio',
            init: childAspectRatio,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'children': _i2.BuilderArg<List<_i5.Widget>>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super.extent() {
    mateBuilderName = 'SliverGrid.extent';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverGrid$Mate.extent(
          key: p.get('key').build(),
          maxCrossAxisExtent: p.get('maxCrossAxisExtent').build(),
          mainAxisSpacing: p.get('mainAxisSpacing').build(),
          crossAxisSpacing: p.get('crossAxisSpacing').build(),
          childAspectRatio: p.get('childAspectRatio').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverMultiBoxAdaptorElement extends RenderObjectElement implements RenderSliverBoxChildManager
class SliverMultiBoxAdaptorElement$Mate extends _i1.SliverMultiBoxAdaptorElement
    with _i2.Mate {
  /// SliverMultiBoxAdaptorElement SliverMultiBoxAdaptorElement(SliverMultiBoxAdaptorWidget widget, {bool replaceMovedChildren = false})
  SliverMultiBoxAdaptorElement$Mate(
    /// requiredParameters: SliverMultiBoxAdaptorWidget widget
    super.widget, {
    /// optionalParameters: {bool replaceMovedChildren = false} , default:processed=BooleanLiteralImpl
    super.replaceMovedChildren,
  })  : mateParams = {
          'widget': _i2.BuilderArg<_i1.SliverMultiBoxAdaptorWidget>(
            name: 'widget',
            init: widget,
            isNamed: false,
          ),
          'replaceMovedChildren': _i2.BuilderArg<bool>(
            name: 'replaceMovedChildren',
            init: replaceMovedChildren,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'SliverMultiBoxAdaptorElement';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverMultiBoxAdaptorElement$Mate(
          p.get('widget').value,
          replaceMovedChildren: p.get('replaceMovedChildren').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverOpacity extends SingleChildRenderObjectWidget
class SliverOpacity$Mate extends _i1.SliverOpacity with _i2.Mate {
  /// SliverOpacity SliverOpacity({Key? key, required double opacity, bool alwaysIncludeSemantics = false, Widget? sliver})
  SliverOpacity$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double opacity} , default:none
    required super.opacity,

    /// optionalParameters: {bool alwaysIncludeSemantics = false} , default:processed=BooleanLiteralImpl
    super.alwaysIncludeSemantics,

    /// optionalParameters: {Widget? sliver} , default:none
    super.sliver,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'opacity': _i2.BuilderArg<double>(
            name: 'opacity',
            init: opacity,
            isNamed: true,
          ),
          'alwaysIncludeSemantics': _i2.BuilderArg<bool>(
            name: 'alwaysIncludeSemantics',
            init: alwaysIncludeSemantics,
            isNamed: true,
            defaultValue: false,
          ),
          'sliver': _i2.BuilderArg<_i5.Widget?>(
            name: 'sliver',
            init: sliver,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverOpacity';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverOpacity$Mate(
          key: p.get('key').build(),
          opacity: p.get('opacity').build(),
          alwaysIncludeSemantics: p.get('alwaysIncludeSemantics').build(),
          sliver: p.get('sliver').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverIgnorePointer extends SingleChildRenderObjectWidget
class SliverIgnorePointer$Mate extends _i1.SliverIgnorePointer with _i2.Mate {
  /// SliverIgnorePointer SliverIgnorePointer({Key? key, bool ignoring = true, bool? ignoringSemantics, Widget? sliver})
  SliverIgnorePointer$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool ignoring = true} , default:processed=BooleanLiteralImpl
    super.ignoring,

    /// optionalParameters: {bool? ignoringSemantics} , default:none
    super.ignoringSemantics,

    /// optionalParameters: {Widget? sliver} , default:none
    super.sliver,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'ignoring': _i2.BuilderArg<bool>(
            name: 'ignoring',
            init: ignoring,
            isNamed: true,
            defaultValue: true,
          ),
          'ignoringSemantics': _i2.BuilderArg<bool?>(
            name: 'ignoringSemantics',
            init: ignoringSemantics,
            isNamed: true,
          ),
          'sliver': _i2.BuilderArg<_i5.Widget?>(
            name: 'sliver',
            init: sliver,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverIgnorePointer';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverIgnorePointer$Mate(
          key: p.get('key').build(),
          ignoring: p.get('ignoring').build(),
          ignoringSemantics: p.get('ignoringSemantics').build(),
          sliver: p.get('sliver').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SliverOffstage extends SingleChildRenderObjectWidget
class SliverOffstage$Mate extends _i1.SliverOffstage with _i2.Mate {
  /// SliverOffstage SliverOffstage({Key? key, bool offstage = true, Widget? sliver})
  SliverOffstage$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {bool offstage = true} , default:processed=BooleanLiteralImpl
    super.offstage,

    /// optionalParameters: {Widget? sliver} , default:none
    super.sliver,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'offstage': _i2.BuilderArg<bool>(
            name: 'offstage',
            init: offstage,
            isNamed: true,
            defaultValue: true,
          ),
          'sliver': _i2.BuilderArg<_i5.Widget?>(
            name: 'sliver',
            init: sliver,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SliverOffstage';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SliverOffstage$Mate(
          key: p.get('key').build(),
          offstage: p.get('offstage').build(),
          sliver: p.get('sliver').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class KeepAlive extends ParentDataWidget<KeepAliveParentDataMixin>
class KeepAlive$Mate extends _i1.KeepAlive with _i2.Mate {
  /// KeepAlive KeepAlive({Key? key, required bool keepAlive, required Widget child})
  KeepAlive$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required bool keepAlive} , default:none
    required super.keepAlive,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'keepAlive': _i2.BuilderArg<bool>(
            name: 'keepAlive',
            init: keepAlive,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i5.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'KeepAlive';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => KeepAlive$Mate(
          key: p.get('key').build(),
          keepAlive: p.get('keepAlive').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
