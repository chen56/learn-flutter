// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/widgets/text_selection.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/services/text_input.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/rendering/layer.dart' as _i5;
import 'package:flutter/src/rendering/editable.dart' as _i6;
import 'package:flutter/src/gestures/recognizer.dart' as _i7;
import 'package:flutter/gestures.dart' as _i8;
import 'dart:ui' as _i9;
import 'package:flutter/src/widgets/magnifier.dart' as _i10;
import 'package:flutter/src/rendering/selection.dart' as _i11;
import 'package:flutter/src/foundation/change_notifier.dart' as _i12;
import 'package:flutter/src/foundation/basic_types.dart' as _i13;
import 'package:flutter/src/gestures/drag_details.dart' as _i14;
import 'package:flutter/cupertino.dart' as _i15;
import 'package:flutter/src/foundation/key.dart' as _i16;
import 'package:flutter/src/gestures/tap_and_drag.dart' as _i17;
import 'package:flutter/src/gestures/force_press.dart' as _i18;
import 'package:flutter/src/gestures/tap.dart' as _i19;
import 'package:flutter/src/gestures/long_press.dart' as _i20;
import 'package:flutter/src/rendering/proxy_box.dart' as _i21;

/// class TextSelectionOverlay
class TextSelectionOverlay$Mate extends _i1.TextSelectionOverlay with _i2.Mate {
  /// TextSelectionOverlay TextSelectionOverlay({required TextEditingValue value, required BuildContext context, Widget? debugRequiredFor, required LayerLink toolbarLayerLink, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required RenderEditable renderObject, TextSelectionControls? selectionControls, bool handlesVisible = false, required TextSelectionDelegate selectionDelegate, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, ClipboardStatusNotifier? clipboardStatus, Widget Function(BuildContext)? contextMenuBuilder, required TextMagnifierConfiguration magnifierConfiguration})
  TextSelectionOverlay$Mate({
    /// optionalParameters: {required TextEditingValue value} , default:none
    required super.value,

    /// optionalParameters: {required BuildContext context} , default:none
    required super.context,

    /// optionalParameters: {Widget? debugRequiredFor} , default:none
    super.debugRequiredFor,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , default:none
    required super.toolbarLayerLink,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , default:none
    required super.startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , default:none
    required super.endHandleLayerLink,

    /// optionalParameters: {required RenderEditable renderObject} , default:none
    required super.renderObject,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    super.selectionControls,

    /// optionalParameters: {bool handlesVisible = false} , default:processed=BooleanLiteralImpl
    super.handlesVisible,

    /// optionalParameters: {required TextSelectionDelegate selectionDelegate} , default:none
    required super.selectionDelegate,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , default:none
    super.onSelectionHandleTapped,

    /// optionalParameters: {ClipboardStatusNotifier? clipboardStatus} , default:none
    super.clipboardStatus,

    /// optionalParameters: {Widget Function(BuildContext)? contextMenuBuilder} , default:none
    super.contextMenuBuilder,

    /// optionalParameters: {required TextMagnifierConfiguration magnifierConfiguration} , default:none
    required super.magnifierConfiguration,
  })  : mateParams = {
          'value': _i2.BuilderArg<_i3.TextEditingValue>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'context': _i2.BuilderArg<_i4.BuildContext>(
            name: 'context',
            init: context,
            isNamed: true,
          ),
          'debugRequiredFor': _i2.BuilderArg<_i4.Widget?>(
            name: 'debugRequiredFor',
            init: debugRequiredFor,
            isNamed: true,
          ),
          'toolbarLayerLink': _i2.BuilderArg<_i5.LayerLink>(
            name: 'toolbarLayerLink',
            init: toolbarLayerLink,
            isNamed: true,
          ),
          'startHandleLayerLink': _i2.BuilderArg<_i5.LayerLink>(
            name: 'startHandleLayerLink',
            init: startHandleLayerLink,
            isNamed: true,
          ),
          'endHandleLayerLink': _i2.BuilderArg<_i5.LayerLink>(
            name: 'endHandleLayerLink',
            init: endHandleLayerLink,
            isNamed: true,
          ),
          'renderObject': _i2.BuilderArg<_i6.RenderEditable>(
            name: 'renderObject',
            init: renderObject,
            isNamed: true,
          ),
          'selectionControls': _i2.BuilderArg<_i1.TextSelectionControls?>(
            name: 'selectionControls',
            init: selectionControls,
            isNamed: true,
          ),
          'handlesVisible': _i2.BuilderArg<bool>(
            name: 'handlesVisible',
            init: handlesVisible,
            isNamed: true,
            defaultValue: false,
          ),
          'selectionDelegate': _i2.BuilderArg<_i3.TextSelectionDelegate>(
            name: 'selectionDelegate',
            init: selectionDelegate,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i7.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i8.DragStartBehavior.start,
          ),
          'onSelectionHandleTapped': _i2.BuilderArg<_i9.VoidCallback?>(
            name: 'onSelectionHandleTapped',
            init: onSelectionHandleTapped,
            isNamed: true,
          ),
          'clipboardStatus': _i2.BuilderArg<_i1.ClipboardStatusNotifier?>(
            name: 'clipboardStatus',
            init: clipboardStatus,
            isNamed: true,
          ),
          'contextMenuBuilder': _i2.BuilderArg<_i4.WidgetBuilder?>(
            name: 'contextMenuBuilder',
            init: contextMenuBuilder,
            isNamed: true,
          ),
          'magnifierConfiguration': _i2.BuilderArg<_i10.TextMagnifierConfiguration>(
            name: 'magnifierConfiguration',
            init: magnifierConfiguration,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TextSelectionOverlay';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSelectionOverlay$Mate(
          value: p.get('value').build(),
          context: p.get('context').build(),
          debugRequiredFor: p.get('debugRequiredFor').build(),
          toolbarLayerLink: p.get('toolbarLayerLink').build(),
          startHandleLayerLink: p.get('startHandleLayerLink').build(),
          endHandleLayerLink: p.get('endHandleLayerLink').build(),
          renderObject: p.get('renderObject').build(),
          selectionControls: p.get('selectionControls').build(),
          handlesVisible: p.get('handlesVisible').build(),
          selectionDelegate: p.get('selectionDelegate').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SelectionOverlay
class SelectionOverlay$Mate extends _i1.SelectionOverlay with _i2.Mate {
  /// SelectionOverlay SelectionOverlay({required BuildContext context, Widget? debugRequiredFor, required TextSelectionHandleType startHandleType, required double lineHeightAtStart, ValueListenable<bool>? startHandlesVisible, void Function(DragStartDetails)? onStartHandleDragStart, void Function(DragUpdateDetails)? onStartHandleDragUpdate, void Function(DragEndDetails)? onStartHandleDragEnd, required TextSelectionHandleType endHandleType, required double lineHeightAtEnd, ValueListenable<bool>? endHandlesVisible, void Function(DragStartDetails)? onEndHandleDragStart, void Function(DragUpdateDetails)? onEndHandleDragUpdate, void Function(DragEndDetails)? onEndHandleDragEnd, ValueListenable<bool>? toolbarVisible, required List<TextSelectionPoint> selectionEndpoints, required TextSelectionControls? selectionControls, required TextSelectionDelegate? selectionDelegate, required ClipboardStatusNotifier? clipboardStatus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, required LayerLink toolbarLayerLink, DragStartBehavior dragStartBehavior = DragStartBehavior.start, void Function()? onSelectionHandleTapped, Offset? toolbarLocation, TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled})
  SelectionOverlay$Mate({
    /// optionalParameters: {required BuildContext context} , default:none
    required super.context,

    /// optionalParameters: {Widget? debugRequiredFor} , default:none
    super.debugRequiredFor,

    /// optionalParameters: {required TextSelectionHandleType startHandleType} , default:none
    required super.startHandleType,

    /// optionalParameters: {required double lineHeightAtStart} , default:none
    required super.lineHeightAtStart,

    /// optionalParameters: {ValueListenable<bool>? startHandlesVisible} , default:none
    super.startHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onStartHandleDragStart} , default:none
    super.onStartHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onStartHandleDragUpdate} , default:none
    super.onStartHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onStartHandleDragEnd} , default:none
    super.onStartHandleDragEnd,

    /// optionalParameters: {required TextSelectionHandleType endHandleType} , default:none
    required super.endHandleType,

    /// optionalParameters: {required double lineHeightAtEnd} , default:none
    required super.lineHeightAtEnd,

    /// optionalParameters: {ValueListenable<bool>? endHandlesVisible} , default:none
    super.endHandlesVisible,

    /// optionalParameters: {void Function(DragStartDetails)? onEndHandleDragStart} , default:none
    super.onEndHandleDragStart,

    /// optionalParameters: {void Function(DragUpdateDetails)? onEndHandleDragUpdate} , default:none
    super.onEndHandleDragUpdate,

    /// optionalParameters: {void Function(DragEndDetails)? onEndHandleDragEnd} , default:none
    super.onEndHandleDragEnd,

    /// optionalParameters: {ValueListenable<bool>? toolbarVisible} , default:none
    super.toolbarVisible,

    /// optionalParameters: {required List<TextSelectionPoint> selectionEndpoints} , default:none
    required super.selectionEndpoints,

    /// optionalParameters: {required TextSelectionControls? selectionControls} , default:none
    required super.selectionControls,

    /// optionalParameters: {required TextSelectionDelegate? selectionDelegate} , default:none
    required super.selectionDelegate,

    /// optionalParameters: {required ClipboardStatusNotifier? clipboardStatus} , default:none
    required super.clipboardStatus,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , default:none
    required super.startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , default:none
    required super.endHandleLayerLink,

    /// optionalParameters: {required LayerLink toolbarLayerLink} , default:none
    required super.toolbarLayerLink,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {void Function()? onSelectionHandleTapped} , default:none
    super.onSelectionHandleTapped,

    /// optionalParameters: {TextMagnifierConfiguration magnifierConfiguration = TextMagnifierConfiguration.disabled} , default:processed=PrefixedIdentifierImpl
    super.magnifierConfiguration,
  })  : mateParams = {
          'context': _i2.BuilderArg<_i4.BuildContext>(
            name: 'context',
            init: context,
            isNamed: true,
          ),
          'debugRequiredFor': _i2.BuilderArg<_i4.Widget?>(
            name: 'debugRequiredFor',
            init: debugRequiredFor,
            isNamed: true,
          ),
          'startHandleType': _i2.BuilderArg<_i11.TextSelectionHandleType>(
            name: 'startHandleType',
            init: startHandleType,
            isNamed: true,
          ),
          'lineHeightAtStart': _i2.BuilderArg<double>(
            name: 'lineHeightAtStart',
            init: lineHeightAtStart,
            isNamed: true,
          ),
          'startHandlesVisible': _i2.BuilderArg<_i12.ValueListenable<bool>?>(
            name: 'startHandlesVisible',
            init: startHandlesVisible,
            isNamed: true,
          ),
          'onStartHandleDragStart': _i2.BuilderArg<_i13.ValueChanged<_i14.DragStartDetails>?>(
            name: 'onStartHandleDragStart',
            init: onStartHandleDragStart,
            isNamed: true,
          ),
          'onStartHandleDragUpdate': _i2.BuilderArg<_i13.ValueChanged<_i14.DragUpdateDetails>?>(
            name: 'onStartHandleDragUpdate',
            init: onStartHandleDragUpdate,
            isNamed: true,
          ),
          'onStartHandleDragEnd': _i2.BuilderArg<_i13.ValueChanged<_i14.DragEndDetails>?>(
            name: 'onStartHandleDragEnd',
            init: onStartHandleDragEnd,
            isNamed: true,
          ),
          'endHandleType': _i2.BuilderArg<_i11.TextSelectionHandleType>(
            name: 'endHandleType',
            init: endHandleType,
            isNamed: true,
          ),
          'lineHeightAtEnd': _i2.BuilderArg<double>(
            name: 'lineHeightAtEnd',
            init: lineHeightAtEnd,
            isNamed: true,
          ),
          'endHandlesVisible': _i2.BuilderArg<_i12.ValueListenable<bool>?>(
            name: 'endHandlesVisible',
            init: endHandlesVisible,
            isNamed: true,
          ),
          'onEndHandleDragStart': _i2.BuilderArg<_i13.ValueChanged<_i14.DragStartDetails>?>(
            name: 'onEndHandleDragStart',
            init: onEndHandleDragStart,
            isNamed: true,
          ),
          'onEndHandleDragUpdate': _i2.BuilderArg<_i13.ValueChanged<_i14.DragUpdateDetails>?>(
            name: 'onEndHandleDragUpdate',
            init: onEndHandleDragUpdate,
            isNamed: true,
          ),
          'onEndHandleDragEnd': _i2.BuilderArg<_i13.ValueChanged<_i14.DragEndDetails>?>(
            name: 'onEndHandleDragEnd',
            init: onEndHandleDragEnd,
            isNamed: true,
          ),
          'toolbarVisible': _i2.BuilderArg<_i12.ValueListenable<bool>?>(
            name: 'toolbarVisible',
            init: toolbarVisible,
            isNamed: true,
          ),
          'selectionEndpoints': _i2.BuilderArg<List<_i6.TextSelectionPoint>>(
            name: 'selectionEndpoints',
            init: selectionEndpoints,
            isNamed: true,
          ),
          'selectionControls': _i2.BuilderArg<_i1.TextSelectionControls?>(
            name: 'selectionControls',
            init: selectionControls,
            isNamed: true,
          ),
          'selectionDelegate': _i2.BuilderArg<_i3.TextSelectionDelegate?>(
            name: 'selectionDelegate',
            init: selectionDelegate,
            isNamed: true,
          ),
          'clipboardStatus': _i2.BuilderArg<_i1.ClipboardStatusNotifier?>(
            name: 'clipboardStatus',
            init: clipboardStatus,
            isNamed: true,
          ),
          'startHandleLayerLink': _i2.BuilderArg<_i5.LayerLink>(
            name: 'startHandleLayerLink',
            init: startHandleLayerLink,
            isNamed: true,
          ),
          'endHandleLayerLink': _i2.BuilderArg<_i5.LayerLink>(
            name: 'endHandleLayerLink',
            init: endHandleLayerLink,
            isNamed: true,
          ),
          'toolbarLayerLink': _i2.BuilderArg<_i5.LayerLink>(
            name: 'toolbarLayerLink',
            init: toolbarLayerLink,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i7.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i8.DragStartBehavior.start,
          ),
          'onSelectionHandleTapped': _i2.BuilderArg<_i9.VoidCallback?>(
            name: 'onSelectionHandleTapped',
            init: onSelectionHandleTapped,
            isNamed: true,
          ),
          'magnifierConfiguration': _i2.BuilderArg<_i10.TextMagnifierConfiguration>(
            name: 'magnifierConfiguration',
            init: magnifierConfiguration,
            isNamed: true,
            defaultValue: _i15.TextMagnifierConfiguration.disabled,
          ),
        },
        super() {
    mateBuilderName = 'SelectionOverlay';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => SelectionOverlay$Mate(
          context: p.get('context').build(),
          debugRequiredFor: p.get('debugRequiredFor').build(),
          startHandleType: p.get('startHandleType').build(),
          lineHeightAtStart: p.get('lineHeightAtStart').build(),
          startHandlesVisible: p.get('startHandlesVisible').build(),
          onStartHandleDragStart: p.get('onStartHandleDragStart').build(),
          onStartHandleDragUpdate: p.get('onStartHandleDragUpdate').build(),
          onStartHandleDragEnd: p.get('onStartHandleDragEnd').build(),
          endHandleType: p.get('endHandleType').build(),
          lineHeightAtEnd: p.get('lineHeightAtEnd').build(),
          endHandlesVisible: p.get('endHandlesVisible').build(),
          onEndHandleDragStart: p.get('onEndHandleDragStart').build(),
          onEndHandleDragUpdate: p.get('onEndHandleDragUpdate').build(),
          onEndHandleDragEnd: p.get('onEndHandleDragEnd').build(),
          toolbarVisible: p.get('toolbarVisible').build(),
          selectionEndpoints: p.get('selectionEndpoints').build(),
          selectionControls: p.get('selectionControls').build(),
          selectionDelegate: p.get('selectionDelegate').build(),
          clipboardStatus: p.get('clipboardStatus').build(),
          startHandleLayerLink: p.get('startHandleLayerLink').build(),
          endHandleLayerLink: p.get('endHandleLayerLink').build(),
          toolbarLayerLink: p.get('toolbarLayerLink').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          onSelectionHandleTapped: p.get('onSelectionHandleTapped').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TextSelectionGestureDetectorBuilder
class TextSelectionGestureDetectorBuilder$Mate extends _i1.TextSelectionGestureDetectorBuilder with _i2.Mate {
  /// TextSelectionGestureDetectorBuilder TextSelectionGestureDetectorBuilder({required TextSelectionGestureDetectorBuilderDelegate delegate})
  TextSelectionGestureDetectorBuilder$Mate(
      {
      /// optionalParameters: {required TextSelectionGestureDetectorBuilderDelegate delegate} , default:none
      required super.delegate})
      : mateParams = {
          'delegate': _i2.BuilderArg<_i1.TextSelectionGestureDetectorBuilderDelegate>(
            name: 'delegate',
            init: delegate,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'TextSelectionGestureDetectorBuilder';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSelectionGestureDetectorBuilder$Mate(delegate: p.get('delegate').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class TextSelectionGestureDetector extends StatefulWidget
class TextSelectionGestureDetector$Mate extends _i1.TextSelectionGestureDetector with _i2.Mate {
  /// TextSelectionGestureDetector TextSelectionGestureDetector({Key? key, void Function()? onTapTrackStart, void Function()? onTapTrackReset, void Function(TapDragDownDetails)? onTapDown, void Function(ForcePressDetails)? onForcePressStart, void Function(ForcePressDetails)? onForcePressEnd, void Function()? onSecondaryTap, void Function(TapDownDetails)? onSecondaryTapDown, void Function(TapDragUpDetails)? onSingleTapUp, void Function()? onSingleTapCancel, void Function(LongPressStartDetails)? onSingleLongTapStart, void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate, void Function(LongPressEndDetails)? onSingleLongTapEnd, void Function(TapDragDownDetails)? onDoubleTapDown, void Function(TapDragDownDetails)? onTripleTapDown, void Function(TapDragStartDetails)? onDragSelectionStart, void Function(TapDragUpdateDetails)? onDragSelectionUpdate, void Function(TapDragEndDetails)? onDragSelectionEnd, HitTestBehavior? behavior, required Widget child})
  TextSelectionGestureDetector$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {void Function()? onTapTrackStart} , default:none
    super.onTapTrackStart,

    /// optionalParameters: {void Function()? onTapTrackReset} , default:none
    super.onTapTrackReset,

    /// optionalParameters: {void Function(TapDragDownDetails)? onTapDown} , default:none
    super.onTapDown,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressStart} , default:none
    super.onForcePressStart,

    /// optionalParameters: {void Function(ForcePressDetails)? onForcePressEnd} , default:none
    super.onForcePressEnd,

    /// optionalParameters: {void Function()? onSecondaryTap} , default:none
    super.onSecondaryTap,

    /// optionalParameters: {void Function(TapDownDetails)? onSecondaryTapDown} , default:none
    super.onSecondaryTapDown,

    /// optionalParameters: {void Function(TapDragUpDetails)? onSingleTapUp} , default:none
    super.onSingleTapUp,

    /// optionalParameters: {void Function()? onSingleTapCancel} , default:none
    super.onSingleTapCancel,

    /// optionalParameters: {void Function(LongPressStartDetails)? onSingleLongTapStart} , default:none
    super.onSingleLongTapStart,

    /// optionalParameters: {void Function(LongPressMoveUpdateDetails)? onSingleLongTapMoveUpdate} , default:none
    super.onSingleLongTapMoveUpdate,

    /// optionalParameters: {void Function(LongPressEndDetails)? onSingleLongTapEnd} , default:none
    super.onSingleLongTapEnd,

    /// optionalParameters: {void Function(TapDragDownDetails)? onDoubleTapDown} , default:none
    super.onDoubleTapDown,

    /// optionalParameters: {void Function(TapDragDownDetails)? onTripleTapDown} , default:none
    super.onTripleTapDown,

    /// optionalParameters: {void Function(TapDragStartDetails)? onDragSelectionStart} , default:none
    super.onDragSelectionStart,

    /// optionalParameters: {void Function(TapDragUpdateDetails)? onDragSelectionUpdate} , default:none
    super.onDragSelectionUpdate,

    /// optionalParameters: {void Function(TapDragEndDetails)? onDragSelectionEnd} , default:none
    super.onDragSelectionEnd,

    /// optionalParameters: {HitTestBehavior? behavior} , default:none
    super.behavior,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i16.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'onTapTrackStart': _i2.BuilderArg<_i9.VoidCallback?>(
            name: 'onTapTrackStart',
            init: onTapTrackStart,
            isNamed: true,
          ),
          'onTapTrackReset': _i2.BuilderArg<_i9.VoidCallback?>(
            name: 'onTapTrackReset',
            init: onTapTrackReset,
            isNamed: true,
          ),
          'onTapDown': _i2.BuilderArg<_i17.GestureTapDragDownCallback?>(
            name: 'onTapDown',
            init: onTapDown,
            isNamed: true,
          ),
          'onForcePressStart': _i2.BuilderArg<_i18.GestureForcePressStartCallback?>(
            name: 'onForcePressStart',
            init: onForcePressStart,
            isNamed: true,
          ),
          'onForcePressEnd': _i2.BuilderArg<_i18.GestureForcePressEndCallback?>(
            name: 'onForcePressEnd',
            init: onForcePressEnd,
            isNamed: true,
          ),
          'onSecondaryTap': _i2.BuilderArg<_i19.GestureTapCallback?>(
            name: 'onSecondaryTap',
            init: onSecondaryTap,
            isNamed: true,
          ),
          'onSecondaryTapDown': _i2.BuilderArg<_i19.GestureTapDownCallback?>(
            name: 'onSecondaryTapDown',
            init: onSecondaryTapDown,
            isNamed: true,
          ),
          'onSingleTapUp': _i2.BuilderArg<_i17.GestureTapDragUpCallback?>(
            name: 'onSingleTapUp',
            init: onSingleTapUp,
            isNamed: true,
          ),
          'onSingleTapCancel': _i2.BuilderArg<_i17.GestureCancelCallback?>(
            name: 'onSingleTapCancel',
            init: onSingleTapCancel,
            isNamed: true,
          ),
          'onSingleLongTapStart': _i2.BuilderArg<_i20.GestureLongPressStartCallback?>(
            name: 'onSingleLongTapStart',
            init: onSingleLongTapStart,
            isNamed: true,
          ),
          'onSingleLongTapMoveUpdate': _i2.BuilderArg<_i20.GestureLongPressMoveUpdateCallback?>(
            name: 'onSingleLongTapMoveUpdate',
            init: onSingleLongTapMoveUpdate,
            isNamed: true,
          ),
          'onSingleLongTapEnd': _i2.BuilderArg<_i20.GestureLongPressEndCallback?>(
            name: 'onSingleLongTapEnd',
            init: onSingleLongTapEnd,
            isNamed: true,
          ),
          'onDoubleTapDown': _i2.BuilderArg<_i17.GestureTapDragDownCallback?>(
            name: 'onDoubleTapDown',
            init: onDoubleTapDown,
            isNamed: true,
          ),
          'onTripleTapDown': _i2.BuilderArg<_i17.GestureTapDragDownCallback?>(
            name: 'onTripleTapDown',
            init: onTripleTapDown,
            isNamed: true,
          ),
          'onDragSelectionStart': _i2.BuilderArg<_i17.GestureTapDragStartCallback?>(
            name: 'onDragSelectionStart',
            init: onDragSelectionStart,
            isNamed: true,
          ),
          'onDragSelectionUpdate': _i2.BuilderArg<_i17.GestureTapDragUpdateCallback?>(
            name: 'onDragSelectionUpdate',
            init: onDragSelectionUpdate,
            isNamed: true,
          ),
          'onDragSelectionEnd': _i2.BuilderArg<_i17.GestureTapDragEndCallback?>(
            name: 'onDragSelectionEnd',
            init: onDragSelectionEnd,
            isNamed: true,
          ),
          'behavior': _i2.BuilderArg<_i21.HitTestBehavior?>(
            name: 'behavior',
            init: behavior,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'TextSelectionGestureDetector';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSelectionGestureDetector$Mate(
          key: p.get('key').build(),
          onTapTrackStart: p.get('onTapTrackStart').build(),
          onTapTrackReset: p.get('onTapTrackReset').build(),
          onTapDown: p.get('onTapDown').build(),
          onForcePressStart: p.get('onForcePressStart').build(),
          onForcePressEnd: p.get('onForcePressEnd').build(),
          onSecondaryTap: p.get('onSecondaryTap').build(),
          onSecondaryTapDown: p.get('onSecondaryTapDown').build(),
          onSingleTapUp: p.get('onSingleTapUp').build(),
          onSingleTapCancel: p.get('onSingleTapCancel').build(),
          onSingleLongTapStart: p.get('onSingleLongTapStart').build(),
          onSingleLongTapMoveUpdate: p.get('onSingleLongTapMoveUpdate').build(),
          onSingleLongTapEnd: p.get('onSingleLongTapEnd').build(),
          onDoubleTapDown: p.get('onDoubleTapDown').build(),
          onTripleTapDown: p.get('onTripleTapDown').build(),
          onDragSelectionStart: p.get('onDragSelectionStart').build(),
          onDragSelectionUpdate: p.get('onDragSelectionUpdate').build(),
          onDragSelectionEnd: p.get('onDragSelectionEnd').build(),
          behavior: p.get('behavior').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ClipboardStatusNotifier extends ValueNotifier<ClipboardStatus> with WidgetsBindingObserver
class ClipboardStatusNotifier$Mate extends _i1.ClipboardStatusNotifier with _i2.Mate {
  /// ClipboardStatusNotifier ClipboardStatusNotifier({ClipboardStatus value = ClipboardStatus.unknown})
  ClipboardStatusNotifier$Mate(
      {
      /// optionalParameters: {ClipboardStatus value = ClipboardStatus.unknown} , default:processed=PrefixedIdentifierImpl
      super.value})
      : mateParams = {
          'value': _i2.BuilderArg<_i1.ClipboardStatus>(
            name: 'value',
            init: value,
            isNamed: true,
            defaultValue: _i15.ClipboardStatus.unknown,
          )
        },
        super() {
    mateBuilderName = 'ClipboardStatusNotifier';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => ClipboardStatusNotifier$Mate(value: p.get('value').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class LiveTextInputStatusNotifier extends ValueNotifier<LiveTextInputStatus> with WidgetsBindingObserver
class LiveTextInputStatusNotifier$Mate extends _i1.LiveTextInputStatusNotifier with _i2.Mate {
  /// LiveTextInputStatusNotifier LiveTextInputStatusNotifier({LiveTextInputStatus value = LiveTextInputStatus.unknown})
  LiveTextInputStatusNotifier$Mate(
      {
      /// optionalParameters: {LiveTextInputStatus value = LiveTextInputStatus.unknown} , default:processed=PrefixedIdentifierImpl
      super.value})
      : mateParams = {
          'value': _i2.BuilderArg<_i1.LiveTextInputStatus>(
            name: 'value',
            init: value,
            isNamed: true,
            defaultValue: _i15.LiveTextInputStatus.unknown,
          )
        },
        super() {
    mateBuilderName = 'LiveTextInputStatusNotifier';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => LiveTextInputStatusNotifier$Mate(value: p.get('value').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
