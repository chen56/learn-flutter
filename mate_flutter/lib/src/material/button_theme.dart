// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/button_theme.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/painting/borders.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/material/color_scheme.dart' as _i8;
import 'package:flutter/src/material/theme_data.dart' as _i9;
import 'package:flutter/src/widgets/framework.dart' as _i10;

/// class ButtonTheme extends InheritedTheme
class ButtonTheme$Mate extends _i1.ButtonTheme with _i2.Mate {
  /// ButtonTheme ButtonTheme({Key? key, ButtonTextTheme textTheme = ButtonTextTheme.normal, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize, required Widget child})
  ButtonTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , default:processed=PrefixedIdentifierImpl
    super.textTheme,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , default:processed=PrefixedIdentifierImpl
    super.layoutBehavior,

    /// optionalParameters: {double minWidth = 88.0} , default:processed=DoubleLiteralImpl
    super.minWidth,

    /// optionalParameters: {double height = 36.0} , default:processed=DoubleLiteralImpl
    super.height,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {bool alignedDropdown = false} , default:processed=BooleanLiteralImpl
    super.alignedDropdown,

    /// optionalParameters: {Color? buttonColor} , default:none
    super.buttonColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , default:none
    super.colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    super.materialTapTargetSize,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'textTheme': _i2.BuilderArg<_i1.ButtonTextTheme>(
            name: 'textTheme',
            init: textTheme,
            isNamed: true,
            defaultValue: _i4.ButtonTextTheme.normal,
          ),
          'layoutBehavior': _i2.BuilderArg<_i1.ButtonBarLayoutBehavior>(
            name: 'layoutBehavior',
            init: layoutBehavior,
            isNamed: true,
            defaultValue: _i4.ButtonBarLayoutBehavior.padded,
          ),
          'minWidth': _i2.BuilderArg<double>(
            name: 'minWidth',
            init: minWidth,
            isNamed: true,
            defaultValue: 88.0,
          ),
          'height': _i2.BuilderArg<double>(
            name: 'height',
            init: height,
            isNamed: true,
            defaultValue: 36.0,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i6.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'alignedDropdown': _i2.BuilderArg<bool>(
            name: 'alignedDropdown',
            init: alignedDropdown,
            isNamed: true,
            defaultValue: false,
          ),
          'buttonColor': _i2.BuilderArg<_i7.Color?>(
            name: 'buttonColor',
            init: buttonColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i7.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i7.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i7.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i7.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i7.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'colorScheme': _i2.BuilderArg<_i8.ColorScheme?>(
            name: 'colorScheme',
            init: colorScheme,
            isNamed: true,
          ),
          'materialTapTargetSize': _i2.BuilderArg<_i9.MaterialTapTargetSize?>(
            name: 'materialTapTargetSize',
            init: materialTapTargetSize,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i10.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ButtonTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonTheme$Mate(
          key: p.get('key').build(),
          textTheme: p.get('textTheme').build(),
          layoutBehavior: p.get('layoutBehavior').build(),
          minWidth: p.get('minWidth').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          shape: p.get('shape').build(),
          alignedDropdown: p.get('alignedDropdown').build(),
          buttonColor: p.get('buttonColor').build(),
          disabledColor: p.get('disabledColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          colorScheme: p.get('colorScheme').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
          child: p.get('child').build(),
        );
  }

  /// ButtonTheme ButtonTheme.fromButtonThemeData({Key? key, required ButtonThemeData data, required Widget child})
  ButtonTheme$Mate.fromButtonThemeData({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ButtonThemeData data} , default:none
    required super.data,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<_i1.ButtonThemeData>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i10.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super.fromButtonThemeData() {
    mateBuilderName = 'ButtonTheme.fromButtonThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonTheme$Mate.fromButtonThemeData(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ButtonThemeData with Diagnosticable
class ButtonThemeData$Mate extends _i1.ButtonThemeData with _i2.Mate {
  /// ButtonThemeData ButtonThemeData({ButtonTextTheme textTheme = ButtonTextTheme.normal, double minWidth = 88.0, double height = 36.0, EdgeInsetsGeometry? padding, ShapeBorder? shape, ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded, bool alignedDropdown = false, Color? buttonColor, Color? disabledColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, ColorScheme? colorScheme, MaterialTapTargetSize? materialTapTargetSize})
  ButtonThemeData$Mate({
    /// optionalParameters: {ButtonTextTheme textTheme = ButtonTextTheme.normal} , default:processed=PrefixedIdentifierImpl
    super.textTheme,

    /// optionalParameters: {double minWidth = 88.0} , default:processed=DoubleLiteralImpl
    super.minWidth,

    /// optionalParameters: {double height = 36.0} , default:processed=DoubleLiteralImpl
    super.height,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {ButtonBarLayoutBehavior layoutBehavior = ButtonBarLayoutBehavior.padded} , default:processed=PrefixedIdentifierImpl
    super.layoutBehavior,

    /// optionalParameters: {bool alignedDropdown = false} , default:processed=BooleanLiteralImpl
    super.alignedDropdown,

    /// optionalParameters: {Color? buttonColor} , default:none
    super.buttonColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {ColorScheme? colorScheme} , default:none
    super.colorScheme,

    /// optionalParameters: {MaterialTapTargetSize? materialTapTargetSize} , default:none
    super.materialTapTargetSize,
  })  : mateParams = {
          'textTheme': _i2.BuilderArg<_i1.ButtonTextTheme>(
            name: 'textTheme',
            init: textTheme,
            isNamed: true,
            defaultValue: _i4.ButtonTextTheme.normal,
          ),
          'minWidth': _i2.BuilderArg<double>(
            name: 'minWidth',
            init: minWidth,
            isNamed: true,
            defaultValue: 88.0,
          ),
          'height': _i2.BuilderArg<double>(
            name: 'height',
            init: height,
            isNamed: true,
            defaultValue: 36.0,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i6.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'layoutBehavior': _i2.BuilderArg<_i1.ButtonBarLayoutBehavior>(
            name: 'layoutBehavior',
            init: layoutBehavior,
            isNamed: true,
            defaultValue: _i4.ButtonBarLayoutBehavior.padded,
          ),
          'alignedDropdown': _i2.BuilderArg<bool>(
            name: 'alignedDropdown',
            init: alignedDropdown,
            isNamed: true,
            defaultValue: false,
          ),
          'buttonColor': _i2.BuilderArg<_i7.Color?>(
            name: 'buttonColor',
            init: buttonColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i7.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i7.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i7.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i7.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i7.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'colorScheme': _i2.BuilderArg<_i8.ColorScheme?>(
            name: 'colorScheme',
            init: colorScheme,
            isNamed: true,
          ),
          'materialTapTargetSize': _i2.BuilderArg<_i9.MaterialTapTargetSize?>(
            name: 'materialTapTargetSize',
            init: materialTapTargetSize,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ButtonThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonThemeData$Mate(
          textTheme: p.get('textTheme').build(),
          minWidth: p.get('minWidth').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          shape: p.get('shape').build(),
          layoutBehavior: p.get('layoutBehavior').build(),
          alignedDropdown: p.get('alignedDropdown').build(),
          buttonColor: p.get('buttonColor').build(),
          disabledColor: p.get('disabledColor').build(),
          focusColor: p.get('focusColor').build(),
          hoverColor: p.get('hoverColor').build(),
          highlightColor: p.get('highlightColor').build(),
          splashColor: p.get('splashColor').build(),
          colorScheme: p.get('colorScheme').build(),
          materialTapTargetSize: p.get('materialTapTargetSize').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
