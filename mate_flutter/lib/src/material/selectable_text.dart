// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/selectable_text.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/focus_manager.dart' as _i4;
import 'package:flutter/src/painting/text_style.dart' as _i5;
import 'package:flutter/src/painting/strut_style.dart' as _i6;
import 'dart:ui' as _i7;
import 'package:flutter/src/gestures/recognizer.dart' as _i8;
import 'package:flutter/gestures.dart' as _i9;
import 'package:flutter/src/widgets/text_selection.dart' as _i10;
import 'package:flutter/src/gestures/tap.dart' as _i11;
import 'package:flutter/src/widgets/scroll_physics.dart' as _i12;
import 'package:flutter/src/painting/text_painter.dart' as _i13;
import 'package:flutter/src/widgets/editable_text.dart' as _i14;
import 'package:flutter/src/widgets/magnifier.dart' as _i15;
import 'package:flutter/src/painting/text_span.dart' as _i16;

/// class SelectableText extends StatefulWidget
class SelectableText$Mate extends _i1.SelectableText with _i2.Mate {
  /// SelectableText SelectableText(String data, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate(
    /// requiredParameters: String data
    super.data, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    super.textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {double? textScaleFactor} , default:none
    super.textScaleFactor,

    /// optionalParameters: {bool showCursor = false} , default:processed=BooleanLiteralImpl
    super.showCursor,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {int? minLines} , default:none
    super.minLines,

    /// optionalParameters: {int? maxLines} , default:none
    super.maxLines,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    super.cursorWidth,

    /// optionalParameters: {double? cursorHeight} , default:none
    super.cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , default:none
    super.cursorRadius,

    /// optionalParameters: {Color? cursorColor} , default:none
    super.cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionWidthStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {bool enableInteractiveSelection = true} , default:processed=BooleanLiteralImpl
    super.enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    super.selectionControls,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    super.scrollPhysics,

    /// optionalParameters: {String? semanticsLabel} , default:none
    super.semanticsLabel,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    super.textWidthBasis,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , default:none
    super.onSelectionChanged,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , default:unprocessed=SimpleIdentifierImpl
    super.contextMenuBuilder,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , default:none
    super.magnifierConfiguration,
  })  : mateParams = {
          'data': _i2.BuilderArg<String>(
            name: 'data',
            init: data,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i4.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'strutStyle': _i2.BuilderArg<_i6.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i7.TextAlign?>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i7.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'textScaleFactor': _i2.BuilderArg<double?>(
            name: 'textScaleFactor',
            init: textScaleFactor,
            isNamed: true,
          ),
          'showCursor': _i2.BuilderArg<bool>(
            name: 'showCursor',
            init: showCursor,
            isNamed: true,
            defaultValue: false,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'minLines': _i2.BuilderArg<int?>(
            name: 'minLines',
            init: minLines,
            isNamed: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
          ),
          'cursorWidth': _i2.BuilderArg<double>(
            name: 'cursorWidth',
            init: cursorWidth,
            isNamed: true,
            defaultValue: 2.0,
          ),
          'cursorHeight': _i2.BuilderArg<double?>(
            name: 'cursorHeight',
            init: cursorHeight,
            isNamed: true,
          ),
          'cursorRadius': _i2.BuilderArg<_i7.Radius?>(
            name: 'cursorRadius',
            init: cursorRadius,
            isNamed: true,
          ),
          'cursorColor': _i2.BuilderArg<_i7.Color?>(
            name: 'cursorColor',
            init: cursorColor,
            isNamed: true,
          ),
          'selectionHeightStyle': _i2.BuilderArg<_i7.BoxHeightStyle>(
            name: 'selectionHeightStyle',
            init: selectionHeightStyle,
            isNamed: true,
          ),
          'selectionWidthStyle': _i2.BuilderArg<_i7.BoxWidthStyle>(
            name: 'selectionWidthStyle',
            init: selectionWidthStyle,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i8.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i9.DragStartBehavior.start,
          ),
          'enableInteractiveSelection': _i2.BuilderArg<bool>(
            name: 'enableInteractiveSelection',
            init: enableInteractiveSelection,
            isNamed: true,
            defaultValue: true,
          ),
          'selectionControls': _i2.BuilderArg<_i10.TextSelectionControls?>(
            name: 'selectionControls',
            init: selectionControls,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i11.GestureTapCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'scrollPhysics': _i2.BuilderArg<_i12.ScrollPhysics?>(
            name: 'scrollPhysics',
            init: scrollPhysics,
            isNamed: true,
          ),
          'semanticsLabel': _i2.BuilderArg<String?>(
            name: 'semanticsLabel',
            init: semanticsLabel,
            isNamed: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i7.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i13.TextWidthBasis?>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
          ),
          'onSelectionChanged': _i2.BuilderArg<_i14.SelectionChangedCallback?>(
            name: 'onSelectionChanged',
            init: onSelectionChanged,
            isNamed: true,
          ),
          'contextMenuBuilder': _i2.BuilderArg<_i14.EditableTextContextMenuBuilder?>(
            name: 'contextMenuBuilder',
            init: contextMenuBuilder,
            isNamed: true,
          ),
          'magnifierConfiguration': _i2.BuilderArg<_i15.TextMagnifierConfiguration?>(
            name: 'magnifierConfiguration',
            init: magnifierConfiguration,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SelectableText';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SelectableText$Mate(
          p.get('data').value,
          key: p.get('key').build(),
          focusNode: p.get('focusNode').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          minLines: p.get('minLines').build(),
          maxLines: p.get('maxLines').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
  }

  /// SelectableText SelectableText.rich(TextSpan textSpan, {Key? key, FocusNode? focusNode, TextStyle? style, StrutStyle? strutStyle, TextAlign? textAlign, TextDirection? textDirection, double? textScaleFactor, bool showCursor = false, bool autofocus = false, ToolbarOptions? toolbarOptions, int? minLines, int? maxLines, double cursorWidth = 2.0, double? cursorHeight, Radius? cursorRadius, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, void Function()? onTap, ScrollPhysics? scrollPhysics, String? semanticsLabel, TextHeightBehavior? textHeightBehavior, TextWidthBasis? textWidthBasis, void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged, Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder, TextMagnifierConfiguration? magnifierConfiguration})
  SelectableText$Mate.rich(
    /// requiredParameters: TextSpan textSpan
    super.textSpan, {
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {TextStyle? style} , default:none
    super.style,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {TextAlign? textAlign} , default:none
    super.textAlign,

    /// optionalParameters: {TextDirection? textDirection} , default:none
    super.textDirection,

    /// optionalParameters: {double? textScaleFactor} , default:none
    super.textScaleFactor,

    /// optionalParameters: {bool showCursor = false} , default:processed=BooleanLiteralImpl
    super.showCursor,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,

    /// optionalParameters: {int? minLines} , default:none
    super.minLines,

    /// optionalParameters: {int? maxLines} , default:none
    super.maxLines,

    /// optionalParameters: {double cursorWidth = 2.0} , default:processed=DoubleLiteralImpl
    super.cursorWidth,

    /// optionalParameters: {double? cursorHeight} , default:none
    super.cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , default:none
    super.cursorRadius,

    /// optionalParameters: {Color? cursorColor} , default:none
    super.cursorColor,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionWidthStyle,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {bool enableInteractiveSelection = true} , default:processed=BooleanLiteralImpl
    super.enableInteractiveSelection,

    /// optionalParameters: {TextSelectionControls? selectionControls} , default:none
    super.selectionControls,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {ScrollPhysics? scrollPhysics} , default:none
    super.scrollPhysics,

    /// optionalParameters: {String? semanticsLabel} , default:none
    super.semanticsLabel,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {TextWidthBasis? textWidthBasis} , default:none
    super.textWidthBasis,

    /// optionalParameters: {void Function(TextSelection, SelectionChangedCause?)? onSelectionChanged} , default:none
    super.onSelectionChanged,

    /// optionalParameters: {Widget Function(BuildContext, EditableTextState)? contextMenuBuilder = _defaultContextMenuBuilder} , default:unprocessed=SimpleIdentifierImpl
    super.contextMenuBuilder,

    /// optionalParameters: {TextMagnifierConfiguration? magnifierConfiguration} , default:none
    super.magnifierConfiguration,
  })  : mateParams = {
          'textSpan': _i2.BuilderArg<_i16.TextSpan>(
            name: 'textSpan',
            init: textSpan,
            isNamed: false,
          ),
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i4.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'style': _i2.BuilderArg<_i5.TextStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'strutStyle': _i2.BuilderArg<_i6.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i7.TextAlign?>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i7.TextDirection?>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'textScaleFactor': _i2.BuilderArg<double?>(
            name: 'textScaleFactor',
            init: textScaleFactor,
            isNamed: true,
          ),
          'showCursor': _i2.BuilderArg<bool>(
            name: 'showCursor',
            init: showCursor,
            isNamed: true,
            defaultValue: false,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
          'minLines': _i2.BuilderArg<int?>(
            name: 'minLines',
            init: minLines,
            isNamed: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
          ),
          'cursorWidth': _i2.BuilderArg<double>(
            name: 'cursorWidth',
            init: cursorWidth,
            isNamed: true,
            defaultValue: 2.0,
          ),
          'cursorHeight': _i2.BuilderArg<double?>(
            name: 'cursorHeight',
            init: cursorHeight,
            isNamed: true,
          ),
          'cursorRadius': _i2.BuilderArg<_i7.Radius?>(
            name: 'cursorRadius',
            init: cursorRadius,
            isNamed: true,
          ),
          'cursorColor': _i2.BuilderArg<_i7.Color?>(
            name: 'cursorColor',
            init: cursorColor,
            isNamed: true,
          ),
          'selectionHeightStyle': _i2.BuilderArg<_i7.BoxHeightStyle>(
            name: 'selectionHeightStyle',
            init: selectionHeightStyle,
            isNamed: true,
          ),
          'selectionWidthStyle': _i2.BuilderArg<_i7.BoxWidthStyle>(
            name: 'selectionWidthStyle',
            init: selectionWidthStyle,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i8.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i9.DragStartBehavior.start,
          ),
          'enableInteractiveSelection': _i2.BuilderArg<bool>(
            name: 'enableInteractiveSelection',
            init: enableInteractiveSelection,
            isNamed: true,
            defaultValue: true,
          ),
          'selectionControls': _i2.BuilderArg<_i10.TextSelectionControls?>(
            name: 'selectionControls',
            init: selectionControls,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i11.GestureTapCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'scrollPhysics': _i2.BuilderArg<_i12.ScrollPhysics?>(
            name: 'scrollPhysics',
            init: scrollPhysics,
            isNamed: true,
          ),
          'semanticsLabel': _i2.BuilderArg<String?>(
            name: 'semanticsLabel',
            init: semanticsLabel,
            isNamed: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i7.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i13.TextWidthBasis?>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
          ),
          'onSelectionChanged': _i2.BuilderArg<_i14.SelectionChangedCallback?>(
            name: 'onSelectionChanged',
            init: onSelectionChanged,
            isNamed: true,
          ),
          'contextMenuBuilder': _i2.BuilderArg<_i14.EditableTextContextMenuBuilder?>(
            name: 'contextMenuBuilder',
            init: contextMenuBuilder,
            isNamed: true,
          ),
          'magnifierConfiguration': _i2.BuilderArg<_i15.TextMagnifierConfiguration?>(
            name: 'magnifierConfiguration',
            init: magnifierConfiguration,
            isNamed: true,
          ),
        },
        super.rich() {
    mateBuilderName = 'SelectableText.rich';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SelectableText$Mate.rich(
          p.get('textSpan').value,
          key: p.get('key').build(),
          focusNode: p.get('focusNode').build(),
          style: p.get('style').build(),
          strutStyle: p.get('strutStyle').build(),
          textAlign: p.get('textAlign').build(),
          textDirection: p.get('textDirection').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          showCursor: p.get('showCursor').build(),
          autofocus: p.get('autofocus').build(),
          minLines: p.get('minLines').build(),
          maxLines: p.get('maxLines').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          cursorColor: p.get('cursorColor').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          selectionControls: p.get('selectionControls').build(),
          onTap: p.get('onTap').build(),
          scrollPhysics: p.get('scrollPhysics').build(),
          semanticsLabel: p.get('semanticsLabel').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          contextMenuBuilder: p.get('contextMenuBuilder').build(),
          magnifierConfiguration: p.get('magnifierConfiguration').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
