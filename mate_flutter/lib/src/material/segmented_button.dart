// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/segmented_button.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/foundation/key.dart' as _i4;
import 'package:flutter/src/material/button_style.dart' as _i5;

/// class ButtonSegment<T>
class ButtonSegment$Mate<T> extends _i1.ButtonSegment<T> with _i2.Mate {
  /// ButtonSegment<T> ButtonSegment({required T value, Widget? icon, Widget? label, String? tooltip, bool enabled = true})
  ButtonSegment$Mate({
    /// optionalParameters: {required T value} , default:none
    required super.value,

    /// optionalParameters: {Widget? icon} , default:none
    super.icon,

    /// optionalParameters: {Widget? label} , default:none
    super.label,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,
  })  : mateParams = {
          'value': _i2.BuilderArg<T>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i3.Widget?>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<_i3.Widget?>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super() {
    mateBuilderName = 'ButtonSegment';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ButtonSegment$Mate<T>(
          value: p.get('value').build(),
          icon: p.get('icon').build(),
          label: p.get('label').build(),
          tooltip: p.get('tooltip').build(),
          enabled: p.get('enabled').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SegmentedButton<T> extends StatelessWidget
class SegmentedButton$Mate<T> extends _i1.SegmentedButton<T> with _i2.Mate {
  /// SegmentedButton<T> SegmentedButton({Key? key, required List<ButtonSegment<T>> segments, required Set<T> selected, void Function(Set<T>)? onSelectionChanged, bool multiSelectionEnabled = false, bool emptySelectionAllowed = false, ButtonStyle? style, bool showSelectedIcon = true, Widget? selectedIcon})
  SegmentedButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<ButtonSegment<T>> segments} , default:none
    required super.segments,

    /// optionalParameters: {required Set<T> selected} , default:none
    required super.selected,

    /// optionalParameters: {void Function(Set<T>)? onSelectionChanged} , default:none
    super.onSelectionChanged,

    /// optionalParameters: {bool multiSelectionEnabled = false} , default:processed=BooleanLiteralImpl
    super.multiSelectionEnabled,

    /// optionalParameters: {bool emptySelectionAllowed = false} , default:processed=BooleanLiteralImpl
    super.emptySelectionAllowed,

    /// optionalParameters: {ButtonStyle? style} , default:none
    super.style,

    /// optionalParameters: {bool showSelectedIcon = true} , default:processed=BooleanLiteralImpl
    super.showSelectedIcon,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i4.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'segments': _i2.BuilderArg<List<_i1.ButtonSegment<T>>>(
            name: 'segments',
            init: segments,
            isNamed: true,
          ),
          'selected': _i2.BuilderArg<Set<T>>(
            name: 'selected',
            init: selected,
            isNamed: true,
          ),
          'onSelectionChanged': _i2.BuilderArg<void Function(Set<T>)?>(
            name: 'onSelectionChanged',
            init: onSelectionChanged,
            isNamed: true,
          ),
          'multiSelectionEnabled': _i2.BuilderArg<bool>(
            name: 'multiSelectionEnabled',
            init: multiSelectionEnabled,
            isNamed: true,
            defaultValue: false,
          ),
          'emptySelectionAllowed': _i2.BuilderArg<bool>(
            name: 'emptySelectionAllowed',
            init: emptySelectionAllowed,
            isNamed: true,
            defaultValue: false,
          ),
          'style': _i2.BuilderArg<_i5.ButtonStyle?>(
            name: 'style',
            init: style,
            isNamed: true,
          ),
          'showSelectedIcon': _i2.BuilderArg<bool>(
            name: 'showSelectedIcon',
            init: showSelectedIcon,
            isNamed: true,
            defaultValue: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i3.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SegmentedButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => SegmentedButton$Mate<T>(
          key: p.get('key').build(),
          segments: p.get('segments').build(),
          selected: p.get('selected').build(),
          onSelectionChanged: p.get('onSelectionChanged').build(),
          multiSelectionEnabled: p.get('multiSelectionEnabled').build(),
          emptySelectionAllowed: p.get('emptySelectionAllowed').build(),
          style: p.get('style').build(),
          showSelectedIcon: p.get('showSelectedIcon').build(),
          selectedIcon: p.get('selectedIcon').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
