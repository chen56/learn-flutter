// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/chip_theme.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/edge_insets.dart' as _i6;
import 'package:flutter/src/painting/borders.dart' as _i7;
import 'package:flutter/src/painting/text_style.dart' as _i8;
import 'package:flutter/src/widgets/icon_theme_data.dart' as _i9;

/// class ChipTheme extends InheritedTheme
class ChipTheme$Mate extends _i1.ChipTheme with _i2.Mate {
  /// ChipTheme ChipTheme({Key? key, required ChipThemeData data, required Widget child})
  ChipTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ChipThemeData data} , default:none
    required super.data,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<_i1.ChipThemeData>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i4.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ChipTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ChipTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ChipThemeData with Diagnosticable
class ChipThemeData$Mate extends _i1.ChipThemeData with _i2.Mate {
  /// ChipThemeData ChipThemeData({Color? backgroundColor, Color? deleteIconColor, Color? disabledColor, Color? selectedColor, Color? secondarySelectedColor, Color? shadowColor, Color? surfaceTintColor, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, EdgeInsetsGeometry? labelPadding, EdgeInsetsGeometry? padding, BorderSide? side, OutlinedBorder? shape, TextStyle? labelStyle, TextStyle? secondaryLabelStyle, Brightness? brightness, double? elevation, double? pressElevation, IconThemeData? iconTheme})
  ChipThemeData$Mate({
    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {Color? deleteIconColor} , default:none
    super.deleteIconColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {Color? selectedColor} , default:none
    super.selectedColor,

    /// optionalParameters: {Color? secondarySelectedColor} , default:none
    super.secondarySelectedColor,

    /// optionalParameters: {Color? shadowColor} , default:none
    super.shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    super.surfaceTintColor,

    /// optionalParameters: {Color? selectedShadowColor} , default:none
    super.selectedShadowColor,

    /// optionalParameters: {bool? showCheckmark} , default:none
    super.showCheckmark,

    /// optionalParameters: {Color? checkmarkColor} , default:none
    super.checkmarkColor,

    /// optionalParameters: {EdgeInsetsGeometry? labelPadding} , default:none
    super.labelPadding,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,

    /// optionalParameters: {BorderSide? side} , default:none
    super.side,

    /// optionalParameters: {OutlinedBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {TextStyle? labelStyle} , default:none
    super.labelStyle,

    /// optionalParameters: {TextStyle? secondaryLabelStyle} , default:none
    super.secondaryLabelStyle,

    /// optionalParameters: {Brightness? brightness} , default:none
    super.brightness,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {double? pressElevation} , default:none
    super.pressElevation,

    /// optionalParameters: {IconThemeData? iconTheme} , default:none
    super.iconTheme,
  })  : mateParams = {
          'backgroundColor': _i2.BuilderArg<_i5.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'deleteIconColor': _i2.BuilderArg<_i5.Color?>(
            name: 'deleteIconColor',
            init: deleteIconColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'selectedColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedColor',
            init: selectedColor,
            isNamed: true,
          ),
          'secondarySelectedColor': _i2.BuilderArg<_i5.Color?>(
            name: 'secondarySelectedColor',
            init: secondarySelectedColor,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i5.Color?>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'surfaceTintColor': _i2.BuilderArg<_i5.Color?>(
            name: 'surfaceTintColor',
            init: surfaceTintColor,
            isNamed: true,
          ),
          'selectedShadowColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedShadowColor',
            init: selectedShadowColor,
            isNamed: true,
          ),
          'showCheckmark': _i2.BuilderArg<bool?>(
            name: 'showCheckmark',
            init: showCheckmark,
            isNamed: true,
          ),
          'checkmarkColor': _i2.BuilderArg<_i5.Color?>(
            name: 'checkmarkColor',
            init: checkmarkColor,
            isNamed: true,
          ),
          'labelPadding': _i2.BuilderArg<_i6.EdgeInsetsGeometry?>(
            name: 'labelPadding',
            init: labelPadding,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i6.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'side': _i2.BuilderArg<_i7.BorderSide?>(
            name: 'side',
            init: side,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i7.OutlinedBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'labelStyle': _i2.BuilderArg<_i8.TextStyle?>(
            name: 'labelStyle',
            init: labelStyle,
            isNamed: true,
          ),
          'secondaryLabelStyle': _i2.BuilderArg<_i8.TextStyle?>(
            name: 'secondaryLabelStyle',
            init: secondaryLabelStyle,
            isNamed: true,
          ),
          'brightness': _i2.BuilderArg<_i5.Brightness?>(
            name: 'brightness',
            init: brightness,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'pressElevation': _i2.BuilderArg<double?>(
            name: 'pressElevation',
            init: pressElevation,
            isNamed: true,
          ),
          'iconTheme': _i2.BuilderArg<_i9.IconThemeData?>(
            name: 'iconTheme',
            init: iconTheme,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ChipThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ChipThemeData$Mate(
          backgroundColor: p.get('backgroundColor').build(),
          deleteIconColor: p.get('deleteIconColor').build(),
          disabledColor: p.get('disabledColor').build(),
          selectedColor: p.get('selectedColor').build(),
          secondarySelectedColor: p.get('secondarySelectedColor').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          selectedShadowColor: p.get('selectedShadowColor').build(),
          showCheckmark: p.get('showCheckmark').build(),
          checkmarkColor: p.get('checkmarkColor').build(),
          labelPadding: p.get('labelPadding').build(),
          padding: p.get('padding').build(),
          side: p.get('side').build(),
          shape: p.get('shape').build(),
          labelStyle: p.get('labelStyle').build(),
          secondaryLabelStyle: p.get('secondaryLabelStyle').build(),
          brightness: p.get('brightness').build(),
          elevation: p.get('elevation').build(),
          pressElevation: p.get('pressElevation').build(),
          iconTheme: p.get('iconTheme').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
