// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/paginated_data_table.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/material/data_table.dart' as _i5;
import 'package:flutter/src/foundation/basic_types.dart' as _i6;
import 'package:flutter/src/gestures/recognizer.dart' as _i7;
import 'package:flutter/gestures.dart' as _i8;
import 'dart:ui' as _i9;
import 'package:flutter/src/material/data_table_source.dart' as _i10;
import 'package:flutter/src/widgets/scroll_controller.dart' as _i11;
import 'package:flutter/src/material/material_state.dart' as _i12;

/// class PaginatedDataTable extends StatefulWidget
class PaginatedDataTable$Mate extends _i1.PaginatedDataTable with _i2.Mate {
  /// PaginatedDataTable PaginatedDataTable({Key? key, Widget? header, List<Widget>? actions, required List<DataColumn> columns, int? sortColumnIndex, bool sortAscending = true, void Function(bool?)? onSelectAll, double? dataRowHeight, double? dataRowMinHeight, double? dataRowMaxHeight, double headingRowHeight = 56.0, double horizontalMargin = 24.0, double columnSpacing = 56.0, bool showCheckboxColumn = true, bool showFirstLastButtons = false, int? initialFirstRowIndex = 0, void Function(int)? onPageChanged, int rowsPerPage = defaultRowsPerPage, List<int> availableRowsPerPage = const <int>[defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10], void Function(int?)? onRowsPerPageChanged, DragStartBehavior dragStartBehavior = DragStartBehavior.start, Color? arrowHeadColor, required DataTableSource source, double? checkboxHorizontalMargin, ScrollController? controller, bool? primary, MaterialStateProperty<Color?>? headingRowColor, bool showEmptyRows = true})
  PaginatedDataTable$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Widget? header} , default:none
    super.header,

    /// optionalParameters: {List<Widget>? actions} , default:none
    super.actions,

    /// optionalParameters: {required List<DataColumn> columns} , default:none
    required super.columns,

    /// optionalParameters: {int? sortColumnIndex} , default:none
    super.sortColumnIndex,

    /// optionalParameters: {bool sortAscending = true} , default:processed=BooleanLiteralImpl
    super.sortAscending,

    /// optionalParameters: {void Function(bool?)? onSelectAll} , default:none
    super.onSelectAll,

    /// optionalParameters: {double? dataRowMinHeight} , default:none
    super.dataRowMinHeight,

    /// optionalParameters: {double? dataRowMaxHeight} , default:none
    super.dataRowMaxHeight,

    /// optionalParameters: {double headingRowHeight = 56.0} , default:processed=DoubleLiteralImpl
    super.headingRowHeight,

    /// optionalParameters: {double horizontalMargin = 24.0} , default:processed=DoubleLiteralImpl
    super.horizontalMargin,

    /// optionalParameters: {double columnSpacing = 56.0} , default:processed=DoubleLiteralImpl
    super.columnSpacing,

    /// optionalParameters: {bool showCheckboxColumn = true} , default:processed=BooleanLiteralImpl
    super.showCheckboxColumn,

    /// optionalParameters: {bool showFirstLastButtons = false} , default:processed=BooleanLiteralImpl
    super.showFirstLastButtons,

    /// optionalParameters: {int? initialFirstRowIndex = 0} , default:processed=IntegerLiteralImpl
    super.initialFirstRowIndex,

    /// optionalParameters: {void Function(int)? onPageChanged} , default:none
    super.onPageChanged,

    /// optionalParameters: {int rowsPerPage = defaultRowsPerPage} , default:unprocessed=SimpleIdentifierImpl
    super.rowsPerPage,

    /// optionalParameters: {List<int> availableRowsPerPage = const <int>[defaultRowsPerPage, defaultRowsPerPage * 2, defaultRowsPerPage * 5, defaultRowsPerPage * 10]} , default:unprocessed=ListLiteralImpl
    super.availableRowsPerPage,

    /// optionalParameters: {void Function(int?)? onRowsPerPageChanged} , default:none
    super.onRowsPerPageChanged,

    /// optionalParameters: {DragStartBehavior dragStartBehavior = DragStartBehavior.start} , default:processed=PrefixedIdentifierImpl
    super.dragStartBehavior,

    /// optionalParameters: {Color? arrowHeadColor} , default:none
    super.arrowHeadColor,

    /// optionalParameters: {required DataTableSource source} , default:none
    required super.source,

    /// optionalParameters: {double? checkboxHorizontalMargin} , default:none
    super.checkboxHorizontalMargin,

    /// optionalParameters: {ScrollController? controller} , default:none
    super.controller,

    /// optionalParameters: {bool? primary} , default:none
    super.primary,

    /// optionalParameters: {MaterialStateProperty<Color?>? headingRowColor} , default:none
    super.headingRowColor,

    /// optionalParameters: {bool showEmptyRows = true} , default:processed=BooleanLiteralImpl
    super.showEmptyRows,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'header': _i2.BuilderArg<_i4.Widget?>(
            name: 'header',
            init: header,
            isNamed: true,
          ),
          'actions': _i2.BuilderArg<List<_i4.Widget>?>(
            name: 'actions',
            init: actions,
            isNamed: true,
          ),
          'columns': _i2.BuilderArg<List<_i5.DataColumn>>(
            name: 'columns',
            init: columns,
            isNamed: true,
          ),
          'sortColumnIndex': _i2.BuilderArg<int?>(
            name: 'sortColumnIndex',
            init: sortColumnIndex,
            isNamed: true,
          ),
          'sortAscending': _i2.BuilderArg<bool>(
            name: 'sortAscending',
            init: sortAscending,
            isNamed: true,
            defaultValue: true,
          ),
          'onSelectAll': _i2.BuilderArg<_i6.ValueSetter<bool?>?>(
            name: 'onSelectAll',
            init: onSelectAll,
            isNamed: true,
          ),
          'dataRowMinHeight': _i2.BuilderArg<double?>(
            name: 'dataRowMinHeight',
            init: dataRowMinHeight,
            isNamed: true,
          ),
          'dataRowMaxHeight': _i2.BuilderArg<double?>(
            name: 'dataRowMaxHeight',
            init: dataRowMaxHeight,
            isNamed: true,
          ),
          'headingRowHeight': _i2.BuilderArg<double>(
            name: 'headingRowHeight',
            init: headingRowHeight,
            isNamed: true,
            defaultValue: 56.0,
          ),
          'horizontalMargin': _i2.BuilderArg<double>(
            name: 'horizontalMargin',
            init: horizontalMargin,
            isNamed: true,
            defaultValue: 24.0,
          ),
          'columnSpacing': _i2.BuilderArg<double>(
            name: 'columnSpacing',
            init: columnSpacing,
            isNamed: true,
            defaultValue: 56.0,
          ),
          'showCheckboxColumn': _i2.BuilderArg<bool>(
            name: 'showCheckboxColumn',
            init: showCheckboxColumn,
            isNamed: true,
            defaultValue: true,
          ),
          'showFirstLastButtons': _i2.BuilderArg<bool>(
            name: 'showFirstLastButtons',
            init: showFirstLastButtons,
            isNamed: true,
            defaultValue: false,
          ),
          'initialFirstRowIndex': _i2.BuilderArg<int?>(
            name: 'initialFirstRowIndex',
            init: initialFirstRowIndex,
            isNamed: true,
            defaultValue: 0,
          ),
          'onPageChanged': _i2.BuilderArg<_i6.ValueChanged<int>?>(
            name: 'onPageChanged',
            init: onPageChanged,
            isNamed: true,
          ),
          'rowsPerPage': _i2.BuilderArg<int>(
            name: 'rowsPerPage',
            init: rowsPerPage,
            isNamed: true,
          ),
          'availableRowsPerPage': _i2.BuilderArg<List<int>>(
            name: 'availableRowsPerPage',
            init: availableRowsPerPage,
            isNamed: true,
          ),
          'onRowsPerPageChanged': _i2.BuilderArg<_i6.ValueChanged<int?>?>(
            name: 'onRowsPerPageChanged',
            init: onRowsPerPageChanged,
            isNamed: true,
          ),
          'dragStartBehavior': _i2.BuilderArg<_i7.DragStartBehavior>(
            name: 'dragStartBehavior',
            init: dragStartBehavior,
            isNamed: true,
            defaultValue: _i8.DragStartBehavior.start,
          ),
          'arrowHeadColor': _i2.BuilderArg<_i9.Color?>(
            name: 'arrowHeadColor',
            init: arrowHeadColor,
            isNamed: true,
          ),
          'source': _i2.BuilderArg<_i10.DataTableSource>(
            name: 'source',
            init: source,
            isNamed: true,
          ),
          'checkboxHorizontalMargin': _i2.BuilderArg<double?>(
            name: 'checkboxHorizontalMargin',
            init: checkboxHorizontalMargin,
            isNamed: true,
          ),
          'controller': _i2.BuilderArg<_i11.ScrollController?>(
            name: 'controller',
            init: controller,
            isNamed: true,
          ),
          'primary': _i2.BuilderArg<bool?>(
            name: 'primary',
            init: primary,
            isNamed: true,
          ),
          'headingRowColor': _i2.BuilderArg<_i12.MaterialStateProperty<_i9.Color?>?>(
            name: 'headingRowColor',
            init: headingRowColor,
            isNamed: true,
          ),
          'showEmptyRows': _i2.BuilderArg<bool>(
            name: 'showEmptyRows',
            init: showEmptyRows,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super() {
    mateBuilderName = 'PaginatedDataTable';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PaginatedDataTable$Mate(
          key: p.get('key').build(),
          header: p.get('header').build(),
          actions: p.get('actions').build(),
          columns: p.get('columns').build(),
          sortColumnIndex: p.get('sortColumnIndex').build(),
          sortAscending: p.get('sortAscending').build(),
          onSelectAll: p.get('onSelectAll').build(),
          dataRowMinHeight: p.get('dataRowMinHeight').build(),
          dataRowMaxHeight: p.get('dataRowMaxHeight').build(),
          headingRowHeight: p.get('headingRowHeight').build(),
          horizontalMargin: p.get('horizontalMargin').build(),
          columnSpacing: p.get('columnSpacing').build(),
          showCheckboxColumn: p.get('showCheckboxColumn').build(),
          showFirstLastButtons: p.get('showFirstLastButtons').build(),
          initialFirstRowIndex: p.get('initialFirstRowIndex').build(),
          onPageChanged: p.get('onPageChanged').build(),
          rowsPerPage: p.get('rowsPerPage').build(),
          availableRowsPerPage: p.get('availableRowsPerPage').build(),
          onRowsPerPageChanged: p.get('onRowsPerPageChanged').build(),
          dragStartBehavior: p.get('dragStartBehavior').build(),
          arrowHeadColor: p.get('arrowHeadColor').build(),
          source: p.get('source').build(),
          checkboxHorizontalMargin: p.get('checkboxHorizontalMargin').build(),
          controller: p.get('controller').build(),
          primary: p.get('primary').build(),
          headingRowColor: p.get('headingRowColor').build(),
          showEmptyRows: p.get('showEmptyRows').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
