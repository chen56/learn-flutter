// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/popup_menu.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/painting/edge_insets.dart' as _i5;
import 'package:flutter/src/painting/text_style.dart' as _i6;
import 'package:flutter/src/material/material_state.dart' as _i7;
import 'package:flutter/src/services/mouse_cursor.dart' as _i8;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:flutter/animation.dart' as _i10;
import 'package:flutter/src/painting/borders.dart' as _i11;
import 'package:flutter/src/rendering/box.dart' as _i12;
import 'package:flutter/src/material/popup_menu_theme.dart' as _i13;
import 'package:flutter/src/animation/animation_style.dart' as _i14;

/// class PopupMenuDivider extends PopupMenuEntry<Never>
class PopupMenuDivider$Mate extends _i1.PopupMenuDivider with _i2.Mate {
  /// PopupMenuDivider PopupMenuDivider({Key? key, double height = _kMenuDividerHeight})
  PopupMenuDivider$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {double height = _kMenuDividerHeight} , default:unprocessed=SimpleIdentifierImpl
    super.height,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PopupMenuDivider';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PopupMenuDivider$Mate(
          key: p.get('key').build(),
          height: p.get('height').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PopupMenuItem<T> extends PopupMenuEntry<T>
class PopupMenuItem$Mate<T> extends _i1.PopupMenuItem<T> with _i2.Mate {
  /// PopupMenuItem<T> PopupMenuItem({Key? key, T? value, void Function()? onTap, bool enabled = true, double height = kMinInteractiveDimension, EdgeInsets? padding, TextStyle? textStyle, MaterialStateProperty<TextStyle?>? labelTextStyle, MouseCursor? mouseCursor, required Widget? child})
  PopupMenuItem$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {T? value} , default:none
    super.value,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,

    /// optionalParameters: {double height = kMinInteractiveDimension} , default:unprocessed=SimpleIdentifierImpl
    super.height,

    /// optionalParameters: {EdgeInsets? padding} , default:none
    super.padding,

    /// optionalParameters: {TextStyle? textStyle} , default:none
    super.textStyle,

    /// optionalParameters: {MaterialStateProperty<TextStyle?>? labelTextStyle} , default:none
    super.labelTextStyle,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {required Widget? child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
          'height': _i2.BuilderArg<double>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsets?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'textStyle': _i2.BuilderArg<_i6.TextStyle?>(
            name: 'textStyle',
            init: textStyle,
            isNamed: true,
          ),
          'labelTextStyle': _i2.BuilderArg<_i7.MaterialStateProperty<_i6.TextStyle?>?>(
            name: 'labelTextStyle',
            init: labelTextStyle,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i9.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PopupMenuItem';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PopupMenuItem$Mate<T>(
          key: p.get('key').build(),
          value: p.get('value').build(),
          onTap: p.get('onTap').build(),
          enabled: p.get('enabled').build(),
          height: p.get('height').build(),
          padding: p.get('padding').build(),
          textStyle: p.get('textStyle').build(),
          labelTextStyle: p.get('labelTextStyle').build(),
          mouseCursor: p.get('mouseCursor').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class CheckedPopupMenuItem<T> extends PopupMenuItem<T>
class CheckedPopupMenuItem$Mate<T> extends _i1.CheckedPopupMenuItem<T> with _i2.Mate {
  /// CheckedPopupMenuItem<T> CheckedPopupMenuItem({Key? key, T? value, bool checked = false, bool enabled = true, EdgeInsets? padding, double height = kMinInteractiveDimension, MaterialStateProperty<TextStyle?>? labelTextStyle, MouseCursor? mouseCursor, Widget? child, void Function()? onTap})
  CheckedPopupMenuItem$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {T? value} , default:none
    super.value,

    /// optionalParameters: {bool checked = false} , default:processed=BooleanLiteralImpl
    super.checked,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,

    /// optionalParameters: {EdgeInsets? padding} , default:none
    super.padding,

    /// optionalParameters: {double height = kMinInteractiveDimension} , default:unprocessed=SimpleIdentifierImpl
    super.height,

    /// optionalParameters: {MaterialStateProperty<TextStyle?>? labelTextStyle} , default:none
    super.labelTextStyle,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {void Function()? onTap} , default:none
    super.onTap,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<T?>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'checked': _i2.BuilderArg<bool>(
            name: 'checked',
            init: checked,
            isNamed: true,
            defaultValue: false,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsets?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'labelTextStyle': _i2.BuilderArg<_i7.MaterialStateProperty<_i6.TextStyle?>?>(
            name: 'labelTextStyle',
            init: labelTextStyle,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i8.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i9.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'onTap': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onTap',
            init: onTap,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'CheckedPopupMenuItem';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => CheckedPopupMenuItem$Mate<T>(
          key: p.get('key').build(),
          value: p.get('value').build(),
          checked: p.get('checked').build(),
          enabled: p.get('enabled').build(),
          padding: p.get('padding').build(),
          height: p.get('height').build(),
          labelTextStyle: p.get('labelTextStyle').build(),
          mouseCursor: p.get('mouseCursor').build(),
          child: p.get('child').build(),
          onTap: p.get('onTap').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PopupMenuButton<T> extends StatefulWidget
class PopupMenuButton$Mate<T> extends _i1.PopupMenuButton<T> with _i2.Mate {
  /// PopupMenuButton<T> PopupMenuButton({Key? key, required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder, T? initialValue, void Function()? onOpened, void Function(T)? onSelected, void Function()? onCanceled, String? tooltip, double? elevation, Color? shadowColor, Color? surfaceTintColor, EdgeInsetsGeometry padding = const EdgeInsets.all(8.0), Widget? child, double? splashRadius, Widget? icon, double? iconSize, Offset offset = Offset.zero, bool enabled = true, ShapeBorder? shape, Color? color, Color? iconColor, bool? enableFeedback, BoxConstraints? constraints, PopupMenuPosition? position, Clip clipBehavior = Clip.none, bool useRootNavigator = false, AnimationStyle? popUpAnimationStyle})
  PopupMenuButton$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required List<PopupMenuEntry<T>> Function(BuildContext) itemBuilder} , default:none
    required super.itemBuilder,

    /// optionalParameters: {T? initialValue} , default:none
    super.initialValue,

    /// optionalParameters: {void Function()? onOpened} , default:none
    super.onOpened,

    /// optionalParameters: {void Function(T)? onSelected} , default:none
    super.onSelected,

    /// optionalParameters: {void Function()? onCanceled} , default:none
    super.onCanceled,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {Color? shadowColor} , default:none
    super.shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    super.surfaceTintColor,

    /// optionalParameters: {EdgeInsetsGeometry padding = const EdgeInsets.all(8.0)} , default:unprocessed=InstanceCreationExpressionImpl
    super.padding,

    /// optionalParameters: {Widget? child} , default:none
    super.child,

    /// optionalParameters: {double? splashRadius} , default:none
    super.splashRadius,

    /// optionalParameters: {Widget? icon} , default:none
    super.icon,

    /// optionalParameters: {double? iconSize} , default:none
    super.iconSize,

    /// optionalParameters: {Offset offset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    super.offset,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? iconColor} , default:none
    super.iconColor,

    /// optionalParameters: {bool? enableFeedback} , default:none
    super.enableFeedback,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {PopupMenuPosition? position} , default:none
    super.position,

    /// optionalParameters: {Clip clipBehavior = Clip.none} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {bool useRootNavigator = false} , default:processed=BooleanLiteralImpl
    super.useRootNavigator,

    /// optionalParameters: {AnimationStyle? popUpAnimationStyle} , default:none
    super.popUpAnimationStyle,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'itemBuilder': _i2.BuilderArg<_i1.PopupMenuItemBuilder<T>>(
            name: 'itemBuilder',
            init: itemBuilder,
            isNamed: true,
          ),
          'initialValue': _i2.BuilderArg<T?>(
            name: 'initialValue',
            init: initialValue,
            isNamed: true,
          ),
          'onOpened': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onOpened',
            init: onOpened,
            isNamed: true,
          ),
          'onSelected': _i2.BuilderArg<_i1.PopupMenuItemSelected<T>?>(
            name: 'onSelected',
            init: onSelected,
            isNamed: true,
          ),
          'onCanceled': _i2.BuilderArg<_i1.PopupMenuCanceled?>(
            name: 'onCanceled',
            init: onCanceled,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i4.Color?>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'surfaceTintColor': _i2.BuilderArg<_i4.Color?>(
            name: 'surfaceTintColor',
            init: surfaceTintColor,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i5.EdgeInsetsGeometry>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i9.Widget?>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
          'splashRadius': _i2.BuilderArg<double?>(
            name: 'splashRadius',
            init: splashRadius,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i9.Widget?>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'iconSize': _i2.BuilderArg<double?>(
            name: 'iconSize',
            init: iconSize,
            isNamed: true,
          ),
          'offset': _i2.BuilderArg<_i4.Offset>(
            name: 'offset',
            init: offset,
            isNamed: true,
            defaultValue: _i10.Offset.zero,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
          'shape': _i2.BuilderArg<_i11.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i4.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'iconColor': _i2.BuilderArg<_i4.Color?>(
            name: 'iconColor',
            init: iconColor,
            isNamed: true,
          ),
          'enableFeedback': _i2.BuilderArg<bool?>(
            name: 'enableFeedback',
            init: enableFeedback,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i12.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'position': _i2.BuilderArg<_i13.PopupMenuPosition?>(
            name: 'position',
            init: position,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i4.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i4.Clip.none,
          ),
          'useRootNavigator': _i2.BuilderArg<bool>(
            name: 'useRootNavigator',
            init: useRootNavigator,
            isNamed: true,
            defaultValue: false,
          ),
          'popUpAnimationStyle': _i2.BuilderArg<_i14.AnimationStyle?>(
            name: 'popUpAnimationStyle',
            init: popUpAnimationStyle,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PopupMenuButton';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => PopupMenuButton$Mate<T>(
          key: p.get('key').build(),
          itemBuilder: p.get('itemBuilder').build(),
          initialValue: p.get('initialValue').build(),
          onOpened: p.get('onOpened').build(),
          onSelected: p.get('onSelected').build(),
          onCanceled: p.get('onCanceled').build(),
          tooltip: p.get('tooltip').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          padding: p.get('padding').build(),
          child: p.get('child').build(),
          splashRadius: p.get('splashRadius').build(),
          icon: p.get('icon').build(),
          iconSize: p.get('iconSize').build(),
          offset: p.get('offset').build(),
          enabled: p.get('enabled').build(),
          shape: p.get('shape').build(),
          color: p.get('color').build(),
          iconColor: p.get('iconColor').build(),
          enableFeedback: p.get('enableFeedback').build(),
          constraints: p.get('constraints').build(),
          position: p.get('position').build(),
          clipBehavior: p.get('clipBehavior').build(),
          useRootNavigator: p.get('useRootNavigator').build(),
          popUpAnimationStyle: p.get('popUpAnimationStyle').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
