// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/app.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/navigator.dart' as _i5;
import 'package:flutter/src/material/scaffold.dart' as _i6;
import 'package:flutter/src/widgets/app.dart' as _i7;
import 'package:flutter/src/widgets/notification_listener.dart' as _i8;
import 'dart:ui' as _i9;
import 'package:flutter/src/material/theme_data.dart' as _i10;
import 'package:flutter/material.dart' as _i11;
import 'package:flutter/src/animation/curves.dart' as _i12;
import 'package:flutter/animation.dart' as _i13;
import 'package:flutter/src/widgets/localizations.dart' as _i14;
import 'package:flutter/src/widgets/shortcuts.dart' as _i15;
import 'package:flutter/src/widgets/actions.dart' as _i16;
import 'package:flutter/src/widgets/scroll_configuration.dart' as _i17;
import 'package:flutter/src/widgets/router.dart' as _i18;

/// class MaterialApp extends StatefulWidget
class MaterialApp$Mate extends _i1.MaterialApp with _i2.Mate {
  /// MaterialApp MaterialApp({Key? key, GlobalKey<NavigatorState>? navigatorKey, GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey, Widget? home, Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}, String? initialRoute, Route<dynamic>? Function(RouteSettings)? onGenerateRoute, List<Route<dynamic>> Function(String)? onGenerateInitialRoutes, Route<dynamic>? Function(RouteSettings)? onUnknownRoute, bool Function(NavigationNotification)? onNavigationNotification, List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[], Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, Color? color, ThemeData? theme, ThemeData? darkTheme, ThemeData? highContrastTheme, ThemeData? highContrastDarkTheme, ThemeMode? themeMode = ThemeMode.system, Duration themeAnimationDuration = kThemeAnimationDuration, Curve themeAnimationCurve = Curves.linear, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool debugShowMaterialGrid = false, bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowCheckedModeBanner = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, ScrollBehavior? scrollBehavior, bool useInheritedMediaQuery = false})
  MaterialApp$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {GlobalKey<NavigatorState>? navigatorKey} , default:none
    super.navigatorKey,

    /// optionalParameters: {GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey} , default:none
    super.scaffoldMessengerKey,

    /// optionalParameters: {Widget? home} , default:none
    super.home,

    /// optionalParameters: {Map<String, Widget Function(BuildContext)> routes = const <String, WidgetBuilder>{}} , default:unprocessed=SetOrMapLiteralImpl
    super.routes,

    /// optionalParameters: {String? initialRoute} , default:none
    super.initialRoute,

    /// optionalParameters: {Route<dynamic>? Function(RouteSettings)? onGenerateRoute} , default:none
    super.onGenerateRoute,

    /// optionalParameters: {List<Route<dynamic>> Function(String)? onGenerateInitialRoutes} , default:none
    super.onGenerateInitialRoutes,

    /// optionalParameters: {Route<dynamic>? Function(RouteSettings)? onUnknownRoute} , default:none
    super.onUnknownRoute,

    /// optionalParameters: {bool Function(NavigationNotification)? onNavigationNotification} , default:none
    super.onNavigationNotification,

    /// optionalParameters: {List<NavigatorObserver> navigatorObservers = const <NavigatorObserver>[]} , default:unprocessed=ListLiteralImpl
    super.navigatorObservers,

    /// optionalParameters: {Widget Function(BuildContext, Widget?)? builder} , default:none
    super.builder,

    /// optionalParameters: {String title = ''} , default:processed=SimpleStringLiteralImpl
    super.title,

    /// optionalParameters: {String Function(BuildContext)? onGenerateTitle} , default:none
    super.onGenerateTitle,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {ThemeData? theme} , default:none
    super.theme,

    /// optionalParameters: {ThemeData? darkTheme} , default:none
    super.darkTheme,

    /// optionalParameters: {ThemeData? highContrastTheme} , default:none
    super.highContrastTheme,

    /// optionalParameters: {ThemeData? highContrastDarkTheme} , default:none
    super.highContrastDarkTheme,

    /// optionalParameters: {ThemeMode? themeMode = ThemeMode.system} , default:processed=PrefixedIdentifierImpl
    super.themeMode,

    /// optionalParameters: {Duration themeAnimationDuration = kThemeAnimationDuration} , default:unprocessed=SimpleIdentifierImpl
    super.themeAnimationDuration,

    /// optionalParameters: {Curve themeAnimationCurve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    super.themeAnimationCurve,

    /// optionalParameters: {Locale? locale} , default:none
    super.locale,

    /// optionalParameters: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates} , default:none
    super.localizationsDelegates,

    /// optionalParameters: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback} , default:none
    super.localeListResolutionCallback,

    /// optionalParameters: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback} , default:none
    super.localeResolutionCallback,

    /// optionalParameters: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]} , default:unprocessed=ListLiteralImpl
    super.supportedLocales,

    /// optionalParameters: {bool debugShowMaterialGrid = false} , default:processed=BooleanLiteralImpl
    super.debugShowMaterialGrid,

    /// optionalParameters: {bool showPerformanceOverlay = false} , default:processed=BooleanLiteralImpl
    super.showPerformanceOverlay,

    /// optionalParameters: {bool checkerboardRasterCacheImages = false} , default:processed=BooleanLiteralImpl
    super.checkerboardRasterCacheImages,

    /// optionalParameters: {bool checkerboardOffscreenLayers = false} , default:processed=BooleanLiteralImpl
    super.checkerboardOffscreenLayers,

    /// optionalParameters: {bool showSemanticsDebugger = false} , default:processed=BooleanLiteralImpl
    super.showSemanticsDebugger,

    /// optionalParameters: {bool debugShowCheckedModeBanner = true} , default:processed=BooleanLiteralImpl
    super.debugShowCheckedModeBanner,

    /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , default:none
    super.shortcuts,

    /// optionalParameters: {Map<Type, Action<Intent>>? actions} , default:none
    super.actions,

    /// optionalParameters: {String? restorationScopeId} , default:none
    super.restorationScopeId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , default:none
    super.scrollBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'navigatorKey': _i2.BuilderArg<_i4.GlobalKey<_i5.NavigatorState>?>(
            name: 'navigatorKey',
            init: navigatorKey,
            isNamed: true,
          ),
          'scaffoldMessengerKey': _i2.BuilderArg<_i4.GlobalKey<_i6.ScaffoldMessengerState>?>(
            name: 'scaffoldMessengerKey',
            init: scaffoldMessengerKey,
            isNamed: true,
          ),
          'home': _i2.BuilderArg<_i4.Widget?>(
            name: 'home',
            init: home,
            isNamed: true,
          ),
          'routes': _i2.BuilderArg<Map<String, _i4.WidgetBuilder>>(
            name: 'routes',
            init: routes,
            isNamed: true,
          ),
          'initialRoute': _i2.BuilderArg<String?>(
            name: 'initialRoute',
            init: initialRoute,
            isNamed: true,
          ),
          'onGenerateRoute': _i2.BuilderArg<_i5.RouteFactory?>(
            name: 'onGenerateRoute',
            init: onGenerateRoute,
            isNamed: true,
          ),
          'onGenerateInitialRoutes': _i2.BuilderArg<_i7.InitialRouteListFactory?>(
            name: 'onGenerateInitialRoutes',
            init: onGenerateInitialRoutes,
            isNamed: true,
          ),
          'onUnknownRoute': _i2.BuilderArg<_i5.RouteFactory?>(
            name: 'onUnknownRoute',
            init: onUnknownRoute,
            isNamed: true,
          ),
          'onNavigationNotification': _i2.BuilderArg<_i8.NotificationListenerCallback<_i5.NavigationNotification>?>(
            name: 'onNavigationNotification',
            init: onNavigationNotification,
            isNamed: true,
          ),
          'navigatorObservers': _i2.BuilderArg<List<_i5.NavigatorObserver>>(
            name: 'navigatorObservers',
            init: navigatorObservers,
            isNamed: true,
          ),
          'builder': _i2.BuilderArg<_i4.TransitionBuilder?>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
          'title': _i2.BuilderArg<String>(
            name: 'title',
            init: title,
            isNamed: true,
            defaultValue: '',
          ),
          'onGenerateTitle': _i2.BuilderArg<_i7.GenerateAppTitle?>(
            name: 'onGenerateTitle',
            init: onGenerateTitle,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i9.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'theme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'theme',
            init: theme,
            isNamed: true,
          ),
          'darkTheme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'darkTheme',
            init: darkTheme,
            isNamed: true,
          ),
          'highContrastTheme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'highContrastTheme',
            init: highContrastTheme,
            isNamed: true,
          ),
          'highContrastDarkTheme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'highContrastDarkTheme',
            init: highContrastDarkTheme,
            isNamed: true,
          ),
          'themeMode': _i2.BuilderArg<_i1.ThemeMode?>(
            name: 'themeMode',
            init: themeMode,
            isNamed: true,
            defaultValue: _i11.ThemeMode.system,
          ),
          'themeAnimationDuration': _i2.BuilderArg<Duration>(
            name: 'themeAnimationDuration',
            init: themeAnimationDuration,
            isNamed: true,
          ),
          'themeAnimationCurve': _i2.BuilderArg<_i12.Curve>(
            name: 'themeAnimationCurve',
            init: themeAnimationCurve,
            isNamed: true,
            defaultValue: _i13.Curves.linear,
          ),
          'locale': _i2.BuilderArg<_i9.Locale?>(
            name: 'locale',
            init: locale,
            isNamed: true,
          ),
          'localizationsDelegates': _i2.BuilderArg<Iterable<_i14.LocalizationsDelegate<dynamic>>?>(
            name: 'localizationsDelegates',
            init: localizationsDelegates,
            isNamed: true,
          ),
          'localeListResolutionCallback': _i2.BuilderArg<_i7.LocaleListResolutionCallback?>(
            name: 'localeListResolutionCallback',
            init: localeListResolutionCallback,
            isNamed: true,
          ),
          'localeResolutionCallback': _i2.BuilderArg<_i7.LocaleResolutionCallback?>(
            name: 'localeResolutionCallback',
            init: localeResolutionCallback,
            isNamed: true,
          ),
          'supportedLocales': _i2.BuilderArg<Iterable<_i9.Locale>>(
            name: 'supportedLocales',
            init: supportedLocales,
            isNamed: true,
          ),
          'debugShowMaterialGrid': _i2.BuilderArg<bool>(
            name: 'debugShowMaterialGrid',
            init: debugShowMaterialGrid,
            isNamed: true,
            defaultValue: false,
          ),
          'showPerformanceOverlay': _i2.BuilderArg<bool>(
            name: 'showPerformanceOverlay',
            init: showPerformanceOverlay,
            isNamed: true,
            defaultValue: false,
          ),
          'checkerboardRasterCacheImages': _i2.BuilderArg<bool>(
            name: 'checkerboardRasterCacheImages',
            init: checkerboardRasterCacheImages,
            isNamed: true,
            defaultValue: false,
          ),
          'checkerboardOffscreenLayers': _i2.BuilderArg<bool>(
            name: 'checkerboardOffscreenLayers',
            init: checkerboardOffscreenLayers,
            isNamed: true,
            defaultValue: false,
          ),
          'showSemanticsDebugger': _i2.BuilderArg<bool>(
            name: 'showSemanticsDebugger',
            init: showSemanticsDebugger,
            isNamed: true,
            defaultValue: false,
          ),
          'debugShowCheckedModeBanner': _i2.BuilderArg<bool>(
            name: 'debugShowCheckedModeBanner',
            init: debugShowCheckedModeBanner,
            isNamed: true,
            defaultValue: true,
          ),
          'shortcuts': _i2.BuilderArg<Map<_i15.ShortcutActivator, _i16.Intent>?>(
            name: 'shortcuts',
            init: shortcuts,
            isNamed: true,
          ),
          'actions': _i2.BuilderArg<Map<Type, _i16.Action<_i16.Intent>>?>(
            name: 'actions',
            init: actions,
            isNamed: true,
          ),
          'restorationScopeId': _i2.BuilderArg<String?>(
            name: 'restorationScopeId',
            init: restorationScopeId,
            isNamed: true,
          ),
          'scrollBehavior': _i2.BuilderArg<_i17.ScrollBehavior?>(
            name: 'scrollBehavior',
            init: scrollBehavior,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'MaterialApp';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MaterialApp$Mate(
          key: p.get('key').build(),
          navigatorKey: p.get('navigatorKey').build(),
          scaffoldMessengerKey: p.get('scaffoldMessengerKey').build(),
          home: p.get('home').build(),
          routes: p.get('routes').build(),
          initialRoute: p.get('initialRoute').build(),
          onGenerateRoute: p.get('onGenerateRoute').build(),
          onGenerateInitialRoutes: p.get('onGenerateInitialRoutes').build(),
          onUnknownRoute: p.get('onUnknownRoute').build(),
          onNavigationNotification: p.get('onNavigationNotification').build(),
          navigatorObservers: p.get('navigatorObservers').build(),
          builder: p.get('builder').build(),
          title: p.get('title').build(),
          onGenerateTitle: p.get('onGenerateTitle').build(),
          color: p.get('color').build(),
          theme: p.get('theme').build(),
          darkTheme: p.get('darkTheme').build(),
          highContrastTheme: p.get('highContrastTheme').build(),
          highContrastDarkTheme: p.get('highContrastDarkTheme').build(),
          themeMode: p.get('themeMode').build(),
          themeAnimationDuration: p.get('themeAnimationDuration').build(),
          themeAnimationCurve: p.get('themeAnimationCurve').build(),
          locale: p.get('locale').build(),
          localizationsDelegates: p.get('localizationsDelegates').build(),
          localeListResolutionCallback: p.get('localeListResolutionCallback').build(),
          localeResolutionCallback: p.get('localeResolutionCallback').build(),
          supportedLocales: p.get('supportedLocales').build(),
          debugShowMaterialGrid: p.get('debugShowMaterialGrid').build(),
          showPerformanceOverlay: p.get('showPerformanceOverlay').build(),
          checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(),
          checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(),
          showSemanticsDebugger: p.get('showSemanticsDebugger').build(),
          debugShowCheckedModeBanner: p.get('debugShowCheckedModeBanner').build(),
          shortcuts: p.get('shortcuts').build(),
          actions: p.get('actions').build(),
          restorationScopeId: p.get('restorationScopeId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
        );
  }

  /// MaterialApp MaterialApp.router({Key? key, GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey, RouteInformationProvider? routeInformationProvider, RouteInformationParser<Object>? routeInformationParser, RouterDelegate<Object>? routerDelegate, RouterConfig<Object>? routerConfig, BackButtonDispatcher? backButtonDispatcher, Widget Function(BuildContext, Widget?)? builder, String title = '', String Function(BuildContext)? onGenerateTitle, bool Function(NavigationNotification)? onNavigationNotification, Color? color, ThemeData? theme, ThemeData? darkTheme, ThemeData? highContrastTheme, ThemeData? highContrastDarkTheme, ThemeMode? themeMode = ThemeMode.system, Duration themeAnimationDuration = kThemeAnimationDuration, Curve themeAnimationCurve = Curves.linear, Locale? locale, Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates, Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback, Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback, Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')], bool debugShowMaterialGrid = false, bool showPerformanceOverlay = false, bool checkerboardRasterCacheImages = false, bool checkerboardOffscreenLayers = false, bool showSemanticsDebugger = false, bool debugShowCheckedModeBanner = true, Map<ShortcutActivator, Intent>? shortcuts, Map<Type, Action<Intent>>? actions, String? restorationScopeId, ScrollBehavior? scrollBehavior, bool useInheritedMediaQuery = false})
  MaterialApp$Mate.router({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {GlobalKey<ScaffoldMessengerState>? scaffoldMessengerKey} , default:none
    super.scaffoldMessengerKey,

    /// optionalParameters: {RouteInformationProvider? routeInformationProvider} , default:none
    super.routeInformationProvider,

    /// optionalParameters: {RouteInformationParser<Object>? routeInformationParser} , default:none
    super.routeInformationParser,

    /// optionalParameters: {RouterDelegate<Object>? routerDelegate} , default:none
    super.routerDelegate,

    /// optionalParameters: {RouterConfig<Object>? routerConfig} , default:none
    super.routerConfig,

    /// optionalParameters: {BackButtonDispatcher? backButtonDispatcher} , default:none
    super.backButtonDispatcher,

    /// optionalParameters: {Widget Function(BuildContext, Widget?)? builder} , default:none
    super.builder,

    /// optionalParameters: {String title = ''} , default:processed=SimpleStringLiteralImpl
    super.title,

    /// optionalParameters: {String Function(BuildContext)? onGenerateTitle} , default:none
    super.onGenerateTitle,

    /// optionalParameters: {bool Function(NavigationNotification)? onNavigationNotification} , default:none
    super.onNavigationNotification,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {ThemeData? theme} , default:none
    super.theme,

    /// optionalParameters: {ThemeData? darkTheme} , default:none
    super.darkTheme,

    /// optionalParameters: {ThemeData? highContrastTheme} , default:none
    super.highContrastTheme,

    /// optionalParameters: {ThemeData? highContrastDarkTheme} , default:none
    super.highContrastDarkTheme,

    /// optionalParameters: {ThemeMode? themeMode = ThemeMode.system} , default:processed=PrefixedIdentifierImpl
    super.themeMode,

    /// optionalParameters: {Duration themeAnimationDuration = kThemeAnimationDuration} , default:unprocessed=SimpleIdentifierImpl
    super.themeAnimationDuration,

    /// optionalParameters: {Curve themeAnimationCurve = Curves.linear} , default:processed=PrefixedIdentifierImpl
    super.themeAnimationCurve,

    /// optionalParameters: {Locale? locale} , default:none
    super.locale,

    /// optionalParameters: {Iterable<LocalizationsDelegate<dynamic>>? localizationsDelegates} , default:none
    super.localizationsDelegates,

    /// optionalParameters: {Locale? Function(List<Locale>?, Iterable<Locale>)? localeListResolutionCallback} , default:none
    super.localeListResolutionCallback,

    /// optionalParameters: {Locale? Function(Locale?, Iterable<Locale>)? localeResolutionCallback} , default:none
    super.localeResolutionCallback,

    /// optionalParameters: {Iterable<Locale> supportedLocales = const <Locale>[Locale('en', 'US')]} , default:unprocessed=ListLiteralImpl
    super.supportedLocales,

    /// optionalParameters: {bool debugShowMaterialGrid = false} , default:processed=BooleanLiteralImpl
    super.debugShowMaterialGrid,

    /// optionalParameters: {bool showPerformanceOverlay = false} , default:processed=BooleanLiteralImpl
    super.showPerformanceOverlay,

    /// optionalParameters: {bool checkerboardRasterCacheImages = false} , default:processed=BooleanLiteralImpl
    super.checkerboardRasterCacheImages,

    /// optionalParameters: {bool checkerboardOffscreenLayers = false} , default:processed=BooleanLiteralImpl
    super.checkerboardOffscreenLayers,

    /// optionalParameters: {bool showSemanticsDebugger = false} , default:processed=BooleanLiteralImpl
    super.showSemanticsDebugger,

    /// optionalParameters: {bool debugShowCheckedModeBanner = true} , default:processed=BooleanLiteralImpl
    super.debugShowCheckedModeBanner,

    /// optionalParameters: {Map<ShortcutActivator, Intent>? shortcuts} , default:none
    super.shortcuts,

    /// optionalParameters: {Map<Type, Action<Intent>>? actions} , default:none
    super.actions,

    /// optionalParameters: {String? restorationScopeId} , default:none
    super.restorationScopeId,

    /// optionalParameters: {ScrollBehavior? scrollBehavior} , default:none
    super.scrollBehavior,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'scaffoldMessengerKey': _i2.BuilderArg<_i4.GlobalKey<_i6.ScaffoldMessengerState>?>(
            name: 'scaffoldMessengerKey',
            init: scaffoldMessengerKey,
            isNamed: true,
          ),
          'routeInformationProvider': _i2.BuilderArg<_i18.RouteInformationProvider?>(
            name: 'routeInformationProvider',
            init: routeInformationProvider,
            isNamed: true,
          ),
          'routeInformationParser': _i2.BuilderArg<_i18.RouteInformationParser<Object>?>(
            name: 'routeInformationParser',
            init: routeInformationParser,
            isNamed: true,
          ),
          'routerDelegate': _i2.BuilderArg<_i18.RouterDelegate<Object>?>(
            name: 'routerDelegate',
            init: routerDelegate,
            isNamed: true,
          ),
          'routerConfig': _i2.BuilderArg<_i18.RouterConfig<Object>?>(
            name: 'routerConfig',
            init: routerConfig,
            isNamed: true,
          ),
          'backButtonDispatcher': _i2.BuilderArg<_i18.BackButtonDispatcher?>(
            name: 'backButtonDispatcher',
            init: backButtonDispatcher,
            isNamed: true,
          ),
          'builder': _i2.BuilderArg<_i4.TransitionBuilder?>(
            name: 'builder',
            init: builder,
            isNamed: true,
          ),
          'title': _i2.BuilderArg<String>(
            name: 'title',
            init: title,
            isNamed: true,
            defaultValue: '',
          ),
          'onGenerateTitle': _i2.BuilderArg<_i7.GenerateAppTitle?>(
            name: 'onGenerateTitle',
            init: onGenerateTitle,
            isNamed: true,
          ),
          'onNavigationNotification': _i2.BuilderArg<_i8.NotificationListenerCallback<_i5.NavigationNotification>?>(
            name: 'onNavigationNotification',
            init: onNavigationNotification,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i9.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'theme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'theme',
            init: theme,
            isNamed: true,
          ),
          'darkTheme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'darkTheme',
            init: darkTheme,
            isNamed: true,
          ),
          'highContrastTheme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'highContrastTheme',
            init: highContrastTheme,
            isNamed: true,
          ),
          'highContrastDarkTheme': _i2.BuilderArg<_i10.ThemeData?>(
            name: 'highContrastDarkTheme',
            init: highContrastDarkTheme,
            isNamed: true,
          ),
          'themeMode': _i2.BuilderArg<_i1.ThemeMode?>(
            name: 'themeMode',
            init: themeMode,
            isNamed: true,
            defaultValue: _i11.ThemeMode.system,
          ),
          'themeAnimationDuration': _i2.BuilderArg<Duration>(
            name: 'themeAnimationDuration',
            init: themeAnimationDuration,
            isNamed: true,
          ),
          'themeAnimationCurve': _i2.BuilderArg<_i12.Curve>(
            name: 'themeAnimationCurve',
            init: themeAnimationCurve,
            isNamed: true,
            defaultValue: _i13.Curves.linear,
          ),
          'locale': _i2.BuilderArg<_i9.Locale?>(
            name: 'locale',
            init: locale,
            isNamed: true,
          ),
          'localizationsDelegates': _i2.BuilderArg<Iterable<_i14.LocalizationsDelegate<dynamic>>?>(
            name: 'localizationsDelegates',
            init: localizationsDelegates,
            isNamed: true,
          ),
          'localeListResolutionCallback': _i2.BuilderArg<_i7.LocaleListResolutionCallback?>(
            name: 'localeListResolutionCallback',
            init: localeListResolutionCallback,
            isNamed: true,
          ),
          'localeResolutionCallback': _i2.BuilderArg<_i7.LocaleResolutionCallback?>(
            name: 'localeResolutionCallback',
            init: localeResolutionCallback,
            isNamed: true,
          ),
          'supportedLocales': _i2.BuilderArg<Iterable<_i9.Locale>>(
            name: 'supportedLocales',
            init: supportedLocales,
            isNamed: true,
          ),
          'debugShowMaterialGrid': _i2.BuilderArg<bool>(
            name: 'debugShowMaterialGrid',
            init: debugShowMaterialGrid,
            isNamed: true,
            defaultValue: false,
          ),
          'showPerformanceOverlay': _i2.BuilderArg<bool>(
            name: 'showPerformanceOverlay',
            init: showPerformanceOverlay,
            isNamed: true,
            defaultValue: false,
          ),
          'checkerboardRasterCacheImages': _i2.BuilderArg<bool>(
            name: 'checkerboardRasterCacheImages',
            init: checkerboardRasterCacheImages,
            isNamed: true,
            defaultValue: false,
          ),
          'checkerboardOffscreenLayers': _i2.BuilderArg<bool>(
            name: 'checkerboardOffscreenLayers',
            init: checkerboardOffscreenLayers,
            isNamed: true,
            defaultValue: false,
          ),
          'showSemanticsDebugger': _i2.BuilderArg<bool>(
            name: 'showSemanticsDebugger',
            init: showSemanticsDebugger,
            isNamed: true,
            defaultValue: false,
          ),
          'debugShowCheckedModeBanner': _i2.BuilderArg<bool>(
            name: 'debugShowCheckedModeBanner',
            init: debugShowCheckedModeBanner,
            isNamed: true,
            defaultValue: true,
          ),
          'shortcuts': _i2.BuilderArg<Map<_i15.ShortcutActivator, _i16.Intent>?>(
            name: 'shortcuts',
            init: shortcuts,
            isNamed: true,
          ),
          'actions': _i2.BuilderArg<Map<Type, _i16.Action<_i16.Intent>>?>(
            name: 'actions',
            init: actions,
            isNamed: true,
          ),
          'restorationScopeId': _i2.BuilderArg<String?>(
            name: 'restorationScopeId',
            init: restorationScopeId,
            isNamed: true,
          ),
          'scrollBehavior': _i2.BuilderArg<_i17.ScrollBehavior?>(
            name: 'scrollBehavior',
            init: scrollBehavior,
            isNamed: true,
          ),
        },
        super.router() {
    mateBuilderName = 'MaterialApp.router';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => MaterialApp$Mate.router(
          key: p.get('key').build(),
          scaffoldMessengerKey: p.get('scaffoldMessengerKey').build(),
          routeInformationProvider: p.get('routeInformationProvider').build(),
          routeInformationParser: p.get('routeInformationParser').build(),
          routerDelegate: p.get('routerDelegate').build(),
          routerConfig: p.get('routerConfig').build(),
          backButtonDispatcher: p.get('backButtonDispatcher').build(),
          builder: p.get('builder').build(),
          title: p.get('title').build(),
          onGenerateTitle: p.get('onGenerateTitle').build(),
          onNavigationNotification: p.get('onNavigationNotification').build(),
          color: p.get('color').build(),
          theme: p.get('theme').build(),
          darkTheme: p.get('darkTheme').build(),
          highContrastTheme: p.get('highContrastTheme').build(),
          highContrastDarkTheme: p.get('highContrastDarkTheme').build(),
          themeMode: p.get('themeMode').build(),
          themeAnimationDuration: p.get('themeAnimationDuration').build(),
          themeAnimationCurve: p.get('themeAnimationCurve').build(),
          locale: p.get('locale').build(),
          localizationsDelegates: p.get('localizationsDelegates').build(),
          localeListResolutionCallback: p.get('localeListResolutionCallback').build(),
          localeResolutionCallback: p.get('localeResolutionCallback').build(),
          supportedLocales: p.get('supportedLocales').build(),
          debugShowMaterialGrid: p.get('debugShowMaterialGrid').build(),
          showPerformanceOverlay: p.get('showPerformanceOverlay').build(),
          checkerboardRasterCacheImages: p.get('checkerboardRasterCacheImages').build(),
          checkerboardOffscreenLayers: p.get('checkerboardOffscreenLayers').build(),
          showSemanticsDebugger: p.get('showSemanticsDebugger').build(),
          debugShowCheckedModeBanner: p.get('debugShowCheckedModeBanner').build(),
          shortcuts: p.get('shortcuts').build(),
          actions: p.get('actions').build(),
          restorationScopeId: p.get('restorationScopeId').build(),
          scrollBehavior: p.get('scrollBehavior').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
