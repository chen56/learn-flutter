// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/navigation_bar.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/foundation/basic_types.dart' as _i5;
import 'dart:ui' as _i6;
import 'package:flutter/src/painting/borders.dart' as _i7;
import 'package:flutter/src/material/material_state.dart' as _i8;
import 'package:flutter/src/animation/animation.dart' as _i9;
import 'package:flutter/src/painting/border_radius.dart' as _i10;

/// class NavigationBar extends StatelessWidget
class NavigationBar$Mate extends _i1.NavigationBar with _i2.Mate {
  /// NavigationBar NavigationBar({Key? key, Duration? animationDuration, int selectedIndex = 0, required List<Widget> destinations, void Function(int)? onDestinationSelected, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, Color? indicatorColor, ShapeBorder? indicatorShape, double? height, NavigationDestinationLabelBehavior? labelBehavior, MaterialStateProperty<Color?>? overlayColor})
  NavigationBar$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Duration? animationDuration} , default:none
    super.animationDuration,

    /// optionalParameters: {int selectedIndex = 0} , default:processed=IntegerLiteralImpl
    super.selectedIndex,

    /// optionalParameters: {required List<Widget> destinations} , default:none
    required super.destinations,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , default:none
    super.onDestinationSelected,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {Color? shadowColor} , default:none
    super.shadowColor,

    /// optionalParameters: {Color? surfaceTintColor} , default:none
    super.surfaceTintColor,

    /// optionalParameters: {Color? indicatorColor} , default:none
    super.indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , default:none
    super.indicatorShape,

    /// optionalParameters: {double? height} , default:none
    super.height,

    /// optionalParameters: {NavigationDestinationLabelBehavior? labelBehavior} , default:none
    super.labelBehavior,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    super.overlayColor,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'animationDuration': _i2.BuilderArg<Duration?>(
            name: 'animationDuration',
            init: animationDuration,
            isNamed: true,
          ),
          'selectedIndex': _i2.BuilderArg<int>(
            name: 'selectedIndex',
            init: selectedIndex,
            isNamed: true,
            defaultValue: 0,
          ),
          'destinations': _i2.BuilderArg<List<_i4.Widget>>(
            name: 'destinations',
            init: destinations,
            isNamed: true,
          ),
          'onDestinationSelected': _i2.BuilderArg<_i5.ValueChanged<int>?>(
            name: 'onDestinationSelected',
            init: onDestinationSelected,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i6.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'shadowColor': _i2.BuilderArg<_i6.Color?>(
            name: 'shadowColor',
            init: shadowColor,
            isNamed: true,
          ),
          'surfaceTintColor': _i2.BuilderArg<_i6.Color?>(
            name: 'surfaceTintColor',
            init: surfaceTintColor,
            isNamed: true,
          ),
          'indicatorColor': _i2.BuilderArg<_i6.Color?>(
            name: 'indicatorColor',
            init: indicatorColor,
            isNamed: true,
          ),
          'indicatorShape': _i2.BuilderArg<_i7.ShapeBorder?>(
            name: 'indicatorShape',
            init: indicatorShape,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double?>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'labelBehavior': _i2.BuilderArg<_i1.NavigationDestinationLabelBehavior?>(
            name: 'labelBehavior',
            init: labelBehavior,
            isNamed: true,
          ),
          'overlayColor': _i2.BuilderArg<_i8.MaterialStateProperty<_i6.Color?>?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'NavigationBar';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationBar$Mate(
          key: p.get('key').build(),
          animationDuration: p.get('animationDuration').build(),
          selectedIndex: p.get('selectedIndex').build(),
          destinations: p.get('destinations').build(),
          onDestinationSelected: p.get('onDestinationSelected').build(),
          backgroundColor: p.get('backgroundColor').build(),
          elevation: p.get('elevation').build(),
          shadowColor: p.get('shadowColor').build(),
          surfaceTintColor: p.get('surfaceTintColor').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
          height: p.get('height').build(),
          labelBehavior: p.get('labelBehavior').build(),
          overlayColor: p.get('overlayColor').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class NavigationDestination extends StatelessWidget
class NavigationDestination$Mate extends _i1.NavigationDestination with _i2.Mate {
  /// NavigationDestination NavigationDestination({Key? key, required Widget icon, Widget? selectedIcon, required String label, String? tooltip, bool enabled = true})
  NavigationDestination$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Widget icon} , default:none
    required super.icon,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,

    /// optionalParameters: {required String label} , default:none
    required super.label,

    /// optionalParameters: {String? tooltip} , default:none
    super.tooltip,

    /// optionalParameters: {bool enabled = true} , default:processed=BooleanLiteralImpl
    super.enabled,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'icon': _i2.BuilderArg<_i4.Widget>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i4.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<String>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'tooltip': _i2.BuilderArg<String?>(
            name: 'tooltip',
            init: tooltip,
            isNamed: true,
          ),
          'enabled': _i2.BuilderArg<bool>(
            name: 'enabled',
            init: enabled,
            isNamed: true,
            defaultValue: true,
          ),
        },
        super() {
    mateBuilderName = 'NavigationDestination';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationDestination$Mate(
          key: p.get('key').build(),
          icon: p.get('icon').build(),
          selectedIcon: p.get('selectedIcon').build(),
          label: p.get('label').build(),
          tooltip: p.get('tooltip').build(),
          enabled: p.get('enabled').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class NavigationIndicator extends StatelessWidget
class NavigationIndicator$Mate extends _i1.NavigationIndicator with _i2.Mate {
  /// NavigationIndicator NavigationIndicator({Key? key, required Animation<double> animation, Color? color, double width = _kIndicatorWidth, double height = _kIndicatorHeight, BorderRadius borderRadius = const BorderRadius.all(Radius.circular(16)), ShapeBorder? shape})
  NavigationIndicator$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required Animation<double> animation} , default:none
    required super.animation,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {double width = _kIndicatorWidth} , default:unprocessed=SimpleIdentifierImpl
    super.width,

    /// optionalParameters: {double height = _kIndicatorHeight} , default:unprocessed=SimpleIdentifierImpl
    super.height,

    /// optionalParameters: {BorderRadius borderRadius = const BorderRadius.all(Radius.circular(16))} , default:unprocessed=InstanceCreationExpressionImpl
    super.borderRadius,

    /// optionalParameters: {ShapeBorder? shape} , default:none
    super.shape,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'animation': _i2.BuilderArg<_i9.Animation<double>>(
            name: 'animation',
            init: animation,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i6.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'width': _i2.BuilderArg<double>(
            name: 'width',
            init: width,
            isNamed: true,
          ),
          'height': _i2.BuilderArg<double>(
            name: 'height',
            init: height,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i10.BorderRadius>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'shape': _i2.BuilderArg<_i7.ShapeBorder?>(
            name: 'shape',
            init: shape,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'NavigationIndicator';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationIndicator$Mate(
          key: p.get('key').build(),
          animation: p.get('animation').build(),
          color: p.get('color').build(),
          width: p.get('width').build(),
          height: p.get('height').build(),
          borderRadius: p.get('borderRadius').build(),
          shape: p.get('shape').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
