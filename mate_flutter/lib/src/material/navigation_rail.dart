// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/navigation_rail.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/foundation/basic_types.dart' as _i6;
import 'package:flutter/src/painting/text_style.dart' as _i7;
import 'package:flutter/src/widgets/icon_theme_data.dart' as _i8;
import 'package:flutter/src/painting/borders.dart' as _i9;
import 'package:flutter/src/painting/edge_insets.dart' as _i10;

/// class NavigationRail extends StatefulWidget
class NavigationRail$Mate extends _i1.NavigationRail with _i2.Mate {
  /// NavigationRail NavigationRail({Key? key, Color? backgroundColor, bool extended = false, Widget? leading, Widget? trailing, required List<NavigationRailDestination> destinations, required int? selectedIndex, void Function(int)? onDestinationSelected, double? elevation, double? groupAlignment, NavigationRailLabelType? labelType, TextStyle? unselectedLabelTextStyle, TextStyle? selectedLabelTextStyle, IconThemeData? unselectedIconTheme, IconThemeData? selectedIconTheme, double? minWidth, double? minExtendedWidth, bool? useIndicator, Color? indicatorColor, ShapeBorder? indicatorShape})
  NavigationRail$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {Color? backgroundColor} , default:none
    super.backgroundColor,

    /// optionalParameters: {bool extended = false} , default:processed=BooleanLiteralImpl
    super.extended,

    /// optionalParameters: {Widget? leading} , default:none
    super.leading,

    /// optionalParameters: {Widget? trailing} , default:none
    super.trailing,

    /// optionalParameters: {required List<NavigationRailDestination> destinations} , default:none
    required super.destinations,

    /// optionalParameters: {required int? selectedIndex} , default:none
    required super.selectedIndex,

    /// optionalParameters: {void Function(int)? onDestinationSelected} , default:none
    super.onDestinationSelected,

    /// optionalParameters: {double? elevation} , default:none
    super.elevation,

    /// optionalParameters: {double? groupAlignment} , default:none
    super.groupAlignment,

    /// optionalParameters: {NavigationRailLabelType? labelType} , default:none
    super.labelType,

    /// optionalParameters: {TextStyle? unselectedLabelTextStyle} , default:none
    super.unselectedLabelTextStyle,

    /// optionalParameters: {TextStyle? selectedLabelTextStyle} , default:none
    super.selectedLabelTextStyle,

    /// optionalParameters: {IconThemeData? unselectedIconTheme} , default:none
    super.unselectedIconTheme,

    /// optionalParameters: {IconThemeData? selectedIconTheme} , default:none
    super.selectedIconTheme,

    /// optionalParameters: {double? minWidth} , default:none
    super.minWidth,

    /// optionalParameters: {double? minExtendedWidth} , default:none
    super.minExtendedWidth,

    /// optionalParameters: {bool? useIndicator} , default:none
    super.useIndicator,

    /// optionalParameters: {Color? indicatorColor} , default:none
    super.indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , default:none
    super.indicatorShape,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'backgroundColor': _i2.BuilderArg<_i4.Color?>(
            name: 'backgroundColor',
            init: backgroundColor,
            isNamed: true,
          ),
          'extended': _i2.BuilderArg<bool>(
            name: 'extended',
            init: extended,
            isNamed: true,
            defaultValue: false,
          ),
          'leading': _i2.BuilderArg<_i5.Widget?>(
            name: 'leading',
            init: leading,
            isNamed: true,
          ),
          'trailing': _i2.BuilderArg<_i5.Widget?>(
            name: 'trailing',
            init: trailing,
            isNamed: true,
          ),
          'destinations': _i2.BuilderArg<List<_i1.NavigationRailDestination>>(
            name: 'destinations',
            init: destinations,
            isNamed: true,
          ),
          'selectedIndex': _i2.BuilderArg<int?>(
            name: 'selectedIndex',
            init: selectedIndex,
            isNamed: true,
          ),
          'onDestinationSelected': _i2.BuilderArg<_i6.ValueChanged<int>?>(
            name: 'onDestinationSelected',
            init: onDestinationSelected,
            isNamed: true,
          ),
          'elevation': _i2.BuilderArg<double?>(
            name: 'elevation',
            init: elevation,
            isNamed: true,
          ),
          'groupAlignment': _i2.BuilderArg<double?>(
            name: 'groupAlignment',
            init: groupAlignment,
            isNamed: true,
          ),
          'labelType': _i2.BuilderArg<_i1.NavigationRailLabelType?>(
            name: 'labelType',
            init: labelType,
            isNamed: true,
          ),
          'unselectedLabelTextStyle': _i2.BuilderArg<_i7.TextStyle?>(
            name: 'unselectedLabelTextStyle',
            init: unselectedLabelTextStyle,
            isNamed: true,
          ),
          'selectedLabelTextStyle': _i2.BuilderArg<_i7.TextStyle?>(
            name: 'selectedLabelTextStyle',
            init: selectedLabelTextStyle,
            isNamed: true,
          ),
          'unselectedIconTheme': _i2.BuilderArg<_i8.IconThemeData?>(
            name: 'unselectedIconTheme',
            init: unselectedIconTheme,
            isNamed: true,
          ),
          'selectedIconTheme': _i2.BuilderArg<_i8.IconThemeData?>(
            name: 'selectedIconTheme',
            init: selectedIconTheme,
            isNamed: true,
          ),
          'minWidth': _i2.BuilderArg<double?>(
            name: 'minWidth',
            init: minWidth,
            isNamed: true,
          ),
          'minExtendedWidth': _i2.BuilderArg<double?>(
            name: 'minExtendedWidth',
            init: minExtendedWidth,
            isNamed: true,
          ),
          'useIndicator': _i2.BuilderArg<bool?>(
            name: 'useIndicator',
            init: useIndicator,
            isNamed: true,
          ),
          'indicatorColor': _i2.BuilderArg<_i4.Color?>(
            name: 'indicatorColor',
            init: indicatorColor,
            isNamed: true,
          ),
          'indicatorShape': _i2.BuilderArg<_i9.ShapeBorder?>(
            name: 'indicatorShape',
            init: indicatorShape,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'NavigationRail';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationRail$Mate(
          key: p.get('key').build(),
          backgroundColor: p.get('backgroundColor').build(),
          extended: p.get('extended').build(),
          leading: p.get('leading').build(),
          trailing: p.get('trailing').build(),
          destinations: p.get('destinations').build(),
          selectedIndex: p.get('selectedIndex').build(),
          onDestinationSelected: p.get('onDestinationSelected').build(),
          elevation: p.get('elevation').build(),
          groupAlignment: p.get('groupAlignment').build(),
          labelType: p.get('labelType').build(),
          unselectedLabelTextStyle: p.get('unselectedLabelTextStyle').build(),
          selectedLabelTextStyle: p.get('selectedLabelTextStyle').build(),
          unselectedIconTheme: p.get('unselectedIconTheme').build(),
          selectedIconTheme: p.get('selectedIconTheme').build(),
          minWidth: p.get('minWidth').build(),
          minExtendedWidth: p.get('minExtendedWidth').build(),
          useIndicator: p.get('useIndicator').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class NavigationRailDestination
class NavigationRailDestination$Mate extends _i1.NavigationRailDestination with _i2.Mate {
  /// NavigationRailDestination NavigationRailDestination({required Widget icon, Widget? selectedIcon, Color? indicatorColor, ShapeBorder? indicatorShape, required Widget label, EdgeInsetsGeometry? padding})
  NavigationRailDestination$Mate({
    /// optionalParameters: {required Widget icon} , default:none
    required super.icon,

    /// optionalParameters: {Widget? selectedIcon} , default:none
    super.selectedIcon,

    /// optionalParameters: {Color? indicatorColor} , default:none
    super.indicatorColor,

    /// optionalParameters: {ShapeBorder? indicatorShape} , default:none
    super.indicatorShape,

    /// optionalParameters: {required Widget label} , default:none
    required super.label,

    /// optionalParameters: {EdgeInsetsGeometry? padding} , default:none
    super.padding,
  })  : mateParams = {
          'icon': _i2.BuilderArg<_i5.Widget>(
            name: 'icon',
            init: icon,
            isNamed: true,
          ),
          'selectedIcon': _i2.BuilderArg<_i5.Widget?>(
            name: 'selectedIcon',
            init: selectedIcon,
            isNamed: true,
          ),
          'indicatorColor': _i2.BuilderArg<_i4.Color?>(
            name: 'indicatorColor',
            init: indicatorColor,
            isNamed: true,
          ),
          'indicatorShape': _i2.BuilderArg<_i9.ShapeBorder?>(
            name: 'indicatorShape',
            init: indicatorShape,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<_i5.Widget>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'padding': _i2.BuilderArg<_i10.EdgeInsetsGeometry?>(
            name: 'padding',
            init: padding,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'NavigationRailDestination';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => NavigationRailDestination$Mate(
          icon: p.get('icon').build(),
          selectedIcon: p.get('selectedIcon').build(),
          indicatorColor: p.get('indicatorColor').build(),
          indicatorShape: p.get('indicatorShape').build(),
          label: p.get('label').build(),
          padding: p.get('padding').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
