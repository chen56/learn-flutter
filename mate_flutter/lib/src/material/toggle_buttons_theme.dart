// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/toggle_buttons_theme.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/painting/text_style.dart' as _i3;
import 'package:flutter/src/rendering/box.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/painting/border_radius.dart' as _i6;
import 'package:flutter/src/foundation/key.dart' as _i7;
import 'package:flutter/src/widgets/framework.dart' as _i8;

/// class ToggleButtonsThemeData with Diagnosticable
class ToggleButtonsThemeData$Mate extends _i1.ToggleButtonsThemeData
    with _i2.Mate {
  /// ToggleButtonsThemeData ToggleButtonsThemeData({TextStyle? textStyle, BoxConstraints? constraints, Color? color, Color? selectedColor, Color? disabledColor, Color? fillColor, Color? focusColor, Color? highlightColor, Color? hoverColor, Color? splashColor, Color? borderColor, Color? selectedBorderColor, Color? disabledBorderColor, BorderRadius? borderRadius, double? borderWidth})
  ToggleButtonsThemeData$Mate({
    /// optionalParameters: {TextStyle? textStyle} , default:none
    super.textStyle,

    /// optionalParameters: {BoxConstraints? constraints} , default:none
    super.constraints,

    /// optionalParameters: {Color? color} , default:none
    super.color,

    /// optionalParameters: {Color? selectedColor} , default:none
    super.selectedColor,

    /// optionalParameters: {Color? disabledColor} , default:none
    super.disabledColor,

    /// optionalParameters: {Color? fillColor} , default:none
    super.fillColor,

    /// optionalParameters: {Color? focusColor} , default:none
    super.focusColor,

    /// optionalParameters: {Color? highlightColor} , default:none
    super.highlightColor,

    /// optionalParameters: {Color? hoverColor} , default:none
    super.hoverColor,

    /// optionalParameters: {Color? splashColor} , default:none
    super.splashColor,

    /// optionalParameters: {Color? borderColor} , default:none
    super.borderColor,

    /// optionalParameters: {Color? selectedBorderColor} , default:none
    super.selectedBorderColor,

    /// optionalParameters: {Color? disabledBorderColor} , default:none
    super.disabledBorderColor,

    /// optionalParameters: {BorderRadius? borderRadius} , default:none
    super.borderRadius,

    /// optionalParameters: {double? borderWidth} , default:none
    super.borderWidth,
  })  : mateParams = {
          'textStyle': _i2.BuilderArg<_i3.TextStyle?>(
            name: 'textStyle',
            init: textStyle,
            isNamed: true,
          ),
          'constraints': _i2.BuilderArg<_i4.BoxConstraints?>(
            name: 'constraints',
            init: constraints,
            isNamed: true,
          ),
          'color': _i2.BuilderArg<_i5.Color?>(
            name: 'color',
            init: color,
            isNamed: true,
          ),
          'selectedColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedColor',
            init: selectedColor,
            isNamed: true,
          ),
          'disabledColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledColor',
            init: disabledColor,
            isNamed: true,
          ),
          'fillColor': _i2.BuilderArg<_i5.Color?>(
            name: 'fillColor',
            init: fillColor,
            isNamed: true,
          ),
          'focusColor': _i2.BuilderArg<_i5.Color?>(
            name: 'focusColor',
            init: focusColor,
            isNamed: true,
          ),
          'highlightColor': _i2.BuilderArg<_i5.Color?>(
            name: 'highlightColor',
            init: highlightColor,
            isNamed: true,
          ),
          'hoverColor': _i2.BuilderArg<_i5.Color?>(
            name: 'hoverColor',
            init: hoverColor,
            isNamed: true,
          ),
          'splashColor': _i2.BuilderArg<_i5.Color?>(
            name: 'splashColor',
            init: splashColor,
            isNamed: true,
          ),
          'borderColor': _i2.BuilderArg<_i5.Color?>(
            name: 'borderColor',
            init: borderColor,
            isNamed: true,
          ),
          'selectedBorderColor': _i2.BuilderArg<_i5.Color?>(
            name: 'selectedBorderColor',
            init: selectedBorderColor,
            isNamed: true,
          ),
          'disabledBorderColor': _i2.BuilderArg<_i5.Color?>(
            name: 'disabledBorderColor',
            init: disabledBorderColor,
            isNamed: true,
          ),
          'borderRadius': _i2.BuilderArg<_i6.BorderRadius?>(
            name: 'borderRadius',
            init: borderRadius,
            isNamed: true,
          ),
          'borderWidth': _i2.BuilderArg<double?>(
            name: 'borderWidth',
            init: borderWidth,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ToggleButtonsThemeData';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ToggleButtonsThemeData$Mate(
          textStyle: p.get('textStyle').build(),
          constraints: p.get('constraints').build(),
          color: p.get('color').build(),
          selectedColor: p.get('selectedColor').build(),
          disabledColor: p.get('disabledColor').build(),
          fillColor: p.get('fillColor').build(),
          focusColor: p.get('focusColor').build(),
          highlightColor: p.get('highlightColor').build(),
          hoverColor: p.get('hoverColor').build(),
          splashColor: p.get('splashColor').build(),
          borderColor: p.get('borderColor').build(),
          selectedBorderColor: p.get('selectedBorderColor').build(),
          disabledBorderColor: p.get('disabledBorderColor').build(),
          borderRadius: p.get('borderRadius').build(),
          borderWidth: p.get('borderWidth').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class ToggleButtonsTheme extends InheritedTheme
class ToggleButtonsTheme$Mate extends _i1.ToggleButtonsTheme with _i2.Mate {
  /// ToggleButtonsTheme ToggleButtonsTheme({Key? key, required ToggleButtonsThemeData data, required Widget child})
  ToggleButtonsTheme$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required ToggleButtonsThemeData data} , default:none
    required super.data,

    /// optionalParameters: {required Widget child} , default:none
    required super.child,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i7.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'data': _i2.BuilderArg<_i1.ToggleButtonsThemeData>(
            name: 'data',
            init: data,
            isNamed: true,
          ),
          'child': _i2.BuilderArg<_i8.Widget>(
            name: 'child',
            init: child,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'ToggleButtonsTheme';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => ToggleButtonsTheme$Mate(
          key: p.get('key').build(),
          data: p.get('data').build(),
          child: p.get('child').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
