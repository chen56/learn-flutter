// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/material/slider.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/foundation/key.dart' as _i3;
import 'package:flutter/src/foundation/basic_types.dart' as _i4;
import 'dart:ui' as _i5;
import 'package:flutter/src/material/material_state.dart' as _i6;
import 'package:flutter/src/services/mouse_cursor.dart' as _i7;
import 'package:flutter/src/material/slider_theme.dart' as _i8;
import 'package:flutter/src/widgets/focus_manager.dart' as _i9;

/// class Slider extends StatefulWidget
class Slider$Mate extends _i1.Slider with _i2.Mate {
  /// Slider Slider({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, MouseCursor? mouseCursor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  Slider$Mate({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double value} , default:none
    required super.value,

    /// optionalParameters: {double? secondaryTrackValue} , default:none
    super.secondaryTrackValue,

    /// optionalParameters: {required void Function(double)? onChanged} , default:none
    required super.onChanged,

    /// optionalParameters: {void Function(double)? onChangeStart} , default:none
    super.onChangeStart,

    /// optionalParameters: {void Function(double)? onChangeEnd} , default:none
    super.onChangeEnd,

    /// optionalParameters: {double min = 0.0} , default:processed=DoubleLiteralImpl
    super.min,

    /// optionalParameters: {double max = 1.0} , default:processed=DoubleLiteralImpl
    super.max,

    /// optionalParameters: {int? divisions} , default:none
    super.divisions,

    /// optionalParameters: {String? label} , default:none
    super.label,

    /// optionalParameters: {Color? activeColor} , default:none
    super.activeColor,

    /// optionalParameters: {Color? inactiveColor} , default:none
    super.inactiveColor,

    /// optionalParameters: {Color? secondaryActiveColor} , default:none
    super.secondaryActiveColor,

    /// optionalParameters: {Color? thumbColor} , default:none
    super.thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    super.overlayColor,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {String Function(double)? semanticFormatterCallback} , default:none
    super.semanticFormatterCallback,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<double>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'secondaryTrackValue': _i2.BuilderArg<double?>(
            name: 'secondaryTrackValue',
            init: secondaryTrackValue,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'onChangeStart': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChangeStart',
            init: onChangeStart,
            isNamed: true,
          ),
          'onChangeEnd': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChangeEnd',
            init: onChangeEnd,
            isNamed: true,
          ),
          'min': _i2.BuilderArg<double>(
            name: 'min',
            init: min,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'max': _i2.BuilderArg<double>(
            name: 'max',
            init: max,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'divisions': _i2.BuilderArg<int?>(
            name: 'divisions',
            init: divisions,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<String?>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'activeColor': _i2.BuilderArg<_i5.Color?>(
            name: 'activeColor',
            init: activeColor,
            isNamed: true,
          ),
          'inactiveColor': _i2.BuilderArg<_i5.Color?>(
            name: 'inactiveColor',
            init: inactiveColor,
            isNamed: true,
          ),
          'secondaryActiveColor': _i2.BuilderArg<_i5.Color?>(
            name: 'secondaryActiveColor',
            init: secondaryActiveColor,
            isNamed: true,
          ),
          'thumbColor': _i2.BuilderArg<_i5.Color?>(
            name: 'thumbColor',
            init: thumbColor,
            isNamed: true,
          ),
          'overlayColor':
              _i2.BuilderArg<_i6.MaterialStateProperty<_i5.Color?>?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i7.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'semanticFormatterCallback':
              _i2.BuilderArg<_i8.SemanticFormatterCallback?>(
            name: 'semanticFormatterCallback',
            init: semanticFormatterCallback,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super() {
    mateBuilderName = 'Slider';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Slider$Mate(
          key: p.get('key').build(),
          value: p.get('value').build(),
          secondaryTrackValue: p.get('secondaryTrackValue').build(),
          onChanged: p.get('onChanged').build(),
          onChangeStart: p.get('onChangeStart').build(),
          onChangeEnd: p.get('onChangeEnd').build(),
          min: p.get('min').build(),
          max: p.get('max').build(),
          divisions: p.get('divisions').build(),
          label: p.get('label').build(),
          activeColor: p.get('activeColor').build(),
          inactiveColor: p.get('inactiveColor').build(),
          secondaryActiveColor: p.get('secondaryActiveColor').build(),
          thumbColor: p.get('thumbColor').build(),
          overlayColor: p.get('overlayColor').build(),
          mouseCursor: p.get('mouseCursor').build(),
          semanticFormatterCallback: p.get('semanticFormatterCallback').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
        );
  }

  /// Slider Slider.adaptive({Key? key, required double value, double? secondaryTrackValue, required void Function(double)? onChanged, void Function(double)? onChangeStart, void Function(double)? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, String? label, MouseCursor? mouseCursor, Color? activeColor, Color? inactiveColor, Color? secondaryActiveColor, Color? thumbColor, MaterialStateProperty<Color?>? overlayColor, String Function(double)? semanticFormatterCallback, FocusNode? focusNode, bool autofocus = false})
  Slider$Mate.adaptive({
    /// optionalParameters: {Key? key} , default:none
    super.key,

    /// optionalParameters: {required double value} , default:none
    required super.value,

    /// optionalParameters: {double? secondaryTrackValue} , default:none
    super.secondaryTrackValue,

    /// optionalParameters: {required void Function(double)? onChanged} , default:none
    required super.onChanged,

    /// optionalParameters: {void Function(double)? onChangeStart} , default:none
    super.onChangeStart,

    /// optionalParameters: {void Function(double)? onChangeEnd} , default:none
    super.onChangeEnd,

    /// optionalParameters: {double min = 0.0} , default:processed=DoubleLiteralImpl
    super.min,

    /// optionalParameters: {double max = 1.0} , default:processed=DoubleLiteralImpl
    super.max,

    /// optionalParameters: {int? divisions} , default:none
    super.divisions,

    /// optionalParameters: {String? label} , default:none
    super.label,

    /// optionalParameters: {MouseCursor? mouseCursor} , default:none
    super.mouseCursor,

    /// optionalParameters: {Color? activeColor} , default:none
    super.activeColor,

    /// optionalParameters: {Color? inactiveColor} , default:none
    super.inactiveColor,

    /// optionalParameters: {Color? secondaryActiveColor} , default:none
    super.secondaryActiveColor,

    /// optionalParameters: {Color? thumbColor} , default:none
    super.thumbColor,

    /// optionalParameters: {MaterialStateProperty<Color?>? overlayColor} , default:none
    super.overlayColor,

    /// optionalParameters: {String Function(double)? semanticFormatterCallback} , default:none
    super.semanticFormatterCallback,

    /// optionalParameters: {FocusNode? focusNode} , default:none
    super.focusNode,

    /// optionalParameters: {bool autofocus = false} , default:processed=BooleanLiteralImpl
    super.autofocus,
  })  : mateParams = {
          'key': _i2.BuilderArg<_i3.Key?>(
            name: 'key',
            init: key,
            isNamed: true,
          ),
          'value': _i2.BuilderArg<double>(
            name: 'value',
            init: value,
            isNamed: true,
          ),
          'secondaryTrackValue': _i2.BuilderArg<double?>(
            name: 'secondaryTrackValue',
            init: secondaryTrackValue,
            isNamed: true,
          ),
          'onChanged': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChanged',
            init: onChanged,
            isNamed: true,
          ),
          'onChangeStart': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChangeStart',
            init: onChangeStart,
            isNamed: true,
          ),
          'onChangeEnd': _i2.BuilderArg<_i4.ValueChanged<double>?>(
            name: 'onChangeEnd',
            init: onChangeEnd,
            isNamed: true,
          ),
          'min': _i2.BuilderArg<double>(
            name: 'min',
            init: min,
            isNamed: true,
            defaultValue: 0.0,
          ),
          'max': _i2.BuilderArg<double>(
            name: 'max',
            init: max,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'divisions': _i2.BuilderArg<int?>(
            name: 'divisions',
            init: divisions,
            isNamed: true,
          ),
          'label': _i2.BuilderArg<String?>(
            name: 'label',
            init: label,
            isNamed: true,
          ),
          'mouseCursor': _i2.BuilderArg<_i7.MouseCursor?>(
            name: 'mouseCursor',
            init: mouseCursor,
            isNamed: true,
          ),
          'activeColor': _i2.BuilderArg<_i5.Color?>(
            name: 'activeColor',
            init: activeColor,
            isNamed: true,
          ),
          'inactiveColor': _i2.BuilderArg<_i5.Color?>(
            name: 'inactiveColor',
            init: inactiveColor,
            isNamed: true,
          ),
          'secondaryActiveColor': _i2.BuilderArg<_i5.Color?>(
            name: 'secondaryActiveColor',
            init: secondaryActiveColor,
            isNamed: true,
          ),
          'thumbColor': _i2.BuilderArg<_i5.Color?>(
            name: 'thumbColor',
            init: thumbColor,
            isNamed: true,
          ),
          'overlayColor':
              _i2.BuilderArg<_i6.MaterialStateProperty<_i5.Color?>?>(
            name: 'overlayColor',
            init: overlayColor,
            isNamed: true,
          ),
          'semanticFormatterCallback':
              _i2.BuilderArg<_i8.SemanticFormatterCallback?>(
            name: 'semanticFormatterCallback',
            init: semanticFormatterCallback,
            isNamed: true,
          ),
          'focusNode': _i2.BuilderArg<_i9.FocusNode?>(
            name: 'focusNode',
            init: focusNode,
            isNamed: true,
          ),
          'autofocus': _i2.BuilderArg<bool>(
            name: 'autofocus',
            init: autofocus,
            isNamed: true,
            defaultValue: false,
          ),
        },
        super.adaptive() {
    mateBuilderName = 'Slider.adaptive';
    matePackageUrl = 'package:flutter/material.dart';
    mateBuilder = (p) => Slider$Mate.adaptive(
          key: p.get('key').build(),
          value: p.get('value').build(),
          secondaryTrackValue: p.get('secondaryTrackValue').build(),
          onChanged: p.get('onChanged').build(),
          onChangeStart: p.get('onChangeStart').build(),
          onChangeEnd: p.get('onChangeEnd').build(),
          min: p.get('min').build(),
          max: p.get('max').build(),
          divisions: p.get('divisions').build(),
          label: p.get('label').build(),
          mouseCursor: p.get('mouseCursor').build(),
          activeColor: p.get('activeColor').build(),
          inactiveColor: p.get('inactiveColor').build(),
          secondaryActiveColor: p.get('secondaryActiveColor').build(),
          thumbColor: p.get('thumbColor').build(),
          overlayColor: p.get('overlayColor').build(),
          semanticFormatterCallback: p.get('semanticFormatterCallback').build(),
          focusNode: p.get('focusNode').build(),
          autofocus: p.get('autofocus').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
