// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/selection.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'dart:ui' as _i3;

/// class SelectedContent
class SelectedContent$Mate extends _i1.SelectedContent with _i2.Mate {
  /// SelectedContent SelectedContent({required String plainText})
  SelectedContent$Mate(
      {
      /// optionalParameters: {required String plainText} , default:none
      required super.plainText})
      : mateParams = {
          'plainText': _i2.BuilderArg<String>(
            name: 'plainText',
            init: plainText,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'SelectedContent';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SelectedContent$Mate(plainText: p.get('plainText').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SelectWordSelectionEvent extends SelectionEvent
class SelectWordSelectionEvent$Mate extends _i1.SelectWordSelectionEvent with _i2.Mate {
  /// SelectWordSelectionEvent SelectWordSelectionEvent({required Offset globalPosition})
  SelectWordSelectionEvent$Mate(
      {
      /// optionalParameters: {required Offset globalPosition} , default:none
      required super.globalPosition})
      : mateParams = {
          'globalPosition': _i2.BuilderArg<_i3.Offset>(
            name: 'globalPosition',
            init: globalPosition,
            isNamed: true,
          )
        },
        super() {
    mateBuilderName = 'SelectWordSelectionEvent';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SelectWordSelectionEvent$Mate(globalPosition: p.get('globalPosition').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SelectionEdgeUpdateEvent extends SelectionEvent
class SelectionEdgeUpdateEvent$Mate extends _i1.SelectionEdgeUpdateEvent with _i2.Mate {
  /// SelectionEdgeUpdateEvent SelectionEdgeUpdateEvent.forStart({required Offset globalPosition, TextGranularity? granularity})
  SelectionEdgeUpdateEvent$Mate.forStart({
    /// optionalParameters: {required Offset globalPosition} , default:none
    required super.globalPosition,

    /// optionalParameters: {TextGranularity? granularity} , default:none
    super.granularity,
  })  : mateParams = {
          'globalPosition': _i2.BuilderArg<_i3.Offset>(
            name: 'globalPosition',
            init: globalPosition,
            isNamed: true,
          ),
          'granularity': _i2.BuilderArg<_i1.TextGranularity?>(
            name: 'granularity',
            init: granularity,
            isNamed: true,
          ),
        },
        super.forStart() {
    mateBuilderName = 'SelectionEdgeUpdateEvent.forStart';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SelectionEdgeUpdateEvent$Mate.forStart(
          globalPosition: p.get('globalPosition').build(),
          granularity: p.get('granularity').build(),
        );
  }

  /// SelectionEdgeUpdateEvent SelectionEdgeUpdateEvent.forEnd({required Offset globalPosition, TextGranularity? granularity})
  SelectionEdgeUpdateEvent$Mate.forEnd({
    /// optionalParameters: {required Offset globalPosition} , default:none
    required super.globalPosition,

    /// optionalParameters: {TextGranularity? granularity} , default:none
    super.granularity,
  })  : mateParams = {
          'globalPosition': _i2.BuilderArg<_i3.Offset>(
            name: 'globalPosition',
            init: globalPosition,
            isNamed: true,
          ),
          'granularity': _i2.BuilderArg<_i1.TextGranularity?>(
            name: 'granularity',
            init: granularity,
            isNamed: true,
          ),
        },
        super.forEnd() {
    mateBuilderName = 'SelectionEdgeUpdateEvent.forEnd';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SelectionEdgeUpdateEvent$Mate.forEnd(
          globalPosition: p.get('globalPosition').build(),
          granularity: p.get('granularity').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class GranularlyExtendSelectionEvent extends SelectionEvent
class GranularlyExtendSelectionEvent$Mate extends _i1.GranularlyExtendSelectionEvent with _i2.Mate {
  /// GranularlyExtendSelectionEvent GranularlyExtendSelectionEvent({required bool forward, required bool isEnd, required TextGranularity granularity})
  GranularlyExtendSelectionEvent$Mate({
    /// optionalParameters: {required bool forward} , default:none
    required super.forward,

    /// optionalParameters: {required bool isEnd} , default:none
    required super.isEnd,

    /// optionalParameters: {required TextGranularity granularity} , default:none
    required super.granularity,
  })  : mateParams = {
          'forward': _i2.BuilderArg<bool>(
            name: 'forward',
            init: forward,
            isNamed: true,
          ),
          'isEnd': _i2.BuilderArg<bool>(
            name: 'isEnd',
            init: isEnd,
            isNamed: true,
          ),
          'granularity': _i2.BuilderArg<_i1.TextGranularity>(
            name: 'granularity',
            init: granularity,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'GranularlyExtendSelectionEvent';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => GranularlyExtendSelectionEvent$Mate(
          forward: p.get('forward').build(),
          isEnd: p.get('isEnd').build(),
          granularity: p.get('granularity').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DirectionallyExtendSelectionEvent extends SelectionEvent
class DirectionallyExtendSelectionEvent$Mate extends _i1.DirectionallyExtendSelectionEvent with _i2.Mate {
  /// DirectionallyExtendSelectionEvent DirectionallyExtendSelectionEvent({required double dx, required bool isEnd, required SelectionExtendDirection direction})
  DirectionallyExtendSelectionEvent$Mate({
    /// optionalParameters: {required double dx} , default:none
    required super.dx,

    /// optionalParameters: {required bool isEnd} , default:none
    required super.isEnd,

    /// optionalParameters: {required SelectionExtendDirection direction} , default:none
    required super.direction,
  })  : mateParams = {
          'dx': _i2.BuilderArg<double>(
            name: 'dx',
            init: dx,
            isNamed: true,
          ),
          'isEnd': _i2.BuilderArg<bool>(
            name: 'isEnd',
            init: isEnd,
            isNamed: true,
          ),
          'direction': _i2.BuilderArg<_i1.SelectionExtendDirection>(
            name: 'direction',
            init: direction,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DirectionallyExtendSelectionEvent';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => DirectionallyExtendSelectionEvent$Mate(
          dx: p.get('dx').build(),
          isEnd: p.get('isEnd').build(),
          direction: p.get('direction').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SelectionGeometry
class SelectionGeometry$Mate extends _i1.SelectionGeometry with _i2.Mate {
  /// SelectionGeometry SelectionGeometry({SelectionPoint? startSelectionPoint, SelectionPoint? endSelectionPoint, List<Rect> selectionRects = const <Rect>[], required SelectionStatus status, required bool hasContent})
  SelectionGeometry$Mate({
    /// optionalParameters: {SelectionPoint? startSelectionPoint} , default:none
    super.startSelectionPoint,

    /// optionalParameters: {SelectionPoint? endSelectionPoint} , default:none
    super.endSelectionPoint,

    /// optionalParameters: {List<Rect> selectionRects = const <Rect>[]} , default:unprocessed=ListLiteralImpl
    super.selectionRects,

    /// optionalParameters: {required SelectionStatus status} , default:none
    required super.status,

    /// optionalParameters: {required bool hasContent} , default:none
    required super.hasContent,
  })  : mateParams = {
          'startSelectionPoint': _i2.BuilderArg<_i1.SelectionPoint?>(
            name: 'startSelectionPoint',
            init: startSelectionPoint,
            isNamed: true,
          ),
          'endSelectionPoint': _i2.BuilderArg<_i1.SelectionPoint?>(
            name: 'endSelectionPoint',
            init: endSelectionPoint,
            isNamed: true,
          ),
          'selectionRects': _i2.BuilderArg<List<_i3.Rect>>(
            name: 'selectionRects',
            init: selectionRects,
            isNamed: true,
          ),
          'status': _i2.BuilderArg<_i1.SelectionStatus>(
            name: 'status',
            init: status,
            isNamed: true,
          ),
          'hasContent': _i2.BuilderArg<bool>(
            name: 'hasContent',
            init: hasContent,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SelectionGeometry';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SelectionGeometry$Mate(
          startSelectionPoint: p.get('startSelectionPoint').build(),
          endSelectionPoint: p.get('endSelectionPoint').build(),
          selectionRects: p.get('selectionRects').build(),
          status: p.get('status').build(),
          hasContent: p.get('hasContent').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SelectionPoint with Diagnosticable
class SelectionPoint$Mate extends _i1.SelectionPoint with _i2.Mate {
  /// SelectionPoint SelectionPoint({required Offset localPosition, required double lineHeight, required TextSelectionHandleType handleType})
  SelectionPoint$Mate({
    /// optionalParameters: {required Offset localPosition} , default:none
    required super.localPosition,

    /// optionalParameters: {required double lineHeight} , default:none
    required super.lineHeight,

    /// optionalParameters: {required TextSelectionHandleType handleType} , default:none
    required super.handleType,
  })  : mateParams = {
          'localPosition': _i2.BuilderArg<_i3.Offset>(
            name: 'localPosition',
            init: localPosition,
            isNamed: true,
          ),
          'lineHeight': _i2.BuilderArg<double>(
            name: 'lineHeight',
            init: lineHeight,
            isNamed: true,
          ),
          'handleType': _i2.BuilderArg<_i1.TextSelectionHandleType>(
            name: 'handleType',
            init: handleType,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SelectionPoint';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => SelectionPoint$Mate(
          localPosition: p.get('localPosition').build(),
          lineHeight: p.get('lineHeight').build(),
          handleType: p.get('handleType').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
