// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/editable.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/painting/inline_span.dart' as _i4;
import 'package:flutter/src/foundation/change_notifier.dart' as _i5;
import 'package:flutter/src/rendering/layer.dart' as _i6;
import 'package:flutter/src/painting/strut_style.dart' as _i7;
import 'package:flutter/src/services/text_editing.dart' as _i8;
import 'package:flutter/src/rendering/viewport_offset.dart' as _i9;
import 'package:flutter/src/painting/text_painter.dart' as _i10;
import 'package:flutter/cupertino.dart' as _i11;
import 'package:flutter/animation.dart' as _i12;
import 'package:flutter/src/painting/edge_insets.dart' as _i13;
import 'package:flutter/src/services/text_input.dart' as _i14;
import 'package:flutter/src/rendering/box.dart' as _i15;

/// class TextSelectionPoint
class TextSelectionPoint$Mate extends _i1.TextSelectionPoint with _i2.Mate {
  /// TextSelectionPoint TextSelectionPoint(Offset point, TextDirection? direction)
  TextSelectionPoint$Mate(
    /// requiredParameters: Offset point
    super.point,

    /// requiredParameters: TextDirection? direction
    super.direction,
  )   : mateParams = {
          'point': _i2.BuilderArg<_i3.Offset>(
            name: 'point',
            init: point,
            isNamed: false,
          ),
          'direction': _i2.BuilderArg<_i3.TextDirection?>(
            name: 'direction',
            init: direction,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'TextSelectionPoint';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => TextSelectionPoint$Mate(
          p.get('point').value,
          p.get('direction').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class RenderEditable extends RenderBox with RelayoutWhenSystemFontsChangeMixin, ContainerRenderObjectMixin<RenderBox, TextParentData>, RenderBoxContainerDefaultsMixin<RenderBox, TextParentData> implements TextLayoutMetrics
class RenderEditable$Mate extends _i1.RenderEditable with _i2.Mate {
  /// RenderEditable RenderEditable({InlineSpan? text, required TextDirection textDirection, TextAlign textAlign = TextAlign.start, Color? cursorColor, Color? backgroundCursorColor, ValueNotifier<bool>? showCursor, bool? hasFocus, required LayerLink startHandleLayerLink, required LayerLink endHandleLayerLink, int? maxLines = 1, int? minLines, bool expands = false, StrutStyle? strutStyle, Color? selectionColor, double textScaleFactor = 1.0, TextSelection? selection, required ViewportOffset offset, void Function(Rect)? onCaretChanged, bool ignorePointer = false, bool readOnly = false, bool forceLine = true, TextHeightBehavior? textHeightBehavior, TextWidthBasis textWidthBasis = TextWidthBasis.parent, String obscuringCharacter = '•', bool obscureText = false, Locale? locale, double cursorWidth = 1.0, double? cursorHeight, Radius? cursorRadius, bool paintCursorAboveText = false, Offset cursorOffset = Offset.zero, double devicePixelRatio = 1.0, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, bool? enableInteractiveSelection, EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5), TextRange? promptRectRange, Color? promptRectColor, Clip clipBehavior = Clip.hardEdge, required TextSelectionDelegate textSelectionDelegate, RenderEditablePainter? painter, RenderEditablePainter? foregroundPainter, List<RenderBox>? children})
  RenderEditable$Mate({
    /// optionalParameters: {InlineSpan? text} , default:none
    super.text,

    /// optionalParameters: {required TextDirection textDirection} , default:none
    required super.textDirection,

    /// optionalParameters: {TextAlign textAlign = TextAlign.start} , default:processed=PrefixedIdentifierImpl
    super.textAlign,

    /// optionalParameters: {Color? cursorColor} , default:none
    super.cursorColor,

    /// optionalParameters: {Color? backgroundCursorColor} , default:none
    super.backgroundCursorColor,

    /// optionalParameters: {ValueNotifier<bool>? showCursor} , default:none
    super.showCursor,

    /// optionalParameters: {bool? hasFocus} , default:none
    super.hasFocus,

    /// optionalParameters: {required LayerLink startHandleLayerLink} , default:none
    required super.startHandleLayerLink,

    /// optionalParameters: {required LayerLink endHandleLayerLink} , default:none
    required super.endHandleLayerLink,

    /// optionalParameters: {int? maxLines = 1} , default:processed=IntegerLiteralImpl
    super.maxLines,

    /// optionalParameters: {int? minLines} , default:none
    super.minLines,

    /// optionalParameters: {bool expands = false} , default:processed=BooleanLiteralImpl
    super.expands,

    /// optionalParameters: {StrutStyle? strutStyle} , default:none
    super.strutStyle,

    /// optionalParameters: {Color? selectionColor} , default:none
    super.selectionColor,

    /// optionalParameters: {double textScaleFactor = 1.0} , default:processed=DoubleLiteralImpl
    super.textScaleFactor,

    /// optionalParameters: {TextSelection? selection} , default:none
    super.selection,

    /// optionalParameters: {required ViewportOffset offset} , default:none
    required super.offset,

    /// optionalParameters: {void Function(Rect)? onCaretChanged} , default:none
    super.onCaretChanged,

    /// optionalParameters: {bool ignorePointer = false} , default:processed=BooleanLiteralImpl
    super.ignorePointer,

    /// optionalParameters: {bool readOnly = false} , default:processed=BooleanLiteralImpl
    super.readOnly,

    /// optionalParameters: {bool forceLine = true} , default:processed=BooleanLiteralImpl
    super.forceLine,

    /// optionalParameters: {TextHeightBehavior? textHeightBehavior} , default:none
    super.textHeightBehavior,

    /// optionalParameters: {TextWidthBasis textWidthBasis = TextWidthBasis.parent} , default:processed=PrefixedIdentifierImpl
    super.textWidthBasis,

    /// optionalParameters: {String obscuringCharacter = '•'} , default:processed=SimpleStringLiteralImpl
    super.obscuringCharacter,

    /// optionalParameters: {bool obscureText = false} , default:processed=BooleanLiteralImpl
    super.obscureText,

    /// optionalParameters: {Locale? locale} , default:none
    super.locale,

    /// optionalParameters: {double cursorWidth = 1.0} , default:processed=DoubleLiteralImpl
    super.cursorWidth,

    /// optionalParameters: {double? cursorHeight} , default:none
    super.cursorHeight,

    /// optionalParameters: {Radius? cursorRadius} , default:none
    super.cursorRadius,

    /// optionalParameters: {bool paintCursorAboveText = false} , default:processed=BooleanLiteralImpl
    super.paintCursorAboveText,

    /// optionalParameters: {Offset cursorOffset = Offset.zero} , default:processed=PrefixedIdentifierImpl
    super.cursorOffset,

    /// optionalParameters: {double devicePixelRatio = 1.0} , default:processed=DoubleLiteralImpl
    super.devicePixelRatio,

    /// optionalParameters: {BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionHeightStyle,

    /// optionalParameters: {BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight} , default:unprocessed=PropertyAccessImpl
    super.selectionWidthStyle,

    /// optionalParameters: {bool? enableInteractiveSelection} , default:none
    super.enableInteractiveSelection,

    /// optionalParameters: {EdgeInsets floatingCursorAddedMargin = const EdgeInsets.fromLTRB(4, 4, 4, 5)} , default:unprocessed=InstanceCreationExpressionImpl
    super.floatingCursorAddedMargin,

    /// optionalParameters: {TextRange? promptRectRange} , default:none
    super.promptRectRange,

    /// optionalParameters: {Color? promptRectColor} , default:none
    super.promptRectColor,

    /// optionalParameters: {Clip clipBehavior = Clip.hardEdge} , default:processed=PrefixedIdentifierImpl
    super.clipBehavior,

    /// optionalParameters: {required TextSelectionDelegate textSelectionDelegate} , default:none
    required super.textSelectionDelegate,

    /// optionalParameters: {RenderEditablePainter? painter} , default:none
    super.painter,

    /// optionalParameters: {RenderEditablePainter? foregroundPainter} , default:none
    super.foregroundPainter,

    /// optionalParameters: {List<RenderBox>? children} , default:none
    super.children,
  })  : mateParams = {
          'text': _i2.BuilderArg<_i4.InlineSpan?>(
            name: 'text',
            init: text,
            isNamed: true,
          ),
          'textDirection': _i2.BuilderArg<_i3.TextDirection>(
            name: 'textDirection',
            init: textDirection,
            isNamed: true,
          ),
          'textAlign': _i2.BuilderArg<_i3.TextAlign>(
            name: 'textAlign',
            init: textAlign,
            isNamed: true,
            defaultValue: _i3.TextAlign.start,
          ),
          'cursorColor': _i2.BuilderArg<_i3.Color?>(
            name: 'cursorColor',
            init: cursorColor,
            isNamed: true,
          ),
          'backgroundCursorColor': _i2.BuilderArg<_i3.Color?>(
            name: 'backgroundCursorColor',
            init: backgroundCursorColor,
            isNamed: true,
          ),
          'showCursor': _i2.BuilderArg<_i5.ValueNotifier<bool>?>(
            name: 'showCursor',
            init: showCursor,
            isNamed: true,
          ),
          'hasFocus': _i2.BuilderArg<bool?>(
            name: 'hasFocus',
            init: hasFocus,
            isNamed: true,
          ),
          'startHandleLayerLink': _i2.BuilderArg<_i6.LayerLink>(
            name: 'startHandleLayerLink',
            init: startHandleLayerLink,
            isNamed: true,
          ),
          'endHandleLayerLink': _i2.BuilderArg<_i6.LayerLink>(
            name: 'endHandleLayerLink',
            init: endHandleLayerLink,
            isNamed: true,
          ),
          'maxLines': _i2.BuilderArg<int?>(
            name: 'maxLines',
            init: maxLines,
            isNamed: true,
            defaultValue: 1,
          ),
          'minLines': _i2.BuilderArg<int?>(
            name: 'minLines',
            init: minLines,
            isNamed: true,
          ),
          'expands': _i2.BuilderArg<bool>(
            name: 'expands',
            init: expands,
            isNamed: true,
            defaultValue: false,
          ),
          'strutStyle': _i2.BuilderArg<_i7.StrutStyle?>(
            name: 'strutStyle',
            init: strutStyle,
            isNamed: true,
          ),
          'selectionColor': _i2.BuilderArg<_i3.Color?>(
            name: 'selectionColor',
            init: selectionColor,
            isNamed: true,
          ),
          'textScaleFactor': _i2.BuilderArg<double>(
            name: 'textScaleFactor',
            init: textScaleFactor,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'selection': _i2.BuilderArg<_i8.TextSelection?>(
            name: 'selection',
            init: selection,
            isNamed: true,
          ),
          'offset': _i2.BuilderArg<_i9.ViewportOffset>(
            name: 'offset',
            init: offset,
            isNamed: true,
          ),
          'onCaretChanged': _i2.BuilderArg<_i1.CaretChangedHandler?>(
            name: 'onCaretChanged',
            init: onCaretChanged,
            isNamed: true,
          ),
          'ignorePointer': _i2.BuilderArg<bool>(
            name: 'ignorePointer',
            init: ignorePointer,
            isNamed: true,
            defaultValue: false,
          ),
          'readOnly': _i2.BuilderArg<bool>(
            name: 'readOnly',
            init: readOnly,
            isNamed: true,
            defaultValue: false,
          ),
          'forceLine': _i2.BuilderArg<bool>(
            name: 'forceLine',
            init: forceLine,
            isNamed: true,
            defaultValue: true,
          ),
          'textHeightBehavior': _i2.BuilderArg<_i3.TextHeightBehavior?>(
            name: 'textHeightBehavior',
            init: textHeightBehavior,
            isNamed: true,
          ),
          'textWidthBasis': _i2.BuilderArg<_i10.TextWidthBasis>(
            name: 'textWidthBasis',
            init: textWidthBasis,
            isNamed: true,
            defaultValue: _i11.TextWidthBasis.parent,
          ),
          'obscuringCharacter': _i2.BuilderArg<String>(
            name: 'obscuringCharacter',
            init: obscuringCharacter,
            isNamed: true,
            defaultValue: '•',
          ),
          'obscureText': _i2.BuilderArg<bool>(
            name: 'obscureText',
            init: obscureText,
            isNamed: true,
            defaultValue: false,
          ),
          'locale': _i2.BuilderArg<_i3.Locale?>(
            name: 'locale',
            init: locale,
            isNamed: true,
          ),
          'cursorWidth': _i2.BuilderArg<double>(
            name: 'cursorWidth',
            init: cursorWidth,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'cursorHeight': _i2.BuilderArg<double?>(
            name: 'cursorHeight',
            init: cursorHeight,
            isNamed: true,
          ),
          'cursorRadius': _i2.BuilderArg<_i3.Radius?>(
            name: 'cursorRadius',
            init: cursorRadius,
            isNamed: true,
          ),
          'paintCursorAboveText': _i2.BuilderArg<bool>(
            name: 'paintCursorAboveText',
            init: paintCursorAboveText,
            isNamed: true,
            defaultValue: false,
          ),
          'cursorOffset': _i2.BuilderArg<_i3.Offset>(
            name: 'cursorOffset',
            init: cursorOffset,
            isNamed: true,
            defaultValue: _i12.Offset.zero,
          ),
          'devicePixelRatio': _i2.BuilderArg<double>(
            name: 'devicePixelRatio',
            init: devicePixelRatio,
            isNamed: true,
            defaultValue: 1.0,
          ),
          'selectionHeightStyle': _i2.BuilderArg<_i3.BoxHeightStyle>(
            name: 'selectionHeightStyle',
            init: selectionHeightStyle,
            isNamed: true,
          ),
          'selectionWidthStyle': _i2.BuilderArg<_i3.BoxWidthStyle>(
            name: 'selectionWidthStyle',
            init: selectionWidthStyle,
            isNamed: true,
          ),
          'enableInteractiveSelection': _i2.BuilderArg<bool?>(
            name: 'enableInteractiveSelection',
            init: enableInteractiveSelection,
            isNamed: true,
          ),
          'floatingCursorAddedMargin': _i2.BuilderArg<_i13.EdgeInsets>(
            name: 'floatingCursorAddedMargin',
            init: floatingCursorAddedMargin,
            isNamed: true,
          ),
          'promptRectRange': _i2.BuilderArg<_i3.TextRange?>(
            name: 'promptRectRange',
            init: promptRectRange,
            isNamed: true,
          ),
          'promptRectColor': _i2.BuilderArg<_i3.Color?>(
            name: 'promptRectColor',
            init: promptRectColor,
            isNamed: true,
          ),
          'clipBehavior': _i2.BuilderArg<_i3.Clip>(
            name: 'clipBehavior',
            init: clipBehavior,
            isNamed: true,
            defaultValue: _i3.Clip.hardEdge,
          ),
          'textSelectionDelegate': _i2.BuilderArg<_i14.TextSelectionDelegate>(
            name: 'textSelectionDelegate',
            init: textSelectionDelegate,
            isNamed: true,
          ),
          'painter': _i2.BuilderArg<_i1.RenderEditablePainter?>(
            name: 'painter',
            init: painter,
            isNamed: true,
          ),
          'foregroundPainter': _i2.BuilderArg<_i1.RenderEditablePainter?>(
            name: 'foregroundPainter',
            init: foregroundPainter,
            isNamed: true,
          ),
          'children': _i2.BuilderArg<List<_i15.RenderBox>?>(
            name: 'children',
            init: children,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'RenderEditable';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => RenderEditable$Mate(
          text: p.get('text').build(),
          textDirection: p.get('textDirection').build(),
          textAlign: p.get('textAlign').build(),
          cursorColor: p.get('cursorColor').build(),
          backgroundCursorColor: p.get('backgroundCursorColor').build(),
          showCursor: p.get('showCursor').build(),
          hasFocus: p.get('hasFocus').build(),
          startHandleLayerLink: p.get('startHandleLayerLink').build(),
          endHandleLayerLink: p.get('endHandleLayerLink').build(),
          maxLines: p.get('maxLines').build(),
          minLines: p.get('minLines').build(),
          expands: p.get('expands').build(),
          strutStyle: p.get('strutStyle').build(),
          selectionColor: p.get('selectionColor').build(),
          textScaleFactor: p.get('textScaleFactor').build(),
          selection: p.get('selection').build(),
          offset: p.get('offset').build(),
          onCaretChanged: p.get('onCaretChanged').build(),
          ignorePointer: p.get('ignorePointer').build(),
          readOnly: p.get('readOnly').build(),
          forceLine: p.get('forceLine').build(),
          textHeightBehavior: p.get('textHeightBehavior').build(),
          textWidthBasis: p.get('textWidthBasis').build(),
          obscuringCharacter: p.get('obscuringCharacter').build(),
          obscureText: p.get('obscureText').build(),
          locale: p.get('locale').build(),
          cursorWidth: p.get('cursorWidth').build(),
          cursorHeight: p.get('cursorHeight').build(),
          cursorRadius: p.get('cursorRadius').build(),
          paintCursorAboveText: p.get('paintCursorAboveText').build(),
          cursorOffset: p.get('cursorOffset').build(),
          devicePixelRatio: p.get('devicePixelRatio').build(),
          selectionHeightStyle: p.get('selectionHeightStyle').build(),
          selectionWidthStyle: p.get('selectionWidthStyle').build(),
          enableInteractiveSelection: p.get('enableInteractiveSelection').build(),
          floatingCursorAddedMargin: p.get('floatingCursorAddedMargin').build(),
          promptRectRange: p.get('promptRectRange').build(),
          promptRectColor: p.get('promptRectColor').build(),
          clipBehavior: p.get('clipBehavior').build(),
          textSelectionDelegate: p.get('textSelectionDelegate').build(),
          painter: p.get('painter').build(),
          foregroundPainter: p.get('foregroundPainter').build(),
          children: p.get('children').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
