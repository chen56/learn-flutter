// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/rendering/object.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'package:flutter/src/rendering/layer.dart' as _i3;
import 'dart:ui' as _i4;
import 'package:flutter/src/semantics/semantics.dart' as _i5;
export 'package:flutter/painting.dart';

/// class PaintingContext extends ClipContext
class PaintingContext$Mate extends _i1.PaintingContext with _i2.Mate {
  /// PaintingContext PaintingContext(ContainerLayer _containerLayer, Rect estimatedBounds)
  PaintingContext$Mate(
    /// requiredParameters: ContainerLayer _containerLayer
    super._containerLayer,

    /// requiredParameters: Rect estimatedBounds
    super.estimatedBounds,
  )   : mateParams = {
          '_containerLayer': _i2.BuilderArg<_i3.ContainerLayer>(
            name: '_containerLayer',
            init: _containerLayer,
            isNamed: false,
          ),
          'estimatedBounds': _i2.BuilderArg<_i4.Rect>(
            name: 'estimatedBounds',
            init: estimatedBounds,
            isNamed: false,
          ),
        },
        super() {
    mateBuilderName = 'PaintingContext';
    matePackageUrl = 'package:flutter/cupertino.dart';
    mateBuilder = (p) => PaintingContext$Mate(
          p.get('_containerLayer').value,
          p.get('estimatedBounds').value,
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class PipelineOwner
class PipelineOwner$Mate extends _i1.PipelineOwner with _i2.Mate {
  /// PipelineOwner PipelineOwner({void Function()? onNeedVisualUpdate, void Function()? onSemanticsOwnerCreated, void Function(SemanticsUpdate)? onSemanticsUpdate, void Function()? onSemanticsOwnerDisposed})
  PipelineOwner$Mate({
    /// optionalParameters: {void Function()? onNeedVisualUpdate} , default:none
    super.onNeedVisualUpdate,

    /// optionalParameters: {void Function()? onSemanticsOwnerCreated} , default:none
    super.onSemanticsOwnerCreated,

    /// optionalParameters: {void Function(SemanticsUpdate)? onSemanticsUpdate} , default:none
    super.onSemanticsUpdate,

    /// optionalParameters: {void Function()? onSemanticsOwnerDisposed} , default:none
    super.onSemanticsOwnerDisposed,
  })  : mateParams = {
          'onNeedVisualUpdate': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onNeedVisualUpdate',
            init: onNeedVisualUpdate,
            isNamed: true,
          ),
          'onSemanticsOwnerCreated': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onSemanticsOwnerCreated',
            init: onSemanticsOwnerCreated,
            isNamed: true,
          ),
          'onSemanticsUpdate': _i2.BuilderArg<_i5.SemanticsUpdateCallback?>(
            name: 'onSemanticsUpdate',
            init: onSemanticsUpdate,
            isNamed: true,
          ),
          'onSemanticsOwnerDisposed': _i2.BuilderArg<_i4.VoidCallback?>(
            name: 'onSemanticsOwnerDisposed',
            init: onSemanticsOwnerDisposed,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'PipelineOwner';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => PipelineOwner$Mate(
          onNeedVisualUpdate: p.get('onNeedVisualUpdate').build(),
          onSemanticsOwnerCreated: p.get('onSemanticsOwnerCreated').build(),
          onSemanticsUpdate: p.get('onSemanticsUpdate').build(),
          onSemanticsOwnerDisposed: p.get('onSemanticsOwnerDisposed').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class DiagnosticsDebugCreator extends DiagnosticsProperty<Object>
class DiagnosticsDebugCreator$Mate extends _i1.DiagnosticsDebugCreator
    with _i2.Mate {
  /// DiagnosticsDebugCreator DiagnosticsDebugCreator(Object value)
  DiagnosticsDebugCreator$Mate(

      /// requiredParameters: Object value
      super.value)
      : mateParams = {
          'value': _i2.BuilderArg<Object>(
            name: 'value',
            init: value,
            isNamed: false,
          )
        },
        super() {
    mateBuilderName = 'DiagnosticsDebugCreator';
    matePackageUrl = 'package:flutter/rendering.dart';
    mateBuilder = (p) => DiagnosticsDebugCreator$Mate(p.get('value').value);
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
