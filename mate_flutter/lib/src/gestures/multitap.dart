// /// Generated by gen_maters.dart, please don't edit!

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/src/gestures/multitap.dart' as _i1;
import 'package:mate/mate_core.dart' as _i2;
import 'dart:ui' as _i3;
import 'package:flutter/src/gestures/recognizer.dart' as _i4;
import 'package:flutter/animation.dart' as _i5;

/// class DoubleTapGestureRecognizer extends GestureRecognizer
class DoubleTapGestureRecognizer$Mate extends _i1.DoubleTapGestureRecognizer with _i2.Mate {
  /// DoubleTapGestureRecognizer DoubleTapGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  DoubleTapGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , default:none
    super.debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , default:none
    super.supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , default:none
    super.allowedButtonsFilter,
  })  : mateParams = {
          'debugOwner': _i2.BuilderArg<Object?>(
            name: 'debugOwner',
            init: debugOwner,
            isNamed: true,
          ),
          'supportedDevices': _i2.BuilderArg<Set<_i3.PointerDeviceKind>?>(
            name: 'supportedDevices',
            init: supportedDevices,
            isNamed: true,
          ),
          'allowedButtonsFilter': _i2.BuilderArg<_i4.AllowedButtonsFilter?>(
            name: 'allowedButtonsFilter',
            init: allowedButtonsFilter,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'DoubleTapGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => DoubleTapGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class MultiTapGestureRecognizer extends GestureRecognizer
class MultiTapGestureRecognizer$Mate extends _i1.MultiTapGestureRecognizer with _i2.Mate {
  /// MultiTapGestureRecognizer MultiTapGestureRecognizer({Duration longTapDelay = Duration.zero, Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  MultiTapGestureRecognizer$Mate({
    /// optionalParameters: {Duration longTapDelay = Duration.zero} , default:processed=PrefixedIdentifierImpl
    super.longTapDelay,

    /// optionalParameters: {Object? debugOwner} , default:none
    super.debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , default:none
    super.supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , default:none
    super.allowedButtonsFilter,
  })  : mateParams = {
          'longTapDelay': _i2.BuilderArg<Duration>(
            name: 'longTapDelay',
            init: longTapDelay,
            isNamed: true,
            defaultValue: Duration.zero,
          ),
          'debugOwner': _i2.BuilderArg<Object?>(
            name: 'debugOwner',
            init: debugOwner,
            isNamed: true,
          ),
          'supportedDevices': _i2.BuilderArg<Set<_i3.PointerDeviceKind>?>(
            name: 'supportedDevices',
            init: supportedDevices,
            isNamed: true,
          ),
          'allowedButtonsFilter': _i2.BuilderArg<_i4.AllowedButtonsFilter?>(
            name: 'allowedButtonsFilter',
            init: allowedButtonsFilter,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'MultiTapGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => MultiTapGestureRecognizer$Mate(
          longTapDelay: p.get('longTapDelay').build(),
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SerialTapDownDetails
class SerialTapDownDetails$Mate extends _i1.SerialTapDownDetails with _i2.Mate {
  /// SerialTapDownDetails SerialTapDownDetails({Offset globalPosition = Offset.zero, Offset? localPosition, required PointerDeviceKind kind, int buttons = 0, int count = 1})
  SerialTapDownDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , default:processed=PrefixedIdentifierImpl
    super.globalPosition,

    /// optionalParameters: {Offset? localPosition} , default:none
    super.localPosition,

    /// optionalParameters: {required PointerDeviceKind kind} , default:none
    required super.kind,

    /// optionalParameters: {int buttons = 0} , default:processed=IntegerLiteralImpl
    super.buttons,

    /// optionalParameters: {int count = 1} , default:processed=IntegerLiteralImpl
    super.count,
  })  : mateParams = {
          'globalPosition': _i2.BuilderArg<_i3.Offset>(
            name: 'globalPosition',
            init: globalPosition,
            isNamed: true,
            defaultValue: _i5.Offset.zero,
          ),
          'localPosition': _i2.BuilderArg<_i3.Offset?>(
            name: 'localPosition',
            init: localPosition,
            isNamed: true,
          ),
          'kind': _i2.BuilderArg<_i3.PointerDeviceKind>(
            name: 'kind',
            init: kind,
            isNamed: true,
          ),
          'buttons': _i2.BuilderArg<int>(
            name: 'buttons',
            init: buttons,
            isNamed: true,
            defaultValue: 0,
          ),
          'count': _i2.BuilderArg<int>(
            name: 'count',
            init: count,
            isNamed: true,
            defaultValue: 1,
          ),
        },
        super() {
    mateBuilderName = 'SerialTapDownDetails';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapDownDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
          buttons: p.get('buttons').build(),
          count: p.get('count').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SerialTapCancelDetails
class SerialTapCancelDetails$Mate extends _i1.SerialTapCancelDetails with _i2.Mate {
  /// SerialTapCancelDetails SerialTapCancelDetails({int count = 1})
  SerialTapCancelDetails$Mate(
      {
      /// optionalParameters: {int count = 1} , default:processed=IntegerLiteralImpl
      super.count})
      : mateParams = {
          'count': _i2.BuilderArg<int>(
            name: 'count',
            init: count,
            isNamed: true,
            defaultValue: 1,
          )
        },
        super() {
    mateBuilderName = 'SerialTapCancelDetails';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapCancelDetails$Mate(count: p.get('count').build());
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SerialTapUpDetails
class SerialTapUpDetails$Mate extends _i1.SerialTapUpDetails with _i2.Mate {
  /// SerialTapUpDetails SerialTapUpDetails({Offset globalPosition = Offset.zero, Offset? localPosition, PointerDeviceKind? kind, int count = 1})
  SerialTapUpDetails$Mate({
    /// optionalParameters: {Offset globalPosition = Offset.zero} , default:processed=PrefixedIdentifierImpl
    super.globalPosition,

    /// optionalParameters: {Offset? localPosition} , default:none
    super.localPosition,

    /// optionalParameters: {PointerDeviceKind? kind} , default:none
    super.kind,

    /// optionalParameters: {int count = 1} , default:processed=IntegerLiteralImpl
    super.count,
  })  : mateParams = {
          'globalPosition': _i2.BuilderArg<_i3.Offset>(
            name: 'globalPosition',
            init: globalPosition,
            isNamed: true,
            defaultValue: _i5.Offset.zero,
          ),
          'localPosition': _i2.BuilderArg<_i3.Offset?>(
            name: 'localPosition',
            init: localPosition,
            isNamed: true,
          ),
          'kind': _i2.BuilderArg<_i3.PointerDeviceKind?>(
            name: 'kind',
            init: kind,
            isNamed: true,
          ),
          'count': _i2.BuilderArg<int>(
            name: 'count',
            init: count,
            isNamed: true,
            defaultValue: 1,
          ),
        },
        super() {
    mateBuilderName = 'SerialTapUpDetails';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapUpDetails$Mate(
          globalPosition: p.get('globalPosition').build(),
          localPosition: p.get('localPosition').build(),
          kind: p.get('kind').build(),
          count: p.get('count').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}

/// class SerialTapGestureRecognizer extends GestureRecognizer
class SerialTapGestureRecognizer$Mate extends _i1.SerialTapGestureRecognizer with _i2.Mate {
  /// SerialTapGestureRecognizer SerialTapGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, bool Function(int)? allowedButtonsFilter})
  SerialTapGestureRecognizer$Mate({
    /// optionalParameters: {Object? debugOwner} , default:none
    super.debugOwner,

    /// optionalParameters: {Set<PointerDeviceKind>? supportedDevices} , default:none
    super.supportedDevices,

    /// optionalParameters: {bool Function(int)? allowedButtonsFilter} , default:none
    super.allowedButtonsFilter,
  })  : mateParams = {
          'debugOwner': _i2.BuilderArg<Object?>(
            name: 'debugOwner',
            init: debugOwner,
            isNamed: true,
          ),
          'supportedDevices': _i2.BuilderArg<Set<_i3.PointerDeviceKind>?>(
            name: 'supportedDevices',
            init: supportedDevices,
            isNamed: true,
          ),
          'allowedButtonsFilter': _i2.BuilderArg<_i4.AllowedButtonsFilter?>(
            name: 'allowedButtonsFilter',
            init: allowedButtonsFilter,
            isNamed: true,
          ),
        },
        super() {
    mateBuilderName = 'SerialTapGestureRecognizer';
    matePackageUrl = 'package:flutter/gestures.dart';
    mateBuilder = (p) => SerialTapGestureRecognizer$Mate(
          debugOwner: p.get('debugOwner').build(),
          supportedDevices: p.get('supportedDevices').build(),
          allowedButtonsFilter: p.get('allowedButtonsFilter').build(),
        );
  }

  @override
  final Map<String, _i2.BuilderArg> mateParams;
}
